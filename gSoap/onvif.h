/* gSoap/onvif.h
   Generated by wsdl2h 2.8.78 from WS/device.wsdl WS/event.wsdl WS/ws-discovery.wsdl WS/onvif.xsd WS/sensors.xsd and WS/typeMap.dat
   2019-03-11 21:44:58 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on gSoap/onvif.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++11,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// dom.h declares the DOM xsd__anyType object (compiler and link with dom.cpp)
#import "dom.h"
#import "wsa5.h"	// wsa5 = <http://www.w3.org/2005/08/addressing>

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

tds = "http://www.onvif.org/ver10/device/wsdl"
tt = "http://www.onvif.org/ver10/schema"
wsnt = "http://docs.oasis-open.org/wsn/b-2"
xop = "http://www.w3.org/2004/08/xop/include"
wsrfbf = "http://docs.oasis-open.org/wsrf/bf-2"
wstop = "http://docs.oasis-open.org/wsn/t-1"
tev = "http://www.onvif.org/ver10/events/wsdl"
ns1 = "http://docs.oasis-open.org/wsrf/rw-2"
wsrf = "http://docs.oasis-open.org/wsrf/r-2"
wsd = "http://schemas.xmlsoap.org/ws/2005/04/discovery"
wsa = "http://schemas.xmlsoap.org/ws/2004/08/addressing"
tmk = "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors"

*/

#define SOAP_NAMESPACE_OF_tds	"http://www.onvif.org/ver10/device/wsdl"
//gsoap tds   schema namespace:	http://www.onvif.org/ver10/device/wsdl
//gsoap tds   schema elementForm:	qualified
//gsoap tds   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
//gsoap tt    schema namespace:	http://www.onvif.org/ver10/schema
//gsoap tt    schema elementForm:	qualified
//gsoap tt    schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
//gsoap wsnt  schema namespace:	http://docs.oasis-open.org/wsn/b-2
//gsoap wsnt  schema elementForm:	qualified
//gsoap wsnt  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_xop	"http://www.w3.org/2004/08/xop/include"
//gsoap xop   schema namespace:	http://www.w3.org/2004/08/xop/include
//gsoap xop   schema form:	unqualified

#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
//gsoap wsrfbf schema namespace:	http://docs.oasis-open.org/wsrf/bf-2
//gsoap wsrfbf schema elementForm:	qualified
//gsoap wsrfbf schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
//gsoap wstop schema namespace:	http://docs.oasis-open.org/wsn/t-1
//gsoap wstop schema elementForm:	qualified
//gsoap wstop schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_tev	"http://www.onvif.org/ver10/events/wsdl"
//gsoap tev   schema namespace:	http://www.onvif.org/ver10/events/wsdl
//gsoap tev   schema elementForm:	qualified
//gsoap tev   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://docs.oasis-open.org/wsrf/rw-2"
//gsoap ns1   schema namespace:	http://docs.oasis-open.org/wsrf/rw-2
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wsrf	"http://docs.oasis-open.org/wsrf/r-2"
//gsoap wsrf  schema namespace:	http://docs.oasis-open.org/wsrf/r-2
//gsoap wsrf  schema elementForm:	qualified
//gsoap wsrf  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wsd	"http://schemas.xmlsoap.org/ws/2005/04/discovery"
//gsoap wsd   schema namespace:	http://schemas.xmlsoap.org/ws/2005/04/discovery
//gsoap wsd   schema elementForm:	qualified
//gsoap wsd   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wsa	"http://schemas.xmlsoap.org/ws/2004/08/addressing"
//gsoap wsa   schema namespace:	http://schemas.xmlsoap.org/ws/2004/08/addressing
//gsoap wsa   schema elementForm:	qualified
//gsoap wsa   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_tmk	"http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors"
//gsoap tmk   schema namespace:	http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors
//gsoap tmk   schema elementForm:	qualified
//gsoap tmk   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "xs:QName".
typedef std::string xsd__QName;

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{ public:
    unsigned char *__ptr;
    int __size;
    char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};

/// Built-in type "xs:dateTime".
#import "struct_timeval.h"

/// Built-in type "xs:duration".
#import "chrono_duration.h"

/// Built-in type "xs:hexBinary".
class xsd__hexBinary
{ public:
    unsigned char *__ptr;
    int __size;
};

// Imported type ""http://www.w3.org/2005/08/addressing":EndpointReferenceType" defined by wsa5__EndpointReferenceType.

/// Primitive built-in type "SOAP-ENV:Envelope".
typedef std::string SOAP_ENV__Envelope;

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Class wrapper xsd__ID__ for built-in type "xs:ID" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__ID__ or a derived type.  Use option -P to remove this class.
class xsd__ID__ : public xsd__anyType
{ public:
    xsd__ID                              __item                        ;
};

/// Primitive built-in type "xs:IDREFS".
typedef std::string xsd__IDREFS;

/// Class wrapper xsd__IDREFS__ for built-in type "xs:IDREFS" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__IDREFS__ or a derived type.  Use option -P to remove this class.
class xsd__IDREFS__ : public xsd__anyType
{ public:
    xsd__IDREFS                          __item                        ;
};

/// Primitive built-in type "xs:NCName".
typedef std::string xsd__NCName;

/// Class wrapper xsd__NCName__ for built-in type "xs:NCName" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__NCName__ or a derived type.  Use option -P to remove this class.
class xsd__NCName__ : public xsd__anyType
{ public:
    xsd__NCName                          __item                        ;
};

/// Class wrapper xsd__QName__ for built-in type "xs:QName" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__QName__ or a derived type.  Use option -P to remove this class.
class xsd__QName__ : public xsd__anyType
{ public:
    xsd__QName                           __item                        ;
};

/// Primitive built-in type "xs:anySimpleType".
typedef std::string xsd__anySimpleType;

/// Class wrapper xsd__anySimpleType__ for built-in type "xs:anySimpleType" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__anySimpleType__ or a derived type.  Use option -P to remove this class.
class xsd__anySimpleType__ : public xsd__anyType
{ public:
    xsd__anySimpleType                   __item                        ;
};

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Class wrapper xsd__anyURI__ for built-in type "xs:anyURI" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__anyURI__ or a derived type.  Use option -P to remove this class.
class xsd__anyURI__ : public xsd__anyType
{ public:
    xsd__anyURI                          __item                        ;
};

/// Class wrapper xsd__base64Binary__ for built-in type "xs:base64Binary" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__base64Binary__ or a derived type.  Use option -P to remove this class.
class xsd__base64Binary__ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item                        ;
};

/// Class wrapper xsd__boolean_ for built-in type "xs:boolean" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__boolean_ or a derived type.  Use option -P to remove this class.
class xsd__boolean_ : public xsd__anyType
{ public:
    bool                                 __item                        ;
};

/// Class wrapper xsd__dateTime__ for built-in type "xs:dateTime" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__dateTime__ or a derived type.  Use option -P to remove this class.
class xsd__dateTime__ : public xsd__anyType
{ public:
    xsd__dateTime                        __item                        ;
};

/// Class wrapper xsd__double_ for built-in type "xs:double" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__double_ or a derived type.  Use option -P to remove this class.
class xsd__double_ : public xsd__anyType
{ public:
    double                               __item                        ;
};

/// Class wrapper xsd__duration__ for built-in type "xs:duration" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__duration__ or a derived type.  Use option -P to remove this class.
class xsd__duration__ : public xsd__anyType
{ public:
    xsd__duration                        __item                        ;
};

/// Class wrapper xsd__float_ for built-in type "xs:float" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__float_ or a derived type.  Use option -P to remove this class.
class xsd__float_ : public xsd__anyType
{ public:
    float                                __item                        ;
};

/// Class wrapper xsd__hexBinary__ for built-in type "xs:hexBinary" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__hexBinary__ or a derived type.  Use option -P to remove this class.
class xsd__hexBinary__ : public xsd__anyType
{ public:
    xsd__hexBinary                       __item                        ;
};

/// Class wrapper xsd__int_ for built-in type "xs:int" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__int_ or a derived type.  Use option -P to remove this class.
class xsd__int_ : public xsd__anyType
{ public:
    int                                  __item                        ;
};

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;

/// Class wrapper xsd__integer__ for built-in type "xs:integer" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__integer__ or a derived type.  Use option -P to remove this class.
class xsd__integer__ : public xsd__anyType
{ public:
    xsd__integer                         __item                        ;
};

/// Primitive built-in type "xs:nonNegativeInteger".
typedef std::string xsd__nonNegativeInteger;

/// Class wrapper xsd__nonNegativeInteger__ for built-in type "xs:nonNegativeInteger" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__nonNegativeInteger__ or a derived type.  Use option -P to remove this class.
class xsd__nonNegativeInteger__ : public xsd__anyType
{ public:
    xsd__nonNegativeInteger              __item                        ;
};

/// Class wrapper xsd__string_ for built-in type "xs:string" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__string_ or a derived type.  Use option -P to remove this class.
class xsd__string_ : public xsd__anyType
{ public:
    std::string                          __item                        ;
};

/// Primitive built-in type "xs:token".
typedef std::string xsd__token;

/// Class wrapper xsd__token__ for built-in type "xs:token" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__token__ or a derived type.  Use option -P to remove this class.
class xsd__token__ : public xsd__anyType
{ public:
    xsd__token                           __item                        ;
};

/// Class wrapper xsd__unsignedInt_ for built-in type "xs:unsignedInt" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedInt_ or a derived type.  Use option -P to remove this class.
class xsd__unsignedInt_ : public xsd__anyType
{ public:
    unsigned int                         __item                        ;
};

/// Built-in attribute "xmime:contentType".
typedef std::string _xmime__contentType;

/// Built-in attribute "xml:lang".
typedef std::string _xml__lang;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class tds__Service;

class tds__DeviceServiceCapabilities;

class tds__NetworkCapabilities;

class tds__SecurityCapabilities;

class tds__SystemCapabilities;

class tds__MiscCapabilities;

class tds__UserCredential;

class tds__StorageConfigurationData;

class tds__StorageConfiguration;

class _tds__GetServices;

class _tds__GetServicesResponse;

class _tds__GetServiceCapabilities;

class _tds__GetServiceCapabilitiesResponse;

class _tds__GetDeviceInformation;

class _tds__GetDeviceInformationResponse;

class _tds__SetSystemDateAndTime;

class _tds__SetSystemDateAndTimeResponse;

class _tds__GetSystemDateAndTime;

class _tds__GetSystemDateAndTimeResponse;

class _tds__SetSystemFactoryDefault;

class _tds__SetSystemFactoryDefaultResponse;

class _tds__UpgradeSystemFirmware;

class _tds__UpgradeSystemFirmwareResponse;

class _tds__SystemReboot;

class _tds__SystemRebootResponse;

class _tds__RestoreSystem;

class _tds__RestoreSystemResponse;

class _tds__GetSystemBackup;

class _tds__GetSystemBackupResponse;

class _tds__GetSystemSupportInformation;

class _tds__GetSystemSupportInformationResponse;

class _tds__GetSystemLog;

class _tds__GetSystemLogResponse;

class _tds__GetScopes;

class _tds__GetScopesResponse;

class _tds__SetScopes;

class _tds__SetScopesResponse;

class _tds__AddScopes;

class _tds__AddScopesResponse;

class _tds__RemoveScopes;

class _tds__RemoveScopesResponse;

class _tds__GetDiscoveryMode;

class _tds__GetDiscoveryModeResponse;

class _tds__SetDiscoveryMode;

class _tds__SetDiscoveryModeResponse;

class _tds__GetRemoteDiscoveryMode;

class _tds__GetRemoteDiscoveryModeResponse;

class _tds__SetRemoteDiscoveryMode;

class _tds__SetRemoteDiscoveryModeResponse;

class _tds__GetDPAddresses;

class _tds__GetDPAddressesResponse;

class _tds__SetDPAddresses;

class _tds__SetDPAddressesResponse;

class _tds__GetEndpointReference;

class _tds__GetEndpointReferenceResponse;

class _tds__GetRemoteUser;

class _tds__GetRemoteUserResponse;

class _tds__SetRemoteUser;

class _tds__SetRemoteUserResponse;

class _tds__GetUsers;

class _tds__GetUsersResponse;

class _tds__CreateUsers;

class _tds__CreateUsersResponse;

class _tds__DeleteUsers;

class _tds__DeleteUsersResponse;

class _tds__SetUser;

class _tds__SetUserResponse;

class _tds__GetWsdlUrl;

class _tds__GetWsdlUrlResponse;

class _tds__GetCapabilities;

class _tds__GetCapabilitiesResponse;

class _tds__GetHostname;

class _tds__GetHostnameResponse;

class _tds__SetHostname;

class _tds__SetHostnameResponse;

class _tds__SetHostnameFromDHCP;

class _tds__SetHostnameFromDHCPResponse;

class _tds__GetDNS;

class _tds__GetDNSResponse;

class _tds__SetDNS;

class _tds__SetDNSResponse;

class _tds__GetNTP;

class _tds__GetNTPResponse;

class _tds__SetNTP;

class _tds__SetNTPResponse;

class _tds__GetDynamicDNS;

class _tds__GetDynamicDNSResponse;

class _tds__SetDynamicDNS;

class _tds__SetDynamicDNSResponse;

class _tds__GetNetworkInterfaces;

class _tds__GetNetworkInterfacesResponse;

class _tds__SetNetworkInterfaces;

class _tds__SetNetworkInterfacesResponse;

class _tds__GetNetworkProtocols;

class _tds__GetNetworkProtocolsResponse;

class _tds__SetNetworkProtocols;

class _tds__SetNetworkProtocolsResponse;

class _tds__GetNetworkDefaultGateway;

class _tds__GetNetworkDefaultGatewayResponse;

class _tds__SetNetworkDefaultGateway;

class _tds__SetNetworkDefaultGatewayResponse;

class _tds__GetZeroConfiguration;

class _tds__GetZeroConfigurationResponse;

class _tds__SetZeroConfiguration;

class _tds__SetZeroConfigurationResponse;

class _tds__GetIPAddressFilter;

class _tds__GetIPAddressFilterResponse;

class _tds__SetIPAddressFilter;

class _tds__SetIPAddressFilterResponse;

class _tds__AddIPAddressFilter;

class _tds__AddIPAddressFilterResponse;

class _tds__RemoveIPAddressFilter;

class _tds__RemoveIPAddressFilterResponse;

class _tds__GetAccessPolicy;

class _tds__GetAccessPolicyResponse;

class _tds__SetAccessPolicy;

class _tds__SetAccessPolicyResponse;

class _tds__CreateCertificate;

class _tds__CreateCertificateResponse;

class _tds__GetCertificates;

class _tds__GetCertificatesResponse;

class _tds__GetCertificatesStatus;

class _tds__GetCertificatesStatusResponse;

class _tds__SetCertificatesStatus;

class _tds__SetCertificatesStatusResponse;

class _tds__DeleteCertificates;

class _tds__DeleteCertificatesResponse;

class _tds__GetPkcs10Request;

class _tds__GetPkcs10RequestResponse;

class _tds__LoadCertificates;

class _tds__LoadCertificatesResponse;

class _tds__GetClientCertificateMode;

class _tds__GetClientCertificateModeResponse;

class _tds__SetClientCertificateMode;

class _tds__SetClientCertificateModeResponse;

class _tds__GetCACertificates;

class _tds__GetCACertificatesResponse;

class _tds__LoadCertificateWithPrivateKey;

class _tds__LoadCertificateWithPrivateKeyResponse;

class _tds__GetCertificateInformation;

class _tds__GetCertificateInformationResponse;

class _tds__LoadCACertificates;

class _tds__LoadCACertificatesResponse;

class _tds__CreateDot1XConfiguration;

class _tds__CreateDot1XConfigurationResponse;

class _tds__SetDot1XConfiguration;

class _tds__SetDot1XConfigurationResponse;

class _tds__GetDot1XConfiguration;

class _tds__GetDot1XConfigurationResponse;

class _tds__GetDot1XConfigurations;

class _tds__GetDot1XConfigurationsResponse;

class _tds__DeleteDot1XConfiguration;

class _tds__DeleteDot1XConfigurationResponse;

class _tds__GetRelayOutputs;

class _tds__GetRelayOutputsResponse;

class _tds__SetRelayOutputSettings;

class _tds__SetRelayOutputSettingsResponse;

class _tds__SetRelayOutputState;

class _tds__SetRelayOutputStateResponse;

class _tds__SendAuxiliaryCommand;

class _tds__SendAuxiliaryCommandResponse;

class _tds__GetDot11Capabilities;

class _tds__GetDot11CapabilitiesResponse;

class _tds__GetDot11Status;

class _tds__GetDot11StatusResponse;

class _tds__ScanAvailableDot11Networks;

class _tds__ScanAvailableDot11NetworksResponse;

class _tds__GetSystemUris;

class _tds__GetSystemUrisResponse;

class _tds__StartFirmwareUpgrade;

class _tds__StartFirmwareUpgradeResponse;

class _tds__StartSystemRestore;

class _tds__StartSystemRestoreResponse;

class _tds__GetStorageConfigurations;

class _tds__GetStorageConfigurationsResponse;

class _tds__CreateStorageConfiguration;

class _tds__CreateStorageConfigurationResponse;

class _tds__GetStorageConfiguration;

class _tds__GetStorageConfigurationResponse;

class _tds__SetStorageConfiguration;

class _tds__SetStorageConfigurationResponse;

class _tds__DeleteStorageConfiguration;

class _tds__DeleteStorageConfigurationResponse;

class _tds__GetGeoLocation;

class _tds__GetGeoLocationResponse;

class _tds__SetGeoLocation;

class _tds__SetGeoLocationResponse;

class _tds__DeleteGeoLocation;

class _tds__DeleteGeoLocationResponse;

class tt__DeviceEntity;

class tt__IntRectangle;

class tt__IntRectangleRange;

class tt__IntRange;

class tt__FloatRange;

class tt__DurationRange;

class tt__IntList;

class tt__FloatList;

class tt__AnyHolder;

class tt__VideoSource;

class tt__VideoSourceExtension;

class tt__VideoSourceExtension2;

class tt__AudioSource;

class tt__Profile;

class tt__ProfileExtension;

class tt__ProfileExtension2;

class tt__ConfigurationEntity;

class tt__VideoSourceConfiguration;

class tt__VideoSourceConfigurationExtension;

class tt__VideoSourceConfigurationExtension2;

class tt__Rotate;

class tt__RotateExtension;

class tt__LensProjection;

class tt__LensOffset;

class tt__LensDescription;

class tt__VideoSourceConfigurationOptions;

class tt__VideoSourceConfigurationOptionsExtension;

class tt__VideoSourceConfigurationOptionsExtension2;

class tt__RotateOptions;

class tt__RotateOptionsExtension;

class tt__SceneOrientation;

class tt__VideoEncoderConfiguration;

class tt__VideoResolution;

class tt__VideoRateControl;

class tt__Mpeg4Configuration;

class tt__H264Configuration;

class tt__VideoEncoderConfigurationOptions;

class tt__VideoEncoderOptionsExtension;

class tt__VideoEncoderOptionsExtension2;

class tt__JpegOptions;

class tt__JpegOptions2;

class tt__Mpeg4Options;

class tt__Mpeg4Options2;

class tt__H264Options;

class tt__H264Options2;

class tt__VideoEncoder2Configuration;

class tt__VideoResolution2;

class tt__VideoRateControl2;

class tt__VideoEncoder2ConfigurationOptions;

class tt__AudioSourceConfiguration;

class tt__AudioSourceConfigurationOptions;

class tt__AudioSourceOptionsExtension;

class tt__AudioEncoderConfiguration;

class tt__AudioEncoderConfigurationOptions;

class tt__AudioEncoderConfigurationOption;

class tt__AudioEncoder2Configuration;

class tt__AudioEncoder2ConfigurationOptions;

class tt__VideoAnalyticsConfiguration;

class tt__MetadataConfiguration;

class tt__MetadataConfigurationExtension;

class tt__PTZFilter;

class tt__EventSubscription;

class tt__MetadataConfigurationOptions;

class tt__MetadataConfigurationOptionsExtension;

class tt__MetadataConfigurationOptionsExtension2;

class tt__PTZStatusFilterOptions;

class tt__PTZStatusFilterOptionsExtension;

class tt__VideoOutput;

class tt__VideoOutputExtension;

class tt__VideoOutputConfiguration;

class tt__VideoOutputConfigurationOptions;

class tt__VideoDecoderConfigurationOptions;

class tt__H264DecOptions;

class tt__JpegDecOptions;

class tt__Mpeg4DecOptions;

class tt__VideoDecoderConfigurationOptionsExtension;

class tt__AudioOutput;

class tt__AudioOutputConfiguration;

class tt__AudioOutputConfigurationOptions;

class tt__AudioDecoderConfiguration;

class tt__AudioDecoderConfigurationOptions;

class tt__G711DecOptions;

class tt__AACDecOptions;

class tt__G726DecOptions;

class tt__AudioDecoderConfigurationOptionsExtension;

class tt__MulticastConfiguration;

class tt__StreamSetup;

class tt__Transport;

class tt__MediaUri;

class tt__Scope;

class tt__NetworkInterface;

class tt__NetworkInterfaceExtension;

class tt__Dot3Configuration;

class tt__NetworkInterfaceExtension2;

class tt__NetworkInterfaceLink;

class tt__NetworkInterfaceConnectionSetting;

class tt__NetworkInterfaceInfo;

class tt__IPv6NetworkInterface;

class tt__IPv4NetworkInterface;

class tt__IPv4Configuration;

class tt__IPv6Configuration;

class tt__IPv6ConfigurationExtension;

class tt__NetworkProtocol;

class tt__NetworkProtocolExtension;

class tt__NetworkHost;

class tt__NetworkHostExtension;

class tt__IPAddress;

class tt__PrefixedIPv4Address;

class tt__PrefixedIPv6Address;

class tt__HostnameInformation;

class tt__HostnameInformationExtension;

class tt__DNSInformation;

class tt__DNSInformationExtension;

class tt__NTPInformation;

class tt__NTPInformationExtension;

class tt__DynamicDNSInformation;

class tt__DynamicDNSInformationExtension;

class tt__NetworkInterfaceSetConfiguration;

class tt__NetworkInterfaceSetConfigurationExtension;

class tt__IPv6NetworkInterfaceSetConfiguration;

class tt__IPv4NetworkInterfaceSetConfiguration;

class tt__NetworkGateway;

class tt__NetworkZeroConfiguration;

class tt__NetworkZeroConfigurationExtension;

class tt__NetworkZeroConfigurationExtension2;

class tt__IPAddressFilter;

class tt__IPAddressFilterExtension;

class tt__Dot11Configuration;

class tt__Dot11SecurityConfiguration;

class tt__Dot11SecurityConfigurationExtension;

class tt__Dot11PSKSet;

class tt__Dot11PSKSetExtension;

class tt__NetworkInterfaceSetConfigurationExtension2;

class tt__Dot11Capabilities;

class tt__Dot11Status;

class tt__Dot11AvailableNetworks;

class tt__Dot11AvailableNetworksExtension;

class tt__Capabilities;

class tt__CapabilitiesExtension;

class tt__CapabilitiesExtension2;

class tt__AnalyticsCapabilities;

class tt__DeviceCapabilities;

class tt__DeviceCapabilitiesExtension;

class tt__EventCapabilities;

class tt__IOCapabilities;

class tt__IOCapabilitiesExtension;

class tt__IOCapabilitiesExtension2;

class tt__MediaCapabilities;

class tt__MediaCapabilitiesExtension;

class tt__RealTimeStreamingCapabilities;

class tt__RealTimeStreamingCapabilitiesExtension;

class tt__ProfileCapabilities;

class tt__NetworkCapabilities;

class tt__NetworkCapabilitiesExtension;

class tt__NetworkCapabilitiesExtension2;

class tt__SecurityCapabilities;

class tt__SecurityCapabilitiesExtension;

class tt__SecurityCapabilitiesExtension2;

class tt__SystemCapabilities;

class tt__SystemCapabilitiesExtension;

class tt__SystemCapabilitiesExtension2;

class tt__OnvifVersion;

class tt__ImagingCapabilities;

class tt__PTZCapabilities;

class tt__DeviceIOCapabilities;

class tt__DisplayCapabilities;

class tt__RecordingCapabilities;

class tt__SearchCapabilities;

class tt__ReplayCapabilities;

class tt__ReceiverCapabilities;

class tt__AnalyticsDeviceCapabilities;

class tt__AnalyticsDeviceExtension;

class tt__SystemLog;

class tt__SupportInformation;

class tt__BinaryData;

class tt__AttachmentData;

class tt__BackupFile;

class tt__SystemLogUriList;

class tt__SystemLogUri;

class tt__SystemDateTime;

class tt__SystemDateTimeExtension;

class tt__DateTime;

class tt__Date;

class tt__Time;

class tt__TimeZone;

class tt__RemoteUser;

class tt__User;

class tt__UserExtension;

class tt__CertificateGenerationParameters;

class tt__CertificateGenerationParametersExtension;

class tt__Certificate;

class tt__CertificateStatus;

class tt__CertificateWithPrivateKey;

class tt__CertificateInformation;

class tt__CertificateUsage;

class tt__CertificateInformationExtension;

class tt__Dot1XConfiguration;

class tt__Dot1XConfigurationExtension;

class tt__EAPMethodConfiguration;

class tt__EapMethodExtension;

class tt__TLSConfiguration;

class tt__GenericEapPwdConfigurationExtension;

class tt__RelayOutputSettings;

class tt__RelayOutput;

class tt__DigitalInput;

class tt__PTZNode;

class tt__PTZNodeExtension;

class tt__PTZNodeExtension2;

class tt__PTZPresetTourSupported;

class tt__PTZPresetTourSupportedExtension;

class tt__PTZConfiguration;

class tt__PTZConfigurationExtension;

class tt__PTZConfigurationExtension2;

class tt__PTControlDirection;

class tt__PTControlDirectionExtension;

class tt__EFlip;

class tt__Reverse;

class tt__PTZConfigurationOptions;

class tt__PTZConfigurationOptions2;

class tt__PTControlDirectionOptions;

class tt__PTControlDirectionOptionsExtension;

class tt__EFlipOptions;

class tt__EFlipOptionsExtension;

class tt__ReverseOptions;

class tt__ReverseOptionsExtension;

class tt__PanTiltLimits;

class tt__ZoomLimits;

class tt__PTZSpaces;

class tt__PTZSpacesExtension;

class tt__Space2DDescription;

class tt__Space1DDescription;

class tt__PTZSpeed;

class tt__PTZPreset;

class tt__PresetTour;

class tt__PTZPresetTourExtension;

class tt__PTZPresetTourSpot;

class tt__PTZPresetTourSpotExtension;

class tt__PTZPresetTourPresetDetail;

class tt__PTZPresetTourTypeExtension;

class tt__PTZPresetTourStatus;

class tt__PTZPresetTourStatusExtension;

class tt__PTZPresetTourStartingCondition;

class tt__PTZPresetTourStartingConditionExtension;

class tt__PTZPresetTourOptions;

class tt__PTZPresetTourSpotOptions;

class tt__PTZPresetTourPresetDetailOptions;

class tt__PTZPresetTourPresetDetailOptionsExtension;

class tt__PTZPresetTourStartingConditionOptions;

class tt__PTZPresetTourStartingConditionOptionsExtension;

class tt__ImagingStatus;

class tt__FocusStatus;

class tt__FocusConfiguration;

class tt__ImagingSettings;

class tt__ImagingSettingsExtension;

class tt__Exposure;

class tt__WideDynamicRange;

class tt__BacklightCompensation;

class tt__ImagingOptions;

class tt__WideDynamicRangeOptions;

class tt__BacklightCompensationOptions;

class tt__FocusOptions;

class tt__ExposureOptions;

class tt__WhiteBalanceOptions;

class tt__FocusMove;

class tt__AbsoluteFocus;

class tt__RelativeFocus;

class tt__ContinuousFocus;

class tt__MoveOptions;

class tt__AbsoluteFocusOptions;

class tt__RelativeFocusOptions;

class tt__ContinuousFocusOptions;

class tt__WhiteBalance;

class tt__ImagingStatus20;

class tt__ImagingStatus20Extension;

class tt__FocusStatus20;

class tt__FocusStatus20Extension;

class tt__ImagingSettings20;

class tt__ImagingSettingsExtension20;

class tt__ImagingSettingsExtension202;

class tt__ImagingSettingsExtension203;

class tt__ImagingSettingsExtension204;

class tt__ImageStabilization;

class tt__ImageStabilizationExtension;

class tt__IrCutFilterAutoAdjustment;

class tt__IrCutFilterAutoAdjustmentExtension;

class tt__WideDynamicRange20;

class tt__BacklightCompensation20;

class tt__Exposure20;

class tt__ToneCompensation;

class tt__ToneCompensationExtension;

class tt__Defogging;

class tt__DefoggingExtension;

class tt__NoiseReduction;

class tt__ImagingOptions20;

class tt__ImagingOptions20Extension;

class tt__ImagingOptions20Extension2;

class tt__ImagingOptions20Extension3;

class tt__ImagingOptions20Extension4;

class tt__ImageStabilizationOptions;

class tt__ImageStabilizationOptionsExtension;

class tt__IrCutFilterAutoAdjustmentOptions;

class tt__IrCutFilterAutoAdjustmentOptionsExtension;

class tt__WideDynamicRangeOptions20;

class tt__BacklightCompensationOptions20;

class tt__ExposureOptions20;

class tt__MoveOptions20;

class tt__RelativeFocusOptions20;

class tt__WhiteBalance20;

class tt__WhiteBalance20Extension;

class tt__FocusConfiguration20;

class tt__FocusConfiguration20Extension;

class tt__WhiteBalanceOptions20;

class tt__WhiteBalanceOptions20Extension;

class tt__FocusOptions20;

class tt__FocusOptions20Extension;

class tt__ToneCompensationOptions;

class tt__DefoggingOptions;

class tt__NoiseReductionOptions;

class tt__MessageExtension;

class tt__ItemList;

class tt__ItemListExtension;

class tt__MessageDescription;

class tt__MessageDescriptionExtension;

class tt__ItemListDescription;

class tt__ItemListDescriptionExtension;

class tt__Polyline;

class tt__AnalyticsEngineConfiguration;

class tt__AnalyticsEngineConfigurationExtension;

class tt__RuleEngineConfiguration;

class tt__RuleEngineConfigurationExtension;

class tt__Config;

class tt__ConfigDescription;

class tt__ConfigDescriptionExtension;

class tt__SupportedRules;

class tt__SupportedRulesExtension;

class tt__SupportedAnalyticsModules;

class tt__SupportedAnalyticsModulesExtension;

class tt__PolygonConfiguration;

class tt__PolylineArray;

class tt__PolylineArrayExtension;

class tt__PolylineArrayConfiguration;

class tt__MotionExpression;

class tt__MotionExpressionConfiguration;

class tt__CellLayout;

class tt__PaneConfiguration;

class tt__PaneLayout;

class tt__Layout;

class tt__LayoutExtension;

class tt__CodingCapabilities;

class tt__LayoutOptions;

class tt__LayoutOptionsExtension;

class tt__PaneLayoutOptions;

class tt__PaneOptionExtension;

class tt__Receiver;

class tt__ReceiverConfiguration;

class tt__ReceiverStateInformation;

class tt__SourceReference;

class tt__DateTimeRange;

class tt__RecordingSummary;

class tt__SearchScope;

class tt__SearchScopeExtension;

class tt__EventFilter;

class tt__PTZPositionFilter;

class tt__MetadataFilter;

class tt__FindRecordingResultList;

class tt__FindEventResultList;

class tt__FindEventResult;

class tt__FindPTZPositionResultList;

class tt__FindPTZPositionResult;

class tt__FindMetadataResultList;

class tt__FindMetadataResult;

class tt__RecordingInformation;

class tt__RecordingSourceInformation;

class tt__TrackInformation;

class tt__MediaAttributes;

class tt__TrackAttributes;

class tt__TrackAttributesExtension;

class tt__VideoAttributes;

class tt__AudioAttributes;

class tt__MetadataAttributes;

class tt__RecordingConfiguration;

class tt__TrackConfiguration;

class tt__GetRecordingsResponseItem;

class tt__GetTracksResponseList;

class tt__GetTracksResponseItem;

class tt__RecordingJobConfiguration;

class tt__RecordingJobConfigurationExtension;

class tt__RecordingJobSource;

class tt__RecordingJobSourceExtension;

class tt__RecordingJobTrack;

class tt__RecordingJobStateInformation;

class tt__RecordingJobStateInformationExtension;

class tt__RecordingJobStateSource;

class tt__RecordingJobStateTracks;

class tt__RecordingJobStateTrack;

class tt__GetRecordingJobsResponseItem;

class tt__ReplayConfiguration;

class tt__AnalyticsEngine;

class tt__AnalyticsDeviceEngineConfiguration;

class tt__AnalyticsDeviceEngineConfigurationExtension;

class tt__EngineConfiguration;

class tt__AnalyticsEngineInputInfo;

class tt__AnalyticsEngineInputInfoExtension;

class tt__AnalyticsEngineInput;

class tt__SourceIdentification;

class tt__SourceIdentificationExtension;

class tt__MetadataInput;

class tt__MetadataInputExtension;

class tt__AnalyticsEngineControl;

class tt__AnalyticsStateInformation;

class tt__AnalyticsState;

class tt__ActionEngineEventPayload;

class tt__ActionEngineEventPayloadExtension;

class tt__AudioClassCandidate;

class tt__AudioClassDescriptor;

class tt__AudioClassDescriptorExtension;

class tt__ActiveConnection;

class tt__ProfileStatus;

class tt__ProfileStatusExtension;

class tt__OSDReference;

class tt__OSDPosConfiguration;

class tt__OSDPosConfigurationExtension;

class tt__OSDColor;

class tt__OSDTextConfiguration;

class tt__OSDTextConfigurationExtension;

class tt__OSDImgConfiguration;

class tt__OSDImgConfigurationExtension;

class tt__ColorspaceRange;

class tt__ColorOptions;

class tt__OSDColorOptions;

class tt__OSDColorOptionsExtension;

class tt__OSDTextOptions;

class tt__OSDTextOptionsExtension;

class tt__OSDImgOptions;

class tt__OSDImgOptionsExtension;

class tt__OSDConfiguration;

class tt__OSDConfigurationExtension;

class tt__MaximumNumberOfOSDs;

class tt__OSDConfigurationOptions;

class tt__OSDConfigurationOptionsExtension;

class tt__FileProgress;

class tt__ArrayOfFileProgress;

class tt__ArrayOfFileProgressExtension;

class tt__StorageReferencePath;

class tt__StorageReferencePathExtension;

class tt__Vector2D;

class tt__Vector1D;

class tt__PTZVector;

class tt__PTZStatus;

class tt__PTZMoveStatus;

class tt__Vector;

class tt__Rectangle;

class tt__Polygon;

class tt__Color;

class tt__ColorCovariance;

class tt__Transformation;

class tt__TransformationExtension;

class tt__GeoLocation;

class tt__GeoOrientation;

class tt__LocalLocation;

class tt__LocalOrientation;

class tt__LocationEntity;

class _tt__Message;

class wsnt__QueryExpressionType;

/// Imported complexType "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType from typemap "WS/typeMap.dat".
#import "customtypes.h"

class wsnt__FilterType;

class wsnt__SubscriptionPolicyType;

class wsnt__NotificationMessageHolderType;

class wsnt__SubscribeCreationFailedFaultType;

class wsnt__InvalidFilterFaultType;

class wsnt__TopicExpressionDialectUnknownFaultType;

class wsnt__InvalidTopicExpressionFaultType;

class wsnt__TopicNotSupportedFaultType;

class wsnt__MultipleTopicsSpecifiedFaultType;

class wsnt__InvalidProducerPropertiesExpressionFaultType;

class wsnt__InvalidMessageContentExpressionFaultType;

class wsnt__UnrecognizedPolicyRequestFaultType;

class wsnt__UnsupportedPolicyRequestFaultType;

class wsnt__NotifyMessageNotSupportedFaultType;

class wsnt__UnacceptableInitialTerminationTimeFaultType;

class wsnt__NoCurrentMessageOnTopicFaultType;

class wsnt__UnableToGetMessagesFaultType;

class wsnt__UnableToDestroyPullPointFaultType;

class wsnt__UnableToCreatePullPointFaultType;

class wsnt__UnacceptableTerminationTimeFaultType;

class wsnt__UnableToDestroySubscriptionFaultType;

class wsnt__PauseFailedFaultType;

class wsnt__ResumeFailedFaultType;

class _wsnt__NotificationProducerRP;

class _wsnt__SubscriptionManagerRP;

class _wsnt__Notify;

class _wsnt__UseRaw;

class _wsnt__Subscribe;

class _wsnt__SubscribeResponse;

class _wsnt__GetCurrentMessage;

class _wsnt__GetCurrentMessageResponse;

class _wsnt__GetMessages;

class _wsnt__GetMessagesResponse;

class _wsnt__DestroyPullPoint;

class _wsnt__DestroyPullPointResponse;

class _wsnt__CreatePullPoint;

class _wsnt__CreatePullPointResponse;

class _wsnt__Renew;

class _wsnt__RenewResponse;

class _wsnt__Unsubscribe;

class _wsnt__UnsubscribeResponse;

class _wsnt__PauseSubscription;

class _wsnt__PauseSubscriptionResponse;

class _wsnt__ResumeSubscription;

class _wsnt__ResumeSubscriptionResponse;

class xop__Include;

class wsrfbf__BaseFaultType;

class wstop__Documentation;

class wstop__ExtensibleDocumented;

class wstop__QueryExpressionType;

class wstop__TopicNamespaceType;

class wstop__TopicType;

class wstop__TopicSetType;

class tev__Capabilities;

class tev__SubscriptionPolicy;

class _tev__GetServiceCapabilities;

class _tev__GetServiceCapabilitiesResponse;

class _tev__CreatePullPointSubscription;

class _tev__CreatePullPointSubscriptionResponse;

class _tev__PullMessages;

class _tev__PullMessagesResponse;

class _tev__PullMessagesFaultResponse;

class _tev__Seek;

class _tev__SeekResponse;

class _tev__SetSynchronizationPoint;

class _tev__SetSynchronizationPointResponse;

class _tev__GetEventProperties;

class _tev__GetEventPropertiesResponse;

class wsrf__ResourceUnknownFaultType;

class wsrf__ResourceUnavailableFaultType;

class wsd__HelloType;

class wsd__ByeType;

class wsd__ProbeType;

class wsd__ProbeMatchesType;

class wsd__ProbeMatchType;

class wsd__ResolveType;

class wsd__ResolveMatchesType;

class wsd__ResolveMatchType;

class wsd__ScopesType;

class wsd__SecurityType;

class wsd__SigType;

class wsd__AppSequenceType;

class wsa__EndpointReferenceType;

class wsa__ReferencePropertiesType;

class wsa__ReferenceParametersType;

class wsa__ServiceNameType;

class wsa__Relationship;

class wsa__ReplyAfterType;

class wsa__RetryAfterType;

class wsa__AttributedQName;

class wsa__AttributedURI;

class tmk__AccessControl;

class tmk__FireAlarm;

class tmk__GasAnalysis;

class tmk__Introscopy;

class tmk__NeutronProbing;

class tmk__RadiationMonitoring;

class tmk__SteamDetector;

class tmk__MetalDetector;

class tmk__VideoSurveillanceSystem;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/device/wsdl":EAPMethodTypes is a simpleType containing a whitespace separated list of values of type xs:int.
///
typedef std::string tds__EAPMethodTypes;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/schema":IntAttrList is a simpleType containing a whitespace separated list of values of type xs:int.
///
typedef std::string tt__IntAttrList;

/// @brief "http://www.onvif.org/ver10/schema":FloatAttrList is a simpleType containing a whitespace separated list of values of type xs:float.
///
typedef std::string tt__FloatAttrList;

/// @brief "http://www.onvif.org/ver10/schema":StringAttrList is a simpleType containing a whitespace separated list of values of type xs:string.
///
typedef std::string tt__StringAttrList;

/// @brief "http://www.onvif.org/ver10/schema":ReferenceTokenList is a simpleType containing a whitespace separated list of values of type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef std::string tt__ReferenceTokenList;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Union of values from member types "xsd:dateTime xsd:duration".
typedef std::string wsnt__AbsoluteOrRelativeTimeType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/

/// @brief Union of values from member types "tns:RelationshipType xs:QName".
typedef std::string wsd__OpenRelationshipType;

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":QNameListType is a simpleType containing a whitespace separated list of values of type xs:QName.
///
typedef xsd__QName wsd__QNameListType;

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType is a simpleType containing a whitespace separated list of values of type xs:anyURI.
///
typedef std::string wsd__UriListType;

/// @brief Union of values from member types "tns:FaultCodeType xs:QName".
typedef std::string wsd__FaultCodeOpenType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/device/wsdl":AutoGeoModes is a simpleType restriction of type xs:string.
///
enum class tds__AutoGeoModes
{
/// <PRE><BLOCKQUOTE>
///   Automatic adjustment of the device location.
/// </BLOCKQUOTE></PRE>
///
	Location,	///< xs:string value="Location"
/// <PRE><BLOCKQUOTE>
///   Automatic adjustment of the device orientation relative to the compass also called yaw.
/// </BLOCKQUOTE></PRE>
///
	Heading,	///< xs:string value="Heading"
/// <PRE><BLOCKQUOTE>
///   Automatic adjustment of the deviation from the horizon also called pitch and roll.
/// </BLOCKQUOTE></PRE>
///
	Leveling,	///< xs:string value="Leveling"
};

/// @brief Class wrapper for type tds__AutoGeoModes derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tds__AutoGeoModes__ : public xsd__anyType
{ public:
    tds__AutoGeoModes                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":StorageType is a simpleType restriction of type xs:string.
///
enum class tds__StorageType
{
/// <PRE><BLOCKQUOTE>
///   NFS protocol
/// </BLOCKQUOTE></PRE>
///
	NFS,	///< xs:string value="NFS"
/// <PRE><BLOCKQUOTE>
///   CIFS protocol
/// </BLOCKQUOTE></PRE>
///
	CIFS,	///< xs:string value="CIFS"
/// <PRE><BLOCKQUOTE>
///   CDMI protocol
/// </BLOCKQUOTE></PRE>
///
	CDMI,	///< xs:string value="CDMI"
/// <PRE><BLOCKQUOTE>
///   FTP protocol
/// </BLOCKQUOTE></PRE>
///
	FTP,	///< xs:string value="FTP"
};

/// @brief Class wrapper for type tds__StorageType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tds__StorageType__ : public xsd__anyType
{ public:
    tds__StorageType                     __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/schema":Name is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Length of this content is 0 to 64.
typedef std::string tt__Name : 64;

/// @brief Class wrapper for type tt__Name derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Name__ : public xsd__anyType
{ public:
    tt__Name                             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RotateMode is a simpleType restriction of type xs:string.
///
enum class tt__RotateMode
{
/// <PRE><BLOCKQUOTE>
///   Enable the Rotate feature. Degree of rotation is specified Degree parameter.
/// </BLOCKQUOTE></PRE>
///
	OFF,	///< xs:string value="OFF"
/// <PRE><BLOCKQUOTE>
///   Disable the Rotate feature.
/// </BLOCKQUOTE></PRE>
///
	ON,	///< xs:string value="ON"
/// <PRE><BLOCKQUOTE>
///   Rotate feature is automatically activated by the device.
/// </BLOCKQUOTE></PRE>
///
	AUTO,	///< xs:string value="AUTO"
};

/// @brief Class wrapper for type tt__RotateMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RotateMode__ : public xsd__anyType
{ public:
    tt__RotateMode                       __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SceneOrientationMode is a simpleType restriction of type xs:string.
///
enum class tt__SceneOrientationMode
{
	MANUAL,	///< xs:string value="MANUAL"
	AUTO,	///< xs:string value="AUTO"
};

/// @brief Class wrapper for type tt__SceneOrientationMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__SceneOrientationMode__ : public xsd__anyType
{ public:
    tt__SceneOrientationMode             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SceneOrientationOption is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Defines the acceptable values for the Orientation element of the SceneOrientation type
/// </BLOCKQUOTE></PRE>
///
enum class tt__SceneOrientationOption
{
	Below,	///< xs:string value="Below"
	Horizon,	///< xs:string value="Horizon"
	Above,	///< xs:string value="Above"
};

/// @brief Class wrapper for type tt__SceneOrientationOption derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__SceneOrientationOption__ : public xsd__anyType
{ public:
    tt__SceneOrientationOption           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ViewModes is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Source view modes supported by device.
/// </BLOCKQUOTE></PRE>
///
enum class tt__ViewModes
{
/// <PRE><BLOCKQUOTE>
///   Undewarped viewmode from device supporting fisheye lens.
/// </BLOCKQUOTE></PRE>
///
	tt_x003aFisheye,	///< xs:string value="tt:Fisheye"
/// <PRE><BLOCKQUOTE>
///   360 degree panoramic view.
/// </BLOCKQUOTE></PRE>
///
	tt_x003a360Panorama,	///< xs:string value="tt:360Panorama"
/// <PRE><BLOCKQUOTE>
///   180 degree panoramic view.
/// </BLOCKQUOTE></PRE>
///
	tt_x003a180Panorama,	///< xs:string value="tt:180Panorama"
/// <PRE><BLOCKQUOTE>
///   View mode combining four streams in single Quad, eg., applicable for devices supporting four heads.
/// </BLOCKQUOTE></PRE>
///
	tt_x003aQuad,	///< xs:string value="tt:Quad"
/// <PRE><BLOCKQUOTE>
///   Unaltered view from the sensor.
/// </BLOCKQUOTE></PRE>
///
	tt_x003aOriginal,	///< xs:string value="tt:Original"
/// <PRE><BLOCKQUOTE>
///   Viewmode combining the left side sensors, applicable for devices supporting multiple sensors.
/// </BLOCKQUOTE></PRE>
///
	tt_x003aLeftHalf,	///< xs:string value="tt:LeftHalf"
/// <PRE><BLOCKQUOTE>
///   Viewmode combining the right side sensors, applicable for devices supporting multiple sensors.
/// </BLOCKQUOTE></PRE>
///
	tt_x003aRightHalf,	///< xs:string value="tt:RightHalf"
/// <PRE><BLOCKQUOTE>
///   Dewarped view mode for device supporting fisheye lens.
/// </BLOCKQUOTE></PRE>
///
	tt_x003aDewarp,	///< xs:string value="tt:Dewarp"
};

/// @brief Class wrapper for type tt__ViewModes derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ViewModes__ : public xsd__anyType
{ public:
    tt__ViewModes                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoding is a simpleType restriction of type xs:string.
///
enum class tt__VideoEncoding
{
	JPEG,	///< xs:string value="JPEG"
	MPEG4,	///< xs:string value="MPEG4"
	H264,	///< xs:string value="H264"
};

/// @brief Class wrapper for type tt__VideoEncoding derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__VideoEncoding__ : public xsd__anyType
{ public:
    tt__VideoEncoding                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Profile is a simpleType restriction of type xs:string.
///
enum class tt__Mpeg4Profile
{
	SP,	///< xs:string value="SP"
	ASP,	///< xs:string value="ASP"
};

/// @brief Class wrapper for type tt__Mpeg4Profile derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Mpeg4Profile__ : public xsd__anyType
{ public:
    tt__Mpeg4Profile                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":H264Profile is a simpleType restriction of type xs:string.
///
enum class tt__H264Profile
{
	Baseline,	///< xs:string value="Baseline"
	Main,	///< xs:string value="Main"
	Extended,	///< xs:string value="Extended"
	High,	///< xs:string value="High"
};

/// @brief Class wrapper for type tt__H264Profile derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__H264Profile__ : public xsd__anyType
{ public:
    tt__H264Profile                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncodingMimeNames is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Video Media Subtypes as referenced by IANA (without the leading "video/" Video Media Type). See also <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
enum class tt__VideoEncodingMimeNames
{
	JPEG,	///< xs:string value="JPEG"
	MPV4_ES,	///< xs:string value="MPV4-ES"
	H264,	///< xs:string value="H264"
	H265,	///< xs:string value="H265"
};

/// @brief Class wrapper for type tt__VideoEncodingMimeNames derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__VideoEncodingMimeNames__ : public xsd__anyType
{ public:
    tt__VideoEncodingMimeNames           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncodingProfiles is a simpleType restriction of type xs:string.
///
enum class tt__VideoEncodingProfiles
{
	Simple,	///< xs:string value="Simple"
	AdvancedSimple,	///< xs:string value="AdvancedSimple"
	Baseline,	///< xs:string value="Baseline"
	Main,	///< xs:string value="Main"
	Main10,	///< xs:string value="Main10"
	Extended,	///< xs:string value="Extended"
	High,	///< xs:string value="High"
};

/// @brief Class wrapper for type tt__VideoEncodingProfiles derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__VideoEncodingProfiles__ : public xsd__anyType
{ public:
    tt__VideoEncodingProfiles            __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoding is a simpleType restriction of type xs:string.
///
enum class tt__AudioEncoding
{
	G711,	///< xs:string value="G711"
	G726,	///< xs:string value="G726"
	AAC,	///< xs:string value="AAC"
};

/// @brief Class wrapper for type tt__AudioEncoding derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__AudioEncoding__ : public xsd__anyType
{ public:
    tt__AudioEncoding                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncodingMimeNames is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Audio Media Subtypes as referenced by IANA (without the leading "audio/" Audio Media Type). See also <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
enum class tt__AudioEncodingMimeNames
{
	PCMU,	///< xs:string value="PCMU"
	G726,	///< xs:string value="G726"
	MP4A_LATM,	///< xs:string value="MP4A-LATM"
};

/// @brief Class wrapper for type tt__AudioEncodingMimeNames derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__AudioEncodingMimeNames__ : public xsd__anyType
{ public:
    tt__AudioEncodingMimeNames           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataCompressionType is a simpleType restriction of type xs:string.
///
enum class tt__MetadataCompressionType
{
	None,	///< xs:string value="None"
	GZIP,	///< xs:string value="GZIP"
	EXI,	///< xs:string value="EXI"
};

/// @brief Class wrapper for type tt__MetadataCompressionType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__MetadataCompressionType__ : public xsd__anyType
{ public:
    tt__MetadataCompressionType          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":StreamType is a simpleType restriction of type xs:string.
///
enum class tt__StreamType
{
	RTP_Unicast,	///< xs:string value="RTP-Unicast"
	RTP_Multicast,	///< xs:string value="RTP-Multicast"
};

/// @brief Class wrapper for type tt__StreamType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__StreamType__ : public xsd__anyType
{ public:
    tt__StreamType                       __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":TransportProtocol is a simpleType restriction of type xs:string.
///
enum class tt__TransportProtocol
{
	UDP,	///< xs:string value="UDP"
/// <PRE><BLOCKQUOTE>
///   This value is deprecated.
/// </BLOCKQUOTE></PRE>
///
	TCP,	///< xs:string value="TCP"
	RTSP,	///< xs:string value="RTSP"
	HTTP,	///< xs:string value="HTTP"
};

/// @brief Class wrapper for type tt__TransportProtocol derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__TransportProtocol__ : public xsd__anyType
{ public:
    tt__TransportProtocol                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ScopeDefinition is a simpleType restriction of type xs:string.
///
enum class tt__ScopeDefinition
{
	Fixed,	///< xs:string value="Fixed"
	Configurable,	///< xs:string value="Configurable"
};

/// @brief Class wrapper for type tt__ScopeDefinition derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ScopeDefinition__ : public xsd__anyType
{ public:
    tt__ScopeDefinition                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DiscoveryMode is a simpleType restriction of type xs:string.
///
enum class tt__DiscoveryMode
{
	Discoverable,	///< xs:string value="Discoverable"
	NonDiscoverable,	///< xs:string value="NonDiscoverable"
};

/// @brief Class wrapper for type tt__DiscoveryMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__DiscoveryMode__ : public xsd__anyType
{ public:
    tt__DiscoveryMode                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceConfigPriority is a simpleType restriction of type xs:integer.
///
/// Value range is 0 to 31.
typedef xsd__integer tt__NetworkInterfaceConfigPriority /* from 0 (inclusive) @warning: could not determine if this type is numeric */ /* to 31 (inclusive) @warning: could not determine if this type is numeric */;

/// @brief Class wrapper for type tt__NetworkInterfaceConfigPriority derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__NetworkInterfaceConfigPriority__ : public xsd__anyType
{ public:
    tt__NetworkInterfaceConfigPriority   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Duplex is a simpleType restriction of type xs:string.
///
enum class tt__Duplex
{
	Full,	///< xs:string value="Full"
	Half,	///< xs:string value="Half"
};

/// @brief Class wrapper for type tt__Duplex derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Duplex__ : public xsd__anyType
{ public:
    tt__Duplex                           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IANA-IfTypes is a simpleType restriction of type xs:int.
///
/// <PRE><BLOCKQUOTE>
///   For valid numbers, please refer to http://www.iana.org/assignments/ianaiftype-mib.
/// </BLOCKQUOTE></PRE>
///
typedef int tt__IANA_IfTypes;

/// @brief Class wrapper for type tt__IANA_IfTypes derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IANA_IfTypes__ : public xsd__anyType
{ public:
    tt__IANA_IfTypes                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration is a simpleType restriction of type xs:string.
///
enum class tt__IPv6DHCPConfiguration
{
	Auto,	///< xs:string value="Auto"
	Stateful,	///< xs:string value="Stateful"
	Stateless,	///< xs:string value="Stateless"
	Off,	///< xs:string value="Off"
};

/// @brief Class wrapper for type tt__IPv6DHCPConfiguration derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IPv6DHCPConfiguration__ : public xsd__anyType
{ public:
    tt__IPv6DHCPConfiguration            __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocolType is a simpleType restriction of type xs:string.
///
enum class tt__NetworkProtocolType
{
	HTTP,	///< xs:string value="HTTP"
	HTTPS,	///< xs:string value="HTTPS"
	RTSP,	///< xs:string value="RTSP"
};

/// @brief Class wrapper for type tt__NetworkProtocolType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__NetworkProtocolType__ : public xsd__anyType
{ public:
    tt__NetworkProtocolType              __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHostType is a simpleType restriction of type xs:string.
///
enum class tt__NetworkHostType
{
	IPv4,	///< xs:string value="IPv4"
	IPv6,	///< xs:string value="IPv6"
	DNS,	///< xs:string value="DNS"
};

/// @brief Class wrapper for type tt__NetworkHostType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__NetworkHostType__ : public xsd__anyType
{ public:
    tt__NetworkHostType                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4Address is a simpleType restriction of type xs:token.
///
typedef xsd__token tt__IPv4Address;

/// @brief Class wrapper for type tt__IPv4Address derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IPv4Address__ : public xsd__anyType
{ public:
    tt__IPv4Address                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6Address is a simpleType restriction of type xs:token.
///
typedef xsd__token tt__IPv6Address;

/// @brief Class wrapper for type tt__IPv6Address derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IPv6Address__ : public xsd__anyType
{ public:
    tt__IPv6Address                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":HwAddress is a simpleType restriction of type xs:token.
///
typedef xsd__token tt__HwAddress;

/// @brief Class wrapper for type tt__HwAddress derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__HwAddress__ : public xsd__anyType
{ public:
    tt__HwAddress                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPType is a simpleType restriction of type xs:string.
///
enum class tt__IPType
{
	IPv4,	///< xs:string value="IPv4"
	IPv6,	///< xs:string value="IPv6"
};

/// @brief Class wrapper for type tt__IPType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IPType__ : public xsd__anyType
{ public:
    tt__IPType                           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DNSName is a simpleType restriction of type xs:token.
///
typedef xsd__token tt__DNSName;

/// @brief Class wrapper for type tt__DNSName derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__DNSName__ : public xsd__anyType
{ public:
    tt__DNSName                          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Domain is a simpleType restriction of type xs:token.
///
typedef xsd__token tt__Domain;

/// @brief Class wrapper for type tt__Domain derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Domain__ : public xsd__anyType
{ public:
    tt__Domain                           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilterType is a simpleType restriction of type xs:string.
///
enum class tt__IPAddressFilterType
{
	Allow,	///< xs:string value="Allow"
	Deny,	///< xs:string value="Deny"
};

/// @brief Class wrapper for type tt__IPAddressFilterType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IPAddressFilterType__ : public xsd__anyType
{ public:
    tt__IPAddressFilterType              __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSType is a simpleType restriction of type xs:string.
///
enum class tt__DynamicDNSType
{
	NoUpdate,	///< xs:string value="NoUpdate"
	ClientUpdates,	///< xs:string value="ClientUpdates"
	ServerUpdates,	///< xs:string value="ServerUpdates"
};

/// @brief Class wrapper for type tt__DynamicDNSType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__DynamicDNSType__ : public xsd__anyType
{ public:
    tt__DynamicDNSType                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SSIDType is a simpleType restriction of type xs:hexBinary.
///
/// Length of this content is 1 to 32.
typedef xsd__hexBinary tt__Dot11SSIDType 1 : 32;

/// @brief Class wrapper for type tt__Dot11SSIDType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11SSIDType__ : public xsd__anyType
{ public:
    tt__Dot11SSIDType                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11StationMode is a simpleType restriction of type xs:string.
///
enum class tt__Dot11StationMode
{
	Ad_hoc,	///< xs:string value="Ad-hoc"
	Infrastructure,	///< xs:string value="Infrastructure"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__Dot11StationMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11StationMode__ : public xsd__anyType
{ public:
    tt__Dot11StationMode                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityMode is a simpleType restriction of type xs:string.
///
enum class tt__Dot11SecurityMode
{
	None,	///< xs:string value="None"
	WEP,	///< xs:string value="WEP"
	PSK,	///< xs:string value="PSK"
	Dot1X,	///< xs:string value="Dot1X"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__Dot11SecurityMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11SecurityMode__ : public xsd__anyType
{ public:
    tt__Dot11SecurityMode                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Cipher is a simpleType restriction of type xs:string.
///
enum class tt__Dot11Cipher
{
	CCMP,	///< xs:string value="CCMP"
	TKIP,	///< xs:string value="TKIP"
	Any,	///< xs:string value="Any"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__Dot11Cipher derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11Cipher__ : public xsd__anyType
{ public:
    tt__Dot11Cipher                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSK is a simpleType restriction of type xs:hexBinary.
///
/// Length of this content is 32.
typedef xsd__hexBinary tt__Dot11PSK 32 : 32;

/// @brief Class wrapper for type tt__Dot11PSK derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11PSK__ : public xsd__anyType
{ public:
    tt__Dot11PSK                         __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKPassphrase is a simpleType restriction of type xs:string.
///
/// Content pattern is "[ -~]{8,63}".
typedef std::string tt__Dot11PSKPassphrase "[ -~]{8,63}";

/// @brief Class wrapper for type tt__Dot11PSKPassphrase derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11PSKPassphrase__ : public xsd__anyType
{ public:
    tt__Dot11PSKPassphrase               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SignalStrength is a simpleType restriction of type xs:string.
///
enum class tt__Dot11SignalStrength
{
	None,	///< xs:string value="None"
	Very_x0020Bad,	///< xs:string value="Very Bad"
	Bad,	///< xs:string value="Bad"
	Good,	///< xs:string value="Good"
	Very_x0020Good,	///< xs:string value="Very Good"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__Dot11SignalStrength derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11SignalStrength__ : public xsd__anyType
{ public:
    tt__Dot11SignalStrength              __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AuthAndMangementSuite is a simpleType restriction of type xs:string.
///
enum class tt__Dot11AuthAndMangementSuite
{
	None,	///< xs:string value="None"
	Dot1X,	///< xs:string value="Dot1X"
	PSK,	///< xs:string value="PSK"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__Dot11AuthAndMangementSuite derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Dot11AuthAndMangementSuite__ : public xsd__anyType
{ public:
    tt__Dot11AuthAndMangementSuite       __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilityCategory is a simpleType restriction of type xs:string.
///
enum class tt__CapabilityCategory
{
	All,	///< xs:string value="All"
	Analytics,	///< xs:string value="Analytics"
	Device,	///< xs:string value="Device"
	Events,	///< xs:string value="Events"
	Imaging,	///< xs:string value="Imaging"
	Media,	///< xs:string value="Media"
	PTZ,	///< xs:string value="PTZ"
};

/// @brief Class wrapper for type tt__CapabilityCategory derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__CapabilityCategory__ : public xsd__anyType
{ public:
    tt__CapabilityCategory               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogType is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration describing the available system log modes.
/// </BLOCKQUOTE></PRE>
///
enum class tt__SystemLogType
{
/// <PRE><BLOCKQUOTE>
///   Indicates that a system log is requested.
/// </BLOCKQUOTE></PRE>
///
	System,	///< xs:string value="System"
/// <PRE><BLOCKQUOTE>
///   Indicates that a access log is requested.
/// </BLOCKQUOTE></PRE>
///
	Access,	///< xs:string value="Access"
};

/// @brief Class wrapper for type tt__SystemLogType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__SystemLogType__ : public xsd__anyType
{ public:
    tt__SystemLogType                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":FactoryDefaultType is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration describing the available factory default modes.
/// </BLOCKQUOTE></PRE>
///
enum class tt__FactoryDefaultType
{
/// <PRE><BLOCKQUOTE>
///   Indicates that a hard factory default is requested.
/// </BLOCKQUOTE></PRE>
///
	Hard,	///< xs:string value="Hard"
/// <PRE><BLOCKQUOTE>
///   Indicates that a soft factory default is requested.
/// </BLOCKQUOTE></PRE>
///
	Soft,	///< xs:string value="Soft"
};

/// @brief Class wrapper for type tt__FactoryDefaultType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__FactoryDefaultType__ : public xsd__anyType
{ public:
    tt__FactoryDefaultType               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SetDateTimeType is a simpleType restriction of type xs:string.
///
enum class tt__SetDateTimeType
{
/// <PRE><BLOCKQUOTE>
///   Indicates that the date and time are set manually.
/// </BLOCKQUOTE></PRE>
///
	Manual,	///< xs:string value="Manual"
/// <PRE><BLOCKQUOTE>
///   Indicates that the date and time are set through NTP
/// </BLOCKQUOTE></PRE>
///
	NTP,	///< xs:string value="NTP"
};

/// @brief Class wrapper for type tt__SetDateTimeType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__SetDateTimeType__ : public xsd__anyType
{ public:
    tt__SetDateTimeType                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":UserLevel is a simpleType restriction of type xs:string.
///
enum class tt__UserLevel
{
	Administrator,	///< xs:string value="Administrator"
	Operator,	///< xs:string value="Operator"
	User,	///< xs:string value="User"
	Anonymous,	///< xs:string value="Anonymous"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__UserLevel derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__UserLevel__ : public xsd__anyType
{ public:
    tt__UserLevel                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RelayLogicalState is a simpleType restriction of type xs:string.
///
enum class tt__RelayLogicalState
{
	active,	///< xs:string value="active"
	inactive,	///< xs:string value="inactive"
};

/// @brief Class wrapper for type tt__RelayLogicalState derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RelayLogicalState__ : public xsd__anyType
{ public:
    tt__RelayLogicalState                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RelayIdleState is a simpleType restriction of type xs:string.
///
enum class tt__RelayIdleState
{
	closed,	///< xs:string value="closed"
	open,	///< xs:string value="open"
};

/// @brief Class wrapper for type tt__RelayIdleState derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RelayIdleState__ : public xsd__anyType
{ public:
    tt__RelayIdleState                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RelayMode is a simpleType restriction of type xs:string.
///
enum class tt__RelayMode
{
	Monostable,	///< xs:string value="Monostable"
	Bistable,	///< xs:string value="Bistable"
};

/// @brief Class wrapper for type tt__RelayMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RelayMode__ : public xsd__anyType
{ public:
    tt__RelayMode                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DigitalIdleState is a simpleType restriction of type xs:string.
///
enum class tt__DigitalIdleState
{
	closed,	///< xs:string value="closed"
	open,	///< xs:string value="open"
};

/// @brief Class wrapper for type tt__DigitalIdleState derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__DigitalIdleState__ : public xsd__anyType
{ public:
    tt__DigitalIdleState                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipMode is a simpleType restriction of type xs:string.
///
enum class tt__EFlipMode
{
	OFF,	///< xs:string value="OFF"
	ON,	///< xs:string value="ON"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__EFlipMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__EFlipMode__ : public xsd__anyType
{ public:
    tt__EFlipMode                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseMode is a simpleType restriction of type xs:string.
///
enum class tt__ReverseMode
{
	OFF,	///< xs:string value="OFF"
	ON,	///< xs:string value="ON"
	AUTO,	///< xs:string value="AUTO"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__ReverseMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ReverseMode__ : public xsd__anyType
{ public:
    tt__ReverseMode                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AuxiliaryData is a simpleType restriction of type xs:string.
///
/// Length of this content is 0 to 128.
typedef std::string tt__AuxiliaryData : 128;

/// @brief Class wrapper for type tt__AuxiliaryData derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__AuxiliaryData__ : public xsd__anyType
{ public:
    tt__AuxiliaryData                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourState is a simpleType restriction of type xs:string.
///
enum class tt__PTZPresetTourState
{
	Idle,	///< xs:string value="Idle"
	Touring,	///< xs:string value="Touring"
	Paused,	///< xs:string value="Paused"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__PTZPresetTourState derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__PTZPresetTourState__ : public xsd__anyType
{ public:
    tt__PTZPresetTourState               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourDirection is a simpleType restriction of type xs:string.
///
enum class tt__PTZPresetTourDirection
{
	Forward,	///< xs:string value="Forward"
	Backward,	///< xs:string value="Backward"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__PTZPresetTourDirection derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__PTZPresetTourDirection__ : public xsd__anyType
{ public:
    tt__PTZPresetTourDirection           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourOperation is a simpleType restriction of type xs:string.
///
enum class tt__PTZPresetTourOperation
{
	Start,	///< xs:string value="Start"
	Stop,	///< xs:string value="Stop"
	Pause,	///< xs:string value="Pause"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__PTZPresetTourOperation derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__PTZPresetTourOperation__ : public xsd__anyType
{ public:
    tt__PTZPresetTourOperation           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AutoFocusMode is a simpleType restriction of type xs:string.
///
enum class tt__AutoFocusMode
{
	AUTO,	///< xs:string value="AUTO"
	MANUAL,	///< xs:string value="MANUAL"
};

/// @brief Class wrapper for type tt__AutoFocusMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__AutoFocusMode__ : public xsd__anyType
{ public:
    tt__AutoFocusMode                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicMode is a simpleType restriction of type xs:string.
///
enum class tt__WideDynamicMode
{
	OFF,	///< xs:string value="OFF"
	ON,	///< xs:string value="ON"
};

/// @brief Class wrapper for type tt__WideDynamicMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__WideDynamicMode__ : public xsd__anyType
{ public:
    tt__WideDynamicMode                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensationMode is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration describing the available backlight compenstation modes.
/// </BLOCKQUOTE></PRE>
///
enum class tt__BacklightCompensationMode
{
/// <PRE><BLOCKQUOTE>
///   Backlight compensation is disabled.
/// </BLOCKQUOTE></PRE>
///
	OFF,	///< xs:string value="OFF"
/// <PRE><BLOCKQUOTE>
///   Backlight compensation is enabled.
/// </BLOCKQUOTE></PRE>
///
	ON,	///< xs:string value="ON"
};

/// @brief Class wrapper for type tt__BacklightCompensationMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__BacklightCompensationMode__ : public xsd__anyType
{ public:
    tt__BacklightCompensationMode        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ExposurePriority is a simpleType restriction of type xs:string.
///
enum class tt__ExposurePriority
{
	LowNoise,	///< xs:string value="LowNoise"
	FrameRate,	///< xs:string value="FrameRate"
};

/// @brief Class wrapper for type tt__ExposurePriority derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ExposurePriority__ : public xsd__anyType
{ public:
    tt__ExposurePriority                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ExposureMode is a simpleType restriction of type xs:string.
///
enum class tt__ExposureMode
{
	AUTO,	///< xs:string value="AUTO"
	MANUAL,	///< xs:string value="MANUAL"
};

/// @brief Class wrapper for type tt__ExposureMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ExposureMode__ : public xsd__anyType
{ public:
    tt__ExposureMode                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Enabled is a simpleType restriction of type xs:string.
///
enum class tt__Enabled
{
	ENABLED,	///< xs:string value="ENABLED"
	DISABLED,	///< xs:string value="DISABLED"
};

/// @brief Class wrapper for type tt__Enabled derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Enabled__ : public xsd__anyType
{ public:
    tt__Enabled                          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceMode is a simpleType restriction of type xs:string.
///
enum class tt__WhiteBalanceMode
{
	AUTO,	///< xs:string value="AUTO"
	MANUAL,	///< xs:string value="MANUAL"
};

/// @brief Class wrapper for type tt__WhiteBalanceMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__WhiteBalanceMode__ : public xsd__anyType
{ public:
    tt__WhiteBalanceMode                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterMode is a simpleType restriction of type xs:string.
///
enum class tt__IrCutFilterMode
{
	ON,	///< xs:string value="ON"
	OFF,	///< xs:string value="OFF"
	AUTO,	///< xs:string value="AUTO"
};

/// @brief Class wrapper for type tt__IrCutFilterMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IrCutFilterMode__ : public xsd__anyType
{ public:
    tt__IrCutFilterMode                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationMode is a simpleType restriction of type xs:string.
///
enum class tt__ImageStabilizationMode
{
	OFF,	///< xs:string value="OFF"
	ON,	///< xs:string value="ON"
	AUTO,	///< xs:string value="AUTO"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__ImageStabilizationMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ImageStabilizationMode__ : public xsd__anyType
{ public:
    tt__ImageStabilizationMode           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoBoundaryType is a simpleType restriction of type xs:string.
///
enum class tt__IrCutFilterAutoBoundaryType
{
	Common,	///< xs:string value="Common"
	ToOn,	///< xs:string value="ToOn"
	ToOff,	///< xs:string value="ToOff"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__IrCutFilterAutoBoundaryType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__IrCutFilterAutoBoundaryType__ : public xsd__anyType
{ public:
    tt__IrCutFilterAutoBoundaryType      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensationMode is a simpleType restriction of type xs:string.
///
enum class tt__ToneCompensationMode
{
	OFF,	///< xs:string value="OFF"
	ON,	///< xs:string value="ON"
	AUTO,	///< xs:string value="AUTO"
};

/// @brief Class wrapper for type tt__ToneCompensationMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ToneCompensationMode__ : public xsd__anyType
{ public:
    tt__ToneCompensationMode             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DefoggingMode is a simpleType restriction of type xs:string.
///
enum class tt__DefoggingMode
{
	OFF,	///< xs:string value="OFF"
	ON,	///< xs:string value="ON"
	AUTO,	///< xs:string value="AUTO"
};

/// @brief Class wrapper for type tt__DefoggingMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__DefoggingMode__ : public xsd__anyType
{ public:
    tt__DefoggingMode                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":TopicNamespaceLocation is a simpleType restriction of type xs:anyURI.
///
typedef xsd__anyURI tt__TopicNamespaceLocation;

/// @brief Class wrapper for type tt__TopicNamespaceLocation derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__TopicNamespaceLocation__ : public xsd__anyType
{ public:
    tt__TopicNamespaceLocation           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PropertyOperation is a simpleType restriction of type xs:string.
///
enum class tt__PropertyOperation
{
	Initialized,	///< xs:string value="Initialized"
	Deleted,	///< xs:string value="Deleted"
	Changed,	///< xs:string value="Changed"
};

/// @brief Class wrapper for type tt__PropertyOperation derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__PropertyOperation__ : public xsd__anyType
{ public:
    tt__PropertyOperation                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Direction is a simpleType restriction of type xs:string.
///
enum class tt__Direction
{
	Left,	///< xs:string value="Left"
	Right,	///< xs:string value="Right"
	Any,	///< xs:string value="Any"
};

/// @brief Class wrapper for type tt__Direction derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Direction__ : public xsd__anyType
{ public:
    tt__Direction                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverMode is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Specifies a receiver connection mode.
/// </BLOCKQUOTE></PRE>
///
enum class tt__ReceiverMode
{
/// <PRE><BLOCKQUOTE>
///   The receiver connects on demand, as required by consumers of the media streams.
/// </BLOCKQUOTE></PRE>
///
	AutoConnect,	///< xs:string value="AutoConnect"
/// <PRE><BLOCKQUOTE>
///   The receiver attempts to maintain a persistent connection to the configured endpoint.
/// </BLOCKQUOTE></PRE>
///
	AlwaysConnect,	///< xs:string value="AlwaysConnect"
/// <PRE><BLOCKQUOTE>
///   The receiver does not attempt to connect.
/// </BLOCKQUOTE></PRE>
///
	NeverConnect,	///< xs:string value="NeverConnect"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
///
	Unknown,	///< xs:string value="Unknown"
};

/// @brief Class wrapper for type tt__ReceiverMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ReceiverMode__ : public xsd__anyType
{ public:
    tt__ReceiverMode                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverState is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Specifies the current connection state of the receiver.
/// </BLOCKQUOTE></PRE>
///
enum class tt__ReceiverState
{
/// <PRE><BLOCKQUOTE>
///   The receiver is not connected.
/// </BLOCKQUOTE></PRE>
///
	NotConnected,	///< xs:string value="NotConnected"
/// <PRE><BLOCKQUOTE>
///   The receiver is attempting to connect.
/// </BLOCKQUOTE></PRE>
///
	Connecting,	///< xs:string value="Connecting"
/// <PRE><BLOCKQUOTE>
///   The receiver is connected.
/// </BLOCKQUOTE></PRE>
///
	Connected,	///< xs:string value="Connected"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
///
	Unknown,	///< xs:string value="Unknown"
};

/// @brief Class wrapper for type tt__ReceiverState derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ReceiverState__ : public xsd__anyType
{ public:
    tt__ReceiverState                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Description is a simpleType restriction of type xs:string.
///
typedef std::string tt__Description;

/// @brief Class wrapper for type tt__Description derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Description__ : public xsd__anyType
{ public:
    tt__Description                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":XPathExpression is a simpleType restriction of type xs:string.
///
typedef std::string tt__XPathExpression;

/// @brief Class wrapper for type tt__XPathExpression derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__XPathExpression__ : public xsd__anyType
{ public:
    tt__XPathExpression                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SearchState is a simpleType restriction of type xs:string.
///
enum class tt__SearchState
{
/// <PRE><BLOCKQUOTE>
///   The search is queued and not yet started.
/// </BLOCKQUOTE></PRE>
///
	Queued,	///< xs:string value="Queued"
/// <PRE><BLOCKQUOTE>
///   The search is underway and not yet completed.
/// </BLOCKQUOTE></PRE>
///
	Searching,	///< xs:string value="Searching"
/// <PRE><BLOCKQUOTE>
///   The search has been completed and no new results will be found.
/// </BLOCKQUOTE></PRE>
///
	Completed,	///< xs:string value="Completed"
/// <PRE><BLOCKQUOTE>
///   The state of the search is unknown. (This is not a valid response from GetSearchState.)
/// </BLOCKQUOTE></PRE>
///
	Unknown,	///< xs:string value="Unknown"
};

/// @brief Class wrapper for type tt__SearchState derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__SearchState__ : public xsd__anyType
{ public:
    tt__SearchState                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingStatus is a simpleType restriction of type xs:string.
///
enum class tt__RecordingStatus
{
	Initiated,	///< xs:string value="Initiated"
	Recording,	///< xs:string value="Recording"
	Stopped,	///< xs:string value="Stopped"
	Removing,	///< xs:string value="Removing"
	Removed,	///< xs:string value="Removed"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
///
	Unknown,	///< xs:string value="Unknown"
};

/// @brief Class wrapper for type tt__RecordingStatus derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RecordingStatus__ : public xsd__anyType
{ public:
    tt__RecordingStatus                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":TrackType is a simpleType restriction of type xs:string.
///
enum class tt__TrackType
{
	Video,	///< xs:string value="Video"
	Audio,	///< xs:string value="Audio"
	Metadata,	///< xs:string value="Metadata"
/// <PRE><BLOCKQUOTE>
///   Placeholder for future extension.
/// </BLOCKQUOTE></PRE>
///
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__TrackType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__TrackType__ : public xsd__anyType
{ public:
    tt__TrackType                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobMode is a simpleType restriction of type xs:string.
///
typedef std::string tt__RecordingJobMode;

/// @brief Class wrapper for type tt__RecordingJobMode derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RecordingJobMode__ : public xsd__anyType
{ public:
    tt__RecordingJobMode                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobState is a simpleType restriction of type xs:string.
///
typedef std::string tt__RecordingJobState;

/// @brief Class wrapper for type tt__RecordingJobState derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RecordingJobState__ : public xsd__anyType
{ public:
    tt__RecordingJobState                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ModeOfOperation is a simpleType restriction of type xs:string.
///
enum class tt__ModeOfOperation
{
	Idle,	///< xs:string value="Idle"
	Active,	///< xs:string value="Active"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
///
	Unknown,	///< xs:string value="Unknown"
};

/// @brief Class wrapper for type tt__ModeOfOperation derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ModeOfOperation__ : public xsd__anyType
{ public:
    tt__ModeOfOperation                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassType is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   AudioClassType acceptable values are;
///   gun_shot, scream, glass_breaking, tire_screech
/// </BLOCKQUOTE></PRE>
///
typedef std::string tt__AudioClassType;

/// @brief Class wrapper for type tt__AudioClassType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__AudioClassType__ : public xsd__anyType
{ public:
    tt__AudioClassType                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":OSDType is a simpleType restriction of type xs:string.
///
enum class tt__OSDType
{
	Text,	///< xs:string value="Text"
	Image,	///< xs:string value="Image"
	Extended,	///< xs:string value="Extended"
};

/// @brief Class wrapper for type tt__OSDType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__OSDType__ : public xsd__anyType
{ public:
    tt__OSDType                          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReferenceToken is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Unique identifier for a physical or logical resource.
///   Tokens should be assigned such that they are unique within a device. Tokens must be at least unique within its class.
///   Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Length of this content is 0 to 64.
typedef std::string tt__ReferenceToken : 64;

/// @brief Class wrapper for type tt__ReferenceToken derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ReferenceToken__ : public xsd__anyType
{ public:
    tt__ReferenceToken                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":MoveStatus is a simpleType restriction of type xs:string.
///
enum class tt__MoveStatus
{
	IDLE,	///< xs:string value="IDLE"
	MOVING,	///< xs:string value="MOVING"
	UNKNOWN,	///< xs:string value="UNKNOWN"
};

/// @brief Class wrapper for type tt__MoveStatus derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__MoveStatus__ : public xsd__anyType
{ public:
    tt__MoveStatus                       __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Entity is a simpleType restriction of type xs:string.
///
enum class tt__Entity
{
	Device,	///< xs:string value="Device"
	VideoSource,	///< xs:string value="VideoSource"
	AudioSource,	///< xs:string value="AudioSource"
};

/// @brief Class wrapper for type tt__Entity derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__Entity__ : public xsd__anyType
{ public:
    tt__Entity                           __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsn/t-1":FullTopicExpression is a simpleType restriction of type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   TopicPathExpression ::= TopicPath ( '|' TopicPath )* TopicPath ::= RootTopic ChildTopicExpression* RootTopic ::= NamespacePrefix? ('//')? (NCName | '*') NamespacePrefix ::= NCName ':' ChildTopicExpression ::= '/' '/'? (QName | NCName | '*'| '.')
/// </BLOCKQUOTE></PRE>
///
/// Content pattern is "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*".
typedef xsd__token wstop__FullTopicExpression "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*";

/// @brief Class wrapper for type wstop__FullTopicExpression derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class wstop__FullTopicExpression__ : public xsd__anyType
{ public:
    wstop__FullTopicExpression           __item;                       
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":ConcreteTopicExpression is a simpleType restriction of type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   The pattern allows strings matching the following EBNF:
///   ConcreteTopicPath ::= RootTopic ChildTopic* RootTopic ::= QName ChildTopic ::= '/' (QName | NCName)
/// </BLOCKQUOTE></PRE>
///
/// Content pattern is "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*".
typedef xsd__token wstop__ConcreteTopicExpression "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*";

/// @brief Class wrapper for type wstop__ConcreteTopicExpression derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class wstop__ConcreteTopicExpression__ : public xsd__anyType
{ public:
    wstop__ConcreteTopicExpression       __item;                       
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":SimpleTopicExpression is a simpleType restriction of type xs:QName.
///
/// <PRE><BLOCKQUOTE>
///   The pattern allows strings matching the following EBNF:
///   RootTopic ::= QName
/// </BLOCKQUOTE></PRE>
///
typedef xsd__QName wstop__SimpleTopicExpression;

/// @brief Class wrapper for type wstop__SimpleTopicExpression derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class wstop__SimpleTopicExpression__ : public xsd__anyType
{ public:
    wstop__SimpleTopicExpression         __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":RelationshipType is a simpleType restriction of type xs:QName.
///
enum class wsd__RelationshipType
{
	wsd__Suppression,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2005/04/discovery":Suppression"
};

/// @brief Class wrapper for type wsd__RelationshipType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class wsd__RelationshipType__ : public xsd__anyType
{ public:
    wsd__RelationshipType                __item;                       
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":FaultCodeType is a simpleType restriction of type xs:QName.
///
enum class wsd__FaultCodeType
{
	wsd__MatchingRuleNotSupported,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2005/04/discovery":MatchingRuleNotSupported"
};

/// @brief Class wrapper for type wsd__FaultCodeType derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class wsd__FaultCodeType__ : public xsd__anyType
{ public:
    wsd__FaultCodeType                   __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":RelationshipTypeValues is a simpleType restriction of type xs:QName.
///
enum class wsa__RelationshipTypeValues
{
	wsa__Reply,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":Reply"
};

/// @brief Class wrapper for type wsa__RelationshipTypeValues derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class wsa__RelationshipTypeValues__ : public xsd__anyType
{ public:
    wsa__RelationshipTypeValues          __item;                       
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":FaultSubcodeValues is a simpleType restriction of type xs:QName.
///
enum class wsa__FaultSubcodeValues
{
	wsa__InvalidMessageInformationHeader,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":InvalidMessageInformationHeader"
	wsa__MessageInformationHeaderRequired,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":MessageInformationHeaderRequired"
	wsa__DestinationUnreachable,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":DestinationUnreachable"
	wsa__ActionNotSupported,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":ActionNotSupported"
	wsa__EndpointUnavailable,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointUnavailable"
};

/// @brief Class wrapper for type wsa__FaultSubcodeValues derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class wsa__FaultSubcodeValues__ : public xsd__anyType
{ public:
    wsa__FaultSubcodeValues              __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/schema":ReceiverReference is a simpleType restriction of type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__ReceiverReference;

/// @brief Class wrapper for type tt__ReceiverReference derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__ReceiverReference__ : public xsd__anyType
{ public:
    tt__ReceiverReference                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingReference is a simpleType restriction of type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__RecordingReference;

/// @brief Class wrapper for type tt__RecordingReference derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RecordingReference__ : public xsd__anyType
{ public:
    tt__RecordingReference               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":TrackReference is a simpleType restriction of type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__TrackReference;

/// @brief Class wrapper for type tt__TrackReference derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__TrackReference__ : public xsd__anyType
{ public:
    tt__TrackReference                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":JobToken is a simpleType restriction of type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__JobToken;

/// @brief Class wrapper for type tt__JobToken derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__JobToken__ : public xsd__anyType
{ public:
    tt__JobToken                         __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobReference is a simpleType restriction of type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__RecordingJobReference;

/// @brief Class wrapper for type tt__RecordingJobReference derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class tt__RecordingJobReference__ : public xsd__anyType
{ public:
    tt__RecordingJobReference            __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/device/wsdl":Service is a complexType.
///
/// @note class tds__Service operations:
/// - tds__Service* soap_new_tds__Service(soap*) allocate and default initialize
/// - tds__Service* soap_new_tds__Service(soap*, int num) allocate and default initialize an array
/// - tds__Service* soap_new_req_tds__Service(soap*, ...) allocate, set required members
/// - tds__Service* soap_new_set_tds__Service(soap*, ...) allocate, set all public members
/// - tds__Service::soap_default(soap*) default initialize members
/// - int soap_read_tds__Service(soap*, tds__Service*) deserialize from a stream
/// - int soap_write_tds__Service(soap*, tds__Service*) serialize to a stream
/// - tds__Service* tds__Service::soap_dup(soap*) returns deep copy of tds__Service, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__Service::soap_del() deep deletes tds__Service data members, use only after tds__Service::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__Service::soap_type() returns SOAP_TYPE_tds__Service or derived type identifier
class tds__Service : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Namespace of the service being described. This parameter allows to match the service capabilities to the service. Note that only one set of capabilities is supported per namespace.
/// </BLOCKQUOTE></PRE>
///
/// Element "Namespace" of type xs:anyURI.
    xsd__anyURI                          Namespace                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The transport addresses where the service can be reached. The scheme and IP part shall match the one used in the request (i.e. the GetServices request).
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @note class _tds__Service_Capabilities operations:
/// - _tds__Service_Capabilities* soap_new__tds__Service_Capabilities(soap*) allocate and default initialize
/// - _tds__Service_Capabilities* soap_new__tds__Service_Capabilities(soap*, int num) allocate and default initialize an array
/// - _tds__Service_Capabilities* soap_new_req__tds__Service_Capabilities(soap*, ...) allocate, set required members
/// - _tds__Service_Capabilities* soap_new_set__tds__Service_Capabilities(soap*, ...) allocate, set all public members
/// - _tds__Service_Capabilities::soap_default(soap*) default initialize members
/// - int soap_read__tds__Service_Capabilities(soap*, _tds__Service_Capabilities*) deserialize from a stream
/// - int soap_write__tds__Service_Capabilities(soap*, _tds__Service_Capabilities*) serialize to a stream
/// - _tds__Service_Capabilities* _tds__Service_Capabilities::soap_dup(soap*) returns deep copy of _tds__Service_Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__Service_Capabilities::soap_del() deep deletes _tds__Service_Capabilities data members, use only after _tds__Service_Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__Service_Capabilities::soap_type() returns SOAP_TYPE__tds__Service_Capabilities or derived type identifier
    class _tds__Service_Capabilities
    { public:
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *Capabilities                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The version of the service (not the ONVIF core spec version).
/// </BLOCKQUOTE></PRE>
///
/// Element "Version" of type "http://www.onvif.org/ver10/schema":OnvifVersion.
    tt__OnvifVersion*                    Version                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities is a complexType.
///
/// @note class tds__DeviceServiceCapabilities operations:
/// - tds__DeviceServiceCapabilities* soap_new_tds__DeviceServiceCapabilities(soap*) allocate and default initialize
/// - tds__DeviceServiceCapabilities* soap_new_tds__DeviceServiceCapabilities(soap*, int num) allocate and default initialize an array
/// - tds__DeviceServiceCapabilities* soap_new_req_tds__DeviceServiceCapabilities(soap*, ...) allocate, set required members
/// - tds__DeviceServiceCapabilities* soap_new_set_tds__DeviceServiceCapabilities(soap*, ...) allocate, set all public members
/// - tds__DeviceServiceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tds__DeviceServiceCapabilities(soap*, tds__DeviceServiceCapabilities*) deserialize from a stream
/// - int soap_write_tds__DeviceServiceCapabilities(soap*, tds__DeviceServiceCapabilities*) serialize to a stream
/// - tds__DeviceServiceCapabilities* tds__DeviceServiceCapabilities::soap_dup(soap*) returns deep copy of tds__DeviceServiceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__DeviceServiceCapabilities::soap_del() deep deletes tds__DeviceServiceCapabilities data members, use only after tds__DeviceServiceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__DeviceServiceCapabilities::soap_type() returns SOAP_TYPE_tds__DeviceServiceCapabilities or derived type identifier
class tds__DeviceServiceCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "Network" of type "http://www.onvif.org/ver10/device/wsdl":NetworkCapabilities.
    tds__NetworkCapabilities*            Network                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Security capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "Security" of type "http://www.onvif.org/ver10/device/wsdl":SecurityCapabilities.
    tds__SecurityCapabilities*           Security                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   System capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "System" of type "http://www.onvif.org/ver10/device/wsdl":SystemCapabilities.
    tds__SystemCapabilities*             System                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Capabilities that do not fit in any of the other categories.
/// </BLOCKQUOTE></PRE>
///
/// Element "Misc" of type "http://www.onvif.org/ver10/device/wsdl":MiscCapabilities.
    tds__MiscCapabilities*               Misc                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":NetworkCapabilities is a complexType.
///
/// @note class tds__NetworkCapabilities operations:
/// - tds__NetworkCapabilities* soap_new_tds__NetworkCapabilities(soap*) allocate and default initialize
/// - tds__NetworkCapabilities* soap_new_tds__NetworkCapabilities(soap*, int num) allocate and default initialize an array
/// - tds__NetworkCapabilities* soap_new_req_tds__NetworkCapabilities(soap*, ...) allocate, set required members
/// - tds__NetworkCapabilities* soap_new_set_tds__NetworkCapabilities(soap*, ...) allocate, set all public members
/// - tds__NetworkCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tds__NetworkCapabilities(soap*, tds__NetworkCapabilities*) deserialize from a stream
/// - int soap_write_tds__NetworkCapabilities(soap*, tds__NetworkCapabilities*) serialize to a stream
/// - tds__NetworkCapabilities* tds__NetworkCapabilities::soap_dup(soap*) returns deep copy of tds__NetworkCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__NetworkCapabilities::soap_del() deep deletes tds__NetworkCapabilities data members, use only after tds__NetworkCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__NetworkCapabilities::soap_type() returns SOAP_TYPE_tds__NetworkCapabilities or derived type identifier
class tds__NetworkCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates support for IP filtering.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "IPFilter" of type xs:boolean.
  @ bool*                                IPFilter                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for zeroconf.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "ZeroConfiguration" of type xs:boolean.
  @ bool*                                ZeroConfiguration              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for IPv6.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "IPVersion6" of type xs:boolean.
  @ bool*                                IPVersion6                     0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for dynamic DNS configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "DynDNS" of type xs:boolean.
  @ bool*                                DynDNS                         0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for IEEE 802.11 configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Dot11Configuration" of type xs:boolean.
  @ bool*                                Dot11Configuration             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates the maximum number of Dot1X configurations supported by the device
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Dot1XConfigurations" of type xs:int.
  @ int*                                 Dot1XConfigurations            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieval of hostname from DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "HostnameFromDHCP" of type xs:boolean.
  @ bool*                                HostnameFromDHCP               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum number of NTP servers supported by the devices SetNTP command.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "NTP" of type xs:int.
  @ int*                                 NTP                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for Stateful IPv6 DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "DHCPv6" of type xs:boolean.
  @ bool*                                DHCPv6                         0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":SecurityCapabilities is a complexType.
///
/// @note class tds__SecurityCapabilities operations:
/// - tds__SecurityCapabilities* soap_new_tds__SecurityCapabilities(soap*) allocate and default initialize
/// - tds__SecurityCapabilities* soap_new_tds__SecurityCapabilities(soap*, int num) allocate and default initialize an array
/// - tds__SecurityCapabilities* soap_new_req_tds__SecurityCapabilities(soap*, ...) allocate, set required members
/// - tds__SecurityCapabilities* soap_new_set_tds__SecurityCapabilities(soap*, ...) allocate, set all public members
/// - tds__SecurityCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tds__SecurityCapabilities(soap*, tds__SecurityCapabilities*) deserialize from a stream
/// - int soap_write_tds__SecurityCapabilities(soap*, tds__SecurityCapabilities*) serialize to a stream
/// - tds__SecurityCapabilities* tds__SecurityCapabilities::soap_dup(soap*) returns deep copy of tds__SecurityCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__SecurityCapabilities::soap_del() deep deletes tds__SecurityCapabilities data members, use only after tds__SecurityCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__SecurityCapabilities::soap_type() returns SOAP_TYPE_tds__SecurityCapabilities or derived type identifier
class tds__SecurityCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates support for TLS 1.0.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "TLS1.0" of type xs:boolean.
  @ bool*                                TLS1_x002e0                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for TLS 1.1.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "TLS1.1" of type xs:boolean.
  @ bool*                                TLS1_x002e1                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for TLS 1.2.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "TLS1.2" of type xs:boolean.
  @ bool*                                TLS1_x002e2                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for onboard key generation.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "OnboardKeyGeneration" of type xs:boolean.
  @ bool*                                OnboardKeyGeneration           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for access policy configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "AccessPolicyConfig" of type xs:boolean.
  @ bool*                                AccessPolicyConfig             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for the ONVIF default access policy.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "DefaultAccessPolicy" of type xs:boolean.
  @ bool*                                DefaultAccessPolicy            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for IEEE 802.1X configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Dot1X" of type xs:boolean.
  @ bool*                                Dot1X                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for remote user configuration. Used when accessing another device.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RemoteUserHandling" of type xs:boolean.
  @ bool*                                RemoteUserHandling             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security X.509 token.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "X.509Token" of type xs:boolean.
  @ bool*                                X_x002e509Token                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security SAML token.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "SAMLToken" of type xs:boolean.
  @ bool*                                SAMLToken                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security Kerberos token.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "KerberosToken" of type xs:boolean.
  @ bool*                                KerberosToken                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security Username token.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "UsernameToken" of type xs:boolean.
  @ bool*                                UsernameToken                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS over HTTP digest authenticated communication layer.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "HttpDigest" of type xs:boolean.
  @ bool*                                HttpDigest                     0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security REL token.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RELToken" of type xs:boolean.
  @ bool*                                RELToken                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   EAP Methods supported by the device. The int values refer to the <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "SupportedEAPMethods" of type "http://www.onvif.org/ver10/device/wsdl":EAPMethodTypes.
  @ tds__EAPMethodTypes*                 SupportedEAPMethods            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum number of users that the device supports.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxUsers" of type xs:int.
  @ int*                                 MaxUsers                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum number of characters supported for the username by CreateUsers.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxUserNameLength" of type xs:int.
  @ int*                                 MaxUserNameLength              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum number of characters supported for the password by CreateUsers and SetUser.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxPasswordLength" of type xs:int.
  @ int*                                 MaxPasswordLength              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":SystemCapabilities is a complexType.
///
/// @note class tds__SystemCapabilities operations:
/// - tds__SystemCapabilities* soap_new_tds__SystemCapabilities(soap*) allocate and default initialize
/// - tds__SystemCapabilities* soap_new_tds__SystemCapabilities(soap*, int num) allocate and default initialize an array
/// - tds__SystemCapabilities* soap_new_req_tds__SystemCapabilities(soap*, ...) allocate, set required members
/// - tds__SystemCapabilities* soap_new_set_tds__SystemCapabilities(soap*, ...) allocate, set all public members
/// - tds__SystemCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tds__SystemCapabilities(soap*, tds__SystemCapabilities*) deserialize from a stream
/// - int soap_write_tds__SystemCapabilities(soap*, tds__SystemCapabilities*) serialize to a stream
/// - tds__SystemCapabilities* tds__SystemCapabilities::soap_dup(soap*) returns deep copy of tds__SystemCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__SystemCapabilities::soap_del() deep deletes tds__SystemCapabilities data members, use only after tds__SystemCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__SystemCapabilities::soap_type() returns SOAP_TYPE_tds__SystemCapabilities or derived type identifier
class tds__SystemCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS Discovery resolve requests.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "DiscoveryResolve" of type xs:boolean.
  @ bool*                                DiscoveryResolve               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Discovery Bye.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "DiscoveryBye" of type xs:boolean.
  @ bool*                                DiscoveryBye                   0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for remote discovery.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RemoteDiscovery" of type xs:boolean.
  @ bool*                                RemoteDiscovery                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for system backup through MTOM.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "SystemBackup" of type xs:boolean.
  @ bool*                                SystemBackup                   0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieval of system logging through MTOM.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "SystemLogging" of type xs:boolean.
  @ bool*                                SystemLogging                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for firmware upgrade through MTOM.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "FirmwareUpgrade" of type xs:boolean.
  @ bool*                                FirmwareUpgrade                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for firmware upgrade through HTTP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "HttpFirmwareUpgrade" of type xs:boolean.
  @ bool*                                HttpFirmwareUpgrade            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for system backup through HTTP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "HttpSystemBackup" of type xs:boolean.
  @ bool*                                HttpSystemBackup               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieval of system logging through HTTP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "HttpSystemLogging" of type xs:boolean.
  @ bool*                                HttpSystemLogging              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieving support information through HTTP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "HttpSupportInformation" of type xs:boolean.
  @ bool*                                HttpSupportInformation         0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for storage configuration interfaces.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "StorageConfiguration" of type xs:boolean.
  @ bool*                                StorageConfiguration           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates maximum number of storage configurations supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxStorageConfigurations" of type xs:int.
  @ int*                                 MaxStorageConfigurations       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If present signals support for geo location. The value signals the supported number of entries.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GeoLocationEntries" of type xs:int.
  @ int*                                 GeoLocationEntries             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   List of supported automatic GeoLocation adjustment supported by the device. Valid items are defined by tds:AutoGeoMode.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "AutoGeo" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList*                  AutoGeo                        0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Enumerates the supported StorageTypes, see tds:StorageType.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "StorageTypesSupported" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList*                  StorageTypesSupported          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":MiscCapabilities is a complexType.
///
/// @note class tds__MiscCapabilities operations:
/// - tds__MiscCapabilities* soap_new_tds__MiscCapabilities(soap*) allocate and default initialize
/// - tds__MiscCapabilities* soap_new_tds__MiscCapabilities(soap*, int num) allocate and default initialize an array
/// - tds__MiscCapabilities* soap_new_req_tds__MiscCapabilities(soap*, ...) allocate, set required members
/// - tds__MiscCapabilities* soap_new_set_tds__MiscCapabilities(soap*, ...) allocate, set all public members
/// - tds__MiscCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tds__MiscCapabilities(soap*, tds__MiscCapabilities*) deserialize from a stream
/// - int soap_write_tds__MiscCapabilities(soap*, tds__MiscCapabilities*) serialize to a stream
/// - tds__MiscCapabilities* tds__MiscCapabilities::soap_dup(soap*) returns deep copy of tds__MiscCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__MiscCapabilities::soap_del() deep deletes tds__MiscCapabilities data members, use only after tds__MiscCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__MiscCapabilities::soap_type() returns SOAP_TYPE_tds__MiscCapabilities or derived type identifier
class tds__MiscCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Lists of commands supported by SendAuxiliaryCommand.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "AuxiliaryCommands" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList*                  AuxiliaryCommands              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":UserCredential is a complexType.
///
/// @note class tds__UserCredential operations:
/// - tds__UserCredential* soap_new_tds__UserCredential(soap*) allocate and default initialize
/// - tds__UserCredential* soap_new_tds__UserCredential(soap*, int num) allocate and default initialize an array
/// - tds__UserCredential* soap_new_req_tds__UserCredential(soap*, ...) allocate, set required members
/// - tds__UserCredential* soap_new_set_tds__UserCredential(soap*, ...) allocate, set all public members
/// - tds__UserCredential::soap_default(soap*) default initialize members
/// - int soap_read_tds__UserCredential(soap*, tds__UserCredential*) deserialize from a stream
/// - int soap_write_tds__UserCredential(soap*, tds__UserCredential*) serialize to a stream
/// - tds__UserCredential* tds__UserCredential::soap_dup(soap*) returns deep copy of tds__UserCredential, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__UserCredential::soap_del() deep deletes tds__UserCredential data members, use only after tds__UserCredential::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__UserCredential::soap_type() returns SOAP_TYPE_tds__UserCredential or derived type identifier
class tds__UserCredential : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   User name
/// </BLOCKQUOTE></PRE>
///
/// Element "UserName" of type xs:string.
    std::string                          UserName                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   optional password
/// </BLOCKQUOTE></PRE>
///
/// Element "Password" of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// @note class _tds__UserCredential_Extension operations:
/// - _tds__UserCredential_Extension* soap_new__tds__UserCredential_Extension(soap*) allocate and default initialize
/// - _tds__UserCredential_Extension* soap_new__tds__UserCredential_Extension(soap*, int num) allocate and default initialize an array
/// - _tds__UserCredential_Extension* soap_new_req__tds__UserCredential_Extension(soap*, ...) allocate, set required members
/// - _tds__UserCredential_Extension* soap_new_set__tds__UserCredential_Extension(soap*, ...) allocate, set all public members
/// - _tds__UserCredential_Extension::soap_default(soap*) default initialize members
/// - int soap_read__tds__UserCredential_Extension(soap*, _tds__UserCredential_Extension*) deserialize from a stream
/// - int soap_write__tds__UserCredential_Extension(soap*, _tds__UserCredential_Extension*) serialize to a stream
/// - _tds__UserCredential_Extension* _tds__UserCredential_Extension::soap_dup(soap*) returns deep copy of _tds__UserCredential_Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__UserCredential_Extension::soap_del() deep deletes _tds__UserCredential_Extension data members, use only after _tds__UserCredential_Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__UserCredential_Extension::soap_type() returns SOAP_TYPE__tds__UserCredential_Extension or derived type identifier
    class _tds__UserCredential_Extension
    { public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":StorageConfigurationData is a complexType.
///
/// @note class tds__StorageConfigurationData operations:
/// - tds__StorageConfigurationData* soap_new_tds__StorageConfigurationData(soap*) allocate and default initialize
/// - tds__StorageConfigurationData* soap_new_tds__StorageConfigurationData(soap*, int num) allocate and default initialize an array
/// - tds__StorageConfigurationData* soap_new_req_tds__StorageConfigurationData(soap*, ...) allocate, set required members
/// - tds__StorageConfigurationData* soap_new_set_tds__StorageConfigurationData(soap*, ...) allocate, set all public members
/// - tds__StorageConfigurationData::soap_default(soap*) default initialize members
/// - int soap_read_tds__StorageConfigurationData(soap*, tds__StorageConfigurationData*) deserialize from a stream
/// - int soap_write_tds__StorageConfigurationData(soap*, tds__StorageConfigurationData*) serialize to a stream
/// - tds__StorageConfigurationData* tds__StorageConfigurationData::soap_dup(soap*) returns deep copy of tds__StorageConfigurationData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__StorageConfigurationData::soap_del() deep deletes tds__StorageConfigurationData data members, use only after tds__StorageConfigurationData::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__StorageConfigurationData::soap_type() returns SOAP_TYPE_tds__StorageConfigurationData or derived type identifier
class tds__StorageConfigurationData : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   local path
/// </BLOCKQUOTE></PRE>
///
/// Element "LocalPath" of type xs:anyURI.
    xsd__anyURI*                         LocalPath                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Storage server address
/// </BLOCKQUOTE></PRE>
///
/// Element "StorageUri" of type xs:anyURI.
    xsd__anyURI*                         StorageUri                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   User credential for the storage server
/// </BLOCKQUOTE></PRE>
///
/// Element "User" of type "http://www.onvif.org/ver10/device/wsdl":UserCredential.
    tds__UserCredential*                 User                           0;	///< Optional element.
/// @note class _tds__StorageConfigurationData_Extension operations:
/// - _tds__StorageConfigurationData_Extension* soap_new__tds__StorageConfigurationData_Extension(soap*) allocate and default initialize
/// - _tds__StorageConfigurationData_Extension* soap_new__tds__StorageConfigurationData_Extension(soap*, int num) allocate and default initialize an array
/// - _tds__StorageConfigurationData_Extension* soap_new_req__tds__StorageConfigurationData_Extension(soap*, ...) allocate, set required members
/// - _tds__StorageConfigurationData_Extension* soap_new_set__tds__StorageConfigurationData_Extension(soap*, ...) allocate, set all public members
/// - _tds__StorageConfigurationData_Extension::soap_default(soap*) default initialize members
/// - int soap_read__tds__StorageConfigurationData_Extension(soap*, _tds__StorageConfigurationData_Extension*) deserialize from a stream
/// - int soap_write__tds__StorageConfigurationData_Extension(soap*, _tds__StorageConfigurationData_Extension*) serialize to a stream
/// - _tds__StorageConfigurationData_Extension* _tds__StorageConfigurationData_Extension::soap_dup(soap*) returns deep copy of _tds__StorageConfigurationData_Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__StorageConfigurationData_Extension::soap_del() deep deletes _tds__StorageConfigurationData_Extension data members, use only after _tds__StorageConfigurationData_Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__StorageConfigurationData_Extension::soap_type() returns SOAP_TYPE__tds__StorageConfigurationData_Extension or derived type identifier
    class _tds__StorageConfigurationData_Extension
    { public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   StorageType lists the acceptable values for type attribute
/// </BLOCKQUOTE></PRE>
///
/// Attribute "type" of type xs:string.
  @ std::string                          type                           1;	///< Required attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServices
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServices is a complexType.
///
/// @note class _tds__GetServices operations:
/// - _tds__GetServices* soap_new__tds__GetServices(soap*) allocate and default initialize
/// - _tds__GetServices* soap_new__tds__GetServices(soap*, int num) allocate and default initialize an array
/// - _tds__GetServices* soap_new_req__tds__GetServices(soap*, ...) allocate, set required members
/// - _tds__GetServices* soap_new_set__tds__GetServices(soap*, ...) allocate, set all public members
/// - _tds__GetServices::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetServices(soap*, _tds__GetServices*) deserialize from a stream
/// - int soap_write__tds__GetServices(soap*, _tds__GetServices*) serialize to a stream
/// - _tds__GetServices* _tds__GetServices::soap_dup(soap*) returns deep copy of _tds__GetServices, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetServices::soap_del() deep deletes _tds__GetServices data members, use only after _tds__GetServices::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetServices::soap_type() returns SOAP_TYPE__tds__GetServices or derived type identifier
class _tds__GetServices
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the service capabilities (untyped) should be included in the response.
/// </BLOCKQUOTE></PRE>
///
/// Element "IncludeCapability" of type xs:boolean.
    bool                                 IncludeCapability              1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServicesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServicesResponse is a complexType.
///
/// @note class _tds__GetServicesResponse operations:
/// - _tds__GetServicesResponse* soap_new__tds__GetServicesResponse(soap*) allocate and default initialize
/// - _tds__GetServicesResponse* soap_new__tds__GetServicesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetServicesResponse* soap_new_req__tds__GetServicesResponse(soap*, ...) allocate, set required members
/// - _tds__GetServicesResponse* soap_new_set__tds__GetServicesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetServicesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetServicesResponse(soap*, _tds__GetServicesResponse*) deserialize from a stream
/// - int soap_write__tds__GetServicesResponse(soap*, _tds__GetServicesResponse*) serialize to a stream
/// - _tds__GetServicesResponse* _tds__GetServicesResponse::soap_dup(soap*) returns deep copy of _tds__GetServicesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetServicesResponse::soap_del() deep deletes _tds__GetServicesResponse data members, use only after _tds__GetServicesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetServicesResponse::soap_type() returns SOAP_TYPE__tds__GetServicesResponse or derived type identifier
class _tds__GetServicesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Each Service element contains information about one service.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tds__Service* of length 1..unbounded.
    std::vector<tds__Service*          > Service                        1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilities
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilities is a complexType.
///
/// @note class _tds__GetServiceCapabilities operations:
/// - _tds__GetServiceCapabilities* soap_new__tds__GetServiceCapabilities(soap*) allocate and default initialize
/// - _tds__GetServiceCapabilities* soap_new__tds__GetServiceCapabilities(soap*, int num) allocate and default initialize an array
/// - _tds__GetServiceCapabilities* soap_new_req__tds__GetServiceCapabilities(soap*, ...) allocate, set required members
/// - _tds__GetServiceCapabilities* soap_new_set__tds__GetServiceCapabilities(soap*, ...) allocate, set all public members
/// - _tds__GetServiceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetServiceCapabilities(soap*, _tds__GetServiceCapabilities*) deserialize from a stream
/// - int soap_write__tds__GetServiceCapabilities(soap*, _tds__GetServiceCapabilities*) serialize to a stream
/// - _tds__GetServiceCapabilities* _tds__GetServiceCapabilities::soap_dup(soap*) returns deep copy of _tds__GetServiceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetServiceCapabilities::soap_del() deep deletes _tds__GetServiceCapabilities data members, use only after _tds__GetServiceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetServiceCapabilities::soap_type() returns SOAP_TYPE__tds__GetServiceCapabilities or derived type identifier
class _tds__GetServiceCapabilities
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilitiesResponse is a complexType.
///
/// @note class _tds__GetServiceCapabilitiesResponse operations:
/// - _tds__GetServiceCapabilitiesResponse* soap_new__tds__GetServiceCapabilitiesResponse(soap*) allocate and default initialize
/// - _tds__GetServiceCapabilitiesResponse* soap_new__tds__GetServiceCapabilitiesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetServiceCapabilitiesResponse* soap_new_req__tds__GetServiceCapabilitiesResponse(soap*, ...) allocate, set required members
/// - _tds__GetServiceCapabilitiesResponse* soap_new_set__tds__GetServiceCapabilitiesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetServiceCapabilitiesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetServiceCapabilitiesResponse(soap*, _tds__GetServiceCapabilitiesResponse*) deserialize from a stream
/// - int soap_write__tds__GetServiceCapabilitiesResponse(soap*, _tds__GetServiceCapabilitiesResponse*) serialize to a stream
/// - _tds__GetServiceCapabilitiesResponse* _tds__GetServiceCapabilitiesResponse::soap_dup(soap*) returns deep copy of _tds__GetServiceCapabilitiesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetServiceCapabilitiesResponse::soap_del() deep deletes _tds__GetServiceCapabilitiesResponse data members, use only after _tds__GetServiceCapabilitiesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetServiceCapabilitiesResponse::soap_type() returns SOAP_TYPE__tds__GetServiceCapabilitiesResponse or derived type identifier
class _tds__GetServiceCapabilitiesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   The capabilities for the device service is returned in the Capabilities element.
/// </BLOCKQUOTE></PRE>
///
/// Element "Capabilities" of type "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities.
    tds__DeviceServiceCapabilities*      Capabilities                   1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformation is a complexType.
///
/// @note class _tds__GetDeviceInformation operations:
/// - _tds__GetDeviceInformation* soap_new__tds__GetDeviceInformation(soap*) allocate and default initialize
/// - _tds__GetDeviceInformation* soap_new__tds__GetDeviceInformation(soap*, int num) allocate and default initialize an array
/// - _tds__GetDeviceInformation* soap_new_req__tds__GetDeviceInformation(soap*, ...) allocate, set required members
/// - _tds__GetDeviceInformation* soap_new_set__tds__GetDeviceInformation(soap*, ...) allocate, set all public members
/// - _tds__GetDeviceInformation::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDeviceInformation(soap*, _tds__GetDeviceInformation*) deserialize from a stream
/// - int soap_write__tds__GetDeviceInformation(soap*, _tds__GetDeviceInformation*) serialize to a stream
/// - _tds__GetDeviceInformation* _tds__GetDeviceInformation::soap_dup(soap*) returns deep copy of _tds__GetDeviceInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDeviceInformation::soap_del() deep deletes _tds__GetDeviceInformation data members, use only after _tds__GetDeviceInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDeviceInformation::soap_type() returns SOAP_TYPE__tds__GetDeviceInformation or derived type identifier
class _tds__GetDeviceInformation
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformationResponse is a complexType.
///
/// @note class _tds__GetDeviceInformationResponse operations:
/// - _tds__GetDeviceInformationResponse* soap_new__tds__GetDeviceInformationResponse(soap*) allocate and default initialize
/// - _tds__GetDeviceInformationResponse* soap_new__tds__GetDeviceInformationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDeviceInformationResponse* soap_new_req__tds__GetDeviceInformationResponse(soap*, ...) allocate, set required members
/// - _tds__GetDeviceInformationResponse* soap_new_set__tds__GetDeviceInformationResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDeviceInformationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDeviceInformationResponse(soap*, _tds__GetDeviceInformationResponse*) deserialize from a stream
/// - int soap_write__tds__GetDeviceInformationResponse(soap*, _tds__GetDeviceInformationResponse*) serialize to a stream
/// - _tds__GetDeviceInformationResponse* _tds__GetDeviceInformationResponse::soap_dup(soap*) returns deep copy of _tds__GetDeviceInformationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDeviceInformationResponse::soap_del() deep deletes _tds__GetDeviceInformationResponse data members, use only after _tds__GetDeviceInformationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDeviceInformationResponse::soap_type() returns SOAP_TYPE__tds__GetDeviceInformationResponse or derived type identifier
class _tds__GetDeviceInformationResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   The manufactor of the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Manufacturer" of type xs:string.
    std::string                          Manufacturer                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The device model.
/// </BLOCKQUOTE></PRE>
///
/// Element "Model" of type xs:string.
    std::string                          Model                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The firmware version in the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "FirmwareVersion" of type xs:string.
    std::string                          FirmwareVersion                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The serial number of the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "SerialNumber" of type xs:string.
    std::string                          SerialNumber                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The hardware ID of the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "HardwareId" of type xs:string.
    std::string                          HardwareId                     1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTime
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTime is a complexType.
///
/// @note class _tds__SetSystemDateAndTime operations:
/// - _tds__SetSystemDateAndTime* soap_new__tds__SetSystemDateAndTime(soap*) allocate and default initialize
/// - _tds__SetSystemDateAndTime* soap_new__tds__SetSystemDateAndTime(soap*, int num) allocate and default initialize an array
/// - _tds__SetSystemDateAndTime* soap_new_req__tds__SetSystemDateAndTime(soap*, ...) allocate, set required members
/// - _tds__SetSystemDateAndTime* soap_new_set__tds__SetSystemDateAndTime(soap*, ...) allocate, set all public members
/// - _tds__SetSystemDateAndTime::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetSystemDateAndTime(soap*, _tds__SetSystemDateAndTime*) deserialize from a stream
/// - int soap_write__tds__SetSystemDateAndTime(soap*, _tds__SetSystemDateAndTime*) serialize to a stream
/// - _tds__SetSystemDateAndTime* _tds__SetSystemDateAndTime::soap_dup(soap*) returns deep copy of _tds__SetSystemDateAndTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetSystemDateAndTime::soap_del() deep deletes _tds__SetSystemDateAndTime data members, use only after _tds__SetSystemDateAndTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetSystemDateAndTime::soap_type() returns SOAP_TYPE__tds__SetSystemDateAndTime or derived type identifier
class _tds__SetSystemDateAndTime
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines if the date and time is set via NTP or manually.
/// </BLOCKQUOTE></PRE>
///
/// Element "DateTimeType" of type "http://www.onvif.org/ver10/schema":SetDateTimeType.
    tt__SetDateTimeType                  DateTimeType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Automatically adjust Daylight savings if defined in TimeZone.
/// </BLOCKQUOTE></PRE>
///
/// Element "DaylightSavings" of type xs:boolean.
    bool                                 DaylightSavings                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The time zone in POSIX 1003.1 format
/// </BLOCKQUOTE></PRE>
///
/// Element "TimeZone" of type "http://www.onvif.org/ver10/schema":TimeZone.
    tt__TimeZone*                        TimeZone                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time in UTC. If time is obtained via NTP, UTCDateTime has no meaning
/// </BLOCKQUOTE></PRE>
///
/// Element "UTCDateTime" of type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        UTCDateTime                    0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTimeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTimeResponse is a complexType.
///
/// @note class _tds__SetSystemDateAndTimeResponse operations:
/// - _tds__SetSystemDateAndTimeResponse* soap_new__tds__SetSystemDateAndTimeResponse(soap*) allocate and default initialize
/// - _tds__SetSystemDateAndTimeResponse* soap_new__tds__SetSystemDateAndTimeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetSystemDateAndTimeResponse* soap_new_req__tds__SetSystemDateAndTimeResponse(soap*, ...) allocate, set required members
/// - _tds__SetSystemDateAndTimeResponse* soap_new_set__tds__SetSystemDateAndTimeResponse(soap*, ...) allocate, set all public members
/// - _tds__SetSystemDateAndTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetSystemDateAndTimeResponse(soap*, _tds__SetSystemDateAndTimeResponse*) deserialize from a stream
/// - int soap_write__tds__SetSystemDateAndTimeResponse(soap*, _tds__SetSystemDateAndTimeResponse*) serialize to a stream
/// - _tds__SetSystemDateAndTimeResponse* _tds__SetSystemDateAndTimeResponse::soap_dup(soap*) returns deep copy of _tds__SetSystemDateAndTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetSystemDateAndTimeResponse::soap_del() deep deletes _tds__SetSystemDateAndTimeResponse data members, use only after _tds__SetSystemDateAndTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetSystemDateAndTimeResponse::soap_type() returns SOAP_TYPE__tds__SetSystemDateAndTimeResponse or derived type identifier
class _tds__SetSystemDateAndTimeResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTime
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTime is a complexType.
///
/// @note class _tds__GetSystemDateAndTime operations:
/// - _tds__GetSystemDateAndTime* soap_new__tds__GetSystemDateAndTime(soap*) allocate and default initialize
/// - _tds__GetSystemDateAndTime* soap_new__tds__GetSystemDateAndTime(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemDateAndTime* soap_new_req__tds__GetSystemDateAndTime(soap*, ...) allocate, set required members
/// - _tds__GetSystemDateAndTime* soap_new_set__tds__GetSystemDateAndTime(soap*, ...) allocate, set all public members
/// - _tds__GetSystemDateAndTime::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemDateAndTime(soap*, _tds__GetSystemDateAndTime*) deserialize from a stream
/// - int soap_write__tds__GetSystemDateAndTime(soap*, _tds__GetSystemDateAndTime*) serialize to a stream
/// - _tds__GetSystemDateAndTime* _tds__GetSystemDateAndTime::soap_dup(soap*) returns deep copy of _tds__GetSystemDateAndTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemDateAndTime::soap_del() deep deletes _tds__GetSystemDateAndTime data members, use only after _tds__GetSystemDateAndTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemDateAndTime::soap_type() returns SOAP_TYPE__tds__GetSystemDateAndTime or derived type identifier
class _tds__GetSystemDateAndTime
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTimeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTimeResponse is a complexType.
///
/// @note class _tds__GetSystemDateAndTimeResponse operations:
/// - _tds__GetSystemDateAndTimeResponse* soap_new__tds__GetSystemDateAndTimeResponse(soap*) allocate and default initialize
/// - _tds__GetSystemDateAndTimeResponse* soap_new__tds__GetSystemDateAndTimeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemDateAndTimeResponse* soap_new_req__tds__GetSystemDateAndTimeResponse(soap*, ...) allocate, set required members
/// - _tds__GetSystemDateAndTimeResponse* soap_new_set__tds__GetSystemDateAndTimeResponse(soap*, ...) allocate, set all public members
/// - _tds__GetSystemDateAndTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemDateAndTimeResponse(soap*, _tds__GetSystemDateAndTimeResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemDateAndTimeResponse(soap*, _tds__GetSystemDateAndTimeResponse*) serialize to a stream
/// - _tds__GetSystemDateAndTimeResponse* _tds__GetSystemDateAndTimeResponse::soap_dup(soap*) returns deep copy of _tds__GetSystemDateAndTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemDateAndTimeResponse::soap_del() deep deletes _tds__GetSystemDateAndTimeResponse data members, use only after _tds__GetSystemDateAndTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemDateAndTimeResponse::soap_type() returns SOAP_TYPE__tds__GetSystemDateAndTimeResponse or derived type identifier
class _tds__GetSystemDateAndTimeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
/// </BLOCKQUOTE></PRE>
///
/// Element "SystemDateAndTime" of type "http://www.onvif.org/ver10/schema":SystemDateTime.
    tt__SystemDateTime*                  SystemDateAndTime              1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefault
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefault is a complexType.
///
/// @note class _tds__SetSystemFactoryDefault operations:
/// - _tds__SetSystemFactoryDefault* soap_new__tds__SetSystemFactoryDefault(soap*) allocate and default initialize
/// - _tds__SetSystemFactoryDefault* soap_new__tds__SetSystemFactoryDefault(soap*, int num) allocate and default initialize an array
/// - _tds__SetSystemFactoryDefault* soap_new_req__tds__SetSystemFactoryDefault(soap*, ...) allocate, set required members
/// - _tds__SetSystemFactoryDefault* soap_new_set__tds__SetSystemFactoryDefault(soap*, ...) allocate, set all public members
/// - _tds__SetSystemFactoryDefault::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetSystemFactoryDefault(soap*, _tds__SetSystemFactoryDefault*) deserialize from a stream
/// - int soap_write__tds__SetSystemFactoryDefault(soap*, _tds__SetSystemFactoryDefault*) serialize to a stream
/// - _tds__SetSystemFactoryDefault* _tds__SetSystemFactoryDefault::soap_dup(soap*) returns deep copy of _tds__SetSystemFactoryDefault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetSystemFactoryDefault::soap_del() deep deletes _tds__SetSystemFactoryDefault data members, use only after _tds__SetSystemFactoryDefault::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetSystemFactoryDefault::soap_type() returns SOAP_TYPE__tds__SetSystemFactoryDefault or derived type identifier
class _tds__SetSystemFactoryDefault
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the factory default action type.
/// </BLOCKQUOTE></PRE>
///
/// Element "FactoryDefault" of type "http://www.onvif.org/ver10/schema":FactoryDefaultType.
    tt__FactoryDefaultType               FactoryDefault                 1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefaultResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefaultResponse is a complexType.
///
/// @note class _tds__SetSystemFactoryDefaultResponse operations:
/// - _tds__SetSystemFactoryDefaultResponse* soap_new__tds__SetSystemFactoryDefaultResponse(soap*) allocate and default initialize
/// - _tds__SetSystemFactoryDefaultResponse* soap_new__tds__SetSystemFactoryDefaultResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetSystemFactoryDefaultResponse* soap_new_req__tds__SetSystemFactoryDefaultResponse(soap*, ...) allocate, set required members
/// - _tds__SetSystemFactoryDefaultResponse* soap_new_set__tds__SetSystemFactoryDefaultResponse(soap*, ...) allocate, set all public members
/// - _tds__SetSystemFactoryDefaultResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetSystemFactoryDefaultResponse(soap*, _tds__SetSystemFactoryDefaultResponse*) deserialize from a stream
/// - int soap_write__tds__SetSystemFactoryDefaultResponse(soap*, _tds__SetSystemFactoryDefaultResponse*) serialize to a stream
/// - _tds__SetSystemFactoryDefaultResponse* _tds__SetSystemFactoryDefaultResponse::soap_dup(soap*) returns deep copy of _tds__SetSystemFactoryDefaultResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetSystemFactoryDefaultResponse::soap_del() deep deletes _tds__SetSystemFactoryDefaultResponse data members, use only after _tds__SetSystemFactoryDefaultResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetSystemFactoryDefaultResponse::soap_type() returns SOAP_TYPE__tds__SetSystemFactoryDefaultResponse or derived type identifier
class _tds__SetSystemFactoryDefaultResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmware
/// @brief "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmware is a complexType.
///
/// @note class _tds__UpgradeSystemFirmware operations:
/// - _tds__UpgradeSystemFirmware* soap_new__tds__UpgradeSystemFirmware(soap*) allocate and default initialize
/// - _tds__UpgradeSystemFirmware* soap_new__tds__UpgradeSystemFirmware(soap*, int num) allocate and default initialize an array
/// - _tds__UpgradeSystemFirmware* soap_new_req__tds__UpgradeSystemFirmware(soap*, ...) allocate, set required members
/// - _tds__UpgradeSystemFirmware* soap_new_set__tds__UpgradeSystemFirmware(soap*, ...) allocate, set all public members
/// - _tds__UpgradeSystemFirmware::soap_default(soap*) default initialize members
/// - int soap_read__tds__UpgradeSystemFirmware(soap*, _tds__UpgradeSystemFirmware*) deserialize from a stream
/// - int soap_write__tds__UpgradeSystemFirmware(soap*, _tds__UpgradeSystemFirmware*) serialize to a stream
/// - _tds__UpgradeSystemFirmware* _tds__UpgradeSystemFirmware::soap_dup(soap*) returns deep copy of _tds__UpgradeSystemFirmware, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__UpgradeSystemFirmware::soap_del() deep deletes _tds__UpgradeSystemFirmware data members, use only after _tds__UpgradeSystemFirmware::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__UpgradeSystemFirmware::soap_type() returns SOAP_TYPE__tds__UpgradeSystemFirmware or derived type identifier
class _tds__UpgradeSystemFirmware
{ public:
/// Element "Firmware" of type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Firmware                       1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmwareResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmwareResponse is a complexType.
///
/// @note class _tds__UpgradeSystemFirmwareResponse operations:
/// - _tds__UpgradeSystemFirmwareResponse* soap_new__tds__UpgradeSystemFirmwareResponse(soap*) allocate and default initialize
/// - _tds__UpgradeSystemFirmwareResponse* soap_new__tds__UpgradeSystemFirmwareResponse(soap*, int num) allocate and default initialize an array
/// - _tds__UpgradeSystemFirmwareResponse* soap_new_req__tds__UpgradeSystemFirmwareResponse(soap*, ...) allocate, set required members
/// - _tds__UpgradeSystemFirmwareResponse* soap_new_set__tds__UpgradeSystemFirmwareResponse(soap*, ...) allocate, set all public members
/// - _tds__UpgradeSystemFirmwareResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__UpgradeSystemFirmwareResponse(soap*, _tds__UpgradeSystemFirmwareResponse*) deserialize from a stream
/// - int soap_write__tds__UpgradeSystemFirmwareResponse(soap*, _tds__UpgradeSystemFirmwareResponse*) serialize to a stream
/// - _tds__UpgradeSystemFirmwareResponse* _tds__UpgradeSystemFirmwareResponse::soap_dup(soap*) returns deep copy of _tds__UpgradeSystemFirmwareResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__UpgradeSystemFirmwareResponse::soap_del() deep deletes _tds__UpgradeSystemFirmwareResponse data members, use only after _tds__UpgradeSystemFirmwareResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__UpgradeSystemFirmwareResponse::soap_type() returns SOAP_TYPE__tds__UpgradeSystemFirmwareResponse or derived type identifier
class _tds__UpgradeSystemFirmwareResponse
{ public:
/// Element "Message" of type xs:string.
    std::string*                         Message                        0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SystemReboot
/// @brief "http://www.onvif.org/ver10/device/wsdl":SystemReboot is a complexType.
///
/// @note class _tds__SystemReboot operations:
/// - _tds__SystemReboot* soap_new__tds__SystemReboot(soap*) allocate and default initialize
/// - _tds__SystemReboot* soap_new__tds__SystemReboot(soap*, int num) allocate and default initialize an array
/// - _tds__SystemReboot* soap_new_req__tds__SystemReboot(soap*, ...) allocate, set required members
/// - _tds__SystemReboot* soap_new_set__tds__SystemReboot(soap*, ...) allocate, set all public members
/// - _tds__SystemReboot::soap_default(soap*) default initialize members
/// - int soap_read__tds__SystemReboot(soap*, _tds__SystemReboot*) deserialize from a stream
/// - int soap_write__tds__SystemReboot(soap*, _tds__SystemReboot*) serialize to a stream
/// - _tds__SystemReboot* _tds__SystemReboot::soap_dup(soap*) returns deep copy of _tds__SystemReboot, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SystemReboot::soap_del() deep deletes _tds__SystemReboot data members, use only after _tds__SystemReboot::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SystemReboot::soap_type() returns SOAP_TYPE__tds__SystemReboot or derived type identifier
class _tds__SystemReboot
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SystemRebootResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SystemRebootResponse is a complexType.
///
/// @note class _tds__SystemRebootResponse operations:
/// - _tds__SystemRebootResponse* soap_new__tds__SystemRebootResponse(soap*) allocate and default initialize
/// - _tds__SystemRebootResponse* soap_new__tds__SystemRebootResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SystemRebootResponse* soap_new_req__tds__SystemRebootResponse(soap*, ...) allocate, set required members
/// - _tds__SystemRebootResponse* soap_new_set__tds__SystemRebootResponse(soap*, ...) allocate, set all public members
/// - _tds__SystemRebootResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SystemRebootResponse(soap*, _tds__SystemRebootResponse*) deserialize from a stream
/// - int soap_write__tds__SystemRebootResponse(soap*, _tds__SystemRebootResponse*) serialize to a stream
/// - _tds__SystemRebootResponse* _tds__SystemRebootResponse::soap_dup(soap*) returns deep copy of _tds__SystemRebootResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SystemRebootResponse::soap_del() deep deletes _tds__SystemRebootResponse data members, use only after _tds__SystemRebootResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SystemRebootResponse::soap_type() returns SOAP_TYPE__tds__SystemRebootResponse or derived type identifier
class _tds__SystemRebootResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the reboot message sent by the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Message" of type xs:string.
    std::string                          Message                        1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RestoreSystem
/// @brief "http://www.onvif.org/ver10/device/wsdl":RestoreSystem is a complexType.
///
/// @note class _tds__RestoreSystem operations:
/// - _tds__RestoreSystem* soap_new__tds__RestoreSystem(soap*) allocate and default initialize
/// - _tds__RestoreSystem* soap_new__tds__RestoreSystem(soap*, int num) allocate and default initialize an array
/// - _tds__RestoreSystem* soap_new_req__tds__RestoreSystem(soap*, ...) allocate, set required members
/// - _tds__RestoreSystem* soap_new_set__tds__RestoreSystem(soap*, ...) allocate, set all public members
/// - _tds__RestoreSystem::soap_default(soap*) default initialize members
/// - int soap_read__tds__RestoreSystem(soap*, _tds__RestoreSystem*) deserialize from a stream
/// - int soap_write__tds__RestoreSystem(soap*, _tds__RestoreSystem*) serialize to a stream
/// - _tds__RestoreSystem* _tds__RestoreSystem::soap_dup(soap*) returns deep copy of _tds__RestoreSystem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__RestoreSystem::soap_del() deep deletes _tds__RestoreSystem data members, use only after _tds__RestoreSystem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__RestoreSystem::soap_type() returns SOAP_TYPE__tds__RestoreSystem or derived type identifier
class _tds__RestoreSystem
{ public:
/// Vector of tt__BackupFile* of length 1..unbounded.
    std::vector<tt__BackupFile*        > BackupFiles                    1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RestoreSystemResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":RestoreSystemResponse is a complexType.
///
/// @note class _tds__RestoreSystemResponse operations:
/// - _tds__RestoreSystemResponse* soap_new__tds__RestoreSystemResponse(soap*) allocate and default initialize
/// - _tds__RestoreSystemResponse* soap_new__tds__RestoreSystemResponse(soap*, int num) allocate and default initialize an array
/// - _tds__RestoreSystemResponse* soap_new_req__tds__RestoreSystemResponse(soap*, ...) allocate, set required members
/// - _tds__RestoreSystemResponse* soap_new_set__tds__RestoreSystemResponse(soap*, ...) allocate, set all public members
/// - _tds__RestoreSystemResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__RestoreSystemResponse(soap*, _tds__RestoreSystemResponse*) deserialize from a stream
/// - int soap_write__tds__RestoreSystemResponse(soap*, _tds__RestoreSystemResponse*) serialize to a stream
/// - _tds__RestoreSystemResponse* _tds__RestoreSystemResponse::soap_dup(soap*) returns deep copy of _tds__RestoreSystemResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__RestoreSystemResponse::soap_del() deep deletes _tds__RestoreSystemResponse data members, use only after _tds__RestoreSystemResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__RestoreSystemResponse::soap_type() returns SOAP_TYPE__tds__RestoreSystemResponse or derived type identifier
class _tds__RestoreSystemResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemBackup
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemBackup is a complexType.
///
/// @note class _tds__GetSystemBackup operations:
/// - _tds__GetSystemBackup* soap_new__tds__GetSystemBackup(soap*) allocate and default initialize
/// - _tds__GetSystemBackup* soap_new__tds__GetSystemBackup(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemBackup* soap_new_req__tds__GetSystemBackup(soap*, ...) allocate, set required members
/// - _tds__GetSystemBackup* soap_new_set__tds__GetSystemBackup(soap*, ...) allocate, set all public members
/// - _tds__GetSystemBackup::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemBackup(soap*, _tds__GetSystemBackup*) deserialize from a stream
/// - int soap_write__tds__GetSystemBackup(soap*, _tds__GetSystemBackup*) serialize to a stream
/// - _tds__GetSystemBackup* _tds__GetSystemBackup::soap_dup(soap*) returns deep copy of _tds__GetSystemBackup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemBackup::soap_del() deep deletes _tds__GetSystemBackup data members, use only after _tds__GetSystemBackup::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemBackup::soap_type() returns SOAP_TYPE__tds__GetSystemBackup or derived type identifier
class _tds__GetSystemBackup
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemBackupResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemBackupResponse is a complexType.
///
/// @note class _tds__GetSystemBackupResponse operations:
/// - _tds__GetSystemBackupResponse* soap_new__tds__GetSystemBackupResponse(soap*) allocate and default initialize
/// - _tds__GetSystemBackupResponse* soap_new__tds__GetSystemBackupResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemBackupResponse* soap_new_req__tds__GetSystemBackupResponse(soap*, ...) allocate, set required members
/// - _tds__GetSystemBackupResponse* soap_new_set__tds__GetSystemBackupResponse(soap*, ...) allocate, set all public members
/// - _tds__GetSystemBackupResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemBackupResponse(soap*, _tds__GetSystemBackupResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemBackupResponse(soap*, _tds__GetSystemBackupResponse*) serialize to a stream
/// - _tds__GetSystemBackupResponse* _tds__GetSystemBackupResponse::soap_dup(soap*) returns deep copy of _tds__GetSystemBackupResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemBackupResponse::soap_del() deep deletes _tds__GetSystemBackupResponse data members, use only after _tds__GetSystemBackupResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemBackupResponse::soap_type() returns SOAP_TYPE__tds__GetSystemBackupResponse or derived type identifier
class _tds__GetSystemBackupResponse
{ public:
/// Vector of tt__BackupFile* of length 1..unbounded.
    std::vector<tt__BackupFile*        > BackupFiles                    1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformation is a complexType.
///
/// @note class _tds__GetSystemSupportInformation operations:
/// - _tds__GetSystemSupportInformation* soap_new__tds__GetSystemSupportInformation(soap*) allocate and default initialize
/// - _tds__GetSystemSupportInformation* soap_new__tds__GetSystemSupportInformation(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemSupportInformation* soap_new_req__tds__GetSystemSupportInformation(soap*, ...) allocate, set required members
/// - _tds__GetSystemSupportInformation* soap_new_set__tds__GetSystemSupportInformation(soap*, ...) allocate, set all public members
/// - _tds__GetSystemSupportInformation::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemSupportInformation(soap*, _tds__GetSystemSupportInformation*) deserialize from a stream
/// - int soap_write__tds__GetSystemSupportInformation(soap*, _tds__GetSystemSupportInformation*) serialize to a stream
/// - _tds__GetSystemSupportInformation* _tds__GetSystemSupportInformation::soap_dup(soap*) returns deep copy of _tds__GetSystemSupportInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemSupportInformation::soap_del() deep deletes _tds__GetSystemSupportInformation data members, use only after _tds__GetSystemSupportInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemSupportInformation::soap_type() returns SOAP_TYPE__tds__GetSystemSupportInformation or derived type identifier
class _tds__GetSystemSupportInformation
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformationResponse is a complexType.
///
/// @note class _tds__GetSystemSupportInformationResponse operations:
/// - _tds__GetSystemSupportInformationResponse* soap_new__tds__GetSystemSupportInformationResponse(soap*) allocate and default initialize
/// - _tds__GetSystemSupportInformationResponse* soap_new__tds__GetSystemSupportInformationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemSupportInformationResponse* soap_new_req__tds__GetSystemSupportInformationResponse(soap*, ...) allocate, set required members
/// - _tds__GetSystemSupportInformationResponse* soap_new_set__tds__GetSystemSupportInformationResponse(soap*, ...) allocate, set all public members
/// - _tds__GetSystemSupportInformationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemSupportInformationResponse(soap*, _tds__GetSystemSupportInformationResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemSupportInformationResponse(soap*, _tds__GetSystemSupportInformationResponse*) serialize to a stream
/// - _tds__GetSystemSupportInformationResponse* _tds__GetSystemSupportInformationResponse::soap_dup(soap*) returns deep copy of _tds__GetSystemSupportInformationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemSupportInformationResponse::soap_del() deep deletes _tds__GetSystemSupportInformationResponse data members, use only after _tds__GetSystemSupportInformationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemSupportInformationResponse::soap_type() returns SOAP_TYPE__tds__GetSystemSupportInformationResponse or derived type identifier
class _tds__GetSystemSupportInformationResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the arbitary device diagnostics information.
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportInformation" of type "http://www.onvif.org/ver10/schema":SupportInformation.
    tt__SupportInformation*              SupportInformation             1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemLog
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemLog is a complexType.
///
/// @note class _tds__GetSystemLog operations:
/// - _tds__GetSystemLog* soap_new__tds__GetSystemLog(soap*) allocate and default initialize
/// - _tds__GetSystemLog* soap_new__tds__GetSystemLog(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemLog* soap_new_req__tds__GetSystemLog(soap*, ...) allocate, set required members
/// - _tds__GetSystemLog* soap_new_set__tds__GetSystemLog(soap*, ...) allocate, set all public members
/// - _tds__GetSystemLog::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemLog(soap*, _tds__GetSystemLog*) deserialize from a stream
/// - int soap_write__tds__GetSystemLog(soap*, _tds__GetSystemLog*) serialize to a stream
/// - _tds__GetSystemLog* _tds__GetSystemLog::soap_dup(soap*) returns deep copy of _tds__GetSystemLog, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemLog::soap_del() deep deletes _tds__GetSystemLog data members, use only after _tds__GetSystemLog::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemLog::soap_type() returns SOAP_TYPE__tds__GetSystemLog or derived type identifier
class _tds__GetSystemLog
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the type of system log to get.
/// </BLOCKQUOTE></PRE>
///
/// Element "LogType" of type "http://www.onvif.org/ver10/schema":SystemLogType.
    tt__SystemLogType                    LogType                        1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemLogResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemLogResponse is a complexType.
///
/// @note class _tds__GetSystemLogResponse operations:
/// - _tds__GetSystemLogResponse* soap_new__tds__GetSystemLogResponse(soap*) allocate and default initialize
/// - _tds__GetSystemLogResponse* soap_new__tds__GetSystemLogResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemLogResponse* soap_new_req__tds__GetSystemLogResponse(soap*, ...) allocate, set required members
/// - _tds__GetSystemLogResponse* soap_new_set__tds__GetSystemLogResponse(soap*, ...) allocate, set all public members
/// - _tds__GetSystemLogResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemLogResponse(soap*, _tds__GetSystemLogResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemLogResponse(soap*, _tds__GetSystemLogResponse*) serialize to a stream
/// - _tds__GetSystemLogResponse* _tds__GetSystemLogResponse::soap_dup(soap*) returns deep copy of _tds__GetSystemLogResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemLogResponse::soap_del() deep deletes _tds__GetSystemLogResponse data members, use only after _tds__GetSystemLogResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemLogResponse::soap_type() returns SOAP_TYPE__tds__GetSystemLogResponse or derived type identifier
class _tds__GetSystemLogResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the system log information.
/// </BLOCKQUOTE></PRE>
///
/// Element "SystemLog" of type "http://www.onvif.org/ver10/schema":SystemLog.
    tt__SystemLog*                       SystemLog                      1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetScopes is a complexType.
///
/// @note class _tds__GetScopes operations:
/// - _tds__GetScopes* soap_new__tds__GetScopes(soap*) allocate and default initialize
/// - _tds__GetScopes* soap_new__tds__GetScopes(soap*, int num) allocate and default initialize an array
/// - _tds__GetScopes* soap_new_req__tds__GetScopes(soap*, ...) allocate, set required members
/// - _tds__GetScopes* soap_new_set__tds__GetScopes(soap*, ...) allocate, set all public members
/// - _tds__GetScopes::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetScopes(soap*, _tds__GetScopes*) deserialize from a stream
/// - int soap_write__tds__GetScopes(soap*, _tds__GetScopes*) serialize to a stream
/// - _tds__GetScopes* _tds__GetScopes::soap_dup(soap*) returns deep copy of _tds__GetScopes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetScopes::soap_del() deep deletes _tds__GetScopes data members, use only after _tds__GetScopes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetScopes::soap_type() returns SOAP_TYPE__tds__GetScopes or derived type identifier
class _tds__GetScopes
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetScopesResponse is a complexType.
///
/// @note class _tds__GetScopesResponse operations:
/// - _tds__GetScopesResponse* soap_new__tds__GetScopesResponse(soap*) allocate and default initialize
/// - _tds__GetScopesResponse* soap_new__tds__GetScopesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetScopesResponse* soap_new_req__tds__GetScopesResponse(soap*, ...) allocate, set required members
/// - _tds__GetScopesResponse* soap_new_set__tds__GetScopesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetScopesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetScopesResponse(soap*, _tds__GetScopesResponse*) deserialize from a stream
/// - int soap_write__tds__GetScopesResponse(soap*, _tds__GetScopesResponse*) serialize to a stream
/// - _tds__GetScopesResponse* _tds__GetScopesResponse::soap_dup(soap*) returns deep copy of _tds__GetScopesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetScopesResponse::soap_del() deep deletes _tds__GetScopesResponse data members, use only after _tds__GetScopesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetScopesResponse::soap_type() returns SOAP_TYPE__tds__GetScopesResponse or derived type identifier
class _tds__GetScopesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of URI definining the device scopes. Scope parameters can be of two types: fixed and configurable. Fixed parameters can not be altered.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Scope* of length 1..unbounded.
    std::vector<tt__Scope*             > Scopes                         1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetScopes is a complexType.
///
/// @note class _tds__SetScopes operations:
/// - _tds__SetScopes* soap_new__tds__SetScopes(soap*) allocate and default initialize
/// - _tds__SetScopes* soap_new__tds__SetScopes(soap*, int num) allocate and default initialize an array
/// - _tds__SetScopes* soap_new_req__tds__SetScopes(soap*, ...) allocate, set required members
/// - _tds__SetScopes* soap_new_set__tds__SetScopes(soap*, ...) allocate, set all public members
/// - _tds__SetScopes::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetScopes(soap*, _tds__SetScopes*) deserialize from a stream
/// - int soap_write__tds__SetScopes(soap*, _tds__SetScopes*) serialize to a stream
/// - _tds__SetScopes* _tds__SetScopes::soap_dup(soap*) returns deep copy of _tds__SetScopes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetScopes::soap_del() deep deletes _tds__SetScopes data members, use only after _tds__SetScopes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetScopes::soap_type() returns SOAP_TYPE__tds__SetScopes or derived type identifier
class _tds__SetScopes
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of scope parameters that will replace all existing configurable scope parameters.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > Scopes                         1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetScopesResponse is a complexType.
///
/// @note class _tds__SetScopesResponse operations:
/// - _tds__SetScopesResponse* soap_new__tds__SetScopesResponse(soap*) allocate and default initialize
/// - _tds__SetScopesResponse* soap_new__tds__SetScopesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetScopesResponse* soap_new_req__tds__SetScopesResponse(soap*, ...) allocate, set required members
/// - _tds__SetScopesResponse* soap_new_set__tds__SetScopesResponse(soap*, ...) allocate, set all public members
/// - _tds__SetScopesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetScopesResponse(soap*, _tds__SetScopesResponse*) deserialize from a stream
/// - int soap_write__tds__SetScopesResponse(soap*, _tds__SetScopesResponse*) serialize to a stream
/// - _tds__SetScopesResponse* _tds__SetScopesResponse::soap_dup(soap*) returns deep copy of _tds__SetScopesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetScopesResponse::soap_del() deep deletes _tds__SetScopesResponse data members, use only after _tds__SetScopesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetScopesResponse::soap_type() returns SOAP_TYPE__tds__SetScopesResponse or derived type identifier
class _tds__SetScopesResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddScopes is a complexType.
///
/// @note class _tds__AddScopes operations:
/// - _tds__AddScopes* soap_new__tds__AddScopes(soap*) allocate and default initialize
/// - _tds__AddScopes* soap_new__tds__AddScopes(soap*, int num) allocate and default initialize an array
/// - _tds__AddScopes* soap_new_req__tds__AddScopes(soap*, ...) allocate, set required members
/// - _tds__AddScopes* soap_new_set__tds__AddScopes(soap*, ...) allocate, set all public members
/// - _tds__AddScopes::soap_default(soap*) default initialize members
/// - int soap_read__tds__AddScopes(soap*, _tds__AddScopes*) deserialize from a stream
/// - int soap_write__tds__AddScopes(soap*, _tds__AddScopes*) serialize to a stream
/// - _tds__AddScopes* _tds__AddScopes::soap_dup(soap*) returns deep copy of _tds__AddScopes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__AddScopes::soap_del() deep deletes _tds__AddScopes data members, use only after _tds__AddScopes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__AddScopes::soap_type() returns SOAP_TYPE__tds__AddScopes or derived type identifier
class _tds__AddScopes
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > ScopeItem                      1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddScopesResponse is a complexType.
///
/// @note class _tds__AddScopesResponse operations:
/// - _tds__AddScopesResponse* soap_new__tds__AddScopesResponse(soap*) allocate and default initialize
/// - _tds__AddScopesResponse* soap_new__tds__AddScopesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__AddScopesResponse* soap_new_req__tds__AddScopesResponse(soap*, ...) allocate, set required members
/// - _tds__AddScopesResponse* soap_new_set__tds__AddScopesResponse(soap*, ...) allocate, set all public members
/// - _tds__AddScopesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__AddScopesResponse(soap*, _tds__AddScopesResponse*) deserialize from a stream
/// - int soap_write__tds__AddScopesResponse(soap*, _tds__AddScopesResponse*) serialize to a stream
/// - _tds__AddScopesResponse* _tds__AddScopesResponse::soap_dup(soap*) returns deep copy of _tds__AddScopesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__AddScopesResponse::soap_del() deep deletes _tds__AddScopesResponse data members, use only after _tds__AddScopesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__AddScopesResponse::soap_type() returns SOAP_TYPE__tds__AddScopesResponse or derived type identifier
class _tds__AddScopesResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveScopes is a complexType.
///
/// @note class _tds__RemoveScopes operations:
/// - _tds__RemoveScopes* soap_new__tds__RemoveScopes(soap*) allocate and default initialize
/// - _tds__RemoveScopes* soap_new__tds__RemoveScopes(soap*, int num) allocate and default initialize an array
/// - _tds__RemoveScopes* soap_new_req__tds__RemoveScopes(soap*, ...) allocate, set required members
/// - _tds__RemoveScopes* soap_new_set__tds__RemoveScopes(soap*, ...) allocate, set all public members
/// - _tds__RemoveScopes::soap_default(soap*) default initialize members
/// - int soap_read__tds__RemoveScopes(soap*, _tds__RemoveScopes*) deserialize from a stream
/// - int soap_write__tds__RemoveScopes(soap*, _tds__RemoveScopes*) serialize to a stream
/// - _tds__RemoveScopes* _tds__RemoveScopes::soap_dup(soap*) returns deep copy of _tds__RemoveScopes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__RemoveScopes::soap_del() deep deletes _tds__RemoveScopes data members, use only after _tds__RemoveScopes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__RemoveScopes::soap_type() returns SOAP_TYPE__tds__RemoveScopes or derived type identifier
class _tds__RemoveScopes
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of URIs that should be removed from the device scope.<br/>
///   Note that the response message always will match the request or an error will be returned. The use of the response is for that reason deprecated.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > ScopeItem                      1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveScopesResponse is a complexType.
///
/// @note class _tds__RemoveScopesResponse operations:
/// - _tds__RemoveScopesResponse* soap_new__tds__RemoveScopesResponse(soap*) allocate and default initialize
/// - _tds__RemoveScopesResponse* soap_new__tds__RemoveScopesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__RemoveScopesResponse* soap_new_req__tds__RemoveScopesResponse(soap*, ...) allocate, set required members
/// - _tds__RemoveScopesResponse* soap_new_set__tds__RemoveScopesResponse(soap*, ...) allocate, set all public members
/// - _tds__RemoveScopesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__RemoveScopesResponse(soap*, _tds__RemoveScopesResponse*) deserialize from a stream
/// - int soap_write__tds__RemoveScopesResponse(soap*, _tds__RemoveScopesResponse*) serialize to a stream
/// - _tds__RemoveScopesResponse* _tds__RemoveScopesResponse::soap_dup(soap*) returns deep copy of _tds__RemoveScopesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__RemoveScopesResponse::soap_del() deep deletes _tds__RemoveScopesResponse data members, use only after _tds__RemoveScopesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__RemoveScopesResponse::soap_type() returns SOAP_TYPE__tds__RemoveScopesResponse or derived type identifier
class _tds__RemoveScopesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of URIs that has been removed from the device scope
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > ScopeItem                      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryMode is a complexType.
///
/// @note class _tds__GetDiscoveryMode operations:
/// - _tds__GetDiscoveryMode* soap_new__tds__GetDiscoveryMode(soap*) allocate and default initialize
/// - _tds__GetDiscoveryMode* soap_new__tds__GetDiscoveryMode(soap*, int num) allocate and default initialize an array
/// - _tds__GetDiscoveryMode* soap_new_req__tds__GetDiscoveryMode(soap*, ...) allocate, set required members
/// - _tds__GetDiscoveryMode* soap_new_set__tds__GetDiscoveryMode(soap*, ...) allocate, set all public members
/// - _tds__GetDiscoveryMode::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDiscoveryMode(soap*, _tds__GetDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__GetDiscoveryMode(soap*, _tds__GetDiscoveryMode*) serialize to a stream
/// - _tds__GetDiscoveryMode* _tds__GetDiscoveryMode::soap_dup(soap*) returns deep copy of _tds__GetDiscoveryMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDiscoveryMode::soap_del() deep deletes _tds__GetDiscoveryMode data members, use only after _tds__GetDiscoveryMode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDiscoveryMode::soap_type() returns SOAP_TYPE__tds__GetDiscoveryMode or derived type identifier
class _tds__GetDiscoveryMode
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryModeResponse is a complexType.
///
/// @note class _tds__GetDiscoveryModeResponse operations:
/// - _tds__GetDiscoveryModeResponse* soap_new__tds__GetDiscoveryModeResponse(soap*) allocate and default initialize
/// - _tds__GetDiscoveryModeResponse* soap_new__tds__GetDiscoveryModeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDiscoveryModeResponse* soap_new_req__tds__GetDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - _tds__GetDiscoveryModeResponse* soap_new_set__tds__GetDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDiscoveryModeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDiscoveryModeResponse(soap*, _tds__GetDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__GetDiscoveryModeResponse(soap*, _tds__GetDiscoveryModeResponse*) serialize to a stream
/// - _tds__GetDiscoveryModeResponse* _tds__GetDiscoveryModeResponse::soap_dup(soap*) returns deep copy of _tds__GetDiscoveryModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDiscoveryModeResponse::soap_del() deep deletes _tds__GetDiscoveryModeResponse data members, use only after _tds__GetDiscoveryModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDiscoveryModeResponse::soap_type() returns SOAP_TYPE__tds__GetDiscoveryModeResponse or derived type identifier
class _tds__GetDiscoveryModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
///
/// Element "DiscoveryMode" of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    tt__DiscoveryMode                    DiscoveryMode                  1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryMode is a complexType.
///
/// @note class _tds__SetDiscoveryMode operations:
/// - _tds__SetDiscoveryMode* soap_new__tds__SetDiscoveryMode(soap*) allocate and default initialize
/// - _tds__SetDiscoveryMode* soap_new__tds__SetDiscoveryMode(soap*, int num) allocate and default initialize an array
/// - _tds__SetDiscoveryMode* soap_new_req__tds__SetDiscoveryMode(soap*, ...) allocate, set required members
/// - _tds__SetDiscoveryMode* soap_new_set__tds__SetDiscoveryMode(soap*, ...) allocate, set all public members
/// - _tds__SetDiscoveryMode::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDiscoveryMode(soap*, _tds__SetDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__SetDiscoveryMode(soap*, _tds__SetDiscoveryMode*) serialize to a stream
/// - _tds__SetDiscoveryMode* _tds__SetDiscoveryMode::soap_dup(soap*) returns deep copy of _tds__SetDiscoveryMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDiscoveryMode::soap_del() deep deletes _tds__SetDiscoveryMode data members, use only after _tds__SetDiscoveryMode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDiscoveryMode::soap_type() returns SOAP_TYPE__tds__SetDiscoveryMode or derived type identifier
class _tds__SetDiscoveryMode
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
///
/// Element "DiscoveryMode" of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    tt__DiscoveryMode                    DiscoveryMode                  1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryModeResponse is a complexType.
///
/// @note class _tds__SetDiscoveryModeResponse operations:
/// - _tds__SetDiscoveryModeResponse* soap_new__tds__SetDiscoveryModeResponse(soap*) allocate and default initialize
/// - _tds__SetDiscoveryModeResponse* soap_new__tds__SetDiscoveryModeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetDiscoveryModeResponse* soap_new_req__tds__SetDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - _tds__SetDiscoveryModeResponse* soap_new_set__tds__SetDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - _tds__SetDiscoveryModeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDiscoveryModeResponse(soap*, _tds__SetDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__SetDiscoveryModeResponse(soap*, _tds__SetDiscoveryModeResponse*) serialize to a stream
/// - _tds__SetDiscoveryModeResponse* _tds__SetDiscoveryModeResponse::soap_dup(soap*) returns deep copy of _tds__SetDiscoveryModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDiscoveryModeResponse::soap_del() deep deletes _tds__SetDiscoveryModeResponse data members, use only after _tds__SetDiscoveryModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDiscoveryModeResponse::soap_type() returns SOAP_TYPE__tds__SetDiscoveryModeResponse or derived type identifier
class _tds__SetDiscoveryModeResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryMode is a complexType.
///
/// @note class _tds__GetRemoteDiscoveryMode operations:
/// - _tds__GetRemoteDiscoveryMode* soap_new__tds__GetRemoteDiscoveryMode(soap*) allocate and default initialize
/// - _tds__GetRemoteDiscoveryMode* soap_new__tds__GetRemoteDiscoveryMode(soap*, int num) allocate and default initialize an array
/// - _tds__GetRemoteDiscoveryMode* soap_new_req__tds__GetRemoteDiscoveryMode(soap*, ...) allocate, set required members
/// - _tds__GetRemoteDiscoveryMode* soap_new_set__tds__GetRemoteDiscoveryMode(soap*, ...) allocate, set all public members
/// - _tds__GetRemoteDiscoveryMode::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetRemoteDiscoveryMode(soap*, _tds__GetRemoteDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__GetRemoteDiscoveryMode(soap*, _tds__GetRemoteDiscoveryMode*) serialize to a stream
/// - _tds__GetRemoteDiscoveryMode* _tds__GetRemoteDiscoveryMode::soap_dup(soap*) returns deep copy of _tds__GetRemoteDiscoveryMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetRemoteDiscoveryMode::soap_del() deep deletes _tds__GetRemoteDiscoveryMode data members, use only after _tds__GetRemoteDiscoveryMode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetRemoteDiscoveryMode::soap_type() returns SOAP_TYPE__tds__GetRemoteDiscoveryMode or derived type identifier
class _tds__GetRemoteDiscoveryMode
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryModeResponse is a complexType.
///
/// @note class _tds__GetRemoteDiscoveryModeResponse operations:
/// - _tds__GetRemoteDiscoveryModeResponse* soap_new__tds__GetRemoteDiscoveryModeResponse(soap*) allocate and default initialize
/// - _tds__GetRemoteDiscoveryModeResponse* soap_new__tds__GetRemoteDiscoveryModeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetRemoteDiscoveryModeResponse* soap_new_req__tds__GetRemoteDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - _tds__GetRemoteDiscoveryModeResponse* soap_new_set__tds__GetRemoteDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - _tds__GetRemoteDiscoveryModeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetRemoteDiscoveryModeResponse(soap*, _tds__GetRemoteDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__GetRemoteDiscoveryModeResponse(soap*, _tds__GetRemoteDiscoveryModeResponse*) serialize to a stream
/// - _tds__GetRemoteDiscoveryModeResponse* _tds__GetRemoteDiscoveryModeResponse::soap_dup(soap*) returns deep copy of _tds__GetRemoteDiscoveryModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetRemoteDiscoveryModeResponse::soap_del() deep deletes _tds__GetRemoteDiscoveryModeResponse data members, use only after _tds__GetRemoteDiscoveryModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetRemoteDiscoveryModeResponse::soap_type() returns SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse or derived type identifier
class _tds__GetRemoteDiscoveryModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
///
/// Element "RemoteDiscoveryMode" of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    tt__DiscoveryMode                    RemoteDiscoveryMode            1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryMode is a complexType.
///
/// @note class _tds__SetRemoteDiscoveryMode operations:
/// - _tds__SetRemoteDiscoveryMode* soap_new__tds__SetRemoteDiscoveryMode(soap*) allocate and default initialize
/// - _tds__SetRemoteDiscoveryMode* soap_new__tds__SetRemoteDiscoveryMode(soap*, int num) allocate and default initialize an array
/// - _tds__SetRemoteDiscoveryMode* soap_new_req__tds__SetRemoteDiscoveryMode(soap*, ...) allocate, set required members
/// - _tds__SetRemoteDiscoveryMode* soap_new_set__tds__SetRemoteDiscoveryMode(soap*, ...) allocate, set all public members
/// - _tds__SetRemoteDiscoveryMode::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRemoteDiscoveryMode(soap*, _tds__SetRemoteDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__SetRemoteDiscoveryMode(soap*, _tds__SetRemoteDiscoveryMode*) serialize to a stream
/// - _tds__SetRemoteDiscoveryMode* _tds__SetRemoteDiscoveryMode::soap_dup(soap*) returns deep copy of _tds__SetRemoteDiscoveryMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRemoteDiscoveryMode::soap_del() deep deletes _tds__SetRemoteDiscoveryMode data members, use only after _tds__SetRemoteDiscoveryMode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRemoteDiscoveryMode::soap_type() returns SOAP_TYPE__tds__SetRemoteDiscoveryMode or derived type identifier
class _tds__SetRemoteDiscoveryMode
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
///
/// Element "RemoteDiscoveryMode" of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    tt__DiscoveryMode                    RemoteDiscoveryMode            1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryModeResponse is a complexType.
///
/// @note class _tds__SetRemoteDiscoveryModeResponse operations:
/// - _tds__SetRemoteDiscoveryModeResponse* soap_new__tds__SetRemoteDiscoveryModeResponse(soap*) allocate and default initialize
/// - _tds__SetRemoteDiscoveryModeResponse* soap_new__tds__SetRemoteDiscoveryModeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetRemoteDiscoveryModeResponse* soap_new_req__tds__SetRemoteDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - _tds__SetRemoteDiscoveryModeResponse* soap_new_set__tds__SetRemoteDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - _tds__SetRemoteDiscoveryModeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRemoteDiscoveryModeResponse(soap*, _tds__SetRemoteDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__SetRemoteDiscoveryModeResponse(soap*, _tds__SetRemoteDiscoveryModeResponse*) serialize to a stream
/// - _tds__SetRemoteDiscoveryModeResponse* _tds__SetRemoteDiscoveryModeResponse::soap_dup(soap*) returns deep copy of _tds__SetRemoteDiscoveryModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRemoteDiscoveryModeResponse::soap_del() deep deletes _tds__SetRemoteDiscoveryModeResponse data members, use only after _tds__SetRemoteDiscoveryModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRemoteDiscoveryModeResponse::soap_type() returns SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse or derived type identifier
class _tds__SetRemoteDiscoveryModeResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDPAddresses
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDPAddresses is a complexType.
///
/// @note class _tds__GetDPAddresses operations:
/// - _tds__GetDPAddresses* soap_new__tds__GetDPAddresses(soap*) allocate and default initialize
/// - _tds__GetDPAddresses* soap_new__tds__GetDPAddresses(soap*, int num) allocate and default initialize an array
/// - _tds__GetDPAddresses* soap_new_req__tds__GetDPAddresses(soap*, ...) allocate, set required members
/// - _tds__GetDPAddresses* soap_new_set__tds__GetDPAddresses(soap*, ...) allocate, set all public members
/// - _tds__GetDPAddresses::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDPAddresses(soap*, _tds__GetDPAddresses*) deserialize from a stream
/// - int soap_write__tds__GetDPAddresses(soap*, _tds__GetDPAddresses*) serialize to a stream
/// - _tds__GetDPAddresses* _tds__GetDPAddresses::soap_dup(soap*) returns deep copy of _tds__GetDPAddresses, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDPAddresses::soap_del() deep deletes _tds__GetDPAddresses data members, use only after _tds__GetDPAddresses::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDPAddresses::soap_type() returns SOAP_TYPE__tds__GetDPAddresses or derived type identifier
class _tds__GetDPAddresses
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDPAddressesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDPAddressesResponse is a complexType.
///
/// @note class _tds__GetDPAddressesResponse operations:
/// - _tds__GetDPAddressesResponse* soap_new__tds__GetDPAddressesResponse(soap*) allocate and default initialize
/// - _tds__GetDPAddressesResponse* soap_new__tds__GetDPAddressesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDPAddressesResponse* soap_new_req__tds__GetDPAddressesResponse(soap*, ...) allocate, set required members
/// - _tds__GetDPAddressesResponse* soap_new_set__tds__GetDPAddressesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDPAddressesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDPAddressesResponse(soap*, _tds__GetDPAddressesResponse*) deserialize from a stream
/// - int soap_write__tds__GetDPAddressesResponse(soap*, _tds__GetDPAddressesResponse*) serialize to a stream
/// - _tds__GetDPAddressesResponse* _tds__GetDPAddressesResponse::soap_dup(soap*) returns deep copy of _tds__GetDPAddressesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDPAddressesResponse::soap_del() deep deletes _tds__GetDPAddressesResponse data members, use only after _tds__GetDPAddressesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDPAddressesResponse::soap_type() returns SOAP_TYPE__tds__GetDPAddressesResponse or derived type identifier
class _tds__GetDPAddressesResponse
{ public:
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > DPAddress                      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDPAddresses
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDPAddresses is a complexType.
///
/// @note class _tds__SetDPAddresses operations:
/// - _tds__SetDPAddresses* soap_new__tds__SetDPAddresses(soap*) allocate and default initialize
/// - _tds__SetDPAddresses* soap_new__tds__SetDPAddresses(soap*, int num) allocate and default initialize an array
/// - _tds__SetDPAddresses* soap_new_req__tds__SetDPAddresses(soap*, ...) allocate, set required members
/// - _tds__SetDPAddresses* soap_new_set__tds__SetDPAddresses(soap*, ...) allocate, set all public members
/// - _tds__SetDPAddresses::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDPAddresses(soap*, _tds__SetDPAddresses*) deserialize from a stream
/// - int soap_write__tds__SetDPAddresses(soap*, _tds__SetDPAddresses*) serialize to a stream
/// - _tds__SetDPAddresses* _tds__SetDPAddresses::soap_dup(soap*) returns deep copy of _tds__SetDPAddresses, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDPAddresses::soap_del() deep deletes _tds__SetDPAddresses data members, use only after _tds__SetDPAddresses::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDPAddresses::soap_type() returns SOAP_TYPE__tds__SetDPAddresses or derived type identifier
class _tds__SetDPAddresses
{ public:
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > DPAddress                      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDPAddressesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDPAddressesResponse is a complexType.
///
/// @note class _tds__SetDPAddressesResponse operations:
/// - _tds__SetDPAddressesResponse* soap_new__tds__SetDPAddressesResponse(soap*) allocate and default initialize
/// - _tds__SetDPAddressesResponse* soap_new__tds__SetDPAddressesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetDPAddressesResponse* soap_new_req__tds__SetDPAddressesResponse(soap*, ...) allocate, set required members
/// - _tds__SetDPAddressesResponse* soap_new_set__tds__SetDPAddressesResponse(soap*, ...) allocate, set all public members
/// - _tds__SetDPAddressesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDPAddressesResponse(soap*, _tds__SetDPAddressesResponse*) deserialize from a stream
/// - int soap_write__tds__SetDPAddressesResponse(soap*, _tds__SetDPAddressesResponse*) serialize to a stream
/// - _tds__SetDPAddressesResponse* _tds__SetDPAddressesResponse::soap_dup(soap*) returns deep copy of _tds__SetDPAddressesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDPAddressesResponse::soap_del() deep deletes _tds__SetDPAddressesResponse data members, use only after _tds__SetDPAddressesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDPAddressesResponse::soap_type() returns SOAP_TYPE__tds__SetDPAddressesResponse or derived type identifier
class _tds__SetDPAddressesResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetEndpointReference
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetEndpointReference is a complexType.
///
/// @note class _tds__GetEndpointReference operations:
/// - _tds__GetEndpointReference* soap_new__tds__GetEndpointReference(soap*) allocate and default initialize
/// - _tds__GetEndpointReference* soap_new__tds__GetEndpointReference(soap*, int num) allocate and default initialize an array
/// - _tds__GetEndpointReference* soap_new_req__tds__GetEndpointReference(soap*, ...) allocate, set required members
/// - _tds__GetEndpointReference* soap_new_set__tds__GetEndpointReference(soap*, ...) allocate, set all public members
/// - _tds__GetEndpointReference::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetEndpointReference(soap*, _tds__GetEndpointReference*) deserialize from a stream
/// - int soap_write__tds__GetEndpointReference(soap*, _tds__GetEndpointReference*) serialize to a stream
/// - _tds__GetEndpointReference* _tds__GetEndpointReference::soap_dup(soap*) returns deep copy of _tds__GetEndpointReference, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetEndpointReference::soap_del() deep deletes _tds__GetEndpointReference data members, use only after _tds__GetEndpointReference::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetEndpointReference::soap_type() returns SOAP_TYPE__tds__GetEndpointReference or derived type identifier
class _tds__GetEndpointReference
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetEndpointReferenceResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetEndpointReferenceResponse is a complexType.
///
/// @note class _tds__GetEndpointReferenceResponse operations:
/// - _tds__GetEndpointReferenceResponse* soap_new__tds__GetEndpointReferenceResponse(soap*) allocate and default initialize
/// - _tds__GetEndpointReferenceResponse* soap_new__tds__GetEndpointReferenceResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetEndpointReferenceResponse* soap_new_req__tds__GetEndpointReferenceResponse(soap*, ...) allocate, set required members
/// - _tds__GetEndpointReferenceResponse* soap_new_set__tds__GetEndpointReferenceResponse(soap*, ...) allocate, set all public members
/// - _tds__GetEndpointReferenceResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetEndpointReferenceResponse(soap*, _tds__GetEndpointReferenceResponse*) deserialize from a stream
/// - int soap_write__tds__GetEndpointReferenceResponse(soap*, _tds__GetEndpointReferenceResponse*) serialize to a stream
/// - _tds__GetEndpointReferenceResponse* _tds__GetEndpointReferenceResponse::soap_dup(soap*) returns deep copy of _tds__GetEndpointReferenceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetEndpointReferenceResponse::soap_del() deep deletes _tds__GetEndpointReferenceResponse data members, use only after _tds__GetEndpointReferenceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetEndpointReferenceResponse::soap_type() returns SOAP_TYPE__tds__GetEndpointReferenceResponse or derived type identifier
class _tds__GetEndpointReferenceResponse
{ public:
/// Element "GUID" of type xs:string.
    std::string                          GUID                           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteUser
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteUser is a complexType.
///
/// @note class _tds__GetRemoteUser operations:
/// - _tds__GetRemoteUser* soap_new__tds__GetRemoteUser(soap*) allocate and default initialize
/// - _tds__GetRemoteUser* soap_new__tds__GetRemoteUser(soap*, int num) allocate and default initialize an array
/// - _tds__GetRemoteUser* soap_new_req__tds__GetRemoteUser(soap*, ...) allocate, set required members
/// - _tds__GetRemoteUser* soap_new_set__tds__GetRemoteUser(soap*, ...) allocate, set all public members
/// - _tds__GetRemoteUser::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetRemoteUser(soap*, _tds__GetRemoteUser*) deserialize from a stream
/// - int soap_write__tds__GetRemoteUser(soap*, _tds__GetRemoteUser*) serialize to a stream
/// - _tds__GetRemoteUser* _tds__GetRemoteUser::soap_dup(soap*) returns deep copy of _tds__GetRemoteUser, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetRemoteUser::soap_del() deep deletes _tds__GetRemoteUser data members, use only after _tds__GetRemoteUser::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetRemoteUser::soap_type() returns SOAP_TYPE__tds__GetRemoteUser or derived type identifier
class _tds__GetRemoteUser
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteUserResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteUserResponse is a complexType.
///
/// @note class _tds__GetRemoteUserResponse operations:
/// - _tds__GetRemoteUserResponse* soap_new__tds__GetRemoteUserResponse(soap*) allocate and default initialize
/// - _tds__GetRemoteUserResponse* soap_new__tds__GetRemoteUserResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetRemoteUserResponse* soap_new_req__tds__GetRemoteUserResponse(soap*, ...) allocate, set required members
/// - _tds__GetRemoteUserResponse* soap_new_set__tds__GetRemoteUserResponse(soap*, ...) allocate, set all public members
/// - _tds__GetRemoteUserResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetRemoteUserResponse(soap*, _tds__GetRemoteUserResponse*) deserialize from a stream
/// - int soap_write__tds__GetRemoteUserResponse(soap*, _tds__GetRemoteUserResponse*) serialize to a stream
/// - _tds__GetRemoteUserResponse* _tds__GetRemoteUserResponse::soap_dup(soap*) returns deep copy of _tds__GetRemoteUserResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetRemoteUserResponse::soap_del() deep deletes _tds__GetRemoteUserResponse data members, use only after _tds__GetRemoteUserResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetRemoteUserResponse::soap_type() returns SOAP_TYPE__tds__GetRemoteUserResponse or derived type identifier
class _tds__GetRemoteUserResponse
{ public:
/// Element "RemoteUser" of type "http://www.onvif.org/ver10/schema":RemoteUser.
    tt__RemoteUser*                      RemoteUser                     0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteUser
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteUser is a complexType.
///
/// @note class _tds__SetRemoteUser operations:
/// - _tds__SetRemoteUser* soap_new__tds__SetRemoteUser(soap*) allocate and default initialize
/// - _tds__SetRemoteUser* soap_new__tds__SetRemoteUser(soap*, int num) allocate and default initialize an array
/// - _tds__SetRemoteUser* soap_new_req__tds__SetRemoteUser(soap*, ...) allocate, set required members
/// - _tds__SetRemoteUser* soap_new_set__tds__SetRemoteUser(soap*, ...) allocate, set all public members
/// - _tds__SetRemoteUser::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRemoteUser(soap*, _tds__SetRemoteUser*) deserialize from a stream
/// - int soap_write__tds__SetRemoteUser(soap*, _tds__SetRemoteUser*) serialize to a stream
/// - _tds__SetRemoteUser* _tds__SetRemoteUser::soap_dup(soap*) returns deep copy of _tds__SetRemoteUser, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRemoteUser::soap_del() deep deletes _tds__SetRemoteUser data members, use only after _tds__SetRemoteUser::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRemoteUser::soap_type() returns SOAP_TYPE__tds__SetRemoteUser or derived type identifier
class _tds__SetRemoteUser
{ public:
/// Element "RemoteUser" of type "http://www.onvif.org/ver10/schema":RemoteUser.
    tt__RemoteUser*                      RemoteUser                     0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteUserResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteUserResponse is a complexType.
///
/// @note class _tds__SetRemoteUserResponse operations:
/// - _tds__SetRemoteUserResponse* soap_new__tds__SetRemoteUserResponse(soap*) allocate and default initialize
/// - _tds__SetRemoteUserResponse* soap_new__tds__SetRemoteUserResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetRemoteUserResponse* soap_new_req__tds__SetRemoteUserResponse(soap*, ...) allocate, set required members
/// - _tds__SetRemoteUserResponse* soap_new_set__tds__SetRemoteUserResponse(soap*, ...) allocate, set all public members
/// - _tds__SetRemoteUserResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRemoteUserResponse(soap*, _tds__SetRemoteUserResponse*) deserialize from a stream
/// - int soap_write__tds__SetRemoteUserResponse(soap*, _tds__SetRemoteUserResponse*) serialize to a stream
/// - _tds__SetRemoteUserResponse* _tds__SetRemoteUserResponse::soap_dup(soap*) returns deep copy of _tds__SetRemoteUserResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRemoteUserResponse::soap_del() deep deletes _tds__SetRemoteUserResponse data members, use only after _tds__SetRemoteUserResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRemoteUserResponse::soap_type() returns SOAP_TYPE__tds__SetRemoteUserResponse or derived type identifier
class _tds__SetRemoteUserResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetUsers
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetUsers is a complexType.
///
/// @note class _tds__GetUsers operations:
/// - _tds__GetUsers* soap_new__tds__GetUsers(soap*) allocate and default initialize
/// - _tds__GetUsers* soap_new__tds__GetUsers(soap*, int num) allocate and default initialize an array
/// - _tds__GetUsers* soap_new_req__tds__GetUsers(soap*, ...) allocate, set required members
/// - _tds__GetUsers* soap_new_set__tds__GetUsers(soap*, ...) allocate, set all public members
/// - _tds__GetUsers::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetUsers(soap*, _tds__GetUsers*) deserialize from a stream
/// - int soap_write__tds__GetUsers(soap*, _tds__GetUsers*) serialize to a stream
/// - _tds__GetUsers* _tds__GetUsers::soap_dup(soap*) returns deep copy of _tds__GetUsers, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetUsers::soap_del() deep deletes _tds__GetUsers data members, use only after _tds__GetUsers::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetUsers::soap_type() returns SOAP_TYPE__tds__GetUsers or derived type identifier
class _tds__GetUsers
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetUsersResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetUsersResponse is a complexType.
///
/// @note class _tds__GetUsersResponse operations:
/// - _tds__GetUsersResponse* soap_new__tds__GetUsersResponse(soap*) allocate and default initialize
/// - _tds__GetUsersResponse* soap_new__tds__GetUsersResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetUsersResponse* soap_new_req__tds__GetUsersResponse(soap*, ...) allocate, set required members
/// - _tds__GetUsersResponse* soap_new_set__tds__GetUsersResponse(soap*, ...) allocate, set all public members
/// - _tds__GetUsersResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetUsersResponse(soap*, _tds__GetUsersResponse*) deserialize from a stream
/// - int soap_write__tds__GetUsersResponse(soap*, _tds__GetUsersResponse*) serialize to a stream
/// - _tds__GetUsersResponse* _tds__GetUsersResponse::soap_dup(soap*) returns deep copy of _tds__GetUsersResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetUsersResponse::soap_del() deep deletes _tds__GetUsersResponse data members, use only after _tds__GetUsersResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetUsersResponse::soap_type() returns SOAP_TYPE__tds__GetUsersResponse or derived type identifier
class _tds__GetUsersResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of the onvif users and following information is included in each entry: username and user level.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__User* of length 0..unbounded.
    std::vector<tt__User*              > User                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateUsers
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateUsers is a complexType.
///
/// @note class _tds__CreateUsers operations:
/// - _tds__CreateUsers* soap_new__tds__CreateUsers(soap*) allocate and default initialize
/// - _tds__CreateUsers* soap_new__tds__CreateUsers(soap*, int num) allocate and default initialize an array
/// - _tds__CreateUsers* soap_new_req__tds__CreateUsers(soap*, ...) allocate, set required members
/// - _tds__CreateUsers* soap_new_set__tds__CreateUsers(soap*, ...) allocate, set all public members
/// - _tds__CreateUsers::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateUsers(soap*, _tds__CreateUsers*) deserialize from a stream
/// - int soap_write__tds__CreateUsers(soap*, _tds__CreateUsers*) serialize to a stream
/// - _tds__CreateUsers* _tds__CreateUsers::soap_dup(soap*) returns deep copy of _tds__CreateUsers, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateUsers::soap_del() deep deletes _tds__CreateUsers data members, use only after _tds__CreateUsers::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateUsers::soap_type() returns SOAP_TYPE__tds__CreateUsers or derived type identifier
class _tds__CreateUsers
{ public:
/// <PRE><BLOCKQUOTE>
///   Creates new device users and corresponding credentials. Each user entry includes: username, password and user level. Either all users are created successfully or a fault message MUST be returned without creating any user. If trying to create several users with exactly the same username the request is rejected and no users are created. If password is missing, then fault message Too weak password is returned.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__User* of length 1..unbounded.
    std::vector<tt__User*              > User                           1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateUsersResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateUsersResponse is a complexType.
///
/// @note class _tds__CreateUsersResponse operations:
/// - _tds__CreateUsersResponse* soap_new__tds__CreateUsersResponse(soap*) allocate and default initialize
/// - _tds__CreateUsersResponse* soap_new__tds__CreateUsersResponse(soap*, int num) allocate and default initialize an array
/// - _tds__CreateUsersResponse* soap_new_req__tds__CreateUsersResponse(soap*, ...) allocate, set required members
/// - _tds__CreateUsersResponse* soap_new_set__tds__CreateUsersResponse(soap*, ...) allocate, set all public members
/// - _tds__CreateUsersResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateUsersResponse(soap*, _tds__CreateUsersResponse*) deserialize from a stream
/// - int soap_write__tds__CreateUsersResponse(soap*, _tds__CreateUsersResponse*) serialize to a stream
/// - _tds__CreateUsersResponse* _tds__CreateUsersResponse::soap_dup(soap*) returns deep copy of _tds__CreateUsersResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateUsersResponse::soap_del() deep deletes _tds__CreateUsersResponse data members, use only after _tds__CreateUsersResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateUsersResponse::soap_type() returns SOAP_TYPE__tds__CreateUsersResponse or derived type identifier
class _tds__CreateUsersResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteUsers
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteUsers is a complexType.
///
/// @note class _tds__DeleteUsers operations:
/// - _tds__DeleteUsers* soap_new__tds__DeleteUsers(soap*) allocate and default initialize
/// - _tds__DeleteUsers* soap_new__tds__DeleteUsers(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteUsers* soap_new_req__tds__DeleteUsers(soap*, ...) allocate, set required members
/// - _tds__DeleteUsers* soap_new_set__tds__DeleteUsers(soap*, ...) allocate, set all public members
/// - _tds__DeleteUsers::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteUsers(soap*, _tds__DeleteUsers*) deserialize from a stream
/// - int soap_write__tds__DeleteUsers(soap*, _tds__DeleteUsers*) serialize to a stream
/// - _tds__DeleteUsers* _tds__DeleteUsers::soap_dup(soap*) returns deep copy of _tds__DeleteUsers, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteUsers::soap_del() deep deletes _tds__DeleteUsers data members, use only after _tds__DeleteUsers::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteUsers::soap_type() returns SOAP_TYPE__tds__DeleteUsers or derived type identifier
class _tds__DeleteUsers
{ public:
/// <PRE><BLOCKQUOTE>
///   Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a fault message MUST be returned and no users be deleted. If a username exists multiple times in the request, then a fault message is returned.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Username                       1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteUsersResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteUsersResponse is a complexType.
///
/// @note class _tds__DeleteUsersResponse operations:
/// - _tds__DeleteUsersResponse* soap_new__tds__DeleteUsersResponse(soap*) allocate and default initialize
/// - _tds__DeleteUsersResponse* soap_new__tds__DeleteUsersResponse(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteUsersResponse* soap_new_req__tds__DeleteUsersResponse(soap*, ...) allocate, set required members
/// - _tds__DeleteUsersResponse* soap_new_set__tds__DeleteUsersResponse(soap*, ...) allocate, set all public members
/// - _tds__DeleteUsersResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteUsersResponse(soap*, _tds__DeleteUsersResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteUsersResponse(soap*, _tds__DeleteUsersResponse*) serialize to a stream
/// - _tds__DeleteUsersResponse* _tds__DeleteUsersResponse::soap_dup(soap*) returns deep copy of _tds__DeleteUsersResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteUsersResponse::soap_del() deep deletes _tds__DeleteUsersResponse data members, use only after _tds__DeleteUsersResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteUsersResponse::soap_type() returns SOAP_TYPE__tds__DeleteUsersResponse or derived type identifier
class _tds__DeleteUsersResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetUser
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetUser is a complexType.
///
/// @note class _tds__SetUser operations:
/// - _tds__SetUser* soap_new__tds__SetUser(soap*) allocate and default initialize
/// - _tds__SetUser* soap_new__tds__SetUser(soap*, int num) allocate and default initialize an array
/// - _tds__SetUser* soap_new_req__tds__SetUser(soap*, ...) allocate, set required members
/// - _tds__SetUser* soap_new_set__tds__SetUser(soap*, ...) allocate, set all public members
/// - _tds__SetUser::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetUser(soap*, _tds__SetUser*) deserialize from a stream
/// - int soap_write__tds__SetUser(soap*, _tds__SetUser*) serialize to a stream
/// - _tds__SetUser* _tds__SetUser::soap_dup(soap*) returns deep copy of _tds__SetUser, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetUser::soap_del() deep deletes _tds__SetUser data members, use only after _tds__SetUser::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetUser::soap_type() returns SOAP_TYPE__tds__SetUser or derived type identifier
class _tds__SetUser
{ public:
/// <PRE><BLOCKQUOTE>
///   Updates the credentials for one or several users on an device. Either all change requests are processed successfully or a fault message MUST be returned. If the request contains the same username multiple times, a fault message is returned.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__User* of length 1..unbounded.
    std::vector<tt__User*              > User                           1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetUserResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetUserResponse is a complexType.
///
/// @note class _tds__SetUserResponse operations:
/// - _tds__SetUserResponse* soap_new__tds__SetUserResponse(soap*) allocate and default initialize
/// - _tds__SetUserResponse* soap_new__tds__SetUserResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetUserResponse* soap_new_req__tds__SetUserResponse(soap*, ...) allocate, set required members
/// - _tds__SetUserResponse* soap_new_set__tds__SetUserResponse(soap*, ...) allocate, set all public members
/// - _tds__SetUserResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetUserResponse(soap*, _tds__SetUserResponse*) deserialize from a stream
/// - int soap_write__tds__SetUserResponse(soap*, _tds__SetUserResponse*) serialize to a stream
/// - _tds__SetUserResponse* _tds__SetUserResponse::soap_dup(soap*) returns deep copy of _tds__SetUserResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetUserResponse::soap_del() deep deletes _tds__SetUserResponse data members, use only after _tds__SetUserResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetUserResponse::soap_type() returns SOAP_TYPE__tds__SetUserResponse or derived type identifier
class _tds__SetUserResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrl
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrl is a complexType.
///
/// @note class _tds__GetWsdlUrl operations:
/// - _tds__GetWsdlUrl* soap_new__tds__GetWsdlUrl(soap*) allocate and default initialize
/// - _tds__GetWsdlUrl* soap_new__tds__GetWsdlUrl(soap*, int num) allocate and default initialize an array
/// - _tds__GetWsdlUrl* soap_new_req__tds__GetWsdlUrl(soap*, ...) allocate, set required members
/// - _tds__GetWsdlUrl* soap_new_set__tds__GetWsdlUrl(soap*, ...) allocate, set all public members
/// - _tds__GetWsdlUrl::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetWsdlUrl(soap*, _tds__GetWsdlUrl*) deserialize from a stream
/// - int soap_write__tds__GetWsdlUrl(soap*, _tds__GetWsdlUrl*) serialize to a stream
/// - _tds__GetWsdlUrl* _tds__GetWsdlUrl::soap_dup(soap*) returns deep copy of _tds__GetWsdlUrl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetWsdlUrl::soap_del() deep deletes _tds__GetWsdlUrl data members, use only after _tds__GetWsdlUrl::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetWsdlUrl::soap_type() returns SOAP_TYPE__tds__GetWsdlUrl or derived type identifier
class _tds__GetWsdlUrl
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrlResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrlResponse is a complexType.
///
/// @note class _tds__GetWsdlUrlResponse operations:
/// - _tds__GetWsdlUrlResponse* soap_new__tds__GetWsdlUrlResponse(soap*) allocate and default initialize
/// - _tds__GetWsdlUrlResponse* soap_new__tds__GetWsdlUrlResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetWsdlUrlResponse* soap_new_req__tds__GetWsdlUrlResponse(soap*, ...) allocate, set required members
/// - _tds__GetWsdlUrlResponse* soap_new_set__tds__GetWsdlUrlResponse(soap*, ...) allocate, set all public members
/// - _tds__GetWsdlUrlResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetWsdlUrlResponse(soap*, _tds__GetWsdlUrlResponse*) deserialize from a stream
/// - int soap_write__tds__GetWsdlUrlResponse(soap*, _tds__GetWsdlUrlResponse*) serialize to a stream
/// - _tds__GetWsdlUrlResponse* _tds__GetWsdlUrlResponse::soap_dup(soap*) returns deep copy of _tds__GetWsdlUrlResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetWsdlUrlResponse::soap_del() deep deletes _tds__GetWsdlUrlResponse data members, use only after _tds__GetWsdlUrlResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetWsdlUrlResponse::soap_type() returns SOAP_TYPE__tds__GetWsdlUrlResponse or derived type identifier
class _tds__GetWsdlUrlResponse
{ public:
/// Element "WsdlUrl" of type xs:anyURI.
    xsd__anyURI                          WsdlUrl                        1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCapabilities
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCapabilities is a complexType.
///
/// @note class _tds__GetCapabilities operations:
/// - _tds__GetCapabilities* soap_new__tds__GetCapabilities(soap*) allocate and default initialize
/// - _tds__GetCapabilities* soap_new__tds__GetCapabilities(soap*, int num) allocate and default initialize an array
/// - _tds__GetCapabilities* soap_new_req__tds__GetCapabilities(soap*, ...) allocate, set required members
/// - _tds__GetCapabilities* soap_new_set__tds__GetCapabilities(soap*, ...) allocate, set all public members
/// - _tds__GetCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCapabilities(soap*, _tds__GetCapabilities*) deserialize from a stream
/// - int soap_write__tds__GetCapabilities(soap*, _tds__GetCapabilities*) serialize to a stream
/// - _tds__GetCapabilities* _tds__GetCapabilities::soap_dup(soap*) returns deep copy of _tds__GetCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCapabilities::soap_del() deep deletes _tds__GetCapabilities data members, use only after _tds__GetCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCapabilities::soap_type() returns SOAP_TYPE__tds__GetCapabilities or derived type identifier
class _tds__GetCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   List of categories to retrieve capability information on.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__CapabilityCategory of length 0..unbounded.
    std::vector<tt__CapabilityCategory > Category                       0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCapabilitiesResponse is a complexType.
///
/// @note class _tds__GetCapabilitiesResponse operations:
/// - _tds__GetCapabilitiesResponse* soap_new__tds__GetCapabilitiesResponse(soap*) allocate and default initialize
/// - _tds__GetCapabilitiesResponse* soap_new__tds__GetCapabilitiesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetCapabilitiesResponse* soap_new_req__tds__GetCapabilitiesResponse(soap*, ...) allocate, set required members
/// - _tds__GetCapabilitiesResponse* soap_new_set__tds__GetCapabilitiesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetCapabilitiesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCapabilitiesResponse(soap*, _tds__GetCapabilitiesResponse*) deserialize from a stream
/// - int soap_write__tds__GetCapabilitiesResponse(soap*, _tds__GetCapabilitiesResponse*) serialize to a stream
/// - _tds__GetCapabilitiesResponse* _tds__GetCapabilitiesResponse::soap_dup(soap*) returns deep copy of _tds__GetCapabilitiesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCapabilitiesResponse::soap_del() deep deletes _tds__GetCapabilitiesResponse data members, use only after _tds__GetCapabilitiesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCapabilitiesResponse::soap_type() returns SOAP_TYPE__tds__GetCapabilitiesResponse or derived type identifier
class _tds__GetCapabilitiesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Capability information.
/// </BLOCKQUOTE></PRE>
///
/// Element "Capabilities" of type "http://www.onvif.org/ver10/schema":Capabilities.
    tt__Capabilities*                    Capabilities                   1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetHostname
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetHostname is a complexType.
///
/// @note class _tds__GetHostname operations:
/// - _tds__GetHostname* soap_new__tds__GetHostname(soap*) allocate and default initialize
/// - _tds__GetHostname* soap_new__tds__GetHostname(soap*, int num) allocate and default initialize an array
/// - _tds__GetHostname* soap_new_req__tds__GetHostname(soap*, ...) allocate, set required members
/// - _tds__GetHostname* soap_new_set__tds__GetHostname(soap*, ...) allocate, set all public members
/// - _tds__GetHostname::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetHostname(soap*, _tds__GetHostname*) deserialize from a stream
/// - int soap_write__tds__GetHostname(soap*, _tds__GetHostname*) serialize to a stream
/// - _tds__GetHostname* _tds__GetHostname::soap_dup(soap*) returns deep copy of _tds__GetHostname, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetHostname::soap_del() deep deletes _tds__GetHostname data members, use only after _tds__GetHostname::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetHostname::soap_type() returns SOAP_TYPE__tds__GetHostname or derived type identifier
class _tds__GetHostname
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetHostnameResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetHostnameResponse is a complexType.
///
/// @note class _tds__GetHostnameResponse operations:
/// - _tds__GetHostnameResponse* soap_new__tds__GetHostnameResponse(soap*) allocate and default initialize
/// - _tds__GetHostnameResponse* soap_new__tds__GetHostnameResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetHostnameResponse* soap_new_req__tds__GetHostnameResponse(soap*, ...) allocate, set required members
/// - _tds__GetHostnameResponse* soap_new_set__tds__GetHostnameResponse(soap*, ...) allocate, set all public members
/// - _tds__GetHostnameResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetHostnameResponse(soap*, _tds__GetHostnameResponse*) deserialize from a stream
/// - int soap_write__tds__GetHostnameResponse(soap*, _tds__GetHostnameResponse*) serialize to a stream
/// - _tds__GetHostnameResponse* _tds__GetHostnameResponse::soap_dup(soap*) returns deep copy of _tds__GetHostnameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetHostnameResponse::soap_del() deep deletes _tds__GetHostnameResponse data members, use only after _tds__GetHostnameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetHostnameResponse::soap_type() returns SOAP_TYPE__tds__GetHostnameResponse or derived type identifier
class _tds__GetHostnameResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the hostname information.
/// </BLOCKQUOTE></PRE>
///
/// Element "HostnameInformation" of type "http://www.onvif.org/ver10/schema":HostnameInformation.
    tt__HostnameInformation*             HostnameInformation            1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostname
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostname is a complexType.
///
/// @note class _tds__SetHostname operations:
/// - _tds__SetHostname* soap_new__tds__SetHostname(soap*) allocate and default initialize
/// - _tds__SetHostname* soap_new__tds__SetHostname(soap*, int num) allocate and default initialize an array
/// - _tds__SetHostname* soap_new_req__tds__SetHostname(soap*, ...) allocate, set required members
/// - _tds__SetHostname* soap_new_set__tds__SetHostname(soap*, ...) allocate, set all public members
/// - _tds__SetHostname::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetHostname(soap*, _tds__SetHostname*) deserialize from a stream
/// - int soap_write__tds__SetHostname(soap*, _tds__SetHostname*) serialize to a stream
/// - _tds__SetHostname* _tds__SetHostname::soap_dup(soap*) returns deep copy of _tds__SetHostname, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetHostname::soap_del() deep deletes _tds__SetHostname data members, use only after _tds__SetHostname::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetHostname::soap_type() returns SOAP_TYPE__tds__SetHostname or derived type identifier
class _tds__SetHostname
{ public:
/// <PRE><BLOCKQUOTE>
///   The hostname to set.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type xs:token.
    xsd__token                           Name                           1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostnameResponse is a complexType.
///
/// @note class _tds__SetHostnameResponse operations:
/// - _tds__SetHostnameResponse* soap_new__tds__SetHostnameResponse(soap*) allocate and default initialize
/// - _tds__SetHostnameResponse* soap_new__tds__SetHostnameResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetHostnameResponse* soap_new_req__tds__SetHostnameResponse(soap*, ...) allocate, set required members
/// - _tds__SetHostnameResponse* soap_new_set__tds__SetHostnameResponse(soap*, ...) allocate, set all public members
/// - _tds__SetHostnameResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetHostnameResponse(soap*, _tds__SetHostnameResponse*) deserialize from a stream
/// - int soap_write__tds__SetHostnameResponse(soap*, _tds__SetHostnameResponse*) serialize to a stream
/// - _tds__SetHostnameResponse* _tds__SetHostnameResponse::soap_dup(soap*) returns deep copy of _tds__SetHostnameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetHostnameResponse::soap_del() deep deletes _tds__SetHostnameResponse data members, use only after _tds__SetHostnameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetHostnameResponse::soap_type() returns SOAP_TYPE__tds__SetHostnameResponse or derived type identifier
class _tds__SetHostnameResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCP
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCP is a complexType.
///
/// @note class _tds__SetHostnameFromDHCP operations:
/// - _tds__SetHostnameFromDHCP* soap_new__tds__SetHostnameFromDHCP(soap*) allocate and default initialize
/// - _tds__SetHostnameFromDHCP* soap_new__tds__SetHostnameFromDHCP(soap*, int num) allocate and default initialize an array
/// - _tds__SetHostnameFromDHCP* soap_new_req__tds__SetHostnameFromDHCP(soap*, ...) allocate, set required members
/// - _tds__SetHostnameFromDHCP* soap_new_set__tds__SetHostnameFromDHCP(soap*, ...) allocate, set all public members
/// - _tds__SetHostnameFromDHCP::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetHostnameFromDHCP(soap*, _tds__SetHostnameFromDHCP*) deserialize from a stream
/// - int soap_write__tds__SetHostnameFromDHCP(soap*, _tds__SetHostnameFromDHCP*) serialize to a stream
/// - _tds__SetHostnameFromDHCP* _tds__SetHostnameFromDHCP::soap_dup(soap*) returns deep copy of _tds__SetHostnameFromDHCP, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetHostnameFromDHCP::soap_del() deep deletes _tds__SetHostnameFromDHCP data members, use only after _tds__SetHostnameFromDHCP::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetHostnameFromDHCP::soap_type() returns SOAP_TYPE__tds__SetHostnameFromDHCP or derived type identifier
class _tds__SetHostnameFromDHCP
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the hostname shall be obtained via DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCPResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCPResponse is a complexType.
///
/// @note class _tds__SetHostnameFromDHCPResponse operations:
/// - _tds__SetHostnameFromDHCPResponse* soap_new__tds__SetHostnameFromDHCPResponse(soap*) allocate and default initialize
/// - _tds__SetHostnameFromDHCPResponse* soap_new__tds__SetHostnameFromDHCPResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetHostnameFromDHCPResponse* soap_new_req__tds__SetHostnameFromDHCPResponse(soap*, ...) allocate, set required members
/// - _tds__SetHostnameFromDHCPResponse* soap_new_set__tds__SetHostnameFromDHCPResponse(soap*, ...) allocate, set all public members
/// - _tds__SetHostnameFromDHCPResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetHostnameFromDHCPResponse(soap*, _tds__SetHostnameFromDHCPResponse*) deserialize from a stream
/// - int soap_write__tds__SetHostnameFromDHCPResponse(soap*, _tds__SetHostnameFromDHCPResponse*) serialize to a stream
/// - _tds__SetHostnameFromDHCPResponse* _tds__SetHostnameFromDHCPResponse::soap_dup(soap*) returns deep copy of _tds__SetHostnameFromDHCPResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetHostnameFromDHCPResponse::soap_del() deep deletes _tds__SetHostnameFromDHCPResponse data members, use only after _tds__SetHostnameFromDHCPResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetHostnameFromDHCPResponse::soap_type() returns SOAP_TYPE__tds__SetHostnameFromDHCPResponse or derived type identifier
class _tds__SetHostnameFromDHCPResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not a reboot is required after configuration updates.
/// </BLOCKQUOTE></PRE>
///
/// Element "RebootNeeded" of type xs:boolean.
    bool                                 RebootNeeded                   1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDNS is a complexType.
///
/// @note class _tds__GetDNS operations:
/// - _tds__GetDNS* soap_new__tds__GetDNS(soap*) allocate and default initialize
/// - _tds__GetDNS* soap_new__tds__GetDNS(soap*, int num) allocate and default initialize an array
/// - _tds__GetDNS* soap_new_req__tds__GetDNS(soap*, ...) allocate, set required members
/// - _tds__GetDNS* soap_new_set__tds__GetDNS(soap*, ...) allocate, set all public members
/// - _tds__GetDNS::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDNS(soap*, _tds__GetDNS*) deserialize from a stream
/// - int soap_write__tds__GetDNS(soap*, _tds__GetDNS*) serialize to a stream
/// - _tds__GetDNS* _tds__GetDNS::soap_dup(soap*) returns deep copy of _tds__GetDNS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDNS::soap_del() deep deletes _tds__GetDNS data members, use only after _tds__GetDNS::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDNS::soap_type() returns SOAP_TYPE__tds__GetDNS or derived type identifier
class _tds__GetDNS
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDNSResponse is a complexType.
///
/// @note class _tds__GetDNSResponse operations:
/// - _tds__GetDNSResponse* soap_new__tds__GetDNSResponse(soap*) allocate and default initialize
/// - _tds__GetDNSResponse* soap_new__tds__GetDNSResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDNSResponse* soap_new_req__tds__GetDNSResponse(soap*, ...) allocate, set required members
/// - _tds__GetDNSResponse* soap_new_set__tds__GetDNSResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDNSResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDNSResponse(soap*, _tds__GetDNSResponse*) deserialize from a stream
/// - int soap_write__tds__GetDNSResponse(soap*, _tds__GetDNSResponse*) serialize to a stream
/// - _tds__GetDNSResponse* _tds__GetDNSResponse::soap_dup(soap*) returns deep copy of _tds__GetDNSResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDNSResponse::soap_del() deep deletes _tds__GetDNSResponse data members, use only after _tds__GetDNSResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDNSResponse::soap_type() returns SOAP_TYPE__tds__GetDNSResponse or derived type identifier
class _tds__GetDNSResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   DNS information.
/// </BLOCKQUOTE></PRE>
///
/// Element "DNSInformation" of type "http://www.onvif.org/ver10/schema":DNSInformation.
    tt__DNSInformation*                  DNSInformation                 1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDNS is a complexType.
///
/// @note class _tds__SetDNS operations:
/// - _tds__SetDNS* soap_new__tds__SetDNS(soap*) allocate and default initialize
/// - _tds__SetDNS* soap_new__tds__SetDNS(soap*, int num) allocate and default initialize an array
/// - _tds__SetDNS* soap_new_req__tds__SetDNS(soap*, ...) allocate, set required members
/// - _tds__SetDNS* soap_new_set__tds__SetDNS(soap*, ...) allocate, set all public members
/// - _tds__SetDNS::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDNS(soap*, _tds__SetDNS*) deserialize from a stream
/// - int soap_write__tds__SetDNS(soap*, _tds__SetDNS*) serialize to a stream
/// - _tds__SetDNS* _tds__SetDNS::soap_dup(soap*) returns deep copy of _tds__SetDNS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDNS::soap_del() deep deletes _tds__SetDNS data members, use only after _tds__SetDNS::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDNS::soap_type() returns SOAP_TYPE__tds__SetDNS or derived type identifier
class _tds__SetDNS
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicate if the DNS address is to be retrieved using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   DNS search domain.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__token of length 0..unbounded.
    std::vector<xsd__token             > SearchDomain                   0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   DNS address(es) set manually.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPAddress* of length 0..unbounded.
    std::vector<tt__IPAddress*         > DNSManual                      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDNSResponse is a complexType.
///
/// @note class _tds__SetDNSResponse operations:
/// - _tds__SetDNSResponse* soap_new__tds__SetDNSResponse(soap*) allocate and default initialize
/// - _tds__SetDNSResponse* soap_new__tds__SetDNSResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetDNSResponse* soap_new_req__tds__SetDNSResponse(soap*, ...) allocate, set required members
/// - _tds__SetDNSResponse* soap_new_set__tds__SetDNSResponse(soap*, ...) allocate, set all public members
/// - _tds__SetDNSResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDNSResponse(soap*, _tds__SetDNSResponse*) deserialize from a stream
/// - int soap_write__tds__SetDNSResponse(soap*, _tds__SetDNSResponse*) serialize to a stream
/// - _tds__SetDNSResponse* _tds__SetDNSResponse::soap_dup(soap*) returns deep copy of _tds__SetDNSResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDNSResponse::soap_del() deep deletes _tds__SetDNSResponse data members, use only after _tds__SetDNSResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDNSResponse::soap_type() returns SOAP_TYPE__tds__SetDNSResponse or derived type identifier
class _tds__SetDNSResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNTP
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNTP is a complexType.
///
/// @note class _tds__GetNTP operations:
/// - _tds__GetNTP* soap_new__tds__GetNTP(soap*) allocate and default initialize
/// - _tds__GetNTP* soap_new__tds__GetNTP(soap*, int num) allocate and default initialize an array
/// - _tds__GetNTP* soap_new_req__tds__GetNTP(soap*, ...) allocate, set required members
/// - _tds__GetNTP* soap_new_set__tds__GetNTP(soap*, ...) allocate, set all public members
/// - _tds__GetNTP::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNTP(soap*, _tds__GetNTP*) deserialize from a stream
/// - int soap_write__tds__GetNTP(soap*, _tds__GetNTP*) serialize to a stream
/// - _tds__GetNTP* _tds__GetNTP::soap_dup(soap*) returns deep copy of _tds__GetNTP, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNTP::soap_del() deep deletes _tds__GetNTP data members, use only after _tds__GetNTP::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNTP::soap_type() returns SOAP_TYPE__tds__GetNTP or derived type identifier
class _tds__GetNTP
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNTPResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNTPResponse is a complexType.
///
/// @note class _tds__GetNTPResponse operations:
/// - _tds__GetNTPResponse* soap_new__tds__GetNTPResponse(soap*) allocate and default initialize
/// - _tds__GetNTPResponse* soap_new__tds__GetNTPResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetNTPResponse* soap_new_req__tds__GetNTPResponse(soap*, ...) allocate, set required members
/// - _tds__GetNTPResponse* soap_new_set__tds__GetNTPResponse(soap*, ...) allocate, set all public members
/// - _tds__GetNTPResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNTPResponse(soap*, _tds__GetNTPResponse*) deserialize from a stream
/// - int soap_write__tds__GetNTPResponse(soap*, _tds__GetNTPResponse*) serialize to a stream
/// - _tds__GetNTPResponse* _tds__GetNTPResponse::soap_dup(soap*) returns deep copy of _tds__GetNTPResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNTPResponse::soap_del() deep deletes _tds__GetNTPResponse data members, use only after _tds__GetNTPResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNTPResponse::soap_type() returns SOAP_TYPE__tds__GetNTPResponse or derived type identifier
class _tds__GetNTPResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   NTP information.
/// </BLOCKQUOTE></PRE>
///
/// Element "NTPInformation" of type "http://www.onvif.org/ver10/schema":NTPInformation.
    tt__NTPInformation*                  NTPInformation                 1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNTP
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNTP is a complexType.
///
/// @note class _tds__SetNTP operations:
/// - _tds__SetNTP* soap_new__tds__SetNTP(soap*) allocate and default initialize
/// - _tds__SetNTP* soap_new__tds__SetNTP(soap*, int num) allocate and default initialize an array
/// - _tds__SetNTP* soap_new_req__tds__SetNTP(soap*, ...) allocate, set required members
/// - _tds__SetNTP* soap_new_set__tds__SetNTP(soap*, ...) allocate, set all public members
/// - _tds__SetNTP::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNTP(soap*, _tds__SetNTP*) deserialize from a stream
/// - int soap_write__tds__SetNTP(soap*, _tds__SetNTP*) serialize to a stream
/// - _tds__SetNTP* _tds__SetNTP::soap_dup(soap*) returns deep copy of _tds__SetNTP, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNTP::soap_del() deep deletes _tds__SetNTP data members, use only after _tds__SetNTP::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNTP::soap_type() returns SOAP_TYPE__tds__SetNTP or derived type identifier
class _tds__SetNTP
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicate if NTP address information is to be retrieved using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Manual NTP settings.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > NTPManual                      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNTPResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNTPResponse is a complexType.
///
/// @note class _tds__SetNTPResponse operations:
/// - _tds__SetNTPResponse* soap_new__tds__SetNTPResponse(soap*) allocate and default initialize
/// - _tds__SetNTPResponse* soap_new__tds__SetNTPResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetNTPResponse* soap_new_req__tds__SetNTPResponse(soap*, ...) allocate, set required members
/// - _tds__SetNTPResponse* soap_new_set__tds__SetNTPResponse(soap*, ...) allocate, set all public members
/// - _tds__SetNTPResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNTPResponse(soap*, _tds__SetNTPResponse*) deserialize from a stream
/// - int soap_write__tds__SetNTPResponse(soap*, _tds__SetNTPResponse*) serialize to a stream
/// - _tds__SetNTPResponse* _tds__SetNTPResponse::soap_dup(soap*) returns deep copy of _tds__SetNTPResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNTPResponse::soap_del() deep deletes _tds__SetNTPResponse data members, use only after _tds__SetNTPResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNTPResponse::soap_type() returns SOAP_TYPE__tds__SetNTPResponse or derived type identifier
class _tds__SetNTPResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNS is a complexType.
///
/// @note class _tds__GetDynamicDNS operations:
/// - _tds__GetDynamicDNS* soap_new__tds__GetDynamicDNS(soap*) allocate and default initialize
/// - _tds__GetDynamicDNS* soap_new__tds__GetDynamicDNS(soap*, int num) allocate and default initialize an array
/// - _tds__GetDynamicDNS* soap_new_req__tds__GetDynamicDNS(soap*, ...) allocate, set required members
/// - _tds__GetDynamicDNS* soap_new_set__tds__GetDynamicDNS(soap*, ...) allocate, set all public members
/// - _tds__GetDynamicDNS::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDynamicDNS(soap*, _tds__GetDynamicDNS*) deserialize from a stream
/// - int soap_write__tds__GetDynamicDNS(soap*, _tds__GetDynamicDNS*) serialize to a stream
/// - _tds__GetDynamicDNS* _tds__GetDynamicDNS::soap_dup(soap*) returns deep copy of _tds__GetDynamicDNS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDynamicDNS::soap_del() deep deletes _tds__GetDynamicDNS data members, use only after _tds__GetDynamicDNS::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDynamicDNS::soap_type() returns SOAP_TYPE__tds__GetDynamicDNS or derived type identifier
class _tds__GetDynamicDNS
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNSResponse is a complexType.
///
/// @note class _tds__GetDynamicDNSResponse operations:
/// - _tds__GetDynamicDNSResponse* soap_new__tds__GetDynamicDNSResponse(soap*) allocate and default initialize
/// - _tds__GetDynamicDNSResponse* soap_new__tds__GetDynamicDNSResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDynamicDNSResponse* soap_new_req__tds__GetDynamicDNSResponse(soap*, ...) allocate, set required members
/// - _tds__GetDynamicDNSResponse* soap_new_set__tds__GetDynamicDNSResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDynamicDNSResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDynamicDNSResponse(soap*, _tds__GetDynamicDNSResponse*) deserialize from a stream
/// - int soap_write__tds__GetDynamicDNSResponse(soap*, _tds__GetDynamicDNSResponse*) serialize to a stream
/// - _tds__GetDynamicDNSResponse* _tds__GetDynamicDNSResponse::soap_dup(soap*) returns deep copy of _tds__GetDynamicDNSResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDynamicDNSResponse::soap_del() deep deletes _tds__GetDynamicDNSResponse data members, use only after _tds__GetDynamicDNSResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDynamicDNSResponse::soap_type() returns SOAP_TYPE__tds__GetDynamicDNSResponse or derived type identifier
class _tds__GetDynamicDNSResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Dynamic DNS information.
/// </BLOCKQUOTE></PRE>
///
/// Element "DynamicDNSInformation" of type "http://www.onvif.org/ver10/schema":DynamicDNSInformation.
    tt__DynamicDNSInformation*           DynamicDNSInformation          1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNS is a complexType.
///
/// @note class _tds__SetDynamicDNS operations:
/// - _tds__SetDynamicDNS* soap_new__tds__SetDynamicDNS(soap*) allocate and default initialize
/// - _tds__SetDynamicDNS* soap_new__tds__SetDynamicDNS(soap*, int num) allocate and default initialize an array
/// - _tds__SetDynamicDNS* soap_new_req__tds__SetDynamicDNS(soap*, ...) allocate, set required members
/// - _tds__SetDynamicDNS* soap_new_set__tds__SetDynamicDNS(soap*, ...) allocate, set all public members
/// - _tds__SetDynamicDNS::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDynamicDNS(soap*, _tds__SetDynamicDNS*) deserialize from a stream
/// - int soap_write__tds__SetDynamicDNS(soap*, _tds__SetDynamicDNS*) serialize to a stream
/// - _tds__SetDynamicDNS* _tds__SetDynamicDNS::soap_dup(soap*) returns deep copy of _tds__SetDynamicDNS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDynamicDNS::soap_del() deep deletes _tds__SetDynamicDNS data members, use only after _tds__SetDynamicDNS::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDynamicDNS::soap_type() returns SOAP_TYPE__tds__SetDynamicDNS or derived type identifier
class _tds__SetDynamicDNS
{ public:
/// <PRE><BLOCKQUOTE>
///   Dynamic DNS type.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":DynamicDNSType.
    tt__DynamicDNSType                   Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DNS record time to live.
/// </BLOCKQUOTE></PRE>
///
/// Element "TTL" of type xs:duration.
    xsd__duration*                       TTL                            0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNSResponse is a complexType.
///
/// @note class _tds__SetDynamicDNSResponse operations:
/// - _tds__SetDynamicDNSResponse* soap_new__tds__SetDynamicDNSResponse(soap*) allocate and default initialize
/// - _tds__SetDynamicDNSResponse* soap_new__tds__SetDynamicDNSResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetDynamicDNSResponse* soap_new_req__tds__SetDynamicDNSResponse(soap*, ...) allocate, set required members
/// - _tds__SetDynamicDNSResponse* soap_new_set__tds__SetDynamicDNSResponse(soap*, ...) allocate, set all public members
/// - _tds__SetDynamicDNSResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDynamicDNSResponse(soap*, _tds__SetDynamicDNSResponse*) deserialize from a stream
/// - int soap_write__tds__SetDynamicDNSResponse(soap*, _tds__SetDynamicDNSResponse*) serialize to a stream
/// - _tds__SetDynamicDNSResponse* _tds__SetDynamicDNSResponse::soap_dup(soap*) returns deep copy of _tds__SetDynamicDNSResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDynamicDNSResponse::soap_del() deep deletes _tds__SetDynamicDNSResponse data members, use only after _tds__SetDynamicDNSResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDynamicDNSResponse::soap_type() returns SOAP_TYPE__tds__SetDynamicDNSResponse or derived type identifier
class _tds__SetDynamicDNSResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfaces
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfaces is a complexType.
///
/// @note class _tds__GetNetworkInterfaces operations:
/// - _tds__GetNetworkInterfaces* soap_new__tds__GetNetworkInterfaces(soap*) allocate and default initialize
/// - _tds__GetNetworkInterfaces* soap_new__tds__GetNetworkInterfaces(soap*, int num) allocate and default initialize an array
/// - _tds__GetNetworkInterfaces* soap_new_req__tds__GetNetworkInterfaces(soap*, ...) allocate, set required members
/// - _tds__GetNetworkInterfaces* soap_new_set__tds__GetNetworkInterfaces(soap*, ...) allocate, set all public members
/// - _tds__GetNetworkInterfaces::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNetworkInterfaces(soap*, _tds__GetNetworkInterfaces*) deserialize from a stream
/// - int soap_write__tds__GetNetworkInterfaces(soap*, _tds__GetNetworkInterfaces*) serialize to a stream
/// - _tds__GetNetworkInterfaces* _tds__GetNetworkInterfaces::soap_dup(soap*) returns deep copy of _tds__GetNetworkInterfaces, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNetworkInterfaces::soap_del() deep deletes _tds__GetNetworkInterfaces data members, use only after _tds__GetNetworkInterfaces::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNetworkInterfaces::soap_type() returns SOAP_TYPE__tds__GetNetworkInterfaces or derived type identifier
class _tds__GetNetworkInterfaces
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfacesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfacesResponse is a complexType.
///
/// @note class _tds__GetNetworkInterfacesResponse operations:
/// - _tds__GetNetworkInterfacesResponse* soap_new__tds__GetNetworkInterfacesResponse(soap*) allocate and default initialize
/// - _tds__GetNetworkInterfacesResponse* soap_new__tds__GetNetworkInterfacesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetNetworkInterfacesResponse* soap_new_req__tds__GetNetworkInterfacesResponse(soap*, ...) allocate, set required members
/// - _tds__GetNetworkInterfacesResponse* soap_new_set__tds__GetNetworkInterfacesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetNetworkInterfacesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNetworkInterfacesResponse(soap*, _tds__GetNetworkInterfacesResponse*) deserialize from a stream
/// - int soap_write__tds__GetNetworkInterfacesResponse(soap*, _tds__GetNetworkInterfacesResponse*) serialize to a stream
/// - _tds__GetNetworkInterfacesResponse* _tds__GetNetworkInterfacesResponse::soap_dup(soap*) returns deep copy of _tds__GetNetworkInterfacesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNetworkInterfacesResponse::soap_del() deep deletes _tds__GetNetworkInterfacesResponse data members, use only after _tds__GetNetworkInterfacesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNetworkInterfacesResponse::soap_type() returns SOAP_TYPE__tds__GetNetworkInterfacesResponse or derived type identifier
class _tds__GetNetworkInterfacesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   List of network interfaces.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__NetworkInterface* of length 1..unbounded.
    std::vector<tt__NetworkInterface*  > NetworkInterfaces              1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfaces
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfaces is a complexType.
///
/// @note class _tds__SetNetworkInterfaces operations:
/// - _tds__SetNetworkInterfaces* soap_new__tds__SetNetworkInterfaces(soap*) allocate and default initialize
/// - _tds__SetNetworkInterfaces* soap_new__tds__SetNetworkInterfaces(soap*, int num) allocate and default initialize an array
/// - _tds__SetNetworkInterfaces* soap_new_req__tds__SetNetworkInterfaces(soap*, ...) allocate, set required members
/// - _tds__SetNetworkInterfaces* soap_new_set__tds__SetNetworkInterfaces(soap*, ...) allocate, set all public members
/// - _tds__SetNetworkInterfaces::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNetworkInterfaces(soap*, _tds__SetNetworkInterfaces*) deserialize from a stream
/// - int soap_write__tds__SetNetworkInterfaces(soap*, _tds__SetNetworkInterfaces*) serialize to a stream
/// - _tds__SetNetworkInterfaces* _tds__SetNetworkInterfaces::soap_dup(soap*) returns deep copy of _tds__SetNetworkInterfaces, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNetworkInterfaces::soap_del() deep deletes _tds__SetNetworkInterfaces data members, use only after _tds__SetNetworkInterfaces::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNetworkInterfaces::soap_type() returns SOAP_TYPE__tds__SetNetworkInterfaces or derived type identifier
class _tds__SetNetworkInterfaces
{ public:
/// <PRE><BLOCKQUOTE>
///   Symbolic network interface name.
/// </BLOCKQUOTE></PRE>
///
/// Element "InterfaceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Network interface name.
/// </BLOCKQUOTE></PRE>
///
/// Element "NetworkInterface" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfiguration.
    tt__NetworkInterfaceSetConfiguration*  NetworkInterface               1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfacesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfacesResponse is a complexType.
///
/// @note class _tds__SetNetworkInterfacesResponse operations:
/// - _tds__SetNetworkInterfacesResponse* soap_new__tds__SetNetworkInterfacesResponse(soap*) allocate and default initialize
/// - _tds__SetNetworkInterfacesResponse* soap_new__tds__SetNetworkInterfacesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetNetworkInterfacesResponse* soap_new_req__tds__SetNetworkInterfacesResponse(soap*, ...) allocate, set required members
/// - _tds__SetNetworkInterfacesResponse* soap_new_set__tds__SetNetworkInterfacesResponse(soap*, ...) allocate, set all public members
/// - _tds__SetNetworkInterfacesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNetworkInterfacesResponse(soap*, _tds__SetNetworkInterfacesResponse*) deserialize from a stream
/// - int soap_write__tds__SetNetworkInterfacesResponse(soap*, _tds__SetNetworkInterfacesResponse*) serialize to a stream
/// - _tds__SetNetworkInterfacesResponse* _tds__SetNetworkInterfacesResponse::soap_dup(soap*) returns deep copy of _tds__SetNetworkInterfacesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNetworkInterfacesResponse::soap_del() deep deletes _tds__SetNetworkInterfacesResponse data members, use only after _tds__SetNetworkInterfacesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNetworkInterfacesResponse::soap_type() returns SOAP_TYPE__tds__SetNetworkInterfacesResponse or derived type identifier
class _tds__SetNetworkInterfacesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not a reboot is required after configuration updates.
///   If a device responds with RebootNeeded set to false, the device can be reached
///   via the new IP address without further action. A client should be aware that a device
///   may not be responsive for a short period of time until it signals availability at
///   the new address via the discovery Hello messages.
///   If a device responds with RebootNeeded set to true, it will be further available under
///   its previous IP address. The settings will only be activated when the device is
///   rebooted via the SystemReboot command.
/// </BLOCKQUOTE></PRE>
///
/// Element "RebootNeeded" of type xs:boolean.
    bool                                 RebootNeeded                   1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocols
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocols is a complexType.
///
/// @note class _tds__GetNetworkProtocols operations:
/// - _tds__GetNetworkProtocols* soap_new__tds__GetNetworkProtocols(soap*) allocate and default initialize
/// - _tds__GetNetworkProtocols* soap_new__tds__GetNetworkProtocols(soap*, int num) allocate and default initialize an array
/// - _tds__GetNetworkProtocols* soap_new_req__tds__GetNetworkProtocols(soap*, ...) allocate, set required members
/// - _tds__GetNetworkProtocols* soap_new_set__tds__GetNetworkProtocols(soap*, ...) allocate, set all public members
/// - _tds__GetNetworkProtocols::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNetworkProtocols(soap*, _tds__GetNetworkProtocols*) deserialize from a stream
/// - int soap_write__tds__GetNetworkProtocols(soap*, _tds__GetNetworkProtocols*) serialize to a stream
/// - _tds__GetNetworkProtocols* _tds__GetNetworkProtocols::soap_dup(soap*) returns deep copy of _tds__GetNetworkProtocols, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNetworkProtocols::soap_del() deep deletes _tds__GetNetworkProtocols data members, use only after _tds__GetNetworkProtocols::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNetworkProtocols::soap_type() returns SOAP_TYPE__tds__GetNetworkProtocols or derived type identifier
class _tds__GetNetworkProtocols
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocolsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocolsResponse is a complexType.
///
/// @note class _tds__GetNetworkProtocolsResponse operations:
/// - _tds__GetNetworkProtocolsResponse* soap_new__tds__GetNetworkProtocolsResponse(soap*) allocate and default initialize
/// - _tds__GetNetworkProtocolsResponse* soap_new__tds__GetNetworkProtocolsResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetNetworkProtocolsResponse* soap_new_req__tds__GetNetworkProtocolsResponse(soap*, ...) allocate, set required members
/// - _tds__GetNetworkProtocolsResponse* soap_new_set__tds__GetNetworkProtocolsResponse(soap*, ...) allocate, set all public members
/// - _tds__GetNetworkProtocolsResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNetworkProtocolsResponse(soap*, _tds__GetNetworkProtocolsResponse*) deserialize from a stream
/// - int soap_write__tds__GetNetworkProtocolsResponse(soap*, _tds__GetNetworkProtocolsResponse*) serialize to a stream
/// - _tds__GetNetworkProtocolsResponse* _tds__GetNetworkProtocolsResponse::soap_dup(soap*) returns deep copy of _tds__GetNetworkProtocolsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNetworkProtocolsResponse::soap_del() deep deletes _tds__GetNetworkProtocolsResponse data members, use only after _tds__GetNetworkProtocolsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNetworkProtocolsResponse::soap_type() returns SOAP_TYPE__tds__GetNetworkProtocolsResponse or derived type identifier
class _tds__GetNetworkProtocolsResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains an array of defined protocols supported by the device. There are three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be retrieved for each protocol: port and enable/disable.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__NetworkProtocol* of length 0..unbounded.
    std::vector<tt__NetworkProtocol*   > NetworkProtocols               0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocols
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocols is a complexType.
///
/// @note class _tds__SetNetworkProtocols operations:
/// - _tds__SetNetworkProtocols* soap_new__tds__SetNetworkProtocols(soap*) allocate and default initialize
/// - _tds__SetNetworkProtocols* soap_new__tds__SetNetworkProtocols(soap*, int num) allocate and default initialize an array
/// - _tds__SetNetworkProtocols* soap_new_req__tds__SetNetworkProtocols(soap*, ...) allocate, set required members
/// - _tds__SetNetworkProtocols* soap_new_set__tds__SetNetworkProtocols(soap*, ...) allocate, set all public members
/// - _tds__SetNetworkProtocols::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNetworkProtocols(soap*, _tds__SetNetworkProtocols*) deserialize from a stream
/// - int soap_write__tds__SetNetworkProtocols(soap*, _tds__SetNetworkProtocols*) serialize to a stream
/// - _tds__SetNetworkProtocols* _tds__SetNetworkProtocols::soap_dup(soap*) returns deep copy of _tds__SetNetworkProtocols, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNetworkProtocols::soap_del() deep deletes _tds__SetNetworkProtocols data members, use only after _tds__SetNetworkProtocols::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNetworkProtocols::soap_type() returns SOAP_TYPE__tds__SetNetworkProtocols or derived type identifier
class _tds__SetNetworkProtocols
{ public:
/// <PRE><BLOCKQUOTE>
///   Configures one or more defined network protocols supported by the device. There are currently three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be set for each protocol: port and enable/disable.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__NetworkProtocol* of length 1..unbounded.
    std::vector<tt__NetworkProtocol*   > NetworkProtocols               1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocolsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocolsResponse is a complexType.
///
/// @note class _tds__SetNetworkProtocolsResponse operations:
/// - _tds__SetNetworkProtocolsResponse* soap_new__tds__SetNetworkProtocolsResponse(soap*) allocate and default initialize
/// - _tds__SetNetworkProtocolsResponse* soap_new__tds__SetNetworkProtocolsResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetNetworkProtocolsResponse* soap_new_req__tds__SetNetworkProtocolsResponse(soap*, ...) allocate, set required members
/// - _tds__SetNetworkProtocolsResponse* soap_new_set__tds__SetNetworkProtocolsResponse(soap*, ...) allocate, set all public members
/// - _tds__SetNetworkProtocolsResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNetworkProtocolsResponse(soap*, _tds__SetNetworkProtocolsResponse*) deserialize from a stream
/// - int soap_write__tds__SetNetworkProtocolsResponse(soap*, _tds__SetNetworkProtocolsResponse*) serialize to a stream
/// - _tds__SetNetworkProtocolsResponse* _tds__SetNetworkProtocolsResponse::soap_dup(soap*) returns deep copy of _tds__SetNetworkProtocolsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNetworkProtocolsResponse::soap_del() deep deletes _tds__SetNetworkProtocolsResponse data members, use only after _tds__SetNetworkProtocolsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNetworkProtocolsResponse::soap_type() returns SOAP_TYPE__tds__SetNetworkProtocolsResponse or derived type identifier
class _tds__SetNetworkProtocolsResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGateway
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGateway is a complexType.
///
/// @note class _tds__GetNetworkDefaultGateway operations:
/// - _tds__GetNetworkDefaultGateway* soap_new__tds__GetNetworkDefaultGateway(soap*) allocate and default initialize
/// - _tds__GetNetworkDefaultGateway* soap_new__tds__GetNetworkDefaultGateway(soap*, int num) allocate and default initialize an array
/// - _tds__GetNetworkDefaultGateway* soap_new_req__tds__GetNetworkDefaultGateway(soap*, ...) allocate, set required members
/// - _tds__GetNetworkDefaultGateway* soap_new_set__tds__GetNetworkDefaultGateway(soap*, ...) allocate, set all public members
/// - _tds__GetNetworkDefaultGateway::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNetworkDefaultGateway(soap*, _tds__GetNetworkDefaultGateway*) deserialize from a stream
/// - int soap_write__tds__GetNetworkDefaultGateway(soap*, _tds__GetNetworkDefaultGateway*) serialize to a stream
/// - _tds__GetNetworkDefaultGateway* _tds__GetNetworkDefaultGateway::soap_dup(soap*) returns deep copy of _tds__GetNetworkDefaultGateway, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNetworkDefaultGateway::soap_del() deep deletes _tds__GetNetworkDefaultGateway data members, use only after _tds__GetNetworkDefaultGateway::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNetworkDefaultGateway::soap_type() returns SOAP_TYPE__tds__GetNetworkDefaultGateway or derived type identifier
class _tds__GetNetworkDefaultGateway
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGatewayResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGatewayResponse is a complexType.
///
/// @note class _tds__GetNetworkDefaultGatewayResponse operations:
/// - _tds__GetNetworkDefaultGatewayResponse* soap_new__tds__GetNetworkDefaultGatewayResponse(soap*) allocate and default initialize
/// - _tds__GetNetworkDefaultGatewayResponse* soap_new__tds__GetNetworkDefaultGatewayResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetNetworkDefaultGatewayResponse* soap_new_req__tds__GetNetworkDefaultGatewayResponse(soap*, ...) allocate, set required members
/// - _tds__GetNetworkDefaultGatewayResponse* soap_new_set__tds__GetNetworkDefaultGatewayResponse(soap*, ...) allocate, set all public members
/// - _tds__GetNetworkDefaultGatewayResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetNetworkDefaultGatewayResponse(soap*, _tds__GetNetworkDefaultGatewayResponse*) deserialize from a stream
/// - int soap_write__tds__GetNetworkDefaultGatewayResponse(soap*, _tds__GetNetworkDefaultGatewayResponse*) serialize to a stream
/// - _tds__GetNetworkDefaultGatewayResponse* _tds__GetNetworkDefaultGatewayResponse::soap_dup(soap*) returns deep copy of _tds__GetNetworkDefaultGatewayResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetNetworkDefaultGatewayResponse::soap_del() deep deletes _tds__GetNetworkDefaultGatewayResponse data members, use only after _tds__GetNetworkDefaultGatewayResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetNetworkDefaultGatewayResponse::soap_type() returns SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse or derived type identifier
class _tds__GetNetworkDefaultGatewayResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Gets the default IPv4 and IPv6 gateway settings from the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "NetworkGateway" of type "http://www.onvif.org/ver10/schema":NetworkGateway.
    tt__NetworkGateway*                  NetworkGateway                 1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGateway
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGateway is a complexType.
///
/// @note class _tds__SetNetworkDefaultGateway operations:
/// - _tds__SetNetworkDefaultGateway* soap_new__tds__SetNetworkDefaultGateway(soap*) allocate and default initialize
/// - _tds__SetNetworkDefaultGateway* soap_new__tds__SetNetworkDefaultGateway(soap*, int num) allocate and default initialize an array
/// - _tds__SetNetworkDefaultGateway* soap_new_req__tds__SetNetworkDefaultGateway(soap*, ...) allocate, set required members
/// - _tds__SetNetworkDefaultGateway* soap_new_set__tds__SetNetworkDefaultGateway(soap*, ...) allocate, set all public members
/// - _tds__SetNetworkDefaultGateway::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNetworkDefaultGateway(soap*, _tds__SetNetworkDefaultGateway*) deserialize from a stream
/// - int soap_write__tds__SetNetworkDefaultGateway(soap*, _tds__SetNetworkDefaultGateway*) serialize to a stream
/// - _tds__SetNetworkDefaultGateway* _tds__SetNetworkDefaultGateway::soap_dup(soap*) returns deep copy of _tds__SetNetworkDefaultGateway, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNetworkDefaultGateway::soap_del() deep deletes _tds__SetNetworkDefaultGateway data members, use only after _tds__SetNetworkDefaultGateway::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNetworkDefaultGateway::soap_type() returns SOAP_TYPE__tds__SetNetworkDefaultGateway or derived type identifier
class _tds__SetNetworkDefaultGateway
{ public:
/// <PRE><BLOCKQUOTE>
///   Sets IPv4 gateway address used as default setting.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPv4Address of length 0..unbounded.
    std::vector<tt__IPv4Address        > IPv4Address                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Sets IPv6 gateway address used as default setting.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPv6Address of length 0..unbounded.
    std::vector<tt__IPv6Address        > IPv6Address                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGatewayResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGatewayResponse is a complexType.
///
/// @note class _tds__SetNetworkDefaultGatewayResponse operations:
/// - _tds__SetNetworkDefaultGatewayResponse* soap_new__tds__SetNetworkDefaultGatewayResponse(soap*) allocate and default initialize
/// - _tds__SetNetworkDefaultGatewayResponse* soap_new__tds__SetNetworkDefaultGatewayResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetNetworkDefaultGatewayResponse* soap_new_req__tds__SetNetworkDefaultGatewayResponse(soap*, ...) allocate, set required members
/// - _tds__SetNetworkDefaultGatewayResponse* soap_new_set__tds__SetNetworkDefaultGatewayResponse(soap*, ...) allocate, set all public members
/// - _tds__SetNetworkDefaultGatewayResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetNetworkDefaultGatewayResponse(soap*, _tds__SetNetworkDefaultGatewayResponse*) deserialize from a stream
/// - int soap_write__tds__SetNetworkDefaultGatewayResponse(soap*, _tds__SetNetworkDefaultGatewayResponse*) serialize to a stream
/// - _tds__SetNetworkDefaultGatewayResponse* _tds__SetNetworkDefaultGatewayResponse::soap_dup(soap*) returns deep copy of _tds__SetNetworkDefaultGatewayResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetNetworkDefaultGatewayResponse::soap_del() deep deletes _tds__SetNetworkDefaultGatewayResponse data members, use only after _tds__SetNetworkDefaultGatewayResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetNetworkDefaultGatewayResponse::soap_type() returns SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse or derived type identifier
class _tds__SetNetworkDefaultGatewayResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetZeroConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetZeroConfiguration is a complexType.
///
/// @note class _tds__GetZeroConfiguration operations:
/// - _tds__GetZeroConfiguration* soap_new__tds__GetZeroConfiguration(soap*) allocate and default initialize
/// - _tds__GetZeroConfiguration* soap_new__tds__GetZeroConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__GetZeroConfiguration* soap_new_req__tds__GetZeroConfiguration(soap*, ...) allocate, set required members
/// - _tds__GetZeroConfiguration* soap_new_set__tds__GetZeroConfiguration(soap*, ...) allocate, set all public members
/// - _tds__GetZeroConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetZeroConfiguration(soap*, _tds__GetZeroConfiguration*) deserialize from a stream
/// - int soap_write__tds__GetZeroConfiguration(soap*, _tds__GetZeroConfiguration*) serialize to a stream
/// - _tds__GetZeroConfiguration* _tds__GetZeroConfiguration::soap_dup(soap*) returns deep copy of _tds__GetZeroConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetZeroConfiguration::soap_del() deep deletes _tds__GetZeroConfiguration data members, use only after _tds__GetZeroConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetZeroConfiguration::soap_type() returns SOAP_TYPE__tds__GetZeroConfiguration or derived type identifier
class _tds__GetZeroConfiguration
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetZeroConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetZeroConfigurationResponse is a complexType.
///
/// @note class _tds__GetZeroConfigurationResponse operations:
/// - _tds__GetZeroConfigurationResponse* soap_new__tds__GetZeroConfigurationResponse(soap*) allocate and default initialize
/// - _tds__GetZeroConfigurationResponse* soap_new__tds__GetZeroConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetZeroConfigurationResponse* soap_new_req__tds__GetZeroConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__GetZeroConfigurationResponse* soap_new_set__tds__GetZeroConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__GetZeroConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetZeroConfigurationResponse(soap*, _tds__GetZeroConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__GetZeroConfigurationResponse(soap*, _tds__GetZeroConfigurationResponse*) serialize to a stream
/// - _tds__GetZeroConfigurationResponse* _tds__GetZeroConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__GetZeroConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetZeroConfigurationResponse::soap_del() deep deletes _tds__GetZeroConfigurationResponse data members, use only after _tds__GetZeroConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetZeroConfigurationResponse::soap_type() returns SOAP_TYPE__tds__GetZeroConfigurationResponse or derived type identifier
class _tds__GetZeroConfigurationResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the zero-configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZeroConfiguration" of type "http://www.onvif.org/ver10/schema":NetworkZeroConfiguration.
    tt__NetworkZeroConfiguration*        ZeroConfiguration              1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetZeroConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetZeroConfiguration is a complexType.
///
/// @note class _tds__SetZeroConfiguration operations:
/// - _tds__SetZeroConfiguration* soap_new__tds__SetZeroConfiguration(soap*) allocate and default initialize
/// - _tds__SetZeroConfiguration* soap_new__tds__SetZeroConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__SetZeroConfiguration* soap_new_req__tds__SetZeroConfiguration(soap*, ...) allocate, set required members
/// - _tds__SetZeroConfiguration* soap_new_set__tds__SetZeroConfiguration(soap*, ...) allocate, set all public members
/// - _tds__SetZeroConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetZeroConfiguration(soap*, _tds__SetZeroConfiguration*) deserialize from a stream
/// - int soap_write__tds__SetZeroConfiguration(soap*, _tds__SetZeroConfiguration*) serialize to a stream
/// - _tds__SetZeroConfiguration* _tds__SetZeroConfiguration::soap_dup(soap*) returns deep copy of _tds__SetZeroConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetZeroConfiguration::soap_del() deep deletes _tds__SetZeroConfiguration data members, use only after _tds__SetZeroConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetZeroConfiguration::soap_type() returns SOAP_TYPE__tds__SetZeroConfiguration or derived type identifier
class _tds__SetZeroConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical interface.
/// </BLOCKQUOTE></PRE>
///
/// Element "InterfaceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Specifies if the zero-configuration should be enabled or not.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetZeroConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetZeroConfigurationResponse is a complexType.
///
/// @note class _tds__SetZeroConfigurationResponse operations:
/// - _tds__SetZeroConfigurationResponse* soap_new__tds__SetZeroConfigurationResponse(soap*) allocate and default initialize
/// - _tds__SetZeroConfigurationResponse* soap_new__tds__SetZeroConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetZeroConfigurationResponse* soap_new_req__tds__SetZeroConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__SetZeroConfigurationResponse* soap_new_set__tds__SetZeroConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__SetZeroConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetZeroConfigurationResponse(soap*, _tds__SetZeroConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__SetZeroConfigurationResponse(soap*, _tds__SetZeroConfigurationResponse*) serialize to a stream
/// - _tds__SetZeroConfigurationResponse* _tds__SetZeroConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__SetZeroConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetZeroConfigurationResponse::soap_del() deep deletes _tds__SetZeroConfigurationResponse data members, use only after _tds__SetZeroConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetZeroConfigurationResponse::soap_type() returns SOAP_TYPE__tds__SetZeroConfigurationResponse or derived type identifier
class _tds__SetZeroConfigurationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilter is a complexType.
///
/// @note class _tds__GetIPAddressFilter operations:
/// - _tds__GetIPAddressFilter* soap_new__tds__GetIPAddressFilter(soap*) allocate and default initialize
/// - _tds__GetIPAddressFilter* soap_new__tds__GetIPAddressFilter(soap*, int num) allocate and default initialize an array
/// - _tds__GetIPAddressFilter* soap_new_req__tds__GetIPAddressFilter(soap*, ...) allocate, set required members
/// - _tds__GetIPAddressFilter* soap_new_set__tds__GetIPAddressFilter(soap*, ...) allocate, set all public members
/// - _tds__GetIPAddressFilter::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetIPAddressFilter(soap*, _tds__GetIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__GetIPAddressFilter(soap*, _tds__GetIPAddressFilter*) serialize to a stream
/// - _tds__GetIPAddressFilter* _tds__GetIPAddressFilter::soap_dup(soap*) returns deep copy of _tds__GetIPAddressFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetIPAddressFilter::soap_del() deep deletes _tds__GetIPAddressFilter data members, use only after _tds__GetIPAddressFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetIPAddressFilter::soap_type() returns SOAP_TYPE__tds__GetIPAddressFilter or derived type identifier
class _tds__GetIPAddressFilter
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilterResponse is a complexType.
///
/// @note class _tds__GetIPAddressFilterResponse operations:
/// - _tds__GetIPAddressFilterResponse* soap_new__tds__GetIPAddressFilterResponse(soap*) allocate and default initialize
/// - _tds__GetIPAddressFilterResponse* soap_new__tds__GetIPAddressFilterResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetIPAddressFilterResponse* soap_new_req__tds__GetIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - _tds__GetIPAddressFilterResponse* soap_new_set__tds__GetIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - _tds__GetIPAddressFilterResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetIPAddressFilterResponse(soap*, _tds__GetIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__GetIPAddressFilterResponse(soap*, _tds__GetIPAddressFilterResponse*) serialize to a stream
/// - _tds__GetIPAddressFilterResponse* _tds__GetIPAddressFilterResponse::soap_dup(soap*) returns deep copy of _tds__GetIPAddressFilterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetIPAddressFilterResponse::soap_del() deep deletes _tds__GetIPAddressFilterResponse data members, use only after _tds__GetIPAddressFilterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetIPAddressFilterResponse::soap_type() returns SOAP_TYPE__tds__GetIPAddressFilterResponse or derived type identifier
class _tds__GetIPAddressFilterResponse
{ public:
/// Element "IPAddressFilter" of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilter is a complexType.
///
/// @note class _tds__SetIPAddressFilter operations:
/// - _tds__SetIPAddressFilter* soap_new__tds__SetIPAddressFilter(soap*) allocate and default initialize
/// - _tds__SetIPAddressFilter* soap_new__tds__SetIPAddressFilter(soap*, int num) allocate and default initialize an array
/// - _tds__SetIPAddressFilter* soap_new_req__tds__SetIPAddressFilter(soap*, ...) allocate, set required members
/// - _tds__SetIPAddressFilter* soap_new_set__tds__SetIPAddressFilter(soap*, ...) allocate, set all public members
/// - _tds__SetIPAddressFilter::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetIPAddressFilter(soap*, _tds__SetIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__SetIPAddressFilter(soap*, _tds__SetIPAddressFilter*) serialize to a stream
/// - _tds__SetIPAddressFilter* _tds__SetIPAddressFilter::soap_dup(soap*) returns deep copy of _tds__SetIPAddressFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetIPAddressFilter::soap_del() deep deletes _tds__SetIPAddressFilter data members, use only after _tds__SetIPAddressFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetIPAddressFilter::soap_type() returns SOAP_TYPE__tds__SetIPAddressFilter or derived type identifier
class _tds__SetIPAddressFilter
{ public:
/// Element "IPAddressFilter" of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilterResponse is a complexType.
///
/// @note class _tds__SetIPAddressFilterResponse operations:
/// - _tds__SetIPAddressFilterResponse* soap_new__tds__SetIPAddressFilterResponse(soap*) allocate and default initialize
/// - _tds__SetIPAddressFilterResponse* soap_new__tds__SetIPAddressFilterResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetIPAddressFilterResponse* soap_new_req__tds__SetIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - _tds__SetIPAddressFilterResponse* soap_new_set__tds__SetIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - _tds__SetIPAddressFilterResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetIPAddressFilterResponse(soap*, _tds__SetIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__SetIPAddressFilterResponse(soap*, _tds__SetIPAddressFilterResponse*) serialize to a stream
/// - _tds__SetIPAddressFilterResponse* _tds__SetIPAddressFilterResponse::soap_dup(soap*) returns deep copy of _tds__SetIPAddressFilterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetIPAddressFilterResponse::soap_del() deep deletes _tds__SetIPAddressFilterResponse data members, use only after _tds__SetIPAddressFilterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetIPAddressFilterResponse::soap_type() returns SOAP_TYPE__tds__SetIPAddressFilterResponse or derived type identifier
class _tds__SetIPAddressFilterResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilter is a complexType.
///
/// @note class _tds__AddIPAddressFilter operations:
/// - _tds__AddIPAddressFilter* soap_new__tds__AddIPAddressFilter(soap*) allocate and default initialize
/// - _tds__AddIPAddressFilter* soap_new__tds__AddIPAddressFilter(soap*, int num) allocate and default initialize an array
/// - _tds__AddIPAddressFilter* soap_new_req__tds__AddIPAddressFilter(soap*, ...) allocate, set required members
/// - _tds__AddIPAddressFilter* soap_new_set__tds__AddIPAddressFilter(soap*, ...) allocate, set all public members
/// - _tds__AddIPAddressFilter::soap_default(soap*) default initialize members
/// - int soap_read__tds__AddIPAddressFilter(soap*, _tds__AddIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__AddIPAddressFilter(soap*, _tds__AddIPAddressFilter*) serialize to a stream
/// - _tds__AddIPAddressFilter* _tds__AddIPAddressFilter::soap_dup(soap*) returns deep copy of _tds__AddIPAddressFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__AddIPAddressFilter::soap_del() deep deletes _tds__AddIPAddressFilter data members, use only after _tds__AddIPAddressFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__AddIPAddressFilter::soap_type() returns SOAP_TYPE__tds__AddIPAddressFilter or derived type identifier
class _tds__AddIPAddressFilter
{ public:
/// Element "IPAddressFilter" of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilterResponse is a complexType.
///
/// @note class _tds__AddIPAddressFilterResponse operations:
/// - _tds__AddIPAddressFilterResponse* soap_new__tds__AddIPAddressFilterResponse(soap*) allocate and default initialize
/// - _tds__AddIPAddressFilterResponse* soap_new__tds__AddIPAddressFilterResponse(soap*, int num) allocate and default initialize an array
/// - _tds__AddIPAddressFilterResponse* soap_new_req__tds__AddIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - _tds__AddIPAddressFilterResponse* soap_new_set__tds__AddIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - _tds__AddIPAddressFilterResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__AddIPAddressFilterResponse(soap*, _tds__AddIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__AddIPAddressFilterResponse(soap*, _tds__AddIPAddressFilterResponse*) serialize to a stream
/// - _tds__AddIPAddressFilterResponse* _tds__AddIPAddressFilterResponse::soap_dup(soap*) returns deep copy of _tds__AddIPAddressFilterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__AddIPAddressFilterResponse::soap_del() deep deletes _tds__AddIPAddressFilterResponse data members, use only after _tds__AddIPAddressFilterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__AddIPAddressFilterResponse::soap_type() returns SOAP_TYPE__tds__AddIPAddressFilterResponse or derived type identifier
class _tds__AddIPAddressFilterResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilter is a complexType.
///
/// @note class _tds__RemoveIPAddressFilter operations:
/// - _tds__RemoveIPAddressFilter* soap_new__tds__RemoveIPAddressFilter(soap*) allocate and default initialize
/// - _tds__RemoveIPAddressFilter* soap_new__tds__RemoveIPAddressFilter(soap*, int num) allocate and default initialize an array
/// - _tds__RemoveIPAddressFilter* soap_new_req__tds__RemoveIPAddressFilter(soap*, ...) allocate, set required members
/// - _tds__RemoveIPAddressFilter* soap_new_set__tds__RemoveIPAddressFilter(soap*, ...) allocate, set all public members
/// - _tds__RemoveIPAddressFilter::soap_default(soap*) default initialize members
/// - int soap_read__tds__RemoveIPAddressFilter(soap*, _tds__RemoveIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__RemoveIPAddressFilter(soap*, _tds__RemoveIPAddressFilter*) serialize to a stream
/// - _tds__RemoveIPAddressFilter* _tds__RemoveIPAddressFilter::soap_dup(soap*) returns deep copy of _tds__RemoveIPAddressFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__RemoveIPAddressFilter::soap_del() deep deletes _tds__RemoveIPAddressFilter data members, use only after _tds__RemoveIPAddressFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__RemoveIPAddressFilter::soap_type() returns SOAP_TYPE__tds__RemoveIPAddressFilter or derived type identifier
class _tds__RemoveIPAddressFilter
{ public:
/// Element "IPAddressFilter" of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilterResponse is a complexType.
///
/// @note class _tds__RemoveIPAddressFilterResponse operations:
/// - _tds__RemoveIPAddressFilterResponse* soap_new__tds__RemoveIPAddressFilterResponse(soap*) allocate and default initialize
/// - _tds__RemoveIPAddressFilterResponse* soap_new__tds__RemoveIPAddressFilterResponse(soap*, int num) allocate and default initialize an array
/// - _tds__RemoveIPAddressFilterResponse* soap_new_req__tds__RemoveIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - _tds__RemoveIPAddressFilterResponse* soap_new_set__tds__RemoveIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - _tds__RemoveIPAddressFilterResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__RemoveIPAddressFilterResponse(soap*, _tds__RemoveIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__RemoveIPAddressFilterResponse(soap*, _tds__RemoveIPAddressFilterResponse*) serialize to a stream
/// - _tds__RemoveIPAddressFilterResponse* _tds__RemoveIPAddressFilterResponse::soap_dup(soap*) returns deep copy of _tds__RemoveIPAddressFilterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__RemoveIPAddressFilterResponse::soap_del() deep deletes _tds__RemoveIPAddressFilterResponse data members, use only after _tds__RemoveIPAddressFilterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__RemoveIPAddressFilterResponse::soap_type() returns SOAP_TYPE__tds__RemoveIPAddressFilterResponse or derived type identifier
class _tds__RemoveIPAddressFilterResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicy
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicy is a complexType.
///
/// @note class _tds__GetAccessPolicy operations:
/// - _tds__GetAccessPolicy* soap_new__tds__GetAccessPolicy(soap*) allocate and default initialize
/// - _tds__GetAccessPolicy* soap_new__tds__GetAccessPolicy(soap*, int num) allocate and default initialize an array
/// - _tds__GetAccessPolicy* soap_new_req__tds__GetAccessPolicy(soap*, ...) allocate, set required members
/// - _tds__GetAccessPolicy* soap_new_set__tds__GetAccessPolicy(soap*, ...) allocate, set all public members
/// - _tds__GetAccessPolicy::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetAccessPolicy(soap*, _tds__GetAccessPolicy*) deserialize from a stream
/// - int soap_write__tds__GetAccessPolicy(soap*, _tds__GetAccessPolicy*) serialize to a stream
/// - _tds__GetAccessPolicy* _tds__GetAccessPolicy::soap_dup(soap*) returns deep copy of _tds__GetAccessPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetAccessPolicy::soap_del() deep deletes _tds__GetAccessPolicy data members, use only after _tds__GetAccessPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetAccessPolicy::soap_type() returns SOAP_TYPE__tds__GetAccessPolicy or derived type identifier
class _tds__GetAccessPolicy
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicyResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicyResponse is a complexType.
///
/// @note class _tds__GetAccessPolicyResponse operations:
/// - _tds__GetAccessPolicyResponse* soap_new__tds__GetAccessPolicyResponse(soap*) allocate and default initialize
/// - _tds__GetAccessPolicyResponse* soap_new__tds__GetAccessPolicyResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetAccessPolicyResponse* soap_new_req__tds__GetAccessPolicyResponse(soap*, ...) allocate, set required members
/// - _tds__GetAccessPolicyResponse* soap_new_set__tds__GetAccessPolicyResponse(soap*, ...) allocate, set all public members
/// - _tds__GetAccessPolicyResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetAccessPolicyResponse(soap*, _tds__GetAccessPolicyResponse*) deserialize from a stream
/// - int soap_write__tds__GetAccessPolicyResponse(soap*, _tds__GetAccessPolicyResponse*) serialize to a stream
/// - _tds__GetAccessPolicyResponse* _tds__GetAccessPolicyResponse::soap_dup(soap*) returns deep copy of _tds__GetAccessPolicyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetAccessPolicyResponse::soap_del() deep deletes _tds__GetAccessPolicyResponse data members, use only after _tds__GetAccessPolicyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetAccessPolicyResponse::soap_type() returns SOAP_TYPE__tds__GetAccessPolicyResponse or derived type identifier
class _tds__GetAccessPolicyResponse
{ public:
/// Element "PolicyFile" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      PolicyFile                     1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicy
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicy is a complexType.
///
/// @note class _tds__SetAccessPolicy operations:
/// - _tds__SetAccessPolicy* soap_new__tds__SetAccessPolicy(soap*) allocate and default initialize
/// - _tds__SetAccessPolicy* soap_new__tds__SetAccessPolicy(soap*, int num) allocate and default initialize an array
/// - _tds__SetAccessPolicy* soap_new_req__tds__SetAccessPolicy(soap*, ...) allocate, set required members
/// - _tds__SetAccessPolicy* soap_new_set__tds__SetAccessPolicy(soap*, ...) allocate, set all public members
/// - _tds__SetAccessPolicy::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetAccessPolicy(soap*, _tds__SetAccessPolicy*) deserialize from a stream
/// - int soap_write__tds__SetAccessPolicy(soap*, _tds__SetAccessPolicy*) serialize to a stream
/// - _tds__SetAccessPolicy* _tds__SetAccessPolicy::soap_dup(soap*) returns deep copy of _tds__SetAccessPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetAccessPolicy::soap_del() deep deletes _tds__SetAccessPolicy data members, use only after _tds__SetAccessPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetAccessPolicy::soap_type() returns SOAP_TYPE__tds__SetAccessPolicy or derived type identifier
class _tds__SetAccessPolicy
{ public:
/// Element "PolicyFile" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      PolicyFile                     1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicyResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicyResponse is a complexType.
///
/// @note class _tds__SetAccessPolicyResponse operations:
/// - _tds__SetAccessPolicyResponse* soap_new__tds__SetAccessPolicyResponse(soap*) allocate and default initialize
/// - _tds__SetAccessPolicyResponse* soap_new__tds__SetAccessPolicyResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetAccessPolicyResponse* soap_new_req__tds__SetAccessPolicyResponse(soap*, ...) allocate, set required members
/// - _tds__SetAccessPolicyResponse* soap_new_set__tds__SetAccessPolicyResponse(soap*, ...) allocate, set all public members
/// - _tds__SetAccessPolicyResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetAccessPolicyResponse(soap*, _tds__SetAccessPolicyResponse*) deserialize from a stream
/// - int soap_write__tds__SetAccessPolicyResponse(soap*, _tds__SetAccessPolicyResponse*) serialize to a stream
/// - _tds__SetAccessPolicyResponse* _tds__SetAccessPolicyResponse::soap_dup(soap*) returns deep copy of _tds__SetAccessPolicyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetAccessPolicyResponse::soap_del() deep deletes _tds__SetAccessPolicyResponse data members, use only after _tds__SetAccessPolicyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetAccessPolicyResponse::soap_type() returns SOAP_TYPE__tds__SetAccessPolicyResponse or derived type identifier
class _tds__SetAccessPolicyResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateCertificate
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateCertificate is a complexType.
///
/// @note class _tds__CreateCertificate operations:
/// - _tds__CreateCertificate* soap_new__tds__CreateCertificate(soap*) allocate and default initialize
/// - _tds__CreateCertificate* soap_new__tds__CreateCertificate(soap*, int num) allocate and default initialize an array
/// - _tds__CreateCertificate* soap_new_req__tds__CreateCertificate(soap*, ...) allocate, set required members
/// - _tds__CreateCertificate* soap_new_set__tds__CreateCertificate(soap*, ...) allocate, set all public members
/// - _tds__CreateCertificate::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateCertificate(soap*, _tds__CreateCertificate*) deserialize from a stream
/// - int soap_write__tds__CreateCertificate(soap*, _tds__CreateCertificate*) serialize to a stream
/// - _tds__CreateCertificate* _tds__CreateCertificate::soap_dup(soap*) returns deep copy of _tds__CreateCertificate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateCertificate::soap_del() deep deletes _tds__CreateCertificate data members, use only after _tds__CreateCertificate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateCertificate::soap_type() returns SOAP_TYPE__tds__CreateCertificate or derived type identifier
class _tds__CreateCertificate
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
///
/// Element "CertificateID" of type xs:token.
    xsd__token*                          CertificateID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identification of the entity associated with the public-key.
/// </BLOCKQUOTE></PRE>
///
/// Element "Subject" of type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Certificate validity start date.
/// </BLOCKQUOTE></PRE>
///
/// Element "ValidNotBefore" of type xs:dateTime.
    xsd__dateTime*                       ValidNotBefore                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Certificate expiry start date.
/// </BLOCKQUOTE></PRE>
///
/// Element "ValidNotAfter" of type xs:dateTime.
    xsd__dateTime*                       ValidNotAfter                  0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateCertificateResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateCertificateResponse is a complexType.
///
/// @note class _tds__CreateCertificateResponse operations:
/// - _tds__CreateCertificateResponse* soap_new__tds__CreateCertificateResponse(soap*) allocate and default initialize
/// - _tds__CreateCertificateResponse* soap_new__tds__CreateCertificateResponse(soap*, int num) allocate and default initialize an array
/// - _tds__CreateCertificateResponse* soap_new_req__tds__CreateCertificateResponse(soap*, ...) allocate, set required members
/// - _tds__CreateCertificateResponse* soap_new_set__tds__CreateCertificateResponse(soap*, ...) allocate, set all public members
/// - _tds__CreateCertificateResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateCertificateResponse(soap*, _tds__CreateCertificateResponse*) deserialize from a stream
/// - int soap_write__tds__CreateCertificateResponse(soap*, _tds__CreateCertificateResponse*) serialize to a stream
/// - _tds__CreateCertificateResponse* _tds__CreateCertificateResponse::soap_dup(soap*) returns deep copy of _tds__CreateCertificateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateCertificateResponse::soap_del() deep deletes _tds__CreateCertificateResponse data members, use only after _tds__CreateCertificateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateCertificateResponse::soap_type() returns SOAP_TYPE__tds__CreateCertificateResponse or derived type identifier
class _tds__CreateCertificateResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
///
/// Element "NvtCertificate" of type "http://www.onvif.org/ver10/schema":Certificate.
    tt__Certificate*                     NvtCertificate                 1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificates is a complexType.
///
/// @note class _tds__GetCertificates operations:
/// - _tds__GetCertificates* soap_new__tds__GetCertificates(soap*) allocate and default initialize
/// - _tds__GetCertificates* soap_new__tds__GetCertificates(soap*, int num) allocate and default initialize an array
/// - _tds__GetCertificates* soap_new_req__tds__GetCertificates(soap*, ...) allocate, set required members
/// - _tds__GetCertificates* soap_new_set__tds__GetCertificates(soap*, ...) allocate, set all public members
/// - _tds__GetCertificates::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCertificates(soap*, _tds__GetCertificates*) deserialize from a stream
/// - int soap_write__tds__GetCertificates(soap*, _tds__GetCertificates*) serialize to a stream
/// - _tds__GetCertificates* _tds__GetCertificates::soap_dup(soap*) returns deep copy of _tds__GetCertificates, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCertificates::soap_del() deep deletes _tds__GetCertificates data members, use only after _tds__GetCertificates::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCertificates::soap_type() returns SOAP_TYPE__tds__GetCertificates or derived type identifier
class _tds__GetCertificates
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificatesResponse is a complexType.
///
/// @note class _tds__GetCertificatesResponse operations:
/// - _tds__GetCertificatesResponse* soap_new__tds__GetCertificatesResponse(soap*) allocate and default initialize
/// - _tds__GetCertificatesResponse* soap_new__tds__GetCertificatesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetCertificatesResponse* soap_new_req__tds__GetCertificatesResponse(soap*, ...) allocate, set required members
/// - _tds__GetCertificatesResponse* soap_new_set__tds__GetCertificatesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetCertificatesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCertificatesResponse(soap*, _tds__GetCertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__GetCertificatesResponse(soap*, _tds__GetCertificatesResponse*) serialize to a stream
/// - _tds__GetCertificatesResponse* _tds__GetCertificatesResponse::soap_dup(soap*) returns deep copy of _tds__GetCertificatesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCertificatesResponse::soap_del() deep deletes _tds__GetCertificatesResponse data members, use only after _tds__GetCertificatesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCertificatesResponse::soap_type() returns SOAP_TYPE__tds__GetCertificatesResponse or derived type identifier
class _tds__GetCertificatesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Id and base64 encoded DER representation of all available certificates.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Certificate* of length 0..unbounded.
    std::vector<tt__Certificate*       > NvtCertificate                 0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatus
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatus is a complexType.
///
/// @note class _tds__GetCertificatesStatus operations:
/// - _tds__GetCertificatesStatus* soap_new__tds__GetCertificatesStatus(soap*) allocate and default initialize
/// - _tds__GetCertificatesStatus* soap_new__tds__GetCertificatesStatus(soap*, int num) allocate and default initialize an array
/// - _tds__GetCertificatesStatus* soap_new_req__tds__GetCertificatesStatus(soap*, ...) allocate, set required members
/// - _tds__GetCertificatesStatus* soap_new_set__tds__GetCertificatesStatus(soap*, ...) allocate, set all public members
/// - _tds__GetCertificatesStatus::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCertificatesStatus(soap*, _tds__GetCertificatesStatus*) deserialize from a stream
/// - int soap_write__tds__GetCertificatesStatus(soap*, _tds__GetCertificatesStatus*) serialize to a stream
/// - _tds__GetCertificatesStatus* _tds__GetCertificatesStatus::soap_dup(soap*) returns deep copy of _tds__GetCertificatesStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCertificatesStatus::soap_del() deep deletes _tds__GetCertificatesStatus data members, use only after _tds__GetCertificatesStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCertificatesStatus::soap_type() returns SOAP_TYPE__tds__GetCertificatesStatus or derived type identifier
class _tds__GetCertificatesStatus
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatusResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatusResponse is a complexType.
///
/// @note class _tds__GetCertificatesStatusResponse operations:
/// - _tds__GetCertificatesStatusResponse* soap_new__tds__GetCertificatesStatusResponse(soap*) allocate and default initialize
/// - _tds__GetCertificatesStatusResponse* soap_new__tds__GetCertificatesStatusResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetCertificatesStatusResponse* soap_new_req__tds__GetCertificatesStatusResponse(soap*, ...) allocate, set required members
/// - _tds__GetCertificatesStatusResponse* soap_new_set__tds__GetCertificatesStatusResponse(soap*, ...) allocate, set all public members
/// - _tds__GetCertificatesStatusResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCertificatesStatusResponse(soap*, _tds__GetCertificatesStatusResponse*) deserialize from a stream
/// - int soap_write__tds__GetCertificatesStatusResponse(soap*, _tds__GetCertificatesStatusResponse*) serialize to a stream
/// - _tds__GetCertificatesStatusResponse* _tds__GetCertificatesStatusResponse::soap_dup(soap*) returns deep copy of _tds__GetCertificatesStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCertificatesStatusResponse::soap_del() deep deletes _tds__GetCertificatesStatusResponse data members, use only after _tds__GetCertificatesStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCertificatesStatusResponse::soap_type() returns SOAP_TYPE__tds__GetCertificatesStatusResponse or derived type identifier
class _tds__GetCertificatesStatusResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if a certificate is used in an optional HTTPS configuration of the device.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__CertificateStatus* of length 0..unbounded.
    std::vector<tt__CertificateStatus* > CertificateStatus              0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatus
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatus is a complexType.
///
/// @note class _tds__SetCertificatesStatus operations:
/// - _tds__SetCertificatesStatus* soap_new__tds__SetCertificatesStatus(soap*) allocate and default initialize
/// - _tds__SetCertificatesStatus* soap_new__tds__SetCertificatesStatus(soap*, int num) allocate and default initialize an array
/// - _tds__SetCertificatesStatus* soap_new_req__tds__SetCertificatesStatus(soap*, ...) allocate, set required members
/// - _tds__SetCertificatesStatus* soap_new_set__tds__SetCertificatesStatus(soap*, ...) allocate, set all public members
/// - _tds__SetCertificatesStatus::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetCertificatesStatus(soap*, _tds__SetCertificatesStatus*) deserialize from a stream
/// - int soap_write__tds__SetCertificatesStatus(soap*, _tds__SetCertificatesStatus*) serialize to a stream
/// - _tds__SetCertificatesStatus* _tds__SetCertificatesStatus::soap_dup(soap*) returns deep copy of _tds__SetCertificatesStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetCertificatesStatus::soap_del() deep deletes _tds__SetCertificatesStatus data members, use only after _tds__SetCertificatesStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetCertificatesStatus::soap_type() returns SOAP_TYPE__tds__SetCertificatesStatus or derived type identifier
class _tds__SetCertificatesStatus
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__CertificateStatus* of length 0..unbounded.
    std::vector<tt__CertificateStatus* > CertificateStatus              0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatusResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatusResponse is a complexType.
///
/// @note class _tds__SetCertificatesStatusResponse operations:
/// - _tds__SetCertificatesStatusResponse* soap_new__tds__SetCertificatesStatusResponse(soap*) allocate and default initialize
/// - _tds__SetCertificatesStatusResponse* soap_new__tds__SetCertificatesStatusResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetCertificatesStatusResponse* soap_new_req__tds__SetCertificatesStatusResponse(soap*, ...) allocate, set required members
/// - _tds__SetCertificatesStatusResponse* soap_new_set__tds__SetCertificatesStatusResponse(soap*, ...) allocate, set all public members
/// - _tds__SetCertificatesStatusResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetCertificatesStatusResponse(soap*, _tds__SetCertificatesStatusResponse*) deserialize from a stream
/// - int soap_write__tds__SetCertificatesStatusResponse(soap*, _tds__SetCertificatesStatusResponse*) serialize to a stream
/// - _tds__SetCertificatesStatusResponse* _tds__SetCertificatesStatusResponse::soap_dup(soap*) returns deep copy of _tds__SetCertificatesStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetCertificatesStatusResponse::soap_del() deep deletes _tds__SetCertificatesStatusResponse data members, use only after _tds__SetCertificatesStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetCertificatesStatusResponse::soap_type() returns SOAP_TYPE__tds__SetCertificatesStatusResponse or derived type identifier
class _tds__SetCertificatesStatusResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteCertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteCertificates is a complexType.
///
/// @note class _tds__DeleteCertificates operations:
/// - _tds__DeleteCertificates* soap_new__tds__DeleteCertificates(soap*) allocate and default initialize
/// - _tds__DeleteCertificates* soap_new__tds__DeleteCertificates(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteCertificates* soap_new_req__tds__DeleteCertificates(soap*, ...) allocate, set required members
/// - _tds__DeleteCertificates* soap_new_set__tds__DeleteCertificates(soap*, ...) allocate, set all public members
/// - _tds__DeleteCertificates::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteCertificates(soap*, _tds__DeleteCertificates*) deserialize from a stream
/// - int soap_write__tds__DeleteCertificates(soap*, _tds__DeleteCertificates*) serialize to a stream
/// - _tds__DeleteCertificates* _tds__DeleteCertificates::soap_dup(soap*) returns deep copy of _tds__DeleteCertificates, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteCertificates::soap_del() deep deletes _tds__DeleteCertificates data members, use only after _tds__DeleteCertificates::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteCertificates::soap_type() returns SOAP_TYPE__tds__DeleteCertificates or derived type identifier
class _tds__DeleteCertificates
{ public:
/// <PRE><BLOCKQUOTE>
///   List of ids of certificates to delete.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__token of length 1..unbounded.
    std::vector<xsd__token             > CertificateID                  1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteCertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteCertificatesResponse is a complexType.
///
/// @note class _tds__DeleteCertificatesResponse operations:
/// - _tds__DeleteCertificatesResponse* soap_new__tds__DeleteCertificatesResponse(soap*) allocate and default initialize
/// - _tds__DeleteCertificatesResponse* soap_new__tds__DeleteCertificatesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteCertificatesResponse* soap_new_req__tds__DeleteCertificatesResponse(soap*, ...) allocate, set required members
/// - _tds__DeleteCertificatesResponse* soap_new_set__tds__DeleteCertificatesResponse(soap*, ...) allocate, set all public members
/// - _tds__DeleteCertificatesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteCertificatesResponse(soap*, _tds__DeleteCertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteCertificatesResponse(soap*, _tds__DeleteCertificatesResponse*) serialize to a stream
/// - _tds__DeleteCertificatesResponse* _tds__DeleteCertificatesResponse::soap_dup(soap*) returns deep copy of _tds__DeleteCertificatesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteCertificatesResponse::soap_del() deep deletes _tds__DeleteCertificatesResponse data members, use only after _tds__DeleteCertificatesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteCertificatesResponse::soap_type() returns SOAP_TYPE__tds__DeleteCertificatesResponse or derived type identifier
class _tds__DeleteCertificatesResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetPkcs10Request
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetPkcs10Request is a complexType.
///
/// @note class _tds__GetPkcs10Request operations:
/// - _tds__GetPkcs10Request* soap_new__tds__GetPkcs10Request(soap*) allocate and default initialize
/// - _tds__GetPkcs10Request* soap_new__tds__GetPkcs10Request(soap*, int num) allocate and default initialize an array
/// - _tds__GetPkcs10Request* soap_new_req__tds__GetPkcs10Request(soap*, ...) allocate, set required members
/// - _tds__GetPkcs10Request* soap_new_set__tds__GetPkcs10Request(soap*, ...) allocate, set all public members
/// - _tds__GetPkcs10Request::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetPkcs10Request(soap*, _tds__GetPkcs10Request*) deserialize from a stream
/// - int soap_write__tds__GetPkcs10Request(soap*, _tds__GetPkcs10Request*) serialize to a stream
/// - _tds__GetPkcs10Request* _tds__GetPkcs10Request::soap_dup(soap*) returns deep copy of _tds__GetPkcs10Request, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetPkcs10Request::soap_del() deep deletes _tds__GetPkcs10Request data members, use only after _tds__GetPkcs10Request::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetPkcs10Request::soap_type() returns SOAP_TYPE__tds__GetPkcs10Request or derived type identifier
class _tds__GetPkcs10Request
{ public:
/// <PRE><BLOCKQUOTE>
///   List of ids of certificates to delete.
/// </BLOCKQUOTE></PRE>
///
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Relative Dinstinguished Name(RDN) CommonName(CN).
/// </BLOCKQUOTE></PRE>
///
/// Element "Subject" of type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional base64 encoded DER attributes.
/// </BLOCKQUOTE></PRE>
///
/// Element "Attributes" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Attributes                     0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetPkcs10RequestResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetPkcs10RequestResponse is a complexType.
///
/// @note class _tds__GetPkcs10RequestResponse operations:
/// - _tds__GetPkcs10RequestResponse* soap_new__tds__GetPkcs10RequestResponse(soap*) allocate and default initialize
/// - _tds__GetPkcs10RequestResponse* soap_new__tds__GetPkcs10RequestResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetPkcs10RequestResponse* soap_new_req__tds__GetPkcs10RequestResponse(soap*, ...) allocate, set required members
/// - _tds__GetPkcs10RequestResponse* soap_new_set__tds__GetPkcs10RequestResponse(soap*, ...) allocate, set all public members
/// - _tds__GetPkcs10RequestResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetPkcs10RequestResponse(soap*, _tds__GetPkcs10RequestResponse*) deserialize from a stream
/// - int soap_write__tds__GetPkcs10RequestResponse(soap*, _tds__GetPkcs10RequestResponse*) serialize to a stream
/// - _tds__GetPkcs10RequestResponse* _tds__GetPkcs10RequestResponse::soap_dup(soap*) returns deep copy of _tds__GetPkcs10RequestResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetPkcs10RequestResponse::soap_del() deep deletes _tds__GetPkcs10RequestResponse data members, use only after _tds__GetPkcs10RequestResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetPkcs10RequestResponse::soap_type() returns SOAP_TYPE__tds__GetPkcs10RequestResponse or derived type identifier
class _tds__GetPkcs10RequestResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
///
/// Element "Pkcs10Request" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Pkcs10Request                  1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificates is a complexType.
///
/// @note class _tds__LoadCertificates operations:
/// - _tds__LoadCertificates* soap_new__tds__LoadCertificates(soap*) allocate and default initialize
/// - _tds__LoadCertificates* soap_new__tds__LoadCertificates(soap*, int num) allocate and default initialize an array
/// - _tds__LoadCertificates* soap_new_req__tds__LoadCertificates(soap*, ...) allocate, set required members
/// - _tds__LoadCertificates* soap_new_set__tds__LoadCertificates(soap*, ...) allocate, set all public members
/// - _tds__LoadCertificates::soap_default(soap*) default initialize members
/// - int soap_read__tds__LoadCertificates(soap*, _tds__LoadCertificates*) deserialize from a stream
/// - int soap_write__tds__LoadCertificates(soap*, _tds__LoadCertificates*) serialize to a stream
/// - _tds__LoadCertificates* _tds__LoadCertificates::soap_dup(soap*) returns deep copy of _tds__LoadCertificates, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__LoadCertificates::soap_del() deep deletes _tds__LoadCertificates data members, use only after _tds__LoadCertificates::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__LoadCertificates::soap_type() returns SOAP_TYPE__tds__LoadCertificates or derived type identifier
class _tds__LoadCertificates
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional id and base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Certificate* of length 1..unbounded.
    std::vector<tt__Certificate*       > NVTCertificate                 1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificatesResponse is a complexType.
///
/// @note class _tds__LoadCertificatesResponse operations:
/// - _tds__LoadCertificatesResponse* soap_new__tds__LoadCertificatesResponse(soap*) allocate and default initialize
/// - _tds__LoadCertificatesResponse* soap_new__tds__LoadCertificatesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__LoadCertificatesResponse* soap_new_req__tds__LoadCertificatesResponse(soap*, ...) allocate, set required members
/// - _tds__LoadCertificatesResponse* soap_new_set__tds__LoadCertificatesResponse(soap*, ...) allocate, set all public members
/// - _tds__LoadCertificatesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__LoadCertificatesResponse(soap*, _tds__LoadCertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__LoadCertificatesResponse(soap*, _tds__LoadCertificatesResponse*) serialize to a stream
/// - _tds__LoadCertificatesResponse* _tds__LoadCertificatesResponse::soap_dup(soap*) returns deep copy of _tds__LoadCertificatesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__LoadCertificatesResponse::soap_del() deep deletes _tds__LoadCertificatesResponse data members, use only after _tds__LoadCertificatesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__LoadCertificatesResponse::soap_type() returns SOAP_TYPE__tds__LoadCertificatesResponse or derived type identifier
class _tds__LoadCertificatesResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateMode is a complexType.
///
/// @note class _tds__GetClientCertificateMode operations:
/// - _tds__GetClientCertificateMode* soap_new__tds__GetClientCertificateMode(soap*) allocate and default initialize
/// - _tds__GetClientCertificateMode* soap_new__tds__GetClientCertificateMode(soap*, int num) allocate and default initialize an array
/// - _tds__GetClientCertificateMode* soap_new_req__tds__GetClientCertificateMode(soap*, ...) allocate, set required members
/// - _tds__GetClientCertificateMode* soap_new_set__tds__GetClientCertificateMode(soap*, ...) allocate, set all public members
/// - _tds__GetClientCertificateMode::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetClientCertificateMode(soap*, _tds__GetClientCertificateMode*) deserialize from a stream
/// - int soap_write__tds__GetClientCertificateMode(soap*, _tds__GetClientCertificateMode*) serialize to a stream
/// - _tds__GetClientCertificateMode* _tds__GetClientCertificateMode::soap_dup(soap*) returns deep copy of _tds__GetClientCertificateMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetClientCertificateMode::soap_del() deep deletes _tds__GetClientCertificateMode data members, use only after _tds__GetClientCertificateMode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetClientCertificateMode::soap_type() returns SOAP_TYPE__tds__GetClientCertificateMode or derived type identifier
class _tds__GetClientCertificateMode
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateModeResponse is a complexType.
///
/// @note class _tds__GetClientCertificateModeResponse operations:
/// - _tds__GetClientCertificateModeResponse* soap_new__tds__GetClientCertificateModeResponse(soap*) allocate and default initialize
/// - _tds__GetClientCertificateModeResponse* soap_new__tds__GetClientCertificateModeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetClientCertificateModeResponse* soap_new_req__tds__GetClientCertificateModeResponse(soap*, ...) allocate, set required members
/// - _tds__GetClientCertificateModeResponse* soap_new_set__tds__GetClientCertificateModeResponse(soap*, ...) allocate, set all public members
/// - _tds__GetClientCertificateModeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetClientCertificateModeResponse(soap*, _tds__GetClientCertificateModeResponse*) deserialize from a stream
/// - int soap_write__tds__GetClientCertificateModeResponse(soap*, _tds__GetClientCertificateModeResponse*) serialize to a stream
/// - _tds__GetClientCertificateModeResponse* _tds__GetClientCertificateModeResponse::soap_dup(soap*) returns deep copy of _tds__GetClientCertificateModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetClientCertificateModeResponse::soap_del() deep deletes _tds__GetClientCertificateModeResponse data members, use only after _tds__GetClientCertificateModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetClientCertificateModeResponse::soap_type() returns SOAP_TYPE__tds__GetClientCertificateModeResponse or derived type identifier
class _tds__GetClientCertificateModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not client certificates are required by device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateMode is a complexType.
///
/// @note class _tds__SetClientCertificateMode operations:
/// - _tds__SetClientCertificateMode* soap_new__tds__SetClientCertificateMode(soap*) allocate and default initialize
/// - _tds__SetClientCertificateMode* soap_new__tds__SetClientCertificateMode(soap*, int num) allocate and default initialize an array
/// - _tds__SetClientCertificateMode* soap_new_req__tds__SetClientCertificateMode(soap*, ...) allocate, set required members
/// - _tds__SetClientCertificateMode* soap_new_set__tds__SetClientCertificateMode(soap*, ...) allocate, set all public members
/// - _tds__SetClientCertificateMode::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetClientCertificateMode(soap*, _tds__SetClientCertificateMode*) deserialize from a stream
/// - int soap_write__tds__SetClientCertificateMode(soap*, _tds__SetClientCertificateMode*) serialize to a stream
/// - _tds__SetClientCertificateMode* _tds__SetClientCertificateMode::soap_dup(soap*) returns deep copy of _tds__SetClientCertificateMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetClientCertificateMode::soap_del() deep deletes _tds__SetClientCertificateMode data members, use only after _tds__SetClientCertificateMode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetClientCertificateMode::soap_type() returns SOAP_TYPE__tds__SetClientCertificateMode or derived type identifier
class _tds__SetClientCertificateMode
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not client certificates are required by device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateModeResponse is a complexType.
///
/// @note class _tds__SetClientCertificateModeResponse operations:
/// - _tds__SetClientCertificateModeResponse* soap_new__tds__SetClientCertificateModeResponse(soap*) allocate and default initialize
/// - _tds__SetClientCertificateModeResponse* soap_new__tds__SetClientCertificateModeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetClientCertificateModeResponse* soap_new_req__tds__SetClientCertificateModeResponse(soap*, ...) allocate, set required members
/// - _tds__SetClientCertificateModeResponse* soap_new_set__tds__SetClientCertificateModeResponse(soap*, ...) allocate, set all public members
/// - _tds__SetClientCertificateModeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetClientCertificateModeResponse(soap*, _tds__SetClientCertificateModeResponse*) deserialize from a stream
/// - int soap_write__tds__SetClientCertificateModeResponse(soap*, _tds__SetClientCertificateModeResponse*) serialize to a stream
/// - _tds__SetClientCertificateModeResponse* _tds__SetClientCertificateModeResponse::soap_dup(soap*) returns deep copy of _tds__SetClientCertificateModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetClientCertificateModeResponse::soap_del() deep deletes _tds__SetClientCertificateModeResponse data members, use only after _tds__SetClientCertificateModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetClientCertificateModeResponse::soap_type() returns SOAP_TYPE__tds__SetClientCertificateModeResponse or derived type identifier
class _tds__SetClientCertificateModeResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCACertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCACertificates is a complexType.
///
/// @note class _tds__GetCACertificates operations:
/// - _tds__GetCACertificates* soap_new__tds__GetCACertificates(soap*) allocate and default initialize
/// - _tds__GetCACertificates* soap_new__tds__GetCACertificates(soap*, int num) allocate and default initialize an array
/// - _tds__GetCACertificates* soap_new_req__tds__GetCACertificates(soap*, ...) allocate, set required members
/// - _tds__GetCACertificates* soap_new_set__tds__GetCACertificates(soap*, ...) allocate, set all public members
/// - _tds__GetCACertificates::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCACertificates(soap*, _tds__GetCACertificates*) deserialize from a stream
/// - int soap_write__tds__GetCACertificates(soap*, _tds__GetCACertificates*) serialize to a stream
/// - _tds__GetCACertificates* _tds__GetCACertificates::soap_dup(soap*) returns deep copy of _tds__GetCACertificates, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCACertificates::soap_del() deep deletes _tds__GetCACertificates data members, use only after _tds__GetCACertificates::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCACertificates::soap_type() returns SOAP_TYPE__tds__GetCACertificates or derived type identifier
class _tds__GetCACertificates
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCACertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCACertificatesResponse is a complexType.
///
/// @note class _tds__GetCACertificatesResponse operations:
/// - _tds__GetCACertificatesResponse* soap_new__tds__GetCACertificatesResponse(soap*) allocate and default initialize
/// - _tds__GetCACertificatesResponse* soap_new__tds__GetCACertificatesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetCACertificatesResponse* soap_new_req__tds__GetCACertificatesResponse(soap*, ...) allocate, set required members
/// - _tds__GetCACertificatesResponse* soap_new_set__tds__GetCACertificatesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetCACertificatesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCACertificatesResponse(soap*, _tds__GetCACertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__GetCACertificatesResponse(soap*, _tds__GetCACertificatesResponse*) serialize to a stream
/// - _tds__GetCACertificatesResponse* _tds__GetCACertificatesResponse::soap_dup(soap*) returns deep copy of _tds__GetCACertificatesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCACertificatesResponse::soap_del() deep deletes _tds__GetCACertificatesResponse data members, use only after _tds__GetCACertificatesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCACertificatesResponse::soap_type() returns SOAP_TYPE__tds__GetCACertificatesResponse or derived type identifier
class _tds__GetCACertificatesResponse
{ public:
/// Vector of tt__Certificate* of length 0..unbounded.
    std::vector<tt__Certificate*       > CACertificate                  0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKey
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKey is a complexType.
///
/// @note class _tds__LoadCertificateWithPrivateKey operations:
/// - _tds__LoadCertificateWithPrivateKey* soap_new__tds__LoadCertificateWithPrivateKey(soap*) allocate and default initialize
/// - _tds__LoadCertificateWithPrivateKey* soap_new__tds__LoadCertificateWithPrivateKey(soap*, int num) allocate and default initialize an array
/// - _tds__LoadCertificateWithPrivateKey* soap_new_req__tds__LoadCertificateWithPrivateKey(soap*, ...) allocate, set required members
/// - _tds__LoadCertificateWithPrivateKey* soap_new_set__tds__LoadCertificateWithPrivateKey(soap*, ...) allocate, set all public members
/// - _tds__LoadCertificateWithPrivateKey::soap_default(soap*) default initialize members
/// - int soap_read__tds__LoadCertificateWithPrivateKey(soap*, _tds__LoadCertificateWithPrivateKey*) deserialize from a stream
/// - int soap_write__tds__LoadCertificateWithPrivateKey(soap*, _tds__LoadCertificateWithPrivateKey*) serialize to a stream
/// - _tds__LoadCertificateWithPrivateKey* _tds__LoadCertificateWithPrivateKey::soap_dup(soap*) returns deep copy of _tds__LoadCertificateWithPrivateKey, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__LoadCertificateWithPrivateKey::soap_del() deep deletes _tds__LoadCertificateWithPrivateKey data members, use only after _tds__LoadCertificateWithPrivateKey::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__LoadCertificateWithPrivateKey::soap_type() returns SOAP_TYPE__tds__LoadCertificateWithPrivateKey or derived type identifier
class _tds__LoadCertificateWithPrivateKey
{ public:
/// Vector of tt__CertificateWithPrivateKey* of length 1..unbounded.
    std::vector<tt__CertificateWithPrivateKey*> CertificateWithPrivateKey      1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKeyResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKeyResponse is a complexType.
///
/// @note class _tds__LoadCertificateWithPrivateKeyResponse operations:
/// - _tds__LoadCertificateWithPrivateKeyResponse* soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap*) allocate and default initialize
/// - _tds__LoadCertificateWithPrivateKeyResponse* soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap*, int num) allocate and default initialize an array
/// - _tds__LoadCertificateWithPrivateKeyResponse* soap_new_req__tds__LoadCertificateWithPrivateKeyResponse(soap*, ...) allocate, set required members
/// - _tds__LoadCertificateWithPrivateKeyResponse* soap_new_set__tds__LoadCertificateWithPrivateKeyResponse(soap*, ...) allocate, set all public members
/// - _tds__LoadCertificateWithPrivateKeyResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__LoadCertificateWithPrivateKeyResponse(soap*, _tds__LoadCertificateWithPrivateKeyResponse*) deserialize from a stream
/// - int soap_write__tds__LoadCertificateWithPrivateKeyResponse(soap*, _tds__LoadCertificateWithPrivateKeyResponse*) serialize to a stream
/// - _tds__LoadCertificateWithPrivateKeyResponse* _tds__LoadCertificateWithPrivateKeyResponse::soap_dup(soap*) returns deep copy of _tds__LoadCertificateWithPrivateKeyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__LoadCertificateWithPrivateKeyResponse::soap_del() deep deletes _tds__LoadCertificateWithPrivateKeyResponse data members, use only after _tds__LoadCertificateWithPrivateKeyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__LoadCertificateWithPrivateKeyResponse::soap_type() returns SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse or derived type identifier
class _tds__LoadCertificateWithPrivateKeyResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformation is a complexType.
///
/// @note class _tds__GetCertificateInformation operations:
/// - _tds__GetCertificateInformation* soap_new__tds__GetCertificateInformation(soap*) allocate and default initialize
/// - _tds__GetCertificateInformation* soap_new__tds__GetCertificateInformation(soap*, int num) allocate and default initialize an array
/// - _tds__GetCertificateInformation* soap_new_req__tds__GetCertificateInformation(soap*, ...) allocate, set required members
/// - _tds__GetCertificateInformation* soap_new_set__tds__GetCertificateInformation(soap*, ...) allocate, set all public members
/// - _tds__GetCertificateInformation::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCertificateInformation(soap*, _tds__GetCertificateInformation*) deserialize from a stream
/// - int soap_write__tds__GetCertificateInformation(soap*, _tds__GetCertificateInformation*) serialize to a stream
/// - _tds__GetCertificateInformation* _tds__GetCertificateInformation::soap_dup(soap*) returns deep copy of _tds__GetCertificateInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCertificateInformation::soap_del() deep deletes _tds__GetCertificateInformation data members, use only after _tds__GetCertificateInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCertificateInformation::soap_type() returns SOAP_TYPE__tds__GetCertificateInformation or derived type identifier
class _tds__GetCertificateInformation
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformationResponse is a complexType.
///
/// @note class _tds__GetCertificateInformationResponse operations:
/// - _tds__GetCertificateInformationResponse* soap_new__tds__GetCertificateInformationResponse(soap*) allocate and default initialize
/// - _tds__GetCertificateInformationResponse* soap_new__tds__GetCertificateInformationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetCertificateInformationResponse* soap_new_req__tds__GetCertificateInformationResponse(soap*, ...) allocate, set required members
/// - _tds__GetCertificateInformationResponse* soap_new_set__tds__GetCertificateInformationResponse(soap*, ...) allocate, set all public members
/// - _tds__GetCertificateInformationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetCertificateInformationResponse(soap*, _tds__GetCertificateInformationResponse*) deserialize from a stream
/// - int soap_write__tds__GetCertificateInformationResponse(soap*, _tds__GetCertificateInformationResponse*) serialize to a stream
/// - _tds__GetCertificateInformationResponse* _tds__GetCertificateInformationResponse::soap_dup(soap*) returns deep copy of _tds__GetCertificateInformationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetCertificateInformationResponse::soap_del() deep deletes _tds__GetCertificateInformationResponse data members, use only after _tds__GetCertificateInformationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetCertificateInformationResponse::soap_type() returns SOAP_TYPE__tds__GetCertificateInformationResponse or derived type identifier
class _tds__GetCertificateInformationResponse
{ public:
/// Element "CertificateInformation" of type "http://www.onvif.org/ver10/schema":CertificateInformation.
    tt__CertificateInformation*          CertificateInformation         1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCACertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCACertificates is a complexType.
///
/// @note class _tds__LoadCACertificates operations:
/// - _tds__LoadCACertificates* soap_new__tds__LoadCACertificates(soap*) allocate and default initialize
/// - _tds__LoadCACertificates* soap_new__tds__LoadCACertificates(soap*, int num) allocate and default initialize an array
/// - _tds__LoadCACertificates* soap_new_req__tds__LoadCACertificates(soap*, ...) allocate, set required members
/// - _tds__LoadCACertificates* soap_new_set__tds__LoadCACertificates(soap*, ...) allocate, set all public members
/// - _tds__LoadCACertificates::soap_default(soap*) default initialize members
/// - int soap_read__tds__LoadCACertificates(soap*, _tds__LoadCACertificates*) deserialize from a stream
/// - int soap_write__tds__LoadCACertificates(soap*, _tds__LoadCACertificates*) serialize to a stream
/// - _tds__LoadCACertificates* _tds__LoadCACertificates::soap_dup(soap*) returns deep copy of _tds__LoadCACertificates, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__LoadCACertificates::soap_del() deep deletes _tds__LoadCACertificates data members, use only after _tds__LoadCACertificates::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__LoadCACertificates::soap_type() returns SOAP_TYPE__tds__LoadCACertificates or derived type identifier
class _tds__LoadCACertificates
{ public:
/// Vector of tt__Certificate* of length 1..unbounded.
    std::vector<tt__Certificate*       > CACertificate                  1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCACertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCACertificatesResponse is a complexType.
///
/// @note class _tds__LoadCACertificatesResponse operations:
/// - _tds__LoadCACertificatesResponse* soap_new__tds__LoadCACertificatesResponse(soap*) allocate and default initialize
/// - _tds__LoadCACertificatesResponse* soap_new__tds__LoadCACertificatesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__LoadCACertificatesResponse* soap_new_req__tds__LoadCACertificatesResponse(soap*, ...) allocate, set required members
/// - _tds__LoadCACertificatesResponse* soap_new_set__tds__LoadCACertificatesResponse(soap*, ...) allocate, set all public members
/// - _tds__LoadCACertificatesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__LoadCACertificatesResponse(soap*, _tds__LoadCACertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__LoadCACertificatesResponse(soap*, _tds__LoadCACertificatesResponse*) serialize to a stream
/// - _tds__LoadCACertificatesResponse* _tds__LoadCACertificatesResponse::soap_dup(soap*) returns deep copy of _tds__LoadCACertificatesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__LoadCACertificatesResponse::soap_del() deep deletes _tds__LoadCACertificatesResponse data members, use only after _tds__LoadCACertificatesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__LoadCACertificatesResponse::soap_type() returns SOAP_TYPE__tds__LoadCACertificatesResponse or derived type identifier
class _tds__LoadCACertificatesResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfiguration is a complexType.
///
/// @note class _tds__CreateDot1XConfiguration operations:
/// - _tds__CreateDot1XConfiguration* soap_new__tds__CreateDot1XConfiguration(soap*) allocate and default initialize
/// - _tds__CreateDot1XConfiguration* soap_new__tds__CreateDot1XConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__CreateDot1XConfiguration* soap_new_req__tds__CreateDot1XConfiguration(soap*, ...) allocate, set required members
/// - _tds__CreateDot1XConfiguration* soap_new_set__tds__CreateDot1XConfiguration(soap*, ...) allocate, set all public members
/// - _tds__CreateDot1XConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateDot1XConfiguration(soap*, _tds__CreateDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__CreateDot1XConfiguration(soap*, _tds__CreateDot1XConfiguration*) serialize to a stream
/// - _tds__CreateDot1XConfiguration* _tds__CreateDot1XConfiguration::soap_dup(soap*) returns deep copy of _tds__CreateDot1XConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateDot1XConfiguration::soap_del() deep deletes _tds__CreateDot1XConfiguration data members, use only after _tds__CreateDot1XConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateDot1XConfiguration::soap_type() returns SOAP_TYPE__tds__CreateDot1XConfiguration or derived type identifier
class _tds__CreateDot1XConfiguration
{ public:
/// Element "Dot1XConfiguration" of type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    tt__Dot1XConfiguration*              Dot1XConfiguration             1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfigurationResponse is a complexType.
///
/// @note class _tds__CreateDot1XConfigurationResponse operations:
/// - _tds__CreateDot1XConfigurationResponse* soap_new__tds__CreateDot1XConfigurationResponse(soap*) allocate and default initialize
/// - _tds__CreateDot1XConfigurationResponse* soap_new__tds__CreateDot1XConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__CreateDot1XConfigurationResponse* soap_new_req__tds__CreateDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__CreateDot1XConfigurationResponse* soap_new_set__tds__CreateDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__CreateDot1XConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateDot1XConfigurationResponse(soap*, _tds__CreateDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__CreateDot1XConfigurationResponse(soap*, _tds__CreateDot1XConfigurationResponse*) serialize to a stream
/// - _tds__CreateDot1XConfigurationResponse* _tds__CreateDot1XConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__CreateDot1XConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateDot1XConfigurationResponse::soap_del() deep deletes _tds__CreateDot1XConfigurationResponse data members, use only after _tds__CreateDot1XConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateDot1XConfigurationResponse::soap_type() returns SOAP_TYPE__tds__CreateDot1XConfigurationResponse or derived type identifier
class _tds__CreateDot1XConfigurationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfiguration is a complexType.
///
/// @note class _tds__SetDot1XConfiguration operations:
/// - _tds__SetDot1XConfiguration* soap_new__tds__SetDot1XConfiguration(soap*) allocate and default initialize
/// - _tds__SetDot1XConfiguration* soap_new__tds__SetDot1XConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__SetDot1XConfiguration* soap_new_req__tds__SetDot1XConfiguration(soap*, ...) allocate, set required members
/// - _tds__SetDot1XConfiguration* soap_new_set__tds__SetDot1XConfiguration(soap*, ...) allocate, set all public members
/// - _tds__SetDot1XConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDot1XConfiguration(soap*, _tds__SetDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__SetDot1XConfiguration(soap*, _tds__SetDot1XConfiguration*) serialize to a stream
/// - _tds__SetDot1XConfiguration* _tds__SetDot1XConfiguration::soap_dup(soap*) returns deep copy of _tds__SetDot1XConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDot1XConfiguration::soap_del() deep deletes _tds__SetDot1XConfiguration data members, use only after _tds__SetDot1XConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDot1XConfiguration::soap_type() returns SOAP_TYPE__tds__SetDot1XConfiguration or derived type identifier
class _tds__SetDot1XConfiguration
{ public:
/// Element "Dot1XConfiguration" of type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    tt__Dot1XConfiguration*              Dot1XConfiguration             1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfigurationResponse is a complexType.
///
/// @note class _tds__SetDot1XConfigurationResponse operations:
/// - _tds__SetDot1XConfigurationResponse* soap_new__tds__SetDot1XConfigurationResponse(soap*) allocate and default initialize
/// - _tds__SetDot1XConfigurationResponse* soap_new__tds__SetDot1XConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetDot1XConfigurationResponse* soap_new_req__tds__SetDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__SetDot1XConfigurationResponse* soap_new_set__tds__SetDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__SetDot1XConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetDot1XConfigurationResponse(soap*, _tds__SetDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__SetDot1XConfigurationResponse(soap*, _tds__SetDot1XConfigurationResponse*) serialize to a stream
/// - _tds__SetDot1XConfigurationResponse* _tds__SetDot1XConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__SetDot1XConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetDot1XConfigurationResponse::soap_del() deep deletes _tds__SetDot1XConfigurationResponse data members, use only after _tds__SetDot1XConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetDot1XConfigurationResponse::soap_type() returns SOAP_TYPE__tds__SetDot1XConfigurationResponse or derived type identifier
class _tds__SetDot1XConfigurationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfiguration is a complexType.
///
/// @note class _tds__GetDot1XConfiguration operations:
/// - _tds__GetDot1XConfiguration* soap_new__tds__GetDot1XConfiguration(soap*) allocate and default initialize
/// - _tds__GetDot1XConfiguration* soap_new__tds__GetDot1XConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot1XConfiguration* soap_new_req__tds__GetDot1XConfiguration(soap*, ...) allocate, set required members
/// - _tds__GetDot1XConfiguration* soap_new_set__tds__GetDot1XConfiguration(soap*, ...) allocate, set all public members
/// - _tds__GetDot1XConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot1XConfiguration(soap*, _tds__GetDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfiguration(soap*, _tds__GetDot1XConfiguration*) serialize to a stream
/// - _tds__GetDot1XConfiguration* _tds__GetDot1XConfiguration::soap_dup(soap*) returns deep copy of _tds__GetDot1XConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot1XConfiguration::soap_del() deep deletes _tds__GetDot1XConfiguration data members, use only after _tds__GetDot1XConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot1XConfiguration::soap_type() returns SOAP_TYPE__tds__GetDot1XConfiguration or derived type identifier
class _tds__GetDot1XConfiguration
{ public:
/// Element "Dot1XConfigurationToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Dot1XConfigurationToken        1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationResponse is a complexType.
///
/// @note class _tds__GetDot1XConfigurationResponse operations:
/// - _tds__GetDot1XConfigurationResponse* soap_new__tds__GetDot1XConfigurationResponse(soap*) allocate and default initialize
/// - _tds__GetDot1XConfigurationResponse* soap_new__tds__GetDot1XConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot1XConfigurationResponse* soap_new_req__tds__GetDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__GetDot1XConfigurationResponse* soap_new_set__tds__GetDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDot1XConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot1XConfigurationResponse(soap*, _tds__GetDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfigurationResponse(soap*, _tds__GetDot1XConfigurationResponse*) serialize to a stream
/// - _tds__GetDot1XConfigurationResponse* _tds__GetDot1XConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__GetDot1XConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot1XConfigurationResponse::soap_del() deep deletes _tds__GetDot1XConfigurationResponse data members, use only after _tds__GetDot1XConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot1XConfigurationResponse::soap_type() returns SOAP_TYPE__tds__GetDot1XConfigurationResponse or derived type identifier
class _tds__GetDot1XConfigurationResponse
{ public:
/// Element "Dot1XConfiguration" of type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    tt__Dot1XConfiguration*              Dot1XConfiguration             1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurations
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurations is a complexType.
///
/// @note class _tds__GetDot1XConfigurations operations:
/// - _tds__GetDot1XConfigurations* soap_new__tds__GetDot1XConfigurations(soap*) allocate and default initialize
/// - _tds__GetDot1XConfigurations* soap_new__tds__GetDot1XConfigurations(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot1XConfigurations* soap_new_req__tds__GetDot1XConfigurations(soap*, ...) allocate, set required members
/// - _tds__GetDot1XConfigurations* soap_new_set__tds__GetDot1XConfigurations(soap*, ...) allocate, set all public members
/// - _tds__GetDot1XConfigurations::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot1XConfigurations(soap*, _tds__GetDot1XConfigurations*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfigurations(soap*, _tds__GetDot1XConfigurations*) serialize to a stream
/// - _tds__GetDot1XConfigurations* _tds__GetDot1XConfigurations::soap_dup(soap*) returns deep copy of _tds__GetDot1XConfigurations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot1XConfigurations::soap_del() deep deletes _tds__GetDot1XConfigurations data members, use only after _tds__GetDot1XConfigurations::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot1XConfigurations::soap_type() returns SOAP_TYPE__tds__GetDot1XConfigurations or derived type identifier
class _tds__GetDot1XConfigurations
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationsResponse is a complexType.
///
/// @note class _tds__GetDot1XConfigurationsResponse operations:
/// - _tds__GetDot1XConfigurationsResponse* soap_new__tds__GetDot1XConfigurationsResponse(soap*) allocate and default initialize
/// - _tds__GetDot1XConfigurationsResponse* soap_new__tds__GetDot1XConfigurationsResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot1XConfigurationsResponse* soap_new_req__tds__GetDot1XConfigurationsResponse(soap*, ...) allocate, set required members
/// - _tds__GetDot1XConfigurationsResponse* soap_new_set__tds__GetDot1XConfigurationsResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDot1XConfigurationsResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot1XConfigurationsResponse(soap*, _tds__GetDot1XConfigurationsResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfigurationsResponse(soap*, _tds__GetDot1XConfigurationsResponse*) serialize to a stream
/// - _tds__GetDot1XConfigurationsResponse* _tds__GetDot1XConfigurationsResponse::soap_dup(soap*) returns deep copy of _tds__GetDot1XConfigurationsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot1XConfigurationsResponse::soap_del() deep deletes _tds__GetDot1XConfigurationsResponse data members, use only after _tds__GetDot1XConfigurationsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot1XConfigurationsResponse::soap_type() returns SOAP_TYPE__tds__GetDot1XConfigurationsResponse or derived type identifier
class _tds__GetDot1XConfigurationsResponse
{ public:
/// Vector of tt__Dot1XConfiguration* of length 0..unbounded.
    std::vector<tt__Dot1XConfiguration*> Dot1XConfiguration             0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfiguration is a complexType.
///
/// @note class _tds__DeleteDot1XConfiguration operations:
/// - _tds__DeleteDot1XConfiguration* soap_new__tds__DeleteDot1XConfiguration(soap*) allocate and default initialize
/// - _tds__DeleteDot1XConfiguration* soap_new__tds__DeleteDot1XConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteDot1XConfiguration* soap_new_req__tds__DeleteDot1XConfiguration(soap*, ...) allocate, set required members
/// - _tds__DeleteDot1XConfiguration* soap_new_set__tds__DeleteDot1XConfiguration(soap*, ...) allocate, set all public members
/// - _tds__DeleteDot1XConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteDot1XConfiguration(soap*, _tds__DeleteDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__DeleteDot1XConfiguration(soap*, _tds__DeleteDot1XConfiguration*) serialize to a stream
/// - _tds__DeleteDot1XConfiguration* _tds__DeleteDot1XConfiguration::soap_dup(soap*) returns deep copy of _tds__DeleteDot1XConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteDot1XConfiguration::soap_del() deep deletes _tds__DeleteDot1XConfiguration data members, use only after _tds__DeleteDot1XConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteDot1XConfiguration::soap_type() returns SOAP_TYPE__tds__DeleteDot1XConfiguration or derived type identifier
class _tds__DeleteDot1XConfiguration
{ public:
/// Vector of tt__ReferenceToken of length 0..unbounded.
    std::vector<tt__ReferenceToken     > Dot1XConfigurationToken        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfigurationResponse is a complexType.
///
/// @note class _tds__DeleteDot1XConfigurationResponse operations:
/// - _tds__DeleteDot1XConfigurationResponse* soap_new__tds__DeleteDot1XConfigurationResponse(soap*) allocate and default initialize
/// - _tds__DeleteDot1XConfigurationResponse* soap_new__tds__DeleteDot1XConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteDot1XConfigurationResponse* soap_new_req__tds__DeleteDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__DeleteDot1XConfigurationResponse* soap_new_set__tds__DeleteDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__DeleteDot1XConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteDot1XConfigurationResponse(soap*, _tds__DeleteDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteDot1XConfigurationResponse(soap*, _tds__DeleteDot1XConfigurationResponse*) serialize to a stream
/// - _tds__DeleteDot1XConfigurationResponse* _tds__DeleteDot1XConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__DeleteDot1XConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteDot1XConfigurationResponse::soap_del() deep deletes _tds__DeleteDot1XConfigurationResponse data members, use only after _tds__DeleteDot1XConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteDot1XConfigurationResponse::soap_type() returns SOAP_TYPE__tds__DeleteDot1XConfigurationResponse or derived type identifier
class _tds__DeleteDot1XConfigurationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputs
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputs is a complexType.
///
/// @note class _tds__GetRelayOutputs operations:
/// - _tds__GetRelayOutputs* soap_new__tds__GetRelayOutputs(soap*) allocate and default initialize
/// - _tds__GetRelayOutputs* soap_new__tds__GetRelayOutputs(soap*, int num) allocate and default initialize an array
/// - _tds__GetRelayOutputs* soap_new_req__tds__GetRelayOutputs(soap*, ...) allocate, set required members
/// - _tds__GetRelayOutputs* soap_new_set__tds__GetRelayOutputs(soap*, ...) allocate, set all public members
/// - _tds__GetRelayOutputs::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetRelayOutputs(soap*, _tds__GetRelayOutputs*) deserialize from a stream
/// - int soap_write__tds__GetRelayOutputs(soap*, _tds__GetRelayOutputs*) serialize to a stream
/// - _tds__GetRelayOutputs* _tds__GetRelayOutputs::soap_dup(soap*) returns deep copy of _tds__GetRelayOutputs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetRelayOutputs::soap_del() deep deletes _tds__GetRelayOutputs data members, use only after _tds__GetRelayOutputs::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetRelayOutputs::soap_type() returns SOAP_TYPE__tds__GetRelayOutputs or derived type identifier
class _tds__GetRelayOutputs
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputsResponse is a complexType.
///
/// @note class _tds__GetRelayOutputsResponse operations:
/// - _tds__GetRelayOutputsResponse* soap_new__tds__GetRelayOutputsResponse(soap*) allocate and default initialize
/// - _tds__GetRelayOutputsResponse* soap_new__tds__GetRelayOutputsResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetRelayOutputsResponse* soap_new_req__tds__GetRelayOutputsResponse(soap*, ...) allocate, set required members
/// - _tds__GetRelayOutputsResponse* soap_new_set__tds__GetRelayOutputsResponse(soap*, ...) allocate, set all public members
/// - _tds__GetRelayOutputsResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetRelayOutputsResponse(soap*, _tds__GetRelayOutputsResponse*) deserialize from a stream
/// - int soap_write__tds__GetRelayOutputsResponse(soap*, _tds__GetRelayOutputsResponse*) serialize to a stream
/// - _tds__GetRelayOutputsResponse* _tds__GetRelayOutputsResponse::soap_dup(soap*) returns deep copy of _tds__GetRelayOutputsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetRelayOutputsResponse::soap_del() deep deletes _tds__GetRelayOutputsResponse data members, use only after _tds__GetRelayOutputsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetRelayOutputsResponse::soap_type() returns SOAP_TYPE__tds__GetRelayOutputsResponse or derived type identifier
class _tds__GetRelayOutputsResponse
{ public:
/// Vector of tt__RelayOutput* of length 0..unbounded.
    std::vector<tt__RelayOutput*       > RelayOutputs                   0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettings
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettings is a complexType.
///
/// @note class _tds__SetRelayOutputSettings operations:
/// - _tds__SetRelayOutputSettings* soap_new__tds__SetRelayOutputSettings(soap*) allocate and default initialize
/// - _tds__SetRelayOutputSettings* soap_new__tds__SetRelayOutputSettings(soap*, int num) allocate and default initialize an array
/// - _tds__SetRelayOutputSettings* soap_new_req__tds__SetRelayOutputSettings(soap*, ...) allocate, set required members
/// - _tds__SetRelayOutputSettings* soap_new_set__tds__SetRelayOutputSettings(soap*, ...) allocate, set all public members
/// - _tds__SetRelayOutputSettings::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRelayOutputSettings(soap*, _tds__SetRelayOutputSettings*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputSettings(soap*, _tds__SetRelayOutputSettings*) serialize to a stream
/// - _tds__SetRelayOutputSettings* _tds__SetRelayOutputSettings::soap_dup(soap*) returns deep copy of _tds__SetRelayOutputSettings, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRelayOutputSettings::soap_del() deep deletes _tds__SetRelayOutputSettings data members, use only after _tds__SetRelayOutputSettings::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRelayOutputSettings::soap_type() returns SOAP_TYPE__tds__SetRelayOutputSettings or derived type identifier
class _tds__SetRelayOutputSettings
{ public:
/// Element "RelayOutputToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   RelayOutputToken               1;	///< Required element.
/// Element "Properties" of type "http://www.onvif.org/ver10/schema":RelayOutputSettings.
    tt__RelayOutputSettings*             Properties                     1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettingsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettingsResponse is a complexType.
///
/// @note class _tds__SetRelayOutputSettingsResponse operations:
/// - _tds__SetRelayOutputSettingsResponse* soap_new__tds__SetRelayOutputSettingsResponse(soap*) allocate and default initialize
/// - _tds__SetRelayOutputSettingsResponse* soap_new__tds__SetRelayOutputSettingsResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetRelayOutputSettingsResponse* soap_new_req__tds__SetRelayOutputSettingsResponse(soap*, ...) allocate, set required members
/// - _tds__SetRelayOutputSettingsResponse* soap_new_set__tds__SetRelayOutputSettingsResponse(soap*, ...) allocate, set all public members
/// - _tds__SetRelayOutputSettingsResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRelayOutputSettingsResponse(soap*, _tds__SetRelayOutputSettingsResponse*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputSettingsResponse(soap*, _tds__SetRelayOutputSettingsResponse*) serialize to a stream
/// - _tds__SetRelayOutputSettingsResponse* _tds__SetRelayOutputSettingsResponse::soap_dup(soap*) returns deep copy of _tds__SetRelayOutputSettingsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRelayOutputSettingsResponse::soap_del() deep deletes _tds__SetRelayOutputSettingsResponse data members, use only after _tds__SetRelayOutputSettingsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRelayOutputSettingsResponse::soap_type() returns SOAP_TYPE__tds__SetRelayOutputSettingsResponse or derived type identifier
class _tds__SetRelayOutputSettingsResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputState
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputState is a complexType.
///
/// @note class _tds__SetRelayOutputState operations:
/// - _tds__SetRelayOutputState* soap_new__tds__SetRelayOutputState(soap*) allocate and default initialize
/// - _tds__SetRelayOutputState* soap_new__tds__SetRelayOutputState(soap*, int num) allocate and default initialize an array
/// - _tds__SetRelayOutputState* soap_new_req__tds__SetRelayOutputState(soap*, ...) allocate, set required members
/// - _tds__SetRelayOutputState* soap_new_set__tds__SetRelayOutputState(soap*, ...) allocate, set all public members
/// - _tds__SetRelayOutputState::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRelayOutputState(soap*, _tds__SetRelayOutputState*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputState(soap*, _tds__SetRelayOutputState*) serialize to a stream
/// - _tds__SetRelayOutputState* _tds__SetRelayOutputState::soap_dup(soap*) returns deep copy of _tds__SetRelayOutputState, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRelayOutputState::soap_del() deep deletes _tds__SetRelayOutputState data members, use only after _tds__SetRelayOutputState::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRelayOutputState::soap_type() returns SOAP_TYPE__tds__SetRelayOutputState or derived type identifier
class _tds__SetRelayOutputState
{ public:
/// Element "RelayOutputToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   RelayOutputToken               1;	///< Required element.
/// Element "LogicalState" of type "http://www.onvif.org/ver10/schema":RelayLogicalState.
    tt__RelayLogicalState                LogicalState                   1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputStateResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputStateResponse is a complexType.
///
/// @note class _tds__SetRelayOutputStateResponse operations:
/// - _tds__SetRelayOutputStateResponse* soap_new__tds__SetRelayOutputStateResponse(soap*) allocate and default initialize
/// - _tds__SetRelayOutputStateResponse* soap_new__tds__SetRelayOutputStateResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetRelayOutputStateResponse* soap_new_req__tds__SetRelayOutputStateResponse(soap*, ...) allocate, set required members
/// - _tds__SetRelayOutputStateResponse* soap_new_set__tds__SetRelayOutputStateResponse(soap*, ...) allocate, set all public members
/// - _tds__SetRelayOutputStateResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetRelayOutputStateResponse(soap*, _tds__SetRelayOutputStateResponse*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputStateResponse(soap*, _tds__SetRelayOutputStateResponse*) serialize to a stream
/// - _tds__SetRelayOutputStateResponse* _tds__SetRelayOutputStateResponse::soap_dup(soap*) returns deep copy of _tds__SetRelayOutputStateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetRelayOutputStateResponse::soap_del() deep deletes _tds__SetRelayOutputStateResponse data members, use only after _tds__SetRelayOutputStateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetRelayOutputStateResponse::soap_type() returns SOAP_TYPE__tds__SetRelayOutputStateResponse or derived type identifier
class _tds__SetRelayOutputStateResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommand
/// @brief "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommand is a complexType.
///
/// @note class _tds__SendAuxiliaryCommand operations:
/// - _tds__SendAuxiliaryCommand* soap_new__tds__SendAuxiliaryCommand(soap*) allocate and default initialize
/// - _tds__SendAuxiliaryCommand* soap_new__tds__SendAuxiliaryCommand(soap*, int num) allocate and default initialize an array
/// - _tds__SendAuxiliaryCommand* soap_new_req__tds__SendAuxiliaryCommand(soap*, ...) allocate, set required members
/// - _tds__SendAuxiliaryCommand* soap_new_set__tds__SendAuxiliaryCommand(soap*, ...) allocate, set all public members
/// - _tds__SendAuxiliaryCommand::soap_default(soap*) default initialize members
/// - int soap_read__tds__SendAuxiliaryCommand(soap*, _tds__SendAuxiliaryCommand*) deserialize from a stream
/// - int soap_write__tds__SendAuxiliaryCommand(soap*, _tds__SendAuxiliaryCommand*) serialize to a stream
/// - _tds__SendAuxiliaryCommand* _tds__SendAuxiliaryCommand::soap_dup(soap*) returns deep copy of _tds__SendAuxiliaryCommand, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SendAuxiliaryCommand::soap_del() deep deletes _tds__SendAuxiliaryCommand data members, use only after _tds__SendAuxiliaryCommand::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SendAuxiliaryCommand::soap_type() returns SOAP_TYPE__tds__SendAuxiliaryCommand or derived type identifier
class _tds__SendAuxiliaryCommand
{ public:
/// Element "AuxiliaryCommand" of type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    tt__AuxiliaryData                    AuxiliaryCommand               1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommandResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommandResponse is a complexType.
///
/// @note class _tds__SendAuxiliaryCommandResponse operations:
/// - _tds__SendAuxiliaryCommandResponse* soap_new__tds__SendAuxiliaryCommandResponse(soap*) allocate and default initialize
/// - _tds__SendAuxiliaryCommandResponse* soap_new__tds__SendAuxiliaryCommandResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SendAuxiliaryCommandResponse* soap_new_req__tds__SendAuxiliaryCommandResponse(soap*, ...) allocate, set required members
/// - _tds__SendAuxiliaryCommandResponse* soap_new_set__tds__SendAuxiliaryCommandResponse(soap*, ...) allocate, set all public members
/// - _tds__SendAuxiliaryCommandResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SendAuxiliaryCommandResponse(soap*, _tds__SendAuxiliaryCommandResponse*) deserialize from a stream
/// - int soap_write__tds__SendAuxiliaryCommandResponse(soap*, _tds__SendAuxiliaryCommandResponse*) serialize to a stream
/// - _tds__SendAuxiliaryCommandResponse* _tds__SendAuxiliaryCommandResponse::soap_dup(soap*) returns deep copy of _tds__SendAuxiliaryCommandResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SendAuxiliaryCommandResponse::soap_del() deep deletes _tds__SendAuxiliaryCommandResponse data members, use only after _tds__SendAuxiliaryCommandResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SendAuxiliaryCommandResponse::soap_type() returns SOAP_TYPE__tds__SendAuxiliaryCommandResponse or derived type identifier
class _tds__SendAuxiliaryCommandResponse
{ public:
/// Element "AuxiliaryCommandResponse" of type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    tt__AuxiliaryData*                   AuxiliaryCommandResponse       0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11Capabilities
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11Capabilities is a complexType.
///
/// @note class _tds__GetDot11Capabilities operations:
/// - _tds__GetDot11Capabilities* soap_new__tds__GetDot11Capabilities(soap*) allocate and default initialize
/// - _tds__GetDot11Capabilities* soap_new__tds__GetDot11Capabilities(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot11Capabilities* soap_new_req__tds__GetDot11Capabilities(soap*, ...) allocate, set required members
/// - _tds__GetDot11Capabilities* soap_new_set__tds__GetDot11Capabilities(soap*, ...) allocate, set all public members
/// - _tds__GetDot11Capabilities::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot11Capabilities(soap*, _tds__GetDot11Capabilities*) deserialize from a stream
/// - int soap_write__tds__GetDot11Capabilities(soap*, _tds__GetDot11Capabilities*) serialize to a stream
/// - _tds__GetDot11Capabilities* _tds__GetDot11Capabilities::soap_dup(soap*) returns deep copy of _tds__GetDot11Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot11Capabilities::soap_del() deep deletes _tds__GetDot11Capabilities data members, use only after _tds__GetDot11Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot11Capabilities::soap_type() returns SOAP_TYPE__tds__GetDot11Capabilities or derived type identifier
class _tds__GetDot11Capabilities
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11CapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11CapabilitiesResponse is a complexType.
///
/// @note class _tds__GetDot11CapabilitiesResponse operations:
/// - _tds__GetDot11CapabilitiesResponse* soap_new__tds__GetDot11CapabilitiesResponse(soap*) allocate and default initialize
/// - _tds__GetDot11CapabilitiesResponse* soap_new__tds__GetDot11CapabilitiesResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot11CapabilitiesResponse* soap_new_req__tds__GetDot11CapabilitiesResponse(soap*, ...) allocate, set required members
/// - _tds__GetDot11CapabilitiesResponse* soap_new_set__tds__GetDot11CapabilitiesResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDot11CapabilitiesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot11CapabilitiesResponse(soap*, _tds__GetDot11CapabilitiesResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot11CapabilitiesResponse(soap*, _tds__GetDot11CapabilitiesResponse*) serialize to a stream
/// - _tds__GetDot11CapabilitiesResponse* _tds__GetDot11CapabilitiesResponse::soap_dup(soap*) returns deep copy of _tds__GetDot11CapabilitiesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot11CapabilitiesResponse::soap_del() deep deletes _tds__GetDot11CapabilitiesResponse data members, use only after _tds__GetDot11CapabilitiesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot11CapabilitiesResponse::soap_type() returns SOAP_TYPE__tds__GetDot11CapabilitiesResponse or derived type identifier
class _tds__GetDot11CapabilitiesResponse
{ public:
/// Element "Capabilities" of type "http://www.onvif.org/ver10/schema":Dot11Capabilities.
    tt__Dot11Capabilities*               Capabilities                   1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11Status
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11Status is a complexType.
///
/// @note class _tds__GetDot11Status operations:
/// - _tds__GetDot11Status* soap_new__tds__GetDot11Status(soap*) allocate and default initialize
/// - _tds__GetDot11Status* soap_new__tds__GetDot11Status(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot11Status* soap_new_req__tds__GetDot11Status(soap*, ...) allocate, set required members
/// - _tds__GetDot11Status* soap_new_set__tds__GetDot11Status(soap*, ...) allocate, set all public members
/// - _tds__GetDot11Status::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot11Status(soap*, _tds__GetDot11Status*) deserialize from a stream
/// - int soap_write__tds__GetDot11Status(soap*, _tds__GetDot11Status*) serialize to a stream
/// - _tds__GetDot11Status* _tds__GetDot11Status::soap_dup(soap*) returns deep copy of _tds__GetDot11Status, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot11Status::soap_del() deep deletes _tds__GetDot11Status data members, use only after _tds__GetDot11Status::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot11Status::soap_type() returns SOAP_TYPE__tds__GetDot11Status or derived type identifier
class _tds__GetDot11Status
{ public:
/// Element "InterfaceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11StatusResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11StatusResponse is a complexType.
///
/// @note class _tds__GetDot11StatusResponse operations:
/// - _tds__GetDot11StatusResponse* soap_new__tds__GetDot11StatusResponse(soap*) allocate and default initialize
/// - _tds__GetDot11StatusResponse* soap_new__tds__GetDot11StatusResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetDot11StatusResponse* soap_new_req__tds__GetDot11StatusResponse(soap*, ...) allocate, set required members
/// - _tds__GetDot11StatusResponse* soap_new_set__tds__GetDot11StatusResponse(soap*, ...) allocate, set all public members
/// - _tds__GetDot11StatusResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetDot11StatusResponse(soap*, _tds__GetDot11StatusResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot11StatusResponse(soap*, _tds__GetDot11StatusResponse*) serialize to a stream
/// - _tds__GetDot11StatusResponse* _tds__GetDot11StatusResponse::soap_dup(soap*) returns deep copy of _tds__GetDot11StatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetDot11StatusResponse::soap_del() deep deletes _tds__GetDot11StatusResponse data members, use only after _tds__GetDot11StatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetDot11StatusResponse::soap_type() returns SOAP_TYPE__tds__GetDot11StatusResponse or derived type identifier
class _tds__GetDot11StatusResponse
{ public:
/// Element "Status" of type "http://www.onvif.org/ver10/schema":Dot11Status.
    tt__Dot11Status*                     Status                         1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11Networks
/// @brief "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11Networks is a complexType.
///
/// @note class _tds__ScanAvailableDot11Networks operations:
/// - _tds__ScanAvailableDot11Networks* soap_new__tds__ScanAvailableDot11Networks(soap*) allocate and default initialize
/// - _tds__ScanAvailableDot11Networks* soap_new__tds__ScanAvailableDot11Networks(soap*, int num) allocate and default initialize an array
/// - _tds__ScanAvailableDot11Networks* soap_new_req__tds__ScanAvailableDot11Networks(soap*, ...) allocate, set required members
/// - _tds__ScanAvailableDot11Networks* soap_new_set__tds__ScanAvailableDot11Networks(soap*, ...) allocate, set all public members
/// - _tds__ScanAvailableDot11Networks::soap_default(soap*) default initialize members
/// - int soap_read__tds__ScanAvailableDot11Networks(soap*, _tds__ScanAvailableDot11Networks*) deserialize from a stream
/// - int soap_write__tds__ScanAvailableDot11Networks(soap*, _tds__ScanAvailableDot11Networks*) serialize to a stream
/// - _tds__ScanAvailableDot11Networks* _tds__ScanAvailableDot11Networks::soap_dup(soap*) returns deep copy of _tds__ScanAvailableDot11Networks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__ScanAvailableDot11Networks::soap_del() deep deletes _tds__ScanAvailableDot11Networks data members, use only after _tds__ScanAvailableDot11Networks::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__ScanAvailableDot11Networks::soap_type() returns SOAP_TYPE__tds__ScanAvailableDot11Networks or derived type identifier
class _tds__ScanAvailableDot11Networks
{ public:
/// Element "InterfaceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11NetworksResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11NetworksResponse is a complexType.
///
/// @note class _tds__ScanAvailableDot11NetworksResponse operations:
/// - _tds__ScanAvailableDot11NetworksResponse* soap_new__tds__ScanAvailableDot11NetworksResponse(soap*) allocate and default initialize
/// - _tds__ScanAvailableDot11NetworksResponse* soap_new__tds__ScanAvailableDot11NetworksResponse(soap*, int num) allocate and default initialize an array
/// - _tds__ScanAvailableDot11NetworksResponse* soap_new_req__tds__ScanAvailableDot11NetworksResponse(soap*, ...) allocate, set required members
/// - _tds__ScanAvailableDot11NetworksResponse* soap_new_set__tds__ScanAvailableDot11NetworksResponse(soap*, ...) allocate, set all public members
/// - _tds__ScanAvailableDot11NetworksResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__ScanAvailableDot11NetworksResponse(soap*, _tds__ScanAvailableDot11NetworksResponse*) deserialize from a stream
/// - int soap_write__tds__ScanAvailableDot11NetworksResponse(soap*, _tds__ScanAvailableDot11NetworksResponse*) serialize to a stream
/// - _tds__ScanAvailableDot11NetworksResponse* _tds__ScanAvailableDot11NetworksResponse::soap_dup(soap*) returns deep copy of _tds__ScanAvailableDot11NetworksResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__ScanAvailableDot11NetworksResponse::soap_del() deep deletes _tds__ScanAvailableDot11NetworksResponse data members, use only after _tds__ScanAvailableDot11NetworksResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__ScanAvailableDot11NetworksResponse::soap_type() returns SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse or derived type identifier
class _tds__ScanAvailableDot11NetworksResponse
{ public:
/// Vector of tt__Dot11AvailableNetworks* of length 0..unbounded.
    std::vector<tt__Dot11AvailableNetworks*> Networks                       0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemUris
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemUris is a complexType.
///
/// @note class _tds__GetSystemUris operations:
/// - _tds__GetSystemUris* soap_new__tds__GetSystemUris(soap*) allocate and default initialize
/// - _tds__GetSystemUris* soap_new__tds__GetSystemUris(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemUris* soap_new_req__tds__GetSystemUris(soap*, ...) allocate, set required members
/// - _tds__GetSystemUris* soap_new_set__tds__GetSystemUris(soap*, ...) allocate, set all public members
/// - _tds__GetSystemUris::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemUris(soap*, _tds__GetSystemUris*) deserialize from a stream
/// - int soap_write__tds__GetSystemUris(soap*, _tds__GetSystemUris*) serialize to a stream
/// - _tds__GetSystemUris* _tds__GetSystemUris::soap_dup(soap*) returns deep copy of _tds__GetSystemUris, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemUris::soap_del() deep deletes _tds__GetSystemUris data members, use only after _tds__GetSystemUris::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemUris::soap_type() returns SOAP_TYPE__tds__GetSystemUris or derived type identifier
class _tds__GetSystemUris
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemUrisResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemUrisResponse is a complexType.
///
/// @note class _tds__GetSystemUrisResponse operations:
/// - _tds__GetSystemUrisResponse* soap_new__tds__GetSystemUrisResponse(soap*) allocate and default initialize
/// - _tds__GetSystemUrisResponse* soap_new__tds__GetSystemUrisResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemUrisResponse* soap_new_req__tds__GetSystemUrisResponse(soap*, ...) allocate, set required members
/// - _tds__GetSystemUrisResponse* soap_new_set__tds__GetSystemUrisResponse(soap*, ...) allocate, set all public members
/// - _tds__GetSystemUrisResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemUrisResponse(soap*, _tds__GetSystemUrisResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemUrisResponse(soap*, _tds__GetSystemUrisResponse*) serialize to a stream
/// - _tds__GetSystemUrisResponse* _tds__GetSystemUrisResponse::soap_dup(soap*) returns deep copy of _tds__GetSystemUrisResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemUrisResponse::soap_del() deep deletes _tds__GetSystemUrisResponse data members, use only after _tds__GetSystemUrisResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemUrisResponse::soap_type() returns SOAP_TYPE__tds__GetSystemUrisResponse or derived type identifier
class _tds__GetSystemUrisResponse
{ public:
/// Element "SystemLogUris" of type "http://www.onvif.org/ver10/schema":SystemLogUriList.
    tt__SystemLogUriList*                SystemLogUris                  0;	///< Optional element.
/// Element "SupportInfoUri" of type xs:anyURI.
    xsd__anyURI*                         SupportInfoUri                 0;	///< Optional element.
/// Element "SystemBackupUri" of type xs:anyURI.
    xsd__anyURI*                         SystemBackupUri                0;	///< Optional element.
/// @note class _tds__GetSystemUrisResponse_Extension operations:
/// - _tds__GetSystemUrisResponse_Extension* soap_new__tds__GetSystemUrisResponse_Extension(soap*) allocate and default initialize
/// - _tds__GetSystemUrisResponse_Extension* soap_new__tds__GetSystemUrisResponse_Extension(soap*, int num) allocate and default initialize an array
/// - _tds__GetSystemUrisResponse_Extension* soap_new_req__tds__GetSystemUrisResponse_Extension(soap*, ...) allocate, set required members
/// - _tds__GetSystemUrisResponse_Extension* soap_new_set__tds__GetSystemUrisResponse_Extension(soap*, ...) allocate, set all public members
/// - _tds__GetSystemUrisResponse_Extension::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetSystemUrisResponse_Extension(soap*, _tds__GetSystemUrisResponse_Extension*) deserialize from a stream
/// - int soap_write__tds__GetSystemUrisResponse_Extension(soap*, _tds__GetSystemUrisResponse_Extension*) serialize to a stream
/// - _tds__GetSystemUrisResponse_Extension* _tds__GetSystemUrisResponse_Extension::soap_dup(soap*) returns deep copy of _tds__GetSystemUrisResponse_Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetSystemUrisResponse_Extension::soap_del() deep deletes _tds__GetSystemUrisResponse_Extension data members, use only after _tds__GetSystemUrisResponse_Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetSystemUrisResponse_Extension::soap_type() returns SOAP_TYPE__tds__GetSystemUrisResponse_Extension or derived type identifier
    class _tds__GetSystemUrisResponse_Extension
    { public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgrade
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgrade is a complexType.
///
/// @note class _tds__StartFirmwareUpgrade operations:
/// - _tds__StartFirmwareUpgrade* soap_new__tds__StartFirmwareUpgrade(soap*) allocate and default initialize
/// - _tds__StartFirmwareUpgrade* soap_new__tds__StartFirmwareUpgrade(soap*, int num) allocate and default initialize an array
/// - _tds__StartFirmwareUpgrade* soap_new_req__tds__StartFirmwareUpgrade(soap*, ...) allocate, set required members
/// - _tds__StartFirmwareUpgrade* soap_new_set__tds__StartFirmwareUpgrade(soap*, ...) allocate, set all public members
/// - _tds__StartFirmwareUpgrade::soap_default(soap*) default initialize members
/// - int soap_read__tds__StartFirmwareUpgrade(soap*, _tds__StartFirmwareUpgrade*) deserialize from a stream
/// - int soap_write__tds__StartFirmwareUpgrade(soap*, _tds__StartFirmwareUpgrade*) serialize to a stream
/// - _tds__StartFirmwareUpgrade* _tds__StartFirmwareUpgrade::soap_dup(soap*) returns deep copy of _tds__StartFirmwareUpgrade, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__StartFirmwareUpgrade::soap_del() deep deletes _tds__StartFirmwareUpgrade data members, use only after _tds__StartFirmwareUpgrade::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__StartFirmwareUpgrade::soap_type() returns SOAP_TYPE__tds__StartFirmwareUpgrade or derived type identifier
class _tds__StartFirmwareUpgrade
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgradeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgradeResponse is a complexType.
///
/// @note class _tds__StartFirmwareUpgradeResponse operations:
/// - _tds__StartFirmwareUpgradeResponse* soap_new__tds__StartFirmwareUpgradeResponse(soap*) allocate and default initialize
/// - _tds__StartFirmwareUpgradeResponse* soap_new__tds__StartFirmwareUpgradeResponse(soap*, int num) allocate and default initialize an array
/// - _tds__StartFirmwareUpgradeResponse* soap_new_req__tds__StartFirmwareUpgradeResponse(soap*, ...) allocate, set required members
/// - _tds__StartFirmwareUpgradeResponse* soap_new_set__tds__StartFirmwareUpgradeResponse(soap*, ...) allocate, set all public members
/// - _tds__StartFirmwareUpgradeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__StartFirmwareUpgradeResponse(soap*, _tds__StartFirmwareUpgradeResponse*) deserialize from a stream
/// - int soap_write__tds__StartFirmwareUpgradeResponse(soap*, _tds__StartFirmwareUpgradeResponse*) serialize to a stream
/// - _tds__StartFirmwareUpgradeResponse* _tds__StartFirmwareUpgradeResponse::soap_dup(soap*) returns deep copy of _tds__StartFirmwareUpgradeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__StartFirmwareUpgradeResponse::soap_del() deep deletes _tds__StartFirmwareUpgradeResponse data members, use only after _tds__StartFirmwareUpgradeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__StartFirmwareUpgradeResponse::soap_type() returns SOAP_TYPE__tds__StartFirmwareUpgradeResponse or derived type identifier
class _tds__StartFirmwareUpgradeResponse
{ public:
/// Element "UploadUri" of type xs:anyURI.
    xsd__anyURI                          UploadUri                      1;	///< Required element.
/// Element "UploadDelay" of type xs:duration.
    xsd__duration                        UploadDelay                    1;	///< Required element.
/// Element "ExpectedDownTime" of type xs:duration.
    xsd__duration                        ExpectedDownTime               1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartSystemRestore
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartSystemRestore is a complexType.
///
/// @note class _tds__StartSystemRestore operations:
/// - _tds__StartSystemRestore* soap_new__tds__StartSystemRestore(soap*) allocate and default initialize
/// - _tds__StartSystemRestore* soap_new__tds__StartSystemRestore(soap*, int num) allocate and default initialize an array
/// - _tds__StartSystemRestore* soap_new_req__tds__StartSystemRestore(soap*, ...) allocate, set required members
/// - _tds__StartSystemRestore* soap_new_set__tds__StartSystemRestore(soap*, ...) allocate, set all public members
/// - _tds__StartSystemRestore::soap_default(soap*) default initialize members
/// - int soap_read__tds__StartSystemRestore(soap*, _tds__StartSystemRestore*) deserialize from a stream
/// - int soap_write__tds__StartSystemRestore(soap*, _tds__StartSystemRestore*) serialize to a stream
/// - _tds__StartSystemRestore* _tds__StartSystemRestore::soap_dup(soap*) returns deep copy of _tds__StartSystemRestore, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__StartSystemRestore::soap_del() deep deletes _tds__StartSystemRestore data members, use only after _tds__StartSystemRestore::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__StartSystemRestore::soap_type() returns SOAP_TYPE__tds__StartSystemRestore or derived type identifier
class _tds__StartSystemRestore
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartSystemRestoreResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartSystemRestoreResponse is a complexType.
///
/// @note class _tds__StartSystemRestoreResponse operations:
/// - _tds__StartSystemRestoreResponse* soap_new__tds__StartSystemRestoreResponse(soap*) allocate and default initialize
/// - _tds__StartSystemRestoreResponse* soap_new__tds__StartSystemRestoreResponse(soap*, int num) allocate and default initialize an array
/// - _tds__StartSystemRestoreResponse* soap_new_req__tds__StartSystemRestoreResponse(soap*, ...) allocate, set required members
/// - _tds__StartSystemRestoreResponse* soap_new_set__tds__StartSystemRestoreResponse(soap*, ...) allocate, set all public members
/// - _tds__StartSystemRestoreResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__StartSystemRestoreResponse(soap*, _tds__StartSystemRestoreResponse*) deserialize from a stream
/// - int soap_write__tds__StartSystemRestoreResponse(soap*, _tds__StartSystemRestoreResponse*) serialize to a stream
/// - _tds__StartSystemRestoreResponse* _tds__StartSystemRestoreResponse::soap_dup(soap*) returns deep copy of _tds__StartSystemRestoreResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__StartSystemRestoreResponse::soap_del() deep deletes _tds__StartSystemRestoreResponse data members, use only after _tds__StartSystemRestoreResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__StartSystemRestoreResponse::soap_type() returns SOAP_TYPE__tds__StartSystemRestoreResponse or derived type identifier
class _tds__StartSystemRestoreResponse
{ public:
/// Element "UploadUri" of type xs:anyURI.
    xsd__anyURI                          UploadUri                      1;	///< Required element.
/// Element "ExpectedDownTime" of type xs:duration.
    xsd__duration                        ExpectedDownTime               1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurations
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurations is a complexType.
///
/// @note class _tds__GetStorageConfigurations operations:
/// - _tds__GetStorageConfigurations* soap_new__tds__GetStorageConfigurations(soap*) allocate and default initialize
/// - _tds__GetStorageConfigurations* soap_new__tds__GetStorageConfigurations(soap*, int num) allocate and default initialize an array
/// - _tds__GetStorageConfigurations* soap_new_req__tds__GetStorageConfigurations(soap*, ...) allocate, set required members
/// - _tds__GetStorageConfigurations* soap_new_set__tds__GetStorageConfigurations(soap*, ...) allocate, set all public members
/// - _tds__GetStorageConfigurations::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetStorageConfigurations(soap*, _tds__GetStorageConfigurations*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfigurations(soap*, _tds__GetStorageConfigurations*) serialize to a stream
/// - _tds__GetStorageConfigurations* _tds__GetStorageConfigurations::soap_dup(soap*) returns deep copy of _tds__GetStorageConfigurations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetStorageConfigurations::soap_del() deep deletes _tds__GetStorageConfigurations data members, use only after _tds__GetStorageConfigurations::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetStorageConfigurations::soap_type() returns SOAP_TYPE__tds__GetStorageConfigurations or derived type identifier
class _tds__GetStorageConfigurations
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationsResponse is a complexType.
///
/// @note class _tds__GetStorageConfigurationsResponse operations:
/// - _tds__GetStorageConfigurationsResponse* soap_new__tds__GetStorageConfigurationsResponse(soap*) allocate and default initialize
/// - _tds__GetStorageConfigurationsResponse* soap_new__tds__GetStorageConfigurationsResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetStorageConfigurationsResponse* soap_new_req__tds__GetStorageConfigurationsResponse(soap*, ...) allocate, set required members
/// - _tds__GetStorageConfigurationsResponse* soap_new_set__tds__GetStorageConfigurationsResponse(soap*, ...) allocate, set all public members
/// - _tds__GetStorageConfigurationsResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetStorageConfigurationsResponse(soap*, _tds__GetStorageConfigurationsResponse*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfigurationsResponse(soap*, _tds__GetStorageConfigurationsResponse*) serialize to a stream
/// - _tds__GetStorageConfigurationsResponse* _tds__GetStorageConfigurationsResponse::soap_dup(soap*) returns deep copy of _tds__GetStorageConfigurationsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetStorageConfigurationsResponse::soap_del() deep deletes _tds__GetStorageConfigurationsResponse data members, use only after _tds__GetStorageConfigurationsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetStorageConfigurationsResponse::soap_type() returns SOAP_TYPE__tds__GetStorageConfigurationsResponse or derived type identifier
class _tds__GetStorageConfigurationsResponse
{ public:
/// Vector of tds__StorageConfiguration* of length 0..unbounded.
    std::vector<tds__StorageConfiguration*> StorageConfigurations          0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfiguration is a complexType.
///
/// @note class _tds__CreateStorageConfiguration operations:
/// - _tds__CreateStorageConfiguration* soap_new__tds__CreateStorageConfiguration(soap*) allocate and default initialize
/// - _tds__CreateStorageConfiguration* soap_new__tds__CreateStorageConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__CreateStorageConfiguration* soap_new_req__tds__CreateStorageConfiguration(soap*, ...) allocate, set required members
/// - _tds__CreateStorageConfiguration* soap_new_set__tds__CreateStorageConfiguration(soap*, ...) allocate, set all public members
/// - _tds__CreateStorageConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateStorageConfiguration(soap*, _tds__CreateStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__CreateStorageConfiguration(soap*, _tds__CreateStorageConfiguration*) serialize to a stream
/// - _tds__CreateStorageConfiguration* _tds__CreateStorageConfiguration::soap_dup(soap*) returns deep copy of _tds__CreateStorageConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateStorageConfiguration::soap_del() deep deletes _tds__CreateStorageConfiguration data members, use only after _tds__CreateStorageConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateStorageConfiguration::soap_type() returns SOAP_TYPE__tds__CreateStorageConfiguration or derived type identifier
class _tds__CreateStorageConfiguration
{ public:
/// Element "StorageConfiguration" of type "http://www.onvif.org/ver10/device/wsdl":StorageConfigurationData.
    tds__StorageConfigurationData*       StorageConfiguration           1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfigurationResponse is a complexType.
///
/// @note class _tds__CreateStorageConfigurationResponse operations:
/// - _tds__CreateStorageConfigurationResponse* soap_new__tds__CreateStorageConfigurationResponse(soap*) allocate and default initialize
/// - _tds__CreateStorageConfigurationResponse* soap_new__tds__CreateStorageConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__CreateStorageConfigurationResponse* soap_new_req__tds__CreateStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__CreateStorageConfigurationResponse* soap_new_set__tds__CreateStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__CreateStorageConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__CreateStorageConfigurationResponse(soap*, _tds__CreateStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__CreateStorageConfigurationResponse(soap*, _tds__CreateStorageConfigurationResponse*) serialize to a stream
/// - _tds__CreateStorageConfigurationResponse* _tds__CreateStorageConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__CreateStorageConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__CreateStorageConfigurationResponse::soap_del() deep deletes _tds__CreateStorageConfigurationResponse data members, use only after _tds__CreateStorageConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__CreateStorageConfigurationResponse::soap_type() returns SOAP_TYPE__tds__CreateStorageConfigurationResponse or derived type identifier
class _tds__CreateStorageConfigurationResponse
{ public:
/// Element "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfiguration is a complexType.
///
/// @note class _tds__GetStorageConfiguration operations:
/// - _tds__GetStorageConfiguration* soap_new__tds__GetStorageConfiguration(soap*) allocate and default initialize
/// - _tds__GetStorageConfiguration* soap_new__tds__GetStorageConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__GetStorageConfiguration* soap_new_req__tds__GetStorageConfiguration(soap*, ...) allocate, set required members
/// - _tds__GetStorageConfiguration* soap_new_set__tds__GetStorageConfiguration(soap*, ...) allocate, set all public members
/// - _tds__GetStorageConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetStorageConfiguration(soap*, _tds__GetStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfiguration(soap*, _tds__GetStorageConfiguration*) serialize to a stream
/// - _tds__GetStorageConfiguration* _tds__GetStorageConfiguration::soap_dup(soap*) returns deep copy of _tds__GetStorageConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetStorageConfiguration::soap_del() deep deletes _tds__GetStorageConfiguration data members, use only after _tds__GetStorageConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetStorageConfiguration::soap_type() returns SOAP_TYPE__tds__GetStorageConfiguration or derived type identifier
class _tds__GetStorageConfiguration
{ public:
/// Element "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationResponse is a complexType.
///
/// @note class _tds__GetStorageConfigurationResponse operations:
/// - _tds__GetStorageConfigurationResponse* soap_new__tds__GetStorageConfigurationResponse(soap*) allocate and default initialize
/// - _tds__GetStorageConfigurationResponse* soap_new__tds__GetStorageConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetStorageConfigurationResponse* soap_new_req__tds__GetStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__GetStorageConfigurationResponse* soap_new_set__tds__GetStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__GetStorageConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetStorageConfigurationResponse(soap*, _tds__GetStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfigurationResponse(soap*, _tds__GetStorageConfigurationResponse*) serialize to a stream
/// - _tds__GetStorageConfigurationResponse* _tds__GetStorageConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__GetStorageConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetStorageConfigurationResponse::soap_del() deep deletes _tds__GetStorageConfigurationResponse data members, use only after _tds__GetStorageConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetStorageConfigurationResponse::soap_type() returns SOAP_TYPE__tds__GetStorageConfigurationResponse or derived type identifier
class _tds__GetStorageConfigurationResponse
{ public:
/// Element "StorageConfiguration" of type "http://www.onvif.org/ver10/device/wsdl":StorageConfiguration.
    tds__StorageConfiguration*           StorageConfiguration           1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetStorageConfiguration is a complexType.
///
/// @note class _tds__SetStorageConfiguration operations:
/// - _tds__SetStorageConfiguration* soap_new__tds__SetStorageConfiguration(soap*) allocate and default initialize
/// - _tds__SetStorageConfiguration* soap_new__tds__SetStorageConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__SetStorageConfiguration* soap_new_req__tds__SetStorageConfiguration(soap*, ...) allocate, set required members
/// - _tds__SetStorageConfiguration* soap_new_set__tds__SetStorageConfiguration(soap*, ...) allocate, set all public members
/// - _tds__SetStorageConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetStorageConfiguration(soap*, _tds__SetStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__SetStorageConfiguration(soap*, _tds__SetStorageConfiguration*) serialize to a stream
/// - _tds__SetStorageConfiguration* _tds__SetStorageConfiguration::soap_dup(soap*) returns deep copy of _tds__SetStorageConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetStorageConfiguration::soap_del() deep deletes _tds__SetStorageConfiguration data members, use only after _tds__SetStorageConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetStorageConfiguration::soap_type() returns SOAP_TYPE__tds__SetStorageConfiguration or derived type identifier
class _tds__SetStorageConfiguration
{ public:
/// Element "StorageConfiguration" of type "http://www.onvif.org/ver10/device/wsdl":StorageConfiguration.
    tds__StorageConfiguration*           StorageConfiguration           1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetStorageConfigurationResponse is a complexType.
///
/// @note class _tds__SetStorageConfigurationResponse operations:
/// - _tds__SetStorageConfigurationResponse* soap_new__tds__SetStorageConfigurationResponse(soap*) allocate and default initialize
/// - _tds__SetStorageConfigurationResponse* soap_new__tds__SetStorageConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetStorageConfigurationResponse* soap_new_req__tds__SetStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__SetStorageConfigurationResponse* soap_new_set__tds__SetStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__SetStorageConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetStorageConfigurationResponse(soap*, _tds__SetStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__SetStorageConfigurationResponse(soap*, _tds__SetStorageConfigurationResponse*) serialize to a stream
/// - _tds__SetStorageConfigurationResponse* _tds__SetStorageConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__SetStorageConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetStorageConfigurationResponse::soap_del() deep deletes _tds__SetStorageConfigurationResponse data members, use only after _tds__SetStorageConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetStorageConfigurationResponse::soap_type() returns SOAP_TYPE__tds__SetStorageConfigurationResponse or derived type identifier
class _tds__SetStorageConfigurationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfiguration is a complexType.
///
/// @note class _tds__DeleteStorageConfiguration operations:
/// - _tds__DeleteStorageConfiguration* soap_new__tds__DeleteStorageConfiguration(soap*) allocate and default initialize
/// - _tds__DeleteStorageConfiguration* soap_new__tds__DeleteStorageConfiguration(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteStorageConfiguration* soap_new_req__tds__DeleteStorageConfiguration(soap*, ...) allocate, set required members
/// - _tds__DeleteStorageConfiguration* soap_new_set__tds__DeleteStorageConfiguration(soap*, ...) allocate, set all public members
/// - _tds__DeleteStorageConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteStorageConfiguration(soap*, _tds__DeleteStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__DeleteStorageConfiguration(soap*, _tds__DeleteStorageConfiguration*) serialize to a stream
/// - _tds__DeleteStorageConfiguration* _tds__DeleteStorageConfiguration::soap_dup(soap*) returns deep copy of _tds__DeleteStorageConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteStorageConfiguration::soap_del() deep deletes _tds__DeleteStorageConfiguration data members, use only after _tds__DeleteStorageConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteStorageConfiguration::soap_type() returns SOAP_TYPE__tds__DeleteStorageConfiguration or derived type identifier
class _tds__DeleteStorageConfiguration
{ public:
/// Element "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfigurationResponse is a complexType.
///
/// @note class _tds__DeleteStorageConfigurationResponse operations:
/// - _tds__DeleteStorageConfigurationResponse* soap_new__tds__DeleteStorageConfigurationResponse(soap*) allocate and default initialize
/// - _tds__DeleteStorageConfigurationResponse* soap_new__tds__DeleteStorageConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteStorageConfigurationResponse* soap_new_req__tds__DeleteStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - _tds__DeleteStorageConfigurationResponse* soap_new_set__tds__DeleteStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - _tds__DeleteStorageConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteStorageConfigurationResponse(soap*, _tds__DeleteStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteStorageConfigurationResponse(soap*, _tds__DeleteStorageConfigurationResponse*) serialize to a stream
/// - _tds__DeleteStorageConfigurationResponse* _tds__DeleteStorageConfigurationResponse::soap_dup(soap*) returns deep copy of _tds__DeleteStorageConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteStorageConfigurationResponse::soap_del() deep deletes _tds__DeleteStorageConfigurationResponse data members, use only after _tds__DeleteStorageConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteStorageConfigurationResponse::soap_type() returns SOAP_TYPE__tds__DeleteStorageConfigurationResponse or derived type identifier
class _tds__DeleteStorageConfigurationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetGeoLocation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetGeoLocation is a complexType.
///
/// @note class _tds__GetGeoLocation operations:
/// - _tds__GetGeoLocation* soap_new__tds__GetGeoLocation(soap*) allocate and default initialize
/// - _tds__GetGeoLocation* soap_new__tds__GetGeoLocation(soap*, int num) allocate and default initialize an array
/// - _tds__GetGeoLocation* soap_new_req__tds__GetGeoLocation(soap*, ...) allocate, set required members
/// - _tds__GetGeoLocation* soap_new_set__tds__GetGeoLocation(soap*, ...) allocate, set all public members
/// - _tds__GetGeoLocation::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetGeoLocation(soap*, _tds__GetGeoLocation*) deserialize from a stream
/// - int soap_write__tds__GetGeoLocation(soap*, _tds__GetGeoLocation*) serialize to a stream
/// - _tds__GetGeoLocation* _tds__GetGeoLocation::soap_dup(soap*) returns deep copy of _tds__GetGeoLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetGeoLocation::soap_del() deep deletes _tds__GetGeoLocation data members, use only after _tds__GetGeoLocation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetGeoLocation::soap_type() returns SOAP_TYPE__tds__GetGeoLocation or derived type identifier
class _tds__GetGeoLocation
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetGeoLocationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetGeoLocationResponse is a complexType.
///
/// @note class _tds__GetGeoLocationResponse operations:
/// - _tds__GetGeoLocationResponse* soap_new__tds__GetGeoLocationResponse(soap*) allocate and default initialize
/// - _tds__GetGeoLocationResponse* soap_new__tds__GetGeoLocationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__GetGeoLocationResponse* soap_new_req__tds__GetGeoLocationResponse(soap*, ...) allocate, set required members
/// - _tds__GetGeoLocationResponse* soap_new_set__tds__GetGeoLocationResponse(soap*, ...) allocate, set all public members
/// - _tds__GetGeoLocationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__GetGeoLocationResponse(soap*, _tds__GetGeoLocationResponse*) deserialize from a stream
/// - int soap_write__tds__GetGeoLocationResponse(soap*, _tds__GetGeoLocationResponse*) serialize to a stream
/// - _tds__GetGeoLocationResponse* _tds__GetGeoLocationResponse::soap_dup(soap*) returns deep copy of _tds__GetGeoLocationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__GetGeoLocationResponse::soap_del() deep deletes _tds__GetGeoLocationResponse data members, use only after _tds__GetGeoLocationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__GetGeoLocationResponse::soap_type() returns SOAP_TYPE__tds__GetGeoLocationResponse or derived type identifier
class _tds__GetGeoLocationResponse
{ public:
/// Vector of tt__LocationEntity* of length 0..unbounded.
    std::vector<tt__LocationEntity*    > Location                       0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetGeoLocation
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetGeoLocation is a complexType.
///
/// @note class _tds__SetGeoLocation operations:
/// - _tds__SetGeoLocation* soap_new__tds__SetGeoLocation(soap*) allocate and default initialize
/// - _tds__SetGeoLocation* soap_new__tds__SetGeoLocation(soap*, int num) allocate and default initialize an array
/// - _tds__SetGeoLocation* soap_new_req__tds__SetGeoLocation(soap*, ...) allocate, set required members
/// - _tds__SetGeoLocation* soap_new_set__tds__SetGeoLocation(soap*, ...) allocate, set all public members
/// - _tds__SetGeoLocation::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetGeoLocation(soap*, _tds__SetGeoLocation*) deserialize from a stream
/// - int soap_write__tds__SetGeoLocation(soap*, _tds__SetGeoLocation*) serialize to a stream
/// - _tds__SetGeoLocation* _tds__SetGeoLocation::soap_dup(soap*) returns deep copy of _tds__SetGeoLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetGeoLocation::soap_del() deep deletes _tds__SetGeoLocation data members, use only after _tds__SetGeoLocation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetGeoLocation::soap_type() returns SOAP_TYPE__tds__SetGeoLocation or derived type identifier
class _tds__SetGeoLocation
{ public:
/// Vector of tt__LocationEntity* of length 1..unbounded.
    std::vector<tt__LocationEntity*    > Location                       1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetGeoLocationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetGeoLocationResponse is a complexType.
///
/// @note class _tds__SetGeoLocationResponse operations:
/// - _tds__SetGeoLocationResponse* soap_new__tds__SetGeoLocationResponse(soap*) allocate and default initialize
/// - _tds__SetGeoLocationResponse* soap_new__tds__SetGeoLocationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__SetGeoLocationResponse* soap_new_req__tds__SetGeoLocationResponse(soap*, ...) allocate, set required members
/// - _tds__SetGeoLocationResponse* soap_new_set__tds__SetGeoLocationResponse(soap*, ...) allocate, set all public members
/// - _tds__SetGeoLocationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__SetGeoLocationResponse(soap*, _tds__SetGeoLocationResponse*) deserialize from a stream
/// - int soap_write__tds__SetGeoLocationResponse(soap*, _tds__SetGeoLocationResponse*) serialize to a stream
/// - _tds__SetGeoLocationResponse* _tds__SetGeoLocationResponse::soap_dup(soap*) returns deep copy of _tds__SetGeoLocationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__SetGeoLocationResponse::soap_del() deep deletes _tds__SetGeoLocationResponse data members, use only after _tds__SetGeoLocationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__SetGeoLocationResponse::soap_type() returns SOAP_TYPE__tds__SetGeoLocationResponse or derived type identifier
class _tds__SetGeoLocationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocation
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocation is a complexType.
///
/// @note class _tds__DeleteGeoLocation operations:
/// - _tds__DeleteGeoLocation* soap_new__tds__DeleteGeoLocation(soap*) allocate and default initialize
/// - _tds__DeleteGeoLocation* soap_new__tds__DeleteGeoLocation(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteGeoLocation* soap_new_req__tds__DeleteGeoLocation(soap*, ...) allocate, set required members
/// - _tds__DeleteGeoLocation* soap_new_set__tds__DeleteGeoLocation(soap*, ...) allocate, set all public members
/// - _tds__DeleteGeoLocation::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteGeoLocation(soap*, _tds__DeleteGeoLocation*) deserialize from a stream
/// - int soap_write__tds__DeleteGeoLocation(soap*, _tds__DeleteGeoLocation*) serialize to a stream
/// - _tds__DeleteGeoLocation* _tds__DeleteGeoLocation::soap_dup(soap*) returns deep copy of _tds__DeleteGeoLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteGeoLocation::soap_del() deep deletes _tds__DeleteGeoLocation data members, use only after _tds__DeleteGeoLocation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteGeoLocation::soap_type() returns SOAP_TYPE__tds__DeleteGeoLocation or derived type identifier
class _tds__DeleteGeoLocation
{ public:
/// Vector of tt__LocationEntity* of length 1..unbounded.
    std::vector<tt__LocationEntity*    > Location                       1;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocationResponse is a complexType.
///
/// @note class _tds__DeleteGeoLocationResponse operations:
/// - _tds__DeleteGeoLocationResponse* soap_new__tds__DeleteGeoLocationResponse(soap*) allocate and default initialize
/// - _tds__DeleteGeoLocationResponse* soap_new__tds__DeleteGeoLocationResponse(soap*, int num) allocate and default initialize an array
/// - _tds__DeleteGeoLocationResponse* soap_new_req__tds__DeleteGeoLocationResponse(soap*, ...) allocate, set required members
/// - _tds__DeleteGeoLocationResponse* soap_new_set__tds__DeleteGeoLocationResponse(soap*, ...) allocate, set all public members
/// - _tds__DeleteGeoLocationResponse::soap_default(soap*) default initialize members
/// - int soap_read__tds__DeleteGeoLocationResponse(soap*, _tds__DeleteGeoLocationResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteGeoLocationResponse(soap*, _tds__DeleteGeoLocationResponse*) serialize to a stream
/// - _tds__DeleteGeoLocationResponse* _tds__DeleteGeoLocationResponse::soap_dup(soap*) returns deep copy of _tds__DeleteGeoLocationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tds__DeleteGeoLocationResponse::soap_del() deep deletes _tds__DeleteGeoLocationResponse data members, use only after _tds__DeleteGeoLocationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tds__DeleteGeoLocationResponse::soap_type() returns SOAP_TYPE__tds__DeleteGeoLocationResponse or derived type identifier
class _tds__DeleteGeoLocationResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/schema":DeviceEntity is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Base class for physical entities like inputs and outputs.
/// </BLOCKQUOTE></PRE>
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":VideoSource as tt__VideoSource
/// - "http://www.onvif.org/ver10/schema":AudioSource as tt__AudioSource
/// - "http://www.onvif.org/ver10/schema":VideoOutput as tt__VideoOutput
/// - "http://www.onvif.org/ver10/schema":AudioOutput as tt__AudioOutput
/// - "http://www.onvif.org/ver10/schema":NetworkInterface as tt__NetworkInterface
/// - "http://www.onvif.org/ver10/schema":RelayOutput as tt__RelayOutput
/// - "http://www.onvif.org/ver10/schema":DigitalInput as tt__DigitalInput
/// - "http://www.onvif.org/ver10/schema":PTZNode as tt__PTZNode
/// - "http://www.onvif.org/ver10/schema":OSDConfiguration as tt__OSDConfiguration
/// - "http://www.onvif.org/ver10/device/wsdl":StorageConfiguration as tds__StorageConfiguration
///
/// @note class tt__DeviceEntity operations:
/// - tt__DeviceEntity* soap_new_tt__DeviceEntity(soap*) allocate and default initialize
/// - tt__DeviceEntity* soap_new_tt__DeviceEntity(soap*, int num) allocate and default initialize an array
/// - tt__DeviceEntity* soap_new_req_tt__DeviceEntity(soap*, ...) allocate, set required members
/// - tt__DeviceEntity* soap_new_set_tt__DeviceEntity(soap*, ...) allocate, set all public members
/// - tt__DeviceEntity::soap_default(soap*) default initialize members
/// - int soap_read_tt__DeviceEntity(soap*, tt__DeviceEntity*) deserialize from a stream
/// - int soap_write_tt__DeviceEntity(soap*, tt__DeviceEntity*) serialize to a stream
/// - tt__DeviceEntity* tt__DeviceEntity::soap_dup(soap*) returns deep copy of tt__DeviceEntity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DeviceEntity::soap_del() deep deletes tt__DeviceEntity data members, use only after tt__DeviceEntity::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DeviceEntity::soap_type() returns SOAP_TYPE_tt__DeviceEntity or derived type identifier
class tt__DeviceEntity : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":IntRectangle is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Rectangle defined by lower left corner position and size. Units are pixel.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__IntRectangle operations:
/// - tt__IntRectangle* soap_new_tt__IntRectangle(soap*) allocate and default initialize
/// - tt__IntRectangle* soap_new_tt__IntRectangle(soap*, int num) allocate and default initialize an array
/// - tt__IntRectangle* soap_new_req_tt__IntRectangle(soap*, ...) allocate, set required members
/// - tt__IntRectangle* soap_new_set_tt__IntRectangle(soap*, ...) allocate, set all public members
/// - tt__IntRectangle::soap_default(soap*) default initialize members
/// - int soap_read_tt__IntRectangle(soap*, tt__IntRectangle*) deserialize from a stream
/// - int soap_write_tt__IntRectangle(soap*, tt__IntRectangle*) serialize to a stream
/// - tt__IntRectangle* tt__IntRectangle::soap_dup(soap*) returns deep copy of tt__IntRectangle, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IntRectangle::soap_del() deep deletes tt__IntRectangle data members, use only after tt__IntRectangle::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IntRectangle::soap_type() returns SOAP_TYPE_tt__IntRectangle or derived type identifier
class tt__IntRectangle : public xsd__anyType
{ public:
/// Attribute "x" of type xs:int.
  @ int                                  x                              1;	///< Required attribute.
/// Attribute "y" of type xs:int.
  @ int                                  y                              1;	///< Required attribute.
/// Attribute "width" of type xs:int.
  @ int                                  width                          1;	///< Required attribute.
/// Attribute "height" of type xs:int.
  @ int                                  height                         1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":IntRectangleRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of a rectangle. The rectangle itself is defined by lower left corner position and size. Units are pixel.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__IntRectangleRange operations:
/// - tt__IntRectangleRange* soap_new_tt__IntRectangleRange(soap*) allocate and default initialize
/// - tt__IntRectangleRange* soap_new_tt__IntRectangleRange(soap*, int num) allocate and default initialize an array
/// - tt__IntRectangleRange* soap_new_req_tt__IntRectangleRange(soap*, ...) allocate, set required members
/// - tt__IntRectangleRange* soap_new_set_tt__IntRectangleRange(soap*, ...) allocate, set all public members
/// - tt__IntRectangleRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__IntRectangleRange(soap*, tt__IntRectangleRange*) deserialize from a stream
/// - int soap_write_tt__IntRectangleRange(soap*, tt__IntRectangleRange*) serialize to a stream
/// - tt__IntRectangleRange* tt__IntRectangleRange::soap_dup(soap*) returns deep copy of tt__IntRectangleRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IntRectangleRange::soap_del() deep deletes tt__IntRectangleRange data members, use only after tt__IntRectangleRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IntRectangleRange::soap_type() returns SOAP_TYPE_tt__IntRectangleRange or derived type identifier
class tt__IntRectangleRange : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Range of X-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "XRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        XRange                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of Y-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "YRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        YRange                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of width.
/// </BLOCKQUOTE></PRE>
///
/// Element "WidthRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        WidthRange                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of height.
/// </BLOCKQUOTE></PRE>
///
/// Element "HeightRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        HeightRange                    1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":IntRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of values greater equal Min value and less equal Max value.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__IntRange operations:
/// - tt__IntRange* soap_new_tt__IntRange(soap*) allocate and default initialize
/// - tt__IntRange* soap_new_tt__IntRange(soap*, int num) allocate and default initialize an array
/// - tt__IntRange* soap_new_req_tt__IntRange(soap*, ...) allocate, set required members
/// - tt__IntRange* soap_new_set_tt__IntRange(soap*, ...) allocate, set all public members
/// - tt__IntRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__IntRange(soap*, tt__IntRange*) deserialize from a stream
/// - int soap_write_tt__IntRange(soap*, tt__IntRange*) serialize to a stream
/// - tt__IntRange* tt__IntRange::soap_dup(soap*) returns deep copy of tt__IntRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IntRange::soap_del() deep deletes tt__IntRange data members, use only after tt__IntRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IntRange::soap_type() returns SOAP_TYPE_tt__IntRange or derived type identifier
class tt__IntRange : public xsd__anyType
{ public:
/// Element "Min" of type xs:int.
    int                                  Min                            1;	///< Required element.
/// Element "Max" of type xs:int.
    int                                  Max                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":FloatRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of values greater equal Min value and less equal Max value.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__FloatRange operations:
/// - tt__FloatRange* soap_new_tt__FloatRange(soap*) allocate and default initialize
/// - tt__FloatRange* soap_new_tt__FloatRange(soap*, int num) allocate and default initialize an array
/// - tt__FloatRange* soap_new_req_tt__FloatRange(soap*, ...) allocate, set required members
/// - tt__FloatRange* soap_new_set_tt__FloatRange(soap*, ...) allocate, set all public members
/// - tt__FloatRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__FloatRange(soap*, tt__FloatRange*) deserialize from a stream
/// - int soap_write_tt__FloatRange(soap*, tt__FloatRange*) serialize to a stream
/// - tt__FloatRange* tt__FloatRange::soap_dup(soap*) returns deep copy of tt__FloatRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FloatRange::soap_del() deep deletes tt__FloatRange data members, use only after tt__FloatRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FloatRange::soap_type() returns SOAP_TYPE_tt__FloatRange or derived type identifier
class tt__FloatRange : public xsd__anyType
{ public:
/// Element "Min" of type xs:float.
    float                                Min                            1;	///< Required element.
/// Element "Max" of type xs:float.
    float                                Max                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":DurationRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of duration greater equal Min duration and less equal Max duration.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__DurationRange operations:
/// - tt__DurationRange* soap_new_tt__DurationRange(soap*) allocate and default initialize
/// - tt__DurationRange* soap_new_tt__DurationRange(soap*, int num) allocate and default initialize an array
/// - tt__DurationRange* soap_new_req_tt__DurationRange(soap*, ...) allocate, set required members
/// - tt__DurationRange* soap_new_set_tt__DurationRange(soap*, ...) allocate, set all public members
/// - tt__DurationRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__DurationRange(soap*, tt__DurationRange*) deserialize from a stream
/// - int soap_write_tt__DurationRange(soap*, tt__DurationRange*) serialize to a stream
/// - tt__DurationRange* tt__DurationRange::soap_dup(soap*) returns deep copy of tt__DurationRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DurationRange::soap_del() deep deletes tt__DurationRange data members, use only after tt__DurationRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DurationRange::soap_type() returns SOAP_TYPE_tt__DurationRange or derived type identifier
class tt__DurationRange : public xsd__anyType
{ public:
/// Element "Min" of type xs:duration.
    xsd__duration                        Min                            1;	///< Required element.
/// Element "Max" of type xs:duration.
    xsd__duration                        Max                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":IntList is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   List of values.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__IntList operations:
/// - tt__IntList* soap_new_tt__IntList(soap*) allocate and default initialize
/// - tt__IntList* soap_new_tt__IntList(soap*, int num) allocate and default initialize an array
/// - tt__IntList* soap_new_req_tt__IntList(soap*, ...) allocate, set required members
/// - tt__IntList* soap_new_set_tt__IntList(soap*, ...) allocate, set all public members
/// - tt__IntList::soap_default(soap*) default initialize members
/// - int soap_read_tt__IntList(soap*, tt__IntList*) deserialize from a stream
/// - int soap_write_tt__IntList(soap*, tt__IntList*) serialize to a stream
/// - tt__IntList* tt__IntList::soap_dup(soap*) returns deep copy of tt__IntList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IntList::soap_del() deep deletes tt__IntList data members, use only after tt__IntList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IntList::soap_type() returns SOAP_TYPE_tt__IntList or derived type identifier
class tt__IntList : public xsd__anyType
{ public:
/// Vector of int of length 0..unbounded.
    std::vector<int                    > Items                          0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":FloatList is a complexType.
///
/// @note class tt__FloatList operations:
/// - tt__FloatList* soap_new_tt__FloatList(soap*) allocate and default initialize
/// - tt__FloatList* soap_new_tt__FloatList(soap*, int num) allocate and default initialize an array
/// - tt__FloatList* soap_new_req_tt__FloatList(soap*, ...) allocate, set required members
/// - tt__FloatList* soap_new_set_tt__FloatList(soap*, ...) allocate, set all public members
/// - tt__FloatList::soap_default(soap*) default initialize members
/// - int soap_read_tt__FloatList(soap*, tt__FloatList*) deserialize from a stream
/// - int soap_write_tt__FloatList(soap*, tt__FloatList*) serialize to a stream
/// - tt__FloatList* tt__FloatList::soap_dup(soap*) returns deep copy of tt__FloatList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FloatList::soap_del() deep deletes tt__FloatList data members, use only after tt__FloatList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FloatList::soap_type() returns SOAP_TYPE_tt__FloatList or derived type identifier
class tt__FloatList : public xsd__anyType
{ public:
/// Vector of float of length 0..unbounded.
    std::vector<float                  > Items                          0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":AnyHolder is a complexType.
///
/// @note class tt__AnyHolder operations:
/// - tt__AnyHolder* soap_new_tt__AnyHolder(soap*) allocate and default initialize
/// - tt__AnyHolder* soap_new_tt__AnyHolder(soap*, int num) allocate and default initialize an array
/// - tt__AnyHolder* soap_new_req_tt__AnyHolder(soap*, ...) allocate, set required members
/// - tt__AnyHolder* soap_new_set_tt__AnyHolder(soap*, ...) allocate, set all public members
/// - tt__AnyHolder::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnyHolder(soap*, tt__AnyHolder*) deserialize from a stream
/// - int soap_write_tt__AnyHolder(soap*, tt__AnyHolder*) serialize to a stream
/// - tt__AnyHolder* tt__AnyHolder::soap_dup(soap*) returns deep copy of tt__AnyHolder, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnyHolder::soap_del() deep deletes tt__AnyHolder data members, use only after tt__AnyHolder::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnyHolder::soap_type() returns SOAP_TYPE_tt__AnyHolder or derived type identifier
class tt__AnyHolder : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceExtension is a complexType.
///
/// @note class tt__VideoSourceExtension operations:
/// - tt__VideoSourceExtension* soap_new_tt__VideoSourceExtension(soap*) allocate and default initialize
/// - tt__VideoSourceExtension* soap_new_tt__VideoSourceExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceExtension* soap_new_req_tt__VideoSourceExtension(soap*, ...) allocate, set required members
/// - tt__VideoSourceExtension* soap_new_set_tt__VideoSourceExtension(soap*, ...) allocate, set all public members
/// - tt__VideoSourceExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceExtension(soap*, tt__VideoSourceExtension*) deserialize from a stream
/// - int soap_write_tt__VideoSourceExtension(soap*, tt__VideoSourceExtension*) serialize to a stream
/// - tt__VideoSourceExtension* tt__VideoSourceExtension::soap_dup(soap*) returns deep copy of tt__VideoSourceExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceExtension::soap_del() deep deletes tt__VideoSourceExtension data members, use only after tt__VideoSourceExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceExtension::soap_type() returns SOAP_TYPE_tt__VideoSourceExtension or derived type identifier
class tt__VideoSourceExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the image sensor. To be used if imaging service 2.00 is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "Imaging" of type "http://www.onvif.org/ver10/schema":ImagingSettings20.
    tt__ImagingSettings20*               Imaging                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceExtension2.
    tt__VideoSourceExtension2*           Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceExtension2 is a complexType.
///
/// @note class tt__VideoSourceExtension2 operations:
/// - tt__VideoSourceExtension2* soap_new_tt__VideoSourceExtension2(soap*) allocate and default initialize
/// - tt__VideoSourceExtension2* soap_new_tt__VideoSourceExtension2(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceExtension2* soap_new_req_tt__VideoSourceExtension2(soap*, ...) allocate, set required members
/// - tt__VideoSourceExtension2* soap_new_set_tt__VideoSourceExtension2(soap*, ...) allocate, set all public members
/// - tt__VideoSourceExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceExtension2(soap*, tt__VideoSourceExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoSourceExtension2(soap*, tt__VideoSourceExtension2*) serialize to a stream
/// - tt__VideoSourceExtension2* tt__VideoSourceExtension2::soap_dup(soap*) returns deep copy of tt__VideoSourceExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceExtension2::soap_del() deep deletes tt__VideoSourceExtension2 data members, use only after tt__VideoSourceExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceExtension2::soap_type() returns SOAP_TYPE_tt__VideoSourceExtension2 or derived type identifier
class tt__VideoSourceExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Profile is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A media profile consists of a set of media configurations. Media profiles are used by a client
///   to configure properties of a media stream from an NVT.<br/>
///   An NVT shall provide at least one media profile at boot. An NVT should provide ready to use
///   profiles for the most common media configurations that the device offers.<br/>
///   A profile consists of a set of interconnected configuration entities. Configurations are provided
///   by the NVT and can be either static or created dynamically by the NVT. For example, the
///   dynamic configurations can be created by the NVT depending on current available encoding
///   resources.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__Profile operations:
/// - tt__Profile* soap_new_tt__Profile(soap*) allocate and default initialize
/// - tt__Profile* soap_new_tt__Profile(soap*, int num) allocate and default initialize an array
/// - tt__Profile* soap_new_req_tt__Profile(soap*, ...) allocate, set required members
/// - tt__Profile* soap_new_set_tt__Profile(soap*, ...) allocate, set all public members
/// - tt__Profile::soap_default(soap*) default initialize members
/// - int soap_read_tt__Profile(soap*, tt__Profile*) deserialize from a stream
/// - int soap_write_tt__Profile(soap*, tt__Profile*) serialize to a stream
/// - tt__Profile* tt__Profile::soap_dup(soap*) returns deep copy of tt__Profile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Profile::soap_del() deep deletes tt__Profile data members, use only after tt__Profile::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Profile::soap_type() returns SOAP_TYPE_tt__Profile or derived type identifier
class tt__Profile : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   User readable name of the profile.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Video input.
/// </BLOCKQUOTE></PRE>
///
/// Element "VideoSourceConfiguration" of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
    tt__VideoSourceConfiguration*        VideoSourceConfiguration       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio input.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioSourceConfiguration" of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
    tt__AudioSourceConfiguration*        AudioSourceConfiguration       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Video encoder.
/// </BLOCKQUOTE></PRE>
///
/// Element "VideoEncoderConfiguration" of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    tt__VideoEncoderConfiguration*       VideoEncoderConfiguration      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio encoder.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioEncoderConfiguration" of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    tt__AudioEncoderConfiguration*       AudioEncoderConfiguration      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the video analytics module and rule engine.
/// </BLOCKQUOTE></PRE>
///
/// Element "VideoAnalyticsConfiguration" of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    tt__VideoAnalyticsConfiguration*     VideoAnalyticsConfiguration    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the pan tilt zoom unit.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZConfiguration" of type "http://www.onvif.org/ver10/schema":PTZConfiguration.
    tt__PTZConfiguration*                PTZConfiguration               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the metadata stream.
/// </BLOCKQUOTE></PRE>
///
/// Element "MetadataConfiguration" of type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
    tt__MetadataConfiguration*           MetadataConfiguration          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions defined in ONVIF 2.0
/// </BLOCKQUOTE></PRE>
///
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ProfileExtension.
    tt__ProfileExtension*                Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of the profile.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   A value of true signals that the profile cannot be deleted. Default is false.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "fixed" of type xs:boolean.
  @ bool*                                fixed                          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileExtension is a complexType.
///
/// @note class tt__ProfileExtension operations:
/// - tt__ProfileExtension* soap_new_tt__ProfileExtension(soap*) allocate and default initialize
/// - tt__ProfileExtension* soap_new_tt__ProfileExtension(soap*, int num) allocate and default initialize an array
/// - tt__ProfileExtension* soap_new_req_tt__ProfileExtension(soap*, ...) allocate, set required members
/// - tt__ProfileExtension* soap_new_set_tt__ProfileExtension(soap*, ...) allocate, set all public members
/// - tt__ProfileExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ProfileExtension(soap*, tt__ProfileExtension*) deserialize from a stream
/// - int soap_write_tt__ProfileExtension(soap*, tt__ProfileExtension*) serialize to a stream
/// - tt__ProfileExtension* tt__ProfileExtension::soap_dup(soap*) returns deep copy of tt__ProfileExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ProfileExtension::soap_del() deep deletes tt__ProfileExtension data members, use only after tt__ProfileExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ProfileExtension::soap_type() returns SOAP_TYPE_tt__ProfileExtension or derived type identifier
class tt__ProfileExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio output.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioOutputConfiguration" of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
    tt__AudioOutputConfiguration*        AudioOutputConfiguration       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio decoder.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioDecoderConfiguration" of type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
    tt__AudioDecoderConfiguration*       AudioDecoderConfiguration      0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ProfileExtension2.
    tt__ProfileExtension2*               Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileExtension2 is a complexType.
///
/// @note class tt__ProfileExtension2 operations:
/// - tt__ProfileExtension2* soap_new_tt__ProfileExtension2(soap*) allocate and default initialize
/// - tt__ProfileExtension2* soap_new_tt__ProfileExtension2(soap*, int num) allocate and default initialize an array
/// - tt__ProfileExtension2* soap_new_req_tt__ProfileExtension2(soap*, ...) allocate, set required members
/// - tt__ProfileExtension2* soap_new_set_tt__ProfileExtension2(soap*, ...) allocate, set all public members
/// - tt__ProfileExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__ProfileExtension2(soap*, tt__ProfileExtension2*) deserialize from a stream
/// - int soap_write_tt__ProfileExtension2(soap*, tt__ProfileExtension2*) serialize to a stream
/// - tt__ProfileExtension2* tt__ProfileExtension2::soap_dup(soap*) returns deep copy of tt__ProfileExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ProfileExtension2::soap_del() deep deletes tt__ProfileExtension2 data members, use only after tt__ProfileExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ProfileExtension2::soap_type() returns SOAP_TYPE_tt__ProfileExtension2 or derived type identifier
class tt__ProfileExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ConfigurationEntity is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Base type defining the common properties of a configuration.
/// </BLOCKQUOTE></PRE>
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":VideoSourceConfiguration as tt__VideoSourceConfiguration
/// - "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration as tt__VideoEncoderConfiguration
/// - "http://www.onvif.org/ver10/schema":VideoEncoder2Configuration as tt__VideoEncoder2Configuration
/// - "http://www.onvif.org/ver10/schema":AudioSourceConfiguration as tt__AudioSourceConfiguration
/// - "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration as tt__AudioEncoderConfiguration
/// - "http://www.onvif.org/ver10/schema":AudioEncoder2Configuration as tt__AudioEncoder2Configuration
/// - "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration as tt__VideoAnalyticsConfiguration
/// - "http://www.onvif.org/ver10/schema":MetadataConfiguration as tt__MetadataConfiguration
/// - "http://www.onvif.org/ver10/schema":VideoOutputConfiguration as tt__VideoOutputConfiguration
/// - "http://www.onvif.org/ver10/schema":AudioOutputConfiguration as tt__AudioOutputConfiguration
/// - "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration as tt__AudioDecoderConfiguration
/// - "http://www.onvif.org/ver10/schema":PTZConfiguration as tt__PTZConfiguration
/// - "http://www.onvif.org/ver10/schema":AnalyticsEngine as tt__AnalyticsEngine
/// - "http://www.onvif.org/ver10/schema":AnalyticsEngineInput as tt__AnalyticsEngineInput
/// - "http://www.onvif.org/ver10/schema":AnalyticsEngineControl as tt__AnalyticsEngineControl
///
/// @note class tt__ConfigurationEntity operations:
/// - tt__ConfigurationEntity* soap_new_tt__ConfigurationEntity(soap*) allocate and default initialize
/// - tt__ConfigurationEntity* soap_new_tt__ConfigurationEntity(soap*, int num) allocate and default initialize an array
/// - tt__ConfigurationEntity* soap_new_req_tt__ConfigurationEntity(soap*, ...) allocate, set required members
/// - tt__ConfigurationEntity* soap_new_set_tt__ConfigurationEntity(soap*, ...) allocate, set all public members
/// - tt__ConfigurationEntity::soap_default(soap*) default initialize members
/// - int soap_read_tt__ConfigurationEntity(soap*, tt__ConfigurationEntity*) deserialize from a stream
/// - int soap_write_tt__ConfigurationEntity(soap*, tt__ConfigurationEntity*) serialize to a stream
/// - tt__ConfigurationEntity* tt__ConfigurationEntity::soap_dup(soap*) returns deep copy of tt__ConfigurationEntity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ConfigurationEntity::soap_del() deep deletes tt__ConfigurationEntity data members, use only after tt__ConfigurationEntity::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ConfigurationEntity::soap_type() returns SOAP_TYPE_tt__ConfigurationEntity or derived type identifier
class tt__ConfigurationEntity : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension is a complexType.
///
/// @note class tt__VideoSourceConfigurationExtension operations:
/// - tt__VideoSourceConfigurationExtension* soap_new_tt__VideoSourceConfigurationExtension(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationExtension* soap_new_tt__VideoSourceConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationExtension* soap_new_req_tt__VideoSourceConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationExtension* soap_new_set_tt__VideoSourceConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationExtension(soap*, tt__VideoSourceConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationExtension(soap*, tt__VideoSourceConfigurationExtension*) serialize to a stream
/// - tt__VideoSourceConfigurationExtension* tt__VideoSourceConfigurationExtension::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationExtension::soap_del() deep deletes tt__VideoSourceConfigurationExtension data members, use only after tt__VideoSourceConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationExtension::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationExtension or derived type identifier
class tt__VideoSourceConfigurationExtension : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure rotation of captured image.
///   What resolutions a device supports shall be unaffected by the Rotate parameters.<br/>
///   If a device is configured with Rotate=AUTO, the device shall take control over the Degree parameter and automatically update it so that a client can query current rotation.<br/>
///   The device shall automatically apply the same rotation to its pan/tilt control direction depending on the following condition: if Reverse=AUTO in PTControlDirection or if the device doesnt support Reverse in PTControlDirection
/// </BLOCKQUOTE></PRE>
///
/// Element "Rotate" of type "http://www.onvif.org/ver10/schema":Rotate.
    tt__Rotate*                          Rotate                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension2.
    tt__VideoSourceConfigurationExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension2 is a complexType.
///
/// @note class tt__VideoSourceConfigurationExtension2 operations:
/// - tt__VideoSourceConfigurationExtension2* soap_new_tt__VideoSourceConfigurationExtension2(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationExtension2* soap_new_tt__VideoSourceConfigurationExtension2(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationExtension2* soap_new_req_tt__VideoSourceConfigurationExtension2(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationExtension2* soap_new_set_tt__VideoSourceConfigurationExtension2(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationExtension2(soap*, tt__VideoSourceConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationExtension2(soap*, tt__VideoSourceConfigurationExtension2*) serialize to a stream
/// - tt__VideoSourceConfigurationExtension2* tt__VideoSourceConfigurationExtension2::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationExtension2::soap_del() deep deletes tt__VideoSourceConfigurationExtension2 data members, use only after tt__VideoSourceConfigurationExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationExtension2::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationExtension2 or derived type identifier
class tt__VideoSourceConfigurationExtension2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element describing the geometric lens distortion. Multiple instances for future variable lens support.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__LensDescription* of length 0..unbounded.
    std::vector<tt__LensDescription*   > LensDescription                0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Optional element describing the scene orientation in the cameras field of view.
/// </BLOCKQUOTE></PRE>
///
/// Element "SceneOrientation" of type "http://www.onvif.org/ver10/schema":SceneOrientation.
    tt__SceneOrientation*                SceneOrientation               0;	///< Optional element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Rotate is a complexType.
///
/// @note class tt__Rotate operations:
/// - tt__Rotate* soap_new_tt__Rotate(soap*) allocate and default initialize
/// - tt__Rotate* soap_new_tt__Rotate(soap*, int num) allocate and default initialize an array
/// - tt__Rotate* soap_new_req_tt__Rotate(soap*, ...) allocate, set required members
/// - tt__Rotate* soap_new_set_tt__Rotate(soap*, ...) allocate, set all public members
/// - tt__Rotate::soap_default(soap*) default initialize members
/// - int soap_read_tt__Rotate(soap*, tt__Rotate*) deserialize from a stream
/// - int soap_write_tt__Rotate(soap*, tt__Rotate*) serialize to a stream
/// - tt__Rotate* tt__Rotate::soap_dup(soap*) returns deep copy of tt__Rotate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Rotate::soap_del() deep deletes tt__Rotate data members, use only after tt__Rotate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Rotate::soap_type() returns SOAP_TYPE_tt__Rotate or derived type identifier
class tt__Rotate : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Rotation feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":RotateMode.
    tt__RotateMode                       Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to configure how much degree of clockwise rotation of image for On mode. Omitting this parameter for On mode means 180 degree rotation.
/// </BLOCKQUOTE></PRE>
///
/// Element "Degree" of type xs:int.
    int*                                 Degree                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RotateExtension.
    tt__RotateExtension*                 Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RotateExtension is a complexType.
///
/// @note class tt__RotateExtension operations:
/// - tt__RotateExtension* soap_new_tt__RotateExtension(soap*) allocate and default initialize
/// - tt__RotateExtension* soap_new_tt__RotateExtension(soap*, int num) allocate and default initialize an array
/// - tt__RotateExtension* soap_new_req_tt__RotateExtension(soap*, ...) allocate, set required members
/// - tt__RotateExtension* soap_new_set_tt__RotateExtension(soap*, ...) allocate, set all public members
/// - tt__RotateExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RotateExtension(soap*, tt__RotateExtension*) deserialize from a stream
/// - int soap_write_tt__RotateExtension(soap*, tt__RotateExtension*) serialize to a stream
/// - tt__RotateExtension* tt__RotateExtension::soap_dup(soap*) returns deep copy of tt__RotateExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RotateExtension::soap_del() deep deletes tt__RotateExtension data members, use only after tt__RotateExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RotateExtension::soap_type() returns SOAP_TYPE_tt__RotateExtension or derived type identifier
class tt__RotateExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":LensProjection is a complexType.
///
/// @note class tt__LensProjection operations:
/// - tt__LensProjection* soap_new_tt__LensProjection(soap*) allocate and default initialize
/// - tt__LensProjection* soap_new_tt__LensProjection(soap*, int num) allocate and default initialize an array
/// - tt__LensProjection* soap_new_req_tt__LensProjection(soap*, ...) allocate, set required members
/// - tt__LensProjection* soap_new_set_tt__LensProjection(soap*, ...) allocate, set all public members
/// - tt__LensProjection::soap_default(soap*) default initialize members
/// - int soap_read_tt__LensProjection(soap*, tt__LensProjection*) deserialize from a stream
/// - int soap_write_tt__LensProjection(soap*, tt__LensProjection*) serialize to a stream
/// - tt__LensProjection* tt__LensProjection::soap_dup(soap*) returns deep copy of tt__LensProjection, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LensProjection::soap_del() deep deletes tt__LensProjection data members, use only after tt__LensProjection::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LensProjection::soap_type() returns SOAP_TYPE_tt__LensProjection or derived type identifier
class tt__LensProjection : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Angle of incidence.
/// </BLOCKQUOTE></PRE>
///
/// Element "Angle" of type xs:float.
    float                                Angle                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Mapping radius as a consequence of the emergent angle.
/// </BLOCKQUOTE></PRE>
///
/// Element "Radius" of type xs:float.
    float                                Radius                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional ray absorption at the given angle due to vignetting. A value of one means no absorption.
/// </BLOCKQUOTE></PRE>
///
/// Element "Transmittance" of type xs:float.
    float*                               Transmittance                  0;	///< Optional element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LensOffset is a complexType.
///
/// @note class tt__LensOffset operations:
/// - tt__LensOffset* soap_new_tt__LensOffset(soap*) allocate and default initialize
/// - tt__LensOffset* soap_new_tt__LensOffset(soap*, int num) allocate and default initialize an array
/// - tt__LensOffset* soap_new_req_tt__LensOffset(soap*, ...) allocate, set required members
/// - tt__LensOffset* soap_new_set_tt__LensOffset(soap*, ...) allocate, set all public members
/// - tt__LensOffset::soap_default(soap*) default initialize members
/// - int soap_read_tt__LensOffset(soap*, tt__LensOffset*) deserialize from a stream
/// - int soap_write_tt__LensOffset(soap*, tt__LensOffset*) serialize to a stream
/// - tt__LensOffset* tt__LensOffset::soap_dup(soap*) returns deep copy of tt__LensOffset, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LensOffset::soap_del() deep deletes tt__LensOffset data members, use only after tt__LensOffset::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LensOffset::soap_type() returns SOAP_TYPE_tt__LensOffset or derived type identifier
class tt__LensOffset : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional horizontal offset of the lens center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "x" of type xs:float.
  @ float*                               x                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional vertical offset of the lens center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "y" of type xs:float.
  @ float*                               y                              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LensDescription is a complexType.
///
/// @note class tt__LensDescription operations:
/// - tt__LensDescription* soap_new_tt__LensDescription(soap*) allocate and default initialize
/// - tt__LensDescription* soap_new_tt__LensDescription(soap*, int num) allocate and default initialize an array
/// - tt__LensDescription* soap_new_req_tt__LensDescription(soap*, ...) allocate, set required members
/// - tt__LensDescription* soap_new_set_tt__LensDescription(soap*, ...) allocate, set all public members
/// - tt__LensDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__LensDescription(soap*, tt__LensDescription*) deserialize from a stream
/// - int soap_write_tt__LensDescription(soap*, tt__LensDescription*) serialize to a stream
/// - tt__LensDescription* tt__LensDescription::soap_dup(soap*) returns deep copy of tt__LensDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LensDescription::soap_del() deep deletes tt__LensDescription data members, use only after tt__LensDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LensDescription::soap_type() returns SOAP_TYPE_tt__LensDescription or derived type identifier
class tt__LensDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Offset of the lens center to the imager center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
///
/// Element "Offset" of type "http://www.onvif.org/ver10/schema":LensOffset.
    tt__LensOffset*                      Offset                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Radial description of the projection characteristics. The resulting curve is defined by the B-Spline interpolation over the given elements. The element for Radius zero shall not be provided. The projection points shall be ordered with ascending Radius. Items outside the last projection Radius shall be assumed to be invisible (black).
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__LensProjection* of length 1..unbounded.
    std::vector<tt__LensProjection*    > Projection                     1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Compensation of the x coordinate needed for the ONVIF normalized coordinate system.
/// </BLOCKQUOTE></PRE>
///
/// Element "XFactor" of type xs:float.
    float                                XFactor                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Optional focal length of the optical system.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "FocalLength" of type xs:float.
  @ float*                               FocalLength                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptions is a complexType.
///
/// @note class tt__VideoSourceConfigurationOptions operations:
/// - tt__VideoSourceConfigurationOptions* soap_new_tt__VideoSourceConfigurationOptions(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationOptions* soap_new_tt__VideoSourceConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationOptions* soap_new_req_tt__VideoSourceConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationOptions* soap_new_set_tt__VideoSourceConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationOptions(soap*, tt__VideoSourceConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptions(soap*, tt__VideoSourceConfigurationOptions*) serialize to a stream
/// - tt__VideoSourceConfigurationOptions* tt__VideoSourceConfigurationOptions::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationOptions::soap_del() deep deletes tt__VideoSourceConfigurationOptions data members, use only after tt__VideoSourceConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationOptions::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationOptions or derived type identifier
class tt__VideoSourceConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported range for the capturing area.
///   Device that does not support cropped streaming shall express BoundsRange option as mentioned below
///   BoundsRange->XRange and BoundsRange->YRange with same Min/Max values HeightRange and WidthRange Min/Max values same as VideoSource Height and Width Limits.
/// </BLOCKQUOTE></PRE>
///
/// Element "BoundsRange" of type "http://www.onvif.org/ver10/schema":IntRectangleRange.
    tt__IntRectangleRange*               BoundsRange                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of physical inputs.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > VideoSourceTokensAvailable     1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension.
    tt__VideoSourceConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum number of profiles.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaximumNumberOfProfiles" of type xs:int.
  @ int*                                 MaximumNumberOfProfiles        0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension is a complexType.
///
/// @note class tt__VideoSourceConfigurationOptionsExtension operations:
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_tt__VideoSourceConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_tt__VideoSourceConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_req_tt__VideoSourceConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_set_tt__VideoSourceConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationOptionsExtension(soap*, tt__VideoSourceConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptionsExtension(soap*, tt__VideoSourceConfigurationOptionsExtension*) serialize to a stream
/// - tt__VideoSourceConfigurationOptionsExtension* tt__VideoSourceConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationOptionsExtension::soap_del() deep deletes tt__VideoSourceConfigurationOptionsExtension data members, use only after tt__VideoSourceConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension or derived type identifier
class tt__VideoSourceConfigurationOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Rotation feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Rotate" of type "http://www.onvif.org/ver10/schema":RotateOptions.
    tt__RotateOptions*                   Rotate                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension2.
    tt__VideoSourceConfigurationOptionsExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension2 is a complexType.
///
/// @note class tt__VideoSourceConfigurationOptionsExtension2 operations:
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_req_tt__VideoSourceConfigurationOptionsExtension2(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_set_tt__VideoSourceConfigurationOptionsExtension2(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationOptionsExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationOptionsExtension2(soap*, tt__VideoSourceConfigurationOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptionsExtension2(soap*, tt__VideoSourceConfigurationOptionsExtension2*) serialize to a stream
/// - tt__VideoSourceConfigurationOptionsExtension2* tt__VideoSourceConfigurationOptionsExtension2::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationOptionsExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationOptionsExtension2::soap_del() deep deletes tt__VideoSourceConfigurationOptionsExtension2 data members, use only after tt__VideoSourceConfigurationOptionsExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationOptionsExtension2::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 or derived type identifier
class tt__VideoSourceConfigurationOptionsExtension2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Scene orientation modes supported by the device for this configuration.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__SceneOrientationMode of length 0..unbounded.
    std::vector<tt__SceneOrientationMode> SceneOrientationMode           0;	///< Multiple elements.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":RotateOptions is a complexType.
///
/// @note class tt__RotateOptions operations:
/// - tt__RotateOptions* soap_new_tt__RotateOptions(soap*) allocate and default initialize
/// - tt__RotateOptions* soap_new_tt__RotateOptions(soap*, int num) allocate and default initialize an array
/// - tt__RotateOptions* soap_new_req_tt__RotateOptions(soap*, ...) allocate, set required members
/// - tt__RotateOptions* soap_new_set_tt__RotateOptions(soap*, ...) allocate, set all public members
/// - tt__RotateOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__RotateOptions(soap*, tt__RotateOptions*) deserialize from a stream
/// - int soap_write_tt__RotateOptions(soap*, tt__RotateOptions*) serialize to a stream
/// - tt__RotateOptions* tt__RotateOptions::soap_dup(soap*) returns deep copy of tt__RotateOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RotateOptions::soap_del() deep deletes tt__RotateOptions data members, use only after tt__RotateOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RotateOptions::soap_type() returns SOAP_TYPE_tt__RotateOptions or derived type identifier
class tt__RotateOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options of Rotate mode parameter.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__RotateMode of length 1..unbounded.
    std::vector<tt__RotateMode         > Mode                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported degree value for rotation.
/// </BLOCKQUOTE></PRE>
///
/// Element "DegreeList" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         DegreeList                     0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RotateOptionsExtension.
    tt__RotateOptionsExtension*          Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RotateOptionsExtension is a complexType.
///
/// @note class tt__RotateOptionsExtension operations:
/// - tt__RotateOptionsExtension* soap_new_tt__RotateOptionsExtension(soap*) allocate and default initialize
/// - tt__RotateOptionsExtension* soap_new_tt__RotateOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__RotateOptionsExtension* soap_new_req_tt__RotateOptionsExtension(soap*, ...) allocate, set required members
/// - tt__RotateOptionsExtension* soap_new_set_tt__RotateOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__RotateOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RotateOptionsExtension(soap*, tt__RotateOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__RotateOptionsExtension(soap*, tt__RotateOptionsExtension*) serialize to a stream
/// - tt__RotateOptionsExtension* tt__RotateOptionsExtension::soap_dup(soap*) returns deep copy of tt__RotateOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RotateOptionsExtension::soap_del() deep deletes tt__RotateOptionsExtension data members, use only after tt__RotateOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RotateOptionsExtension::soap_type() returns SOAP_TYPE_tt__RotateOptionsExtension or derived type identifier
class tt__RotateOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":SceneOrientation is a complexType.
///
/// @note class tt__SceneOrientation operations:
/// - tt__SceneOrientation* soap_new_tt__SceneOrientation(soap*) allocate and default initialize
/// - tt__SceneOrientation* soap_new_tt__SceneOrientation(soap*, int num) allocate and default initialize an array
/// - tt__SceneOrientation* soap_new_req_tt__SceneOrientation(soap*, ...) allocate, set required members
/// - tt__SceneOrientation* soap_new_set_tt__SceneOrientation(soap*, ...) allocate, set all public members
/// - tt__SceneOrientation::soap_default(soap*) default initialize members
/// - int soap_read_tt__SceneOrientation(soap*, tt__SceneOrientation*) deserialize from a stream
/// - int soap_write_tt__SceneOrientation(soap*, tt__SceneOrientation*) serialize to a stream
/// - tt__SceneOrientation* tt__SceneOrientation::soap_dup(soap*) returns deep copy of tt__SceneOrientation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SceneOrientation::soap_del() deep deletes tt__SceneOrientation data members, use only after tt__SceneOrientation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SceneOrientation::soap_type() returns SOAP_TYPE_tt__SceneOrientation or derived type identifier
class tt__SceneOrientation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to assign the way the camera determines the scene orientation.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":SceneOrientationMode.
    tt__SceneOrientationMode             Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Assigned or determined scene orientation based on the Mode. When assigning the Mode to AUTO, this field is optional and will be ignored by the device. When assigning the Mode to MANUAL, this field is required and the device will return an InvalidArgs fault if missing.
/// </BLOCKQUOTE></PRE>
///
/// Element "Orientation" of type xs:string.
    std::string*                         Orientation                    0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoResolution is a complexType.
///
/// @note class tt__VideoResolution operations:
/// - tt__VideoResolution* soap_new_tt__VideoResolution(soap*) allocate and default initialize
/// - tt__VideoResolution* soap_new_tt__VideoResolution(soap*, int num) allocate and default initialize an array
/// - tt__VideoResolution* soap_new_req_tt__VideoResolution(soap*, ...) allocate, set required members
/// - tt__VideoResolution* soap_new_set_tt__VideoResolution(soap*, ...) allocate, set all public members
/// - tt__VideoResolution::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoResolution(soap*, tt__VideoResolution*) deserialize from a stream
/// - int soap_write_tt__VideoResolution(soap*, tt__VideoResolution*) serialize to a stream
/// - tt__VideoResolution* tt__VideoResolution::soap_dup(soap*) returns deep copy of tt__VideoResolution, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoResolution::soap_del() deep deletes tt__VideoResolution data members, use only after tt__VideoResolution::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoResolution::soap_type() returns SOAP_TYPE_tt__VideoResolution or derived type identifier
class tt__VideoResolution : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of the columns of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Width" of type xs:int.
    int                                  Width                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of the lines of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Height" of type xs:int.
    int                                  Height                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoRateControl is a complexType.
///
/// @note class tt__VideoRateControl operations:
/// - tt__VideoRateControl* soap_new_tt__VideoRateControl(soap*) allocate and default initialize
/// - tt__VideoRateControl* soap_new_tt__VideoRateControl(soap*, int num) allocate and default initialize an array
/// - tt__VideoRateControl* soap_new_req_tt__VideoRateControl(soap*, ...) allocate, set required members
/// - tt__VideoRateControl* soap_new_set_tt__VideoRateControl(soap*, ...) allocate, set all public members
/// - tt__VideoRateControl::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoRateControl(soap*, tt__VideoRateControl*) deserialize from a stream
/// - int soap_write_tt__VideoRateControl(soap*, tt__VideoRateControl*) serialize to a stream
/// - tt__VideoRateControl* tt__VideoRateControl::soap_dup(soap*) returns deep copy of tt__VideoRateControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoRateControl::soap_del() deep deletes tt__VideoRateControl data members, use only after tt__VideoRateControl::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoRateControl::soap_type() returns SOAP_TYPE_tt__VideoRateControl or derived type identifier
class tt__VideoRateControl : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum output framerate in fps. If an EncodingInterval is provided the resulting encoded framerate will be reduced by the given factor.
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateLimit" of type xs:int.
    int                                  FrameRateLimit                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Interval at which images are encoded and transmitted. (A value of 1 means that every frame is encoded, a value of 2 means that every 2nd frame is encoded ...)
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingInterval" of type xs:int.
    int                                  EncodingInterval               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the maximum output bitrate in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateLimit" of type xs:int.
    int                                  BitrateLimit                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Configuration is a complexType.
///
/// @note class tt__Mpeg4Configuration operations:
/// - tt__Mpeg4Configuration* soap_new_tt__Mpeg4Configuration(soap*) allocate and default initialize
/// - tt__Mpeg4Configuration* soap_new_tt__Mpeg4Configuration(soap*, int num) allocate and default initialize an array
/// - tt__Mpeg4Configuration* soap_new_req_tt__Mpeg4Configuration(soap*, ...) allocate, set required members
/// - tt__Mpeg4Configuration* soap_new_set_tt__Mpeg4Configuration(soap*, ...) allocate, set all public members
/// - tt__Mpeg4Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Mpeg4Configuration(soap*, tt__Mpeg4Configuration*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Configuration(soap*, tt__Mpeg4Configuration*) serialize to a stream
/// - tt__Mpeg4Configuration* tt__Mpeg4Configuration::soap_dup(soap*) returns deep copy of tt__Mpeg4Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Mpeg4Configuration::soap_del() deep deletes tt__Mpeg4Configuration data members, use only after tt__Mpeg4Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Mpeg4Configuration::soap_type() returns SOAP_TYPE_tt__Mpeg4Configuration or derived type identifier
class tt__Mpeg4Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Determines the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLength" of type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the Mpeg4 profile, either simple profile (SP) or advanced simple profile (ASP)
/// </BLOCKQUOTE></PRE>
///
/// Element "Mpeg4Profile" of type "http://www.onvif.org/ver10/schema":Mpeg4Profile.
    tt__Mpeg4Profile                     Mpeg4Profile                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":H264Configuration is a complexType.
///
/// @note class tt__H264Configuration operations:
/// - tt__H264Configuration* soap_new_tt__H264Configuration(soap*) allocate and default initialize
/// - tt__H264Configuration* soap_new_tt__H264Configuration(soap*, int num) allocate and default initialize an array
/// - tt__H264Configuration* soap_new_req_tt__H264Configuration(soap*, ...) allocate, set required members
/// - tt__H264Configuration* soap_new_set_tt__H264Configuration(soap*, ...) allocate, set all public members
/// - tt__H264Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__H264Configuration(soap*, tt__H264Configuration*) deserialize from a stream
/// - int soap_write_tt__H264Configuration(soap*, tt__H264Configuration*) serialize to a stream
/// - tt__H264Configuration* tt__H264Configuration::soap_dup(soap*) returns deep copy of tt__H264Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__H264Configuration::soap_del() deep deletes tt__H264Configuration data members, use only after tt__H264Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__H264Configuration::soap_type() returns SOAP_TYPE_tt__H264Configuration or derived type identifier
class tt__H264Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Group of Video frames length. Determines typically the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLength" of type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the H.264 profile, either baseline, main, extended or high
/// </BLOCKQUOTE></PRE>
///
/// Element "H264Profile" of type "http://www.onvif.org/ver10/schema":H264Profile.
    tt__H264Profile                      H264Profile                    1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderConfigurationOptions is a complexType.
///
/// @note class tt__VideoEncoderConfigurationOptions operations:
/// - tt__VideoEncoderConfigurationOptions* soap_new_tt__VideoEncoderConfigurationOptions(soap*) allocate and default initialize
/// - tt__VideoEncoderConfigurationOptions* soap_new_tt__VideoEncoderConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoderConfigurationOptions* soap_new_req_tt__VideoEncoderConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__VideoEncoderConfigurationOptions* soap_new_set_tt__VideoEncoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__VideoEncoderConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoderConfigurationOptions(soap*, tt__VideoEncoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderConfigurationOptions(soap*, tt__VideoEncoderConfigurationOptions*) serialize to a stream
/// - tt__VideoEncoderConfigurationOptions* tt__VideoEncoderConfigurationOptions::soap_dup(soap*) returns deep copy of tt__VideoEncoderConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoderConfigurationOptions::soap_del() deep deletes tt__VideoEncoderConfigurationOptions data members, use only after tt__VideoEncoderConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoderConfigurationOptions::soap_type() returns SOAP_TYPE_tt__VideoEncoderConfigurationOptions or derived type identifier
class tt__VideoEncoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Range of the quality values. A high value means higher quality.
/// </BLOCKQUOTE></PRE>
///
/// Element "QualityRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        QualityRange                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional JPEG encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
///
/// Element "JPEG" of type "http://www.onvif.org/ver10/schema":JpegOptions.
    tt__JpegOptions*                     JPEG                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional MPEG-4 encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
///
/// Element "MPEG4" of type "http://www.onvif.org/ver10/schema":Mpeg4Options.
    tt__Mpeg4Options*                    MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional H.264 encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
///
/// Element "H264" of type "http://www.onvif.org/ver10/schema":H264Options.
    tt__H264Options*                     H264                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension.
    tt__VideoEncoderOptionsExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension is a complexType.
///
/// @note class tt__VideoEncoderOptionsExtension operations:
/// - tt__VideoEncoderOptionsExtension* soap_new_tt__VideoEncoderOptionsExtension(soap*) allocate and default initialize
/// - tt__VideoEncoderOptionsExtension* soap_new_tt__VideoEncoderOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoderOptionsExtension* soap_new_req_tt__VideoEncoderOptionsExtension(soap*, ...) allocate, set required members
/// - tt__VideoEncoderOptionsExtension* soap_new_set_tt__VideoEncoderOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__VideoEncoderOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoderOptionsExtension(soap*, tt__VideoEncoderOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderOptionsExtension(soap*, tt__VideoEncoderOptionsExtension*) serialize to a stream
/// - tt__VideoEncoderOptionsExtension* tt__VideoEncoderOptionsExtension::soap_dup(soap*) returns deep copy of tt__VideoEncoderOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoderOptionsExtension::soap_del() deep deletes tt__VideoEncoderOptionsExtension data members, use only after tt__VideoEncoderOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoderOptionsExtension::soap_type() returns SOAP_TYPE_tt__VideoEncoderOptionsExtension or derived type identifier
class tt__VideoEncoderOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Optional JPEG encoder settings ranges.
/// </BLOCKQUOTE></PRE>
///
/// Element "JPEG" of type "http://www.onvif.org/ver10/schema":JpegOptions2.
    tt__JpegOptions2*                    JPEG                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional MPEG-4 encoder settings ranges.
/// </BLOCKQUOTE></PRE>
///
/// Element "MPEG4" of type "http://www.onvif.org/ver10/schema":Mpeg4Options2.
    tt__Mpeg4Options2*                   MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional H.264 encoder settings ranges.
/// </BLOCKQUOTE></PRE>
///
/// Element "H264" of type "http://www.onvif.org/ver10/schema":H264Options2.
    tt__H264Options2*                    H264                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2.
    tt__VideoEncoderOptionsExtension2*   Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2 is a complexType.
///
/// @note class tt__VideoEncoderOptionsExtension2 operations:
/// - tt__VideoEncoderOptionsExtension2* soap_new_tt__VideoEncoderOptionsExtension2(soap*) allocate and default initialize
/// - tt__VideoEncoderOptionsExtension2* soap_new_tt__VideoEncoderOptionsExtension2(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoderOptionsExtension2* soap_new_req_tt__VideoEncoderOptionsExtension2(soap*, ...) allocate, set required members
/// - tt__VideoEncoderOptionsExtension2* soap_new_set_tt__VideoEncoderOptionsExtension2(soap*, ...) allocate, set all public members
/// - tt__VideoEncoderOptionsExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoderOptionsExtension2(soap*, tt__VideoEncoderOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderOptionsExtension2(soap*, tt__VideoEncoderOptionsExtension2*) serialize to a stream
/// - tt__VideoEncoderOptionsExtension2* tt__VideoEncoderOptionsExtension2::soap_dup(soap*) returns deep copy of tt__VideoEncoderOptionsExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoderOptionsExtension2::soap_del() deep deletes tt__VideoEncoderOptionsExtension2 data members, use only after tt__VideoEncoderOptionsExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoderOptionsExtension2::soap_type() returns SOAP_TYPE_tt__VideoEncoderOptionsExtension2 or derived type identifier
class tt__VideoEncoderOptionsExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":JpegOptions is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":JpegOptions2 as tt__JpegOptions2
///
/// @note class tt__JpegOptions operations:
/// - tt__JpegOptions* soap_new_tt__JpegOptions(soap*) allocate and default initialize
/// - tt__JpegOptions* soap_new_tt__JpegOptions(soap*, int num) allocate and default initialize an array
/// - tt__JpegOptions* soap_new_req_tt__JpegOptions(soap*, ...) allocate, set required members
/// - tt__JpegOptions* soap_new_set_tt__JpegOptions(soap*, ...) allocate, set all public members
/// - tt__JpegOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__JpegOptions(soap*, tt__JpegOptions*) deserialize from a stream
/// - int soap_write_tt__JpegOptions(soap*, tt__JpegOptions*) serialize to a stream
/// - tt__JpegOptions* tt__JpegOptions::soap_dup(soap*) returns deep copy of tt__JpegOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__JpegOptions::soap_del() deep deletes tt__JpegOptions data members, use only after tt__JpegOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__JpegOptions::soap_type() returns SOAP_TYPE_tt__JpegOptions or derived type identifier
class tt__JpegOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Options is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":Mpeg4Options2 as tt__Mpeg4Options2
///
/// @note class tt__Mpeg4Options operations:
/// - tt__Mpeg4Options* soap_new_tt__Mpeg4Options(soap*) allocate and default initialize
/// - tt__Mpeg4Options* soap_new_tt__Mpeg4Options(soap*, int num) allocate and default initialize an array
/// - tt__Mpeg4Options* soap_new_req_tt__Mpeg4Options(soap*, ...) allocate, set required members
/// - tt__Mpeg4Options* soap_new_set_tt__Mpeg4Options(soap*, ...) allocate, set all public members
/// - tt__Mpeg4Options::soap_default(soap*) default initialize members
/// - int soap_read_tt__Mpeg4Options(soap*, tt__Mpeg4Options*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Options(soap*, tt__Mpeg4Options*) serialize to a stream
/// - tt__Mpeg4Options* tt__Mpeg4Options::soap_dup(soap*) returns deep copy of tt__Mpeg4Options, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Mpeg4Options::soap_del() deep deletes tt__Mpeg4Options data members, use only after tt__Mpeg4Options::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Mpeg4Options::soap_type() returns SOAP_TYPE_tt__Mpeg4Options or derived type identifier
class tt__Mpeg4Options : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLengthRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported MPEG-4 profiles.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Mpeg4Profile of length 1..unbounded.
    std::vector<tt__Mpeg4Profile       > Mpeg4ProfilesSupported         1;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":H264Options is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":H264Options2 as tt__H264Options2
///
/// @note class tt__H264Options operations:
/// - tt__H264Options* soap_new_tt__H264Options(soap*) allocate and default initialize
/// - tt__H264Options* soap_new_tt__H264Options(soap*, int num) allocate and default initialize an array
/// - tt__H264Options* soap_new_req_tt__H264Options(soap*, ...) allocate, set required members
/// - tt__H264Options* soap_new_set_tt__H264Options(soap*, ...) allocate, set all public members
/// - tt__H264Options::soap_default(soap*) default initialize members
/// - int soap_read_tt__H264Options(soap*, tt__H264Options*) deserialize from a stream
/// - int soap_write_tt__H264Options(soap*, tt__H264Options*) serialize to a stream
/// - tt__H264Options* tt__H264Options::soap_dup(soap*) returns deep copy of tt__H264Options, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__H264Options::soap_del() deep deletes tt__H264Options data members, use only after tt__H264Options::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__H264Options::soap_type() returns SOAP_TYPE_tt__H264Options or derived type identifier
class tt__H264Options : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLengthRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported H.264 profiles.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__H264Profile of length 1..unbounded.
    std::vector<tt__H264Profile        > H264ProfilesSupported          1;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoResolution2 is a complexType.
///
/// @note class tt__VideoResolution2 operations:
/// - tt__VideoResolution2* soap_new_tt__VideoResolution2(soap*) allocate and default initialize
/// - tt__VideoResolution2* soap_new_tt__VideoResolution2(soap*, int num) allocate and default initialize an array
/// - tt__VideoResolution2* soap_new_req_tt__VideoResolution2(soap*, ...) allocate, set required members
/// - tt__VideoResolution2* soap_new_set_tt__VideoResolution2(soap*, ...) allocate, set all public members
/// - tt__VideoResolution2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoResolution2(soap*, tt__VideoResolution2*) deserialize from a stream
/// - int soap_write_tt__VideoResolution2(soap*, tt__VideoResolution2*) serialize to a stream
/// - tt__VideoResolution2* tt__VideoResolution2::soap_dup(soap*) returns deep copy of tt__VideoResolution2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoResolution2::soap_del() deep deletes tt__VideoResolution2 data members, use only after tt__VideoResolution2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoResolution2::soap_type() returns SOAP_TYPE_tt__VideoResolution2 or derived type identifier
class tt__VideoResolution2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of the columns of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Width" of type xs:int.
    int                                  Width                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of the lines of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Height" of type xs:int.
    int                                  Height                         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoRateControl2 is a complexType.
///
/// @note class tt__VideoRateControl2 operations:
/// - tt__VideoRateControl2* soap_new_tt__VideoRateControl2(soap*) allocate and default initialize
/// - tt__VideoRateControl2* soap_new_tt__VideoRateControl2(soap*, int num) allocate and default initialize an array
/// - tt__VideoRateControl2* soap_new_req_tt__VideoRateControl2(soap*, ...) allocate, set required members
/// - tt__VideoRateControl2* soap_new_set_tt__VideoRateControl2(soap*, ...) allocate, set all public members
/// - tt__VideoRateControl2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoRateControl2(soap*, tt__VideoRateControl2*) deserialize from a stream
/// - int soap_write_tt__VideoRateControl2(soap*, tt__VideoRateControl2*) serialize to a stream
/// - tt__VideoRateControl2* tt__VideoRateControl2::soap_dup(soap*) returns deep copy of tt__VideoRateControl2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoRateControl2::soap_del() deep deletes tt__VideoRateControl2 data members, use only after tt__VideoRateControl2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoRateControl2::soap_type() returns SOAP_TYPE_tt__VideoRateControl2 or derived type identifier
class tt__VideoRateControl2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Desired frame rate in fps. The actual rate may be lower due to e.g. performance limitations.
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateLimit" of type xs:float.
    float                                FrameRateLimit                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the maximum output bitrate in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateLimit" of type xs:int.
    int                                  BitrateLimit                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Enforce constant bitrate.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "ConstantBitRate" of type xs:boolean.
  @ bool*                                ConstantBitRate                0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoder2ConfigurationOptions is a complexType.
///
/// @note class tt__VideoEncoder2ConfigurationOptions operations:
/// - tt__VideoEncoder2ConfigurationOptions* soap_new_tt__VideoEncoder2ConfigurationOptions(soap*) allocate and default initialize
/// - tt__VideoEncoder2ConfigurationOptions* soap_new_tt__VideoEncoder2ConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoder2ConfigurationOptions* soap_new_req_tt__VideoEncoder2ConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__VideoEncoder2ConfigurationOptions* soap_new_set_tt__VideoEncoder2ConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__VideoEncoder2ConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoder2ConfigurationOptions(soap*, tt__VideoEncoder2ConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoEncoder2ConfigurationOptions(soap*, tt__VideoEncoder2ConfigurationOptions*) serialize to a stream
/// - tt__VideoEncoder2ConfigurationOptions* tt__VideoEncoder2ConfigurationOptions::soap_dup(soap*) returns deep copy of tt__VideoEncoder2ConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoder2ConfigurationOptions::soap_del() deep deletes tt__VideoEncoder2ConfigurationOptions data members, use only after tt__VideoEncoder2ConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoder2ConfigurationOptions::soap_type() returns SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions or derived type identifier
class tt__VideoEncoder2ConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Video Media Subtype for the video format. For definitions see tt:VideoEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of the quality values. A high value means higher quality.
/// </BLOCKQUOTE></PRE>
///
/// Element "QualityRange" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      QualityRange                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution2* of length 1..unbounded.
    std::vector<tt__VideoResolution2*  > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Exactly two values, which define the Lower and Upper bounds for the supported group of Video frames length. These values typically correspond to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GovLengthRange" of type "http://www.onvif.org/ver10/schema":IntAttrList.
  @ tt__IntAttrList*                     GovLengthRange                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   List of supported target frame rates in fps (frames per second). The list shall be sorted with highest values first.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "FrameRatesSupported" of type "http://www.onvif.org/ver10/schema":FloatAttrList.
  @ tt__FloatAttrList*                   FrameRatesSupported            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   List of supported encoder profiles as defined in tt::VideoEncodingProfiles.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "ProfilesSupported" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList*                  ProfilesSupported              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Signal whether enforcing constant bitrate is supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "ConstantBitRateSupported" of type xs:boolean.
  @ bool*                                ConstantBitRateSupported       0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceConfigurationOptions is a complexType.
///
/// @note class tt__AudioSourceConfigurationOptions operations:
/// - tt__AudioSourceConfigurationOptions* soap_new_tt__AudioSourceConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioSourceConfigurationOptions* soap_new_tt__AudioSourceConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioSourceConfigurationOptions* soap_new_req_tt__AudioSourceConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioSourceConfigurationOptions* soap_new_set_tt__AudioSourceConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioSourceConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioSourceConfigurationOptions(soap*, tt__AudioSourceConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioSourceConfigurationOptions(soap*, tt__AudioSourceConfigurationOptions*) serialize to a stream
/// - tt__AudioSourceConfigurationOptions* tt__AudioSourceConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioSourceConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioSourceConfigurationOptions::soap_del() deep deletes tt__AudioSourceConfigurationOptions data members, use only after tt__AudioSourceConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioSourceConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioSourceConfigurationOptions or derived type identifier
class tt__AudioSourceConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Tokens of the audio source the configuration can be used for.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > InputTokensAvailable           1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension.
    tt__AudioSourceOptionsExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension is a complexType.
///
/// @note class tt__AudioSourceOptionsExtension operations:
/// - tt__AudioSourceOptionsExtension* soap_new_tt__AudioSourceOptionsExtension(soap*) allocate and default initialize
/// - tt__AudioSourceOptionsExtension* soap_new_tt__AudioSourceOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__AudioSourceOptionsExtension* soap_new_req_tt__AudioSourceOptionsExtension(soap*, ...) allocate, set required members
/// - tt__AudioSourceOptionsExtension* soap_new_set_tt__AudioSourceOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__AudioSourceOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioSourceOptionsExtension(soap*, tt__AudioSourceOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__AudioSourceOptionsExtension(soap*, tt__AudioSourceOptionsExtension*) serialize to a stream
/// - tt__AudioSourceOptionsExtension* tt__AudioSourceOptionsExtension::soap_dup(soap*) returns deep copy of tt__AudioSourceOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioSourceOptionsExtension::soap_del() deep deletes tt__AudioSourceOptionsExtension data members, use only after tt__AudioSourceOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioSourceOptionsExtension::soap_type() returns SOAP_TYPE_tt__AudioSourceOptionsExtension or derived type identifier
class tt__AudioSourceOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions is a complexType.
///
/// @note class tt__AudioEncoderConfigurationOptions operations:
/// - tt__AudioEncoderConfigurationOptions* soap_new_tt__AudioEncoderConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioEncoderConfigurationOptions* soap_new_tt__AudioEncoderConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioEncoderConfigurationOptions* soap_new_req_tt__AudioEncoderConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioEncoderConfigurationOptions* soap_new_set_tt__AudioEncoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioEncoderConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioEncoderConfigurationOptions(soap*, tt__AudioEncoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfigurationOptions(soap*, tt__AudioEncoderConfigurationOptions*) serialize to a stream
/// - tt__AudioEncoderConfigurationOptions* tt__AudioEncoderConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioEncoderConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioEncoderConfigurationOptions::soap_del() deep deletes tt__AudioEncoderConfigurationOptions data members, use only after tt__AudioEncoderConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioEncoderConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioEncoderConfigurationOptions or derived type identifier
class tt__AudioEncoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   list of supported AudioEncoderConfigurations
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__AudioEncoderConfigurationOption* of length 0..unbounded.
    std::vector<tt__AudioEncoderConfigurationOption*> Options                        0;	///< Multiple elements.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOption is a complexType.
///
/// @note class tt__AudioEncoderConfigurationOption operations:
/// - tt__AudioEncoderConfigurationOption* soap_new_tt__AudioEncoderConfigurationOption(soap*) allocate and default initialize
/// - tt__AudioEncoderConfigurationOption* soap_new_tt__AudioEncoderConfigurationOption(soap*, int num) allocate and default initialize an array
/// - tt__AudioEncoderConfigurationOption* soap_new_req_tt__AudioEncoderConfigurationOption(soap*, ...) allocate, set required members
/// - tt__AudioEncoderConfigurationOption* soap_new_set_tt__AudioEncoderConfigurationOption(soap*, ...) allocate, set all public members
/// - tt__AudioEncoderConfigurationOption::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioEncoderConfigurationOption(soap*, tt__AudioEncoderConfigurationOption*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfigurationOption(soap*, tt__AudioEncoderConfigurationOption*) serialize to a stream
/// - tt__AudioEncoderConfigurationOption* tt__AudioEncoderConfigurationOption::soap_dup(soap*) returns deep copy of tt__AudioEncoderConfigurationOption, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioEncoderConfigurationOption::soap_del() deep deletes tt__AudioEncoderConfigurationOption data members, use only after tt__AudioEncoderConfigurationOption::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioEncoderConfigurationOption::soap_type() returns SOAP_TYPE_tt__AudioEncoderConfigurationOption or derived type identifier
class tt__AudioEncoderConfigurationOption : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The enoding used for audio data (either G.711, G.726 or AAC)
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type "http://www.onvif.org/ver10/schema":AudioEncoding.
    tt__AudioEncoding                    Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps for the specified Encoding
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateList" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         BitrateList                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported Sample Rates in kHz for the specified Encoding
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateList" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         SampleRateList                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoder2ConfigurationOptions is a complexType.
///
/// @note class tt__AudioEncoder2ConfigurationOptions operations:
/// - tt__AudioEncoder2ConfigurationOptions* soap_new_tt__AudioEncoder2ConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioEncoder2ConfigurationOptions* soap_new_tt__AudioEncoder2ConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioEncoder2ConfigurationOptions* soap_new_req_tt__AudioEncoder2ConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioEncoder2ConfigurationOptions* soap_new_set_tt__AudioEncoder2ConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioEncoder2ConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioEncoder2ConfigurationOptions(soap*, tt__AudioEncoder2ConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioEncoder2ConfigurationOptions(soap*, tt__AudioEncoder2ConfigurationOptions*) serialize to a stream
/// - tt__AudioEncoder2ConfigurationOptions* tt__AudioEncoder2ConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioEncoder2ConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioEncoder2ConfigurationOptions::soap_del() deep deletes tt__AudioEncoder2ConfigurationOptions data members, use only after tt__AudioEncoder2ConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioEncoder2ConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions or derived type identifier
class tt__AudioEncoder2ConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Audio Media Subtype for the audio format. For definitions see tt:AudioEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps for the specified Encoding
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateList" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         BitrateList                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported Sample Rates in kHz for the specified Encoding
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateList" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         SampleRateList                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationExtension is a complexType.
///
/// @note class tt__MetadataConfigurationExtension operations:
/// - tt__MetadataConfigurationExtension* soap_new_tt__MetadataConfigurationExtension(soap*) allocate and default initialize
/// - tt__MetadataConfigurationExtension* soap_new_tt__MetadataConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationExtension* soap_new_req_tt__MetadataConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationExtension* soap_new_set_tt__MetadataConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationExtension(soap*, tt__MetadataConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationExtension(soap*, tt__MetadataConfigurationExtension*) serialize to a stream
/// - tt__MetadataConfigurationExtension* tt__MetadataConfigurationExtension::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationExtension::soap_del() deep deletes tt__MetadataConfigurationExtension data members, use only after tt__MetadataConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationExtension::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationExtension or derived type identifier
class tt__MetadataConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZFilter is a complexType.
///
/// @note class tt__PTZFilter operations:
/// - tt__PTZFilter* soap_new_tt__PTZFilter(soap*) allocate and default initialize
/// - tt__PTZFilter* soap_new_tt__PTZFilter(soap*, int num) allocate and default initialize an array
/// - tt__PTZFilter* soap_new_req_tt__PTZFilter(soap*, ...) allocate, set required members
/// - tt__PTZFilter* soap_new_set_tt__PTZFilter(soap*, ...) allocate, set all public members
/// - tt__PTZFilter::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZFilter(soap*, tt__PTZFilter*) deserialize from a stream
/// - int soap_write_tt__PTZFilter(soap*, tt__PTZFilter*) serialize to a stream
/// - tt__PTZFilter* tt__PTZFilter::soap_dup(soap*) returns deep copy of tt__PTZFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZFilter::soap_del() deep deletes tt__PTZFilter data members, use only after tt__PTZFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZFilter::soap_type() returns SOAP_TYPE_tt__PTZFilter or derived type identifier
class tt__PTZFilter : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the metadata stream shall contain the PTZ status (IDLE, MOVING or UNKNOWN)
/// </BLOCKQUOTE></PRE>
///
/// Element "Status" of type xs:boolean.
    bool                                 Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   True if the metadata stream shall contain the PTZ position
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type xs:boolean.
    bool                                 Position                       1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":EventSubscription is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Subcription handling in the same way as base notification subscription.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__EventSubscription operations:
/// - tt__EventSubscription* soap_new_tt__EventSubscription(soap*) allocate and default initialize
/// - tt__EventSubscription* soap_new_tt__EventSubscription(soap*, int num) allocate and default initialize an array
/// - tt__EventSubscription* soap_new_req_tt__EventSubscription(soap*, ...) allocate, set required members
/// - tt__EventSubscription* soap_new_set_tt__EventSubscription(soap*, ...) allocate, set all public members
/// - tt__EventSubscription::soap_default(soap*) default initialize members
/// - int soap_read_tt__EventSubscription(soap*, tt__EventSubscription*) deserialize from a stream
/// - int soap_write_tt__EventSubscription(soap*, tt__EventSubscription*) serialize to a stream
/// - tt__EventSubscription* tt__EventSubscription::soap_dup(soap*) returns deep copy of tt__EventSubscription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EventSubscription::soap_del() deep deletes tt__EventSubscription data members, use only after tt__EventSubscription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EventSubscription::soap_type() returns SOAP_TYPE_tt__EventSubscription or derived type identifier
class tt__EventSubscription : public xsd__anyType
{ public:
/// Element "Filter" of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// @note class _tt__EventSubscription_SubscriptionPolicy operations:
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new__tt__EventSubscription_SubscriptionPolicy(soap*) allocate and default initialize
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new__tt__EventSubscription_SubscriptionPolicy(soap*, int num) allocate and default initialize an array
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new_req__tt__EventSubscription_SubscriptionPolicy(soap*, ...) allocate, set required members
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new_set__tt__EventSubscription_SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - _tt__EventSubscription_SubscriptionPolicy::soap_default(soap*) default initialize members
/// - int soap_read__tt__EventSubscription_SubscriptionPolicy(soap*, _tt__EventSubscription_SubscriptionPolicy*) deserialize from a stream
/// - int soap_write__tt__EventSubscription_SubscriptionPolicy(soap*, _tt__EventSubscription_SubscriptionPolicy*) serialize to a stream
/// - _tt__EventSubscription_SubscriptionPolicy* _tt__EventSubscription_SubscriptionPolicy::soap_dup(soap*) returns deep copy of _tt__EventSubscription_SubscriptionPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__EventSubscription_SubscriptionPolicy::soap_del() deep deletes _tt__EventSubscription_SubscriptionPolicy data members, use only after _tt__EventSubscription_SubscriptionPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__EventSubscription_SubscriptionPolicy::soap_type() returns SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy or derived type identifier
    class _tt__EventSubscription_SubscriptionPolicy
    { public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptions is a complexType.
///
/// @note class tt__MetadataConfigurationOptions operations:
/// - tt__MetadataConfigurationOptions* soap_new_tt__MetadataConfigurationOptions(soap*) allocate and default initialize
/// - tt__MetadataConfigurationOptions* soap_new_tt__MetadataConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationOptions* soap_new_req_tt__MetadataConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationOptions* soap_new_set_tt__MetadataConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationOptions(soap*, tt__MetadataConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptions(soap*, tt__MetadataConfigurationOptions*) serialize to a stream
/// - tt__MetadataConfigurationOptions* tt__MetadataConfigurationOptions::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationOptions::soap_del() deep deletes tt__MetadataConfigurationOptions data members, use only after tt__MetadataConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationOptions::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationOptions or derived type identifier
class tt__MetadataConfigurationOptions : public xsd__anyType
{ public:
/// Element "PTZStatusFilterOptions" of type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions.
    tt__PTZStatusFilterOptions*          PTZStatusFilterOptions         1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension.
    tt__MetadataConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream the Geo Located positions of each target.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GeoLocation" of type xs:boolean.
  @ bool*                                GeoLocation                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension is a complexType.
///
/// @note class tt__MetadataConfigurationOptionsExtension operations:
/// - tt__MetadataConfigurationOptionsExtension* soap_new_tt__MetadataConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__MetadataConfigurationOptionsExtension* soap_new_tt__MetadataConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationOptionsExtension* soap_new_req_tt__MetadataConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationOptionsExtension* soap_new_set_tt__MetadataConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationOptionsExtension(soap*, tt__MetadataConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptionsExtension(soap*, tt__MetadataConfigurationOptionsExtension*) serialize to a stream
/// - tt__MetadataConfigurationOptionsExtension* tt__MetadataConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationOptionsExtension::soap_del() deep deletes tt__MetadataConfigurationOptionsExtension data members, use only after tt__MetadataConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationOptionsExtension or derived type identifier
class tt__MetadataConfigurationOptionsExtension : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported metadata compression type. Its options shall be chosen from tt:MetadataCompressionType.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > CompressionType                0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension2.
    tt__MetadataConfigurationOptionsExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension2 is a complexType.
///
/// @note class tt__MetadataConfigurationOptionsExtension2 operations:
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_tt__MetadataConfigurationOptionsExtension2(soap*) allocate and default initialize
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_tt__MetadataConfigurationOptionsExtension2(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_req_tt__MetadataConfigurationOptionsExtension2(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_set_tt__MetadataConfigurationOptionsExtension2(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationOptionsExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationOptionsExtension2(soap*, tt__MetadataConfigurationOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptionsExtension2(soap*, tt__MetadataConfigurationOptionsExtension2*) serialize to a stream
/// - tt__MetadataConfigurationOptionsExtension2* tt__MetadataConfigurationOptionsExtension2::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationOptionsExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationOptionsExtension2::soap_del() deep deletes tt__MetadataConfigurationOptionsExtension2 data members, use only after tt__MetadataConfigurationOptionsExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationOptionsExtension2::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 or derived type identifier
class tt__MetadataConfigurationOptionsExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions is a complexType.
///
/// @note class tt__PTZStatusFilterOptions operations:
/// - tt__PTZStatusFilterOptions* soap_new_tt__PTZStatusFilterOptions(soap*) allocate and default initialize
/// - tt__PTZStatusFilterOptions* soap_new_tt__PTZStatusFilterOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZStatusFilterOptions* soap_new_req_tt__PTZStatusFilterOptions(soap*, ...) allocate, set required members
/// - tt__PTZStatusFilterOptions* soap_new_set_tt__PTZStatusFilterOptions(soap*, ...) allocate, set all public members
/// - tt__PTZStatusFilterOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZStatusFilterOptions(soap*, tt__PTZStatusFilterOptions*) deserialize from a stream
/// - int soap_write_tt__PTZStatusFilterOptions(soap*, tt__PTZStatusFilterOptions*) serialize to a stream
/// - tt__PTZStatusFilterOptions* tt__PTZStatusFilterOptions::soap_dup(soap*) returns deep copy of tt__PTZStatusFilterOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZStatusFilterOptions::soap_del() deep deletes tt__PTZStatusFilterOptions data members, use only after tt__PTZStatusFilterOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZStatusFilterOptions::soap_type() returns SOAP_TYPE_tt__PTZStatusFilterOptions or derived type identifier
class tt__PTZStatusFilterOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream pan or tilt status information.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTiltStatusSupported" of type xs:boolean.
    bool                                 PanTiltStatusSupported         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream zoom status inforamtion.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZoomStatusSupported" of type xs:boolean.
    bool                                 ZoomStatusSupported            1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream the pan or tilt position.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTiltPositionSupported" of type xs:boolean.
    bool*                                PanTiltPositionSupported       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream zoom position information.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZoomPositionSupported" of type xs:boolean.
    bool*                                ZoomPositionSupported          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension.
    tt__PTZStatusFilterOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension is a complexType.
///
/// @note class tt__PTZStatusFilterOptionsExtension operations:
/// - tt__PTZStatusFilterOptionsExtension* soap_new_tt__PTZStatusFilterOptionsExtension(soap*) allocate and default initialize
/// - tt__PTZStatusFilterOptionsExtension* soap_new_tt__PTZStatusFilterOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZStatusFilterOptionsExtension* soap_new_req_tt__PTZStatusFilterOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTZStatusFilterOptionsExtension* soap_new_set_tt__PTZStatusFilterOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTZStatusFilterOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZStatusFilterOptionsExtension(soap*, tt__PTZStatusFilterOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZStatusFilterOptionsExtension(soap*, tt__PTZStatusFilterOptionsExtension*) serialize to a stream
/// - tt__PTZStatusFilterOptionsExtension* tt__PTZStatusFilterOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTZStatusFilterOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZStatusFilterOptionsExtension::soap_del() deep deletes tt__PTZStatusFilterOptionsExtension data members, use only after tt__PTZStatusFilterOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZStatusFilterOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTZStatusFilterOptionsExtension or derived type identifier
class tt__PTZStatusFilterOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutputExtension is a complexType.
///
/// @note class tt__VideoOutputExtension operations:
/// - tt__VideoOutputExtension* soap_new_tt__VideoOutputExtension(soap*) allocate and default initialize
/// - tt__VideoOutputExtension* soap_new_tt__VideoOutputExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoOutputExtension* soap_new_req_tt__VideoOutputExtension(soap*, ...) allocate, set required members
/// - tt__VideoOutputExtension* soap_new_set_tt__VideoOutputExtension(soap*, ...) allocate, set all public members
/// - tt__VideoOutputExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoOutputExtension(soap*, tt__VideoOutputExtension*) deserialize from a stream
/// - int soap_write_tt__VideoOutputExtension(soap*, tt__VideoOutputExtension*) serialize to a stream
/// - tt__VideoOutputExtension* tt__VideoOutputExtension::soap_dup(soap*) returns deep copy of tt__VideoOutputExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoOutputExtension::soap_del() deep deletes tt__VideoOutputExtension data members, use only after tt__VideoOutputExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoOutputExtension::soap_type() returns SOAP_TYPE_tt__VideoOutputExtension or derived type identifier
class tt__VideoOutputExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutputConfigurationOptions is a complexType.
///
/// @note class tt__VideoOutputConfigurationOptions operations:
/// - tt__VideoOutputConfigurationOptions* soap_new_tt__VideoOutputConfigurationOptions(soap*) allocate and default initialize
/// - tt__VideoOutputConfigurationOptions* soap_new_tt__VideoOutputConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__VideoOutputConfigurationOptions* soap_new_req_tt__VideoOutputConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__VideoOutputConfigurationOptions* soap_new_set_tt__VideoOutputConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__VideoOutputConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoOutputConfigurationOptions(soap*, tt__VideoOutputConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoOutputConfigurationOptions(soap*, tt__VideoOutputConfigurationOptions*) serialize to a stream
/// - tt__VideoOutputConfigurationOptions* tt__VideoOutputConfigurationOptions::soap_dup(soap*) returns deep copy of tt__VideoOutputConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoOutputConfigurationOptions::soap_del() deep deletes tt__VideoOutputConfigurationOptions data members, use only after tt__VideoOutputConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoOutputConfigurationOptions::soap_type() returns SOAP_TYPE_tt__VideoOutputConfigurationOptions or derived type identifier
class tt__VideoOutputConfigurationOptions : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptions is a complexType.
///
/// @note class tt__VideoDecoderConfigurationOptions operations:
/// - tt__VideoDecoderConfigurationOptions* soap_new_tt__VideoDecoderConfigurationOptions(soap*) allocate and default initialize
/// - tt__VideoDecoderConfigurationOptions* soap_new_tt__VideoDecoderConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__VideoDecoderConfigurationOptions* soap_new_req_tt__VideoDecoderConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__VideoDecoderConfigurationOptions* soap_new_set_tt__VideoDecoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__VideoDecoderConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoDecoderConfigurationOptions(soap*, tt__VideoDecoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoDecoderConfigurationOptions(soap*, tt__VideoDecoderConfigurationOptions*) serialize to a stream
/// - tt__VideoDecoderConfigurationOptions* tt__VideoDecoderConfigurationOptions::soap_dup(soap*) returns deep copy of tt__VideoDecoderConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoDecoderConfigurationOptions::soap_del() deep deletes tt__VideoDecoderConfigurationOptions data members, use only after tt__VideoDecoderConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoDecoderConfigurationOptions::soap_type() returns SOAP_TYPE_tt__VideoDecoderConfigurationOptions or derived type identifier
class tt__VideoDecoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode Jpeg streams this element describes the supported codecs and configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "JpegDecOptions" of type "http://www.onvif.org/ver10/schema":JpegDecOptions.
    tt__JpegDecOptions*                  JpegDecOptions                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode H.264 streams this element describes the supported codecs and configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "H264DecOptions" of type "http://www.onvif.org/ver10/schema":H264DecOptions.
    tt__H264DecOptions*                  H264DecOptions                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode Mpeg4 streams this element describes the supported codecs and configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "Mpeg4DecOptions" of type "http://www.onvif.org/ver10/schema":Mpeg4DecOptions.
    tt__Mpeg4DecOptions*                 Mpeg4DecOptions                0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptionsExtension.
    tt__VideoDecoderConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":H264DecOptions is a complexType.
///
/// @note class tt__H264DecOptions operations:
/// - tt__H264DecOptions* soap_new_tt__H264DecOptions(soap*) allocate and default initialize
/// - tt__H264DecOptions* soap_new_tt__H264DecOptions(soap*, int num) allocate and default initialize an array
/// - tt__H264DecOptions* soap_new_req_tt__H264DecOptions(soap*, ...) allocate, set required members
/// - tt__H264DecOptions* soap_new_set_tt__H264DecOptions(soap*, ...) allocate, set all public members
/// - tt__H264DecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__H264DecOptions(soap*, tt__H264DecOptions*) deserialize from a stream
/// - int soap_write_tt__H264DecOptions(soap*, tt__H264DecOptions*) serialize to a stream
/// - tt__H264DecOptions* tt__H264DecOptions::soap_dup(soap*) returns deep copy of tt__H264DecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__H264DecOptions::soap_del() deep deletes tt__H264DecOptions data members, use only after tt__H264DecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__H264DecOptions::soap_type() returns SOAP_TYPE_tt__H264DecOptions or derived type identifier
class tt__H264DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported H.264 Video Resolutions
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported H264 Profiles (either baseline, main, extended or high)
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__H264Profile of length 1..unbounded.
    std::vector<tt__H264Profile        > SupportedH264Profiles          1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported H.264 bitrate range in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedInputBitrate" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedInputBitrate          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported H.264 framerate range in fps
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedFrameRate" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedFrameRate             1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":JpegDecOptions is a complexType.
///
/// @note class tt__JpegDecOptions operations:
/// - tt__JpegDecOptions* soap_new_tt__JpegDecOptions(soap*) allocate and default initialize
/// - tt__JpegDecOptions* soap_new_tt__JpegDecOptions(soap*, int num) allocate and default initialize an array
/// - tt__JpegDecOptions* soap_new_req_tt__JpegDecOptions(soap*, ...) allocate, set required members
/// - tt__JpegDecOptions* soap_new_set_tt__JpegDecOptions(soap*, ...) allocate, set all public members
/// - tt__JpegDecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__JpegDecOptions(soap*, tt__JpegDecOptions*) deserialize from a stream
/// - int soap_write_tt__JpegDecOptions(soap*, tt__JpegDecOptions*) serialize to a stream
/// - tt__JpegDecOptions* tt__JpegDecOptions::soap_dup(soap*) returns deep copy of tt__JpegDecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__JpegDecOptions::soap_del() deep deletes tt__JpegDecOptions data members, use only after tt__JpegDecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__JpegDecOptions::soap_type() returns SOAP_TYPE_tt__JpegDecOptions or derived type identifier
class tt__JpegDecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported Jpeg Video Resolutions
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported Jpeg bitrate range in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedInputBitrate" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedInputBitrate          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported Jpeg framerate range in fps
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedFrameRate" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedFrameRate             1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4DecOptions is a complexType.
///
/// @note class tt__Mpeg4DecOptions operations:
/// - tt__Mpeg4DecOptions* soap_new_tt__Mpeg4DecOptions(soap*) allocate and default initialize
/// - tt__Mpeg4DecOptions* soap_new_tt__Mpeg4DecOptions(soap*, int num) allocate and default initialize an array
/// - tt__Mpeg4DecOptions* soap_new_req_tt__Mpeg4DecOptions(soap*, ...) allocate, set required members
/// - tt__Mpeg4DecOptions* soap_new_set_tt__Mpeg4DecOptions(soap*, ...) allocate, set all public members
/// - tt__Mpeg4DecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__Mpeg4DecOptions(soap*, tt__Mpeg4DecOptions*) deserialize from a stream
/// - int soap_write_tt__Mpeg4DecOptions(soap*, tt__Mpeg4DecOptions*) serialize to a stream
/// - tt__Mpeg4DecOptions* tt__Mpeg4DecOptions::soap_dup(soap*) returns deep copy of tt__Mpeg4DecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Mpeg4DecOptions::soap_del() deep deletes tt__Mpeg4DecOptions data members, use only after tt__Mpeg4DecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Mpeg4DecOptions::soap_type() returns SOAP_TYPE_tt__Mpeg4DecOptions or derived type identifier
class tt__Mpeg4DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported Mpeg4 Video Resolutions
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported Mpeg4 Profiles (either SP or ASP)
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Mpeg4Profile of length 1..unbounded.
    std::vector<tt__Mpeg4Profile       > SupportedMpeg4Profiles         1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported Mpeg4 bitrate range in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedInputBitrate" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedInputBitrate          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported Mpeg4 framerate range in fps
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedFrameRate" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedFrameRate             1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptionsExtension is a complexType.
///
/// @note class tt__VideoDecoderConfigurationOptionsExtension operations:
/// - tt__VideoDecoderConfigurationOptionsExtension* soap_new_tt__VideoDecoderConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__VideoDecoderConfigurationOptionsExtension* soap_new_tt__VideoDecoderConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoDecoderConfigurationOptionsExtension* soap_new_req_tt__VideoDecoderConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__VideoDecoderConfigurationOptionsExtension* soap_new_set_tt__VideoDecoderConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__VideoDecoderConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoDecoderConfigurationOptionsExtension(soap*, tt__VideoDecoderConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoDecoderConfigurationOptionsExtension(soap*, tt__VideoDecoderConfigurationOptionsExtension*) serialize to a stream
/// - tt__VideoDecoderConfigurationOptionsExtension* tt__VideoDecoderConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__VideoDecoderConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoDecoderConfigurationOptionsExtension::soap_del() deep deletes tt__VideoDecoderConfigurationOptionsExtension data members, use only after tt__VideoDecoderConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoDecoderConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension or derived type identifier
class tt__VideoDecoderConfigurationOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioOutputConfigurationOptions is a complexType.
///
/// @note class tt__AudioOutputConfigurationOptions operations:
/// - tt__AudioOutputConfigurationOptions* soap_new_tt__AudioOutputConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioOutputConfigurationOptions* soap_new_tt__AudioOutputConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioOutputConfigurationOptions* soap_new_req_tt__AudioOutputConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioOutputConfigurationOptions* soap_new_set_tt__AudioOutputConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioOutputConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioOutputConfigurationOptions(soap*, tt__AudioOutputConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioOutputConfigurationOptions(soap*, tt__AudioOutputConfigurationOptions*) serialize to a stream
/// - tt__AudioOutputConfigurationOptions* tt__AudioOutputConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioOutputConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioOutputConfigurationOptions::soap_del() deep deletes tt__AudioOutputConfigurationOptions data members, use only after tt__AudioOutputConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioOutputConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioOutputConfigurationOptions or derived type identifier
class tt__AudioOutputConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Tokens of the physical Audio outputs (typically one).
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > OutputTokensAvailable          1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   An <b>audio</b> channel MAY support different types of audio transmission. While for full duplex
///   operation no special handling is required, in half duplex operation the transmission direction
///   needs to be switched.
///   The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
///   direction is currently active. An NVC can switch between different modes by setting the
///   AudioOutputConfiguration.<br/>
///   The following modes for the Send-Primacy are defined:<ul>
///   <li>www.onvif.org/ver20/HalfDuplex/Server
///   The server is allowed to send audio data to the client. The client shall not send
///   audio data via the backchannel to the NVT in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Client
///   The client is allowed to send audio data via the backchannel to the server. The
///   NVT shall not send audio data to the client in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Auto
///   It is up to the device how to deal with sending and receiving audio data.</li>
///   </ul>
///   Acoustic echo cancellation is out of ONVIF scope.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > SendPrimacyOptions             0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Minimum and maximum level range supported for this Output.
/// </BLOCKQUOTE></PRE>
///
/// Element "OutputLevelRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        OutputLevelRange               1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions is a complexType.
///
/// @note class tt__AudioDecoderConfigurationOptions operations:
/// - tt__AudioDecoderConfigurationOptions* soap_new_tt__AudioDecoderConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioDecoderConfigurationOptions* soap_new_tt__AudioDecoderConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioDecoderConfigurationOptions* soap_new_req_tt__AudioDecoderConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioDecoderConfigurationOptions* soap_new_set_tt__AudioDecoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioDecoderConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioDecoderConfigurationOptions(soap*, tt__AudioDecoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfigurationOptions(soap*, tt__AudioDecoderConfigurationOptions*) serialize to a stream
/// - tt__AudioDecoderConfigurationOptions* tt__AudioDecoderConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioDecoderConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioDecoderConfigurationOptions::soap_del() deep deletes tt__AudioDecoderConfigurationOptions data members, use only after tt__AudioDecoderConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioDecoderConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioDecoderConfigurationOptions or derived type identifier
class tt__AudioDecoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode AAC encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "AACDecOptions" of type "http://www.onvif.org/ver10/schema":AACDecOptions.
    tt__AACDecOptions*                   AACDecOptions                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode G711 encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "G711DecOptions" of type "http://www.onvif.org/ver10/schema":G711DecOptions.
    tt__G711DecOptions*                  G711DecOptions                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode G726 encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "G726DecOptions" of type "http://www.onvif.org/ver10/schema":G726DecOptions.
    tt__G726DecOptions*                  G726DecOptions                 0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension.
    tt__AudioDecoderConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":G711DecOptions is a complexType.
///
/// @note class tt__G711DecOptions operations:
/// - tt__G711DecOptions* soap_new_tt__G711DecOptions(soap*) allocate and default initialize
/// - tt__G711DecOptions* soap_new_tt__G711DecOptions(soap*, int num) allocate and default initialize an array
/// - tt__G711DecOptions* soap_new_req_tt__G711DecOptions(soap*, ...) allocate, set required members
/// - tt__G711DecOptions* soap_new_set_tt__G711DecOptions(soap*, ...) allocate, set all public members
/// - tt__G711DecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__G711DecOptions(soap*, tt__G711DecOptions*) deserialize from a stream
/// - int soap_write_tt__G711DecOptions(soap*, tt__G711DecOptions*) serialize to a stream
/// - tt__G711DecOptions* tt__G711DecOptions::soap_dup(soap*) returns deep copy of tt__G711DecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__G711DecOptions::soap_del() deep deletes tt__G711DecOptions data members, use only after tt__G711DecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__G711DecOptions::soap_type() returns SOAP_TYPE_tt__G711DecOptions or derived type identifier
class tt__G711DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateRange" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         SampleRateRange                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AACDecOptions is a complexType.
///
/// @note class tt__AACDecOptions operations:
/// - tt__AACDecOptions* soap_new_tt__AACDecOptions(soap*) allocate and default initialize
/// - tt__AACDecOptions* soap_new_tt__AACDecOptions(soap*, int num) allocate and default initialize an array
/// - tt__AACDecOptions* soap_new_req_tt__AACDecOptions(soap*, ...) allocate, set required members
/// - tt__AACDecOptions* soap_new_set_tt__AACDecOptions(soap*, ...) allocate, set all public members
/// - tt__AACDecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AACDecOptions(soap*, tt__AACDecOptions*) deserialize from a stream
/// - int soap_write_tt__AACDecOptions(soap*, tt__AACDecOptions*) serialize to a stream
/// - tt__AACDecOptions* tt__AACDecOptions::soap_dup(soap*) returns deep copy of tt__AACDecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AACDecOptions::soap_del() deep deletes tt__AACDecOptions data members, use only after tt__AACDecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AACDecOptions::soap_type() returns SOAP_TYPE_tt__AACDecOptions or derived type identifier
class tt__AACDecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateRange" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         SampleRateRange                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":G726DecOptions is a complexType.
///
/// @note class tt__G726DecOptions operations:
/// - tt__G726DecOptions* soap_new_tt__G726DecOptions(soap*) allocate and default initialize
/// - tt__G726DecOptions* soap_new_tt__G726DecOptions(soap*, int num) allocate and default initialize an array
/// - tt__G726DecOptions* soap_new_req_tt__G726DecOptions(soap*, ...) allocate, set required members
/// - tt__G726DecOptions* soap_new_set_tt__G726DecOptions(soap*, ...) allocate, set all public members
/// - tt__G726DecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__G726DecOptions(soap*, tt__G726DecOptions*) deserialize from a stream
/// - int soap_write_tt__G726DecOptions(soap*, tt__G726DecOptions*) serialize to a stream
/// - tt__G726DecOptions* tt__G726DecOptions::soap_dup(soap*) returns deep copy of tt__G726DecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__G726DecOptions::soap_del() deep deletes tt__G726DecOptions data members, use only after tt__G726DecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__G726DecOptions::soap_type() returns SOAP_TYPE_tt__G726DecOptions or derived type identifier
class tt__G726DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateRange" of type "http://www.onvif.org/ver10/schema":IntList.
    tt__IntList*                         SampleRateRange                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension is a complexType.
///
/// @note class tt__AudioDecoderConfigurationOptionsExtension operations:
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_req_tt__AudioDecoderConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_set_tt__AudioDecoderConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__AudioDecoderConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioDecoderConfigurationOptionsExtension(soap*, tt__AudioDecoderConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfigurationOptionsExtension(soap*, tt__AudioDecoderConfigurationOptionsExtension*) serialize to a stream
/// - tt__AudioDecoderConfigurationOptionsExtension* tt__AudioDecoderConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__AudioDecoderConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioDecoderConfigurationOptionsExtension::soap_del() deep deletes tt__AudioDecoderConfigurationOptionsExtension data members, use only after tt__AudioDecoderConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioDecoderConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension or derived type identifier
class tt__AudioDecoderConfigurationOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":MulticastConfiguration is a complexType.
///
/// @note class tt__MulticastConfiguration operations:
/// - tt__MulticastConfiguration* soap_new_tt__MulticastConfiguration(soap*) allocate and default initialize
/// - tt__MulticastConfiguration* soap_new_tt__MulticastConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__MulticastConfiguration* soap_new_req_tt__MulticastConfiguration(soap*, ...) allocate, set required members
/// - tt__MulticastConfiguration* soap_new_set_tt__MulticastConfiguration(soap*, ...) allocate, set all public members
/// - tt__MulticastConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__MulticastConfiguration(soap*, tt__MulticastConfiguration*) deserialize from a stream
/// - int soap_write_tt__MulticastConfiguration(soap*, tt__MulticastConfiguration*) serialize to a stream
/// - tt__MulticastConfiguration* tt__MulticastConfiguration::soap_dup(soap*) returns deep copy of tt__MulticastConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MulticastConfiguration::soap_del() deep deletes tt__MulticastConfiguration data members, use only after tt__MulticastConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MulticastConfiguration::soap_type() returns SOAP_TYPE_tt__MulticastConfiguration or derived type identifier
class tt__MulticastConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The multicast address (if this address is set to 0 no multicast streaming is enaled)
/// </BLOCKQUOTE></PRE>
///
/// Element "Address" of type "http://www.onvif.org/ver10/schema":IPAddress.
    tt__IPAddress*                       Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The RTP mutlicast destination port. A device may support RTCP. In this case the port value shall be even to allow the corresponding RTCP stream to be mapped to the next higher (odd) destination port number as defined in the RTSP specification.
/// </BLOCKQUOTE></PRE>
///
/// Element "Port" of type xs:int.
    int                                  Port                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   In case of IPv6 the TTL value is assumed as the hop limit. Note that for IPV6 and administratively scoped IPv4 multicast the primary use for hop limit / TTL is to prevent packets from (endlessly) circulating and not limiting scope. In these cases the address contains the scope.
/// </BLOCKQUOTE></PRE>
///
/// Element "TTL" of type xs:int.
    int                                  TTL                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Read only property signalling that streaming is persistant. Use the methods StartMulticastStreaming and StopMulticastStreaming to switch its state.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoStart" of type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":StreamSetup is a complexType.
///
/// @note class tt__StreamSetup operations:
/// - tt__StreamSetup* soap_new_tt__StreamSetup(soap*) allocate and default initialize
/// - tt__StreamSetup* soap_new_tt__StreamSetup(soap*, int num) allocate and default initialize an array
/// - tt__StreamSetup* soap_new_req_tt__StreamSetup(soap*, ...) allocate, set required members
/// - tt__StreamSetup* soap_new_set_tt__StreamSetup(soap*, ...) allocate, set all public members
/// - tt__StreamSetup::soap_default(soap*) default initialize members
/// - int soap_read_tt__StreamSetup(soap*, tt__StreamSetup*) deserialize from a stream
/// - int soap_write_tt__StreamSetup(soap*, tt__StreamSetup*) serialize to a stream
/// - tt__StreamSetup* tt__StreamSetup::soap_dup(soap*) returns deep copy of tt__StreamSetup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__StreamSetup::soap_del() deep deletes tt__StreamSetup data members, use only after tt__StreamSetup::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__StreamSetup::soap_type() returns SOAP_TYPE_tt__StreamSetup or derived type identifier
class tt__StreamSetup : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines if a multicast or unicast stream is requested
/// </BLOCKQUOTE></PRE>
///
/// Element "Stream" of type "http://www.onvif.org/ver10/schema":StreamType.
    tt__StreamType                       Stream                         1;	///< Required element.
/// Element "Transport" of type "http://www.onvif.org/ver10/schema":Transport.
    tt__Transport*                       Transport                      1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Transport is a complexType.
///
/// @note class tt__Transport operations:
/// - tt__Transport* soap_new_tt__Transport(soap*) allocate and default initialize
/// - tt__Transport* soap_new_tt__Transport(soap*, int num) allocate and default initialize an array
/// - tt__Transport* soap_new_req_tt__Transport(soap*, ...) allocate, set required members
/// - tt__Transport* soap_new_set_tt__Transport(soap*, ...) allocate, set all public members
/// - tt__Transport::soap_default(soap*) default initialize members
/// - int soap_read_tt__Transport(soap*, tt__Transport*) deserialize from a stream
/// - int soap_write_tt__Transport(soap*, tt__Transport*) serialize to a stream
/// - tt__Transport* tt__Transport::soap_dup(soap*) returns deep copy of tt__Transport, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Transport::soap_del() deep deletes tt__Transport data members, use only after tt__Transport::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Transport::soap_type() returns SOAP_TYPE_tt__Transport or derived type identifier
class tt__Transport : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines the network protocol for streaming, either UDP=RTP/UDP, RTSP=RTP/RTSP/TCP or HTTP=RTP/RTSP/HTTP/TCP
/// </BLOCKQUOTE></PRE>
///
/// Element "Protocol" of type "http://www.onvif.org/ver10/schema":TransportProtocol.
    tt__TransportProtocol                Protocol                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional element to describe further tunnel options. This element is normally not needed
/// </BLOCKQUOTE></PRE>
///
/// Element "Tunnel" of type "http://www.onvif.org/ver10/schema":Transport.
    tt__Transport*                       Tunnel                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaUri is a complexType.
///
/// @note class tt__MediaUri operations:
/// - tt__MediaUri* soap_new_tt__MediaUri(soap*) allocate and default initialize
/// - tt__MediaUri* soap_new_tt__MediaUri(soap*, int num) allocate and default initialize an array
/// - tt__MediaUri* soap_new_req_tt__MediaUri(soap*, ...) allocate, set required members
/// - tt__MediaUri* soap_new_set_tt__MediaUri(soap*, ...) allocate, set all public members
/// - tt__MediaUri::soap_default(soap*) default initialize members
/// - int soap_read_tt__MediaUri(soap*, tt__MediaUri*) deserialize from a stream
/// - int soap_write_tt__MediaUri(soap*, tt__MediaUri*) serialize to a stream
/// - tt__MediaUri* tt__MediaUri::soap_dup(soap*) returns deep copy of tt__MediaUri, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MediaUri::soap_del() deep deletes tt__MediaUri data members, use only after tt__MediaUri::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MediaUri::soap_type() returns SOAP_TYPE_tt__MediaUri or derived type identifier
class tt__MediaUri : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Stable Uri to be used for requesting the media stream
/// </BLOCKQUOTE></PRE>
///
/// Element "Uri" of type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Uri is only valid until the connection is established. The value shall be set to "false".
/// </BLOCKQUOTE></PRE>
///
/// Element "InvalidAfterConnect" of type xs:boolean.
    bool                                 InvalidAfterConnect            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Uri is invalid after a reboot of the device. The value shall be set to "false".
/// </BLOCKQUOTE></PRE>
///
/// Element "InvalidAfterReboot" of type xs:boolean.
    bool                                 InvalidAfterReboot             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Duration how long the Uri is valid. This parameter shall be set to PT0S to indicate that this stream URI is indefinitely valid even if the profile changes
/// </BLOCKQUOTE></PRE>
///
/// Element "Timeout" of type xs:duration.
    xsd__duration                        Timeout                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Scope is a complexType.
///
/// @note class tt__Scope operations:
/// - tt__Scope* soap_new_tt__Scope(soap*) allocate and default initialize
/// - tt__Scope* soap_new_tt__Scope(soap*, int num) allocate and default initialize an array
/// - tt__Scope* soap_new_req_tt__Scope(soap*, ...) allocate, set required members
/// - tt__Scope* soap_new_set_tt__Scope(soap*, ...) allocate, set all public members
/// - tt__Scope::soap_default(soap*) default initialize members
/// - int soap_read_tt__Scope(soap*, tt__Scope*) deserialize from a stream
/// - int soap_write_tt__Scope(soap*, tt__Scope*) serialize to a stream
/// - tt__Scope* tt__Scope::soap_dup(soap*) returns deep copy of tt__Scope, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Scope::soap_del() deep deletes tt__Scope data members, use only after tt__Scope::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Scope::soap_type() returns SOAP_TYPE_tt__Scope or derived type identifier
class tt__Scope : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the scope is fixed or configurable.
/// </BLOCKQUOTE></PRE>
///
/// Element "ScopeDef" of type "http://www.onvif.org/ver10/schema":ScopeDefinition.
    tt__ScopeDefinition                  ScopeDef                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Scope item URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "ScopeItem" of type xs:anyURI.
    xsd__anyURI                          ScopeItem                      1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension is a complexType.
///
/// @note class tt__NetworkInterfaceExtension operations:
/// - tt__NetworkInterfaceExtension* soap_new_tt__NetworkInterfaceExtension(soap*) allocate and default initialize
/// - tt__NetworkInterfaceExtension* soap_new_tt__NetworkInterfaceExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceExtension* soap_new_req_tt__NetworkInterfaceExtension(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceExtension* soap_new_set_tt__NetworkInterfaceExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceExtension(soap*, tt__NetworkInterfaceExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceExtension(soap*, tt__NetworkInterfaceExtension*) serialize to a stream
/// - tt__NetworkInterfaceExtension* tt__NetworkInterfaceExtension::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceExtension::soap_del() deep deletes tt__NetworkInterfaceExtension data members, use only after tt__NetworkInterfaceExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceExtension::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceExtension or derived type identifier
class tt__NetworkInterfaceExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "InterfaceType" of type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    tt__IANA_IfTypes                     InterfaceType                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point prepared for future 802.3 configuration.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Dot3Configuration* of length 0..unbounded.
    std::vector<tt__Dot3Configuration* > Dot3                           0;	///< Multiple elements.
/// Vector of tt__Dot11Configuration* of length 0..unbounded.
    std::vector<tt__Dot11Configuration*> Dot11                          0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2.
    tt__NetworkInterfaceExtension2*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot3Configuration is a complexType.
///
/// @note class tt__Dot3Configuration operations:
/// - tt__Dot3Configuration* soap_new_tt__Dot3Configuration(soap*) allocate and default initialize
/// - tt__Dot3Configuration* soap_new_tt__Dot3Configuration(soap*, int num) allocate and default initialize an array
/// - tt__Dot3Configuration* soap_new_req_tt__Dot3Configuration(soap*, ...) allocate, set required members
/// - tt__Dot3Configuration* soap_new_set_tt__Dot3Configuration(soap*, ...) allocate, set all public members
/// - tt__Dot3Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot3Configuration(soap*, tt__Dot3Configuration*) deserialize from a stream
/// - int soap_write_tt__Dot3Configuration(soap*, tt__Dot3Configuration*) serialize to a stream
/// - tt__Dot3Configuration* tt__Dot3Configuration::soap_dup(soap*) returns deep copy of tt__Dot3Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot3Configuration::soap_del() deep deletes tt__Dot3Configuration data members, use only after tt__Dot3Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot3Configuration::soap_type() returns SOAP_TYPE_tt__Dot3Configuration or derived type identifier
class tt__Dot3Configuration : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2 is a complexType.
///
/// @note class tt__NetworkInterfaceExtension2 operations:
/// - tt__NetworkInterfaceExtension2* soap_new_tt__NetworkInterfaceExtension2(soap*) allocate and default initialize
/// - tt__NetworkInterfaceExtension2* soap_new_tt__NetworkInterfaceExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceExtension2* soap_new_req_tt__NetworkInterfaceExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceExtension2* soap_new_set_tt__NetworkInterfaceExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceExtension2(soap*, tt__NetworkInterfaceExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceExtension2(soap*, tt__NetworkInterfaceExtension2*) serialize to a stream
/// - tt__NetworkInterfaceExtension2* tt__NetworkInterfaceExtension2::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceExtension2::soap_del() deep deletes tt__NetworkInterfaceExtension2 data members, use only after tt__NetworkInterfaceExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceExtension2::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceExtension2 or derived type identifier
class tt__NetworkInterfaceExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceLink is a complexType.
///
/// @note class tt__NetworkInterfaceLink operations:
/// - tt__NetworkInterfaceLink* soap_new_tt__NetworkInterfaceLink(soap*) allocate and default initialize
/// - tt__NetworkInterfaceLink* soap_new_tt__NetworkInterfaceLink(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceLink* soap_new_req_tt__NetworkInterfaceLink(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceLink* soap_new_set_tt__NetworkInterfaceLink(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceLink::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceLink(soap*, tt__NetworkInterfaceLink*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceLink(soap*, tt__NetworkInterfaceLink*) serialize to a stream
/// - tt__NetworkInterfaceLink* tt__NetworkInterfaceLink::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceLink, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceLink::soap_del() deep deletes tt__NetworkInterfaceLink data members, use only after tt__NetworkInterfaceLink::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceLink::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceLink or derived type identifier
class tt__NetworkInterfaceLink : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Configured link settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "AdminSettings" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  AdminSettings                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Current active link settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "OperSettings" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  OperSettings                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Integer indicating interface type, for example: 6 is ethernet.
/// </BLOCKQUOTE></PRE>
///
/// Element "InterfaceType" of type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    tt__IANA_IfTypes                     InterfaceType                  1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting is a complexType.
///
/// @note class tt__NetworkInterfaceConnectionSetting operations:
/// - tt__NetworkInterfaceConnectionSetting* soap_new_tt__NetworkInterfaceConnectionSetting(soap*) allocate and default initialize
/// - tt__NetworkInterfaceConnectionSetting* soap_new_tt__NetworkInterfaceConnectionSetting(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceConnectionSetting* soap_new_req_tt__NetworkInterfaceConnectionSetting(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceConnectionSetting* soap_new_set_tt__NetworkInterfaceConnectionSetting(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceConnectionSetting::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceConnectionSetting(soap*, tt__NetworkInterfaceConnectionSetting*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceConnectionSetting(soap*, tt__NetworkInterfaceConnectionSetting*) serialize to a stream
/// - tt__NetworkInterfaceConnectionSetting* tt__NetworkInterfaceConnectionSetting::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceConnectionSetting, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceConnectionSetting::soap_del() deep deletes tt__NetworkInterfaceConnectionSetting data members, use only after tt__NetworkInterfaceConnectionSetting::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceConnectionSetting::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceConnectionSetting or derived type identifier
class tt__NetworkInterfaceConnectionSetting : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Auto negotiation on/off.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoNegotiation" of type xs:boolean.
    bool                                 AutoNegotiation                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Speed.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type xs:int.
    int                                  Speed                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Duplex type, Half or Full.
/// </BLOCKQUOTE></PRE>
///
/// Element "Duplex" of type "http://www.onvif.org/ver10/schema":Duplex.
    tt__Duplex                           Duplex                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceInfo is a complexType.
///
/// @note class tt__NetworkInterfaceInfo operations:
/// - tt__NetworkInterfaceInfo* soap_new_tt__NetworkInterfaceInfo(soap*) allocate and default initialize
/// - tt__NetworkInterfaceInfo* soap_new_tt__NetworkInterfaceInfo(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceInfo* soap_new_req_tt__NetworkInterfaceInfo(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceInfo* soap_new_set_tt__NetworkInterfaceInfo(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceInfo::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceInfo(soap*, tt__NetworkInterfaceInfo*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceInfo(soap*, tt__NetworkInterfaceInfo*) serialize to a stream
/// - tt__NetworkInterfaceInfo* tt__NetworkInterfaceInfo::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceInfo::soap_del() deep deletes tt__NetworkInterfaceInfo data members, use only after tt__NetworkInterfaceInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceInfo::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceInfo or derived type identifier
class tt__NetworkInterfaceInfo : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network interface name, for example eth0.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Network interface MAC address.
/// </BLOCKQUOTE></PRE>
///
/// Element "HwAddress" of type "http://www.onvif.org/ver10/schema":HwAddress.
    tt__HwAddress                        HwAddress                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum transmission unit.
/// </BLOCKQUOTE></PRE>
///
/// Element "MTU" of type xs:int.
    int*                                 MTU                            0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6NetworkInterface is a complexType.
///
/// @note class tt__IPv6NetworkInterface operations:
/// - tt__IPv6NetworkInterface* soap_new_tt__IPv6NetworkInterface(soap*) allocate and default initialize
/// - tt__IPv6NetworkInterface* soap_new_tt__IPv6NetworkInterface(soap*, int num) allocate and default initialize an array
/// - tt__IPv6NetworkInterface* soap_new_req_tt__IPv6NetworkInterface(soap*, ...) allocate, set required members
/// - tt__IPv6NetworkInterface* soap_new_set_tt__IPv6NetworkInterface(soap*, ...) allocate, set all public members
/// - tt__IPv6NetworkInterface::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6NetworkInterface(soap*, tt__IPv6NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__IPv6NetworkInterface(soap*, tt__IPv6NetworkInterface*) serialize to a stream
/// - tt__IPv6NetworkInterface* tt__IPv6NetworkInterface::soap_dup(soap*) returns deep copy of tt__IPv6NetworkInterface, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6NetworkInterface::soap_del() deep deletes tt__IPv6NetworkInterface data members, use only after tt__IPv6NetworkInterface::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6NetworkInterface::soap_type() returns SOAP_TYPE_tt__IPv6NetworkInterface or derived type identifier
class tt__IPv6NetworkInterface : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv6 configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Config" of type "http://www.onvif.org/ver10/schema":IPv6Configuration.
    tt__IPv6Configuration*               Config                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4NetworkInterface is a complexType.
///
/// @note class tt__IPv4NetworkInterface operations:
/// - tt__IPv4NetworkInterface* soap_new_tt__IPv4NetworkInterface(soap*) allocate and default initialize
/// - tt__IPv4NetworkInterface* soap_new_tt__IPv4NetworkInterface(soap*, int num) allocate and default initialize an array
/// - tt__IPv4NetworkInterface* soap_new_req_tt__IPv4NetworkInterface(soap*, ...) allocate, set required members
/// - tt__IPv4NetworkInterface* soap_new_set_tt__IPv4NetworkInterface(soap*, ...) allocate, set all public members
/// - tt__IPv4NetworkInterface::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv4NetworkInterface(soap*, tt__IPv4NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__IPv4NetworkInterface(soap*, tt__IPv4NetworkInterface*) serialize to a stream
/// - tt__IPv4NetworkInterface* tt__IPv4NetworkInterface::soap_dup(soap*) returns deep copy of tt__IPv4NetworkInterface, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv4NetworkInterface::soap_del() deep deletes tt__IPv4NetworkInterface data members, use only after tt__IPv4NetworkInterface::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv4NetworkInterface::soap_type() returns SOAP_TYPE_tt__IPv4NetworkInterface or derived type identifier
class tt__IPv4NetworkInterface : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv4 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Config" of type "http://www.onvif.org/ver10/schema":IPv4Configuration.
    tt__IPv4Configuration*               Config                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4Configuration is a complexType.
///
/// @note class tt__IPv4Configuration operations:
/// - tt__IPv4Configuration* soap_new_tt__IPv4Configuration(soap*) allocate and default initialize
/// - tt__IPv4Configuration* soap_new_tt__IPv4Configuration(soap*, int num) allocate and default initialize an array
/// - tt__IPv4Configuration* soap_new_req_tt__IPv4Configuration(soap*, ...) allocate, set required members
/// - tt__IPv4Configuration* soap_new_set_tt__IPv4Configuration(soap*, ...) allocate, set all public members
/// - tt__IPv4Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv4Configuration(soap*, tt__IPv4Configuration*) deserialize from a stream
/// - int soap_write_tt__IPv4Configuration(soap*, tt__IPv4Configuration*) serialize to a stream
/// - tt__IPv4Configuration* tt__IPv4Configuration::soap_dup(soap*) returns deep copy of tt__IPv4Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv4Configuration::soap_del() deep deletes tt__IPv4Configuration data members, use only after tt__IPv4Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv4Configuration::soap_type() returns SOAP_TYPE_tt__IPv4Configuration or derived type identifier
class tt__IPv4Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv4 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PrefixedIPv4Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv4Address*> Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Link local address.
/// </BLOCKQUOTE></PRE>
///
/// Element "LinkLocal" of type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    tt__PrefixedIPv4Address*             LinkLocal                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address configured by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    tt__PrefixedIPv4Address*             FromDHCP                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DHCP is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type xs:boolean.
    bool                                 DHCP                           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6Configuration is a complexType.
///
/// @note class tt__IPv6Configuration operations:
/// - tt__IPv6Configuration* soap_new_tt__IPv6Configuration(soap*) allocate and default initialize
/// - tt__IPv6Configuration* soap_new_tt__IPv6Configuration(soap*, int num) allocate and default initialize an array
/// - tt__IPv6Configuration* soap_new_req_tt__IPv6Configuration(soap*, ...) allocate, set required members
/// - tt__IPv6Configuration* soap_new_set_tt__IPv6Configuration(soap*, ...) allocate, set all public members
/// - tt__IPv6Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6Configuration(soap*, tt__IPv6Configuration*) deserialize from a stream
/// - int soap_write_tt__IPv6Configuration(soap*, tt__IPv6Configuration*) serialize to a stream
/// - tt__IPv6Configuration* tt__IPv6Configuration::soap_dup(soap*) returns deep copy of tt__IPv6Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6Configuration::soap_del() deep deletes tt__IPv6Configuration data members, use only after tt__IPv6Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6Configuration::soap_type() returns SOAP_TYPE_tt__IPv6Configuration or derived type identifier
class tt__IPv6Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether router advertisment is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "AcceptRouterAdvert" of type xs:boolean.
    bool*                                AcceptRouterAdvert             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DHCP configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    tt__IPv6DHCPConfiguration            DHCP                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of manually entered IPv6 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of link local IPv6 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> LinkLocal                      0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of IPv6 addresses configured by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> FromDHCP                       0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of IPv6 addresses configured by using router advertisment.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> FromRA                         0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension.
    tt__IPv6ConfigurationExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension is a complexType.
///
/// @note class tt__IPv6ConfigurationExtension operations:
/// - tt__IPv6ConfigurationExtension* soap_new_tt__IPv6ConfigurationExtension(soap*) allocate and default initialize
/// - tt__IPv6ConfigurationExtension* soap_new_tt__IPv6ConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__IPv6ConfigurationExtension* soap_new_req_tt__IPv6ConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__IPv6ConfigurationExtension* soap_new_set_tt__IPv6ConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__IPv6ConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6ConfigurationExtension(soap*, tt__IPv6ConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__IPv6ConfigurationExtension(soap*, tt__IPv6ConfigurationExtension*) serialize to a stream
/// - tt__IPv6ConfigurationExtension* tt__IPv6ConfigurationExtension::soap_dup(soap*) returns deep copy of tt__IPv6ConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6ConfigurationExtension::soap_del() deep deletes tt__IPv6ConfigurationExtension data members, use only after tt__IPv6ConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6ConfigurationExtension::soap_type() returns SOAP_TYPE_tt__IPv6ConfigurationExtension or derived type identifier
class tt__IPv6ConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocol is a complexType.
///
/// @note class tt__NetworkProtocol operations:
/// - tt__NetworkProtocol* soap_new_tt__NetworkProtocol(soap*) allocate and default initialize
/// - tt__NetworkProtocol* soap_new_tt__NetworkProtocol(soap*, int num) allocate and default initialize an array
/// - tt__NetworkProtocol* soap_new_req_tt__NetworkProtocol(soap*, ...) allocate, set required members
/// - tt__NetworkProtocol* soap_new_set_tt__NetworkProtocol(soap*, ...) allocate, set all public members
/// - tt__NetworkProtocol::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkProtocol(soap*, tt__NetworkProtocol*) deserialize from a stream
/// - int soap_write_tt__NetworkProtocol(soap*, tt__NetworkProtocol*) serialize to a stream
/// - tt__NetworkProtocol* tt__NetworkProtocol::soap_dup(soap*) returns deep copy of tt__NetworkProtocol, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkProtocol::soap_del() deep deletes tt__NetworkProtocol data members, use only after tt__NetworkProtocol::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkProtocol::soap_type() returns SOAP_TYPE_tt__NetworkProtocol or derived type identifier
class tt__NetworkProtocol : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network protocol type string.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":NetworkProtocolType.
    tt__NetworkProtocolType              Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the protocol is enabled or not.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The port that is used by the protocol.
/// </BLOCKQUOTE></PRE>
///
/// Vector of int of length 1..unbounded.
    std::vector<int                    > Port                           1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkProtocolExtension.
    tt__NetworkProtocolExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocolExtension is a complexType.
///
/// @note class tt__NetworkProtocolExtension operations:
/// - tt__NetworkProtocolExtension* soap_new_tt__NetworkProtocolExtension(soap*) allocate and default initialize
/// - tt__NetworkProtocolExtension* soap_new_tt__NetworkProtocolExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkProtocolExtension* soap_new_req_tt__NetworkProtocolExtension(soap*, ...) allocate, set required members
/// - tt__NetworkProtocolExtension* soap_new_set_tt__NetworkProtocolExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkProtocolExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkProtocolExtension(soap*, tt__NetworkProtocolExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkProtocolExtension(soap*, tt__NetworkProtocolExtension*) serialize to a stream
/// - tt__NetworkProtocolExtension* tt__NetworkProtocolExtension::soap_dup(soap*) returns deep copy of tt__NetworkProtocolExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkProtocolExtension::soap_del() deep deletes tt__NetworkProtocolExtension data members, use only after tt__NetworkProtocolExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkProtocolExtension::soap_type() returns SOAP_TYPE_tt__NetworkProtocolExtension or derived type identifier
class tt__NetworkProtocolExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHost is a complexType.
///
/// @note class tt__NetworkHost operations:
/// - tt__NetworkHost* soap_new_tt__NetworkHost(soap*) allocate and default initialize
/// - tt__NetworkHost* soap_new_tt__NetworkHost(soap*, int num) allocate and default initialize an array
/// - tt__NetworkHost* soap_new_req_tt__NetworkHost(soap*, ...) allocate, set required members
/// - tt__NetworkHost* soap_new_set_tt__NetworkHost(soap*, ...) allocate, set all public members
/// - tt__NetworkHost::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkHost(soap*, tt__NetworkHost*) deserialize from a stream
/// - int soap_write_tt__NetworkHost(soap*, tt__NetworkHost*) serialize to a stream
/// - tt__NetworkHost* tt__NetworkHost::soap_dup(soap*) returns deep copy of tt__NetworkHost, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkHost::soap_del() deep deletes tt__NetworkHost data members, use only after tt__NetworkHost::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkHost::soap_type() returns SOAP_TYPE_tt__NetworkHost or derived type identifier
class tt__NetworkHost : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network host type: IPv4, IPv6 or DNS.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":NetworkHostType.
    tt__NetworkHostType                  Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv4Address" of type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address*                     IPv4Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv6Address" of type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address*                     IPv6Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
///
/// Element "DNSname" of type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName*                         DNSname                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkHostExtension.
    tt__NetworkHostExtension*            Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHostExtension is a complexType.
///
/// @note class tt__NetworkHostExtension operations:
/// - tt__NetworkHostExtension* soap_new_tt__NetworkHostExtension(soap*) allocate and default initialize
/// - tt__NetworkHostExtension* soap_new_tt__NetworkHostExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkHostExtension* soap_new_req_tt__NetworkHostExtension(soap*, ...) allocate, set required members
/// - tt__NetworkHostExtension* soap_new_set_tt__NetworkHostExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkHostExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkHostExtension(soap*, tt__NetworkHostExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkHostExtension(soap*, tt__NetworkHostExtension*) serialize to a stream
/// - tt__NetworkHostExtension* tt__NetworkHostExtension::soap_dup(soap*) returns deep copy of tt__NetworkHostExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkHostExtension::soap_del() deep deletes tt__NetworkHostExtension data members, use only after tt__NetworkHostExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkHostExtension::soap_type() returns SOAP_TYPE_tt__NetworkHostExtension or derived type identifier
class tt__NetworkHostExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddress is a complexType.
///
/// @note class tt__IPAddress operations:
/// - tt__IPAddress* soap_new_tt__IPAddress(soap*) allocate and default initialize
/// - tt__IPAddress* soap_new_tt__IPAddress(soap*, int num) allocate and default initialize an array
/// - tt__IPAddress* soap_new_req_tt__IPAddress(soap*, ...) allocate, set required members
/// - tt__IPAddress* soap_new_set_tt__IPAddress(soap*, ...) allocate, set all public members
/// - tt__IPAddress::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPAddress(soap*, tt__IPAddress*) deserialize from a stream
/// - int soap_write_tt__IPAddress(soap*, tt__IPAddress*) serialize to a stream
/// - tt__IPAddress* tt__IPAddress::soap_dup(soap*) returns deep copy of tt__IPAddress, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPAddress::soap_del() deep deletes tt__IPAddress data members, use only after tt__IPAddress::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPAddress::soap_type() returns SOAP_TYPE_tt__IPAddress or derived type identifier
class tt__IPAddress : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the address is an IPv4 or IPv6 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":IPType.
    tt__IPType                           Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv4Address" of type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address*                     IPv4Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 address
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv6Address" of type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address*                     IPv6Address                    0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PrefixedIPv4Address is a complexType.
///
/// @note class tt__PrefixedIPv4Address operations:
/// - tt__PrefixedIPv4Address* soap_new_tt__PrefixedIPv4Address(soap*) allocate and default initialize
/// - tt__PrefixedIPv4Address* soap_new_tt__PrefixedIPv4Address(soap*, int num) allocate and default initialize an array
/// - tt__PrefixedIPv4Address* soap_new_req_tt__PrefixedIPv4Address(soap*, ...) allocate, set required members
/// - tt__PrefixedIPv4Address* soap_new_set_tt__PrefixedIPv4Address(soap*, ...) allocate, set all public members
/// - tt__PrefixedIPv4Address::soap_default(soap*) default initialize members
/// - int soap_read_tt__PrefixedIPv4Address(soap*, tt__PrefixedIPv4Address*) deserialize from a stream
/// - int soap_write_tt__PrefixedIPv4Address(soap*, tt__PrefixedIPv4Address*) serialize to a stream
/// - tt__PrefixedIPv4Address* tt__PrefixedIPv4Address::soap_dup(soap*) returns deep copy of tt__PrefixedIPv4Address, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PrefixedIPv4Address::soap_del() deep deletes tt__PrefixedIPv4Address data members, use only after tt__PrefixedIPv4Address::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PrefixedIPv4Address::soap_type() returns SOAP_TYPE_tt__PrefixedIPv4Address or derived type identifier
class tt__PrefixedIPv4Address : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv4 address
/// </BLOCKQUOTE></PRE>
///
/// Element "Address" of type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address                      Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Prefix/submask length
/// </BLOCKQUOTE></PRE>
///
/// Element "PrefixLength" of type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PrefixedIPv6Address is a complexType.
///
/// @note class tt__PrefixedIPv6Address operations:
/// - tt__PrefixedIPv6Address* soap_new_tt__PrefixedIPv6Address(soap*) allocate and default initialize
/// - tt__PrefixedIPv6Address* soap_new_tt__PrefixedIPv6Address(soap*, int num) allocate and default initialize an array
/// - tt__PrefixedIPv6Address* soap_new_req_tt__PrefixedIPv6Address(soap*, ...) allocate, set required members
/// - tt__PrefixedIPv6Address* soap_new_set_tt__PrefixedIPv6Address(soap*, ...) allocate, set all public members
/// - tt__PrefixedIPv6Address::soap_default(soap*) default initialize members
/// - int soap_read_tt__PrefixedIPv6Address(soap*, tt__PrefixedIPv6Address*) deserialize from a stream
/// - int soap_write_tt__PrefixedIPv6Address(soap*, tt__PrefixedIPv6Address*) serialize to a stream
/// - tt__PrefixedIPv6Address* tt__PrefixedIPv6Address::soap_dup(soap*) returns deep copy of tt__PrefixedIPv6Address, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PrefixedIPv6Address::soap_del() deep deletes tt__PrefixedIPv6Address data members, use only after tt__PrefixedIPv6Address::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PrefixedIPv6Address::soap_type() returns SOAP_TYPE_tt__PrefixedIPv6Address or derived type identifier
class tt__PrefixedIPv6Address : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv6 address
/// </BLOCKQUOTE></PRE>
///
/// Element "Address" of type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address                      Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Prefix/submask length
/// </BLOCKQUOTE></PRE>
///
/// Element "PrefixLength" of type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":HostnameInformation is a complexType.
///
/// @note class tt__HostnameInformation operations:
/// - tt__HostnameInformation* soap_new_tt__HostnameInformation(soap*) allocate and default initialize
/// - tt__HostnameInformation* soap_new_tt__HostnameInformation(soap*, int num) allocate and default initialize an array
/// - tt__HostnameInformation* soap_new_req_tt__HostnameInformation(soap*, ...) allocate, set required members
/// - tt__HostnameInformation* soap_new_set_tt__HostnameInformation(soap*, ...) allocate, set all public members
/// - tt__HostnameInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__HostnameInformation(soap*, tt__HostnameInformation*) deserialize from a stream
/// - int soap_write_tt__HostnameInformation(soap*, tt__HostnameInformation*) serialize to a stream
/// - tt__HostnameInformation* tt__HostnameInformation::soap_dup(soap*) returns deep copy of tt__HostnameInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__HostnameInformation::soap_del() deep deletes tt__HostnameInformation data members, use only after tt__HostnameInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__HostnameInformation::soap_type() returns SOAP_TYPE_tt__HostnameInformation or derived type identifier
class tt__HostnameInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether the hostname is obtained from DHCP or not.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates the hostname.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type xs:token.
    xsd__token*                          Name                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":HostnameInformationExtension.
    tt__HostnameInformationExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":HostnameInformationExtension is a complexType.
///
/// @note class tt__HostnameInformationExtension operations:
/// - tt__HostnameInformationExtension* soap_new_tt__HostnameInformationExtension(soap*) allocate and default initialize
/// - tt__HostnameInformationExtension* soap_new_tt__HostnameInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__HostnameInformationExtension* soap_new_req_tt__HostnameInformationExtension(soap*, ...) allocate, set required members
/// - tt__HostnameInformationExtension* soap_new_set_tt__HostnameInformationExtension(soap*, ...) allocate, set all public members
/// - tt__HostnameInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__HostnameInformationExtension(soap*, tt__HostnameInformationExtension*) deserialize from a stream
/// - int soap_write_tt__HostnameInformationExtension(soap*, tt__HostnameInformationExtension*) serialize to a stream
/// - tt__HostnameInformationExtension* tt__HostnameInformationExtension::soap_dup(soap*) returns deep copy of tt__HostnameInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__HostnameInformationExtension::soap_del() deep deletes tt__HostnameInformationExtension data members, use only after tt__HostnameInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__HostnameInformationExtension::soap_type() returns SOAP_TYPE_tt__HostnameInformationExtension or derived type identifier
class tt__HostnameInformationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":DNSInformation is a complexType.
///
/// @note class tt__DNSInformation operations:
/// - tt__DNSInformation* soap_new_tt__DNSInformation(soap*) allocate and default initialize
/// - tt__DNSInformation* soap_new_tt__DNSInformation(soap*, int num) allocate and default initialize an array
/// - tt__DNSInformation* soap_new_req_tt__DNSInformation(soap*, ...) allocate, set required members
/// - tt__DNSInformation* soap_new_set_tt__DNSInformation(soap*, ...) allocate, set all public members
/// - tt__DNSInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__DNSInformation(soap*, tt__DNSInformation*) deserialize from a stream
/// - int soap_write_tt__DNSInformation(soap*, tt__DNSInformation*) serialize to a stream
/// - tt__DNSInformation* tt__DNSInformation::soap_dup(soap*) returns deep copy of tt__DNSInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DNSInformation::soap_del() deep deletes tt__DNSInformation data members, use only after tt__DNSInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DNSInformation::soap_type() returns SOAP_TYPE_tt__DNSInformation or derived type identifier
class tt__DNSInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DNS information is retrieved from DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Search domain.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__token of length 0..unbounded.
    std::vector<xsd__token             > SearchDomain                   0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of DNS addresses received from DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPAddress* of length 0..unbounded.
    std::vector<tt__IPAddress*         > DNSFromDHCP                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of manually entered DNS addresses.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPAddress* of length 0..unbounded.
    std::vector<tt__IPAddress*         > DNSManual                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DNSInformationExtension.
    tt__DNSInformationExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DNSInformationExtension is a complexType.
///
/// @note class tt__DNSInformationExtension operations:
/// - tt__DNSInformationExtension* soap_new_tt__DNSInformationExtension(soap*) allocate and default initialize
/// - tt__DNSInformationExtension* soap_new_tt__DNSInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__DNSInformationExtension* soap_new_req_tt__DNSInformationExtension(soap*, ...) allocate, set required members
/// - tt__DNSInformationExtension* soap_new_set_tt__DNSInformationExtension(soap*, ...) allocate, set all public members
/// - tt__DNSInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DNSInformationExtension(soap*, tt__DNSInformationExtension*) deserialize from a stream
/// - int soap_write_tt__DNSInformationExtension(soap*, tt__DNSInformationExtension*) serialize to a stream
/// - tt__DNSInformationExtension* tt__DNSInformationExtension::soap_dup(soap*) returns deep copy of tt__DNSInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DNSInformationExtension::soap_del() deep deletes tt__DNSInformationExtension data members, use only after tt__DNSInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DNSInformationExtension::soap_type() returns SOAP_TYPE_tt__DNSInformationExtension or derived type identifier
class tt__DNSInformationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":NTPInformation is a complexType.
///
/// @note class tt__NTPInformation operations:
/// - tt__NTPInformation* soap_new_tt__NTPInformation(soap*) allocate and default initialize
/// - tt__NTPInformation* soap_new_tt__NTPInformation(soap*, int num) allocate and default initialize an array
/// - tt__NTPInformation* soap_new_req_tt__NTPInformation(soap*, ...) allocate, set required members
/// - tt__NTPInformation* soap_new_set_tt__NTPInformation(soap*, ...) allocate, set all public members
/// - tt__NTPInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__NTPInformation(soap*, tt__NTPInformation*) deserialize from a stream
/// - int soap_write_tt__NTPInformation(soap*, tt__NTPInformation*) serialize to a stream
/// - tt__NTPInformation* tt__NTPInformation::soap_dup(soap*) returns deep copy of tt__NTPInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NTPInformation::soap_del() deep deletes tt__NTPInformation data members, use only after tt__NTPInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NTPInformation::soap_type() returns SOAP_TYPE_tt__NTPInformation or derived type identifier
class tt__NTPInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if NTP information is to be retrieved by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of NTP addresses retrieved by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > NTPFromDHCP                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of manually entered NTP addresses.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > NTPManual                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NTPInformationExtension.
    tt__NTPInformationExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NTPInformationExtension is a complexType.
///
/// @note class tt__NTPInformationExtension operations:
/// - tt__NTPInformationExtension* soap_new_tt__NTPInformationExtension(soap*) allocate and default initialize
/// - tt__NTPInformationExtension* soap_new_tt__NTPInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__NTPInformationExtension* soap_new_req_tt__NTPInformationExtension(soap*, ...) allocate, set required members
/// - tt__NTPInformationExtension* soap_new_set_tt__NTPInformationExtension(soap*, ...) allocate, set all public members
/// - tt__NTPInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NTPInformationExtension(soap*, tt__NTPInformationExtension*) deserialize from a stream
/// - int soap_write_tt__NTPInformationExtension(soap*, tt__NTPInformationExtension*) serialize to a stream
/// - tt__NTPInformationExtension* tt__NTPInformationExtension::soap_dup(soap*) returns deep copy of tt__NTPInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NTPInformationExtension::soap_del() deep deletes tt__NTPInformationExtension data members, use only after tt__NTPInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NTPInformationExtension::soap_type() returns SOAP_TYPE_tt__NTPInformationExtension or derived type identifier
class tt__NTPInformationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSInformation is a complexType.
///
/// @note class tt__DynamicDNSInformation operations:
/// - tt__DynamicDNSInformation* soap_new_tt__DynamicDNSInformation(soap*) allocate and default initialize
/// - tt__DynamicDNSInformation* soap_new_tt__DynamicDNSInformation(soap*, int num) allocate and default initialize an array
/// - tt__DynamicDNSInformation* soap_new_req_tt__DynamicDNSInformation(soap*, ...) allocate, set required members
/// - tt__DynamicDNSInformation* soap_new_set_tt__DynamicDNSInformation(soap*, ...) allocate, set all public members
/// - tt__DynamicDNSInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__DynamicDNSInformation(soap*, tt__DynamicDNSInformation*) deserialize from a stream
/// - int soap_write_tt__DynamicDNSInformation(soap*, tt__DynamicDNSInformation*) serialize to a stream
/// - tt__DynamicDNSInformation* tt__DynamicDNSInformation::soap_dup(soap*) returns deep copy of tt__DynamicDNSInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DynamicDNSInformation::soap_del() deep deletes tt__DynamicDNSInformation data members, use only after tt__DynamicDNSInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DynamicDNSInformation::soap_type() returns SOAP_TYPE_tt__DynamicDNSInformation or derived type identifier
class tt__DynamicDNSInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Dynamic DNS type.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":DynamicDNSType.
    tt__DynamicDNSType                   Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time to live.
/// </BLOCKQUOTE></PRE>
///
/// Element "TTL" of type xs:duration.
    xsd__duration*                       TTL                            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension.
    tt__DynamicDNSInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension is a complexType.
///
/// @note class tt__DynamicDNSInformationExtension operations:
/// - tt__DynamicDNSInformationExtension* soap_new_tt__DynamicDNSInformationExtension(soap*) allocate and default initialize
/// - tt__DynamicDNSInformationExtension* soap_new_tt__DynamicDNSInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__DynamicDNSInformationExtension* soap_new_req_tt__DynamicDNSInformationExtension(soap*, ...) allocate, set required members
/// - tt__DynamicDNSInformationExtension* soap_new_set_tt__DynamicDNSInformationExtension(soap*, ...) allocate, set all public members
/// - tt__DynamicDNSInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DynamicDNSInformationExtension(soap*, tt__DynamicDNSInformationExtension*) deserialize from a stream
/// - int soap_write_tt__DynamicDNSInformationExtension(soap*, tt__DynamicDNSInformationExtension*) serialize to a stream
/// - tt__DynamicDNSInformationExtension* tt__DynamicDNSInformationExtension::soap_dup(soap*) returns deep copy of tt__DynamicDNSInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DynamicDNSInformationExtension::soap_del() deep deletes tt__DynamicDNSInformationExtension data members, use only after tt__DynamicDNSInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DynamicDNSInformationExtension::soap_type() returns SOAP_TYPE_tt__DynamicDNSInformationExtension or derived type identifier
class tt__DynamicDNSInformationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfiguration is a complexType.
///
/// @note class tt__NetworkInterfaceSetConfiguration operations:
/// - tt__NetworkInterfaceSetConfiguration* soap_new_tt__NetworkInterfaceSetConfiguration(soap*) allocate and default initialize
/// - tt__NetworkInterfaceSetConfiguration* soap_new_tt__NetworkInterfaceSetConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceSetConfiguration* soap_new_req_tt__NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceSetConfiguration* soap_new_set_tt__NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceSetConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceSetConfiguration(soap*, tt__NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfiguration(soap*, tt__NetworkInterfaceSetConfiguration*) serialize to a stream
/// - tt__NetworkInterfaceSetConfiguration* tt__NetworkInterfaceSetConfiguration::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceSetConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceSetConfiguration::soap_del() deep deletes tt__NetworkInterfaceSetConfiguration data members, use only after tt__NetworkInterfaceSetConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceSetConfiguration::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceSetConfiguration or derived type identifier
class tt__NetworkInterfaceSetConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not an interface is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Link configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Link" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  Link                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transmission unit.
/// </BLOCKQUOTE></PRE>
///
/// Element "MTU" of type xs:int.
    int*                                 MTU                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 network interface configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv4" of type "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration.
    tt__IPv4NetworkInterfaceSetConfiguration*  IPv4                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 network interface configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv6" of type "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration.
    tt__IPv6NetworkInterfaceSetConfiguration*  IPv6                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension.
    tt__NetworkInterfaceSetConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension is a complexType.
///
/// @note class tt__NetworkInterfaceSetConfigurationExtension operations:
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap*) allocate and default initialize
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_req_tt__NetworkInterfaceSetConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_set_tt__NetworkInterfaceSetConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceSetConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceSetConfigurationExtension(soap*, tt__NetworkInterfaceSetConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfigurationExtension(soap*, tt__NetworkInterfaceSetConfigurationExtension*) serialize to a stream
/// - tt__NetworkInterfaceSetConfigurationExtension* tt__NetworkInterfaceSetConfigurationExtension::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceSetConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceSetConfigurationExtension::soap_del() deep deletes tt__NetworkInterfaceSetConfigurationExtension data members, use only after tt__NetworkInterfaceSetConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceSetConfigurationExtension::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension or derived type identifier
class tt__NetworkInterfaceSetConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Vector of tt__Dot3Configuration* of length 0..unbounded.
    std::vector<tt__Dot3Configuration* > Dot3                           0;	///< Multiple elements.
/// Vector of tt__Dot11Configuration* of length 0..unbounded.
    std::vector<tt__Dot11Configuration*> Dot11                          0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2.
    tt__NetworkInterfaceSetConfigurationExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration is a complexType.
///
/// @note class tt__IPv6NetworkInterfaceSetConfiguration operations:
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap*) allocate and default initialize
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_req_tt__IPv6NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_set_tt__IPv6NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - tt__IPv6NetworkInterfaceSetConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6NetworkInterfaceSetConfiguration(soap*, tt__IPv6NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__IPv6NetworkInterfaceSetConfiguration(soap*, tt__IPv6NetworkInterfaceSetConfiguration*) serialize to a stream
/// - tt__IPv6NetworkInterfaceSetConfiguration* tt__IPv6NetworkInterfaceSetConfiguration::soap_dup(soap*) returns deep copy of tt__IPv6NetworkInterfaceSetConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6NetworkInterfaceSetConfiguration::soap_del() deep deletes tt__IPv6NetworkInterfaceSetConfiguration data members, use only after tt__IPv6NetworkInterfaceSetConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6NetworkInterfaceSetConfiguration::soap_type() returns SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration or derived type identifier
class tt__IPv6NetworkInterfaceSetConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether router advertisment is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "AcceptRouterAdvert" of type xs:boolean.
    bool*                                AcceptRouterAdvert             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv6 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   DHCP configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    tt__IPv6DHCPConfiguration*           DHCP                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration is a complexType.
///
/// @note class tt__IPv4NetworkInterfaceSetConfiguration operations:
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap*) allocate and default initialize
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_req_tt__IPv4NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_set_tt__IPv4NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - tt__IPv4NetworkInterfaceSetConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv4NetworkInterfaceSetConfiguration(soap*, tt__IPv4NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__IPv4NetworkInterfaceSetConfiguration(soap*, tt__IPv4NetworkInterfaceSetConfiguration*) serialize to a stream
/// - tt__IPv4NetworkInterfaceSetConfiguration* tt__IPv4NetworkInterfaceSetConfiguration::soap_dup(soap*) returns deep copy of tt__IPv4NetworkInterfaceSetConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv4NetworkInterfaceSetConfiguration::soap_del() deep deletes tt__IPv4NetworkInterfaceSetConfiguration data members, use only after tt__IPv4NetworkInterfaceSetConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv4NetworkInterfaceSetConfiguration::soap_type() returns SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration or derived type identifier
class tt__IPv4NetworkInterfaceSetConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv4 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv4 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PrefixedIPv4Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv4Address*> Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DHCP is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type xs:boolean.
    bool*                                DHCP                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkGateway is a complexType.
///
/// @note class tt__NetworkGateway operations:
/// - tt__NetworkGateway* soap_new_tt__NetworkGateway(soap*) allocate and default initialize
/// - tt__NetworkGateway* soap_new_tt__NetworkGateway(soap*, int num) allocate and default initialize an array
/// - tt__NetworkGateway* soap_new_req_tt__NetworkGateway(soap*, ...) allocate, set required members
/// - tt__NetworkGateway* soap_new_set_tt__NetworkGateway(soap*, ...) allocate, set all public members
/// - tt__NetworkGateway::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkGateway(soap*, tt__NetworkGateway*) deserialize from a stream
/// - int soap_write_tt__NetworkGateway(soap*, tt__NetworkGateway*) serialize to a stream
/// - tt__NetworkGateway* tt__NetworkGateway::soap_dup(soap*) returns deep copy of tt__NetworkGateway, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkGateway::soap_del() deep deletes tt__NetworkGateway data members, use only after tt__NetworkGateway::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkGateway::soap_type() returns SOAP_TYPE_tt__NetworkGateway or derived type identifier
class tt__NetworkGateway : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv4 address string.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPv4Address of length 0..unbounded.
    std::vector<tt__IPv4Address        > IPv4Address                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   IPv6 address string.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPv6Address of length 0..unbounded.
    std::vector<tt__IPv6Address        > IPv6Address                    0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfiguration is a complexType.
///
/// @note class tt__NetworkZeroConfiguration operations:
/// - tt__NetworkZeroConfiguration* soap_new_tt__NetworkZeroConfiguration(soap*) allocate and default initialize
/// - tt__NetworkZeroConfiguration* soap_new_tt__NetworkZeroConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__NetworkZeroConfiguration* soap_new_req_tt__NetworkZeroConfiguration(soap*, ...) allocate, set required members
/// - tt__NetworkZeroConfiguration* soap_new_set_tt__NetworkZeroConfiguration(soap*, ...) allocate, set all public members
/// - tt__NetworkZeroConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkZeroConfiguration(soap*, tt__NetworkZeroConfiguration*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfiguration(soap*, tt__NetworkZeroConfiguration*) serialize to a stream
/// - tt__NetworkZeroConfiguration* tt__NetworkZeroConfiguration::soap_dup(soap*) returns deep copy of tt__NetworkZeroConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkZeroConfiguration::soap_del() deep deletes tt__NetworkZeroConfiguration data members, use only after tt__NetworkZeroConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkZeroConfiguration::soap_type() returns SOAP_TYPE_tt__NetworkZeroConfiguration or derived type identifier
class tt__NetworkZeroConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier of network interface.
/// </BLOCKQUOTE></PRE>
///
/// Element "InterfaceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the zero-configuration is enabled or not.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The zero-configuration IPv4 address(es)
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IPv4Address of length 0..unbounded.
    std::vector<tt__IPv4Address        > Addresses                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension.
    tt__NetworkZeroConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension is a complexType.
///
/// @note class tt__NetworkZeroConfigurationExtension operations:
/// - tt__NetworkZeroConfigurationExtension* soap_new_tt__NetworkZeroConfigurationExtension(soap*) allocate and default initialize
/// - tt__NetworkZeroConfigurationExtension* soap_new_tt__NetworkZeroConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkZeroConfigurationExtension* soap_new_req_tt__NetworkZeroConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__NetworkZeroConfigurationExtension* soap_new_set_tt__NetworkZeroConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkZeroConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkZeroConfigurationExtension(soap*, tt__NetworkZeroConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfigurationExtension(soap*, tt__NetworkZeroConfigurationExtension*) serialize to a stream
/// - tt__NetworkZeroConfigurationExtension* tt__NetworkZeroConfigurationExtension::soap_dup(soap*) returns deep copy of tt__NetworkZeroConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkZeroConfigurationExtension::soap_del() deep deletes tt__NetworkZeroConfigurationExtension data members, use only after tt__NetworkZeroConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkZeroConfigurationExtension::soap_type() returns SOAP_TYPE_tt__NetworkZeroConfigurationExtension or derived type identifier
class tt__NetworkZeroConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Optional array holding the configuration for the second and possibly further interfaces.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__NetworkZeroConfiguration* of length 0..unbounded.
    std::vector<tt__NetworkZeroConfiguration*> Additional                     0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension2.
    tt__NetworkZeroConfigurationExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension2 is a complexType.
///
/// @note class tt__NetworkZeroConfigurationExtension2 operations:
/// - tt__NetworkZeroConfigurationExtension2* soap_new_tt__NetworkZeroConfigurationExtension2(soap*) allocate and default initialize
/// - tt__NetworkZeroConfigurationExtension2* soap_new_tt__NetworkZeroConfigurationExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkZeroConfigurationExtension2* soap_new_req_tt__NetworkZeroConfigurationExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkZeroConfigurationExtension2* soap_new_set_tt__NetworkZeroConfigurationExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkZeroConfigurationExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkZeroConfigurationExtension2(soap*, tt__NetworkZeroConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfigurationExtension2(soap*, tt__NetworkZeroConfigurationExtension2*) serialize to a stream
/// - tt__NetworkZeroConfigurationExtension2* tt__NetworkZeroConfigurationExtension2::soap_dup(soap*) returns deep copy of tt__NetworkZeroConfigurationExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkZeroConfigurationExtension2::soap_del() deep deletes tt__NetworkZeroConfigurationExtension2 data members, use only after tt__NetworkZeroConfigurationExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkZeroConfigurationExtension2::soap_type() returns SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 or derived type identifier
class tt__NetworkZeroConfigurationExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilter is a complexType.
///
/// @note class tt__IPAddressFilter operations:
/// - tt__IPAddressFilter* soap_new_tt__IPAddressFilter(soap*) allocate and default initialize
/// - tt__IPAddressFilter* soap_new_tt__IPAddressFilter(soap*, int num) allocate and default initialize an array
/// - tt__IPAddressFilter* soap_new_req_tt__IPAddressFilter(soap*, ...) allocate, set required members
/// - tt__IPAddressFilter* soap_new_set_tt__IPAddressFilter(soap*, ...) allocate, set all public members
/// - tt__IPAddressFilter::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPAddressFilter(soap*, tt__IPAddressFilter*) deserialize from a stream
/// - int soap_write_tt__IPAddressFilter(soap*, tt__IPAddressFilter*) serialize to a stream
/// - tt__IPAddressFilter* tt__IPAddressFilter::soap_dup(soap*) returns deep copy of tt__IPAddressFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPAddressFilter::soap_del() deep deletes tt__IPAddressFilter data members, use only after tt__IPAddressFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPAddressFilter::soap_type() returns SOAP_TYPE_tt__IPAddressFilter or derived type identifier
class tt__IPAddressFilter : public xsd__anyType
{ public:
/// Element "Type" of type "http://www.onvif.org/ver10/schema":IPAddressFilterType.
    tt__IPAddressFilterType              Type                           1;	///< Required element.
/// Vector of tt__PrefixedIPv4Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv4Address*> IPv4Address                    0;	///< Multiple elements.
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> IPv6Address                    0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IPAddressFilterExtension.
    tt__IPAddressFilterExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilterExtension is a complexType.
///
/// @note class tt__IPAddressFilterExtension operations:
/// - tt__IPAddressFilterExtension* soap_new_tt__IPAddressFilterExtension(soap*) allocate and default initialize
/// - tt__IPAddressFilterExtension* soap_new_tt__IPAddressFilterExtension(soap*, int num) allocate and default initialize an array
/// - tt__IPAddressFilterExtension* soap_new_req_tt__IPAddressFilterExtension(soap*, ...) allocate, set required members
/// - tt__IPAddressFilterExtension* soap_new_set_tt__IPAddressFilterExtension(soap*, ...) allocate, set all public members
/// - tt__IPAddressFilterExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPAddressFilterExtension(soap*, tt__IPAddressFilterExtension*) deserialize from a stream
/// - int soap_write_tt__IPAddressFilterExtension(soap*, tt__IPAddressFilterExtension*) serialize to a stream
/// - tt__IPAddressFilterExtension* tt__IPAddressFilterExtension::soap_dup(soap*) returns deep copy of tt__IPAddressFilterExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPAddressFilterExtension::soap_del() deep deletes tt__IPAddressFilterExtension data members, use only after tt__IPAddressFilterExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPAddressFilterExtension::soap_type() returns SOAP_TYPE_tt__IPAddressFilterExtension or derived type identifier
class tt__IPAddressFilterExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Configuration is a complexType.
///
/// @note class tt__Dot11Configuration operations:
/// - tt__Dot11Configuration* soap_new_tt__Dot11Configuration(soap*) allocate and default initialize
/// - tt__Dot11Configuration* soap_new_tt__Dot11Configuration(soap*, int num) allocate and default initialize an array
/// - tt__Dot11Configuration* soap_new_req_tt__Dot11Configuration(soap*, ...) allocate, set required members
/// - tt__Dot11Configuration* soap_new_set_tt__Dot11Configuration(soap*, ...) allocate, set all public members
/// - tt__Dot11Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11Configuration(soap*, tt__Dot11Configuration*) deserialize from a stream
/// - int soap_write_tt__Dot11Configuration(soap*, tt__Dot11Configuration*) serialize to a stream
/// - tt__Dot11Configuration* tt__Dot11Configuration::soap_dup(soap*) returns deep copy of tt__Dot11Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11Configuration::soap_del() deep deletes tt__Dot11Configuration data members, use only after tt__Dot11Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11Configuration::soap_type() returns SOAP_TYPE_tt__Dot11Configuration or derived type identifier
class tt__Dot11Configuration : public xsd__anyType
{ public:
/// Element "SSID" of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":Dot11StationMode.
    tt__Dot11StationMode                 Mode                           1;	///< Required element.
/// Element "Alias" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Alias                          1;	///< Required element.
/// Element "Priority" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConfigPriority.
    tt__NetworkInterfaceConfigPriority   Priority                       1;	///< Required element.
/// Element "Security" of type "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration.
    tt__Dot11SecurityConfiguration*      Security                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration is a complexType.
///
/// @note class tt__Dot11SecurityConfiguration operations:
/// - tt__Dot11SecurityConfiguration* soap_new_tt__Dot11SecurityConfiguration(soap*) allocate and default initialize
/// - tt__Dot11SecurityConfiguration* soap_new_tt__Dot11SecurityConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__Dot11SecurityConfiguration* soap_new_req_tt__Dot11SecurityConfiguration(soap*, ...) allocate, set required members
/// - tt__Dot11SecurityConfiguration* soap_new_set_tt__Dot11SecurityConfiguration(soap*, ...) allocate, set all public members
/// - tt__Dot11SecurityConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11SecurityConfiguration(soap*, tt__Dot11SecurityConfiguration*) deserialize from a stream
/// - int soap_write_tt__Dot11SecurityConfiguration(soap*, tt__Dot11SecurityConfiguration*) serialize to a stream
/// - tt__Dot11SecurityConfiguration* tt__Dot11SecurityConfiguration::soap_dup(soap*) returns deep copy of tt__Dot11SecurityConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11SecurityConfiguration::soap_del() deep deletes tt__Dot11SecurityConfiguration data members, use only after tt__Dot11SecurityConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11SecurityConfiguration::soap_type() returns SOAP_TYPE_tt__Dot11SecurityConfiguration or derived type identifier
class tt__Dot11SecurityConfiguration : public xsd__anyType
{ public:
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":Dot11SecurityMode.
    tt__Dot11SecurityMode                Mode                           1;	///< Required element.
/// Element "Algorithm" of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    tt__Dot11Cipher*                     Algorithm                      0;	///< Optional element.
/// Element "PSK" of type "http://www.onvif.org/ver10/schema":Dot11PSKSet.
    tt__Dot11PSKSet*                     PSK                            0;	///< Optional element.
/// Element "Dot1X" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  Dot1X                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension.
    tt__Dot11SecurityConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension is a complexType.
///
/// @note class tt__Dot11SecurityConfigurationExtension operations:
/// - tt__Dot11SecurityConfigurationExtension* soap_new_tt__Dot11SecurityConfigurationExtension(soap*) allocate and default initialize
/// - tt__Dot11SecurityConfigurationExtension* soap_new_tt__Dot11SecurityConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot11SecurityConfigurationExtension* soap_new_req_tt__Dot11SecurityConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__Dot11SecurityConfigurationExtension* soap_new_set_tt__Dot11SecurityConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__Dot11SecurityConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11SecurityConfigurationExtension(soap*, tt__Dot11SecurityConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11SecurityConfigurationExtension(soap*, tt__Dot11SecurityConfigurationExtension*) serialize to a stream
/// - tt__Dot11SecurityConfigurationExtension* tt__Dot11SecurityConfigurationExtension::soap_dup(soap*) returns deep copy of tt__Dot11SecurityConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11SecurityConfigurationExtension::soap_del() deep deletes tt__Dot11SecurityConfigurationExtension data members, use only after tt__Dot11SecurityConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11SecurityConfigurationExtension::soap_type() returns SOAP_TYPE_tt__Dot11SecurityConfigurationExtension or derived type identifier
class tt__Dot11SecurityConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKSet is a complexType.
///
/// @note class tt__Dot11PSKSet operations:
/// - tt__Dot11PSKSet* soap_new_tt__Dot11PSKSet(soap*) allocate and default initialize
/// - tt__Dot11PSKSet* soap_new_tt__Dot11PSKSet(soap*, int num) allocate and default initialize an array
/// - tt__Dot11PSKSet* soap_new_req_tt__Dot11PSKSet(soap*, ...) allocate, set required members
/// - tt__Dot11PSKSet* soap_new_set_tt__Dot11PSKSet(soap*, ...) allocate, set all public members
/// - tt__Dot11PSKSet::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11PSKSet(soap*, tt__Dot11PSKSet*) deserialize from a stream
/// - int soap_write_tt__Dot11PSKSet(soap*, tt__Dot11PSKSet*) serialize to a stream
/// - tt__Dot11PSKSet* tt__Dot11PSKSet::soap_dup(soap*) returns deep copy of tt__Dot11PSKSet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11PSKSet::soap_del() deep deletes tt__Dot11PSKSet data members, use only after tt__Dot11PSKSet::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11PSKSet::soap_type() returns SOAP_TYPE_tt__Dot11PSKSet or derived type identifier
class tt__Dot11PSKSet : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   According to IEEE802.11-2007 H.4.1 the RSNA PSK consists of 256 bits, or 64 octets when represented in hex<br/>
///   Either Key or Passphrase shall be given, if both are supplied Key shall be used by the device and Passphrase ignored.
/// </BLOCKQUOTE></PRE>
///
/// Element "Key" of type "http://www.onvif.org/ver10/schema":Dot11PSK.
    tt__Dot11PSK*                        Key                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   According to IEEE802.11-2007 H.4.1 a pass-phrase is a sequence of between 8 and 63 ASCII-encoded characters and
///   each character in the pass-phrase must have an encoding in the range of 32 to 126 (decimal),inclusive.<br/>
///   If only Passpharse is supplied the Key shall be derived using the algorithm described in IEEE802.11-2007 section H.4
/// </BLOCKQUOTE></PRE>
///
/// Element "Passphrase" of type "http://www.onvif.org/ver10/schema":Dot11PSKPassphrase.
    tt__Dot11PSKPassphrase*              Passphrase                     0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension.
    tt__Dot11PSKSetExtension*            Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension is a complexType.
///
/// @note class tt__Dot11PSKSetExtension operations:
/// - tt__Dot11PSKSetExtension* soap_new_tt__Dot11PSKSetExtension(soap*) allocate and default initialize
/// - tt__Dot11PSKSetExtension* soap_new_tt__Dot11PSKSetExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot11PSKSetExtension* soap_new_req_tt__Dot11PSKSetExtension(soap*, ...) allocate, set required members
/// - tt__Dot11PSKSetExtension* soap_new_set_tt__Dot11PSKSetExtension(soap*, ...) allocate, set all public members
/// - tt__Dot11PSKSetExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11PSKSetExtension(soap*, tt__Dot11PSKSetExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11PSKSetExtension(soap*, tt__Dot11PSKSetExtension*) serialize to a stream
/// - tt__Dot11PSKSetExtension* tt__Dot11PSKSetExtension::soap_dup(soap*) returns deep copy of tt__Dot11PSKSetExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11PSKSetExtension::soap_del() deep deletes tt__Dot11PSKSetExtension data members, use only after tt__Dot11PSKSetExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11PSKSetExtension::soap_type() returns SOAP_TYPE_tt__Dot11PSKSetExtension or derived type identifier
class tt__Dot11PSKSetExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2 is a complexType.
///
/// @note class tt__NetworkInterfaceSetConfigurationExtension2 operations:
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap*) allocate and default initialize
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_req_tt__NetworkInterfaceSetConfigurationExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_set_tt__NetworkInterfaceSetConfigurationExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceSetConfigurationExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceSetConfigurationExtension2(soap*, tt__NetworkInterfaceSetConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfigurationExtension2(soap*, tt__NetworkInterfaceSetConfigurationExtension2*) serialize to a stream
/// - tt__NetworkInterfaceSetConfigurationExtension2* tt__NetworkInterfaceSetConfigurationExtension2::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceSetConfigurationExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceSetConfigurationExtension2::soap_del() deep deletes tt__NetworkInterfaceSetConfigurationExtension2 data members, use only after tt__NetworkInterfaceSetConfigurationExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceSetConfigurationExtension2::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 or derived type identifier
class tt__NetworkInterfaceSetConfigurationExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Capabilities is a complexType.
///
/// @note class tt__Dot11Capabilities operations:
/// - tt__Dot11Capabilities* soap_new_tt__Dot11Capabilities(soap*) allocate and default initialize
/// - tt__Dot11Capabilities* soap_new_tt__Dot11Capabilities(soap*, int num) allocate and default initialize an array
/// - tt__Dot11Capabilities* soap_new_req_tt__Dot11Capabilities(soap*, ...) allocate, set required members
/// - tt__Dot11Capabilities* soap_new_set_tt__Dot11Capabilities(soap*, ...) allocate, set all public members
/// - tt__Dot11Capabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11Capabilities(soap*, tt__Dot11Capabilities*) deserialize from a stream
/// - int soap_write_tt__Dot11Capabilities(soap*, tt__Dot11Capabilities*) serialize to a stream
/// - tt__Dot11Capabilities* tt__Dot11Capabilities::soap_dup(soap*) returns deep copy of tt__Dot11Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11Capabilities::soap_del() deep deletes tt__Dot11Capabilities data members, use only after tt__Dot11Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11Capabilities::soap_type() returns SOAP_TYPE_tt__Dot11Capabilities or derived type identifier
class tt__Dot11Capabilities : public xsd__anyType
{ public:
/// Element "TKIP" of type xs:boolean.
    bool                                 TKIP                           1;	///< Required element.
/// Element "ScanAvailableNetworks" of type xs:boolean.
    bool                                 ScanAvailableNetworks          1;	///< Required element.
/// Element "MultipleConfiguration" of type xs:boolean.
    bool                                 MultipleConfiguration          1;	///< Required element.
/// Element "AdHocStationMode" of type xs:boolean.
    bool                                 AdHocStationMode               1;	///< Required element.
/// Element "WEP" of type xs:boolean.
    bool                                 WEP                            1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Status is a complexType.
///
/// @note class tt__Dot11Status operations:
/// - tt__Dot11Status* soap_new_tt__Dot11Status(soap*) allocate and default initialize
/// - tt__Dot11Status* soap_new_tt__Dot11Status(soap*, int num) allocate and default initialize an array
/// - tt__Dot11Status* soap_new_req_tt__Dot11Status(soap*, ...) allocate, set required members
/// - tt__Dot11Status* soap_new_set_tt__Dot11Status(soap*, ...) allocate, set all public members
/// - tt__Dot11Status::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11Status(soap*, tt__Dot11Status*) deserialize from a stream
/// - int soap_write_tt__Dot11Status(soap*, tt__Dot11Status*) serialize to a stream
/// - tt__Dot11Status* tt__Dot11Status::soap_dup(soap*) returns deep copy of tt__Dot11Status, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11Status::soap_del() deep deletes tt__Dot11Status data members, use only after tt__Dot11Status::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11Status::soap_type() returns SOAP_TYPE_tt__Dot11Status or derived type identifier
class tt__Dot11Status : public xsd__anyType
{ public:
/// Element "SSID" of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "BSSID" of type xs:string.
    std::string*                         BSSID                          0;	///< Optional element.
/// Element "PairCipher" of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    tt__Dot11Cipher*                     PairCipher                     0;	///< Optional element.
/// Element "GroupCipher" of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    tt__Dot11Cipher*                     GroupCipher                    0;	///< Optional element.
/// Element "SignalStrength" of type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    tt__Dot11SignalStrength*             SignalStrength                 0;	///< Optional element.
/// Element "ActiveConfigAlias" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   ActiveConfigAlias              1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AvailableNetworks is a complexType.
///
/// @note class tt__Dot11AvailableNetworks operations:
/// - tt__Dot11AvailableNetworks* soap_new_tt__Dot11AvailableNetworks(soap*) allocate and default initialize
/// - tt__Dot11AvailableNetworks* soap_new_tt__Dot11AvailableNetworks(soap*, int num) allocate and default initialize an array
/// - tt__Dot11AvailableNetworks* soap_new_req_tt__Dot11AvailableNetworks(soap*, ...) allocate, set required members
/// - tt__Dot11AvailableNetworks* soap_new_set_tt__Dot11AvailableNetworks(soap*, ...) allocate, set all public members
/// - tt__Dot11AvailableNetworks::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11AvailableNetworks(soap*, tt__Dot11AvailableNetworks*) deserialize from a stream
/// - int soap_write_tt__Dot11AvailableNetworks(soap*, tt__Dot11AvailableNetworks*) serialize to a stream
/// - tt__Dot11AvailableNetworks* tt__Dot11AvailableNetworks::soap_dup(soap*) returns deep copy of tt__Dot11AvailableNetworks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11AvailableNetworks::soap_del() deep deletes tt__Dot11AvailableNetworks data members, use only after tt__Dot11AvailableNetworks::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11AvailableNetworks::soap_type() returns SOAP_TYPE_tt__Dot11AvailableNetworks or derived type identifier
class tt__Dot11AvailableNetworks : public xsd__anyType
{ public:
/// Element "SSID" of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "BSSID" of type xs:string.
    std::string*                         BSSID                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   See IEEE802.11 7.3.2.25.2 for details.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Dot11AuthAndMangementSuite of length 0..unbounded.
    std::vector<tt__Dot11AuthAndMangementSuite> AuthAndMangementSuite          0;	///< Multiple elements.
/// Vector of tt__Dot11Cipher of length 0..unbounded.
    std::vector<tt__Dot11Cipher        > PairCipher                     0;	///< Multiple elements.
/// Vector of tt__Dot11Cipher of length 0..unbounded.
    std::vector<tt__Dot11Cipher        > GroupCipher                    0;	///< Multiple elements.
/// Element "SignalStrength" of type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    tt__Dot11SignalStrength*             SignalStrength                 0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension.
    tt__Dot11AvailableNetworksExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension is a complexType.
///
/// @note class tt__Dot11AvailableNetworksExtension operations:
/// - tt__Dot11AvailableNetworksExtension* soap_new_tt__Dot11AvailableNetworksExtension(soap*) allocate and default initialize
/// - tt__Dot11AvailableNetworksExtension* soap_new_tt__Dot11AvailableNetworksExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot11AvailableNetworksExtension* soap_new_req_tt__Dot11AvailableNetworksExtension(soap*, ...) allocate, set required members
/// - tt__Dot11AvailableNetworksExtension* soap_new_set_tt__Dot11AvailableNetworksExtension(soap*, ...) allocate, set all public members
/// - tt__Dot11AvailableNetworksExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11AvailableNetworksExtension(soap*, tt__Dot11AvailableNetworksExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11AvailableNetworksExtension(soap*, tt__Dot11AvailableNetworksExtension*) serialize to a stream
/// - tt__Dot11AvailableNetworksExtension* tt__Dot11AvailableNetworksExtension::soap_dup(soap*) returns deep copy of tt__Dot11AvailableNetworksExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11AvailableNetworksExtension::soap_del() deep deletes tt__Dot11AvailableNetworksExtension data members, use only after tt__Dot11AvailableNetworksExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11AvailableNetworksExtension::soap_type() returns SOAP_TYPE_tt__Dot11AvailableNetworksExtension or derived type identifier
class tt__Dot11AvailableNetworksExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Capabilities is a complexType.
///
/// @note class tt__Capabilities operations:
/// - tt__Capabilities* soap_new_tt__Capabilities(soap*) allocate and default initialize
/// - tt__Capabilities* soap_new_tt__Capabilities(soap*, int num) allocate and default initialize an array
/// - tt__Capabilities* soap_new_req_tt__Capabilities(soap*, ...) allocate, set required members
/// - tt__Capabilities* soap_new_set_tt__Capabilities(soap*, ...) allocate, set all public members
/// - tt__Capabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__Capabilities(soap*, tt__Capabilities*) deserialize from a stream
/// - int soap_write_tt__Capabilities(soap*, tt__Capabilities*) serialize to a stream
/// - tt__Capabilities* tt__Capabilities::soap_dup(soap*) returns deep copy of tt__Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Capabilities::soap_del() deep deletes tt__Capabilities data members, use only after tt__Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Capabilities::soap_type() returns SOAP_TYPE_tt__Capabilities or derived type identifier
class tt__Capabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Analytics capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Analytics" of type "http://www.onvif.org/ver10/schema":AnalyticsCapabilities.
    tt__AnalyticsCapabilities*           Analytics                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Device capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Device" of type "http://www.onvif.org/ver10/schema":DeviceCapabilities.
    tt__DeviceCapabilities*              Device                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Event capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Events" of type "http://www.onvif.org/ver10/schema":EventCapabilities.
    tt__EventCapabilities*               Events                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Imaging capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Imaging" of type "http://www.onvif.org/ver10/schema":ImagingCapabilities.
    tt__ImagingCapabilities*             Imaging                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Media capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Media" of type "http://www.onvif.org/ver10/schema":MediaCapabilities.
    tt__MediaCapabilities*               Media                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   PTZ capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZ" of type "http://www.onvif.org/ver10/schema":PTZCapabilities.
    tt__PTZCapabilities*                 PTZ                            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":CapabilitiesExtension.
    tt__CapabilitiesExtension*           Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilitiesExtension is a complexType.
///
/// @note class tt__CapabilitiesExtension operations:
/// - tt__CapabilitiesExtension* soap_new_tt__CapabilitiesExtension(soap*) allocate and default initialize
/// - tt__CapabilitiesExtension* soap_new_tt__CapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__CapabilitiesExtension* soap_new_req_tt__CapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__CapabilitiesExtension* soap_new_set_tt__CapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__CapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__CapabilitiesExtension(soap*, tt__CapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__CapabilitiesExtension(soap*, tt__CapabilitiesExtension*) serialize to a stream
/// - tt__CapabilitiesExtension* tt__CapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__CapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CapabilitiesExtension::soap_del() deep deletes tt__CapabilitiesExtension data members, use only after tt__CapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__CapabilitiesExtension or derived type identifier
class tt__CapabilitiesExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "DeviceIO" of type "http://www.onvif.org/ver10/schema":DeviceIOCapabilities.
    tt__DeviceIOCapabilities*            DeviceIO                       0;	///< Optional element.
/// Element "Display" of type "http://www.onvif.org/ver10/schema":DisplayCapabilities.
    tt__DisplayCapabilities*             Display                        0;	///< Optional element.
/// Element "Recording" of type "http://www.onvif.org/ver10/schema":RecordingCapabilities.
    tt__RecordingCapabilities*           Recording                      0;	///< Optional element.
/// Element "Search" of type "http://www.onvif.org/ver10/schema":SearchCapabilities.
    tt__SearchCapabilities*              Search                         0;	///< Optional element.
/// Element "Replay" of type "http://www.onvif.org/ver10/schema":ReplayCapabilities.
    tt__ReplayCapabilities*              Replay                         0;	///< Optional element.
/// Element "Receiver" of type "http://www.onvif.org/ver10/schema":ReceiverCapabilities.
    tt__ReceiverCapabilities*            Receiver                       0;	///< Optional element.
/// Element "AnalyticsDevice" of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities.
    tt__AnalyticsDeviceCapabilities*     AnalyticsDevice                0;	///< Optional element.
/// Element "Extensions" of type "http://www.onvif.org/ver10/schema":CapabilitiesExtension2.
    tt__CapabilitiesExtension2*          Extensions                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilitiesExtension2 is a complexType.
///
/// @note class tt__CapabilitiesExtension2 operations:
/// - tt__CapabilitiesExtension2* soap_new_tt__CapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__CapabilitiesExtension2* soap_new_tt__CapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__CapabilitiesExtension2* soap_new_req_tt__CapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__CapabilitiesExtension2* soap_new_set_tt__CapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__CapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__CapabilitiesExtension2(soap*, tt__CapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__CapabilitiesExtension2(soap*, tt__CapabilitiesExtension2*) serialize to a stream
/// - tt__CapabilitiesExtension2* tt__CapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__CapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CapabilitiesExtension2::soap_del() deep deletes tt__CapabilitiesExtension2 data members, use only after tt__CapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__CapabilitiesExtension2 or derived type identifier
class tt__CapabilitiesExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsCapabilities is a complexType.
///
/// @note class tt__AnalyticsCapabilities operations:
/// - tt__AnalyticsCapabilities* soap_new_tt__AnalyticsCapabilities(soap*) allocate and default initialize
/// - tt__AnalyticsCapabilities* soap_new_tt__AnalyticsCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsCapabilities* soap_new_req_tt__AnalyticsCapabilities(soap*, ...) allocate, set required members
/// - tt__AnalyticsCapabilities* soap_new_set_tt__AnalyticsCapabilities(soap*, ...) allocate, set all public members
/// - tt__AnalyticsCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsCapabilities(soap*, tt__AnalyticsCapabilities*) deserialize from a stream
/// - int soap_write_tt__AnalyticsCapabilities(soap*, tt__AnalyticsCapabilities*) serialize to a stream
/// - tt__AnalyticsCapabilities* tt__AnalyticsCapabilities::soap_dup(soap*) returns deep copy of tt__AnalyticsCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsCapabilities::soap_del() deep deletes tt__AnalyticsCapabilities data members, use only after tt__AnalyticsCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsCapabilities::soap_type() returns SOAP_TYPE_tt__AnalyticsCapabilities or derived type identifier
class tt__AnalyticsCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Analytics service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not rules are supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RuleSupport" of type xs:boolean.
    bool                                 RuleSupport                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not modules are supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "AnalyticsModuleSupport" of type xs:boolean.
    bool                                 AnalyticsModuleSupport         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceCapabilities is a complexType.
///
/// @note class tt__DeviceCapabilities operations:
/// - tt__DeviceCapabilities* soap_new_tt__DeviceCapabilities(soap*) allocate and default initialize
/// - tt__DeviceCapabilities* soap_new_tt__DeviceCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__DeviceCapabilities* soap_new_req_tt__DeviceCapabilities(soap*, ...) allocate, set required members
/// - tt__DeviceCapabilities* soap_new_set_tt__DeviceCapabilities(soap*, ...) allocate, set all public members
/// - tt__DeviceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__DeviceCapabilities(soap*, tt__DeviceCapabilities*) deserialize from a stream
/// - int soap_write_tt__DeviceCapabilities(soap*, tt__DeviceCapabilities*) serialize to a stream
/// - tt__DeviceCapabilities* tt__DeviceCapabilities::soap_dup(soap*) returns deep copy of tt__DeviceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DeviceCapabilities::soap_del() deep deletes tt__DeviceCapabilities data members, use only after tt__DeviceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DeviceCapabilities::soap_type() returns SOAP_TYPE_tt__DeviceCapabilities or derived type identifier
class tt__DeviceCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Device service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Network capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "Network" of type "http://www.onvif.org/ver10/schema":NetworkCapabilities.
    tt__NetworkCapabilities*             Network                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   System capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "System" of type "http://www.onvif.org/ver10/schema":SystemCapabilities.
    tt__SystemCapabilities*              System                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   I/O capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "IO" of type "http://www.onvif.org/ver10/schema":IOCapabilities.
    tt__IOCapabilities*                  IO                             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Security capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "Security" of type "http://www.onvif.org/ver10/schema":SecurityCapabilities.
    tt__SecurityCapabilities*            Security                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension.
    tt__DeviceCapabilitiesExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension is a complexType.
///
/// @note class tt__DeviceCapabilitiesExtension operations:
/// - tt__DeviceCapabilitiesExtension* soap_new_tt__DeviceCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__DeviceCapabilitiesExtension* soap_new_tt__DeviceCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__DeviceCapabilitiesExtension* soap_new_req_tt__DeviceCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__DeviceCapabilitiesExtension* soap_new_set_tt__DeviceCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__DeviceCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DeviceCapabilitiesExtension(soap*, tt__DeviceCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__DeviceCapabilitiesExtension(soap*, tt__DeviceCapabilitiesExtension*) serialize to a stream
/// - tt__DeviceCapabilitiesExtension* tt__DeviceCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__DeviceCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DeviceCapabilitiesExtension::soap_del() deep deletes tt__DeviceCapabilitiesExtension data members, use only after tt__DeviceCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DeviceCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__DeviceCapabilitiesExtension or derived type identifier
class tt__DeviceCapabilitiesExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":EventCapabilities is a complexType.
///
/// @note class tt__EventCapabilities operations:
/// - tt__EventCapabilities* soap_new_tt__EventCapabilities(soap*) allocate and default initialize
/// - tt__EventCapabilities* soap_new_tt__EventCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__EventCapabilities* soap_new_req_tt__EventCapabilities(soap*, ...) allocate, set required members
/// - tt__EventCapabilities* soap_new_set_tt__EventCapabilities(soap*, ...) allocate, set all public members
/// - tt__EventCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__EventCapabilities(soap*, tt__EventCapabilities*) deserialize from a stream
/// - int soap_write_tt__EventCapabilities(soap*, tt__EventCapabilities*) serialize to a stream
/// - tt__EventCapabilities* tt__EventCapabilities::soap_dup(soap*) returns deep copy of tt__EventCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EventCapabilities::soap_del() deep deletes tt__EventCapabilities data members, use only after tt__EventCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EventCapabilities::soap_type() returns SOAP_TYPE_tt__EventCapabilities or derived type identifier
class tt__EventCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Event service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Subscription policy is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "WSSubscriptionPolicySupport" of type xs:boolean.
    bool                                 WSSubscriptionPolicySupport    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Pull Point is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "WSPullPointSupport" of type xs:boolean.
    bool                                 WSPullPointSupport             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Pausable Subscription Manager Interface is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "WSPausableSubscriptionManagerInterfaceSupport" of type xs:boolean.
    bool                                 WSPausableSubscriptionManagerInterfaceSupport 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilities is a complexType.
///
/// @note class tt__IOCapabilities operations:
/// - tt__IOCapabilities* soap_new_tt__IOCapabilities(soap*) allocate and default initialize
/// - tt__IOCapabilities* soap_new_tt__IOCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__IOCapabilities* soap_new_req_tt__IOCapabilities(soap*, ...) allocate, set required members
/// - tt__IOCapabilities* soap_new_set_tt__IOCapabilities(soap*, ...) allocate, set all public members
/// - tt__IOCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__IOCapabilities(soap*, tt__IOCapabilities*) deserialize from a stream
/// - int soap_write_tt__IOCapabilities(soap*, tt__IOCapabilities*) serialize to a stream
/// - tt__IOCapabilities* tt__IOCapabilities::soap_dup(soap*) returns deep copy of tt__IOCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IOCapabilities::soap_del() deep deletes tt__IOCapabilities data members, use only after tt__IOCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IOCapabilities::soap_type() returns SOAP_TYPE_tt__IOCapabilities or derived type identifier
class tt__IOCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of input connectors.
/// </BLOCKQUOTE></PRE>
///
/// Element "InputConnectors" of type xs:int.
    int*                                 InputConnectors                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of relay outputs.
/// </BLOCKQUOTE></PRE>
///
/// Element "RelayOutputs" of type xs:int.
    int*                                 RelayOutputs                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension.
    tt__IOCapabilitiesExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension is a complexType.
///
/// @note class tt__IOCapabilitiesExtension operations:
/// - tt__IOCapabilitiesExtension* soap_new_tt__IOCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__IOCapabilitiesExtension* soap_new_tt__IOCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__IOCapabilitiesExtension* soap_new_req_tt__IOCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__IOCapabilitiesExtension* soap_new_set_tt__IOCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__IOCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IOCapabilitiesExtension(soap*, tt__IOCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__IOCapabilitiesExtension(soap*, tt__IOCapabilitiesExtension*) serialize to a stream
/// - tt__IOCapabilitiesExtension* tt__IOCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__IOCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IOCapabilitiesExtension::soap_del() deep deletes tt__IOCapabilitiesExtension data members, use only after tt__IOCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IOCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__IOCapabilitiesExtension or derived type identifier
class tt__IOCapabilitiesExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Auxiliary" of type xs:boolean.
    bool*                                Auxiliary                      0;	///< Optional element.
/// Vector of tt__AuxiliaryData of length 0..unbounded.
    std::vector<tt__AuxiliaryData      > AuxiliaryCommands              0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2.
    tt__IOCapabilitiesExtension2*        Extension                      1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2 is a complexType.
///
/// @note class tt__IOCapabilitiesExtension2 operations:
/// - tt__IOCapabilitiesExtension2* soap_new_tt__IOCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__IOCapabilitiesExtension2* soap_new_tt__IOCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__IOCapabilitiesExtension2* soap_new_req_tt__IOCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__IOCapabilitiesExtension2* soap_new_set_tt__IOCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__IOCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__IOCapabilitiesExtension2(soap*, tt__IOCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__IOCapabilitiesExtension2(soap*, tt__IOCapabilitiesExtension2*) serialize to a stream
/// - tt__IOCapabilitiesExtension2* tt__IOCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__IOCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IOCapabilitiesExtension2::soap_del() deep deletes tt__IOCapabilitiesExtension2 data members, use only after tt__IOCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IOCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__IOCapabilitiesExtension2 or derived type identifier
class tt__IOCapabilitiesExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaCapabilities is a complexType.
///
/// @note class tt__MediaCapabilities operations:
/// - tt__MediaCapabilities* soap_new_tt__MediaCapabilities(soap*) allocate and default initialize
/// - tt__MediaCapabilities* soap_new_tt__MediaCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__MediaCapabilities* soap_new_req_tt__MediaCapabilities(soap*, ...) allocate, set required members
/// - tt__MediaCapabilities* soap_new_set_tt__MediaCapabilities(soap*, ...) allocate, set all public members
/// - tt__MediaCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__MediaCapabilities(soap*, tt__MediaCapabilities*) deserialize from a stream
/// - int soap_write_tt__MediaCapabilities(soap*, tt__MediaCapabilities*) serialize to a stream
/// - tt__MediaCapabilities* tt__MediaCapabilities::soap_dup(soap*) returns deep copy of tt__MediaCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MediaCapabilities::soap_del() deep deletes tt__MediaCapabilities data members, use only after tt__MediaCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MediaCapabilities::soap_type() returns SOAP_TYPE_tt__MediaCapabilities or derived type identifier
class tt__MediaCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Media service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Streaming capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "StreamingCapabilities" of type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities.
    tt__RealTimeStreamingCapabilities*   StreamingCapabilities          1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension.
    tt__MediaCapabilitiesExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension is a complexType.
///
/// @note class tt__MediaCapabilitiesExtension operations:
/// - tt__MediaCapabilitiesExtension* soap_new_tt__MediaCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__MediaCapabilitiesExtension* soap_new_tt__MediaCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__MediaCapabilitiesExtension* soap_new_req_tt__MediaCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__MediaCapabilitiesExtension* soap_new_set_tt__MediaCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__MediaCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MediaCapabilitiesExtension(soap*, tt__MediaCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__MediaCapabilitiesExtension(soap*, tt__MediaCapabilitiesExtension*) serialize to a stream
/// - tt__MediaCapabilitiesExtension* tt__MediaCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__MediaCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MediaCapabilitiesExtension::soap_del() deep deletes tt__MediaCapabilitiesExtension data members, use only after tt__MediaCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MediaCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__MediaCapabilitiesExtension or derived type identifier
class tt__MediaCapabilitiesExtension : public xsd__anyType
{ public:
/// Element "ProfileCapabilities" of type "http://www.onvif.org/ver10/schema":ProfileCapabilities.
    tt__ProfileCapabilities*             ProfileCapabilities            1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities is a complexType.
///
/// @note class tt__RealTimeStreamingCapabilities operations:
/// - tt__RealTimeStreamingCapabilities* soap_new_tt__RealTimeStreamingCapabilities(soap*) allocate and default initialize
/// - tt__RealTimeStreamingCapabilities* soap_new_tt__RealTimeStreamingCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__RealTimeStreamingCapabilities* soap_new_req_tt__RealTimeStreamingCapabilities(soap*, ...) allocate, set required members
/// - tt__RealTimeStreamingCapabilities* soap_new_set_tt__RealTimeStreamingCapabilities(soap*, ...) allocate, set all public members
/// - tt__RealTimeStreamingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__RealTimeStreamingCapabilities(soap*, tt__RealTimeStreamingCapabilities*) deserialize from a stream
/// - int soap_write_tt__RealTimeStreamingCapabilities(soap*, tt__RealTimeStreamingCapabilities*) serialize to a stream
/// - tt__RealTimeStreamingCapabilities* tt__RealTimeStreamingCapabilities::soap_dup(soap*) returns deep copy of tt__RealTimeStreamingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RealTimeStreamingCapabilities::soap_del() deep deletes tt__RealTimeStreamingCapabilities data members, use only after tt__RealTimeStreamingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RealTimeStreamingCapabilities::soap_type() returns SOAP_TYPE_tt__RealTimeStreamingCapabilities or derived type identifier
class tt__RealTimeStreamingCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP multicast is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTPMulticast" of type xs:boolean.
    bool*                                RTPMulticast                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP over TCP is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_TCP" of type xs:boolean.
    bool*                                RTP_USCORETCP                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP/RTSP/TCP is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_RTSP_TCP" of type xs:boolean.
    bool*                                RTP_USCORERTSP_USCORETCP       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension.
    tt__RealTimeStreamingCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension is a complexType.
///
/// @note class tt__RealTimeStreamingCapabilitiesExtension operations:
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_req_tt__RealTimeStreamingCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_set_tt__RealTimeStreamingCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__RealTimeStreamingCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RealTimeStreamingCapabilitiesExtension(soap*, tt__RealTimeStreamingCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__RealTimeStreamingCapabilitiesExtension(soap*, tt__RealTimeStreamingCapabilitiesExtension*) serialize to a stream
/// - tt__RealTimeStreamingCapabilitiesExtension* tt__RealTimeStreamingCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__RealTimeStreamingCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RealTimeStreamingCapabilitiesExtension::soap_del() deep deletes tt__RealTimeStreamingCapabilitiesExtension data members, use only after tt__RealTimeStreamingCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RealTimeStreamingCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension or derived type identifier
class tt__RealTimeStreamingCapabilitiesExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileCapabilities is a complexType.
///
/// @note class tt__ProfileCapabilities operations:
/// - tt__ProfileCapabilities* soap_new_tt__ProfileCapabilities(soap*) allocate and default initialize
/// - tt__ProfileCapabilities* soap_new_tt__ProfileCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ProfileCapabilities* soap_new_req_tt__ProfileCapabilities(soap*, ...) allocate, set required members
/// - tt__ProfileCapabilities* soap_new_set_tt__ProfileCapabilities(soap*, ...) allocate, set all public members
/// - tt__ProfileCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ProfileCapabilities(soap*, tt__ProfileCapabilities*) deserialize from a stream
/// - int soap_write_tt__ProfileCapabilities(soap*, tt__ProfileCapabilities*) serialize to a stream
/// - tt__ProfileCapabilities* tt__ProfileCapabilities::soap_dup(soap*) returns deep copy of tt__ProfileCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ProfileCapabilities::soap_del() deep deletes tt__ProfileCapabilities data members, use only after tt__ProfileCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ProfileCapabilities::soap_type() returns SOAP_TYPE_tt__ProfileCapabilities or derived type identifier
class tt__ProfileCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum number of profiles.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumNumberOfProfiles" of type xs:int.
    int                                  MaximumNumberOfProfiles        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilities is a complexType.
///
/// @note class tt__NetworkCapabilities operations:
/// - tt__NetworkCapabilities* soap_new_tt__NetworkCapabilities(soap*) allocate and default initialize
/// - tt__NetworkCapabilities* soap_new_tt__NetworkCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__NetworkCapabilities* soap_new_req_tt__NetworkCapabilities(soap*, ...) allocate, set required members
/// - tt__NetworkCapabilities* soap_new_set_tt__NetworkCapabilities(soap*, ...) allocate, set all public members
/// - tt__NetworkCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkCapabilities(soap*, tt__NetworkCapabilities*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilities(soap*, tt__NetworkCapabilities*) serialize to a stream
/// - tt__NetworkCapabilities* tt__NetworkCapabilities::soap_dup(soap*) returns deep copy of tt__NetworkCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkCapabilities::soap_del() deep deletes tt__NetworkCapabilities data members, use only after tt__NetworkCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkCapabilities::soap_type() returns SOAP_TYPE_tt__NetworkCapabilities or derived type identifier
class tt__NetworkCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IP filtering is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPFilter" of type xs:boolean.
    bool*                                IPFilter                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not zeroconf is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZeroConfiguration" of type xs:boolean.
    bool*                                ZeroConfiguration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPVersion6" of type xs:boolean.
    bool*                                IPVersion6                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "DynDNS" of type xs:boolean.
    bool*                                DynDNS                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension.
    tt__NetworkCapabilitiesExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension is a complexType.
///
/// @note class tt__NetworkCapabilitiesExtension operations:
/// - tt__NetworkCapabilitiesExtension* soap_new_tt__NetworkCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__NetworkCapabilitiesExtension* soap_new_tt__NetworkCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkCapabilitiesExtension* soap_new_req_tt__NetworkCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__NetworkCapabilitiesExtension* soap_new_set_tt__NetworkCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkCapabilitiesExtension(soap*, tt__NetworkCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilitiesExtension(soap*, tt__NetworkCapabilitiesExtension*) serialize to a stream
/// - tt__NetworkCapabilitiesExtension* tt__NetworkCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__NetworkCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkCapabilitiesExtension::soap_del() deep deletes tt__NetworkCapabilitiesExtension data members, use only after tt__NetworkCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__NetworkCapabilitiesExtension or derived type identifier
class tt__NetworkCapabilitiesExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Dot11Configuration" of type xs:boolean.
    bool*                                Dot11Configuration             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2.
    tt__NetworkCapabilitiesExtension2*   Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2 is a complexType.
///
/// @note class tt__NetworkCapabilitiesExtension2 operations:
/// - tt__NetworkCapabilitiesExtension2* soap_new_tt__NetworkCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__NetworkCapabilitiesExtension2* soap_new_tt__NetworkCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkCapabilitiesExtension2* soap_new_req_tt__NetworkCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkCapabilitiesExtension2* soap_new_set_tt__NetworkCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkCapabilitiesExtension2(soap*, tt__NetworkCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilitiesExtension2(soap*, tt__NetworkCapabilitiesExtension2*) serialize to a stream
/// - tt__NetworkCapabilitiesExtension2* tt__NetworkCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__NetworkCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkCapabilitiesExtension2::soap_del() deep deletes tt__NetworkCapabilitiesExtension2 data members, use only after tt__NetworkCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__NetworkCapabilitiesExtension2 or derived type identifier
class tt__NetworkCapabilitiesExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilities is a complexType.
///
/// @note class tt__SecurityCapabilities operations:
/// - tt__SecurityCapabilities* soap_new_tt__SecurityCapabilities(soap*) allocate and default initialize
/// - tt__SecurityCapabilities* soap_new_tt__SecurityCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__SecurityCapabilities* soap_new_req_tt__SecurityCapabilities(soap*, ...) allocate, set required members
/// - tt__SecurityCapabilities* soap_new_set_tt__SecurityCapabilities(soap*, ...) allocate, set all public members
/// - tt__SecurityCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__SecurityCapabilities(soap*, tt__SecurityCapabilities*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilities(soap*, tt__SecurityCapabilities*) serialize to a stream
/// - tt__SecurityCapabilities* tt__SecurityCapabilities::soap_dup(soap*) returns deep copy of tt__SecurityCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SecurityCapabilities::soap_del() deep deletes tt__SecurityCapabilities data members, use only after tt__SecurityCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SecurityCapabilities::soap_type() returns SOAP_TYPE_tt__SecurityCapabilities or derived type identifier
class tt__SecurityCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not TLS 1.1 is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "TLS1.1" of type xs:boolean.
    bool                                 TLS1_x002e1                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not TLS 1.2 is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "TLS1.2" of type xs:boolean.
    bool                                 TLS1_x002e2                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not onboard key generation is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "OnboardKeyGeneration" of type xs:boolean.
    bool                                 OnboardKeyGeneration           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not access policy configuration is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "AccessPolicyConfig" of type xs:boolean.
    bool                                 AccessPolicyConfig             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security X.509 token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "X.509Token" of type xs:boolean.
    bool                                 X_x002e509Token                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security SAML token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "SAMLToken" of type xs:boolean.
    bool                                 SAMLToken                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security Kerberos token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "KerberosToken" of type xs:boolean.
    bool                                 KerberosToken                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security REL token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RELToken" of type xs:boolean.
    bool                                 RELToken                       1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension.
    tt__SecurityCapabilitiesExtension*   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension is a complexType.
///
/// @note class tt__SecurityCapabilitiesExtension operations:
/// - tt__SecurityCapabilitiesExtension* soap_new_tt__SecurityCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__SecurityCapabilitiesExtension* soap_new_tt__SecurityCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__SecurityCapabilitiesExtension* soap_new_req_tt__SecurityCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__SecurityCapabilitiesExtension* soap_new_set_tt__SecurityCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__SecurityCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SecurityCapabilitiesExtension(soap*, tt__SecurityCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilitiesExtension(soap*, tt__SecurityCapabilitiesExtension*) serialize to a stream
/// - tt__SecurityCapabilitiesExtension* tt__SecurityCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__SecurityCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SecurityCapabilitiesExtension::soap_del() deep deletes tt__SecurityCapabilitiesExtension data members, use only after tt__SecurityCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SecurityCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__SecurityCapabilitiesExtension or derived type identifier
class tt__SecurityCapabilitiesExtension : public xsd__anyType
{ public:
/// Element "TLS1.0" of type xs:boolean.
    bool                                 TLS1_x002e0                    1;	///< Required element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2.
    tt__SecurityCapabilitiesExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2 is a complexType.
///
/// @note class tt__SecurityCapabilitiesExtension2 operations:
/// - tt__SecurityCapabilitiesExtension2* soap_new_tt__SecurityCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__SecurityCapabilitiesExtension2* soap_new_tt__SecurityCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__SecurityCapabilitiesExtension2* soap_new_req_tt__SecurityCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__SecurityCapabilitiesExtension2* soap_new_set_tt__SecurityCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__SecurityCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__SecurityCapabilitiesExtension2(soap*, tt__SecurityCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilitiesExtension2(soap*, tt__SecurityCapabilitiesExtension2*) serialize to a stream
/// - tt__SecurityCapabilitiesExtension2* tt__SecurityCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__SecurityCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SecurityCapabilitiesExtension2::soap_del() deep deletes tt__SecurityCapabilitiesExtension2 data members, use only after tt__SecurityCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SecurityCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__SecurityCapabilitiesExtension2 or derived type identifier
class tt__SecurityCapabilitiesExtension2 : public xsd__anyType
{ public:
/// Element "Dot1X" of type xs:boolean.
    bool                                 Dot1X                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   EAP Methods supported by the device. The int values refer to the <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
///
/// Vector of int of length 0..unbounded.
    std::vector<int                    > SupportedEAPMethod             0;	///< Multiple elements.
/// Element "RemoteUserHandling" of type xs:boolean.
    bool                                 RemoteUserHandling             1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilities is a complexType.
///
/// @note class tt__SystemCapabilities operations:
/// - tt__SystemCapabilities* soap_new_tt__SystemCapabilities(soap*) allocate and default initialize
/// - tt__SystemCapabilities* soap_new_tt__SystemCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__SystemCapabilities* soap_new_req_tt__SystemCapabilities(soap*, ...) allocate, set required members
/// - tt__SystemCapabilities* soap_new_set_tt__SystemCapabilities(soap*, ...) allocate, set all public members
/// - tt__SystemCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemCapabilities(soap*, tt__SystemCapabilities*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilities(soap*, tt__SystemCapabilities*) serialize to a stream
/// - tt__SystemCapabilities* tt__SystemCapabilities::soap_dup(soap*) returns deep copy of tt__SystemCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemCapabilities::soap_del() deep deletes tt__SystemCapabilities data members, use only after tt__SystemCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemCapabilities::soap_type() returns SOAP_TYPE_tt__SystemCapabilities or derived type identifier
class tt__SystemCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Discovery resolve requests are supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "DiscoveryResolve" of type xs:boolean.
    bool                                 DiscoveryResolve               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Discovery Bye is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "DiscoveryBye" of type xs:boolean.
    bool                                 DiscoveryBye                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not remote discovery is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RemoteDiscovery" of type xs:boolean.
    bool                                 RemoteDiscovery                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not system backup is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "SystemBackup" of type xs:boolean.
    bool                                 SystemBackup                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not system logging is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "SystemLogging" of type xs:boolean.
    bool                                 SystemLogging                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not firmware upgrade is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "FirmwareUpgrade" of type xs:boolean.
    bool                                 FirmwareUpgrade                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates supported ONVIF version(s).
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__OnvifVersion* of length 1..unbounded.
    std::vector<tt__OnvifVersion*      > SupportedVersions              1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension.
    tt__SystemCapabilitiesExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension is a complexType.
///
/// @note class tt__SystemCapabilitiesExtension operations:
/// - tt__SystemCapabilitiesExtension* soap_new_tt__SystemCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__SystemCapabilitiesExtension* soap_new_tt__SystemCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__SystemCapabilitiesExtension* soap_new_req_tt__SystemCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__SystemCapabilitiesExtension* soap_new_set_tt__SystemCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__SystemCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemCapabilitiesExtension(soap*, tt__SystemCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilitiesExtension(soap*, tt__SystemCapabilitiesExtension*) serialize to a stream
/// - tt__SystemCapabilitiesExtension* tt__SystemCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__SystemCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemCapabilitiesExtension::soap_del() deep deletes tt__SystemCapabilitiesExtension data members, use only after tt__SystemCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__SystemCapabilitiesExtension or derived type identifier
class tt__SystemCapabilitiesExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "HttpFirmwareUpgrade" of type xs:boolean.
    bool*                                HttpFirmwareUpgrade            0;	///< Optional element.
/// Element "HttpSystemBackup" of type xs:boolean.
    bool*                                HttpSystemBackup               0;	///< Optional element.
/// Element "HttpSystemLogging" of type xs:boolean.
    bool*                                HttpSystemLogging              0;	///< Optional element.
/// Element "HttpSupportInformation" of type xs:boolean.
    bool*                                HttpSupportInformation         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2.
    tt__SystemCapabilitiesExtension2*    Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2 is a complexType.
///
/// @note class tt__SystemCapabilitiesExtension2 operations:
/// - tt__SystemCapabilitiesExtension2* soap_new_tt__SystemCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__SystemCapabilitiesExtension2* soap_new_tt__SystemCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__SystemCapabilitiesExtension2* soap_new_req_tt__SystemCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__SystemCapabilitiesExtension2* soap_new_set_tt__SystemCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__SystemCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemCapabilitiesExtension2(soap*, tt__SystemCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilitiesExtension2(soap*, tt__SystemCapabilitiesExtension2*) serialize to a stream
/// - tt__SystemCapabilitiesExtension2* tt__SystemCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__SystemCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemCapabilitiesExtension2::soap_del() deep deletes tt__SystemCapabilitiesExtension2 data members, use only after tt__SystemCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__SystemCapabilitiesExtension2 or derived type identifier
class tt__SystemCapabilitiesExtension2 : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":OnvifVersion is a complexType.
///
/// @note class tt__OnvifVersion operations:
/// - tt__OnvifVersion* soap_new_tt__OnvifVersion(soap*) allocate and default initialize
/// - tt__OnvifVersion* soap_new_tt__OnvifVersion(soap*, int num) allocate and default initialize an array
/// - tt__OnvifVersion* soap_new_req_tt__OnvifVersion(soap*, ...) allocate, set required members
/// - tt__OnvifVersion* soap_new_set_tt__OnvifVersion(soap*, ...) allocate, set all public members
/// - tt__OnvifVersion::soap_default(soap*) default initialize members
/// - int soap_read_tt__OnvifVersion(soap*, tt__OnvifVersion*) deserialize from a stream
/// - int soap_write_tt__OnvifVersion(soap*, tt__OnvifVersion*) serialize to a stream
/// - tt__OnvifVersion* tt__OnvifVersion::soap_dup(soap*) returns deep copy of tt__OnvifVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OnvifVersion::soap_del() deep deletes tt__OnvifVersion data members, use only after tt__OnvifVersion::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OnvifVersion::soap_type() returns SOAP_TYPE_tt__OnvifVersion or derived type identifier
class tt__OnvifVersion : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Major version number.
/// </BLOCKQUOTE></PRE>
///
/// Element "Major" of type xs:int.
    int                                  Major                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Two digit minor version number.
///   If major version number is less than "16", X.0.1 maps to "01" and X.2.1 maps to "21" where X stands for Major version number.
///   Otherwise, minor number is month of release, such as "06" for June.
/// </BLOCKQUOTE></PRE>
///
/// Element "Minor" of type xs:int.
    int                                  Minor                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingCapabilities is a complexType.
///
/// @note class tt__ImagingCapabilities operations:
/// - tt__ImagingCapabilities* soap_new_tt__ImagingCapabilities(soap*) allocate and default initialize
/// - tt__ImagingCapabilities* soap_new_tt__ImagingCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ImagingCapabilities* soap_new_req_tt__ImagingCapabilities(soap*, ...) allocate, set required members
/// - tt__ImagingCapabilities* soap_new_set_tt__ImagingCapabilities(soap*, ...) allocate, set all public members
/// - tt__ImagingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingCapabilities(soap*, tt__ImagingCapabilities*) deserialize from a stream
/// - int soap_write_tt__ImagingCapabilities(soap*, tt__ImagingCapabilities*) serialize to a stream
/// - tt__ImagingCapabilities* tt__ImagingCapabilities::soap_dup(soap*) returns deep copy of tt__ImagingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingCapabilities::soap_del() deep deletes tt__ImagingCapabilities data members, use only after tt__ImagingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingCapabilities::soap_type() returns SOAP_TYPE_tt__ImagingCapabilities or derived type identifier
class tt__ImagingCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Imaging service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZCapabilities is a complexType.
///
/// @note class tt__PTZCapabilities operations:
/// - tt__PTZCapabilities* soap_new_tt__PTZCapabilities(soap*) allocate and default initialize
/// - tt__PTZCapabilities* soap_new_tt__PTZCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__PTZCapabilities* soap_new_req_tt__PTZCapabilities(soap*, ...) allocate, set required members
/// - tt__PTZCapabilities* soap_new_set_tt__PTZCapabilities(soap*, ...) allocate, set all public members
/// - tt__PTZCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZCapabilities(soap*, tt__PTZCapabilities*) deserialize from a stream
/// - int soap_write_tt__PTZCapabilities(soap*, tt__PTZCapabilities*) serialize to a stream
/// - tt__PTZCapabilities* tt__PTZCapabilities::soap_dup(soap*) returns deep copy of tt__PTZCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZCapabilities::soap_del() deep deletes tt__PTZCapabilities data members, use only after tt__PTZCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZCapabilities::soap_type() returns SOAP_TYPE_tt__PTZCapabilities or derived type identifier
class tt__PTZCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   PTZ service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceIOCapabilities is a complexType.
///
/// @note class tt__DeviceIOCapabilities operations:
/// - tt__DeviceIOCapabilities* soap_new_tt__DeviceIOCapabilities(soap*) allocate and default initialize
/// - tt__DeviceIOCapabilities* soap_new_tt__DeviceIOCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__DeviceIOCapabilities* soap_new_req_tt__DeviceIOCapabilities(soap*, ...) allocate, set required members
/// - tt__DeviceIOCapabilities* soap_new_set_tt__DeviceIOCapabilities(soap*, ...) allocate, set all public members
/// - tt__DeviceIOCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__DeviceIOCapabilities(soap*, tt__DeviceIOCapabilities*) deserialize from a stream
/// - int soap_write_tt__DeviceIOCapabilities(soap*, tt__DeviceIOCapabilities*) serialize to a stream
/// - tt__DeviceIOCapabilities* tt__DeviceIOCapabilities::soap_dup(soap*) returns deep copy of tt__DeviceIOCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DeviceIOCapabilities::soap_del() deep deletes tt__DeviceIOCapabilities data members, use only after tt__DeviceIOCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DeviceIOCapabilities::soap_type() returns SOAP_TYPE_tt__DeviceIOCapabilities or derived type identifier
class tt__DeviceIOCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "VideoSources" of type xs:int.
    int                                  VideoSources                   1;	///< Required element.
/// Element "VideoOutputs" of type xs:int.
    int                                  VideoOutputs                   1;	///< Required element.
/// Element "AudioSources" of type xs:int.
    int                                  AudioSources                   1;	///< Required element.
/// Element "AudioOutputs" of type xs:int.
    int                                  AudioOutputs                   1;	///< Required element.
/// Element "RelayOutputs" of type xs:int.
    int                                  RelayOutputs                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DisplayCapabilities is a complexType.
///
/// @note class tt__DisplayCapabilities operations:
/// - tt__DisplayCapabilities* soap_new_tt__DisplayCapabilities(soap*) allocate and default initialize
/// - tt__DisplayCapabilities* soap_new_tt__DisplayCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__DisplayCapabilities* soap_new_req_tt__DisplayCapabilities(soap*, ...) allocate, set required members
/// - tt__DisplayCapabilities* soap_new_set_tt__DisplayCapabilities(soap*, ...) allocate, set all public members
/// - tt__DisplayCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__DisplayCapabilities(soap*, tt__DisplayCapabilities*) deserialize from a stream
/// - int soap_write_tt__DisplayCapabilities(soap*, tt__DisplayCapabilities*) serialize to a stream
/// - tt__DisplayCapabilities* tt__DisplayCapabilities::soap_dup(soap*) returns deep copy of tt__DisplayCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DisplayCapabilities::soap_del() deep deletes tt__DisplayCapabilities data members, use only after tt__DisplayCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DisplayCapabilities::soap_type() returns SOAP_TYPE_tt__DisplayCapabilities or derived type identifier
class tt__DisplayCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indication that the SetLayout command supports only predefined layouts.
/// </BLOCKQUOTE></PRE>
///
/// Element "FixedLayout" of type xs:boolean.
    bool                                 FixedLayout                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingCapabilities is a complexType.
///
/// @note class tt__RecordingCapabilities operations:
/// - tt__RecordingCapabilities* soap_new_tt__RecordingCapabilities(soap*) allocate and default initialize
/// - tt__RecordingCapabilities* soap_new_tt__RecordingCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__RecordingCapabilities* soap_new_req_tt__RecordingCapabilities(soap*, ...) allocate, set required members
/// - tt__RecordingCapabilities* soap_new_set_tt__RecordingCapabilities(soap*, ...) allocate, set all public members
/// - tt__RecordingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingCapabilities(soap*, tt__RecordingCapabilities*) deserialize from a stream
/// - int soap_write_tt__RecordingCapabilities(soap*, tt__RecordingCapabilities*) serialize to a stream
/// - tt__RecordingCapabilities* tt__RecordingCapabilities::soap_dup(soap*) returns deep copy of tt__RecordingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingCapabilities::soap_del() deep deletes tt__RecordingCapabilities data members, use only after tt__RecordingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingCapabilities::soap_type() returns SOAP_TYPE_tt__RecordingCapabilities or derived type identifier
class tt__RecordingCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "ReceiverSource" of type xs:boolean.
    bool                                 ReceiverSource                 1;	///< Required element.
/// Element "MediaProfileSource" of type xs:boolean.
    bool                                 MediaProfileSource             1;	///< Required element.
/// Element "DynamicRecordings" of type xs:boolean.
    bool                                 DynamicRecordings              1;	///< Required element.
/// Element "DynamicTracks" of type xs:boolean.
    bool                                 DynamicTracks                  1;	///< Required element.
/// Element "MaxStringLength" of type xs:int.
    int                                  MaxStringLength                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SearchCapabilities is a complexType.
///
/// @note class tt__SearchCapabilities operations:
/// - tt__SearchCapabilities* soap_new_tt__SearchCapabilities(soap*) allocate and default initialize
/// - tt__SearchCapabilities* soap_new_tt__SearchCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__SearchCapabilities* soap_new_req_tt__SearchCapabilities(soap*, ...) allocate, set required members
/// - tt__SearchCapabilities* soap_new_set_tt__SearchCapabilities(soap*, ...) allocate, set all public members
/// - tt__SearchCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__SearchCapabilities(soap*, tt__SearchCapabilities*) deserialize from a stream
/// - int soap_write_tt__SearchCapabilities(soap*, tt__SearchCapabilities*) serialize to a stream
/// - tt__SearchCapabilities* tt__SearchCapabilities::soap_dup(soap*) returns deep copy of tt__SearchCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SearchCapabilities::soap_del() deep deletes tt__SearchCapabilities data members, use only after tt__SearchCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SearchCapabilities::soap_type() returns SOAP_TYPE_tt__SearchCapabilities or derived type identifier
class tt__SearchCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "MetadataSearch" of type xs:boolean.
    bool                                 MetadataSearch                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ReplayCapabilities is a complexType.
///
/// @note class tt__ReplayCapabilities operations:
/// - tt__ReplayCapabilities* soap_new_tt__ReplayCapabilities(soap*) allocate and default initialize
/// - tt__ReplayCapabilities* soap_new_tt__ReplayCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ReplayCapabilities* soap_new_req_tt__ReplayCapabilities(soap*, ...) allocate, set required members
/// - tt__ReplayCapabilities* soap_new_set_tt__ReplayCapabilities(soap*, ...) allocate, set all public members
/// - tt__ReplayCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReplayCapabilities(soap*, tt__ReplayCapabilities*) deserialize from a stream
/// - int soap_write_tt__ReplayCapabilities(soap*, tt__ReplayCapabilities*) serialize to a stream
/// - tt__ReplayCapabilities* tt__ReplayCapabilities::soap_dup(soap*) returns deep copy of tt__ReplayCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReplayCapabilities::soap_del() deep deletes tt__ReplayCapabilities data members, use only after tt__ReplayCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReplayCapabilities::soap_type() returns SOAP_TYPE_tt__ReplayCapabilities or derived type identifier
class tt__ReplayCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The address of the replay service.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverCapabilities is a complexType.
///
/// @note class tt__ReceiverCapabilities operations:
/// - tt__ReceiverCapabilities* soap_new_tt__ReceiverCapabilities(soap*) allocate and default initialize
/// - tt__ReceiverCapabilities* soap_new_tt__ReceiverCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ReceiverCapabilities* soap_new_req_tt__ReceiverCapabilities(soap*, ...) allocate, set required members
/// - tt__ReceiverCapabilities* soap_new_set_tt__ReceiverCapabilities(soap*, ...) allocate, set all public members
/// - tt__ReceiverCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReceiverCapabilities(soap*, tt__ReceiverCapabilities*) deserialize from a stream
/// - int soap_write_tt__ReceiverCapabilities(soap*, tt__ReceiverCapabilities*) serialize to a stream
/// - tt__ReceiverCapabilities* tt__ReceiverCapabilities::soap_dup(soap*) returns deep copy of tt__ReceiverCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReceiverCapabilities::soap_del() deep deletes tt__ReceiverCapabilities data members, use only after tt__ReceiverCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReceiverCapabilities::soap_type() returns SOAP_TYPE_tt__ReceiverCapabilities or derived type identifier
class tt__ReceiverCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The address of the receiver service.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP multicast streams.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_Multicast" of type xs:boolean.
    bool                                 RTP_USCOREMulticast            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP/TCP streams
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_TCP" of type xs:boolean.
    bool                                 RTP_USCORETCP                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP/RTSP/TCP streams.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_RTSP_TCP" of type xs:boolean.
    bool                                 RTP_USCORERTSP_USCORETCP       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of receivers supported by the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedReceivers" of type xs:int.
    int                                  SupportedReceivers             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The maximum allowed length for RTSP URIs.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumRTSPURILength" of type xs:int.
    int                                  MaximumRTSPURILength           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities is a complexType.
///
/// @note class tt__AnalyticsDeviceCapabilities operations:
/// - tt__AnalyticsDeviceCapabilities* soap_new_tt__AnalyticsDeviceCapabilities(soap*) allocate and default initialize
/// - tt__AnalyticsDeviceCapabilities* soap_new_tt__AnalyticsDeviceCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsDeviceCapabilities* soap_new_req_tt__AnalyticsDeviceCapabilities(soap*, ...) allocate, set required members
/// - tt__AnalyticsDeviceCapabilities* soap_new_set_tt__AnalyticsDeviceCapabilities(soap*, ...) allocate, set all public members
/// - tt__AnalyticsDeviceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsDeviceCapabilities(soap*, tt__AnalyticsDeviceCapabilities*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceCapabilities(soap*, tt__AnalyticsDeviceCapabilities*) serialize to a stream
/// - tt__AnalyticsDeviceCapabilities* tt__AnalyticsDeviceCapabilities::soap_dup(soap*) returns deep copy of tt__AnalyticsDeviceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsDeviceCapabilities::soap_del() deep deletes tt__AnalyticsDeviceCapabilities data members, use only after tt__AnalyticsDeviceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsDeviceCapabilities::soap_type() returns SOAP_TYPE_tt__AnalyticsDeviceCapabilities or derived type identifier
class tt__AnalyticsDeviceCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Obsolete property.
/// </BLOCKQUOTE></PRE>
///
/// Element "RuleSupport" of type xs:boolean.
    bool*                                RuleSupport                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension.
    tt__AnalyticsDeviceExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension is a complexType.
///
/// @note class tt__AnalyticsDeviceExtension operations:
/// - tt__AnalyticsDeviceExtension* soap_new_tt__AnalyticsDeviceExtension(soap*) allocate and default initialize
/// - tt__AnalyticsDeviceExtension* soap_new_tt__AnalyticsDeviceExtension(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsDeviceExtension* soap_new_req_tt__AnalyticsDeviceExtension(soap*, ...) allocate, set required members
/// - tt__AnalyticsDeviceExtension* soap_new_set_tt__AnalyticsDeviceExtension(soap*, ...) allocate, set all public members
/// - tt__AnalyticsDeviceExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsDeviceExtension(soap*, tt__AnalyticsDeviceExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceExtension(soap*, tt__AnalyticsDeviceExtension*) serialize to a stream
/// - tt__AnalyticsDeviceExtension* tt__AnalyticsDeviceExtension::soap_dup(soap*) returns deep copy of tt__AnalyticsDeviceExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsDeviceExtension::soap_del() deep deletes tt__AnalyticsDeviceExtension data members, use only after tt__AnalyticsDeviceExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsDeviceExtension::soap_type() returns SOAP_TYPE_tt__AnalyticsDeviceExtension or derived type identifier
class tt__AnalyticsDeviceExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLog is a complexType.
///
/// @note class tt__SystemLog operations:
/// - tt__SystemLog* soap_new_tt__SystemLog(soap*) allocate and default initialize
/// - tt__SystemLog* soap_new_tt__SystemLog(soap*, int num) allocate and default initialize an array
/// - tt__SystemLog* soap_new_req_tt__SystemLog(soap*, ...) allocate, set required members
/// - tt__SystemLog* soap_new_set_tt__SystemLog(soap*, ...) allocate, set all public members
/// - tt__SystemLog::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemLog(soap*, tt__SystemLog*) deserialize from a stream
/// - int soap_write_tt__SystemLog(soap*, tt__SystemLog*) serialize to a stream
/// - tt__SystemLog* tt__SystemLog::soap_dup(soap*) returns deep copy of tt__SystemLog, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemLog::soap_del() deep deletes tt__SystemLog data members, use only after tt__SystemLog::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemLog::soap_type() returns SOAP_TYPE_tt__SystemLog or derived type identifier
class tt__SystemLog : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The log information as attachment data.
/// </BLOCKQUOTE></PRE>
///
/// Element "Binary" of type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Binary                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The log information as character data.
/// </BLOCKQUOTE></PRE>
///
/// Element "String" of type xs:string.
    std::string*                         String                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportInformation is a complexType.
///
/// @note class tt__SupportInformation operations:
/// - tt__SupportInformation* soap_new_tt__SupportInformation(soap*) allocate and default initialize
/// - tt__SupportInformation* soap_new_tt__SupportInformation(soap*, int num) allocate and default initialize an array
/// - tt__SupportInformation* soap_new_req_tt__SupportInformation(soap*, ...) allocate, set required members
/// - tt__SupportInformation* soap_new_set_tt__SupportInformation(soap*, ...) allocate, set all public members
/// - tt__SupportInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__SupportInformation(soap*, tt__SupportInformation*) deserialize from a stream
/// - int soap_write_tt__SupportInformation(soap*, tt__SupportInformation*) serialize to a stream
/// - tt__SupportInformation* tt__SupportInformation::soap_dup(soap*) returns deep copy of tt__SupportInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SupportInformation::soap_del() deep deletes tt__SupportInformation data members, use only after tt__SupportInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SupportInformation::soap_type() returns SOAP_TYPE_tt__SupportInformation or derived type identifier
class tt__SupportInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The support information as attachment data.
/// </BLOCKQUOTE></PRE>
///
/// Element "Binary" of type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Binary                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The support information as character data.
/// </BLOCKQUOTE></PRE>
///
/// Element "String" of type xs:string.
    std::string*                         String                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":BinaryData is a complexType.
///
/// @note class tt__BinaryData operations:
/// - tt__BinaryData* soap_new_tt__BinaryData(soap*) allocate and default initialize
/// - tt__BinaryData* soap_new_tt__BinaryData(soap*, int num) allocate and default initialize an array
/// - tt__BinaryData* soap_new_req_tt__BinaryData(soap*, ...) allocate, set required members
/// - tt__BinaryData* soap_new_set_tt__BinaryData(soap*, ...) allocate, set all public members
/// - tt__BinaryData::soap_default(soap*) default initialize members
/// - int soap_read_tt__BinaryData(soap*, tt__BinaryData*) deserialize from a stream
/// - int soap_write_tt__BinaryData(soap*, tt__BinaryData*) serialize to a stream
/// - tt__BinaryData* tt__BinaryData::soap_dup(soap*) returns deep copy of tt__BinaryData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BinaryData::soap_del() deep deletes tt__BinaryData data members, use only after tt__BinaryData::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BinaryData::soap_type() returns SOAP_TYPE_tt__BinaryData or derived type identifier
class tt__BinaryData : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   base64 encoded binary data.
/// </BLOCKQUOTE></PRE>
///
/// Element "Data" of type xs:base64Binary.
    xsd__base64Binary                    Data                           1;	///< Required element.
/// Imported attribute reference xmime:contentType.
  @ _xmime__contentType*                 xmime__contentType             0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":AttachmentData is a complexType.
///
/// @note class tt__AttachmentData operations:
/// - tt__AttachmentData* soap_new_tt__AttachmentData(soap*) allocate and default initialize
/// - tt__AttachmentData* soap_new_tt__AttachmentData(soap*, int num) allocate and default initialize an array
/// - tt__AttachmentData* soap_new_req_tt__AttachmentData(soap*, ...) allocate, set required members
/// - tt__AttachmentData* soap_new_set_tt__AttachmentData(soap*, ...) allocate, set all public members
/// - tt__AttachmentData::soap_default(soap*) default initialize members
/// - int soap_read_tt__AttachmentData(soap*, tt__AttachmentData*) deserialize from a stream
/// - int soap_write_tt__AttachmentData(soap*, tt__AttachmentData*) serialize to a stream
/// - tt__AttachmentData* tt__AttachmentData::soap_dup(soap*) returns deep copy of tt__AttachmentData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AttachmentData::soap_del() deep deletes tt__AttachmentData data members, use only after tt__AttachmentData::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AttachmentData::soap_type() returns SOAP_TYPE_tt__AttachmentData or derived type identifier
class tt__AttachmentData : public xsd__anyType
{ public:
/// Element reference "http://www.onvif.org/ver10/schema:""http://www.w3.org/2004/08/xop/include":Include.
    xop__Include*                        xop__Include_                  1;	///< Required element.
/// Imported attribute reference xmime:contentType.
  @ _xmime__contentType*                 xmime__contentType             0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":BackupFile is a complexType.
///
/// @note class tt__BackupFile operations:
/// - tt__BackupFile* soap_new_tt__BackupFile(soap*) allocate and default initialize
/// - tt__BackupFile* soap_new_tt__BackupFile(soap*, int num) allocate and default initialize an array
/// - tt__BackupFile* soap_new_req_tt__BackupFile(soap*, ...) allocate, set required members
/// - tt__BackupFile* soap_new_set_tt__BackupFile(soap*, ...) allocate, set all public members
/// - tt__BackupFile::soap_default(soap*) default initialize members
/// - int soap_read_tt__BackupFile(soap*, tt__BackupFile*) deserialize from a stream
/// - int soap_write_tt__BackupFile(soap*, tt__BackupFile*) serialize to a stream
/// - tt__BackupFile* tt__BackupFile::soap_dup(soap*) returns deep copy of tt__BackupFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BackupFile::soap_del() deep deletes tt__BackupFile data members, use only after tt__BackupFile::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BackupFile::soap_type() returns SOAP_TYPE_tt__BackupFile or derived type identifier
class tt__BackupFile : public xsd__anyType
{ public:
/// Element "Name" of type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Data" of type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Data                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogUriList is a complexType.
///
/// @note class tt__SystemLogUriList operations:
/// - tt__SystemLogUriList* soap_new_tt__SystemLogUriList(soap*) allocate and default initialize
/// - tt__SystemLogUriList* soap_new_tt__SystemLogUriList(soap*, int num) allocate and default initialize an array
/// - tt__SystemLogUriList* soap_new_req_tt__SystemLogUriList(soap*, ...) allocate, set required members
/// - tt__SystemLogUriList* soap_new_set_tt__SystemLogUriList(soap*, ...) allocate, set all public members
/// - tt__SystemLogUriList::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemLogUriList(soap*, tt__SystemLogUriList*) deserialize from a stream
/// - int soap_write_tt__SystemLogUriList(soap*, tt__SystemLogUriList*) serialize to a stream
/// - tt__SystemLogUriList* tt__SystemLogUriList::soap_dup(soap*) returns deep copy of tt__SystemLogUriList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemLogUriList::soap_del() deep deletes tt__SystemLogUriList data members, use only after tt__SystemLogUriList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemLogUriList::soap_type() returns SOAP_TYPE_tt__SystemLogUriList or derived type identifier
class tt__SystemLogUriList : public xsd__anyType
{ public:
/// Vector of tt__SystemLogUri* of length 0..unbounded.
    std::vector<tt__SystemLogUri*      > SystemLog                      0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogUri is a complexType.
///
/// @note class tt__SystemLogUri operations:
/// - tt__SystemLogUri* soap_new_tt__SystemLogUri(soap*) allocate and default initialize
/// - tt__SystemLogUri* soap_new_tt__SystemLogUri(soap*, int num) allocate and default initialize an array
/// - tt__SystemLogUri* soap_new_req_tt__SystemLogUri(soap*, ...) allocate, set required members
/// - tt__SystemLogUri* soap_new_set_tt__SystemLogUri(soap*, ...) allocate, set all public members
/// - tt__SystemLogUri::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemLogUri(soap*, tt__SystemLogUri*) deserialize from a stream
/// - int soap_write_tt__SystemLogUri(soap*, tt__SystemLogUri*) serialize to a stream
/// - tt__SystemLogUri* tt__SystemLogUri::soap_dup(soap*) returns deep copy of tt__SystemLogUri, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemLogUri::soap_del() deep deletes tt__SystemLogUri data members, use only after tt__SystemLogUri::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemLogUri::soap_type() returns SOAP_TYPE_tt__SystemLogUri or derived type identifier
class tt__SystemLogUri : public xsd__anyType
{ public:
/// Element "Type" of type "http://www.onvif.org/ver10/schema":SystemLogType.
    tt__SystemLogType                    Type                           1;	///< Required element.
/// Element "Uri" of type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemDateTime is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   General date time inforamtion returned by the GetSystemDateTime method.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__SystemDateTime operations:
/// - tt__SystemDateTime* soap_new_tt__SystemDateTime(soap*) allocate and default initialize
/// - tt__SystemDateTime* soap_new_tt__SystemDateTime(soap*, int num) allocate and default initialize an array
/// - tt__SystemDateTime* soap_new_req_tt__SystemDateTime(soap*, ...) allocate, set required members
/// - tt__SystemDateTime* soap_new_set_tt__SystemDateTime(soap*, ...) allocate, set all public members
/// - tt__SystemDateTime::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemDateTime(soap*, tt__SystemDateTime*) deserialize from a stream
/// - int soap_write_tt__SystemDateTime(soap*, tt__SystemDateTime*) serialize to a stream
/// - tt__SystemDateTime* tt__SystemDateTime::soap_dup(soap*) returns deep copy of tt__SystemDateTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemDateTime::soap_del() deep deletes tt__SystemDateTime data members, use only after tt__SystemDateTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemDateTime::soap_type() returns SOAP_TYPE_tt__SystemDateTime or derived type identifier
class tt__SystemDateTime : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the time is set manully or through NTP.
/// </BLOCKQUOTE></PRE>
///
/// Element "DateTimeType" of type "http://www.onvif.org/ver10/schema":SetDateTimeType.
    tt__SetDateTimeType                  DateTimeType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative indicator whether daylight savings is currently on/off.
/// </BLOCKQUOTE></PRE>
///
/// Element "DaylightSavings" of type xs:boolean.
    bool                                 DaylightSavings                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Timezone information in Posix format.
/// </BLOCKQUOTE></PRE>
///
/// Element "TimeZone" of type "http://www.onvif.org/ver10/schema":TimeZone.
    tt__TimeZone*                        TimeZone                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Current system date and time in UTC format. This field is mandatory since version 2.0.
/// </BLOCKQUOTE></PRE>
///
/// Element "UTCDateTime" of type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        UTCDateTime                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time in local format.
/// </BLOCKQUOTE></PRE>
///
/// Element "LocalDateTime" of type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        LocalDateTime                  0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SystemDateTimeExtension.
    tt__SystemDateTimeExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemDateTimeExtension is a complexType.
///
/// @note class tt__SystemDateTimeExtension operations:
/// - tt__SystemDateTimeExtension* soap_new_tt__SystemDateTimeExtension(soap*) allocate and default initialize
/// - tt__SystemDateTimeExtension* soap_new_tt__SystemDateTimeExtension(soap*, int num) allocate and default initialize an array
/// - tt__SystemDateTimeExtension* soap_new_req_tt__SystemDateTimeExtension(soap*, ...) allocate, set required members
/// - tt__SystemDateTimeExtension* soap_new_set_tt__SystemDateTimeExtension(soap*, ...) allocate, set all public members
/// - tt__SystemDateTimeExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemDateTimeExtension(soap*, tt__SystemDateTimeExtension*) deserialize from a stream
/// - int soap_write_tt__SystemDateTimeExtension(soap*, tt__SystemDateTimeExtension*) serialize to a stream
/// - tt__SystemDateTimeExtension* tt__SystemDateTimeExtension::soap_dup(soap*) returns deep copy of tt__SystemDateTimeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemDateTimeExtension::soap_del() deep deletes tt__SystemDateTimeExtension data members, use only after tt__SystemDateTimeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemDateTimeExtension::soap_type() returns SOAP_TYPE_tt__SystemDateTimeExtension or derived type identifier
class tt__SystemDateTimeExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":DateTime is a complexType.
///
/// @note class tt__DateTime operations:
/// - tt__DateTime* soap_new_tt__DateTime(soap*) allocate and default initialize
/// - tt__DateTime* soap_new_tt__DateTime(soap*, int num) allocate and default initialize an array
/// - tt__DateTime* soap_new_req_tt__DateTime(soap*, ...) allocate, set required members
/// - tt__DateTime* soap_new_set_tt__DateTime(soap*, ...) allocate, set all public members
/// - tt__DateTime::soap_default(soap*) default initialize members
/// - int soap_read_tt__DateTime(soap*, tt__DateTime*) deserialize from a stream
/// - int soap_write_tt__DateTime(soap*, tt__DateTime*) serialize to a stream
/// - tt__DateTime* tt__DateTime::soap_dup(soap*) returns deep copy of tt__DateTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DateTime::soap_del() deep deletes tt__DateTime data members, use only after tt__DateTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DateTime::soap_type() returns SOAP_TYPE_tt__DateTime or derived type identifier
class tt__DateTime : public xsd__anyType
{ public:
/// Element "Time" of type "http://www.onvif.org/ver10/schema":Time.
    tt__Time*                            Time                           1;	///< Required element.
/// Element "Date" of type "http://www.onvif.org/ver10/schema":Date.
    tt__Date*                            Date                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Date is a complexType.
///
/// @note class tt__Date operations:
/// - tt__Date* soap_new_tt__Date(soap*) allocate and default initialize
/// - tt__Date* soap_new_tt__Date(soap*, int num) allocate and default initialize an array
/// - tt__Date* soap_new_req_tt__Date(soap*, ...) allocate, set required members
/// - tt__Date* soap_new_set_tt__Date(soap*, ...) allocate, set all public members
/// - tt__Date::soap_default(soap*) default initialize members
/// - int soap_read_tt__Date(soap*, tt__Date*) deserialize from a stream
/// - int soap_write_tt__Date(soap*, tt__Date*) serialize to a stream
/// - tt__Date* tt__Date::soap_dup(soap*) returns deep copy of tt__Date, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Date::soap_del() deep deletes tt__Date data members, use only after tt__Date::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Date::soap_type() returns SOAP_TYPE_tt__Date or derived type identifier
class tt__Date : public xsd__anyType
{ public:
/// Element "Year" of type xs:int.
    int                                  Year                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 1 to 12.
/// </BLOCKQUOTE></PRE>
///
/// Element "Month" of type xs:int.
    int                                  Month                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 1 to 31.
/// </BLOCKQUOTE></PRE>
///
/// Element "Day" of type xs:int.
    int                                  Day                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Time is a complexType.
///
/// @note class tt__Time operations:
/// - tt__Time* soap_new_tt__Time(soap*) allocate and default initialize
/// - tt__Time* soap_new_tt__Time(soap*, int num) allocate and default initialize an array
/// - tt__Time* soap_new_req_tt__Time(soap*, ...) allocate, set required members
/// - tt__Time* soap_new_set_tt__Time(soap*, ...) allocate, set all public members
/// - tt__Time::soap_default(soap*) default initialize members
/// - int soap_read_tt__Time(soap*, tt__Time*) deserialize from a stream
/// - int soap_write_tt__Time(soap*, tt__Time*) serialize to a stream
/// - tt__Time* tt__Time::soap_dup(soap*) returns deep copy of tt__Time, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Time::soap_del() deep deletes tt__Time data members, use only after tt__Time::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Time::soap_type() returns SOAP_TYPE_tt__Time or derived type identifier
class tt__Time : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 23.
/// </BLOCKQUOTE></PRE>
///
/// Element "Hour" of type xs:int.
    int                                  Hour                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 59.
/// </BLOCKQUOTE></PRE>
///
/// Element "Minute" of type xs:int.
    int                                  Minute                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 61 (typically 59).
/// </BLOCKQUOTE></PRE>
///
/// Element "Second" of type xs:int.
    int                                  Second                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":TimeZone is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The TZ format is specified by POSIX, please refer to POSIX 1003.1 section 8.3<br/>
///   Example: Europe, Paris TZ=CET-1CEST,M3.5.0/2,M10.5.0/3<br/>
///   CET = designation for standard time when daylight saving is not in force<br/>
///   -1 = offset in hours = negative so 1 hour east of Greenwich meridian<br/>
///   CEST = designation when daylight saving is in force ("Central European Summer Time")<br/>
///   , = no offset number between code and comma, so default to one hour ahead for daylight saving<br/>
///   M3.5.0 = when daylight saving starts = the last Sunday in March (the "5th" week means the last in the month)<br/>
///   /2, = the local time when the switch occurs = 2 a.m. in this case<br/>
///   M10.5.0 = when daylight saving ends = the last Sunday in October.<br/>
///   /3, = the local time when the switch occurs = 3 a.m. in this case<br/>
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__TimeZone operations:
/// - tt__TimeZone* soap_new_tt__TimeZone(soap*) allocate and default initialize
/// - tt__TimeZone* soap_new_tt__TimeZone(soap*, int num) allocate and default initialize an array
/// - tt__TimeZone* soap_new_req_tt__TimeZone(soap*, ...) allocate, set required members
/// - tt__TimeZone* soap_new_set_tt__TimeZone(soap*, ...) allocate, set all public members
/// - tt__TimeZone::soap_default(soap*) default initialize members
/// - int soap_read_tt__TimeZone(soap*, tt__TimeZone*) deserialize from a stream
/// - int soap_write_tt__TimeZone(soap*, tt__TimeZone*) serialize to a stream
/// - tt__TimeZone* tt__TimeZone::soap_dup(soap*) returns deep copy of tt__TimeZone, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TimeZone::soap_del() deep deletes tt__TimeZone data members, use only after tt__TimeZone::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TimeZone::soap_type() returns SOAP_TYPE_tt__TimeZone or derived type identifier
class tt__TimeZone : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Posix timezone string.
/// </BLOCKQUOTE></PRE>
///
/// Element "TZ" of type xs:token.
    xsd__token                           TZ                             1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":RemoteUser is a complexType.
///
/// @note class tt__RemoteUser operations:
/// - tt__RemoteUser* soap_new_tt__RemoteUser(soap*) allocate and default initialize
/// - tt__RemoteUser* soap_new_tt__RemoteUser(soap*, int num) allocate and default initialize an array
/// - tt__RemoteUser* soap_new_req_tt__RemoteUser(soap*, ...) allocate, set required members
/// - tt__RemoteUser* soap_new_set_tt__RemoteUser(soap*, ...) allocate, set all public members
/// - tt__RemoteUser::soap_default(soap*) default initialize members
/// - int soap_read_tt__RemoteUser(soap*, tt__RemoteUser*) deserialize from a stream
/// - int soap_write_tt__RemoteUser(soap*, tt__RemoteUser*) serialize to a stream
/// - tt__RemoteUser* tt__RemoteUser::soap_dup(soap*) returns deep copy of tt__RemoteUser, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RemoteUser::soap_del() deep deletes tt__RemoteUser data members, use only after tt__RemoteUser::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RemoteUser::soap_type() returns SOAP_TYPE_tt__RemoteUser or derived type identifier
class tt__RemoteUser : public xsd__anyType
{ public:
/// Element "Username" of type xs:string.
    std::string                          Username                       1;	///< Required element.
/// Element "Password" of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// Element "UseDerivedPassword" of type xs:boolean.
    bool                                 UseDerivedPassword             1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":User is a complexType.
///
/// @note class tt__User operations:
/// - tt__User* soap_new_tt__User(soap*) allocate and default initialize
/// - tt__User* soap_new_tt__User(soap*, int num) allocate and default initialize an array
/// - tt__User* soap_new_req_tt__User(soap*, ...) allocate, set required members
/// - tt__User* soap_new_set_tt__User(soap*, ...) allocate, set all public members
/// - tt__User::soap_default(soap*) default initialize members
/// - int soap_read_tt__User(soap*, tt__User*) deserialize from a stream
/// - int soap_write_tt__User(soap*, tt__User*) serialize to a stream
/// - tt__User* tt__User::soap_dup(soap*) returns deep copy of tt__User, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__User::soap_del() deep deletes tt__User data members, use only after tt__User::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__User::soap_type() returns SOAP_TYPE_tt__User or derived type identifier
class tt__User : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Username string.
/// </BLOCKQUOTE></PRE>
///
/// Element "Username" of type xs:string.
    std::string                          Username                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Password string.
/// </BLOCKQUOTE></PRE>
///
/// Element "Password" of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   User level string.
/// </BLOCKQUOTE></PRE>
///
/// Element "UserLevel" of type "http://www.onvif.org/ver10/schema":UserLevel.
    tt__UserLevel                        UserLevel                      1;	///< Required element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":UserExtension.
    tt__UserExtension*                   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":UserExtension is a complexType.
///
/// @note class tt__UserExtension operations:
/// - tt__UserExtension* soap_new_tt__UserExtension(soap*) allocate and default initialize
/// - tt__UserExtension* soap_new_tt__UserExtension(soap*, int num) allocate and default initialize an array
/// - tt__UserExtension* soap_new_req_tt__UserExtension(soap*, ...) allocate, set required members
/// - tt__UserExtension* soap_new_set_tt__UserExtension(soap*, ...) allocate, set all public members
/// - tt__UserExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__UserExtension(soap*, tt__UserExtension*) deserialize from a stream
/// - int soap_write_tt__UserExtension(soap*, tt__UserExtension*) serialize to a stream
/// - tt__UserExtension* tt__UserExtension::soap_dup(soap*) returns deep copy of tt__UserExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__UserExtension::soap_del() deep deletes tt__UserExtension data members, use only after tt__UserExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__UserExtension::soap_type() returns SOAP_TYPE_tt__UserExtension or derived type identifier
class tt__UserExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateGenerationParameters is a complexType.
///
/// @note class tt__CertificateGenerationParameters operations:
/// - tt__CertificateGenerationParameters* soap_new_tt__CertificateGenerationParameters(soap*) allocate and default initialize
/// - tt__CertificateGenerationParameters* soap_new_tt__CertificateGenerationParameters(soap*, int num) allocate and default initialize an array
/// - tt__CertificateGenerationParameters* soap_new_req_tt__CertificateGenerationParameters(soap*, ...) allocate, set required members
/// - tt__CertificateGenerationParameters* soap_new_set_tt__CertificateGenerationParameters(soap*, ...) allocate, set all public members
/// - tt__CertificateGenerationParameters::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateGenerationParameters(soap*, tt__CertificateGenerationParameters*) deserialize from a stream
/// - int soap_write_tt__CertificateGenerationParameters(soap*, tt__CertificateGenerationParameters*) serialize to a stream
/// - tt__CertificateGenerationParameters* tt__CertificateGenerationParameters::soap_dup(soap*) returns deep copy of tt__CertificateGenerationParameters, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateGenerationParameters::soap_del() deep deletes tt__CertificateGenerationParameters data members, use only after tt__CertificateGenerationParameters::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateGenerationParameters::soap_type() returns SOAP_TYPE_tt__CertificateGenerationParameters or derived type identifier
class tt__CertificateGenerationParameters : public xsd__anyType
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token*                          CertificateID                  0;	///< Optional element.
/// Element "Subject" of type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// Element "ValidNotBefore" of type xs:token.
    xsd__token*                          ValidNotBefore                 0;	///< Optional element.
/// Element "ValidNotAfter" of type xs:token.
    xsd__token*                          ValidNotAfter                  0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":CertificateGenerationParametersExtension.
    tt__CertificateGenerationParametersExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateGenerationParametersExtension is a complexType.
///
/// @note class tt__CertificateGenerationParametersExtension operations:
/// - tt__CertificateGenerationParametersExtension* soap_new_tt__CertificateGenerationParametersExtension(soap*) allocate and default initialize
/// - tt__CertificateGenerationParametersExtension* soap_new_tt__CertificateGenerationParametersExtension(soap*, int num) allocate and default initialize an array
/// - tt__CertificateGenerationParametersExtension* soap_new_req_tt__CertificateGenerationParametersExtension(soap*, ...) allocate, set required members
/// - tt__CertificateGenerationParametersExtension* soap_new_set_tt__CertificateGenerationParametersExtension(soap*, ...) allocate, set all public members
/// - tt__CertificateGenerationParametersExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateGenerationParametersExtension(soap*, tt__CertificateGenerationParametersExtension*) deserialize from a stream
/// - int soap_write_tt__CertificateGenerationParametersExtension(soap*, tt__CertificateGenerationParametersExtension*) serialize to a stream
/// - tt__CertificateGenerationParametersExtension* tt__CertificateGenerationParametersExtension::soap_dup(soap*) returns deep copy of tt__CertificateGenerationParametersExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateGenerationParametersExtension::soap_del() deep deletes tt__CertificateGenerationParametersExtension data members, use only after tt__CertificateGenerationParametersExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateGenerationParametersExtension::soap_type() returns SOAP_TYPE_tt__CertificateGenerationParametersExtension or derived type identifier
class tt__CertificateGenerationParametersExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Certificate is a complexType.
///
/// @note class tt__Certificate operations:
/// - tt__Certificate* soap_new_tt__Certificate(soap*) allocate and default initialize
/// - tt__Certificate* soap_new_tt__Certificate(soap*, int num) allocate and default initialize an array
/// - tt__Certificate* soap_new_req_tt__Certificate(soap*, ...) allocate, set required members
/// - tt__Certificate* soap_new_set_tt__Certificate(soap*, ...) allocate, set all public members
/// - tt__Certificate::soap_default(soap*) default initialize members
/// - int soap_read_tt__Certificate(soap*, tt__Certificate*) deserialize from a stream
/// - int soap_write_tt__Certificate(soap*, tt__Certificate*) serialize to a stream
/// - tt__Certificate* tt__Certificate::soap_dup(soap*) returns deep copy of tt__Certificate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Certificate::soap_del() deep deletes tt__Certificate data members, use only after tt__Certificate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Certificate::soap_type() returns SOAP_TYPE_tt__Certificate or derived type identifier
class tt__Certificate : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
///
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
///
/// Element "Certificate" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Certificate                    1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateStatus is a complexType.
///
/// @note class tt__CertificateStatus operations:
/// - tt__CertificateStatus* soap_new_tt__CertificateStatus(soap*) allocate and default initialize
/// - tt__CertificateStatus* soap_new_tt__CertificateStatus(soap*, int num) allocate and default initialize an array
/// - tt__CertificateStatus* soap_new_req_tt__CertificateStatus(soap*, ...) allocate, set required members
/// - tt__CertificateStatus* soap_new_set_tt__CertificateStatus(soap*, ...) allocate, set all public members
/// - tt__CertificateStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateStatus(soap*, tt__CertificateStatus*) deserialize from a stream
/// - int soap_write_tt__CertificateStatus(soap*, tt__CertificateStatus*) serialize to a stream
/// - tt__CertificateStatus* tt__CertificateStatus::soap_dup(soap*) returns deep copy of tt__CertificateStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateStatus::soap_del() deep deletes tt__CertificateStatus data members, use only after tt__CertificateStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateStatus::soap_type() returns SOAP_TYPE_tt__CertificateStatus or derived type identifier
class tt__CertificateStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
///
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not a certificate is used in a HTTPS configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Status" of type xs:boolean.
    bool                                 Status                         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateWithPrivateKey is a complexType.
///
/// @note class tt__CertificateWithPrivateKey operations:
/// - tt__CertificateWithPrivateKey* soap_new_tt__CertificateWithPrivateKey(soap*) allocate and default initialize
/// - tt__CertificateWithPrivateKey* soap_new_tt__CertificateWithPrivateKey(soap*, int num) allocate and default initialize an array
/// - tt__CertificateWithPrivateKey* soap_new_req_tt__CertificateWithPrivateKey(soap*, ...) allocate, set required members
/// - tt__CertificateWithPrivateKey* soap_new_set_tt__CertificateWithPrivateKey(soap*, ...) allocate, set all public members
/// - tt__CertificateWithPrivateKey::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateWithPrivateKey(soap*, tt__CertificateWithPrivateKey*) deserialize from a stream
/// - int soap_write_tt__CertificateWithPrivateKey(soap*, tt__CertificateWithPrivateKey*) serialize to a stream
/// - tt__CertificateWithPrivateKey* tt__CertificateWithPrivateKey::soap_dup(soap*) returns deep copy of tt__CertificateWithPrivateKey, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateWithPrivateKey::soap_del() deep deletes tt__CertificateWithPrivateKey data members, use only after tt__CertificateWithPrivateKey::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateWithPrivateKey::soap_type() returns SOAP_TYPE_tt__CertificateWithPrivateKey or derived type identifier
class tt__CertificateWithPrivateKey : public xsd__anyType
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token*                          CertificateID                  0;	///< Optional element.
/// Element "Certificate" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Certificate                    1;	///< Required element.
/// Element "PrivateKey" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      PrivateKey                     1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateInformation is a complexType.
///
/// @note class tt__CertificateInformation operations:
/// - tt__CertificateInformation* soap_new_tt__CertificateInformation(soap*) allocate and default initialize
/// - tt__CertificateInformation* soap_new_tt__CertificateInformation(soap*, int num) allocate and default initialize an array
/// - tt__CertificateInformation* soap_new_req_tt__CertificateInformation(soap*, ...) allocate, set required members
/// - tt__CertificateInformation* soap_new_set_tt__CertificateInformation(soap*, ...) allocate, set all public members
/// - tt__CertificateInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateInformation(soap*, tt__CertificateInformation*) deserialize from a stream
/// - int soap_write_tt__CertificateInformation(soap*, tt__CertificateInformation*) serialize to a stream
/// - tt__CertificateInformation* tt__CertificateInformation::soap_dup(soap*) returns deep copy of tt__CertificateInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateInformation::soap_del() deep deletes tt__CertificateInformation data members, use only after tt__CertificateInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateInformation::soap_type() returns SOAP_TYPE_tt__CertificateInformation or derived type identifier
class tt__CertificateInformation : public xsd__anyType
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// Element "IssuerDN" of type xs:string.
    std::string*                         IssuerDN                       0;	///< Optional element.
/// Element "SubjectDN" of type xs:string.
    std::string*                         SubjectDN                      0;	///< Optional element.
/// Element "KeyUsage" of type "http://www.onvif.org/ver10/schema":CertificateUsage.
    tt__CertificateUsage*                KeyUsage                       0;	///< Optional element.
/// Element "ExtendedKeyUsage" of type "http://www.onvif.org/ver10/schema":CertificateUsage.
    tt__CertificateUsage*                ExtendedKeyUsage               0;	///< Optional element.
/// Element "KeyLength" of type xs:int.
    int*                                 KeyLength                      0;	///< Optional element.
/// Element "Version" of type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// Element "SerialNum" of type xs:string.
    std::string*                         SerialNum                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Validity Range is from "NotBefore" to "NotAfter"; the corresponding DateTimeRange is from "From" to "Until"
/// </BLOCKQUOTE></PRE>
///
/// Element "SignatureAlgorithm" of type xs:string.
    std::string*                         SignatureAlgorithm             0;	///< Optional element.
/// Element "Validity" of type "http://www.onvif.org/ver10/schema":DateTimeRange.
    tt__DateTimeRange*                   Validity                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":CertificateInformationExtension.
    tt__CertificateInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateInformationExtension is a complexType.
///
/// @note class tt__CertificateInformationExtension operations:
/// - tt__CertificateInformationExtension* soap_new_tt__CertificateInformationExtension(soap*) allocate and default initialize
/// - tt__CertificateInformationExtension* soap_new_tt__CertificateInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__CertificateInformationExtension* soap_new_req_tt__CertificateInformationExtension(soap*, ...) allocate, set required members
/// - tt__CertificateInformationExtension* soap_new_set_tt__CertificateInformationExtension(soap*, ...) allocate, set all public members
/// - tt__CertificateInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateInformationExtension(soap*, tt__CertificateInformationExtension*) deserialize from a stream
/// - int soap_write_tt__CertificateInformationExtension(soap*, tt__CertificateInformationExtension*) serialize to a stream
/// - tt__CertificateInformationExtension* tt__CertificateInformationExtension::soap_dup(soap*) returns deep copy of tt__CertificateInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateInformationExtension::soap_del() deep deletes tt__CertificateInformationExtension data members, use only after tt__CertificateInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateInformationExtension::soap_type() returns SOAP_TYPE_tt__CertificateInformationExtension or derived type identifier
class tt__CertificateInformationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot1XConfiguration is a complexType.
///
/// @note class tt__Dot1XConfiguration operations:
/// - tt__Dot1XConfiguration* soap_new_tt__Dot1XConfiguration(soap*) allocate and default initialize
/// - tt__Dot1XConfiguration* soap_new_tt__Dot1XConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__Dot1XConfiguration* soap_new_req_tt__Dot1XConfiguration(soap*, ...) allocate, set required members
/// - tt__Dot1XConfiguration* soap_new_set_tt__Dot1XConfiguration(soap*, ...) allocate, set all public members
/// - tt__Dot1XConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot1XConfiguration(soap*, tt__Dot1XConfiguration*) deserialize from a stream
/// - int soap_write_tt__Dot1XConfiguration(soap*, tt__Dot1XConfiguration*) serialize to a stream
/// - tt__Dot1XConfiguration* tt__Dot1XConfiguration::soap_dup(soap*) returns deep copy of tt__Dot1XConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot1XConfiguration::soap_del() deep deletes tt__Dot1XConfiguration data members, use only after tt__Dot1XConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot1XConfiguration::soap_type() returns SOAP_TYPE_tt__Dot1XConfiguration or derived type identifier
class tt__Dot1XConfiguration : public xsd__anyType
{ public:
/// Element "Dot1XConfigurationToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Dot1XConfigurationToken        1;	///< Required element.
/// Element "Identity" of type xs:string.
    std::string                          Identity                       1;	///< Required element.
/// Element "AnonymousID" of type xs:string.
    std::string*                         AnonymousID                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   EAP Method type as defined in <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "EAPMethod" of type xs:int.
    int                                  EAPMethod                      1;	///< Required element.
/// Vector of xsd__token of length 0..unbounded.
    std::vector<xsd__token             > CACertificateID                0;	///< Multiple elements.
/// Element "EAPMethodConfiguration" of type "http://www.onvif.org/ver10/schema":EAPMethodConfiguration.
    tt__EAPMethodConfiguration*          EAPMethodConfiguration         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension.
    tt__Dot1XConfigurationExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension is a complexType.
///
/// @note class tt__Dot1XConfigurationExtension operations:
/// - tt__Dot1XConfigurationExtension* soap_new_tt__Dot1XConfigurationExtension(soap*) allocate and default initialize
/// - tt__Dot1XConfigurationExtension* soap_new_tt__Dot1XConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot1XConfigurationExtension* soap_new_req_tt__Dot1XConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__Dot1XConfigurationExtension* soap_new_set_tt__Dot1XConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__Dot1XConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot1XConfigurationExtension(soap*, tt__Dot1XConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__Dot1XConfigurationExtension(soap*, tt__Dot1XConfigurationExtension*) serialize to a stream
/// - tt__Dot1XConfigurationExtension* tt__Dot1XConfigurationExtension::soap_dup(soap*) returns deep copy of tt__Dot1XConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot1XConfigurationExtension::soap_del() deep deletes tt__Dot1XConfigurationExtension data members, use only after tt__Dot1XConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot1XConfigurationExtension::soap_type() returns SOAP_TYPE_tt__Dot1XConfigurationExtension or derived type identifier
class tt__Dot1XConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":EAPMethodConfiguration is a complexType.
///
/// @note class tt__EAPMethodConfiguration operations:
/// - tt__EAPMethodConfiguration* soap_new_tt__EAPMethodConfiguration(soap*) allocate and default initialize
/// - tt__EAPMethodConfiguration* soap_new_tt__EAPMethodConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__EAPMethodConfiguration* soap_new_req_tt__EAPMethodConfiguration(soap*, ...) allocate, set required members
/// - tt__EAPMethodConfiguration* soap_new_set_tt__EAPMethodConfiguration(soap*, ...) allocate, set all public members
/// - tt__EAPMethodConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__EAPMethodConfiguration(soap*, tt__EAPMethodConfiguration*) deserialize from a stream
/// - int soap_write_tt__EAPMethodConfiguration(soap*, tt__EAPMethodConfiguration*) serialize to a stream
/// - tt__EAPMethodConfiguration* tt__EAPMethodConfiguration::soap_dup(soap*) returns deep copy of tt__EAPMethodConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EAPMethodConfiguration::soap_del() deep deletes tt__EAPMethodConfiguration data members, use only after tt__EAPMethodConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EAPMethodConfiguration::soap_type() returns SOAP_TYPE_tt__EAPMethodConfiguration or derived type identifier
class tt__EAPMethodConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Confgiuration information for TLS Method.
/// </BLOCKQUOTE></PRE>
///
/// Element "TLSConfiguration" of type "http://www.onvif.org/ver10/schema":TLSConfiguration.
    tt__TLSConfiguration*                TLSConfiguration               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Password for those EAP Methods that require a password. The password shall never be returned on a get method.
/// </BLOCKQUOTE></PRE>
///
/// Element "Password" of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":EapMethodExtension.
    tt__EapMethodExtension*              Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":EapMethodExtension is a complexType.
///
/// @note class tt__EapMethodExtension operations:
/// - tt__EapMethodExtension* soap_new_tt__EapMethodExtension(soap*) allocate and default initialize
/// - tt__EapMethodExtension* soap_new_tt__EapMethodExtension(soap*, int num) allocate and default initialize an array
/// - tt__EapMethodExtension* soap_new_req_tt__EapMethodExtension(soap*, ...) allocate, set required members
/// - tt__EapMethodExtension* soap_new_set_tt__EapMethodExtension(soap*, ...) allocate, set all public members
/// - tt__EapMethodExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__EapMethodExtension(soap*, tt__EapMethodExtension*) deserialize from a stream
/// - int soap_write_tt__EapMethodExtension(soap*, tt__EapMethodExtension*) serialize to a stream
/// - tt__EapMethodExtension* tt__EapMethodExtension::soap_dup(soap*) returns deep copy of tt__EapMethodExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EapMethodExtension::soap_del() deep deletes tt__EapMethodExtension data members, use only after tt__EapMethodExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EapMethodExtension::soap_type() returns SOAP_TYPE_tt__EapMethodExtension or derived type identifier
class tt__EapMethodExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":TLSConfiguration is a complexType.
///
/// @note class tt__TLSConfiguration operations:
/// - tt__TLSConfiguration* soap_new_tt__TLSConfiguration(soap*) allocate and default initialize
/// - tt__TLSConfiguration* soap_new_tt__TLSConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__TLSConfiguration* soap_new_req_tt__TLSConfiguration(soap*, ...) allocate, set required members
/// - tt__TLSConfiguration* soap_new_set_tt__TLSConfiguration(soap*, ...) allocate, set all public members
/// - tt__TLSConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__TLSConfiguration(soap*, tt__TLSConfiguration*) deserialize from a stream
/// - int soap_write_tt__TLSConfiguration(soap*, tt__TLSConfiguration*) serialize to a stream
/// - tt__TLSConfiguration* tt__TLSConfiguration::soap_dup(soap*) returns deep copy of tt__TLSConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TLSConfiguration::soap_del() deep deletes tt__TLSConfiguration data members, use only after tt__TLSConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TLSConfiguration::soap_type() returns SOAP_TYPE_tt__TLSConfiguration or derived type identifier
class tt__TLSConfiguration : public xsd__anyType
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":GenericEapPwdConfigurationExtension is a complexType.
///
/// @note class tt__GenericEapPwdConfigurationExtension operations:
/// - tt__GenericEapPwdConfigurationExtension* soap_new_tt__GenericEapPwdConfigurationExtension(soap*) allocate and default initialize
/// - tt__GenericEapPwdConfigurationExtension* soap_new_tt__GenericEapPwdConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__GenericEapPwdConfigurationExtension* soap_new_req_tt__GenericEapPwdConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__GenericEapPwdConfigurationExtension* soap_new_set_tt__GenericEapPwdConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__GenericEapPwdConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__GenericEapPwdConfigurationExtension(soap*, tt__GenericEapPwdConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__GenericEapPwdConfigurationExtension(soap*, tt__GenericEapPwdConfigurationExtension*) serialize to a stream
/// - tt__GenericEapPwdConfigurationExtension* tt__GenericEapPwdConfigurationExtension::soap_dup(soap*) returns deep copy of tt__GenericEapPwdConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GenericEapPwdConfigurationExtension::soap_del() deep deletes tt__GenericEapPwdConfigurationExtension data members, use only after tt__GenericEapPwdConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GenericEapPwdConfigurationExtension::soap_type() returns SOAP_TYPE_tt__GenericEapPwdConfigurationExtension or derived type identifier
class tt__GenericEapPwdConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":RelayOutputSettings is a complexType.
///
/// @note class tt__RelayOutputSettings operations:
/// - tt__RelayOutputSettings* soap_new_tt__RelayOutputSettings(soap*) allocate and default initialize
/// - tt__RelayOutputSettings* soap_new_tt__RelayOutputSettings(soap*, int num) allocate and default initialize an array
/// - tt__RelayOutputSettings* soap_new_req_tt__RelayOutputSettings(soap*, ...) allocate, set required members
/// - tt__RelayOutputSettings* soap_new_set_tt__RelayOutputSettings(soap*, ...) allocate, set all public members
/// - tt__RelayOutputSettings::soap_default(soap*) default initialize members
/// - int soap_read_tt__RelayOutputSettings(soap*, tt__RelayOutputSettings*) deserialize from a stream
/// - int soap_write_tt__RelayOutputSettings(soap*, tt__RelayOutputSettings*) serialize to a stream
/// - tt__RelayOutputSettings* tt__RelayOutputSettings::soap_dup(soap*) returns deep copy of tt__RelayOutputSettings, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RelayOutputSettings::soap_del() deep deletes tt__RelayOutputSettings data members, use only after tt__RelayOutputSettings::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RelayOutputSettings::soap_type() returns SOAP_TYPE_tt__RelayOutputSettings or derived type identifier
class tt__RelayOutputSettings : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   'Bistable' or 'Monostable'
///   <ul>
///   <li>Bistable After setting the state, the relay remains in this state.</li>
///   <li>Monostable After setting the state, the relay returns to its idle state after the specified time.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":RelayMode.
    tt__RelayMode                        Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Time after which the relay returns to its idle state if it is in monostable mode. If the Mode field is set to bistable mode the value of the parameter can be ignored.
/// </BLOCKQUOTE></PRE>
///
/// Element "DelayTime" of type xs:duration.
    xsd__duration                        DelayTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   'open' or 'closed'
///   <ul>
///   <li>'open' means that the relay is open when the relay state is set to 'inactive' through the trigger command and closed when the state is set to 'active' through the same command.</li>
///   <li>'closed' means that the relay is closed when the relay state is set to 'inactive' through the trigger command and open when the state is set to 'active' through the same command.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "IdleState" of type "http://www.onvif.org/ver10/schema":RelayIdleState.
    tt__RelayIdleState                   IdleState                      1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNodeExtension is a complexType.
///
/// @note class tt__PTZNodeExtension operations:
/// - tt__PTZNodeExtension* soap_new_tt__PTZNodeExtension(soap*) allocate and default initialize
/// - tt__PTZNodeExtension* soap_new_tt__PTZNodeExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZNodeExtension* soap_new_req_tt__PTZNodeExtension(soap*, ...) allocate, set required members
/// - tt__PTZNodeExtension* soap_new_set_tt__PTZNodeExtension(soap*, ...) allocate, set all public members
/// - tt__PTZNodeExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZNodeExtension(soap*, tt__PTZNodeExtension*) deserialize from a stream
/// - int soap_write_tt__PTZNodeExtension(soap*, tt__PTZNodeExtension*) serialize to a stream
/// - tt__PTZNodeExtension* tt__PTZNodeExtension::soap_dup(soap*) returns deep copy of tt__PTZNodeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZNodeExtension::soap_del() deep deletes tt__PTZNodeExtension data members, use only after tt__PTZNodeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZNodeExtension::soap_type() returns SOAP_TYPE_tt__PTZNodeExtension or derived type identifier
class tt__PTZNodeExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Detail of supported Preset Tour feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedPresetTour" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSupported.
    tt__PTZPresetTourSupported*          SupportedPresetTour            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZNodeExtension2.
    tt__PTZNodeExtension2*               Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNodeExtension2 is a complexType.
///
/// @note class tt__PTZNodeExtension2 operations:
/// - tt__PTZNodeExtension2* soap_new_tt__PTZNodeExtension2(soap*) allocate and default initialize
/// - tt__PTZNodeExtension2* soap_new_tt__PTZNodeExtension2(soap*, int num) allocate and default initialize an array
/// - tt__PTZNodeExtension2* soap_new_req_tt__PTZNodeExtension2(soap*, ...) allocate, set required members
/// - tt__PTZNodeExtension2* soap_new_set_tt__PTZNodeExtension2(soap*, ...) allocate, set all public members
/// - tt__PTZNodeExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZNodeExtension2(soap*, tt__PTZNodeExtension2*) deserialize from a stream
/// - int soap_write_tt__PTZNodeExtension2(soap*, tt__PTZNodeExtension2*) serialize to a stream
/// - tt__PTZNodeExtension2* tt__PTZNodeExtension2::soap_dup(soap*) returns deep copy of tt__PTZNodeExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZNodeExtension2::soap_del() deep deletes tt__PTZNodeExtension2 data members, use only after tt__PTZNodeExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZNodeExtension2::soap_type() returns SOAP_TYPE_tt__PTZNodeExtension2 or derived type identifier
class tt__PTZNodeExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSupported is a complexType.
///
/// @note class tt__PTZPresetTourSupported operations:
/// - tt__PTZPresetTourSupported* soap_new_tt__PTZPresetTourSupported(soap*) allocate and default initialize
/// - tt__PTZPresetTourSupported* soap_new_tt__PTZPresetTourSupported(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSupported* soap_new_req_tt__PTZPresetTourSupported(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSupported* soap_new_set_tt__PTZPresetTourSupported(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSupported::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSupported(soap*, tt__PTZPresetTourSupported*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSupported(soap*, tt__PTZPresetTourSupported*) serialize to a stream
/// - tt__PTZPresetTourSupported* tt__PTZPresetTourSupported::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSupported, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSupported::soap_del() deep deletes tt__PTZPresetTourSupported data members, use only after tt__PTZPresetTourSupported::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSupported::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSupported or derived type identifier
class tt__PTZPresetTourSupported : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates number of preset tours that can be created. Required preset tour operations shall be available for this PTZ Node if one or more preset tour is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumNumberOfPresetTours" of type xs:int.
    int                                  MaximumNumberOfPresetTours     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates which preset tour operations are available for this PTZ Node.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PTZPresetTourOperation of length 0..unbounded.
    std::vector<tt__PTZPresetTourOperation> PTZPresetTourOperation         0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSupportedExtension.
    tt__PTZPresetTourSupportedExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSupportedExtension is a complexType.
///
/// @note class tt__PTZPresetTourSupportedExtension operations:
/// - tt__PTZPresetTourSupportedExtension* soap_new_tt__PTZPresetTourSupportedExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourSupportedExtension* soap_new_tt__PTZPresetTourSupportedExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSupportedExtension* soap_new_req_tt__PTZPresetTourSupportedExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSupportedExtension* soap_new_set_tt__PTZPresetTourSupportedExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSupportedExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSupportedExtension(soap*, tt__PTZPresetTourSupportedExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSupportedExtension(soap*, tt__PTZPresetTourSupportedExtension*) serialize to a stream
/// - tt__PTZPresetTourSupportedExtension* tt__PTZPresetTourSupportedExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSupportedExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSupportedExtension::soap_del() deep deletes tt__PTZPresetTourSupportedExtension data members, use only after tt__PTZPresetTourSupportedExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSupportedExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSupportedExtension or derived type identifier
class tt__PTZPresetTourSupportedExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationExtension is a complexType.
///
/// @note class tt__PTZConfigurationExtension operations:
/// - tt__PTZConfigurationExtension* soap_new_tt__PTZConfigurationExtension(soap*) allocate and default initialize
/// - tt__PTZConfigurationExtension* soap_new_tt__PTZConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationExtension* soap_new_req_tt__PTZConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationExtension* soap_new_set_tt__PTZConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationExtension(soap*, tt__PTZConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationExtension(soap*, tt__PTZConfigurationExtension*) serialize to a stream
/// - tt__PTZConfigurationExtension* tt__PTZConfigurationExtension::soap_dup(soap*) returns deep copy of tt__PTZConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationExtension::soap_del() deep deletes tt__PTZConfigurationExtension data members, use only after tt__PTZConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationExtension::soap_type() returns SOAP_TYPE_tt__PTZConfigurationExtension or derived type identifier
class tt__PTZConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure PT Control Direction related features.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTControlDirection" of type "http://www.onvif.org/ver10/schema":PTControlDirection.
    tt__PTControlDirection*              PTControlDirection             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZConfigurationExtension2.
    tt__PTZConfigurationExtension2*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationExtension2 is a complexType.
///
/// @note class tt__PTZConfigurationExtension2 operations:
/// - tt__PTZConfigurationExtension2* soap_new_tt__PTZConfigurationExtension2(soap*) allocate and default initialize
/// - tt__PTZConfigurationExtension2* soap_new_tt__PTZConfigurationExtension2(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationExtension2* soap_new_req_tt__PTZConfigurationExtension2(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationExtension2* soap_new_set_tt__PTZConfigurationExtension2(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationExtension2(soap*, tt__PTZConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationExtension2(soap*, tt__PTZConfigurationExtension2*) serialize to a stream
/// - tt__PTZConfigurationExtension2* tt__PTZConfigurationExtension2::soap_dup(soap*) returns deep copy of tt__PTZConfigurationExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationExtension2::soap_del() deep deletes tt__PTZConfigurationExtension2 data members, use only after tt__PTZConfigurationExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationExtension2::soap_type() returns SOAP_TYPE_tt__PTZConfigurationExtension2 or derived type identifier
class tt__PTZConfigurationExtension2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirection is a complexType.
///
/// @note class tt__PTControlDirection operations:
/// - tt__PTControlDirection* soap_new_tt__PTControlDirection(soap*) allocate and default initialize
/// - tt__PTControlDirection* soap_new_tt__PTControlDirection(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirection* soap_new_req_tt__PTControlDirection(soap*, ...) allocate, set required members
/// - tt__PTControlDirection* soap_new_set_tt__PTControlDirection(soap*, ...) allocate, set all public members
/// - tt__PTControlDirection::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirection(soap*, tt__PTControlDirection*) deserialize from a stream
/// - int soap_write_tt__PTControlDirection(soap*, tt__PTControlDirection*) serialize to a stream
/// - tt__PTControlDirection* tt__PTControlDirection::soap_dup(soap*) returns deep copy of tt__PTControlDirection, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirection::soap_del() deep deletes tt__PTControlDirection data members, use only after tt__PTControlDirection::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirection::soap_type() returns SOAP_TYPE_tt__PTControlDirection or derived type identifier
class tt__PTControlDirection : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure related parameters for E-Flip.
/// </BLOCKQUOTE></PRE>
///
/// Element "EFlip" of type "http://www.onvif.org/ver10/schema":EFlip.
    tt__EFlip*                           EFlip                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure related parameters for reversing of PT Control Direction.
/// </BLOCKQUOTE></PRE>
///
/// Element "Reverse" of type "http://www.onvif.org/ver10/schema":Reverse.
    tt__Reverse*                         Reverse                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTControlDirectionExtension.
    tt__PTControlDirectionExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionExtension is a complexType.
///
/// @note class tt__PTControlDirectionExtension operations:
/// - tt__PTControlDirectionExtension* soap_new_tt__PTControlDirectionExtension(soap*) allocate and default initialize
/// - tt__PTControlDirectionExtension* soap_new_tt__PTControlDirectionExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirectionExtension* soap_new_req_tt__PTControlDirectionExtension(soap*, ...) allocate, set required members
/// - tt__PTControlDirectionExtension* soap_new_set_tt__PTControlDirectionExtension(soap*, ...) allocate, set all public members
/// - tt__PTControlDirectionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirectionExtension(soap*, tt__PTControlDirectionExtension*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionExtension(soap*, tt__PTControlDirectionExtension*) serialize to a stream
/// - tt__PTControlDirectionExtension* tt__PTControlDirectionExtension::soap_dup(soap*) returns deep copy of tt__PTControlDirectionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirectionExtension::soap_del() deep deletes tt__PTControlDirectionExtension data members, use only after tt__PTControlDirectionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirectionExtension::soap_type() returns SOAP_TYPE_tt__PTControlDirectionExtension or derived type identifier
class tt__PTControlDirectionExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":EFlip is a complexType.
///
/// @note class tt__EFlip operations:
/// - tt__EFlip* soap_new_tt__EFlip(soap*) allocate and default initialize
/// - tt__EFlip* soap_new_tt__EFlip(soap*, int num) allocate and default initialize an array
/// - tt__EFlip* soap_new_req_tt__EFlip(soap*, ...) allocate, set required members
/// - tt__EFlip* soap_new_set_tt__EFlip(soap*, ...) allocate, set all public members
/// - tt__EFlip::soap_default(soap*) default initialize members
/// - int soap_read_tt__EFlip(soap*, tt__EFlip*) deserialize from a stream
/// - int soap_write_tt__EFlip(soap*, tt__EFlip*) serialize to a stream
/// - tt__EFlip* tt__EFlip::soap_dup(soap*) returns deep copy of tt__EFlip, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EFlip::soap_del() deep deletes tt__EFlip data members, use only after tt__EFlip::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EFlip::soap_type() returns SOAP_TYPE_tt__EFlip or derived type identifier
class tt__EFlip : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable E-Flip feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":EFlipMode.
    tt__EFlipMode                        Mode                           1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Reverse is a complexType.
///
/// @note class tt__Reverse operations:
/// - tt__Reverse* soap_new_tt__Reverse(soap*) allocate and default initialize
/// - tt__Reverse* soap_new_tt__Reverse(soap*, int num) allocate and default initialize an array
/// - tt__Reverse* soap_new_req_tt__Reverse(soap*, ...) allocate, set required members
/// - tt__Reverse* soap_new_set_tt__Reverse(soap*, ...) allocate, set all public members
/// - tt__Reverse::soap_default(soap*) default initialize members
/// - int soap_read_tt__Reverse(soap*, tt__Reverse*) deserialize from a stream
/// - int soap_write_tt__Reverse(soap*, tt__Reverse*) serialize to a stream
/// - tt__Reverse* tt__Reverse::soap_dup(soap*) returns deep copy of tt__Reverse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Reverse::soap_del() deep deletes tt__Reverse data members, use only after tt__Reverse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Reverse::soap_type() returns SOAP_TYPE_tt__Reverse or derived type identifier
class tt__Reverse : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Reverse feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ReverseMode.
    tt__ReverseMode                      Mode                           1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationOptions is a complexType.
///
/// @note class tt__PTZConfigurationOptions operations:
/// - tt__PTZConfigurationOptions* soap_new_tt__PTZConfigurationOptions(soap*) allocate and default initialize
/// - tt__PTZConfigurationOptions* soap_new_tt__PTZConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationOptions* soap_new_req_tt__PTZConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationOptions* soap_new_set_tt__PTZConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationOptions(soap*, tt__PTZConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationOptions(soap*, tt__PTZConfigurationOptions*) serialize to a stream
/// - tt__PTZConfigurationOptions* tt__PTZConfigurationOptions::soap_dup(soap*) returns deep copy of tt__PTZConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationOptions::soap_del() deep deletes tt__PTZConfigurationOptions data members, use only after tt__PTZConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationOptions::soap_type() returns SOAP_TYPE_tt__PTZConfigurationOptions or derived type identifier
class tt__PTZConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of supported coordinate systems including their range limitations.
/// </BLOCKQUOTE></PRE>
///
/// Element "Spaces" of type "http://www.onvif.org/ver10/schema":PTZSpaces.
    tt__PTZSpaces*                       Spaces                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A timeout Range within which Timeouts are accepted by the PTZ Node.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZTimeout" of type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   PTZTimeout                     1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Supported options for PT Direction Control.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTControlDirection" of type "http://www.onvif.org/ver10/schema":PTControlDirectionOptions.
    tt__PTControlDirectionOptions*       PTControlDirection             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZConfigurationOptions2.
    tt__PTZConfigurationOptions2*        Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The list of acceleration ramps supported by the device. The
///   smallest acceleration value corresponds to the minimal index, the
///   highest acceleration corresponds to the maximum index.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "PTZRamps" of type "http://www.onvif.org/ver10/schema":IntAttrList.
  @ tt__IntAttrList*                     PTZRamps                       0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationOptions2 is a complexType.
///
/// @note class tt__PTZConfigurationOptions2 operations:
/// - tt__PTZConfigurationOptions2* soap_new_tt__PTZConfigurationOptions2(soap*) allocate and default initialize
/// - tt__PTZConfigurationOptions2* soap_new_tt__PTZConfigurationOptions2(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationOptions2* soap_new_req_tt__PTZConfigurationOptions2(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationOptions2* soap_new_set_tt__PTZConfigurationOptions2(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationOptions2::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationOptions2(soap*, tt__PTZConfigurationOptions2*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationOptions2(soap*, tt__PTZConfigurationOptions2*) serialize to a stream
/// - tt__PTZConfigurationOptions2* tt__PTZConfigurationOptions2::soap_dup(soap*) returns deep copy of tt__PTZConfigurationOptions2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationOptions2::soap_del() deep deletes tt__PTZConfigurationOptions2 data members, use only after tt__PTZConfigurationOptions2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationOptions2::soap_type() returns SOAP_TYPE_tt__PTZConfigurationOptions2 or derived type identifier
class tt__PTZConfigurationOptions2 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionOptions is a complexType.
///
/// @note class tt__PTControlDirectionOptions operations:
/// - tt__PTControlDirectionOptions* soap_new_tt__PTControlDirectionOptions(soap*) allocate and default initialize
/// - tt__PTControlDirectionOptions* soap_new_tt__PTControlDirectionOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirectionOptions* soap_new_req_tt__PTControlDirectionOptions(soap*, ...) allocate, set required members
/// - tt__PTControlDirectionOptions* soap_new_set_tt__PTControlDirectionOptions(soap*, ...) allocate, set all public members
/// - tt__PTControlDirectionOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirectionOptions(soap*, tt__PTControlDirectionOptions*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionOptions(soap*, tt__PTControlDirectionOptions*) serialize to a stream
/// - tt__PTControlDirectionOptions* tt__PTControlDirectionOptions::soap_dup(soap*) returns deep copy of tt__PTControlDirectionOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirectionOptions::soap_del() deep deletes tt__PTControlDirectionOptions data members, use only after tt__PTControlDirectionOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirectionOptions::soap_type() returns SOAP_TYPE_tt__PTControlDirectionOptions or derived type identifier
class tt__PTControlDirectionOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for EFlip feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "EFlip" of type "http://www.onvif.org/ver10/schema":EFlipOptions.
    tt__EFlipOptions*                    EFlip                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Reverse feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Reverse" of type "http://www.onvif.org/ver10/schema":ReverseOptions.
    tt__ReverseOptions*                  Reverse                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTControlDirectionOptionsExtension.
    tt__PTControlDirectionOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionOptionsExtension is a complexType.
///
/// @note class tt__PTControlDirectionOptionsExtension operations:
/// - tt__PTControlDirectionOptionsExtension* soap_new_tt__PTControlDirectionOptionsExtension(soap*) allocate and default initialize
/// - tt__PTControlDirectionOptionsExtension* soap_new_tt__PTControlDirectionOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirectionOptionsExtension* soap_new_req_tt__PTControlDirectionOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTControlDirectionOptionsExtension* soap_new_set_tt__PTControlDirectionOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTControlDirectionOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirectionOptionsExtension(soap*, tt__PTControlDirectionOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionOptionsExtension(soap*, tt__PTControlDirectionOptionsExtension*) serialize to a stream
/// - tt__PTControlDirectionOptionsExtension* tt__PTControlDirectionOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTControlDirectionOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirectionOptionsExtension::soap_del() deep deletes tt__PTControlDirectionOptionsExtension data members, use only after tt__PTControlDirectionOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirectionOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTControlDirectionOptionsExtension or derived type identifier
class tt__PTControlDirectionOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipOptions is a complexType.
///
/// @note class tt__EFlipOptions operations:
/// - tt__EFlipOptions* soap_new_tt__EFlipOptions(soap*) allocate and default initialize
/// - tt__EFlipOptions* soap_new_tt__EFlipOptions(soap*, int num) allocate and default initialize an array
/// - tt__EFlipOptions* soap_new_req_tt__EFlipOptions(soap*, ...) allocate, set required members
/// - tt__EFlipOptions* soap_new_set_tt__EFlipOptions(soap*, ...) allocate, set all public members
/// - tt__EFlipOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__EFlipOptions(soap*, tt__EFlipOptions*) deserialize from a stream
/// - int soap_write_tt__EFlipOptions(soap*, tt__EFlipOptions*) serialize to a stream
/// - tt__EFlipOptions* tt__EFlipOptions::soap_dup(soap*) returns deep copy of tt__EFlipOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EFlipOptions::soap_del() deep deletes tt__EFlipOptions data members, use only after tt__EFlipOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EFlipOptions::soap_type() returns SOAP_TYPE_tt__EFlipOptions or derived type identifier
class tt__EFlipOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of EFlip mode parameter.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__EFlipMode of length 0..unbounded.
    std::vector<tt__EFlipMode          > Mode                           0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":EFlipOptionsExtension.
    tt__EFlipOptionsExtension*           Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipOptionsExtension is a complexType.
///
/// @note class tt__EFlipOptionsExtension operations:
/// - tt__EFlipOptionsExtension* soap_new_tt__EFlipOptionsExtension(soap*) allocate and default initialize
/// - tt__EFlipOptionsExtension* soap_new_tt__EFlipOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__EFlipOptionsExtension* soap_new_req_tt__EFlipOptionsExtension(soap*, ...) allocate, set required members
/// - tt__EFlipOptionsExtension* soap_new_set_tt__EFlipOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__EFlipOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__EFlipOptionsExtension(soap*, tt__EFlipOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__EFlipOptionsExtension(soap*, tt__EFlipOptionsExtension*) serialize to a stream
/// - tt__EFlipOptionsExtension* tt__EFlipOptionsExtension::soap_dup(soap*) returns deep copy of tt__EFlipOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EFlipOptionsExtension::soap_del() deep deletes tt__EFlipOptionsExtension data members, use only after tt__EFlipOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EFlipOptionsExtension::soap_type() returns SOAP_TYPE_tt__EFlipOptionsExtension or derived type identifier
class tt__EFlipOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseOptions is a complexType.
///
/// @note class tt__ReverseOptions operations:
/// - tt__ReverseOptions* soap_new_tt__ReverseOptions(soap*) allocate and default initialize
/// - tt__ReverseOptions* soap_new_tt__ReverseOptions(soap*, int num) allocate and default initialize an array
/// - tt__ReverseOptions* soap_new_req_tt__ReverseOptions(soap*, ...) allocate, set required members
/// - tt__ReverseOptions* soap_new_set_tt__ReverseOptions(soap*, ...) allocate, set all public members
/// - tt__ReverseOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReverseOptions(soap*, tt__ReverseOptions*) deserialize from a stream
/// - int soap_write_tt__ReverseOptions(soap*, tt__ReverseOptions*) serialize to a stream
/// - tt__ReverseOptions* tt__ReverseOptions::soap_dup(soap*) returns deep copy of tt__ReverseOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReverseOptions::soap_del() deep deletes tt__ReverseOptions data members, use only after tt__ReverseOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReverseOptions::soap_type() returns SOAP_TYPE_tt__ReverseOptions or derived type identifier
class tt__ReverseOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of Reverse mode parameter.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ReverseMode of length 0..unbounded.
    std::vector<tt__ReverseMode        > Mode                           0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ReverseOptionsExtension.
    tt__ReverseOptionsExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseOptionsExtension is a complexType.
///
/// @note class tt__ReverseOptionsExtension operations:
/// - tt__ReverseOptionsExtension* soap_new_tt__ReverseOptionsExtension(soap*) allocate and default initialize
/// - tt__ReverseOptionsExtension* soap_new_tt__ReverseOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__ReverseOptionsExtension* soap_new_req_tt__ReverseOptionsExtension(soap*, ...) allocate, set required members
/// - tt__ReverseOptionsExtension* soap_new_set_tt__ReverseOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__ReverseOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReverseOptionsExtension(soap*, tt__ReverseOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__ReverseOptionsExtension(soap*, tt__ReverseOptionsExtension*) serialize to a stream
/// - tt__ReverseOptionsExtension* tt__ReverseOptionsExtension::soap_dup(soap*) returns deep copy of tt__ReverseOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReverseOptionsExtension::soap_del() deep deletes tt__ReverseOptionsExtension data members, use only after tt__ReverseOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReverseOptionsExtension::soap_type() returns SOAP_TYPE_tt__ReverseOptionsExtension or derived type identifier
class tt__ReverseOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PanTiltLimits is a complexType.
///
/// @note class tt__PanTiltLimits operations:
/// - tt__PanTiltLimits* soap_new_tt__PanTiltLimits(soap*) allocate and default initialize
/// - tt__PanTiltLimits* soap_new_tt__PanTiltLimits(soap*, int num) allocate and default initialize an array
/// - tt__PanTiltLimits* soap_new_req_tt__PanTiltLimits(soap*, ...) allocate, set required members
/// - tt__PanTiltLimits* soap_new_set_tt__PanTiltLimits(soap*, ...) allocate, set all public members
/// - tt__PanTiltLimits::soap_default(soap*) default initialize members
/// - int soap_read_tt__PanTiltLimits(soap*, tt__PanTiltLimits*) deserialize from a stream
/// - int soap_write_tt__PanTiltLimits(soap*, tt__PanTiltLimits*) serialize to a stream
/// - tt__PanTiltLimits* tt__PanTiltLimits::soap_dup(soap*) returns deep copy of tt__PanTiltLimits, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PanTiltLimits::soap_del() deep deletes tt__PanTiltLimits data members, use only after tt__PanTiltLimits::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PanTiltLimits::soap_type() returns SOAP_TYPE_tt__PanTiltLimits or derived type identifier
class tt__PanTiltLimits : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A range of pan tilt limits.
/// </BLOCKQUOTE></PRE>
///
/// Element "Range" of type "http://www.onvif.org/ver10/schema":Space2DDescription.
    tt__Space2DDescription*              Range                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ZoomLimits is a complexType.
///
/// @note class tt__ZoomLimits operations:
/// - tt__ZoomLimits* soap_new_tt__ZoomLimits(soap*) allocate and default initialize
/// - tt__ZoomLimits* soap_new_tt__ZoomLimits(soap*, int num) allocate and default initialize an array
/// - tt__ZoomLimits* soap_new_req_tt__ZoomLimits(soap*, ...) allocate, set required members
/// - tt__ZoomLimits* soap_new_set_tt__ZoomLimits(soap*, ...) allocate, set all public members
/// - tt__ZoomLimits::soap_default(soap*) default initialize members
/// - int soap_read_tt__ZoomLimits(soap*, tt__ZoomLimits*) deserialize from a stream
/// - int soap_write_tt__ZoomLimits(soap*, tt__ZoomLimits*) serialize to a stream
/// - tt__ZoomLimits* tt__ZoomLimits::soap_dup(soap*) returns deep copy of tt__ZoomLimits, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ZoomLimits::soap_del() deep deletes tt__ZoomLimits data members, use only after tt__ZoomLimits::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ZoomLimits::soap_type() returns SOAP_TYPE_tt__ZoomLimits or derived type identifier
class tt__ZoomLimits : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A range of zoom limit
/// </BLOCKQUOTE></PRE>
///
/// Element "Range" of type "http://www.onvif.org/ver10/schema":Space1DDescription.
    tt__Space1DDescription*              Range                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpaces is a complexType.
///
/// @note class tt__PTZSpaces operations:
/// - tt__PTZSpaces* soap_new_tt__PTZSpaces(soap*) allocate and default initialize
/// - tt__PTZSpaces* soap_new_tt__PTZSpaces(soap*, int num) allocate and default initialize an array
/// - tt__PTZSpaces* soap_new_req_tt__PTZSpaces(soap*, ...) allocate, set required members
/// - tt__PTZSpaces* soap_new_set_tt__PTZSpaces(soap*, ...) allocate, set all public members
/// - tt__PTZSpaces::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZSpaces(soap*, tt__PTZSpaces*) deserialize from a stream
/// - int soap_write_tt__PTZSpaces(soap*, tt__PTZSpaces*) serialize to a stream
/// - tt__PTZSpaces* tt__PTZSpaces::soap_dup(soap*) returns deep copy of tt__PTZSpaces, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZSpaces::soap_del() deep deletes tt__PTZSpaces data members, use only after tt__PTZSpaces::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZSpaces::soap_type() returns SOAP_TYPE_tt__PTZSpaces or derived type identifier
class tt__PTZSpaces : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Generic Pan/Tilt Position space is provided by every PTZ node that supports absolute Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the PTZ unit normalized to the range -1 to 1 resulting in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space2DDescription* of length 0..unbounded.
    std::vector<tt__Space2DDescription*> AbsolutePanTiltPositionSpace   0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The Generic Zoom Position Space is provided by every PTZ node that supports absolute Zoom, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the Zoom normalized to the range 0 (wide) to 1 (tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> AbsoluteZoomPositionSpace      0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The Generic Pan/Tilt translation space is provided by every PTZ node that supports relative Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full positive and negative translation range of the PTZ unit normalized to the range -1 to 1, where positive translation would mean clockwise rotation or movement in right/up direction resulting in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space2DDescription* of length 0..unbounded.
    std::vector<tt__Space2DDescription*> RelativePanTiltTranslationSpace 0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The Generic Zoom Translation Space is provided by every PTZ node that supports relative Zoom, since it does not relate to a specific physical range. Instead, the corresponding absolute range should be defined as the full positive and negative translation range of the Zoom normalized to the range -1 to1, where a positive translation maps to a movement in TELE direction. The translation is signed to indicate direction (negative is to wide, positive is to tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension. This results in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> RelativeZoomTranslationSpace   0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The generic Pan/Tilt velocity space shall be provided by every PTZ node, since it does not relate to a specific physical range. Instead, the range should be defined as a range of the PTZ units speed normalized to the range -1 to 1, where a positive velocity would map to clockwise rotation or movement in the right/up direction. A signed speed can be independently specified for the pan and tilt component resulting in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space2DDescription* of length 0..unbounded.
    std::vector<tt__Space2DDescription*> ContinuousPanTiltVelocitySpace 0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The generic zoom velocity space specifies a zoom factor velocity without knowing the underlying physical model. The range should be normalized from -1 to 1, where a positive velocity would map to TELE direction. A generic zoom velocity space description resembles the following.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> ContinuousZoomVelocitySpace    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The speed space specifies the speed for a Pan/Tilt movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information. The speed of a combined Pan/Tilt movement is represented by a single non-negative scalar value.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> PanTiltSpeedSpace              0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The speed space specifies the speed for a Zoom movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> ZoomSpeedSpace                 0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZSpacesExtension.
    tt__PTZSpacesExtension*              Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpacesExtension is a complexType.
///
/// @note class tt__PTZSpacesExtension operations:
/// - tt__PTZSpacesExtension* soap_new_tt__PTZSpacesExtension(soap*) allocate and default initialize
/// - tt__PTZSpacesExtension* soap_new_tt__PTZSpacesExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZSpacesExtension* soap_new_req_tt__PTZSpacesExtension(soap*, ...) allocate, set required members
/// - tt__PTZSpacesExtension* soap_new_set_tt__PTZSpacesExtension(soap*, ...) allocate, set all public members
/// - tt__PTZSpacesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZSpacesExtension(soap*, tt__PTZSpacesExtension*) deserialize from a stream
/// - int soap_write_tt__PTZSpacesExtension(soap*, tt__PTZSpacesExtension*) serialize to a stream
/// - tt__PTZSpacesExtension* tt__PTZSpacesExtension::soap_dup(soap*) returns deep copy of tt__PTZSpacesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZSpacesExtension::soap_del() deep deletes tt__PTZSpacesExtension data members, use only after tt__PTZSpacesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZSpacesExtension::soap_type() returns SOAP_TYPE_tt__PTZSpacesExtension or derived type identifier
class tt__PTZSpacesExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Space2DDescription is a complexType.
///
/// @note class tt__Space2DDescription operations:
/// - tt__Space2DDescription* soap_new_tt__Space2DDescription(soap*) allocate and default initialize
/// - tt__Space2DDescription* soap_new_tt__Space2DDescription(soap*, int num) allocate and default initialize an array
/// - tt__Space2DDescription* soap_new_req_tt__Space2DDescription(soap*, ...) allocate, set required members
/// - tt__Space2DDescription* soap_new_set_tt__Space2DDescription(soap*, ...) allocate, set all public members
/// - tt__Space2DDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__Space2DDescription(soap*, tt__Space2DDescription*) deserialize from a stream
/// - int soap_write_tt__Space2DDescription(soap*, tt__Space2DDescription*) serialize to a stream
/// - tt__Space2DDescription* tt__Space2DDescription::soap_dup(soap*) returns deep copy of tt__Space2DDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Space2DDescription::soap_del() deep deletes tt__Space2DDescription data members, use only after tt__Space2DDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Space2DDescription::soap_type() returns SOAP_TYPE_tt__Space2DDescription or derived type identifier
class tt__Space2DDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A URI of coordinate systems.
/// </BLOCKQUOTE></PRE>
///
/// Element "URI" of type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of x-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "XRange" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      XRange                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of y-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "YRange" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YRange                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Space1DDescription is a complexType.
///
/// @note class tt__Space1DDescription operations:
/// - tt__Space1DDescription* soap_new_tt__Space1DDescription(soap*) allocate and default initialize
/// - tt__Space1DDescription* soap_new_tt__Space1DDescription(soap*, int num) allocate and default initialize an array
/// - tt__Space1DDescription* soap_new_req_tt__Space1DDescription(soap*, ...) allocate, set required members
/// - tt__Space1DDescription* soap_new_set_tt__Space1DDescription(soap*, ...) allocate, set all public members
/// - tt__Space1DDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__Space1DDescription(soap*, tt__Space1DDescription*) deserialize from a stream
/// - int soap_write_tt__Space1DDescription(soap*, tt__Space1DDescription*) serialize to a stream
/// - tt__Space1DDescription* tt__Space1DDescription::soap_dup(soap*) returns deep copy of tt__Space1DDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Space1DDescription::soap_del() deep deletes tt__Space1DDescription data members, use only after tt__Space1DDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Space1DDescription::soap_type() returns SOAP_TYPE_tt__Space1DDescription or derived type identifier
class tt__Space1DDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A URI of coordinate systems.
/// </BLOCKQUOTE></PRE>
///
/// Element "URI" of type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of x-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "XRange" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      XRange                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpeed is a complexType.
///
/// @note class tt__PTZSpeed operations:
/// - tt__PTZSpeed* soap_new_tt__PTZSpeed(soap*) allocate and default initialize
/// - tt__PTZSpeed* soap_new_tt__PTZSpeed(soap*, int num) allocate and default initialize an array
/// - tt__PTZSpeed* soap_new_req_tt__PTZSpeed(soap*, ...) allocate, set required members
/// - tt__PTZSpeed* soap_new_set_tt__PTZSpeed(soap*, ...) allocate, set all public members
/// - tt__PTZSpeed::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZSpeed(soap*, tt__PTZSpeed*) deserialize from a stream
/// - int soap_write_tt__PTZSpeed(soap*, tt__PTZSpeed*) serialize to a stream
/// - tt__PTZSpeed* tt__PTZSpeed::soap_dup(soap*) returns deep copy of tt__PTZSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZSpeed::soap_del() deep deletes tt__PTZSpeed data members, use only after tt__PTZSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZSpeed::soap_type() returns SOAP_TYPE_tt__PTZSpeed or derived type identifier
class tt__PTZSpeed : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Pan and tilt speed. The x component corresponds to pan and the y component to tilt. If omitted in a request, the current (if any) PanTilt movement should not be affected.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTilt" of type "http://www.onvif.org/ver10/schema":Vector2D.
    tt__Vector2D*                        PanTilt                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A zoom speed. If omitted in a request, the current (if any) Zoom movement should not be affected.
/// </BLOCKQUOTE></PRE>
///
/// Element "Zoom" of type "http://www.onvif.org/ver10/schema":Vector1D.
    tt__Vector1D*                        Zoom                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPreset is a complexType.
///
/// @note class tt__PTZPreset operations:
/// - tt__PTZPreset* soap_new_tt__PTZPreset(soap*) allocate and default initialize
/// - tt__PTZPreset* soap_new_tt__PTZPreset(soap*, int num) allocate and default initialize an array
/// - tt__PTZPreset* soap_new_req_tt__PTZPreset(soap*, ...) allocate, set required members
/// - tt__PTZPreset* soap_new_set_tt__PTZPreset(soap*, ...) allocate, set all public members
/// - tt__PTZPreset::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPreset(soap*, tt__PTZPreset*) deserialize from a stream
/// - int soap_write_tt__PTZPreset(soap*, tt__PTZPreset*) serialize to a stream
/// - tt__PTZPreset* tt__PTZPreset::soap_dup(soap*) returns deep copy of tt__PTZPreset, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPreset::soap_del() deep deletes tt__PTZPreset data members, use only after tt__PTZPreset::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPreset::soap_type() returns SOAP_TYPE_tt__PTZPreset or derived type identifier
class tt__PTZPreset : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of preset position name.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name*                            Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A list of preset position.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZPosition" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       PTZPosition                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken*                  token                          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PresetTour is a complexType.
///
/// @note class tt__PresetTour operations:
/// - tt__PresetTour* soap_new_tt__PresetTour(soap*) allocate and default initialize
/// - tt__PresetTour* soap_new_tt__PresetTour(soap*, int num) allocate and default initialize an array
/// - tt__PresetTour* soap_new_req_tt__PresetTour(soap*, ...) allocate, set required members
/// - tt__PresetTour* soap_new_set_tt__PresetTour(soap*, ...) allocate, set all public members
/// - tt__PresetTour::soap_default(soap*) default initialize members
/// - int soap_read_tt__PresetTour(soap*, tt__PresetTour*) deserialize from a stream
/// - int soap_write_tt__PresetTour(soap*, tt__PresetTour*) serialize to a stream
/// - tt__PresetTour* tt__PresetTour::soap_dup(soap*) returns deep copy of tt__PresetTour, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PresetTour::soap_del() deep deletes tt__PresetTour data members, use only after tt__PresetTour::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PresetTour::soap_type() returns SOAP_TYPE_tt__PresetTour or derived type identifier
class tt__PresetTour : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Readable name of the preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name*                            Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Read only parameters to indicate the status of the preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Element "Status" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStatus.
    tt__PTZPresetTourStatus*             Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Auto Start flag of the preset tour. True allows the preset tour to be activated always.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoStart" of type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameters to specify the detail behavior of the preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Element "StartingCondition" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingCondition.
    tt__PTZPresetTourStartingCondition*  StartingCondition              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A list of detail of touring spots including preset positions.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PTZPresetTourSpot* of length 0..unbounded.
    std::vector<tt__PTZPresetTourSpot* > TourSpot                       0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourExtension.
    tt__PTZPresetTourExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of this preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken*                  token                          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourExtension is a complexType.
///
/// @note class tt__PTZPresetTourExtension operations:
/// - tt__PTZPresetTourExtension* soap_new_tt__PTZPresetTourExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourExtension* soap_new_tt__PTZPresetTourExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourExtension* soap_new_req_tt__PTZPresetTourExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourExtension* soap_new_set_tt__PTZPresetTourExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourExtension(soap*, tt__PTZPresetTourExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourExtension(soap*, tt__PTZPresetTourExtension*) serialize to a stream
/// - tt__PTZPresetTourExtension* tt__PTZPresetTourExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourExtension::soap_del() deep deletes tt__PTZPresetTourExtension data members, use only after tt__PTZPresetTourExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourExtension or derived type identifier
class tt__PTZPresetTourExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpot is a complexType.
///
/// @note class tt__PTZPresetTourSpot operations:
/// - tt__PTZPresetTourSpot* soap_new_tt__PTZPresetTourSpot(soap*) allocate and default initialize
/// - tt__PTZPresetTourSpot* soap_new_tt__PTZPresetTourSpot(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSpot* soap_new_req_tt__PTZPresetTourSpot(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSpot* soap_new_set_tt__PTZPresetTourSpot(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSpot::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSpot(soap*, tt__PTZPresetTourSpot*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpot(soap*, tt__PTZPresetTourSpot*) serialize to a stream
/// - tt__PTZPresetTourSpot* tt__PTZPresetTourSpot::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSpot, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSpot::soap_del() deep deletes tt__PTZPresetTourSpot data members, use only after tt__PTZPresetTourSpot::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSpot::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSpot or derived type identifier
class tt__PTZPresetTourSpot : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Detail definition of preset position of the tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "PresetDetail" of type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetail.
    tt__PTZPresetTourPresetDetail*       PresetDetail                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify Pan/Tilt and Zoom speed on moving toward this tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    tt__PTZSpeed*                        Speed                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify time duration of staying on this tour sport.
/// </BLOCKQUOTE></PRE>
///
/// Element "StayTime" of type xs:duration.
    xsd__duration*                       StayTime                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSpotExtension.
    tt__PTZPresetTourSpotExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpotExtension is a complexType.
///
/// @note class tt__PTZPresetTourSpotExtension operations:
/// - tt__PTZPresetTourSpotExtension* soap_new_tt__PTZPresetTourSpotExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourSpotExtension* soap_new_tt__PTZPresetTourSpotExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSpotExtension* soap_new_req_tt__PTZPresetTourSpotExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSpotExtension* soap_new_set_tt__PTZPresetTourSpotExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSpotExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSpotExtension(soap*, tt__PTZPresetTourSpotExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpotExtension(soap*, tt__PTZPresetTourSpotExtension*) serialize to a stream
/// - tt__PTZPresetTourSpotExtension* tt__PTZPresetTourSpotExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSpotExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSpotExtension::soap_del() deep deletes tt__PTZPresetTourSpotExtension data members, use only after tt__PTZPresetTourSpotExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSpotExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSpotExtension or derived type identifier
class tt__PTZPresetTourSpotExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetail is a complexType.
///
/// @note class tt__PTZPresetTourPresetDetail operations:
/// - tt__PTZPresetTourPresetDetail* soap_new_tt__PTZPresetTourPresetDetail(soap*) allocate and default initialize
/// - tt__PTZPresetTourPresetDetail* soap_new_tt__PTZPresetTourPresetDetail(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourPresetDetail* soap_new_req_tt__PTZPresetTourPresetDetail(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourPresetDetail* soap_new_set_tt__PTZPresetTourPresetDetail(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourPresetDetail::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourPresetDetail(soap*, tt__PTZPresetTourPresetDetail*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetail(soap*, tt__PTZPresetTourPresetDetail*) serialize to a stream
/// - tt__PTZPresetTourPresetDetail* tt__PTZPresetTourPresetDetail::soap_dup(soap*) returns deep copy of tt__PTZPresetTourPresetDetail, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourPresetDetail::soap_del() deep deletes tt__PTZPresetTourPresetDetail data members, use only after tt__PTZPresetTourPresetDetail::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourPresetDetail::soap_type() returns SOAP_TYPE_tt__PTZPresetTourPresetDetail or derived type identifier
class tt__PTZPresetTourPresetDetail : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_PTZPresetTourPresetDetail;	///< Union _tt__union_PTZPresetTourPresetDetail selector: set to SOAP_UNION__tt__union_PTZPresetTourPresetDetail_<fieldname>
    union _tt__union_PTZPresetTourPresetDetail
    {
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with Preset Token defined in advance.
/// </BLOCKQUOTE></PRE>
///
/// Element "PresetToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  PresetToken                   ;	///< Choice of element (one of multiple choices).
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with the home position of this PTZ Node. "False" to this parameter shall be treated as an invalid argument.
/// </BLOCKQUOTE></PRE>
///
/// Element "Home" of type xs:boolean.
    bool                                 Home                          ;	///< Choice of element (one of multiple choices).
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with vector of PTZ node directly.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZPosition" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       PTZPosition                   ;	///< Choice of element (one of multiple choices).
/// Element "TypeExtension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourTypeExtension.
    tt__PTZPresetTourTypeExtension*      TypeExtension                 ;	///< Choice of element (one of multiple choices).
    }                                    union_PTZPresetTourPresetDetail;
//  END OF CHOICE
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourTypeExtension is a complexType.
///
/// @note class tt__PTZPresetTourTypeExtension operations:
/// - tt__PTZPresetTourTypeExtension* soap_new_tt__PTZPresetTourTypeExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourTypeExtension* soap_new_tt__PTZPresetTourTypeExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourTypeExtension* soap_new_req_tt__PTZPresetTourTypeExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourTypeExtension* soap_new_set_tt__PTZPresetTourTypeExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourTypeExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourTypeExtension(soap*, tt__PTZPresetTourTypeExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourTypeExtension(soap*, tt__PTZPresetTourTypeExtension*) serialize to a stream
/// - tt__PTZPresetTourTypeExtension* tt__PTZPresetTourTypeExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourTypeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourTypeExtension::soap_del() deep deletes tt__PTZPresetTourTypeExtension data members, use only after tt__PTZPresetTourTypeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourTypeExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourTypeExtension or derived type identifier
class tt__PTZPresetTourTypeExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStatus is a complexType.
///
/// @note class tt__PTZPresetTourStatus operations:
/// - tt__PTZPresetTourStatus* soap_new_tt__PTZPresetTourStatus(soap*) allocate and default initialize
/// - tt__PTZPresetTourStatus* soap_new_tt__PTZPresetTourStatus(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStatus* soap_new_req_tt__PTZPresetTourStatus(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStatus* soap_new_set_tt__PTZPresetTourStatus(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStatus(soap*, tt__PTZPresetTourStatus*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStatus(soap*, tt__PTZPresetTourStatus*) serialize to a stream
/// - tt__PTZPresetTourStatus* tt__PTZPresetTourStatus::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStatus::soap_del() deep deletes tt__PTZPresetTourStatus data members, use only after tt__PTZPresetTourStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStatus::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStatus or derived type identifier
class tt__PTZPresetTourStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates state of this preset tour by Idle/Touring/Paused.
/// </BLOCKQUOTE></PRE>
///
/// Element "State" of type "http://www.onvif.org/ver10/schema":PTZPresetTourState.
    tt__PTZPresetTourState               State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates a tour spot currently staying.
/// </BLOCKQUOTE></PRE>
///
/// Element "CurrentTourSpot" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSpot.
    tt__PTZPresetTourSpot*               CurrentTourSpot                0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStatusExtension.
    tt__PTZPresetTourStatusExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStatusExtension is a complexType.
///
/// @note class tt__PTZPresetTourStatusExtension operations:
/// - tt__PTZPresetTourStatusExtension* soap_new_tt__PTZPresetTourStatusExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourStatusExtension* soap_new_tt__PTZPresetTourStatusExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStatusExtension* soap_new_req_tt__PTZPresetTourStatusExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStatusExtension* soap_new_set_tt__PTZPresetTourStatusExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStatusExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStatusExtension(soap*, tt__PTZPresetTourStatusExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStatusExtension(soap*, tt__PTZPresetTourStatusExtension*) serialize to a stream
/// - tt__PTZPresetTourStatusExtension* tt__PTZPresetTourStatusExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStatusExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStatusExtension::soap_del() deep deletes tt__PTZPresetTourStatusExtension data members, use only after tt__PTZPresetTourStatusExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStatusExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStatusExtension or derived type identifier
class tt__PTZPresetTourStatusExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingCondition is a complexType.
///
/// @note class tt__PTZPresetTourStartingCondition operations:
/// - tt__PTZPresetTourStartingCondition* soap_new_tt__PTZPresetTourStartingCondition(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingCondition* soap_new_tt__PTZPresetTourStartingCondition(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingCondition* soap_new_req_tt__PTZPresetTourStartingCondition(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingCondition* soap_new_set_tt__PTZPresetTourStartingCondition(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingCondition::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingCondition(soap*, tt__PTZPresetTourStartingCondition*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingCondition(soap*, tt__PTZPresetTourStartingCondition*) serialize to a stream
/// - tt__PTZPresetTourStartingCondition* tt__PTZPresetTourStartingCondition::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingCondition::soap_del() deep deletes tt__PTZPresetTourStartingCondition data members, use only after tt__PTZPresetTourStartingCondition::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingCondition::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingCondition or derived type identifier
class tt__PTZPresetTourStartingCondition : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify how many times the preset tour is recurred.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringTime" of type xs:int.
    int*                                 RecurringTime                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify how long time duration the preset tour is recurred.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringDuration" of type xs:duration.
    xsd__duration*                       RecurringDuration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to choose which direction the preset tour goes. Forward shall be chosen in case it is omitted.
/// </BLOCKQUOTE></PRE>
///
/// Element "Direction" of type "http://www.onvif.org/ver10/schema":PTZPresetTourDirection.
    tt__PTZPresetTourDirection*          Direction                      0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionExtension.
    tt__PTZPresetTourStartingConditionExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Execute presets in random order. If set to true and Direction is also present, Direction will be ignored and presets of the Tour will be recalled randomly.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RandomPresetOrder" of type xs:boolean.
  @ bool*                                RandomPresetOrder              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionExtension is a complexType.
///
/// @note class tt__PTZPresetTourStartingConditionExtension operations:
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_tt__PTZPresetTourStartingConditionExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_tt__PTZPresetTourStartingConditionExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_req_tt__PTZPresetTourStartingConditionExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_set_tt__PTZPresetTourStartingConditionExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingConditionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingConditionExtension(soap*, tt__PTZPresetTourStartingConditionExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionExtension(soap*, tt__PTZPresetTourStartingConditionExtension*) serialize to a stream
/// - tt__PTZPresetTourStartingConditionExtension* tt__PTZPresetTourStartingConditionExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingConditionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingConditionExtension::soap_del() deep deletes tt__PTZPresetTourStartingConditionExtension data members, use only after tt__PTZPresetTourStartingConditionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingConditionExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension or derived type identifier
class tt__PTZPresetTourStartingConditionExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourOptions is a complexType.
///
/// @note class tt__PTZPresetTourOptions operations:
/// - tt__PTZPresetTourOptions* soap_new_tt__PTZPresetTourOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourOptions* soap_new_tt__PTZPresetTourOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourOptions* soap_new_req_tt__PTZPresetTourOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourOptions* soap_new_set_tt__PTZPresetTourOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourOptions(soap*, tt__PTZPresetTourOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourOptions(soap*, tt__PTZPresetTourOptions*) serialize to a stream
/// - tt__PTZPresetTourOptions* tt__PTZPresetTourOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourOptions::soap_del() deep deletes tt__PTZPresetTourOptions data members, use only after tt__PTZPresetTourOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourOptions or derived type identifier
class tt__PTZPresetTourOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not the AutoStart is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoStart" of type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Preset Tour Starting Condition.
/// </BLOCKQUOTE></PRE>
///
/// Element "StartingCondition" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptions.
    tt__PTZPresetTourStartingConditionOptions*  StartingCondition              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Preset Tour Spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "TourSpot" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSpotOptions.
    tt__PTZPresetTourSpotOptions*        TourSpot                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpotOptions is a complexType.
///
/// @note class tt__PTZPresetTourSpotOptions operations:
/// - tt__PTZPresetTourSpotOptions* soap_new_tt__PTZPresetTourSpotOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourSpotOptions* soap_new_tt__PTZPresetTourSpotOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSpotOptions* soap_new_req_tt__PTZPresetTourSpotOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSpotOptions* soap_new_set_tt__PTZPresetTourSpotOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSpotOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSpotOptions(soap*, tt__PTZPresetTourSpotOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpotOptions(soap*, tt__PTZPresetTourSpotOptions*) serialize to a stream
/// - tt__PTZPresetTourSpotOptions* tt__PTZPresetTourSpotOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSpotOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSpotOptions::soap_del() deep deletes tt__PTZPresetTourSpotOptions data members, use only after tt__PTZPresetTourSpotOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSpotOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSpotOptions or derived type identifier
class tt__PTZPresetTourSpotOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for detail definition of preset position of the tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "PresetDetail" of type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptions.
    tt__PTZPresetTourPresetDetailOptions*  PresetDetail                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported range of stay time for a tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "StayTime" of type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   StayTime                       1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptions is a complexType.
///
/// @note class tt__PTZPresetTourPresetDetailOptions operations:
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_tt__PTZPresetTourPresetDetailOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_tt__PTZPresetTourPresetDetailOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_req_tt__PTZPresetTourPresetDetailOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_set_tt__PTZPresetTourPresetDetailOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourPresetDetailOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourPresetDetailOptions(soap*, tt__PTZPresetTourPresetDetailOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetailOptions(soap*, tt__PTZPresetTourPresetDetailOptions*) serialize to a stream
/// - tt__PTZPresetTourPresetDetailOptions* tt__PTZPresetTourPresetDetailOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourPresetDetailOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourPresetDetailOptions::soap_del() deep deletes tt__PTZPresetTourPresetDetailOptions data members, use only after tt__PTZPresetTourPresetDetailOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourPresetDetailOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions or derived type identifier
class tt__PTZPresetTourPresetDetailOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of available Preset Tokens for tour spots.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ReferenceToken of length 0..unbounded.
    std::vector<tt__ReferenceToken     > PresetToken                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   An option to indicate Home postion for tour spots.
/// </BLOCKQUOTE></PRE>
///
/// Element "Home" of type xs:boolean.
    bool*                                Home                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Pan and Tilt for tour spots.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTiltPositionSpace" of type "http://www.onvif.org/ver10/schema":Space2DDescription.
    tt__Space2DDescription*              PanTiltPositionSpace           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Zoom for a tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZoomPositionSpace" of type "http://www.onvif.org/ver10/schema":Space1DDescription.
    tt__Space1DDescription*              ZoomPositionSpace              0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptionsExtension.
    tt__PTZPresetTourPresetDetailOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptionsExtension is a complexType.
///
/// @note class tt__PTZPresetTourPresetDetailOptionsExtension operations:
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourPresetDetailOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, tt__PTZPresetTourPresetDetailOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, tt__PTZPresetTourPresetDetailOptionsExtension*) serialize to a stream
/// - tt__PTZPresetTourPresetDetailOptionsExtension* tt__PTZPresetTourPresetDetailOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourPresetDetailOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourPresetDetailOptionsExtension::soap_del() deep deletes tt__PTZPresetTourPresetDetailOptionsExtension data members, use only after tt__PTZPresetTourPresetDetailOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourPresetDetailOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension or derived type identifier
class tt__PTZPresetTourPresetDetailOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptions is a complexType.
///
/// @note class tt__PTZPresetTourStartingConditionOptions operations:
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_tt__PTZPresetTourStartingConditionOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_tt__PTZPresetTourStartingConditionOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_req_tt__PTZPresetTourStartingConditionOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_set_tt__PTZPresetTourStartingConditionOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingConditionOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingConditionOptions(soap*, tt__PTZPresetTourStartingConditionOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionOptions(soap*, tt__PTZPresetTourStartingConditionOptions*) serialize to a stream
/// - tt__PTZPresetTourStartingConditionOptions* tt__PTZPresetTourStartingConditionOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingConditionOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingConditionOptions::soap_del() deep deletes tt__PTZPresetTourStartingConditionOptions data members, use only after tt__PTZPresetTourStartingConditionOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingConditionOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions or derived type identifier
class tt__PTZPresetTourStartingConditionOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported range of Recurring Time.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringTime" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        RecurringTime                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Recurring Duration.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringDuration" of type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   RecurringDuration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Direction of Preset Tour.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PTZPresetTourDirection of length 0..unbounded.
    std::vector<tt__PTZPresetTourDirection> Direction                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptionsExtension.
    tt__PTZPresetTourStartingConditionOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptionsExtension is a complexType.
///
/// @note class tt__PTZPresetTourStartingConditionOptionsExtension operations:
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingConditionOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, tt__PTZPresetTourStartingConditionOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, tt__PTZPresetTourStartingConditionOptionsExtension*) serialize to a stream
/// - tt__PTZPresetTourStartingConditionOptionsExtension* tt__PTZPresetTourStartingConditionOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingConditionOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingConditionOptionsExtension::soap_del() deep deletes tt__PTZPresetTourStartingConditionOptionsExtension data members, use only after tt__PTZPresetTourStartingConditionOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingConditionOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension or derived type identifier
class tt__PTZPresetTourStartingConditionOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingStatus is a complexType.
///
/// @note class tt__ImagingStatus operations:
/// - tt__ImagingStatus* soap_new_tt__ImagingStatus(soap*) allocate and default initialize
/// - tt__ImagingStatus* soap_new_tt__ImagingStatus(soap*, int num) allocate and default initialize an array
/// - tt__ImagingStatus* soap_new_req_tt__ImagingStatus(soap*, ...) allocate, set required members
/// - tt__ImagingStatus* soap_new_set_tt__ImagingStatus(soap*, ...) allocate, set all public members
/// - tt__ImagingStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingStatus(soap*, tt__ImagingStatus*) deserialize from a stream
/// - int soap_write_tt__ImagingStatus(soap*, tt__ImagingStatus*) serialize to a stream
/// - tt__ImagingStatus* tt__ImagingStatus::soap_dup(soap*) returns deep copy of tt__ImagingStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingStatus::soap_del() deep deletes tt__ImagingStatus data members, use only after tt__ImagingStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingStatus::soap_type() returns SOAP_TYPE_tt__ImagingStatus or derived type identifier
class tt__ImagingStatus : public xsd__anyType
{ public:
/// Element "FocusStatus" of type "http://www.onvif.org/ver10/schema":FocusStatus.
    tt__FocusStatus*                     FocusStatus                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusStatus is a complexType.
///
/// @note class tt__FocusStatus operations:
/// - tt__FocusStatus* soap_new_tt__FocusStatus(soap*) allocate and default initialize
/// - tt__FocusStatus* soap_new_tt__FocusStatus(soap*, int num) allocate and default initialize an array
/// - tt__FocusStatus* soap_new_req_tt__FocusStatus(soap*, ...) allocate, set required members
/// - tt__FocusStatus* soap_new_set_tt__FocusStatus(soap*, ...) allocate, set all public members
/// - tt__FocusStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusStatus(soap*, tt__FocusStatus*) deserialize from a stream
/// - int soap_write_tt__FocusStatus(soap*, tt__FocusStatus*) serialize to a stream
/// - tt__FocusStatus* tt__FocusStatus::soap_dup(soap*) returns deep copy of tt__FocusStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusStatus::soap_del() deep deletes tt__FocusStatus data members, use only after tt__FocusStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusStatus::soap_type() returns SOAP_TYPE_tt__FocusStatus or derived type identifier
class tt__FocusStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of focus position.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type xs:float.
    float                                Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Status of focus MoveStatus.
/// </BLOCKQUOTE></PRE>
///
/// Element "MoveStatus" of type "http://www.onvif.org/ver10/schema":MoveStatus.
    tt__MoveStatus                       MoveStatus                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Error status of focus.
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type xs:string.
    std::string                          Error                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration is a complexType.
///
/// @note class tt__FocusConfiguration operations:
/// - tt__FocusConfiguration* soap_new_tt__FocusConfiguration(soap*) allocate and default initialize
/// - tt__FocusConfiguration* soap_new_tt__FocusConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__FocusConfiguration* soap_new_req_tt__FocusConfiguration(soap*, ...) allocate, set required members
/// - tt__FocusConfiguration* soap_new_set_tt__FocusConfiguration(soap*, ...) allocate, set all public members
/// - tt__FocusConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusConfiguration(soap*, tt__FocusConfiguration*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration(soap*, tt__FocusConfiguration*) serialize to a stream
/// - tt__FocusConfiguration* tt__FocusConfiguration::soap_dup(soap*) returns deep copy of tt__FocusConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusConfiguration::soap_del() deep deletes tt__FocusConfiguration data members, use only after tt__FocusConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusConfiguration::soap_type() returns SOAP_TYPE_tt__FocusConfiguration or derived type identifier
class tt__FocusConfiguration : public xsd__anyType
{ public:
/// Element "AutoFocusMode" of type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    tt__AutoFocusMode                    AutoFocusMode                  1;	///< Required element.
/// Element "DefaultSpeed" of type xs:float.
    float                                DefaultSpeed                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus near limit (unit: meter).
/// </BLOCKQUOTE></PRE>
///
/// Element "NearLimit" of type xs:float.
    float                                NearLimit                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus far limit (unit: meter).
///   If set to 0.0, infinity will be used.
/// </BLOCKQUOTE></PRE>
///
/// Element "FarLimit" of type xs:float.
    float                                FarLimit                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettings is a complexType.
///
/// @note class tt__ImagingSettings operations:
/// - tt__ImagingSettings* soap_new_tt__ImagingSettings(soap*) allocate and default initialize
/// - tt__ImagingSettings* soap_new_tt__ImagingSettings(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettings* soap_new_req_tt__ImagingSettings(soap*, ...) allocate, set required members
/// - tt__ImagingSettings* soap_new_set_tt__ImagingSettings(soap*, ...) allocate, set all public members
/// - tt__ImagingSettings::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettings(soap*, tt__ImagingSettings*) deserialize from a stream
/// - int soap_write_tt__ImagingSettings(soap*, tt__ImagingSettings*) serialize to a stream
/// - tt__ImagingSettings* tt__ImagingSettings::soap_dup(soap*) returns deep copy of tt__ImagingSettings, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettings::soap_del() deep deletes tt__ImagingSettings data members, use only after tt__ImagingSettings::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettings::soap_type() returns SOAP_TYPE_tt__ImagingSettings or derived type identifier
class tt__ImagingSettings : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Enabled/disabled BLC mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "BacklightCompensation" of type "http://www.onvif.org/ver10/schema":BacklightCompensation.
    tt__BacklightCompensation*           BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image brightness (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Brightness" of type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Color saturation of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "ColorSaturation" of type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contrast of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Contrast" of type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Exposure mode of the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Exposure" of type "http://www.onvif.org/ver10/schema":Exposure.
    tt__Exposure*                        Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Focus configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Focus" of type "http://www.onvif.org/ver10/schema":FocusConfiguration.
    tt__FocusConfiguration*              Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Infrared Cutoff Filter settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "IrCutFilter" of type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    tt__IrCutFilterMode*                 IrCutFilter                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sharpness of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Sharpness" of type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   WDR settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WideDynamicRange" of type "http://www.onvif.org/ver10/schema":WideDynamicRange.
    tt__WideDynamicRange*                WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   White balance settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WhiteBalance" of type "http://www.onvif.org/ver10/schema":WhiteBalance.
    tt__WhiteBalance*                    WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension.
    tt__ImagingSettingsExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension is a complexType.
///
/// @note class tt__ImagingSettingsExtension operations:
/// - tt__ImagingSettingsExtension* soap_new_tt__ImagingSettingsExtension(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension* soap_new_tt__ImagingSettingsExtension(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension* soap_new_req_tt__ImagingSettingsExtension(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension* soap_new_set_tt__ImagingSettingsExtension(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension(soap*, tt__ImagingSettingsExtension*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension(soap*, tt__ImagingSettingsExtension*) serialize to a stream
/// - tt__ImagingSettingsExtension* tt__ImagingSettingsExtension::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension::soap_del() deep deletes tt__ImagingSettingsExtension data members, use only after tt__ImagingSettingsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension or derived type identifier
class tt__ImagingSettingsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Exposure is a complexType.
///
/// @note class tt__Exposure operations:
/// - tt__Exposure* soap_new_tt__Exposure(soap*) allocate and default initialize
/// - tt__Exposure* soap_new_tt__Exposure(soap*, int num) allocate and default initialize an array
/// - tt__Exposure* soap_new_req_tt__Exposure(soap*, ...) allocate, set required members
/// - tt__Exposure* soap_new_set_tt__Exposure(soap*, ...) allocate, set all public members
/// - tt__Exposure::soap_default(soap*) default initialize members
/// - int soap_read_tt__Exposure(soap*, tt__Exposure*) deserialize from a stream
/// - int soap_write_tt__Exposure(soap*, tt__Exposure*) serialize to a stream
/// - tt__Exposure* tt__Exposure::soap_dup(soap*) returns deep copy of tt__Exposure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Exposure::soap_del() deep deletes tt__Exposure data members, use only after tt__Exposure::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Exposure::soap_type() returns SOAP_TYPE_tt__Exposure or derived type identifier
class tt__Exposure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the NVT.</li>
///   <li>Manual Disabled exposure algorithm on the NVT.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ExposureMode.
    tt__ExposureMode                     Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
///
/// Element "Priority" of type "http://www.onvif.org/ver10/schema":ExposurePriority.
    tt__ExposurePriority                 Priority                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rectangular exposure mask.
/// </BLOCKQUOTE></PRE>
///
/// Element "Window" of type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Window                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinExposureTime" of type xs:float.
    float                                MinExposureTime                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxExposureTime" of type xs:float.
    float                                MaxExposureTime                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinGain" of type xs:float.
    float                                MinGain                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxGain" of type xs:float.
    float                                MaxGain                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinIris" of type xs:float.
    float                                MinIris                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxIris" of type xs:float.
    float                                MaxIris                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed exposure time used by the image sensor (s).
/// </BLOCKQUOTE></PRE>
///
/// Element "ExposureTime" of type xs:float.
    float                                ExposureTime                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed gain used by the image sensor (dB).
/// </BLOCKQUOTE></PRE>
///
/// Element "Gain" of type xs:float.
    float                                Gain                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
/// </BLOCKQUOTE></PRE>
///
/// Element "Iris" of type xs:float.
    float                                Iris                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRange is a complexType.
///
/// @note class tt__WideDynamicRange operations:
/// - tt__WideDynamicRange* soap_new_tt__WideDynamicRange(soap*) allocate and default initialize
/// - tt__WideDynamicRange* soap_new_tt__WideDynamicRange(soap*, int num) allocate and default initialize an array
/// - tt__WideDynamicRange* soap_new_req_tt__WideDynamicRange(soap*, ...) allocate, set required members
/// - tt__WideDynamicRange* soap_new_set_tt__WideDynamicRange(soap*, ...) allocate, set all public members
/// - tt__WideDynamicRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__WideDynamicRange(soap*, tt__WideDynamicRange*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRange(soap*, tt__WideDynamicRange*) serialize to a stream
/// - tt__WideDynamicRange* tt__WideDynamicRange::soap_dup(soap*) returns deep copy of tt__WideDynamicRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WideDynamicRange::soap_del() deep deletes tt__WideDynamicRange data members, use only after tt__WideDynamicRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WideDynamicRange::soap_type() returns SOAP_TYPE_tt__WideDynamicRange or derived type identifier
class tt__WideDynamicRange : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   White dynamic range (on/off)
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    tt__WideDynamicMode                  Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unitless)
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float                                Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensation is a complexType.
///
/// @note class tt__BacklightCompensation operations:
/// - tt__BacklightCompensation* soap_new_tt__BacklightCompensation(soap*) allocate and default initialize
/// - tt__BacklightCompensation* soap_new_tt__BacklightCompensation(soap*, int num) allocate and default initialize an array
/// - tt__BacklightCompensation* soap_new_req_tt__BacklightCompensation(soap*, ...) allocate, set required members
/// - tt__BacklightCompensation* soap_new_set_tt__BacklightCompensation(soap*, ...) allocate, set all public members
/// - tt__BacklightCompensation::soap_default(soap*) default initialize members
/// - int soap_read_tt__BacklightCompensation(soap*, tt__BacklightCompensation*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensation(soap*, tt__BacklightCompensation*) serialize to a stream
/// - tt__BacklightCompensation* tt__BacklightCompensation::soap_dup(soap*) returns deep copy of tt__BacklightCompensation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BacklightCompensation::soap_del() deep deletes tt__BacklightCompensation data members, use only after tt__BacklightCompensation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BacklightCompensation::soap_type() returns SOAP_TYPE_tt__BacklightCompensation or derived type identifier
class tt__BacklightCompensation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Backlight compensation mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    tt__BacklightCompensationMode        Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float                                Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions is a complexType.
///
/// @note class tt__ImagingOptions operations:
/// - tt__ImagingOptions* soap_new_tt__ImagingOptions(soap*) allocate and default initialize
/// - tt__ImagingOptions* soap_new_tt__ImagingOptions(soap*, int num) allocate and default initialize an array
/// - tt__ImagingOptions* soap_new_req_tt__ImagingOptions(soap*, ...) allocate, set required members
/// - tt__ImagingOptions* soap_new_set_tt__ImagingOptions(soap*, ...) allocate, set all public members
/// - tt__ImagingOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingOptions(soap*, tt__ImagingOptions*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions(soap*, tt__ImagingOptions*) serialize to a stream
/// - tt__ImagingOptions* tt__ImagingOptions::soap_dup(soap*) returns deep copy of tt__ImagingOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingOptions::soap_del() deep deletes tt__ImagingOptions data members, use only after tt__ImagingOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingOptions::soap_type() returns SOAP_TYPE_tt__ImagingOptions or derived type identifier
class tt__ImagingOptions : public xsd__anyType
{ public:
/// Element "BacklightCompensation" of type "http://www.onvif.org/ver10/schema":BacklightCompensationOptions.
    tt__BacklightCompensationOptions*    BacklightCompensation          1;	///< Required element.
/// Element "Brightness" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Brightness                     1;	///< Required element.
/// Element "ColorSaturation" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ColorSaturation                1;	///< Required element.
/// Element "Contrast" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Contrast                       1;	///< Required element.
/// Element "Exposure" of type "http://www.onvif.org/ver10/schema":ExposureOptions.
    tt__ExposureOptions*                 Exposure                       1;	///< Required element.
/// Element "Focus" of type "http://www.onvif.org/ver10/schema":FocusOptions.
    tt__FocusOptions*                    Focus                          1;	///< Required element.
/// Vector of tt__IrCutFilterMode of length 1..unbounded.
    std::vector<tt__IrCutFilterMode    > IrCutFilterModes               1;	///< Multiple elements.
/// Element "Sharpness" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Sharpness                      1;	///< Required element.
/// Element "WideDynamicRange" of type "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions.
    tt__WideDynamicRangeOptions*         WideDynamicRange               1;	///< Required element.
/// Element "WhiteBalance" of type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions.
    tt__WhiteBalanceOptions*             WhiteBalance                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions is a complexType.
///
/// @note class tt__WideDynamicRangeOptions operations:
/// - tt__WideDynamicRangeOptions* soap_new_tt__WideDynamicRangeOptions(soap*) allocate and default initialize
/// - tt__WideDynamicRangeOptions* soap_new_tt__WideDynamicRangeOptions(soap*, int num) allocate and default initialize an array
/// - tt__WideDynamicRangeOptions* soap_new_req_tt__WideDynamicRangeOptions(soap*, ...) allocate, set required members
/// - tt__WideDynamicRangeOptions* soap_new_set_tt__WideDynamicRangeOptions(soap*, ...) allocate, set all public members
/// - tt__WideDynamicRangeOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__WideDynamicRangeOptions(soap*, tt__WideDynamicRangeOptions*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRangeOptions(soap*, tt__WideDynamicRangeOptions*) serialize to a stream
/// - tt__WideDynamicRangeOptions* tt__WideDynamicRangeOptions::soap_dup(soap*) returns deep copy of tt__WideDynamicRangeOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WideDynamicRangeOptions::soap_del() deep deletes tt__WideDynamicRangeOptions data members, use only after tt__WideDynamicRangeOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WideDynamicRangeOptions::soap_type() returns SOAP_TYPE_tt__WideDynamicRangeOptions or derived type identifier
class tt__WideDynamicRangeOptions : public xsd__anyType
{ public:
/// Vector of tt__WideDynamicMode of length 1..unbounded.
    std::vector<tt__WideDynamicMode    > Mode                           1;	///< Multiple elements.
/// Element "Level" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensationOptions is a complexType.
///
/// @note class tt__BacklightCompensationOptions operations:
/// - tt__BacklightCompensationOptions* soap_new_tt__BacklightCompensationOptions(soap*) allocate and default initialize
/// - tt__BacklightCompensationOptions* soap_new_tt__BacklightCompensationOptions(soap*, int num) allocate and default initialize an array
/// - tt__BacklightCompensationOptions* soap_new_req_tt__BacklightCompensationOptions(soap*, ...) allocate, set required members
/// - tt__BacklightCompensationOptions* soap_new_set_tt__BacklightCompensationOptions(soap*, ...) allocate, set all public members
/// - tt__BacklightCompensationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__BacklightCompensationOptions(soap*, tt__BacklightCompensationOptions*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensationOptions(soap*, tt__BacklightCompensationOptions*) serialize to a stream
/// - tt__BacklightCompensationOptions* tt__BacklightCompensationOptions::soap_dup(soap*) returns deep copy of tt__BacklightCompensationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BacklightCompensationOptions::soap_del() deep deletes tt__BacklightCompensationOptions data members, use only after tt__BacklightCompensationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BacklightCompensationOptions::soap_type() returns SOAP_TYPE_tt__BacklightCompensationOptions or derived type identifier
class tt__BacklightCompensationOptions : public xsd__anyType
{ public:
/// Vector of tt__WideDynamicMode of length 1..unbounded.
    std::vector<tt__WideDynamicMode    > Mode                           1;	///< Multiple elements.
/// Element "Level" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusOptions is a complexType.
///
/// @note class tt__FocusOptions operations:
/// - tt__FocusOptions* soap_new_tt__FocusOptions(soap*) allocate and default initialize
/// - tt__FocusOptions* soap_new_tt__FocusOptions(soap*, int num) allocate and default initialize an array
/// - tt__FocusOptions* soap_new_req_tt__FocusOptions(soap*, ...) allocate, set required members
/// - tt__FocusOptions* soap_new_set_tt__FocusOptions(soap*, ...) allocate, set all public members
/// - tt__FocusOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusOptions(soap*, tt__FocusOptions*) deserialize from a stream
/// - int soap_write_tt__FocusOptions(soap*, tt__FocusOptions*) serialize to a stream
/// - tt__FocusOptions* tt__FocusOptions::soap_dup(soap*) returns deep copy of tt__FocusOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusOptions::soap_del() deep deletes tt__FocusOptions data members, use only after tt__FocusOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusOptions::soap_type() returns SOAP_TYPE_tt__FocusOptions or derived type identifier
class tt__FocusOptions : public xsd__anyType
{ public:
/// Vector of tt__AutoFocusMode of length 0..unbounded.
    std::vector<tt__AutoFocusMode      > AutoFocusModes                 0;	///< Multiple elements.
/// Element "DefaultSpeed" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      DefaultSpeed                   1;	///< Required element.
/// Element "NearLimit" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      NearLimit                      1;	///< Required element.
/// Element "FarLimit" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      FarLimit                       1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ExposureOptions is a complexType.
///
/// @note class tt__ExposureOptions operations:
/// - tt__ExposureOptions* soap_new_tt__ExposureOptions(soap*) allocate and default initialize
/// - tt__ExposureOptions* soap_new_tt__ExposureOptions(soap*, int num) allocate and default initialize an array
/// - tt__ExposureOptions* soap_new_req_tt__ExposureOptions(soap*, ...) allocate, set required members
/// - tt__ExposureOptions* soap_new_set_tt__ExposureOptions(soap*, ...) allocate, set all public members
/// - tt__ExposureOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ExposureOptions(soap*, tt__ExposureOptions*) deserialize from a stream
/// - int soap_write_tt__ExposureOptions(soap*, tt__ExposureOptions*) serialize to a stream
/// - tt__ExposureOptions* tt__ExposureOptions::soap_dup(soap*) returns deep copy of tt__ExposureOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ExposureOptions::soap_del() deep deletes tt__ExposureOptions data members, use only after tt__ExposureOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ExposureOptions::soap_type() returns SOAP_TYPE_tt__ExposureOptions or derived type identifier
class tt__ExposureOptions : public xsd__anyType
{ public:
/// Vector of tt__ExposureMode of length 1..unbounded.
    std::vector<tt__ExposureMode       > Mode                           1;	///< Multiple elements.
/// Vector of tt__ExposurePriority of length 1..unbounded.
    std::vector<tt__ExposurePriority   > Priority                       1;	///< Multiple elements.
/// Element "MinExposureTime" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinExposureTime                1;	///< Required element.
/// Element "MaxExposureTime" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxExposureTime                1;	///< Required element.
/// Element "MinGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinGain                        1;	///< Required element.
/// Element "MaxGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxGain                        1;	///< Required element.
/// Element "MinIris" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinIris                        1;	///< Required element.
/// Element "MaxIris" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxIris                        1;	///< Required element.
/// Element "ExposureTime" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ExposureTime                   1;	///< Required element.
/// Element "Gain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Gain                           1;	///< Required element.
/// Element "Iris" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Iris                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceOptions is a complexType.
///
/// @note class tt__WhiteBalanceOptions operations:
/// - tt__WhiteBalanceOptions* soap_new_tt__WhiteBalanceOptions(soap*) allocate and default initialize
/// - tt__WhiteBalanceOptions* soap_new_tt__WhiteBalanceOptions(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalanceOptions* soap_new_req_tt__WhiteBalanceOptions(soap*, ...) allocate, set required members
/// - tt__WhiteBalanceOptions* soap_new_set_tt__WhiteBalanceOptions(soap*, ...) allocate, set all public members
/// - tt__WhiteBalanceOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalanceOptions(soap*, tt__WhiteBalanceOptions*) deserialize from a stream
/// - int soap_write_tt__WhiteBalanceOptions(soap*, tt__WhiteBalanceOptions*) serialize to a stream
/// - tt__WhiteBalanceOptions* tt__WhiteBalanceOptions::soap_dup(soap*) returns deep copy of tt__WhiteBalanceOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalanceOptions::soap_del() deep deletes tt__WhiteBalanceOptions data members, use only after tt__WhiteBalanceOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalanceOptions::soap_type() returns SOAP_TYPE_tt__WhiteBalanceOptions or derived type identifier
class tt__WhiteBalanceOptions : public xsd__anyType
{ public:
/// Vector of tt__WhiteBalanceMode of length 1..unbounded.
    std::vector<tt__WhiteBalanceMode   > Mode                           1;	///< Multiple elements.
/// Element "YrGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YrGain                         1;	///< Required element.
/// Element "YbGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YbGain                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusMove is a complexType.
///
/// @note class tt__FocusMove operations:
/// - tt__FocusMove* soap_new_tt__FocusMove(soap*) allocate and default initialize
/// - tt__FocusMove* soap_new_tt__FocusMove(soap*, int num) allocate and default initialize an array
/// - tt__FocusMove* soap_new_req_tt__FocusMove(soap*, ...) allocate, set required members
/// - tt__FocusMove* soap_new_set_tt__FocusMove(soap*, ...) allocate, set all public members
/// - tt__FocusMove::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusMove(soap*, tt__FocusMove*) deserialize from a stream
/// - int soap_write_tt__FocusMove(soap*, tt__FocusMove*) serialize to a stream
/// - tt__FocusMove* tt__FocusMove::soap_dup(soap*) returns deep copy of tt__FocusMove, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusMove::soap_del() deep deletes tt__FocusMove data members, use only after tt__FocusMove::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusMove::soap_type() returns SOAP_TYPE_tt__FocusMove or derived type identifier
class tt__FocusMove : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameters for the absolute focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Absolute" of type "http://www.onvif.org/ver10/schema":AbsoluteFocus.
    tt__AbsoluteFocus*                   Absolute                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameters for the relative focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Relative" of type "http://www.onvif.org/ver10/schema":RelativeFocus.
    tt__RelativeFocus*                   Relative                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter for the continuous focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Continuous" of type "http://www.onvif.org/ver10/schema":ContinuousFocus.
    tt__ContinuousFocus*                 Continuous                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":AbsoluteFocus is a complexType.
///
/// @note class tt__AbsoluteFocus operations:
/// - tt__AbsoluteFocus* soap_new_tt__AbsoluteFocus(soap*) allocate and default initialize
/// - tt__AbsoluteFocus* soap_new_tt__AbsoluteFocus(soap*, int num) allocate and default initialize an array
/// - tt__AbsoluteFocus* soap_new_req_tt__AbsoluteFocus(soap*, ...) allocate, set required members
/// - tt__AbsoluteFocus* soap_new_set_tt__AbsoluteFocus(soap*, ...) allocate, set all public members
/// - tt__AbsoluteFocus::soap_default(soap*) default initialize members
/// - int soap_read_tt__AbsoluteFocus(soap*, tt__AbsoluteFocus*) deserialize from a stream
/// - int soap_write_tt__AbsoluteFocus(soap*, tt__AbsoluteFocus*) serialize to a stream
/// - tt__AbsoluteFocus* tt__AbsoluteFocus::soap_dup(soap*) returns deep copy of tt__AbsoluteFocus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AbsoluteFocus::soap_del() deep deletes tt__AbsoluteFocus data members, use only after tt__AbsoluteFocus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AbsoluteFocus::soap_type() returns SOAP_TYPE_tt__AbsoluteFocus or derived type identifier
class tt__AbsoluteFocus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Position parameter for the absolute focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type xs:float.
    float                                Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Speed parameter for the absolute focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type xs:float.
    float*                               Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":RelativeFocus is a complexType.
///
/// @note class tt__RelativeFocus operations:
/// - tt__RelativeFocus* soap_new_tt__RelativeFocus(soap*) allocate and default initialize
/// - tt__RelativeFocus* soap_new_tt__RelativeFocus(soap*, int num) allocate and default initialize an array
/// - tt__RelativeFocus* soap_new_req_tt__RelativeFocus(soap*, ...) allocate, set required members
/// - tt__RelativeFocus* soap_new_set_tt__RelativeFocus(soap*, ...) allocate, set all public members
/// - tt__RelativeFocus::soap_default(soap*) default initialize members
/// - int soap_read_tt__RelativeFocus(soap*, tt__RelativeFocus*) deserialize from a stream
/// - int soap_write_tt__RelativeFocus(soap*, tt__RelativeFocus*) serialize to a stream
/// - tt__RelativeFocus* tt__RelativeFocus::soap_dup(soap*) returns deep copy of tt__RelativeFocus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RelativeFocus::soap_del() deep deletes tt__RelativeFocus data members, use only after tt__RelativeFocus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RelativeFocus::soap_type() returns SOAP_TYPE_tt__RelativeFocus or derived type identifier
class tt__RelativeFocus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Distance parameter for the relative focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Distance" of type xs:float.
    float                                Distance                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Speed parameter for the relative focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type xs:float.
    float*                               Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ContinuousFocus is a complexType.
///
/// @note class tt__ContinuousFocus operations:
/// - tt__ContinuousFocus* soap_new_tt__ContinuousFocus(soap*) allocate and default initialize
/// - tt__ContinuousFocus* soap_new_tt__ContinuousFocus(soap*, int num) allocate and default initialize an array
/// - tt__ContinuousFocus* soap_new_req_tt__ContinuousFocus(soap*, ...) allocate, set required members
/// - tt__ContinuousFocus* soap_new_set_tt__ContinuousFocus(soap*, ...) allocate, set all public members
/// - tt__ContinuousFocus::soap_default(soap*) default initialize members
/// - int soap_read_tt__ContinuousFocus(soap*, tt__ContinuousFocus*) deserialize from a stream
/// - int soap_write_tt__ContinuousFocus(soap*, tt__ContinuousFocus*) serialize to a stream
/// - tt__ContinuousFocus* tt__ContinuousFocus::soap_dup(soap*) returns deep copy of tt__ContinuousFocus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ContinuousFocus::soap_del() deep deletes tt__ContinuousFocus data members, use only after tt__ContinuousFocus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ContinuousFocus::soap_type() returns SOAP_TYPE_tt__ContinuousFocus or derived type identifier
class tt__ContinuousFocus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Speed parameter for the Continuous focus control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type xs:float.
    float                                Speed                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":MoveOptions is a complexType.
///
/// @note class tt__MoveOptions operations:
/// - tt__MoveOptions* soap_new_tt__MoveOptions(soap*) allocate and default initialize
/// - tt__MoveOptions* soap_new_tt__MoveOptions(soap*, int num) allocate and default initialize an array
/// - tt__MoveOptions* soap_new_req_tt__MoveOptions(soap*, ...) allocate, set required members
/// - tt__MoveOptions* soap_new_set_tt__MoveOptions(soap*, ...) allocate, set all public members
/// - tt__MoveOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__MoveOptions(soap*, tt__MoveOptions*) deserialize from a stream
/// - int soap_write_tt__MoveOptions(soap*, tt__MoveOptions*) serialize to a stream
/// - tt__MoveOptions* tt__MoveOptions::soap_dup(soap*) returns deep copy of tt__MoveOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MoveOptions::soap_del() deep deletes tt__MoveOptions data members, use only after tt__MoveOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MoveOptions::soap_type() returns SOAP_TYPE_tt__MoveOptions or derived type identifier
class tt__MoveOptions : public xsd__anyType
{ public:
/// Element "Absolute" of type "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions.
    tt__AbsoluteFocusOptions*            Absolute                       0;	///< Optional element.
/// Element "Relative" of type "http://www.onvif.org/ver10/schema":RelativeFocusOptions.
    tt__RelativeFocusOptions*            Relative                       0;	///< Optional element.
/// Element "Continuous" of type "http://www.onvif.org/ver10/schema":ContinuousFocusOptions.
    tt__ContinuousFocusOptions*          Continuous                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions is a complexType.
///
/// @note class tt__AbsoluteFocusOptions operations:
/// - tt__AbsoluteFocusOptions* soap_new_tt__AbsoluteFocusOptions(soap*) allocate and default initialize
/// - tt__AbsoluteFocusOptions* soap_new_tt__AbsoluteFocusOptions(soap*, int num) allocate and default initialize an array
/// - tt__AbsoluteFocusOptions* soap_new_req_tt__AbsoluteFocusOptions(soap*, ...) allocate, set required members
/// - tt__AbsoluteFocusOptions* soap_new_set_tt__AbsoluteFocusOptions(soap*, ...) allocate, set all public members
/// - tt__AbsoluteFocusOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AbsoluteFocusOptions(soap*, tt__AbsoluteFocusOptions*) deserialize from a stream
/// - int soap_write_tt__AbsoluteFocusOptions(soap*, tt__AbsoluteFocusOptions*) serialize to a stream
/// - tt__AbsoluteFocusOptions* tt__AbsoluteFocusOptions::soap_dup(soap*) returns deep copy of tt__AbsoluteFocusOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AbsoluteFocusOptions::soap_del() deep deletes tt__AbsoluteFocusOptions data members, use only after tt__AbsoluteFocusOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AbsoluteFocusOptions::soap_type() returns SOAP_TYPE_tt__AbsoluteFocusOptions or derived type identifier
class tt__AbsoluteFocusOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the position.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":RelativeFocusOptions is a complexType.
///
/// @note class tt__RelativeFocusOptions operations:
/// - tt__RelativeFocusOptions* soap_new_tt__RelativeFocusOptions(soap*) allocate and default initialize
/// - tt__RelativeFocusOptions* soap_new_tt__RelativeFocusOptions(soap*, int num) allocate and default initialize an array
/// - tt__RelativeFocusOptions* soap_new_req_tt__RelativeFocusOptions(soap*, ...) allocate, set required members
/// - tt__RelativeFocusOptions* soap_new_set_tt__RelativeFocusOptions(soap*, ...) allocate, set all public members
/// - tt__RelativeFocusOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__RelativeFocusOptions(soap*, tt__RelativeFocusOptions*) deserialize from a stream
/// - int soap_write_tt__RelativeFocusOptions(soap*, tt__RelativeFocusOptions*) serialize to a stream
/// - tt__RelativeFocusOptions* tt__RelativeFocusOptions::soap_dup(soap*) returns deep copy of tt__RelativeFocusOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RelativeFocusOptions::soap_del() deep deletes tt__RelativeFocusOptions data members, use only after tt__RelativeFocusOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RelativeFocusOptions::soap_type() returns SOAP_TYPE_tt__RelativeFocusOptions or derived type identifier
class tt__RelativeFocusOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "Distance" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Distance                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ContinuousFocusOptions is a complexType.
///
/// @note class tt__ContinuousFocusOptions operations:
/// - tt__ContinuousFocusOptions* soap_new_tt__ContinuousFocusOptions(soap*) allocate and default initialize
/// - tt__ContinuousFocusOptions* soap_new_tt__ContinuousFocusOptions(soap*, int num) allocate and default initialize an array
/// - tt__ContinuousFocusOptions* soap_new_req_tt__ContinuousFocusOptions(soap*, ...) allocate, set required members
/// - tt__ContinuousFocusOptions* soap_new_set_tt__ContinuousFocusOptions(soap*, ...) allocate, set all public members
/// - tt__ContinuousFocusOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ContinuousFocusOptions(soap*, tt__ContinuousFocusOptions*) deserialize from a stream
/// - int soap_write_tt__ContinuousFocusOptions(soap*, tt__ContinuousFocusOptions*) serialize to a stream
/// - tt__ContinuousFocusOptions* tt__ContinuousFocusOptions::soap_dup(soap*) returns deep copy of tt__ContinuousFocusOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ContinuousFocusOptions::soap_del() deep deletes tt__ContinuousFocusOptions data members, use only after tt__ContinuousFocusOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ContinuousFocusOptions::soap_type() returns SOAP_TYPE_tt__ContinuousFocusOptions or derived type identifier
class tt__ContinuousFocusOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance is a complexType.
///
/// @note class tt__WhiteBalance operations:
/// - tt__WhiteBalance* soap_new_tt__WhiteBalance(soap*) allocate and default initialize
/// - tt__WhiteBalance* soap_new_tt__WhiteBalance(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalance* soap_new_req_tt__WhiteBalance(soap*, ...) allocate, set required members
/// - tt__WhiteBalance* soap_new_set_tt__WhiteBalance(soap*, ...) allocate, set all public members
/// - tt__WhiteBalance::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalance(soap*, tt__WhiteBalance*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance(soap*, tt__WhiteBalance*) serialize to a stream
/// - tt__WhiteBalance* tt__WhiteBalance::soap_dup(soap*) returns deep copy of tt__WhiteBalance, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalance::soap_del() deep deletes tt__WhiteBalance data members, use only after tt__WhiteBalance::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalance::soap_type() returns SOAP_TYPE_tt__WhiteBalance or derived type identifier
class tt__WhiteBalance : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Auto whitebalancing mode (auto/manual).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    tt__WhiteBalanceMode                 Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CrGain" of type xs:float.
    float                                CrGain                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Bgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CbGain" of type xs:float.
    float                                CbGain                         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingStatus20 is a complexType.
///
/// @note class tt__ImagingStatus20 operations:
/// - tt__ImagingStatus20* soap_new_tt__ImagingStatus20(soap*) allocate and default initialize
/// - tt__ImagingStatus20* soap_new_tt__ImagingStatus20(soap*, int num) allocate and default initialize an array
/// - tt__ImagingStatus20* soap_new_req_tt__ImagingStatus20(soap*, ...) allocate, set required members
/// - tt__ImagingStatus20* soap_new_set_tt__ImagingStatus20(soap*, ...) allocate, set all public members
/// - tt__ImagingStatus20::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingStatus20(soap*, tt__ImagingStatus20*) deserialize from a stream
/// - int soap_write_tt__ImagingStatus20(soap*, tt__ImagingStatus20*) serialize to a stream
/// - tt__ImagingStatus20* tt__ImagingStatus20::soap_dup(soap*) returns deep copy of tt__ImagingStatus20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingStatus20::soap_del() deep deletes tt__ImagingStatus20 data members, use only after tt__ImagingStatus20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingStatus20::soap_type() returns SOAP_TYPE_tt__ImagingStatus20 or derived type identifier
class tt__ImagingStatus20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of focus.
/// </BLOCKQUOTE></PRE>
///
/// Element "FocusStatus20" of type "http://www.onvif.org/ver10/schema":FocusStatus20.
    tt__FocusStatus20*                   FocusStatus20                  0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingStatus20Extension.
    tt__ImagingStatus20Extension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingStatus20Extension is a complexType.
///
/// @note class tt__ImagingStatus20Extension operations:
/// - tt__ImagingStatus20Extension* soap_new_tt__ImagingStatus20Extension(soap*) allocate and default initialize
/// - tt__ImagingStatus20Extension* soap_new_tt__ImagingStatus20Extension(soap*, int num) allocate and default initialize an array
/// - tt__ImagingStatus20Extension* soap_new_req_tt__ImagingStatus20Extension(soap*, ...) allocate, set required members
/// - tt__ImagingStatus20Extension* soap_new_set_tt__ImagingStatus20Extension(soap*, ...) allocate, set all public members
/// - tt__ImagingStatus20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingStatus20Extension(soap*, tt__ImagingStatus20Extension*) deserialize from a stream
/// - int soap_write_tt__ImagingStatus20Extension(soap*, tt__ImagingStatus20Extension*) serialize to a stream
/// - tt__ImagingStatus20Extension* tt__ImagingStatus20Extension::soap_dup(soap*) returns deep copy of tt__ImagingStatus20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingStatus20Extension::soap_del() deep deletes tt__ImagingStatus20Extension data members, use only after tt__ImagingStatus20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingStatus20Extension::soap_type() returns SOAP_TYPE_tt__ImagingStatus20Extension or derived type identifier
class tt__ImagingStatus20Extension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusStatus20 is a complexType.
///
/// @note class tt__FocusStatus20 operations:
/// - tt__FocusStatus20* soap_new_tt__FocusStatus20(soap*) allocate and default initialize
/// - tt__FocusStatus20* soap_new_tt__FocusStatus20(soap*, int num) allocate and default initialize an array
/// - tt__FocusStatus20* soap_new_req_tt__FocusStatus20(soap*, ...) allocate, set required members
/// - tt__FocusStatus20* soap_new_set_tt__FocusStatus20(soap*, ...) allocate, set all public members
/// - tt__FocusStatus20::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusStatus20(soap*, tt__FocusStatus20*) deserialize from a stream
/// - int soap_write_tt__FocusStatus20(soap*, tt__FocusStatus20*) serialize to a stream
/// - tt__FocusStatus20* tt__FocusStatus20::soap_dup(soap*) returns deep copy of tt__FocusStatus20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusStatus20::soap_del() deep deletes tt__FocusStatus20 data members, use only after tt__FocusStatus20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusStatus20::soap_type() returns SOAP_TYPE_tt__FocusStatus20 or derived type identifier
class tt__FocusStatus20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of focus position.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type xs:float.
    float                                Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Status of focus MoveStatus.
/// </BLOCKQUOTE></PRE>
///
/// Element "MoveStatus" of type "http://www.onvif.org/ver10/schema":MoveStatus.
    tt__MoveStatus                       MoveStatus                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Error status of focus.
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":FocusStatus20Extension.
    tt__FocusStatus20Extension*          Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusStatus20Extension is a complexType.
///
/// @note class tt__FocusStatus20Extension operations:
/// - tt__FocusStatus20Extension* soap_new_tt__FocusStatus20Extension(soap*) allocate and default initialize
/// - tt__FocusStatus20Extension* soap_new_tt__FocusStatus20Extension(soap*, int num) allocate and default initialize an array
/// - tt__FocusStatus20Extension* soap_new_req_tt__FocusStatus20Extension(soap*, ...) allocate, set required members
/// - tt__FocusStatus20Extension* soap_new_set_tt__FocusStatus20Extension(soap*, ...) allocate, set all public members
/// - tt__FocusStatus20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusStatus20Extension(soap*, tt__FocusStatus20Extension*) deserialize from a stream
/// - int soap_write_tt__FocusStatus20Extension(soap*, tt__FocusStatus20Extension*) serialize to a stream
/// - tt__FocusStatus20Extension* tt__FocusStatus20Extension::soap_dup(soap*) returns deep copy of tt__FocusStatus20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusStatus20Extension::soap_del() deep deletes tt__FocusStatus20Extension data members, use only after tt__FocusStatus20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusStatus20Extension::soap_type() returns SOAP_TYPE_tt__FocusStatus20Extension or derived type identifier
class tt__FocusStatus20Extension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettings20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing the ImagingSettings of a VideoSource. The supported options and ranges can be obtained via the GetOptions command.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ImagingSettings20 operations:
/// - tt__ImagingSettings20* soap_new_tt__ImagingSettings20(soap*) allocate and default initialize
/// - tt__ImagingSettings20* soap_new_tt__ImagingSettings20(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettings20* soap_new_req_tt__ImagingSettings20(soap*, ...) allocate, set required members
/// - tt__ImagingSettings20* soap_new_set_tt__ImagingSettings20(soap*, ...) allocate, set all public members
/// - tt__ImagingSettings20::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettings20(soap*, tt__ImagingSettings20*) deserialize from a stream
/// - int soap_write_tt__ImagingSettings20(soap*, tt__ImagingSettings20*) serialize to a stream
/// - tt__ImagingSettings20* tt__ImagingSettings20::soap_dup(soap*) returns deep copy of tt__ImagingSettings20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettings20::soap_del() deep deletes tt__ImagingSettings20 data members, use only after tt__ImagingSettings20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettings20::soap_type() returns SOAP_TYPE_tt__ImagingSettings20 or derived type identifier
class tt__ImagingSettings20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Enabled/disabled BLC mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "BacklightCompensation" of type "http://www.onvif.org/ver10/schema":BacklightCompensation20.
    tt__BacklightCompensation20*         BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image brightness (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Brightness" of type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Color saturation of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "ColorSaturation" of type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contrast of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Contrast" of type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Exposure mode of the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Exposure" of type "http://www.onvif.org/ver10/schema":Exposure20.
    tt__Exposure20*                      Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Focus configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Focus" of type "http://www.onvif.org/ver10/schema":FocusConfiguration20.
    tt__FocusConfiguration20*            Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Infrared Cutoff Filter settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "IrCutFilter" of type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    tt__IrCutFilterMode*                 IrCutFilter                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sharpness of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Sharpness" of type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   WDR settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WideDynamicRange" of type "http://www.onvif.org/ver10/schema":WideDynamicRange20.
    tt__WideDynamicRange20*              WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   White balance settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WhiteBalance" of type "http://www.onvif.org/ver10/schema":WhiteBalance20.
    tt__WhiteBalance20*                  WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20.
    tt__ImagingSettingsExtension20*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20 is a complexType.
///
/// @note class tt__ImagingSettingsExtension20 operations:
/// - tt__ImagingSettingsExtension20* soap_new_tt__ImagingSettingsExtension20(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension20* soap_new_tt__ImagingSettingsExtension20(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension20* soap_new_req_tt__ImagingSettingsExtension20(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension20* soap_new_set_tt__ImagingSettingsExtension20(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension20::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension20(soap*, tt__ImagingSettingsExtension20*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension20(soap*, tt__ImagingSettingsExtension20*) serialize to a stream
/// - tt__ImagingSettingsExtension20* tt__ImagingSettingsExtension20::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension20::soap_del() deep deletes tt__ImagingSettingsExtension20 data members, use only after tt__ImagingSettingsExtension20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension20::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension20 or derived type identifier
class tt__ImagingSettingsExtension20 : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "ImageStabilization" of type "http://www.onvif.org/ver10/schema":ImageStabilization.
    tt__ImageStabilization*              ImageStabilization             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension202.
    tt__ImagingSettingsExtension202*     Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension202 is a complexType.
///
/// @note class tt__ImagingSettingsExtension202 operations:
/// - tt__ImagingSettingsExtension202* soap_new_tt__ImagingSettingsExtension202(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension202* soap_new_tt__ImagingSettingsExtension202(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension202* soap_new_req_tt__ImagingSettingsExtension202(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension202* soap_new_set_tt__ImagingSettingsExtension202(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension202::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension202(soap*, tt__ImagingSettingsExtension202*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension202(soap*, tt__ImagingSettingsExtension202*) serialize to a stream
/// - tt__ImagingSettingsExtension202* tt__ImagingSettingsExtension202::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension202, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension202::soap_del() deep deletes tt__ImagingSettingsExtension202 data members, use only after tt__ImagingSettingsExtension202::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension202::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension202 or derived type identifier
class tt__ImagingSettingsExtension202 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   An optional parameter applied to only auto mode to adjust timing of toggling Ir cut filter.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IrCutFilterAutoAdjustment* of length 0..unbounded.
    std::vector<tt__IrCutFilterAutoAdjustment*> IrCutFilterAutoAdjustment      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension203.
    tt__ImagingSettingsExtension203*     Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension203 is a complexType.
///
/// @note class tt__ImagingSettingsExtension203 operations:
/// - tt__ImagingSettingsExtension203* soap_new_tt__ImagingSettingsExtension203(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension203* soap_new_tt__ImagingSettingsExtension203(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension203* soap_new_req_tt__ImagingSettingsExtension203(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension203* soap_new_set_tt__ImagingSettingsExtension203(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension203::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension203(soap*, tt__ImagingSettingsExtension203*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension203(soap*, tt__ImagingSettingsExtension203*) serialize to a stream
/// - tt__ImagingSettingsExtension203* tt__ImagingSettingsExtension203::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension203, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension203::soap_del() deep deletes tt__ImagingSettingsExtension203 data members, use only after tt__ImagingSettingsExtension203::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension203::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension203 or derived type identifier
class tt__ImagingSettingsExtension203 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Contrast Compensation.
/// </BLOCKQUOTE></PRE>
///
/// Element "ToneCompensation" of type "http://www.onvif.org/ver10/schema":ToneCompensation.
    tt__ToneCompensation*                ToneCompensation               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Defogging.
/// </BLOCKQUOTE></PRE>
///
/// Element "Defogging" of type "http://www.onvif.org/ver10/schema":Defogging.
    tt__Defogging*                       Defogging                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Noise Reduction.
/// </BLOCKQUOTE></PRE>
///
/// Element "NoiseReduction" of type "http://www.onvif.org/ver10/schema":NoiseReduction.
    tt__NoiseReduction*                  NoiseReduction                 0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension204.
    tt__ImagingSettingsExtension204*     Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension204 is a complexType.
///
/// @note class tt__ImagingSettingsExtension204 operations:
/// - tt__ImagingSettingsExtension204* soap_new_tt__ImagingSettingsExtension204(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension204* soap_new_tt__ImagingSettingsExtension204(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension204* soap_new_req_tt__ImagingSettingsExtension204(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension204* soap_new_set_tt__ImagingSettingsExtension204(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension204::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension204(soap*, tt__ImagingSettingsExtension204*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension204(soap*, tt__ImagingSettingsExtension204*) serialize to a stream
/// - tt__ImagingSettingsExtension204* tt__ImagingSettingsExtension204::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension204, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension204::soap_del() deep deletes tt__ImagingSettingsExtension204 data members, use only after tt__ImagingSettingsExtension204::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension204::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension204 or derived type identifier
class tt__ImagingSettingsExtension204 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilization is a complexType.
///
/// @note class tt__ImageStabilization operations:
/// - tt__ImageStabilization* soap_new_tt__ImageStabilization(soap*) allocate and default initialize
/// - tt__ImageStabilization* soap_new_tt__ImageStabilization(soap*, int num) allocate and default initialize an array
/// - tt__ImageStabilization* soap_new_req_tt__ImageStabilization(soap*, ...) allocate, set required members
/// - tt__ImageStabilization* soap_new_set_tt__ImageStabilization(soap*, ...) allocate, set all public members
/// - tt__ImageStabilization::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImageStabilization(soap*, tt__ImageStabilization*) deserialize from a stream
/// - int soap_write_tt__ImageStabilization(soap*, tt__ImageStabilization*) serialize to a stream
/// - tt__ImageStabilization* tt__ImageStabilization::soap_dup(soap*) returns deep copy of tt__ImageStabilization, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImageStabilization::soap_del() deep deletes tt__ImageStabilization data members, use only after tt__ImageStabilization::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImageStabilization::soap_type() returns SOAP_TYPE_tt__ImageStabilization or derived type identifier
class tt__ImageStabilization : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ImageStabilizationMode.
    tt__ImageStabilizationMode           Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified)
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImageStabilizationExtension.
    tt__ImageStabilizationExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationExtension is a complexType.
///
/// @note class tt__ImageStabilizationExtension operations:
/// - tt__ImageStabilizationExtension* soap_new_tt__ImageStabilizationExtension(soap*) allocate and default initialize
/// - tt__ImageStabilizationExtension* soap_new_tt__ImageStabilizationExtension(soap*, int num) allocate and default initialize an array
/// - tt__ImageStabilizationExtension* soap_new_req_tt__ImageStabilizationExtension(soap*, ...) allocate, set required members
/// - tt__ImageStabilizationExtension* soap_new_set_tt__ImageStabilizationExtension(soap*, ...) allocate, set all public members
/// - tt__ImageStabilizationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImageStabilizationExtension(soap*, tt__ImageStabilizationExtension*) deserialize from a stream
/// - int soap_write_tt__ImageStabilizationExtension(soap*, tt__ImageStabilizationExtension*) serialize to a stream
/// - tt__ImageStabilizationExtension* tt__ImageStabilizationExtension::soap_dup(soap*) returns deep copy of tt__ImageStabilizationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImageStabilizationExtension::soap_del() deep deletes tt__ImageStabilizationExtension data members, use only after tt__ImageStabilizationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImageStabilizationExtension::soap_type() returns SOAP_TYPE_tt__ImageStabilizationExtension or derived type identifier
class tt__ImageStabilizationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustment is a complexType.
///
/// @note class tt__IrCutFilterAutoAdjustment operations:
/// - tt__IrCutFilterAutoAdjustment* soap_new_tt__IrCutFilterAutoAdjustment(soap*) allocate and default initialize
/// - tt__IrCutFilterAutoAdjustment* soap_new_tt__IrCutFilterAutoAdjustment(soap*, int num) allocate and default initialize an array
/// - tt__IrCutFilterAutoAdjustment* soap_new_req_tt__IrCutFilterAutoAdjustment(soap*, ...) allocate, set required members
/// - tt__IrCutFilterAutoAdjustment* soap_new_set_tt__IrCutFilterAutoAdjustment(soap*, ...) allocate, set all public members
/// - tt__IrCutFilterAutoAdjustment::soap_default(soap*) default initialize members
/// - int soap_read_tt__IrCutFilterAutoAdjustment(soap*, tt__IrCutFilterAutoAdjustment*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustment(soap*, tt__IrCutFilterAutoAdjustment*) serialize to a stream
/// - tt__IrCutFilterAutoAdjustment* tt__IrCutFilterAutoAdjustment::soap_dup(soap*) returns deep copy of tt__IrCutFilterAutoAdjustment, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IrCutFilterAutoAdjustment::soap_del() deep deletes tt__IrCutFilterAutoAdjustment data members, use only after tt__IrCutFilterAutoAdjustment::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IrCutFilterAutoAdjustment::soap_type() returns SOAP_TYPE_tt__IrCutFilterAutoAdjustment or derived type identifier
class tt__IrCutFilterAutoAdjustment : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies which boundaries to automatically toggle Ir cut filter following parameters are applied to. Its options shall be chosen from tt:IrCutFilterAutoBoundaryType.
/// </BLOCKQUOTE></PRE>
///
/// Element "BoundaryType" of type xs:string.
    std::string                          BoundaryType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Adjusts boundary exposure level for toggling Ir cut filter to on/off specified with unitless normalized value from +1.0 to -1.0. Zero is default and -1.0 is the darkest adjustment (Unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "BoundaryOffset" of type xs:float.
    float*                               BoundaryOffset                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Delay time of toggling Ir cut filter to on/off after crossing of the boundary exposure levels.
/// </BLOCKQUOTE></PRE>
///
/// Element "ResponseTime" of type xs:duration.
    xsd__duration*                       ResponseTime                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentExtension.
    tt__IrCutFilterAutoAdjustmentExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentExtension is a complexType.
///
/// @note class tt__IrCutFilterAutoAdjustmentExtension operations:
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap*) allocate and default initialize
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap*, int num) allocate and default initialize an array
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_req_tt__IrCutFilterAutoAdjustmentExtension(soap*, ...) allocate, set required members
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_set_tt__IrCutFilterAutoAdjustmentExtension(soap*, ...) allocate, set all public members
/// - tt__IrCutFilterAutoAdjustmentExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IrCutFilterAutoAdjustmentExtension(soap*, tt__IrCutFilterAutoAdjustmentExtension*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustmentExtension(soap*, tt__IrCutFilterAutoAdjustmentExtension*) serialize to a stream
/// - tt__IrCutFilterAutoAdjustmentExtension* tt__IrCutFilterAutoAdjustmentExtension::soap_dup(soap*) returns deep copy of tt__IrCutFilterAutoAdjustmentExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IrCutFilterAutoAdjustmentExtension::soap_del() deep deletes tt__IrCutFilterAutoAdjustmentExtension data members, use only after tt__IrCutFilterAutoAdjustmentExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IrCutFilterAutoAdjustmentExtension::soap_type() returns SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension or derived type identifier
class tt__IrCutFilterAutoAdjustmentExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRange20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing whether WDR mode is enabled or disabled (on/off).
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__WideDynamicRange20 operations:
/// - tt__WideDynamicRange20* soap_new_tt__WideDynamicRange20(soap*) allocate and default initialize
/// - tt__WideDynamicRange20* soap_new_tt__WideDynamicRange20(soap*, int num) allocate and default initialize an array
/// - tt__WideDynamicRange20* soap_new_req_tt__WideDynamicRange20(soap*, ...) allocate, set required members
/// - tt__WideDynamicRange20* soap_new_set_tt__WideDynamicRange20(soap*, ...) allocate, set all public members
/// - tt__WideDynamicRange20::soap_default(soap*) default initialize members
/// - int soap_read_tt__WideDynamicRange20(soap*, tt__WideDynamicRange20*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRange20(soap*, tt__WideDynamicRange20*) serialize to a stream
/// - tt__WideDynamicRange20* tt__WideDynamicRange20::soap_dup(soap*) returns deep copy of tt__WideDynamicRange20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WideDynamicRange20::soap_del() deep deletes tt__WideDynamicRange20 data members, use only after tt__WideDynamicRange20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WideDynamicRange20::soap_type() returns SOAP_TYPE_tt__WideDynamicRange20 or derived type identifier
class tt__WideDynamicRange20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Wide dynamic range mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    tt__WideDynamicMode                  Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensation20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing whether BLC mode is enabled or disabled (on/off).
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__BacklightCompensation20 operations:
/// - tt__BacklightCompensation20* soap_new_tt__BacklightCompensation20(soap*) allocate and default initialize
/// - tt__BacklightCompensation20* soap_new_tt__BacklightCompensation20(soap*, int num) allocate and default initialize an array
/// - tt__BacklightCompensation20* soap_new_req_tt__BacklightCompensation20(soap*, ...) allocate, set required members
/// - tt__BacklightCompensation20* soap_new_set_tt__BacklightCompensation20(soap*, ...) allocate, set all public members
/// - tt__BacklightCompensation20::soap_default(soap*) default initialize members
/// - int soap_read_tt__BacklightCompensation20(soap*, tt__BacklightCompensation20*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensation20(soap*, tt__BacklightCompensation20*) serialize to a stream
/// - tt__BacklightCompensation20* tt__BacklightCompensation20::soap_dup(soap*) returns deep copy of tt__BacklightCompensation20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BacklightCompensation20::soap_del() deep deletes tt__BacklightCompensation20 data members, use only after tt__BacklightCompensation20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BacklightCompensation20::soap_type() returns SOAP_TYPE_tt__BacklightCompensation20 or derived type identifier
class tt__BacklightCompensation20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Backlight compensation mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    tt__BacklightCompensationMode        Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":Exposure20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing the exposure settings.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__Exposure20 operations:
/// - tt__Exposure20* soap_new_tt__Exposure20(soap*) allocate and default initialize
/// - tt__Exposure20* soap_new_tt__Exposure20(soap*, int num) allocate and default initialize an array
/// - tt__Exposure20* soap_new_req_tt__Exposure20(soap*, ...) allocate, set required members
/// - tt__Exposure20* soap_new_set_tt__Exposure20(soap*, ...) allocate, set all public members
/// - tt__Exposure20::soap_default(soap*) default initialize members
/// - int soap_read_tt__Exposure20(soap*, tt__Exposure20*) deserialize from a stream
/// - int soap_write_tt__Exposure20(soap*, tt__Exposure20*) serialize to a stream
/// - tt__Exposure20* tt__Exposure20::soap_dup(soap*) returns deep copy of tt__Exposure20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Exposure20::soap_del() deep deletes tt__Exposure20 data members, use only after tt__Exposure20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Exposure20::soap_type() returns SOAP_TYPE_tt__Exposure20 or derived type identifier
class tt__Exposure20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the device.</li>
///   <li>Manual Disabled exposure algorithm on the device.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ExposureMode.
    tt__ExposureMode                     Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
///
/// Element "Priority" of type "http://www.onvif.org/ver10/schema":ExposurePriority.
    tt__ExposurePriority*                Priority                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Rectangular exposure mask.
/// </BLOCKQUOTE></PRE>
///
/// Element "Window" of type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Window                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinExposureTime" of type xs:float.
    float*                               MinExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxExposureTime" of type xs:float.
    float*                               MaxExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinGain" of type xs:float.
    float*                               MinGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxGain" of type xs:float.
    float*                               MaxGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinIris" of type xs:float.
    float*                               MinIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxIris" of type xs:float.
    float*                               MaxIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed exposure time used by the image sensor (s).
/// </BLOCKQUOTE></PRE>
///
/// Element "ExposureTime" of type xs:float.
    float*                               ExposureTime                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed gain used by the image sensor (dB).
/// </BLOCKQUOTE></PRE>
///
/// Element "Gain" of type xs:float.
    float*                               Gain                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
/// </BLOCKQUOTE></PRE>
///
/// Element "Iris" of type xs:float.
    float*                               Iris                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensation is a complexType.
///
/// @note class tt__ToneCompensation operations:
/// - tt__ToneCompensation* soap_new_tt__ToneCompensation(soap*) allocate and default initialize
/// - tt__ToneCompensation* soap_new_tt__ToneCompensation(soap*, int num) allocate and default initialize an array
/// - tt__ToneCompensation* soap_new_req_tt__ToneCompensation(soap*, ...) allocate, set required members
/// - tt__ToneCompensation* soap_new_set_tt__ToneCompensation(soap*, ...) allocate, set all public members
/// - tt__ToneCompensation::soap_default(soap*) default initialize members
/// - int soap_read_tt__ToneCompensation(soap*, tt__ToneCompensation*) deserialize from a stream
/// - int soap_write_tt__ToneCompensation(soap*, tt__ToneCompensation*) serialize to a stream
/// - tt__ToneCompensation* tt__ToneCompensation::soap_dup(soap*) returns deep copy of tt__ToneCompensation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ToneCompensation::soap_del() deep deletes tt__ToneCompensation data members, use only after tt__ToneCompensation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ToneCompensation::soap_type() returns SOAP_TYPE_tt__ToneCompensation or derived type identifier
class tt__ToneCompensation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable or automatic ToneCompensation feature. Its options shall be chosen from tt:ToneCompensationMode Type.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type xs:string.
    std::string                          Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ToneCompensationExtension.
    tt__ToneCompensationExtension*       Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensationExtension is a complexType.
///
/// @note class tt__ToneCompensationExtension operations:
/// - tt__ToneCompensationExtension* soap_new_tt__ToneCompensationExtension(soap*) allocate and default initialize
/// - tt__ToneCompensationExtension* soap_new_tt__ToneCompensationExtension(soap*, int num) allocate and default initialize an array
/// - tt__ToneCompensationExtension* soap_new_req_tt__ToneCompensationExtension(soap*, ...) allocate, set required members
/// - tt__ToneCompensationExtension* soap_new_set_tt__ToneCompensationExtension(soap*, ...) allocate, set all public members
/// - tt__ToneCompensationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ToneCompensationExtension(soap*, tt__ToneCompensationExtension*) deserialize from a stream
/// - int soap_write_tt__ToneCompensationExtension(soap*, tt__ToneCompensationExtension*) serialize to a stream
/// - tt__ToneCompensationExtension* tt__ToneCompensationExtension::soap_dup(soap*) returns deep copy of tt__ToneCompensationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ToneCompensationExtension::soap_del() deep deletes tt__ToneCompensationExtension data members, use only after tt__ToneCompensationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ToneCompensationExtension::soap_type() returns SOAP_TYPE_tt__ToneCompensationExtension or derived type identifier
class tt__ToneCompensationExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Defogging is a complexType.
///
/// @note class tt__Defogging operations:
/// - tt__Defogging* soap_new_tt__Defogging(soap*) allocate and default initialize
/// - tt__Defogging* soap_new_tt__Defogging(soap*, int num) allocate and default initialize an array
/// - tt__Defogging* soap_new_req_tt__Defogging(soap*, ...) allocate, set required members
/// - tt__Defogging* soap_new_set_tt__Defogging(soap*, ...) allocate, set all public members
/// - tt__Defogging::soap_default(soap*) default initialize members
/// - int soap_read_tt__Defogging(soap*, tt__Defogging*) deserialize from a stream
/// - int soap_write_tt__Defogging(soap*, tt__Defogging*) serialize to a stream
/// - tt__Defogging* tt__Defogging::soap_dup(soap*) returns deep copy of tt__Defogging, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Defogging::soap_del() deep deletes tt__Defogging data members, use only after tt__Defogging::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Defogging::soap_type() returns SOAP_TYPE_tt__Defogging or derived type identifier
class tt__Defogging : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable or automatic Defogging feature. Its options shall be chosen from tt:DefoggingMode Type.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type xs:string.
    std::string                          Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DefoggingExtension.
    tt__DefoggingExtension*              Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DefoggingExtension is a complexType.
///
/// @note class tt__DefoggingExtension operations:
/// - tt__DefoggingExtension* soap_new_tt__DefoggingExtension(soap*) allocate and default initialize
/// - tt__DefoggingExtension* soap_new_tt__DefoggingExtension(soap*, int num) allocate and default initialize an array
/// - tt__DefoggingExtension* soap_new_req_tt__DefoggingExtension(soap*, ...) allocate, set required members
/// - tt__DefoggingExtension* soap_new_set_tt__DefoggingExtension(soap*, ...) allocate, set all public members
/// - tt__DefoggingExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DefoggingExtension(soap*, tt__DefoggingExtension*) deserialize from a stream
/// - int soap_write_tt__DefoggingExtension(soap*, tt__DefoggingExtension*) serialize to a stream
/// - tt__DefoggingExtension* tt__DefoggingExtension::soap_dup(soap*) returns deep copy of tt__DefoggingExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DefoggingExtension::soap_del() deep deletes tt__DefoggingExtension data members, use only after tt__DefoggingExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DefoggingExtension::soap_type() returns SOAP_TYPE_tt__DefoggingExtension or derived type identifier
class tt__DefoggingExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":NoiseReduction is a complexType.
///
/// @note class tt__NoiseReduction operations:
/// - tt__NoiseReduction* soap_new_tt__NoiseReduction(soap*) allocate and default initialize
/// - tt__NoiseReduction* soap_new_tt__NoiseReduction(soap*, int num) allocate and default initialize an array
/// - tt__NoiseReduction* soap_new_req_tt__NoiseReduction(soap*, ...) allocate, set required members
/// - tt__NoiseReduction* soap_new_set_tt__NoiseReduction(soap*, ...) allocate, set all public members
/// - tt__NoiseReduction::soap_default(soap*) default initialize members
/// - int soap_read_tt__NoiseReduction(soap*, tt__NoiseReduction*) deserialize from a stream
/// - int soap_write_tt__NoiseReduction(soap*, tt__NoiseReduction*) serialize to a stream
/// - tt__NoiseReduction* tt__NoiseReduction::soap_dup(soap*) returns deep copy of tt__NoiseReduction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NoiseReduction::soap_del() deep deletes tt__NoiseReduction data members, use only after tt__NoiseReduction::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NoiseReduction::soap_type() returns SOAP_TYPE_tt__NoiseReduction or derived type identifier
class tt__NoiseReduction : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Level parameter specified with unitless normalized value from 0.0 to +1.0. Level=0 means no noise reduction or minimal noise reduction.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float                                Level                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20 is a complexType.
///
/// @note class tt__ImagingOptions20 operations:
/// - tt__ImagingOptions20* soap_new_tt__ImagingOptions20(soap*) allocate and default initialize
/// - tt__ImagingOptions20* soap_new_tt__ImagingOptions20(soap*, int num) allocate and default initialize an array
/// - tt__ImagingOptions20* soap_new_req_tt__ImagingOptions20(soap*, ...) allocate, set required members
/// - tt__ImagingOptions20* soap_new_set_tt__ImagingOptions20(soap*, ...) allocate, set all public members
/// - tt__ImagingOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingOptions20(soap*, tt__ImagingOptions20*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20(soap*, tt__ImagingOptions20*) serialize to a stream
/// - tt__ImagingOptions20* tt__ImagingOptions20::soap_dup(soap*) returns deep copy of tt__ImagingOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingOptions20::soap_del() deep deletes tt__ImagingOptions20 data members, use only after tt__ImagingOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingOptions20::soap_type() returns SOAP_TYPE_tt__ImagingOptions20 or derived type identifier
class tt__ImagingOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid range of Backlight Compensation.
/// </BLOCKQUOTE></PRE>
///
/// Element "BacklightCompensation" of type "http://www.onvif.org/ver10/schema":BacklightCompensationOptions20.
    tt__BacklightCompensationOptions20*  BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Brightness.
/// </BLOCKQUOTE></PRE>
///
/// Element "Brightness" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Color Saturation.
/// </BLOCKQUOTE></PRE>
///
/// Element "ColorSaturation" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Contrast.
/// </BLOCKQUOTE></PRE>
///
/// Element "Contrast" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Exposure.
/// </BLOCKQUOTE></PRE>
///
/// Element "Exposure" of type "http://www.onvif.org/ver10/schema":ExposureOptions20.
    tt__ExposureOptions20*               Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Focus.
/// </BLOCKQUOTE></PRE>
///
/// Element "Focus" of type "http://www.onvif.org/ver10/schema":FocusOptions20.
    tt__FocusOptions20*                  Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of IrCutFilterModes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__IrCutFilterMode of length 0..unbounded.
    std::vector<tt__IrCutFilterMode    > IrCutFilterModes               0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Valid range of Sharpness.
/// </BLOCKQUOTE></PRE>
///
/// Element "Sharpness" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of WideDynamicRange.
/// </BLOCKQUOTE></PRE>
///
/// Element "WideDynamicRange" of type "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions20.
    tt__WideDynamicRangeOptions20*       WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of WhiteBalance.
/// </BLOCKQUOTE></PRE>
///
/// Element "WhiteBalance" of type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20.
    tt__WhiteBalanceOptions20*           WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension.
    tt__ImagingOptions20Extension*       Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension is a complexType.
///
/// @note class tt__ImagingOptions20Extension operations:
/// - tt__ImagingOptions20Extension* soap_new_tt__ImagingOptions20Extension(soap*) allocate and default initialize
/// - tt__ImagingOptions20Extension* soap_new_tt__ImagingOptions20Extension(soap*, int num) allocate and default initialize an array
/// - tt__ImagingOptions20Extension* soap_new_req_tt__ImagingOptions20Extension(soap*, ...) allocate, set required members
/// - tt__ImagingOptions20Extension* soap_new_set_tt__ImagingOptions20Extension(soap*, ...) allocate, set all public members
/// - tt__ImagingOptions20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingOptions20Extension(soap*, tt__ImagingOptions20Extension*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension(soap*, tt__ImagingOptions20Extension*) serialize to a stream
/// - tt__ImagingOptions20Extension* tt__ImagingOptions20Extension::soap_dup(soap*) returns deep copy of tt__ImagingOptions20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingOptions20Extension::soap_del() deep deletes tt__ImagingOptions20Extension data members, use only after tt__ImagingOptions20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingOptions20Extension::soap_type() returns SOAP_TYPE_tt__ImagingOptions20Extension or derived type identifier
class tt__ImagingOptions20Extension : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "ImageStabilization" of type "http://www.onvif.org/ver10/schema":ImageStabilizationOptions.
    tt__ImageStabilizationOptions*       ImageStabilization             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension2.
    tt__ImagingOptions20Extension2*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension2 is a complexType.
///
/// @note class tt__ImagingOptions20Extension2 operations:
/// - tt__ImagingOptions20Extension2* soap_new_tt__ImagingOptions20Extension2(soap*) allocate and default initialize
/// - tt__ImagingOptions20Extension2* soap_new_tt__ImagingOptions20Extension2(soap*, int num) allocate and default initialize an array
/// - tt__ImagingOptions20Extension2* soap_new_req_tt__ImagingOptions20Extension2(soap*, ...) allocate, set required members
/// - tt__ImagingOptions20Extension2* soap_new_set_tt__ImagingOptions20Extension2(soap*, ...) allocate, set all public members
/// - tt__ImagingOptions20Extension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingOptions20Extension2(soap*, tt__ImagingOptions20Extension2*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension2(soap*, tt__ImagingOptions20Extension2*) serialize to a stream
/// - tt__ImagingOptions20Extension2* tt__ImagingOptions20Extension2::soap_dup(soap*) returns deep copy of tt__ImagingOptions20Extension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingOptions20Extension2::soap_del() deep deletes tt__ImagingOptions20Extension2 data members, use only after tt__ImagingOptions20Extension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingOptions20Extension2::soap_type() returns SOAP_TYPE_tt__ImagingOptions20Extension2 or derived type identifier
class tt__ImagingOptions20Extension2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of parameters for adjustment of Ir cut filter auto mode.
/// </BLOCKQUOTE></PRE>
///
/// Element "IrCutFilterAutoAdjustment" of type "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptions.
    tt__IrCutFilterAutoAdjustmentOptions*  IrCutFilterAutoAdjustment      0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension3.
    tt__ImagingOptions20Extension3*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension3 is a complexType.
///
/// @note class tt__ImagingOptions20Extension3 operations:
/// - tt__ImagingOptions20Extension3* soap_new_tt__ImagingOptions20Extension3(soap*) allocate and default initialize
/// - tt__ImagingOptions20Extension3* soap_new_tt__ImagingOptions20Extension3(soap*, int num) allocate and default initialize an array
/// - tt__ImagingOptions20Extension3* soap_new_req_tt__ImagingOptions20Extension3(soap*, ...) allocate, set required members
/// - tt__ImagingOptions20Extension3* soap_new_set_tt__ImagingOptions20Extension3(soap*, ...) allocate, set all public members
/// - tt__ImagingOptions20Extension3::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingOptions20Extension3(soap*, tt__ImagingOptions20Extension3*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension3(soap*, tt__ImagingOptions20Extension3*) serialize to a stream
/// - tt__ImagingOptions20Extension3* tt__ImagingOptions20Extension3::soap_dup(soap*) returns deep copy of tt__ImagingOptions20Extension3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingOptions20Extension3::soap_del() deep deletes tt__ImagingOptions20Extension3 data members, use only after tt__ImagingOptions20Extension3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingOptions20Extension3::soap_type() returns SOAP_TYPE_tt__ImagingOptions20Extension3 or derived type identifier
class tt__ImagingOptions20Extension3 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Tone Compensation feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "ToneCompensationOptions" of type "http://www.onvif.org/ver10/schema":ToneCompensationOptions.
    tt__ToneCompensationOptions*         ToneCompensationOptions        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Defogging feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefoggingOptions" of type "http://www.onvif.org/ver10/schema":DefoggingOptions.
    tt__DefoggingOptions*                DefoggingOptions               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Options of parameter for Noise Reduction feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "NoiseReductionOptions" of type "http://www.onvif.org/ver10/schema":NoiseReductionOptions.
    tt__NoiseReductionOptions*           NoiseReductionOptions          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension4.
    tt__ImagingOptions20Extension4*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension4 is a complexType.
///
/// @note class tt__ImagingOptions20Extension4 operations:
/// - tt__ImagingOptions20Extension4* soap_new_tt__ImagingOptions20Extension4(soap*) allocate and default initialize
/// - tt__ImagingOptions20Extension4* soap_new_tt__ImagingOptions20Extension4(soap*, int num) allocate and default initialize an array
/// - tt__ImagingOptions20Extension4* soap_new_req_tt__ImagingOptions20Extension4(soap*, ...) allocate, set required members
/// - tt__ImagingOptions20Extension4* soap_new_set_tt__ImagingOptions20Extension4(soap*, ...) allocate, set all public members
/// - tt__ImagingOptions20Extension4::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingOptions20Extension4(soap*, tt__ImagingOptions20Extension4*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension4(soap*, tt__ImagingOptions20Extension4*) serialize to a stream
/// - tt__ImagingOptions20Extension4* tt__ImagingOptions20Extension4::soap_dup(soap*) returns deep copy of tt__ImagingOptions20Extension4, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingOptions20Extension4::soap_del() deep deletes tt__ImagingOptions20Extension4 data members, use only after tt__ImagingOptions20Extension4::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingOptions20Extension4::soap_type() returns SOAP_TYPE_tt__ImagingOptions20Extension4 or derived type identifier
class tt__ImagingOptions20Extension4 : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationOptions is a complexType.
///
/// @note class tt__ImageStabilizationOptions operations:
/// - tt__ImageStabilizationOptions* soap_new_tt__ImageStabilizationOptions(soap*) allocate and default initialize
/// - tt__ImageStabilizationOptions* soap_new_tt__ImageStabilizationOptions(soap*, int num) allocate and default initialize an array
/// - tt__ImageStabilizationOptions* soap_new_req_tt__ImageStabilizationOptions(soap*, ...) allocate, set required members
/// - tt__ImageStabilizationOptions* soap_new_set_tt__ImageStabilizationOptions(soap*, ...) allocate, set all public members
/// - tt__ImageStabilizationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImageStabilizationOptions(soap*, tt__ImageStabilizationOptions*) deserialize from a stream
/// - int soap_write_tt__ImageStabilizationOptions(soap*, tt__ImageStabilizationOptions*) serialize to a stream
/// - tt__ImageStabilizationOptions* tt__ImageStabilizationOptions::soap_dup(soap*) returns deep copy of tt__ImageStabilizationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImageStabilizationOptions::soap_del() deep deletes tt__ImageStabilizationOptions data members, use only after tt__ImageStabilizationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImageStabilizationOptions::soap_type() returns SOAP_TYPE_tt__ImageStabilizationOptions or derived type identifier
class tt__ImageStabilizationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options of Image Stabilization mode parameter.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ImageStabilizationMode of length 1..unbounded.
    std::vector<tt__ImageStabilizationMode> Mode                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Image Stabilization.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImageStabilizationOptionsExtension.
    tt__ImageStabilizationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationOptionsExtension is a complexType.
///
/// @note class tt__ImageStabilizationOptionsExtension operations:
/// - tt__ImageStabilizationOptionsExtension* soap_new_tt__ImageStabilizationOptionsExtension(soap*) allocate and default initialize
/// - tt__ImageStabilizationOptionsExtension* soap_new_tt__ImageStabilizationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__ImageStabilizationOptionsExtension* soap_new_req_tt__ImageStabilizationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__ImageStabilizationOptionsExtension* soap_new_set_tt__ImageStabilizationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__ImageStabilizationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImageStabilizationOptionsExtension(soap*, tt__ImageStabilizationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__ImageStabilizationOptionsExtension(soap*, tt__ImageStabilizationOptionsExtension*) serialize to a stream
/// - tt__ImageStabilizationOptionsExtension* tt__ImageStabilizationOptionsExtension::soap_dup(soap*) returns deep copy of tt__ImageStabilizationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImageStabilizationOptionsExtension::soap_del() deep deletes tt__ImageStabilizationOptionsExtension data members, use only after tt__ImageStabilizationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImageStabilizationOptionsExtension::soap_type() returns SOAP_TYPE_tt__ImageStabilizationOptionsExtension or derived type identifier
class tt__ImageStabilizationOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptions is a complexType.
///
/// @note class tt__IrCutFilterAutoAdjustmentOptions operations:
/// - tt__IrCutFilterAutoAdjustmentOptions* soap_new_tt__IrCutFilterAutoAdjustmentOptions(soap*) allocate and default initialize
/// - tt__IrCutFilterAutoAdjustmentOptions* soap_new_tt__IrCutFilterAutoAdjustmentOptions(soap*, int num) allocate and default initialize an array
/// - tt__IrCutFilterAutoAdjustmentOptions* soap_new_req_tt__IrCutFilterAutoAdjustmentOptions(soap*, ...) allocate, set required members
/// - tt__IrCutFilterAutoAdjustmentOptions* soap_new_set_tt__IrCutFilterAutoAdjustmentOptions(soap*, ...) allocate, set all public members
/// - tt__IrCutFilterAutoAdjustmentOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__IrCutFilterAutoAdjustmentOptions(soap*, tt__IrCutFilterAutoAdjustmentOptions*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustmentOptions(soap*, tt__IrCutFilterAutoAdjustmentOptions*) serialize to a stream
/// - tt__IrCutFilterAutoAdjustmentOptions* tt__IrCutFilterAutoAdjustmentOptions::soap_dup(soap*) returns deep copy of tt__IrCutFilterAutoAdjustmentOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IrCutFilterAutoAdjustmentOptions::soap_del() deep deletes tt__IrCutFilterAutoAdjustmentOptions data members, use only after tt__IrCutFilterAutoAdjustmentOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IrCutFilterAutoAdjustmentOptions::soap_type() returns SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions or derived type identifier
class tt__IrCutFilterAutoAdjustmentOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options of boundary types for adjustment of Ir cut filter auto mode. The opptions shall be chosen from tt:IrCutFilterAutoBoundaryType.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > BoundaryType                   1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not boundary offset for toggling Ir cut filter is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "BoundaryOffset" of type xs:boolean.
    bool*                                BoundaryOffset                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of delay time for toggling Ir cut filter.
/// </BLOCKQUOTE></PRE>
///
/// Element "ResponseTimeRange" of type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   ResponseTimeRange              0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptionsExtension.
    tt__IrCutFilterAutoAdjustmentOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptionsExtension is a complexType.
///
/// @note class tt__IrCutFilterAutoAdjustmentOptionsExtension operations:
/// - tt__IrCutFilterAutoAdjustmentOptionsExtension* soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*) allocate and default initialize
/// - tt__IrCutFilterAutoAdjustmentOptionsExtension* soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__IrCutFilterAutoAdjustmentOptionsExtension* soap_new_req_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, ...) allocate, set required members
/// - tt__IrCutFilterAutoAdjustmentOptionsExtension* soap_new_set_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension*) serialize to a stream
/// - tt__IrCutFilterAutoAdjustmentOptionsExtension* tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_dup(soap*) returns deep copy of tt__IrCutFilterAutoAdjustmentOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_del() deep deletes tt__IrCutFilterAutoAdjustmentOptionsExtension data members, use only after tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_type() returns SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension or derived type identifier
class tt__IrCutFilterAutoAdjustmentOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions20 is a complexType.
///
/// @note class tt__WideDynamicRangeOptions20 operations:
/// - tt__WideDynamicRangeOptions20* soap_new_tt__WideDynamicRangeOptions20(soap*) allocate and default initialize
/// - tt__WideDynamicRangeOptions20* soap_new_tt__WideDynamicRangeOptions20(soap*, int num) allocate and default initialize an array
/// - tt__WideDynamicRangeOptions20* soap_new_req_tt__WideDynamicRangeOptions20(soap*, ...) allocate, set required members
/// - tt__WideDynamicRangeOptions20* soap_new_set_tt__WideDynamicRangeOptions20(soap*, ...) allocate, set all public members
/// - tt__WideDynamicRangeOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__WideDynamicRangeOptions20(soap*, tt__WideDynamicRangeOptions20*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRangeOptions20(soap*, tt__WideDynamicRangeOptions20*) serialize to a stream
/// - tt__WideDynamicRangeOptions20* tt__WideDynamicRangeOptions20::soap_dup(soap*) returns deep copy of tt__WideDynamicRangeOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WideDynamicRangeOptions20::soap_del() deep deletes tt__WideDynamicRangeOptions20 data members, use only after tt__WideDynamicRangeOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WideDynamicRangeOptions20::soap_type() returns SOAP_TYPE_tt__WideDynamicRangeOptions20 or derived type identifier
class tt__WideDynamicRangeOptions20 : public xsd__anyType
{ public:
/// Vector of tt__WideDynamicMode of length 1..unbounded.
    std::vector<tt__WideDynamicMode    > Mode                           1;	///< Multiple elements.
/// Element "Level" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensationOptions20 is a complexType.
///
/// @note class tt__BacklightCompensationOptions20 operations:
/// - tt__BacklightCompensationOptions20* soap_new_tt__BacklightCompensationOptions20(soap*) allocate and default initialize
/// - tt__BacklightCompensationOptions20* soap_new_tt__BacklightCompensationOptions20(soap*, int num) allocate and default initialize an array
/// - tt__BacklightCompensationOptions20* soap_new_req_tt__BacklightCompensationOptions20(soap*, ...) allocate, set required members
/// - tt__BacklightCompensationOptions20* soap_new_set_tt__BacklightCompensationOptions20(soap*, ...) allocate, set all public members
/// - tt__BacklightCompensationOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__BacklightCompensationOptions20(soap*, tt__BacklightCompensationOptions20*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensationOptions20(soap*, tt__BacklightCompensationOptions20*) serialize to a stream
/// - tt__BacklightCompensationOptions20* tt__BacklightCompensationOptions20::soap_dup(soap*) returns deep copy of tt__BacklightCompensationOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BacklightCompensationOptions20::soap_del() deep deletes tt__BacklightCompensationOptions20 data members, use only after tt__BacklightCompensationOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BacklightCompensationOptions20::soap_type() returns SOAP_TYPE_tt__BacklightCompensationOptions20 or derived type identifier
class tt__BacklightCompensationOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   'ON' or 'OFF'
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__BacklightCompensationMode of length 1..unbounded.
    std::vector<tt__BacklightCompensationMode> Mode                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Level range of BacklightCompensation.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ExposureOptions20 is a complexType.
///
/// @note class tt__ExposureOptions20 operations:
/// - tt__ExposureOptions20* soap_new_tt__ExposureOptions20(soap*) allocate and default initialize
/// - tt__ExposureOptions20* soap_new_tt__ExposureOptions20(soap*, int num) allocate and default initialize an array
/// - tt__ExposureOptions20* soap_new_req_tt__ExposureOptions20(soap*, ...) allocate, set required members
/// - tt__ExposureOptions20* soap_new_set_tt__ExposureOptions20(soap*, ...) allocate, set all public members
/// - tt__ExposureOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__ExposureOptions20(soap*, tt__ExposureOptions20*) deserialize from a stream
/// - int soap_write_tt__ExposureOptions20(soap*, tt__ExposureOptions20*) serialize to a stream
/// - tt__ExposureOptions20* tt__ExposureOptions20::soap_dup(soap*) returns deep copy of tt__ExposureOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ExposureOptions20::soap_del() deep deletes tt__ExposureOptions20 data members, use only after tt__ExposureOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ExposureOptions20::soap_type() returns SOAP_TYPE_tt__ExposureOptions20 or derived type identifier
class tt__ExposureOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the device.</li>
///   <li>Manual Disabled exposure algorithm on the device.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ExposureMode of length 1..unbounded.
    std::vector<tt__ExposureMode       > Mode                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ExposurePriority of length 0..unbounded.
    std::vector<tt__ExposurePriority   > Priority                       0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Minimum ExposureTime.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinExposureTime" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Maximum ExposureTime.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxExposureTime" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Minimum Gain.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Maximum Gain.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Minimum Iris.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinIris" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Maximum Iris.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxIris" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the ExposureTime.
/// </BLOCKQUOTE></PRE>
///
/// Element "ExposureTime" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ExposureTime                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Gain.
/// </BLOCKQUOTE></PRE>
///
/// Element "Gain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Gain                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Iris.
/// </BLOCKQUOTE></PRE>
///
/// Element "Iris" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Iris                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":MoveOptions20 is a complexType.
///
/// @note class tt__MoveOptions20 operations:
/// - tt__MoveOptions20* soap_new_tt__MoveOptions20(soap*) allocate and default initialize
/// - tt__MoveOptions20* soap_new_tt__MoveOptions20(soap*, int num) allocate and default initialize an array
/// - tt__MoveOptions20* soap_new_req_tt__MoveOptions20(soap*, ...) allocate, set required members
/// - tt__MoveOptions20* soap_new_set_tt__MoveOptions20(soap*, ...) allocate, set all public members
/// - tt__MoveOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__MoveOptions20(soap*, tt__MoveOptions20*) deserialize from a stream
/// - int soap_write_tt__MoveOptions20(soap*, tt__MoveOptions20*) serialize to a stream
/// - tt__MoveOptions20* tt__MoveOptions20::soap_dup(soap*) returns deep copy of tt__MoveOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MoveOptions20::soap_del() deep deletes tt__MoveOptions20 data members, use only after tt__MoveOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MoveOptions20::soap_type() returns SOAP_TYPE_tt__MoveOptions20 or derived type identifier
class tt__MoveOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges for the absolute control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Absolute" of type "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions.
    tt__AbsoluteFocusOptions*            Absolute                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges for the relative control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Relative" of type "http://www.onvif.org/ver10/schema":RelativeFocusOptions20.
    tt__RelativeFocusOptions20*          Relative                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges for the continuous control.
/// </BLOCKQUOTE></PRE>
///
/// Element "Continuous" of type "http://www.onvif.org/ver10/schema":ContinuousFocusOptions.
    tt__ContinuousFocusOptions*          Continuous                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":RelativeFocusOptions20 is a complexType.
///
/// @note class tt__RelativeFocusOptions20 operations:
/// - tt__RelativeFocusOptions20* soap_new_tt__RelativeFocusOptions20(soap*) allocate and default initialize
/// - tt__RelativeFocusOptions20* soap_new_tt__RelativeFocusOptions20(soap*, int num) allocate and default initialize an array
/// - tt__RelativeFocusOptions20* soap_new_req_tt__RelativeFocusOptions20(soap*, ...) allocate, set required members
/// - tt__RelativeFocusOptions20* soap_new_set_tt__RelativeFocusOptions20(soap*, ...) allocate, set all public members
/// - tt__RelativeFocusOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__RelativeFocusOptions20(soap*, tt__RelativeFocusOptions20*) deserialize from a stream
/// - int soap_write_tt__RelativeFocusOptions20(soap*, tt__RelativeFocusOptions20*) serialize to a stream
/// - tt__RelativeFocusOptions20* tt__RelativeFocusOptions20::soap_dup(soap*) returns deep copy of tt__RelativeFocusOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RelativeFocusOptions20::soap_del() deep deletes tt__RelativeFocusOptions20 data members, use only after tt__RelativeFocusOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RelativeFocusOptions20::soap_type() returns SOAP_TYPE_tt__RelativeFocusOptions20 or derived type identifier
class tt__RelativeFocusOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "Distance" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Distance                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance20 is a complexType.
///
/// @note class tt__WhiteBalance20 operations:
/// - tt__WhiteBalance20* soap_new_tt__WhiteBalance20(soap*) allocate and default initialize
/// - tt__WhiteBalance20* soap_new_tt__WhiteBalance20(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalance20* soap_new_req_tt__WhiteBalance20(soap*, ...) allocate, set required members
/// - tt__WhiteBalance20* soap_new_set_tt__WhiteBalance20(soap*, ...) allocate, set all public members
/// - tt__WhiteBalance20::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalance20(soap*, tt__WhiteBalance20*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance20(soap*, tt__WhiteBalance20*) serialize to a stream
/// - tt__WhiteBalance20* tt__WhiteBalance20::soap_dup(soap*) returns deep copy of tt__WhiteBalance20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalance20::soap_del() deep deletes tt__WhiteBalance20 data members, use only after tt__WhiteBalance20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalance20::soap_type() returns SOAP_TYPE_tt__WhiteBalance20 or derived type identifier
class tt__WhiteBalance20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   'AUTO' or 'MANUAL'
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    tt__WhiteBalanceMode                 Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CrGain" of type xs:float.
    float*                               CrGain                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CbGain" of type xs:float.
    float*                               CbGain                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":WhiteBalance20Extension.
    tt__WhiteBalance20Extension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance20Extension is a complexType.
///
/// @note class tt__WhiteBalance20Extension operations:
/// - tt__WhiteBalance20Extension* soap_new_tt__WhiteBalance20Extension(soap*) allocate and default initialize
/// - tt__WhiteBalance20Extension* soap_new_tt__WhiteBalance20Extension(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalance20Extension* soap_new_req_tt__WhiteBalance20Extension(soap*, ...) allocate, set required members
/// - tt__WhiteBalance20Extension* soap_new_set_tt__WhiteBalance20Extension(soap*, ...) allocate, set all public members
/// - tt__WhiteBalance20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalance20Extension(soap*, tt__WhiteBalance20Extension*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance20Extension(soap*, tt__WhiteBalance20Extension*) serialize to a stream
/// - tt__WhiteBalance20Extension* tt__WhiteBalance20Extension::soap_dup(soap*) returns deep copy of tt__WhiteBalance20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalance20Extension::soap_del() deep deletes tt__WhiteBalance20Extension data members, use only after tt__WhiteBalance20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalance20Extension::soap_type() returns SOAP_TYPE_tt__WhiteBalance20Extension or derived type identifier
class tt__WhiteBalance20Extension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration20 is a complexType.
///
/// @note class tt__FocusConfiguration20 operations:
/// - tt__FocusConfiguration20* soap_new_tt__FocusConfiguration20(soap*) allocate and default initialize
/// - tt__FocusConfiguration20* soap_new_tt__FocusConfiguration20(soap*, int num) allocate and default initialize an array
/// - tt__FocusConfiguration20* soap_new_req_tt__FocusConfiguration20(soap*, ...) allocate, set required members
/// - tt__FocusConfiguration20* soap_new_set_tt__FocusConfiguration20(soap*, ...) allocate, set all public members
/// - tt__FocusConfiguration20::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusConfiguration20(soap*, tt__FocusConfiguration20*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration20(soap*, tt__FocusConfiguration20*) serialize to a stream
/// - tt__FocusConfiguration20* tt__FocusConfiguration20::soap_dup(soap*) returns deep copy of tt__FocusConfiguration20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusConfiguration20::soap_del() deep deletes tt__FocusConfiguration20 data members, use only after tt__FocusConfiguration20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusConfiguration20::soap_type() returns SOAP_TYPE_tt__FocusConfiguration20 or derived type identifier
class tt__FocusConfiguration20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mode of auto focus.
///   <ul>
///   <li>AUTO - The device automatically adjusts focus.</li>
///   <li>MANUAL - The device does not automatically adjust focus.</li>
///   </ul>
///   Note: for devices supporting both manual and auto operation at the same time manual operation may be supported even if the Mode parameter is set to Auto.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoFocusMode" of type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    tt__AutoFocusMode                    AutoFocusMode                  1;	///< Required element.
/// Element "DefaultSpeed" of type xs:float.
    float*                               DefaultSpeed                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus near limit (unit: meter).
/// </BLOCKQUOTE></PRE>
///
/// Element "NearLimit" of type xs:float.
    float*                               NearLimit                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus far limit (unit: meter).
/// </BLOCKQUOTE></PRE>
///
/// Element "FarLimit" of type xs:float.
    float*                               FarLimit                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension.
    tt__FocusConfiguration20Extension*   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension is a complexType.
///
/// @note class tt__FocusConfiguration20Extension operations:
/// - tt__FocusConfiguration20Extension* soap_new_tt__FocusConfiguration20Extension(soap*) allocate and default initialize
/// - tt__FocusConfiguration20Extension* soap_new_tt__FocusConfiguration20Extension(soap*, int num) allocate and default initialize an array
/// - tt__FocusConfiguration20Extension* soap_new_req_tt__FocusConfiguration20Extension(soap*, ...) allocate, set required members
/// - tt__FocusConfiguration20Extension* soap_new_set_tt__FocusConfiguration20Extension(soap*, ...) allocate, set all public members
/// - tt__FocusConfiguration20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusConfiguration20Extension(soap*, tt__FocusConfiguration20Extension*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration20Extension(soap*, tt__FocusConfiguration20Extension*) serialize to a stream
/// - tt__FocusConfiguration20Extension* tt__FocusConfiguration20Extension::soap_dup(soap*) returns deep copy of tt__FocusConfiguration20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusConfiguration20Extension::soap_del() deep deletes tt__FocusConfiguration20Extension data members, use only after tt__FocusConfiguration20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusConfiguration20Extension::soap_type() returns SOAP_TYPE_tt__FocusConfiguration20Extension or derived type identifier
class tt__FocusConfiguration20Extension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20 is a complexType.
///
/// @note class tt__WhiteBalanceOptions20 operations:
/// - tt__WhiteBalanceOptions20* soap_new_tt__WhiteBalanceOptions20(soap*) allocate and default initialize
/// - tt__WhiteBalanceOptions20* soap_new_tt__WhiteBalanceOptions20(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalanceOptions20* soap_new_req_tt__WhiteBalanceOptions20(soap*, ...) allocate, set required members
/// - tt__WhiteBalanceOptions20* soap_new_set_tt__WhiteBalanceOptions20(soap*, ...) allocate, set all public members
/// - tt__WhiteBalanceOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalanceOptions20(soap*, tt__WhiteBalanceOptions20*) deserialize from a stream
/// - int soap_write_tt__WhiteBalanceOptions20(soap*, tt__WhiteBalanceOptions20*) serialize to a stream
/// - tt__WhiteBalanceOptions20* tt__WhiteBalanceOptions20::soap_dup(soap*) returns deep copy of tt__WhiteBalanceOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalanceOptions20::soap_del() deep deletes tt__WhiteBalanceOptions20 data members, use only after tt__WhiteBalanceOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalanceOptions20::soap_type() returns SOAP_TYPE_tt__WhiteBalanceOptions20 or derived type identifier
class tt__WhiteBalanceOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mode of WhiteBalance.
///   <ul>
///   <li>AUTO</li>
///   <li>MANUAL</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__WhiteBalanceMode of length 1..unbounded.
    std::vector<tt__WhiteBalanceMode   > Mode                           1;	///< Multiple elements.
/// Element "YrGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YrGain                         0;	///< Optional element.
/// Element "YbGain" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YbGain                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20Extension.
    tt__WhiteBalanceOptions20Extension*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20Extension is a complexType.
///
/// @note class tt__WhiteBalanceOptions20Extension operations:
/// - tt__WhiteBalanceOptions20Extension* soap_new_tt__WhiteBalanceOptions20Extension(soap*) allocate and default initialize
/// - tt__WhiteBalanceOptions20Extension* soap_new_tt__WhiteBalanceOptions20Extension(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalanceOptions20Extension* soap_new_req_tt__WhiteBalanceOptions20Extension(soap*, ...) allocate, set required members
/// - tt__WhiteBalanceOptions20Extension* soap_new_set_tt__WhiteBalanceOptions20Extension(soap*, ...) allocate, set all public members
/// - tt__WhiteBalanceOptions20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalanceOptions20Extension(soap*, tt__WhiteBalanceOptions20Extension*) deserialize from a stream
/// - int soap_write_tt__WhiteBalanceOptions20Extension(soap*, tt__WhiteBalanceOptions20Extension*) serialize to a stream
/// - tt__WhiteBalanceOptions20Extension* tt__WhiteBalanceOptions20Extension::soap_dup(soap*) returns deep copy of tt__WhiteBalanceOptions20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalanceOptions20Extension::soap_del() deep deletes tt__WhiteBalanceOptions20Extension data members, use only after tt__WhiteBalanceOptions20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalanceOptions20Extension::soap_type() returns SOAP_TYPE_tt__WhiteBalanceOptions20Extension or derived type identifier
class tt__WhiteBalanceOptions20Extension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusOptions20 is a complexType.
///
/// @note class tt__FocusOptions20 operations:
/// - tt__FocusOptions20* soap_new_tt__FocusOptions20(soap*) allocate and default initialize
/// - tt__FocusOptions20* soap_new_tt__FocusOptions20(soap*, int num) allocate and default initialize an array
/// - tt__FocusOptions20* soap_new_req_tt__FocusOptions20(soap*, ...) allocate, set required members
/// - tt__FocusOptions20* soap_new_set_tt__FocusOptions20(soap*, ...) allocate, set all public members
/// - tt__FocusOptions20::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusOptions20(soap*, tt__FocusOptions20*) deserialize from a stream
/// - int soap_write_tt__FocusOptions20(soap*, tt__FocusOptions20*) serialize to a stream
/// - tt__FocusOptions20* tt__FocusOptions20::soap_dup(soap*) returns deep copy of tt__FocusOptions20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusOptions20::soap_del() deep deletes tt__FocusOptions20 data members, use only after tt__FocusOptions20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusOptions20::soap_type() returns SOAP_TYPE_tt__FocusOptions20 or derived type identifier
class tt__FocusOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported modes for auto focus.
///   <ul>
///   <li>AUTO - The device supports automatic focus adjustment.</li>
///   <li>MANUAL - The device supports manual focus adjustment.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__AutoFocusMode of length 0..unbounded.
    std::vector<tt__AutoFocusMode      > AutoFocusModes                 0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Valid range of DefaultSpeed.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultSpeed" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      DefaultSpeed                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of NearLimit.
/// </BLOCKQUOTE></PRE>
///
/// Element "NearLimit" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      NearLimit                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of FarLimit.
/// </BLOCKQUOTE></PRE>
///
/// Element "FarLimit" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      FarLimit                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":FocusOptions20Extension.
    tt__FocusOptions20Extension*         Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusOptions20Extension is a complexType.
///
/// @note class tt__FocusOptions20Extension operations:
/// - tt__FocusOptions20Extension* soap_new_tt__FocusOptions20Extension(soap*) allocate and default initialize
/// - tt__FocusOptions20Extension* soap_new_tt__FocusOptions20Extension(soap*, int num) allocate and default initialize an array
/// - tt__FocusOptions20Extension* soap_new_req_tt__FocusOptions20Extension(soap*, ...) allocate, set required members
/// - tt__FocusOptions20Extension* soap_new_set_tt__FocusOptions20Extension(soap*, ...) allocate, set all public members
/// - tt__FocusOptions20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusOptions20Extension(soap*, tt__FocusOptions20Extension*) deserialize from a stream
/// - int soap_write_tt__FocusOptions20Extension(soap*, tt__FocusOptions20Extension*) serialize to a stream
/// - tt__FocusOptions20Extension* tt__FocusOptions20Extension::soap_dup(soap*) returns deep copy of tt__FocusOptions20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusOptions20Extension::soap_del() deep deletes tt__FocusOptions20Extension data members, use only after tt__FocusOptions20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusOptions20Extension::soap_type() returns SOAP_TYPE_tt__FocusOptions20Extension or derived type identifier
class tt__FocusOptions20Extension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensationOptions is a complexType.
///
/// @note class tt__ToneCompensationOptions operations:
/// - tt__ToneCompensationOptions* soap_new_tt__ToneCompensationOptions(soap*) allocate and default initialize
/// - tt__ToneCompensationOptions* soap_new_tt__ToneCompensationOptions(soap*, int num) allocate and default initialize an array
/// - tt__ToneCompensationOptions* soap_new_req_tt__ToneCompensationOptions(soap*, ...) allocate, set required members
/// - tt__ToneCompensationOptions* soap_new_set_tt__ToneCompensationOptions(soap*, ...) allocate, set all public members
/// - tt__ToneCompensationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ToneCompensationOptions(soap*, tt__ToneCompensationOptions*) deserialize from a stream
/// - int soap_write_tt__ToneCompensationOptions(soap*, tt__ToneCompensationOptions*) serialize to a stream
/// - tt__ToneCompensationOptions* tt__ToneCompensationOptions::soap_dup(soap*) returns deep copy of tt__ToneCompensationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ToneCompensationOptions::soap_del() deep deletes tt__ToneCompensationOptions data members, use only after tt__ToneCompensationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ToneCompensationOptions::soap_type() returns SOAP_TYPE_tt__ToneCompensationOptions or derived type identifier
class tt__ToneCompensationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for Tone Compensation mode. Its options shall be chosen from tt:ToneCompensationMode Type.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Mode                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not support Level parameter for Tone Compensation.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:boolean.
    bool                                 Level                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DefoggingOptions is a complexType.
///
/// @note class tt__DefoggingOptions operations:
/// - tt__DefoggingOptions* soap_new_tt__DefoggingOptions(soap*) allocate and default initialize
/// - tt__DefoggingOptions* soap_new_tt__DefoggingOptions(soap*, int num) allocate and default initialize an array
/// - tt__DefoggingOptions* soap_new_req_tt__DefoggingOptions(soap*, ...) allocate, set required members
/// - tt__DefoggingOptions* soap_new_set_tt__DefoggingOptions(soap*, ...) allocate, set all public members
/// - tt__DefoggingOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__DefoggingOptions(soap*, tt__DefoggingOptions*) deserialize from a stream
/// - int soap_write_tt__DefoggingOptions(soap*, tt__DefoggingOptions*) serialize to a stream
/// - tt__DefoggingOptions* tt__DefoggingOptions::soap_dup(soap*) returns deep copy of tt__DefoggingOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DefoggingOptions::soap_del() deep deletes tt__DefoggingOptions data members, use only after tt__DefoggingOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DefoggingOptions::soap_type() returns SOAP_TYPE_tt__DefoggingOptions or derived type identifier
class tt__DefoggingOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for Defogging mode. Its options shall be chosen from tt:DefoggingMode Type.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Mode                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not support Level parameter for Defogging.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:boolean.
    bool                                 Level                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NoiseReductionOptions is a complexType.
///
/// @note class tt__NoiseReductionOptions operations:
/// - tt__NoiseReductionOptions* soap_new_tt__NoiseReductionOptions(soap*) allocate and default initialize
/// - tt__NoiseReductionOptions* soap_new_tt__NoiseReductionOptions(soap*, int num) allocate and default initialize an array
/// - tt__NoiseReductionOptions* soap_new_req_tt__NoiseReductionOptions(soap*, ...) allocate, set required members
/// - tt__NoiseReductionOptions* soap_new_set_tt__NoiseReductionOptions(soap*, ...) allocate, set all public members
/// - tt__NoiseReductionOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__NoiseReductionOptions(soap*, tt__NoiseReductionOptions*) deserialize from a stream
/// - int soap_write_tt__NoiseReductionOptions(soap*, tt__NoiseReductionOptions*) serialize to a stream
/// - tt__NoiseReductionOptions* tt__NoiseReductionOptions::soap_dup(soap*) returns deep copy of tt__NoiseReductionOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NoiseReductionOptions::soap_del() deep deletes tt__NoiseReductionOptions data members, use only after tt__NoiseReductionOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NoiseReductionOptions::soap_type() returns SOAP_TYPE_tt__NoiseReductionOptions or derived type identifier
class tt__NoiseReductionOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not support Level parameter for NoiseReduction.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:boolean.
    bool                                 Level                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MessageExtension is a complexType.
///
/// @note class tt__MessageExtension operations:
/// - tt__MessageExtension* soap_new_tt__MessageExtension(soap*) allocate and default initialize
/// - tt__MessageExtension* soap_new_tt__MessageExtension(soap*, int num) allocate and default initialize an array
/// - tt__MessageExtension* soap_new_req_tt__MessageExtension(soap*, ...) allocate, set required members
/// - tt__MessageExtension* soap_new_set_tt__MessageExtension(soap*, ...) allocate, set all public members
/// - tt__MessageExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MessageExtension(soap*, tt__MessageExtension*) deserialize from a stream
/// - int soap_write_tt__MessageExtension(soap*, tt__MessageExtension*) serialize to a stream
/// - tt__MessageExtension* tt__MessageExtension::soap_dup(soap*) returns deep copy of tt__MessageExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MessageExtension::soap_del() deep deletes tt__MessageExtension data members, use only after tt__MessageExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MessageExtension::soap_type() returns SOAP_TYPE_tt__MessageExtension or derived type identifier
class tt__MessageExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemList is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   List of parameters according to the corresponding ItemListDescription.
///   Each item in the list shall have a unique name.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ItemList operations:
/// - tt__ItemList* soap_new_tt__ItemList(soap*) allocate and default initialize
/// - tt__ItemList* soap_new_tt__ItemList(soap*, int num) allocate and default initialize an array
/// - tt__ItemList* soap_new_req_tt__ItemList(soap*, ...) allocate, set required members
/// - tt__ItemList* soap_new_set_tt__ItemList(soap*, ...) allocate, set all public members
/// - tt__ItemList::soap_default(soap*) default initialize members
/// - int soap_read_tt__ItemList(soap*, tt__ItemList*) deserialize from a stream
/// - int soap_write_tt__ItemList(soap*, tt__ItemList*) serialize to a stream
/// - tt__ItemList* tt__ItemList::soap_dup(soap*) returns deep copy of tt__ItemList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ItemList::soap_del() deep deletes tt__ItemList data members, use only after tt__ItemList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ItemList::soap_type() returns SOAP_TYPE_tt__ItemList or derived type identifier
class tt__ItemList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Value name pair as defined by the corresponding description.
/// </BLOCKQUOTE></PRE>
///
/// Vector of SimpleItem of length 0..unbounded.
    std::vector<
/// @note class _tt__ItemList_SimpleItem operations:
/// - _tt__ItemList_SimpleItem* soap_new__tt__ItemList_SimpleItem(soap*) allocate and default initialize
/// - _tt__ItemList_SimpleItem* soap_new__tt__ItemList_SimpleItem(soap*, int num) allocate and default initialize an array
/// - _tt__ItemList_SimpleItem* soap_new_req__tt__ItemList_SimpleItem(soap*, ...) allocate, set required members
/// - _tt__ItemList_SimpleItem* soap_new_set__tt__ItemList_SimpleItem(soap*, ...) allocate, set all public members
/// - _tt__ItemList_SimpleItem::soap_default(soap*) default initialize members
/// - int soap_read__tt__ItemList_SimpleItem(soap*, _tt__ItemList_SimpleItem*) deserialize from a stream
/// - int soap_write__tt__ItemList_SimpleItem(soap*, _tt__ItemList_SimpleItem*) serialize to a stream
/// - _tt__ItemList_SimpleItem* _tt__ItemList_SimpleItem::soap_dup(soap*) returns deep copy of _tt__ItemList_SimpleItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__ItemList_SimpleItem::soap_del() deep deletes _tt__ItemList_SimpleItem data members, use only after _tt__ItemList_SimpleItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__ItemList_SimpleItem::soap_type() returns SOAP_TYPE__tt__ItemList_SimpleItem or derived type identifier
    class _tt__ItemList_SimpleItem
    { public:
/// <PRE><BLOCKQUOTE>
///   Item name.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ std::string                          Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Item value. The type is defined in the corresponding description.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Value" of type xs:anySimpleType.
  @ xsd__anySimpleType                   Value                          1;	///< Required attribute.
    }>                                   SimpleItem                     0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Complex value structure.
/// </BLOCKQUOTE></PRE>
///
/// Vector of ElementItem of length 0..unbounded.
    std::vector<
/// @note class _tt__ItemList_ElementItem operations:
/// - _tt__ItemList_ElementItem* soap_new__tt__ItemList_ElementItem(soap*) allocate and default initialize
/// - _tt__ItemList_ElementItem* soap_new__tt__ItemList_ElementItem(soap*, int num) allocate and default initialize an array
/// - _tt__ItemList_ElementItem* soap_new_req__tt__ItemList_ElementItem(soap*, ...) allocate, set required members
/// - _tt__ItemList_ElementItem* soap_new_set__tt__ItemList_ElementItem(soap*, ...) allocate, set all public members
/// - _tt__ItemList_ElementItem::soap_default(soap*) default initialize members
/// - int soap_read__tt__ItemList_ElementItem(soap*, _tt__ItemList_ElementItem*) deserialize from a stream
/// - int soap_write__tt__ItemList_ElementItem(soap*, _tt__ItemList_ElementItem*) serialize to a stream
/// - _tt__ItemList_ElementItem* _tt__ItemList_ElementItem::soap_dup(soap*) returns deep copy of _tt__ItemList_ElementItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__ItemList_ElementItem::soap_del() deep deletes _tt__ItemList_ElementItem data members, use only after _tt__ItemList_ElementItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__ItemList_ElementItem::soap_type() returns SOAP_TYPE__tt__ItemList_ElementItem or derived type identifier
    class _tt__ItemList_ElementItem
    { public:
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Item name.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ std::string                          Name                           1;	///< Required attribute.
    }>                                   ElementItem                    0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ItemListExtension.
    tt__ItemListExtension*               Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemListExtension is a complexType.
///
/// @note class tt__ItemListExtension operations:
/// - tt__ItemListExtension* soap_new_tt__ItemListExtension(soap*) allocate and default initialize
/// - tt__ItemListExtension* soap_new_tt__ItemListExtension(soap*, int num) allocate and default initialize an array
/// - tt__ItemListExtension* soap_new_req_tt__ItemListExtension(soap*, ...) allocate, set required members
/// - tt__ItemListExtension* soap_new_set_tt__ItemListExtension(soap*, ...) allocate, set all public members
/// - tt__ItemListExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ItemListExtension(soap*, tt__ItemListExtension*) deserialize from a stream
/// - int soap_write_tt__ItemListExtension(soap*, tt__ItemListExtension*) serialize to a stream
/// - tt__ItemListExtension* tt__ItemListExtension::soap_dup(soap*) returns deep copy of tt__ItemListExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ItemListExtension::soap_del() deep deletes tt__ItemListExtension data members, use only after tt__ItemListExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ItemListExtension::soap_type() returns SOAP_TYPE_tt__ItemListExtension or derived type identifier
class tt__ItemListExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":MessageDescription is a complexType.
///
/// @note class tt__MessageDescription operations:
/// - tt__MessageDescription* soap_new_tt__MessageDescription(soap*) allocate and default initialize
/// - tt__MessageDescription* soap_new_tt__MessageDescription(soap*, int num) allocate and default initialize an array
/// - tt__MessageDescription* soap_new_req_tt__MessageDescription(soap*, ...) allocate, set required members
/// - tt__MessageDescription* soap_new_set_tt__MessageDescription(soap*, ...) allocate, set all public members
/// - tt__MessageDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__MessageDescription(soap*, tt__MessageDescription*) deserialize from a stream
/// - int soap_write_tt__MessageDescription(soap*, tt__MessageDescription*) serialize to a stream
/// - tt__MessageDescription* tt__MessageDescription::soap_dup(soap*) returns deep copy of tt__MessageDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MessageDescription::soap_del() deep deletes tt__MessageDescription data members, use only after tt__MessageDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MessageDescription::soap_type() returns SOAP_TYPE_tt__MessageDescription or derived type identifier
class tt__MessageDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Set of tokens producing this message. The list may only contain SimpleItemDescription items.
///   The set of tokens identify the component within the WS-Endpoint, which is responsible for the producing the message.<br/>
///   For analytics events the token set shall include the VideoSourceConfigurationToken, the VideoAnalyticsConfigurationToken
///   and the name of the analytics module or rule.
/// </BLOCKQUOTE></PRE>
///
/// Element "Source" of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Source                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes optional message payload parameters that may be used as key. E.g. object IDs of tracked objects are conveyed as key.
/// </BLOCKQUOTE></PRE>
///
/// Element "Key" of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Key                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the payload of the message.
/// </BLOCKQUOTE></PRE>
///
/// Element "Data" of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Data                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MessageDescriptionExtension.
    tt__MessageDescriptionExtension*     Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Must be set to true when the described Message relates to a property. An alternative term of "property" is a "state" in contrast to a pure event, which contains relevant information for only a single point in time.<br/>Default is false.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "IsProperty" of type xs:boolean.
  @ bool*                                IsProperty                     0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MessageDescriptionExtension is a complexType.
///
/// @note class tt__MessageDescriptionExtension operations:
/// - tt__MessageDescriptionExtension* soap_new_tt__MessageDescriptionExtension(soap*) allocate and default initialize
/// - tt__MessageDescriptionExtension* soap_new_tt__MessageDescriptionExtension(soap*, int num) allocate and default initialize an array
/// - tt__MessageDescriptionExtension* soap_new_req_tt__MessageDescriptionExtension(soap*, ...) allocate, set required members
/// - tt__MessageDescriptionExtension* soap_new_set_tt__MessageDescriptionExtension(soap*, ...) allocate, set all public members
/// - tt__MessageDescriptionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MessageDescriptionExtension(soap*, tt__MessageDescriptionExtension*) deserialize from a stream
/// - int soap_write_tt__MessageDescriptionExtension(soap*, tt__MessageDescriptionExtension*) serialize to a stream
/// - tt__MessageDescriptionExtension* tt__MessageDescriptionExtension::soap_dup(soap*) returns deep copy of tt__MessageDescriptionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MessageDescriptionExtension::soap_del() deep deletes tt__MessageDescriptionExtension data members, use only after tt__MessageDescriptionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MessageDescriptionExtension::soap_type() returns SOAP_TYPE_tt__MessageDescriptionExtension or derived type identifier
class tt__MessageDescriptionExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemListDescription is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes a list of items. Each item in the list shall have a unique name.
///   The list is designed as linear structure without optional or unbounded elements.
///   Use ElementItems only when complex structures are inevitable.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ItemListDescription operations:
/// - tt__ItemListDescription* soap_new_tt__ItemListDescription(soap*) allocate and default initialize
/// - tt__ItemListDescription* soap_new_tt__ItemListDescription(soap*, int num) allocate and default initialize an array
/// - tt__ItemListDescription* soap_new_req_tt__ItemListDescription(soap*, ...) allocate, set required members
/// - tt__ItemListDescription* soap_new_set_tt__ItemListDescription(soap*, ...) allocate, set all public members
/// - tt__ItemListDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__ItemListDescription(soap*, tt__ItemListDescription*) deserialize from a stream
/// - int soap_write_tt__ItemListDescription(soap*, tt__ItemListDescription*) serialize to a stream
/// - tt__ItemListDescription* tt__ItemListDescription::soap_dup(soap*) returns deep copy of tt__ItemListDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ItemListDescription::soap_del() deep deletes tt__ItemListDescription data members, use only after tt__ItemListDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ItemListDescription::soap_type() returns SOAP_TYPE_tt__ItemListDescription or derived type identifier
class tt__ItemListDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Description of a simple item. The type must be of cathegory simpleType (xs:string, xs:integer, xs:float, ...).
/// </BLOCKQUOTE></PRE>
///
/// Vector of SimpleItemDescription of length 0..unbounded.
    std::vector<
/// @note class _tt__ItemListDescription_SimpleItemDescription operations:
/// - _tt__ItemListDescription_SimpleItemDescription* soap_new__tt__ItemListDescription_SimpleItemDescription(soap*) allocate and default initialize
/// - _tt__ItemListDescription_SimpleItemDescription* soap_new__tt__ItemListDescription_SimpleItemDescription(soap*, int num) allocate and default initialize an array
/// - _tt__ItemListDescription_SimpleItemDescription* soap_new_req__tt__ItemListDescription_SimpleItemDescription(soap*, ...) allocate, set required members
/// - _tt__ItemListDescription_SimpleItemDescription* soap_new_set__tt__ItemListDescription_SimpleItemDescription(soap*, ...) allocate, set all public members
/// - _tt__ItemListDescription_SimpleItemDescription::soap_default(soap*) default initialize members
/// - int soap_read__tt__ItemListDescription_SimpleItemDescription(soap*, _tt__ItemListDescription_SimpleItemDescription*) deserialize from a stream
/// - int soap_write__tt__ItemListDescription_SimpleItemDescription(soap*, _tt__ItemListDescription_SimpleItemDescription*) serialize to a stream
/// - _tt__ItemListDescription_SimpleItemDescription* _tt__ItemListDescription_SimpleItemDescription::soap_dup(soap*) returns deep copy of _tt__ItemListDescription_SimpleItemDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__ItemListDescription_SimpleItemDescription::soap_del() deep deletes _tt__ItemListDescription_SimpleItemDescription data members, use only after _tt__ItemListDescription_SimpleItemDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__ItemListDescription_SimpleItemDescription::soap_type() returns SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription or derived type identifier
    class _tt__ItemListDescription_SimpleItemDescription
    { public:
/// <PRE><BLOCKQUOTE>
///   Item name. Must be unique within a list.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ std::string                          Name                           1;	///< Required attribute.
/// Attribute "Type" of type xs:QName.
  @ xsd__QName                           Type                           1;	///< Required attribute.
    }>                                   SimpleItemDescription          0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Description of a complex type. The Type must reference a defined type.
/// </BLOCKQUOTE></PRE>
///
/// Vector of ElementItemDescription of length 0..unbounded.
    std::vector<
/// @note class _tt__ItemListDescription_ElementItemDescription operations:
/// - _tt__ItemListDescription_ElementItemDescription* soap_new__tt__ItemListDescription_ElementItemDescription(soap*) allocate and default initialize
/// - _tt__ItemListDescription_ElementItemDescription* soap_new__tt__ItemListDescription_ElementItemDescription(soap*, int num) allocate and default initialize an array
/// - _tt__ItemListDescription_ElementItemDescription* soap_new_req__tt__ItemListDescription_ElementItemDescription(soap*, ...) allocate, set required members
/// - _tt__ItemListDescription_ElementItemDescription* soap_new_set__tt__ItemListDescription_ElementItemDescription(soap*, ...) allocate, set all public members
/// - _tt__ItemListDescription_ElementItemDescription::soap_default(soap*) default initialize members
/// - int soap_read__tt__ItemListDescription_ElementItemDescription(soap*, _tt__ItemListDescription_ElementItemDescription*) deserialize from a stream
/// - int soap_write__tt__ItemListDescription_ElementItemDescription(soap*, _tt__ItemListDescription_ElementItemDescription*) serialize to a stream
/// - _tt__ItemListDescription_ElementItemDescription* _tt__ItemListDescription_ElementItemDescription::soap_dup(soap*) returns deep copy of _tt__ItemListDescription_ElementItemDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__ItemListDescription_ElementItemDescription::soap_del() deep deletes _tt__ItemListDescription_ElementItemDescription data members, use only after _tt__ItemListDescription_ElementItemDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__ItemListDescription_ElementItemDescription::soap_type() returns SOAP_TYPE__tt__ItemListDescription_ElementItemDescription or derived type identifier
    class _tt__ItemListDescription_ElementItemDescription
    { public:
/// <PRE><BLOCKQUOTE>
///   Item name. Must be unique within a list.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ std::string                          Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The type of the item. The Type must reference a defined type.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Type" of type xs:QName.
  @ xsd__QName                           Type                           1;	///< Required attribute.
    }>                                   ElementItemDescription         0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ItemListDescriptionExtension.
    tt__ItemListDescriptionExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemListDescriptionExtension is a complexType.
///
/// @note class tt__ItemListDescriptionExtension operations:
/// - tt__ItemListDescriptionExtension* soap_new_tt__ItemListDescriptionExtension(soap*) allocate and default initialize
/// - tt__ItemListDescriptionExtension* soap_new_tt__ItemListDescriptionExtension(soap*, int num) allocate and default initialize an array
/// - tt__ItemListDescriptionExtension* soap_new_req_tt__ItemListDescriptionExtension(soap*, ...) allocate, set required members
/// - tt__ItemListDescriptionExtension* soap_new_set_tt__ItemListDescriptionExtension(soap*, ...) allocate, set all public members
/// - tt__ItemListDescriptionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ItemListDescriptionExtension(soap*, tt__ItemListDescriptionExtension*) deserialize from a stream
/// - int soap_write_tt__ItemListDescriptionExtension(soap*, tt__ItemListDescriptionExtension*) serialize to a stream
/// - tt__ItemListDescriptionExtension* tt__ItemListDescriptionExtension::soap_dup(soap*) returns deep copy of tt__ItemListDescriptionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ItemListDescriptionExtension::soap_del() deep deletes tt__ItemListDescriptionExtension data members, use only after tt__ItemListDescriptionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ItemListDescriptionExtension::soap_type() returns SOAP_TYPE_tt__ItemListDescriptionExtension or derived type identifier
class tt__ItemListDescriptionExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Polyline is a complexType.
///
/// @note class tt__Polyline operations:
/// - tt__Polyline* soap_new_tt__Polyline(soap*) allocate and default initialize
/// - tt__Polyline* soap_new_tt__Polyline(soap*, int num) allocate and default initialize an array
/// - tt__Polyline* soap_new_req_tt__Polyline(soap*, ...) allocate, set required members
/// - tt__Polyline* soap_new_set_tt__Polyline(soap*, ...) allocate, set all public members
/// - tt__Polyline::soap_default(soap*) default initialize members
/// - int soap_read_tt__Polyline(soap*, tt__Polyline*) deserialize from a stream
/// - int soap_write_tt__Polyline(soap*, tt__Polyline*) serialize to a stream
/// - tt__Polyline* tt__Polyline::soap_dup(soap*) returns deep copy of tt__Polyline, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Polyline::soap_del() deep deletes tt__Polyline data members, use only after tt__Polyline::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Polyline::soap_type() returns SOAP_TYPE_tt__Polyline or derived type identifier
class tt__Polyline : public xsd__anyType
{ public:
/// Vector of tt__Vector* of length 2..unbounded.
    std::vector<tt__Vector*            > Point                          2;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration is a complexType.
///
/// @note class tt__AnalyticsEngineConfiguration operations:
/// - tt__AnalyticsEngineConfiguration* soap_new_tt__AnalyticsEngineConfiguration(soap*) allocate and default initialize
/// - tt__AnalyticsEngineConfiguration* soap_new_tt__AnalyticsEngineConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineConfiguration* soap_new_req_tt__AnalyticsEngineConfiguration(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineConfiguration* soap_new_set_tt__AnalyticsEngineConfiguration(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineConfiguration(soap*, tt__AnalyticsEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineConfiguration(soap*, tt__AnalyticsEngineConfiguration*) serialize to a stream
/// - tt__AnalyticsEngineConfiguration* tt__AnalyticsEngineConfiguration::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineConfiguration::soap_del() deep deletes tt__AnalyticsEngineConfiguration data members, use only after tt__AnalyticsEngineConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineConfiguration::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineConfiguration or derived type identifier
class tt__AnalyticsEngineConfiguration : public xsd__anyType
{ public:
/// Vector of tt__Config* of length 0..unbounded.
    std::vector<tt__Config*            > AnalyticsModule                0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension.
    tt__AnalyticsEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension is a complexType.
///
/// @note class tt__AnalyticsEngineConfigurationExtension operations:
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_tt__AnalyticsEngineConfigurationExtension(soap*) allocate and default initialize
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_tt__AnalyticsEngineConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_req_tt__AnalyticsEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_set_tt__AnalyticsEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineConfigurationExtension(soap*, tt__AnalyticsEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineConfigurationExtension(soap*, tt__AnalyticsEngineConfigurationExtension*) serialize to a stream
/// - tt__AnalyticsEngineConfigurationExtension* tt__AnalyticsEngineConfigurationExtension::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineConfigurationExtension::soap_del() deep deletes tt__AnalyticsEngineConfigurationExtension data members, use only after tt__AnalyticsEngineConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineConfigurationExtension::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension or derived type identifier
class tt__AnalyticsEngineConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":RuleEngineConfiguration is a complexType.
///
/// @note class tt__RuleEngineConfiguration operations:
/// - tt__RuleEngineConfiguration* soap_new_tt__RuleEngineConfiguration(soap*) allocate and default initialize
/// - tt__RuleEngineConfiguration* soap_new_tt__RuleEngineConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__RuleEngineConfiguration* soap_new_req_tt__RuleEngineConfiguration(soap*, ...) allocate, set required members
/// - tt__RuleEngineConfiguration* soap_new_set_tt__RuleEngineConfiguration(soap*, ...) allocate, set all public members
/// - tt__RuleEngineConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__RuleEngineConfiguration(soap*, tt__RuleEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__RuleEngineConfiguration(soap*, tt__RuleEngineConfiguration*) serialize to a stream
/// - tt__RuleEngineConfiguration* tt__RuleEngineConfiguration::soap_dup(soap*) returns deep copy of tt__RuleEngineConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RuleEngineConfiguration::soap_del() deep deletes tt__RuleEngineConfiguration data members, use only after tt__RuleEngineConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RuleEngineConfiguration::soap_type() returns SOAP_TYPE_tt__RuleEngineConfiguration or derived type identifier
class tt__RuleEngineConfiguration : public xsd__anyType
{ public:
/// Vector of tt__Config* of length 0..unbounded.
    std::vector<tt__Config*            > Rule                           0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension.
    tt__RuleEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension is a complexType.
///
/// @note class tt__RuleEngineConfigurationExtension operations:
/// - tt__RuleEngineConfigurationExtension* soap_new_tt__RuleEngineConfigurationExtension(soap*) allocate and default initialize
/// - tt__RuleEngineConfigurationExtension* soap_new_tt__RuleEngineConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__RuleEngineConfigurationExtension* soap_new_req_tt__RuleEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__RuleEngineConfigurationExtension* soap_new_set_tt__RuleEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__RuleEngineConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RuleEngineConfigurationExtension(soap*, tt__RuleEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__RuleEngineConfigurationExtension(soap*, tt__RuleEngineConfigurationExtension*) serialize to a stream
/// - tt__RuleEngineConfigurationExtension* tt__RuleEngineConfigurationExtension::soap_dup(soap*) returns deep copy of tt__RuleEngineConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RuleEngineConfigurationExtension::soap_del() deep deletes tt__RuleEngineConfigurationExtension data members, use only after tt__RuleEngineConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RuleEngineConfigurationExtension::soap_type() returns SOAP_TYPE_tt__RuleEngineConfigurationExtension or derived type identifier
class tt__RuleEngineConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Config is a complexType.
///
/// @note class tt__Config operations:
/// - tt__Config* soap_new_tt__Config(soap*) allocate and default initialize
/// - tt__Config* soap_new_tt__Config(soap*, int num) allocate and default initialize an array
/// - tt__Config* soap_new_req_tt__Config(soap*, ...) allocate, set required members
/// - tt__Config* soap_new_set_tt__Config(soap*, ...) allocate, set all public members
/// - tt__Config::soap_default(soap*) default initialize members
/// - int soap_read_tt__Config(soap*, tt__Config*) deserialize from a stream
/// - int soap_write_tt__Config(soap*, tt__Config*) serialize to a stream
/// - tt__Config* tt__Config::soap_dup(soap*) returns deep copy of tt__Config, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Config::soap_del() deep deletes tt__Config data members, use only after tt__Config::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Config::soap_type() returns SOAP_TYPE_tt__Config or derived type identifier
class tt__Config : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of configuration parameters as defined in the correspding description.
/// </BLOCKQUOTE></PRE>
///
/// Element "Parameters" of type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Parameters                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of the configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ std::string                          Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The Type attribute specifies the type of rule and shall be equal to value of one of Name attributes of ConfigDescription elements returned by GetSupportedRules and GetSupportedAnalyticsModules command.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Type" of type xs:QName.
  @ xsd__QName                           Type                           1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":ConfigDescription is a complexType.
///
/// @note class tt__ConfigDescription operations:
/// - tt__ConfigDescription* soap_new_tt__ConfigDescription(soap*) allocate and default initialize
/// - tt__ConfigDescription* soap_new_tt__ConfigDescription(soap*, int num) allocate and default initialize an array
/// - tt__ConfigDescription* soap_new_req_tt__ConfigDescription(soap*, ...) allocate, set required members
/// - tt__ConfigDescription* soap_new_set_tt__ConfigDescription(soap*, ...) allocate, set all public members
/// - tt__ConfigDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__ConfigDescription(soap*, tt__ConfigDescription*) deserialize from a stream
/// - int soap_write_tt__ConfigDescription(soap*, tt__ConfigDescription*) serialize to a stream
/// - tt__ConfigDescription* tt__ConfigDescription::soap_dup(soap*) returns deep copy of tt__ConfigDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ConfigDescription::soap_del() deep deletes tt__ConfigDescription data members, use only after tt__ConfigDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ConfigDescription::soap_type() returns SOAP_TYPE_tt__ConfigDescription or derived type identifier
class tt__ConfigDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List describing the configuration parameters. The names of the parameters must be unique. If possible SimpleItems
///   should be used to transport the information to ease parsing of dynamically defined messages by a client
///   application.
/// </BLOCKQUOTE></PRE>
///
/// Element "Parameters" of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Parameters                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The analytics modules and rule engine produce Events, which must be listed within the Analytics Module Description. In order to do so
///   the structure of the Message is defined and consists of three groups: Source, Key, and Data. It is recommended to use SimpleItemDescriptions wherever applicable.
///   The name of all Items must be unique within all Items contained in any group of this Message.
///   Depending on the component multiple parameters or none may be needed to identify the component uniquely.
/// </BLOCKQUOTE></PRE>
///
/// Vector of Messages of length 0..unbounded.
    std::vector<
/// @note class _tt__ConfigDescription_Messages operations:
/// - _tt__ConfigDescription_Messages* soap_new__tt__ConfigDescription_Messages(soap*) allocate and default initialize
/// - _tt__ConfigDescription_Messages* soap_new__tt__ConfigDescription_Messages(soap*, int num) allocate and default initialize an array
/// - _tt__ConfigDescription_Messages* soap_new_req__tt__ConfigDescription_Messages(soap*, ...) allocate, set required members
/// - _tt__ConfigDescription_Messages* soap_new_set__tt__ConfigDescription_Messages(soap*, ...) allocate, set all public members
/// - _tt__ConfigDescription_Messages::soap_default(soap*) default initialize members
/// - int soap_read__tt__ConfigDescription_Messages(soap*, _tt__ConfigDescription_Messages*) deserialize from a stream
/// - int soap_write__tt__ConfigDescription_Messages(soap*, _tt__ConfigDescription_Messages*) serialize to a stream
/// - _tt__ConfigDescription_Messages* _tt__ConfigDescription_Messages::soap_dup(soap*) returns deep copy of _tt__ConfigDescription_Messages, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__ConfigDescription_Messages::soap_del() deep deletes _tt__ConfigDescription_Messages data members, use only after _tt__ConfigDescription_Messages::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__ConfigDescription_Messages::soap_type() returns SOAP_TYPE__tt__ConfigDescription_Messages or derived type identifier
    class _tt__ConfigDescription_Messages
    { public:
/// INHERITED FROM tt__MessageDescription:
/// <PRE><BLOCKQUOTE>
///   Set of tokens producing this message. The list may only contain SimpleItemDescription items.
///   The set of tokens identify the component within the WS-Endpoint, which is responsible for the producing the message.<br/>
///   For analytics events the token set shall include the VideoSourceConfigurationToken, the VideoAnalyticsConfigurationToken
///   and the name of the analytics module or rule.
/// </BLOCKQUOTE></PRE>
///
/// Element "Source" of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Source                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes optional message payload parameters that may be used as key. E.g. object IDs of tracked objects are conveyed as key.
/// </BLOCKQUOTE></PRE>
///
/// Element "Key" of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Key                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the payload of the message.
/// </BLOCKQUOTE></PRE>
///
/// Element "Data" of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Data                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MessageDescriptionExtension.
    tt__MessageDescriptionExtension*     Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Must be set to true when the described Message relates to a property. An alternative term of "property" is a "state" in contrast to a pure event, which contains relevant information for only a single point in time.<br/>Default is false.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "IsProperty" of type xs:boolean.
  @ bool*                                IsProperty                     0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
//  END OF INHERITED FROM tt__MessageDescription
/// <PRE><BLOCKQUOTE>
///   The ParentTopic labels the message (e.g. "nn:RuleEngine/LineCrossing"). The real message can extend the ParentTopic
///   by for example the name of the instaniated rule (e.g. "nn:RuleEngine/LineCrossing/corssMyFirstLine").
///   Even without knowing the complete topic name, the subscriber will be able to distiguish the
///   messages produced by different rule instances of the same type via the Source fields of the message.
///   There the name of the rule instance, which produced the message, must be listed.
/// </BLOCKQUOTE></PRE>
///
/// Element "ParentTopic" of type xs:string.
    std::string                          ParentTopic                    1;	///< Required element.
    }>                                   Messages                       0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ConfigDescriptionExtension.
    tt__ConfigDescriptionExtension*      Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Name attribute (e.g. "tt::LineDetector") uniquely identifies the type of rule, not a type definition in a schema.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:QName.
  @ xsd__QName                           Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The fixed attribute signals that it is not allowed to add or remove this type of configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "fixed" of type xs:boolean.
  @ bool*                                fixed                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maxInstances attribute signals the maximum number of instances per configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "maxInstances" of type xs:integer.
  @ xsd__integer*                        maxInstances                   0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ConfigDescriptionExtension is a complexType.
///
/// @note class tt__ConfigDescriptionExtension operations:
/// - tt__ConfigDescriptionExtension* soap_new_tt__ConfigDescriptionExtension(soap*) allocate and default initialize
/// - tt__ConfigDescriptionExtension* soap_new_tt__ConfigDescriptionExtension(soap*, int num) allocate and default initialize an array
/// - tt__ConfigDescriptionExtension* soap_new_req_tt__ConfigDescriptionExtension(soap*, ...) allocate, set required members
/// - tt__ConfigDescriptionExtension* soap_new_set_tt__ConfigDescriptionExtension(soap*, ...) allocate, set all public members
/// - tt__ConfigDescriptionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ConfigDescriptionExtension(soap*, tt__ConfigDescriptionExtension*) deserialize from a stream
/// - int soap_write_tt__ConfigDescriptionExtension(soap*, tt__ConfigDescriptionExtension*) serialize to a stream
/// - tt__ConfigDescriptionExtension* tt__ConfigDescriptionExtension::soap_dup(soap*) returns deep copy of tt__ConfigDescriptionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ConfigDescriptionExtension::soap_del() deep deletes tt__ConfigDescriptionExtension data members, use only after tt__ConfigDescriptionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ConfigDescriptionExtension::soap_type() returns SOAP_TYPE_tt__ConfigDescriptionExtension or derived type identifier
class tt__ConfigDescriptionExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedRules is a complexType.
///
/// @note class tt__SupportedRules operations:
/// - tt__SupportedRules* soap_new_tt__SupportedRules(soap*) allocate and default initialize
/// - tt__SupportedRules* soap_new_tt__SupportedRules(soap*, int num) allocate and default initialize an array
/// - tt__SupportedRules* soap_new_req_tt__SupportedRules(soap*, ...) allocate, set required members
/// - tt__SupportedRules* soap_new_set_tt__SupportedRules(soap*, ...) allocate, set all public members
/// - tt__SupportedRules::soap_default(soap*) default initialize members
/// - int soap_read_tt__SupportedRules(soap*, tt__SupportedRules*) deserialize from a stream
/// - int soap_write_tt__SupportedRules(soap*, tt__SupportedRules*) serialize to a stream
/// - tt__SupportedRules* tt__SupportedRules::soap_dup(soap*) returns deep copy of tt__SupportedRules, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SupportedRules::soap_del() deep deletes tt__SupportedRules data members, use only after tt__SupportedRules::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SupportedRules::soap_type() returns SOAP_TYPE_tt__SupportedRules or derived type identifier
class tt__SupportedRules : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Lists the location of all schemas that are referenced in the rules.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > RuleContentSchemaLocation      0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of rules supported by the Video Analytics configuration..
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ConfigDescription* of length 0..unbounded.
    std::vector<tt__ConfigDescription* > RuleDescription                0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SupportedRulesExtension.
    tt__SupportedRulesExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedRulesExtension is a complexType.
///
/// @note class tt__SupportedRulesExtension operations:
/// - tt__SupportedRulesExtension* soap_new_tt__SupportedRulesExtension(soap*) allocate and default initialize
/// - tt__SupportedRulesExtension* soap_new_tt__SupportedRulesExtension(soap*, int num) allocate and default initialize an array
/// - tt__SupportedRulesExtension* soap_new_req_tt__SupportedRulesExtension(soap*, ...) allocate, set required members
/// - tt__SupportedRulesExtension* soap_new_set_tt__SupportedRulesExtension(soap*, ...) allocate, set all public members
/// - tt__SupportedRulesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SupportedRulesExtension(soap*, tt__SupportedRulesExtension*) deserialize from a stream
/// - int soap_write_tt__SupportedRulesExtension(soap*, tt__SupportedRulesExtension*) serialize to a stream
/// - tt__SupportedRulesExtension* tt__SupportedRulesExtension::soap_dup(soap*) returns deep copy of tt__SupportedRulesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SupportedRulesExtension::soap_del() deep deletes tt__SupportedRulesExtension data members, use only after tt__SupportedRulesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SupportedRulesExtension::soap_type() returns SOAP_TYPE_tt__SupportedRulesExtension or derived type identifier
class tt__SupportedRulesExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedAnalyticsModules is a complexType.
///
/// @note class tt__SupportedAnalyticsModules operations:
/// - tt__SupportedAnalyticsModules* soap_new_tt__SupportedAnalyticsModules(soap*) allocate and default initialize
/// - tt__SupportedAnalyticsModules* soap_new_tt__SupportedAnalyticsModules(soap*, int num) allocate and default initialize an array
/// - tt__SupportedAnalyticsModules* soap_new_req_tt__SupportedAnalyticsModules(soap*, ...) allocate, set required members
/// - tt__SupportedAnalyticsModules* soap_new_set_tt__SupportedAnalyticsModules(soap*, ...) allocate, set all public members
/// - tt__SupportedAnalyticsModules::soap_default(soap*) default initialize members
/// - int soap_read_tt__SupportedAnalyticsModules(soap*, tt__SupportedAnalyticsModules*) deserialize from a stream
/// - int soap_write_tt__SupportedAnalyticsModules(soap*, tt__SupportedAnalyticsModules*) serialize to a stream
/// - tt__SupportedAnalyticsModules* tt__SupportedAnalyticsModules::soap_dup(soap*) returns deep copy of tt__SupportedAnalyticsModules, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SupportedAnalyticsModules::soap_del() deep deletes tt__SupportedAnalyticsModules data members, use only after tt__SupportedAnalyticsModules::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SupportedAnalyticsModules::soap_type() returns SOAP_TYPE_tt__SupportedAnalyticsModules or derived type identifier
class tt__SupportedAnalyticsModules : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   It optionally contains a list of URLs that provide the location of schema files.
///   These schema files describe the types and elements used in the analytics module descriptions.
///   If the analytics module descriptions reference types or elements of the ONVIF schema file,
///   the ONVIF schema file MUST be explicitly listed.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > AnalyticsModuleContentSchemaLocation 0;	///< Multiple elements.
/// Vector of tt__ConfigDescription* of length 0..unbounded.
    std::vector<tt__ConfigDescription* > AnalyticsModuleDescription     0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SupportedAnalyticsModulesExtension.
    tt__SupportedAnalyticsModulesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedAnalyticsModulesExtension is a complexType.
///
/// @note class tt__SupportedAnalyticsModulesExtension operations:
/// - tt__SupportedAnalyticsModulesExtension* soap_new_tt__SupportedAnalyticsModulesExtension(soap*) allocate and default initialize
/// - tt__SupportedAnalyticsModulesExtension* soap_new_tt__SupportedAnalyticsModulesExtension(soap*, int num) allocate and default initialize an array
/// - tt__SupportedAnalyticsModulesExtension* soap_new_req_tt__SupportedAnalyticsModulesExtension(soap*, ...) allocate, set required members
/// - tt__SupportedAnalyticsModulesExtension* soap_new_set_tt__SupportedAnalyticsModulesExtension(soap*, ...) allocate, set all public members
/// - tt__SupportedAnalyticsModulesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SupportedAnalyticsModulesExtension(soap*, tt__SupportedAnalyticsModulesExtension*) deserialize from a stream
/// - int soap_write_tt__SupportedAnalyticsModulesExtension(soap*, tt__SupportedAnalyticsModulesExtension*) serialize to a stream
/// - tt__SupportedAnalyticsModulesExtension* tt__SupportedAnalyticsModulesExtension::soap_dup(soap*) returns deep copy of tt__SupportedAnalyticsModulesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SupportedAnalyticsModulesExtension::soap_del() deep deletes tt__SupportedAnalyticsModulesExtension data members, use only after tt__SupportedAnalyticsModulesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SupportedAnalyticsModulesExtension::soap_type() returns SOAP_TYPE_tt__SupportedAnalyticsModulesExtension or derived type identifier
class tt__SupportedAnalyticsModulesExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PolygonConfiguration is a complexType.
///
/// @note class tt__PolygonConfiguration operations:
/// - tt__PolygonConfiguration* soap_new_tt__PolygonConfiguration(soap*) allocate and default initialize
/// - tt__PolygonConfiguration* soap_new_tt__PolygonConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__PolygonConfiguration* soap_new_req_tt__PolygonConfiguration(soap*, ...) allocate, set required members
/// - tt__PolygonConfiguration* soap_new_set_tt__PolygonConfiguration(soap*, ...) allocate, set all public members
/// - tt__PolygonConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__PolygonConfiguration(soap*, tt__PolygonConfiguration*) deserialize from a stream
/// - int soap_write_tt__PolygonConfiguration(soap*, tt__PolygonConfiguration*) serialize to a stream
/// - tt__PolygonConfiguration* tt__PolygonConfiguration::soap_dup(soap*) returns deep copy of tt__PolygonConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PolygonConfiguration::soap_del() deep deletes tt__PolygonConfiguration data members, use only after tt__PolygonConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PolygonConfiguration::soap_type() returns SOAP_TYPE_tt__PolygonConfiguration or derived type identifier
class tt__PolygonConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains Polygon configuration for rule parameters
/// </BLOCKQUOTE></PRE>
///
/// Element "Polygon" of type "http://www.onvif.org/ver10/schema":Polygon.
    tt__Polygon*                         Polygon                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PolylineArray is a complexType.
///
/// @note class tt__PolylineArray operations:
/// - tt__PolylineArray* soap_new_tt__PolylineArray(soap*) allocate and default initialize
/// - tt__PolylineArray* soap_new_tt__PolylineArray(soap*, int num) allocate and default initialize an array
/// - tt__PolylineArray* soap_new_req_tt__PolylineArray(soap*, ...) allocate, set required members
/// - tt__PolylineArray* soap_new_set_tt__PolylineArray(soap*, ...) allocate, set all public members
/// - tt__PolylineArray::soap_default(soap*) default initialize members
/// - int soap_read_tt__PolylineArray(soap*, tt__PolylineArray*) deserialize from a stream
/// - int soap_write_tt__PolylineArray(soap*, tt__PolylineArray*) serialize to a stream
/// - tt__PolylineArray* tt__PolylineArray::soap_dup(soap*) returns deep copy of tt__PolylineArray, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PolylineArray::soap_del() deep deletes tt__PolylineArray data members, use only after tt__PolylineArray::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PolylineArray::soap_type() returns SOAP_TYPE_tt__PolylineArray or derived type identifier
class tt__PolylineArray : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains array of Polyline
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Polyline* of length 1..unbounded.
    std::vector<tt__Polyline*          > Segment                        1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PolylineArrayExtension.
    tt__PolylineArrayExtension*          Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PolylineArrayExtension is a complexType.
///
/// @note class tt__PolylineArrayExtension operations:
/// - tt__PolylineArrayExtension* soap_new_tt__PolylineArrayExtension(soap*) allocate and default initialize
/// - tt__PolylineArrayExtension* soap_new_tt__PolylineArrayExtension(soap*, int num) allocate and default initialize an array
/// - tt__PolylineArrayExtension* soap_new_req_tt__PolylineArrayExtension(soap*, ...) allocate, set required members
/// - tt__PolylineArrayExtension* soap_new_set_tt__PolylineArrayExtension(soap*, ...) allocate, set all public members
/// - tt__PolylineArrayExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PolylineArrayExtension(soap*, tt__PolylineArrayExtension*) deserialize from a stream
/// - int soap_write_tt__PolylineArrayExtension(soap*, tt__PolylineArrayExtension*) serialize to a stream
/// - tt__PolylineArrayExtension* tt__PolylineArrayExtension::soap_dup(soap*) returns deep copy of tt__PolylineArrayExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PolylineArrayExtension::soap_del() deep deletes tt__PolylineArrayExtension data members, use only after tt__PolylineArrayExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PolylineArrayExtension::soap_type() returns SOAP_TYPE_tt__PolylineArrayExtension or derived type identifier
class tt__PolylineArrayExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PolylineArrayConfiguration is a complexType.
///
/// @note class tt__PolylineArrayConfiguration operations:
/// - tt__PolylineArrayConfiguration* soap_new_tt__PolylineArrayConfiguration(soap*) allocate and default initialize
/// - tt__PolylineArrayConfiguration* soap_new_tt__PolylineArrayConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__PolylineArrayConfiguration* soap_new_req_tt__PolylineArrayConfiguration(soap*, ...) allocate, set required members
/// - tt__PolylineArrayConfiguration* soap_new_set_tt__PolylineArrayConfiguration(soap*, ...) allocate, set all public members
/// - tt__PolylineArrayConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__PolylineArrayConfiguration(soap*, tt__PolylineArrayConfiguration*) deserialize from a stream
/// - int soap_write_tt__PolylineArrayConfiguration(soap*, tt__PolylineArrayConfiguration*) serialize to a stream
/// - tt__PolylineArrayConfiguration* tt__PolylineArrayConfiguration::soap_dup(soap*) returns deep copy of tt__PolylineArrayConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PolylineArrayConfiguration::soap_del() deep deletes tt__PolylineArrayConfiguration data members, use only after tt__PolylineArrayConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PolylineArrayConfiguration::soap_type() returns SOAP_TYPE_tt__PolylineArrayConfiguration or derived type identifier
class tt__PolylineArrayConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains PolylineArray configuration data
/// </BLOCKQUOTE></PRE>
///
/// Element "PolylineArray" of type "http://www.onvif.org/ver10/schema":PolylineArray.
    tt__PolylineArray*                   PolylineArray                  1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MotionExpression is a complexType.
///
/// @note class tt__MotionExpression operations:
/// - tt__MotionExpression* soap_new_tt__MotionExpression(soap*) allocate and default initialize
/// - tt__MotionExpression* soap_new_tt__MotionExpression(soap*, int num) allocate and default initialize an array
/// - tt__MotionExpression* soap_new_req_tt__MotionExpression(soap*, ...) allocate, set required members
/// - tt__MotionExpression* soap_new_set_tt__MotionExpression(soap*, ...) allocate, set all public members
/// - tt__MotionExpression::soap_default(soap*) default initialize members
/// - int soap_read_tt__MotionExpression(soap*, tt__MotionExpression*) deserialize from a stream
/// - int soap_write_tt__MotionExpression(soap*, tt__MotionExpression*) serialize to a stream
/// - tt__MotionExpression* tt__MotionExpression::soap_dup(soap*) returns deep copy of tt__MotionExpression, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MotionExpression::soap_del() deep deletes tt__MotionExpression data members, use only after tt__MotionExpression::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MotionExpression::soap_type() returns SOAP_TYPE_tt__MotionExpression or derived type identifier
class tt__MotionExpression : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Motion Expression data structure contains motion expression which is based on Scene Descriptor schema with XPATH syntax. The Type argument could allow introduction of different dialects
/// </BLOCKQUOTE></PRE>
///
/// Element "Expression" of type xs:string.
    std::string                          Expression                     1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "Type" of type xs:string.
  @ std::string*                         Type                           0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MotionExpressionConfiguration is a complexType.
///
/// @note class tt__MotionExpressionConfiguration operations:
/// - tt__MotionExpressionConfiguration* soap_new_tt__MotionExpressionConfiguration(soap*) allocate and default initialize
/// - tt__MotionExpressionConfiguration* soap_new_tt__MotionExpressionConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__MotionExpressionConfiguration* soap_new_req_tt__MotionExpressionConfiguration(soap*, ...) allocate, set required members
/// - tt__MotionExpressionConfiguration* soap_new_set_tt__MotionExpressionConfiguration(soap*, ...) allocate, set all public members
/// - tt__MotionExpressionConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__MotionExpressionConfiguration(soap*, tt__MotionExpressionConfiguration*) deserialize from a stream
/// - int soap_write_tt__MotionExpressionConfiguration(soap*, tt__MotionExpressionConfiguration*) serialize to a stream
/// - tt__MotionExpressionConfiguration* tt__MotionExpressionConfiguration::soap_dup(soap*) returns deep copy of tt__MotionExpressionConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MotionExpressionConfiguration::soap_del() deep deletes tt__MotionExpressionConfiguration data members, use only after tt__MotionExpressionConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MotionExpressionConfiguration::soap_type() returns SOAP_TYPE_tt__MotionExpressionConfiguration or derived type identifier
class tt__MotionExpressionConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains Rule MotionExpression configuration
/// </BLOCKQUOTE></PRE>
///
/// Element "MotionExpression" of type "http://www.onvif.org/ver10/schema":MotionExpression.
    tt__MotionExpression*                MotionExpression               1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":CellLayout is a complexType.
///
/// @note class tt__CellLayout operations:
/// - tt__CellLayout* soap_new_tt__CellLayout(soap*) allocate and default initialize
/// - tt__CellLayout* soap_new_tt__CellLayout(soap*, int num) allocate and default initialize an array
/// - tt__CellLayout* soap_new_req_tt__CellLayout(soap*, ...) allocate, set required members
/// - tt__CellLayout* soap_new_set_tt__CellLayout(soap*, ...) allocate, set all public members
/// - tt__CellLayout::soap_default(soap*) default initialize members
/// - int soap_read_tt__CellLayout(soap*, tt__CellLayout*) deserialize from a stream
/// - int soap_write_tt__CellLayout(soap*, tt__CellLayout*) serialize to a stream
/// - tt__CellLayout* tt__CellLayout::soap_dup(soap*) returns deep copy of tt__CellLayout, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CellLayout::soap_del() deep deletes tt__CellLayout data members, use only after tt__CellLayout::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CellLayout::soap_type() returns SOAP_TYPE_tt__CellLayout or derived type identifier
class tt__CellLayout : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mapping of the cell grid to the Video frame. The cell grid is starting from the upper left corner and x dimension is going from left to right and the y dimension from up to down.
/// </BLOCKQUOTE></PRE>
///
/// Element "Transformation" of type "http://www.onvif.org/ver10/schema":Transformation.
    tt__Transformation*                  Transformation                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Number of columns of the cell grid (x dimension)
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Columns" of type xs:integer.
  @ xsd__integer                         Columns                        1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Number of rows of the cell grid (y dimension)
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Rows" of type xs:integer.
  @ xsd__integer                         Rows                           1;	///< Required attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneConfiguration is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Configuration of the streaming and coding settings of a Video window.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__PaneConfiguration operations:
/// - tt__PaneConfiguration* soap_new_tt__PaneConfiguration(soap*) allocate and default initialize
/// - tt__PaneConfiguration* soap_new_tt__PaneConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__PaneConfiguration* soap_new_req_tt__PaneConfiguration(soap*, ...) allocate, set required members
/// - tt__PaneConfiguration* soap_new_set_tt__PaneConfiguration(soap*, ...) allocate, set all public members
/// - tt__PaneConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__PaneConfiguration(soap*, tt__PaneConfiguration*) deserialize from a stream
/// - int soap_write_tt__PaneConfiguration(soap*, tt__PaneConfiguration*) serialize to a stream
/// - tt__PaneConfiguration* tt__PaneConfiguration::soap_dup(soap*) returns deep copy of tt__PaneConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PaneConfiguration::soap_del() deep deletes tt__PaneConfiguration data members, use only after tt__PaneConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PaneConfiguration::soap_type() returns SOAP_TYPE_tt__PaneConfiguration or derived type identifier
class tt__PaneConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional name of the pane configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "PaneName" of type xs:string.
    std::string*                         PaneName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device has audio outputs, this element contains a pointer to the audio output that is associated with the pane. A client
///   can retrieve the available audio outputs of a device using the GetAudioOutputs command of the DeviceIO service.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioOutputToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  AudioOutputToken               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device has audio sources, this element contains a pointer to the audio source that is associated with this pane.
///   The audio connection from a decoder device to the NVT is established using the backchannel mechanism. A client can retrieve the available audio sources of a device using the GetAudioSources command of the
///   DeviceIO service.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioSourceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  AudioSourceToken               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The configuration of the audio encoder including codec, bitrate
///   and sample rate.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioEncoderConfiguration" of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    tt__AudioEncoderConfiguration*       AudioEncoderConfiguration      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A pointer to a Receiver that has the necessary information to receive
///   data from a Transmitter. This Receiver can be connected and the network video decoder displays the received data on the specified outputs. A client can retrieve the available Receivers using the
///   GetReceivers command of the Receiver Service.
/// </BLOCKQUOTE></PRE>
///
/// Element "ReceiverToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  ReceiverToken                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A unique identifier in the display device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneLayout is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A pane layout describes one Video window of a display. It links a pane configuration to a region of the screen.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__PaneLayout operations:
/// - tt__PaneLayout* soap_new_tt__PaneLayout(soap*) allocate and default initialize
/// - tt__PaneLayout* soap_new_tt__PaneLayout(soap*, int num) allocate and default initialize an array
/// - tt__PaneLayout* soap_new_req_tt__PaneLayout(soap*, ...) allocate, set required members
/// - tt__PaneLayout* soap_new_set_tt__PaneLayout(soap*, ...) allocate, set all public members
/// - tt__PaneLayout::soap_default(soap*) default initialize members
/// - int soap_read_tt__PaneLayout(soap*, tt__PaneLayout*) deserialize from a stream
/// - int soap_write_tt__PaneLayout(soap*, tt__PaneLayout*) serialize to a stream
/// - tt__PaneLayout* tt__PaneLayout::soap_dup(soap*) returns deep copy of tt__PaneLayout, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PaneLayout::soap_del() deep deletes tt__PaneLayout data members, use only after tt__PaneLayout::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PaneLayout::soap_type() returns SOAP_TYPE_tt__PaneLayout or derived type identifier
class tt__PaneLayout : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to the configuration of the streaming and coding parameters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Pane" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Pane                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Describes the location and size of the area on the monitor. The area coordinate values are espressed in normalized units [-1.0, 1.0].
/// </BLOCKQUOTE></PRE>
///
/// Element "Area" of type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Area                           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Layout is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A layout describes a set of Video windows that are displayed simultaniously on a display.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__Layout operations:
/// - tt__Layout* soap_new_tt__Layout(soap*) allocate and default initialize
/// - tt__Layout* soap_new_tt__Layout(soap*, int num) allocate and default initialize an array
/// - tt__Layout* soap_new_req_tt__Layout(soap*, ...) allocate, set required members
/// - tt__Layout* soap_new_set_tt__Layout(soap*, ...) allocate, set all public members
/// - tt__Layout::soap_default(soap*) default initialize members
/// - int soap_read_tt__Layout(soap*, tt__Layout*) deserialize from a stream
/// - int soap_write_tt__Layout(soap*, tt__Layout*) serialize to a stream
/// - tt__Layout* tt__Layout::soap_dup(soap*) returns deep copy of tt__Layout, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Layout::soap_del() deep deletes tt__Layout data members, use only after tt__Layout::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Layout::soap_type() returns SOAP_TYPE_tt__Layout or derived type identifier
class tt__Layout : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of panes assembling the display layout.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PaneLayout* of length 1..unbounded.
    std::vector<tt__PaneLayout*        > PaneLayout                     1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":LayoutExtension.
    tt__LayoutExtension*                 Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LayoutExtension is a complexType.
///
/// @note class tt__LayoutExtension operations:
/// - tt__LayoutExtension* soap_new_tt__LayoutExtension(soap*) allocate and default initialize
/// - tt__LayoutExtension* soap_new_tt__LayoutExtension(soap*, int num) allocate and default initialize an array
/// - tt__LayoutExtension* soap_new_req_tt__LayoutExtension(soap*, ...) allocate, set required members
/// - tt__LayoutExtension* soap_new_set_tt__LayoutExtension(soap*, ...) allocate, set all public members
/// - tt__LayoutExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__LayoutExtension(soap*, tt__LayoutExtension*) deserialize from a stream
/// - int soap_write_tt__LayoutExtension(soap*, tt__LayoutExtension*) serialize to a stream
/// - tt__LayoutExtension* tt__LayoutExtension::soap_dup(soap*) returns deep copy of tt__LayoutExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LayoutExtension::soap_del() deep deletes tt__LayoutExtension data members, use only after tt__LayoutExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LayoutExtension::soap_type() returns SOAP_TYPE_tt__LayoutExtension or derived type identifier
class tt__LayoutExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":CodingCapabilities is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This type contains the Audio and Video coding capabilities of a display service.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__CodingCapabilities operations:
/// - tt__CodingCapabilities* soap_new_tt__CodingCapabilities(soap*) allocate and default initialize
/// - tt__CodingCapabilities* soap_new_tt__CodingCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__CodingCapabilities* soap_new_req_tt__CodingCapabilities(soap*, ...) allocate, set required members
/// - tt__CodingCapabilities* soap_new_set_tt__CodingCapabilities(soap*, ...) allocate, set all public members
/// - tt__CodingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__CodingCapabilities(soap*, tt__CodingCapabilities*) deserialize from a stream
/// - int soap_write_tt__CodingCapabilities(soap*, tt__CodingCapabilities*) serialize to a stream
/// - tt__CodingCapabilities* tt__CodingCapabilities::soap_dup(soap*) returns deep copy of tt__CodingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CodingCapabilities::soap_del() deep deletes tt__CodingCapabilities data members, use only after tt__CodingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CodingCapabilities::soap_type() returns SOAP_TYPE_tt__CodingCapabilities or derived type identifier
class tt__CodingCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the device supports audio encoding this section describes the supported codecs and their configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioEncodingCapabilities" of type "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions.
    tt__AudioEncoderConfigurationOptions*  AudioEncodingCapabilities      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device supports audio decoding this section describes the supported codecs and their settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioDecodingCapabilities" of type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions.
    tt__AudioDecoderConfigurationOptions*  AudioDecodingCapabilities      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This section describes the supported video codesc and their configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "VideoDecodingCapabilities" of type "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptions.
    tt__VideoDecoderConfigurationOptions*  VideoDecodingCapabilities      1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LayoutOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The options supported for a display layout.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__LayoutOptions operations:
/// - tt__LayoutOptions* soap_new_tt__LayoutOptions(soap*) allocate and default initialize
/// - tt__LayoutOptions* soap_new_tt__LayoutOptions(soap*, int num) allocate and default initialize an array
/// - tt__LayoutOptions* soap_new_req_tt__LayoutOptions(soap*, ...) allocate, set required members
/// - tt__LayoutOptions* soap_new_set_tt__LayoutOptions(soap*, ...) allocate, set all public members
/// - tt__LayoutOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__LayoutOptions(soap*, tt__LayoutOptions*) deserialize from a stream
/// - int soap_write_tt__LayoutOptions(soap*, tt__LayoutOptions*) serialize to a stream
/// - tt__LayoutOptions* tt__LayoutOptions::soap_dup(soap*) returns deep copy of tt__LayoutOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LayoutOptions::soap_del() deep deletes tt__LayoutOptions data members, use only after tt__LayoutOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LayoutOptions::soap_type() returns SOAP_TYPE_tt__LayoutOptions or derived type identifier
class tt__LayoutOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Lists the possible Pane Layouts of the Video Output
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__PaneLayoutOptions* of length 1..unbounded.
    std::vector<tt__PaneLayoutOptions* > PaneLayoutOptions              1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":LayoutOptionsExtension.
    tt__LayoutOptionsExtension*          Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LayoutOptionsExtension is a complexType.
///
/// @note class tt__LayoutOptionsExtension operations:
/// - tt__LayoutOptionsExtension* soap_new_tt__LayoutOptionsExtension(soap*) allocate and default initialize
/// - tt__LayoutOptionsExtension* soap_new_tt__LayoutOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__LayoutOptionsExtension* soap_new_req_tt__LayoutOptionsExtension(soap*, ...) allocate, set required members
/// - tt__LayoutOptionsExtension* soap_new_set_tt__LayoutOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__LayoutOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__LayoutOptionsExtension(soap*, tt__LayoutOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__LayoutOptionsExtension(soap*, tt__LayoutOptionsExtension*) serialize to a stream
/// - tt__LayoutOptionsExtension* tt__LayoutOptionsExtension::soap_dup(soap*) returns deep copy of tt__LayoutOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LayoutOptionsExtension::soap_del() deep deletes tt__LayoutOptionsExtension data members, use only after tt__LayoutOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LayoutOptionsExtension::soap_type() returns SOAP_TYPE_tt__LayoutOptionsExtension or derived type identifier
class tt__LayoutOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneLayoutOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Description of a pane layout describing a complete display layout.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__PaneLayoutOptions operations:
/// - tt__PaneLayoutOptions* soap_new_tt__PaneLayoutOptions(soap*) allocate and default initialize
/// - tt__PaneLayoutOptions* soap_new_tt__PaneLayoutOptions(soap*, int num) allocate and default initialize an array
/// - tt__PaneLayoutOptions* soap_new_req_tt__PaneLayoutOptions(soap*, ...) allocate, set required members
/// - tt__PaneLayoutOptions* soap_new_set_tt__PaneLayoutOptions(soap*, ...) allocate, set all public members
/// - tt__PaneLayoutOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PaneLayoutOptions(soap*, tt__PaneLayoutOptions*) deserialize from a stream
/// - int soap_write_tt__PaneLayoutOptions(soap*, tt__PaneLayoutOptions*) serialize to a stream
/// - tt__PaneLayoutOptions* tt__PaneLayoutOptions::soap_dup(soap*) returns deep copy of tt__PaneLayoutOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PaneLayoutOptions::soap_del() deep deletes tt__PaneLayoutOptions data members, use only after tt__PaneLayoutOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PaneLayoutOptions::soap_type() returns SOAP_TYPE_tt__PaneLayoutOptions or derived type identifier
class tt__PaneLayoutOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of areas assembling a layout. Coordinate values are in the range [-1.0, 1.0].
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Rectangle* of length 1..unbounded.
    std::vector<tt__Rectangle*         > Area                           1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PaneOptionExtension.
    tt__PaneOptionExtension*             Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneOptionExtension is a complexType.
///
/// @note class tt__PaneOptionExtension operations:
/// - tt__PaneOptionExtension* soap_new_tt__PaneOptionExtension(soap*) allocate and default initialize
/// - tt__PaneOptionExtension* soap_new_tt__PaneOptionExtension(soap*, int num) allocate and default initialize an array
/// - tt__PaneOptionExtension* soap_new_req_tt__PaneOptionExtension(soap*, ...) allocate, set required members
/// - tt__PaneOptionExtension* soap_new_set_tt__PaneOptionExtension(soap*, ...) allocate, set all public members
/// - tt__PaneOptionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PaneOptionExtension(soap*, tt__PaneOptionExtension*) deserialize from a stream
/// - int soap_write_tt__PaneOptionExtension(soap*, tt__PaneOptionExtension*) serialize to a stream
/// - tt__PaneOptionExtension* tt__PaneOptionExtension::soap_dup(soap*) returns deep copy of tt__PaneOptionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PaneOptionExtension::soap_del() deep deletes tt__PaneOptionExtension data members, use only after tt__PaneOptionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PaneOptionExtension::soap_type() returns SOAP_TYPE_tt__PaneOptionExtension or derived type identifier
class tt__PaneOptionExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":Receiver is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Description of a receiver, including its token and configuration.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__Receiver operations:
/// - tt__Receiver* soap_new_tt__Receiver(soap*) allocate and default initialize
/// - tt__Receiver* soap_new_tt__Receiver(soap*, int num) allocate and default initialize an array
/// - tt__Receiver* soap_new_req_tt__Receiver(soap*, ...) allocate, set required members
/// - tt__Receiver* soap_new_set_tt__Receiver(soap*, ...) allocate, set all public members
/// - tt__Receiver::soap_default(soap*) default initialize members
/// - int soap_read_tt__Receiver(soap*, tt__Receiver*) deserialize from a stream
/// - int soap_write_tt__Receiver(soap*, tt__Receiver*) serialize to a stream
/// - tt__Receiver* tt__Receiver::soap_dup(soap*) returns deep copy of tt__Receiver, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Receiver::soap_del() deep deletes tt__Receiver data members, use only after tt__Receiver::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Receiver::soap_type() returns SOAP_TYPE_tt__Receiver or derived type identifier
class tt__Receiver : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier of the receiver.
/// </BLOCKQUOTE></PRE>
///
/// Element "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Describes the configuration of the receiver.
/// </BLOCKQUOTE></PRE>
///
/// Element "Configuration" of type "http://www.onvif.org/ver10/schema":ReceiverConfiguration.
    tt__ReceiverConfiguration*           Configuration                  1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverConfiguration is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes the configuration of a receiver.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ReceiverConfiguration operations:
/// - tt__ReceiverConfiguration* soap_new_tt__ReceiverConfiguration(soap*) allocate and default initialize
/// - tt__ReceiverConfiguration* soap_new_tt__ReceiverConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__ReceiverConfiguration* soap_new_req_tt__ReceiverConfiguration(soap*, ...) allocate, set required members
/// - tt__ReceiverConfiguration* soap_new_set_tt__ReceiverConfiguration(soap*, ...) allocate, set all public members
/// - tt__ReceiverConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReceiverConfiguration(soap*, tt__ReceiverConfiguration*) deserialize from a stream
/// - int soap_write_tt__ReceiverConfiguration(soap*, tt__ReceiverConfiguration*) serialize to a stream
/// - tt__ReceiverConfiguration* tt__ReceiverConfiguration::soap_dup(soap*) returns deep copy of tt__ReceiverConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReceiverConfiguration::soap_del() deep deletes tt__ReceiverConfiguration data members, use only after tt__ReceiverConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReceiverConfiguration::soap_type() returns SOAP_TYPE_tt__ReceiverConfiguration or derived type identifier
class tt__ReceiverConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The following connection modes are defined:
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ReceiverMode.
    tt__ReceiverMode                     Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Details of the URI to which the receiver should connect.
/// </BLOCKQUOTE></PRE>
///
/// Element "MediaUri" of type xs:anyURI.
    xsd__anyURI                          MediaUri                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Stream connection parameters.
/// </BLOCKQUOTE></PRE>
///
/// Element "StreamSetup" of type "http://www.onvif.org/ver10/schema":StreamSetup.
    tt__StreamSetup*                     StreamSetup                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverStateInformation is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains information about a receiver's current state.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ReceiverStateInformation operations:
/// - tt__ReceiverStateInformation* soap_new_tt__ReceiverStateInformation(soap*) allocate and default initialize
/// - tt__ReceiverStateInformation* soap_new_tt__ReceiverStateInformation(soap*, int num) allocate and default initialize an array
/// - tt__ReceiverStateInformation* soap_new_req_tt__ReceiverStateInformation(soap*, ...) allocate, set required members
/// - tt__ReceiverStateInformation* soap_new_set_tt__ReceiverStateInformation(soap*, ...) allocate, set all public members
/// - tt__ReceiverStateInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReceiverStateInformation(soap*, tt__ReceiverStateInformation*) deserialize from a stream
/// - int soap_write_tt__ReceiverStateInformation(soap*, tt__ReceiverStateInformation*) serialize to a stream
/// - tt__ReceiverStateInformation* tt__ReceiverStateInformation::soap_dup(soap*) returns deep copy of tt__ReceiverStateInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReceiverStateInformation::soap_del() deep deletes tt__ReceiverStateInformation data members, use only after tt__ReceiverStateInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReceiverStateInformation::soap_type() returns SOAP_TYPE_tt__ReceiverStateInformation or derived type identifier
class tt__ReceiverStateInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The connection state of the receiver may have one of the following states:
/// </BLOCKQUOTE></PRE>
///
/// Element "State" of type "http://www.onvif.org/ver10/schema":ReceiverState.
    tt__ReceiverState                    State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not the receiver was created automatically.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoCreated" of type xs:boolean.
    bool                                 AutoCreated                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SourceReference is a complexType.
///
/// @note class tt__SourceReference operations:
/// - tt__SourceReference* soap_new_tt__SourceReference(soap*) allocate and default initialize
/// - tt__SourceReference* soap_new_tt__SourceReference(soap*, int num) allocate and default initialize an array
/// - tt__SourceReference* soap_new_req_tt__SourceReference(soap*, ...) allocate, set required members
/// - tt__SourceReference* soap_new_set_tt__SourceReference(soap*, ...) allocate, set all public members
/// - tt__SourceReference::soap_default(soap*) default initialize members
/// - int soap_read_tt__SourceReference(soap*, tt__SourceReference*) deserialize from a stream
/// - int soap_write_tt__SourceReference(soap*, tt__SourceReference*) serialize to a stream
/// - tt__SourceReference* tt__SourceReference::soap_dup(soap*) returns deep copy of tt__SourceReference, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SourceReference::soap_del() deep deletes tt__SourceReference data members, use only after tt__SourceReference::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SourceReference::soap_type() returns SOAP_TYPE_tt__SourceReference or derived type identifier
class tt__SourceReference : public xsd__anyType
{ public:
/// Element "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "Type" of type xs:anyURI.
  @ xsd__anyURI                          Type                           0 = "http://www.onvif.org/ver10/schema/Receiver";	///< Optional attribute with default value="http://www.onvif.org/ver10/schema/Receiver".
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DateTimeRange is a complexType.
///
/// @note class tt__DateTimeRange operations:
/// - tt__DateTimeRange* soap_new_tt__DateTimeRange(soap*) allocate and default initialize
/// - tt__DateTimeRange* soap_new_tt__DateTimeRange(soap*, int num) allocate and default initialize an array
/// - tt__DateTimeRange* soap_new_req_tt__DateTimeRange(soap*, ...) allocate, set required members
/// - tt__DateTimeRange* soap_new_set_tt__DateTimeRange(soap*, ...) allocate, set all public members
/// - tt__DateTimeRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__DateTimeRange(soap*, tt__DateTimeRange*) deserialize from a stream
/// - int soap_write_tt__DateTimeRange(soap*, tt__DateTimeRange*) serialize to a stream
/// - tt__DateTimeRange* tt__DateTimeRange::soap_dup(soap*) returns deep copy of tt__DateTimeRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DateTimeRange::soap_del() deep deletes tt__DateTimeRange data members, use only after tt__DateTimeRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DateTimeRange::soap_type() returns SOAP_TYPE_tt__DateTimeRange or derived type identifier
class tt__DateTimeRange : public xsd__anyType
{ public:
/// Element "From" of type xs:dateTime.
    xsd__dateTime                        From                           1;	///< Required element.
/// Element "Until" of type xs:dateTime.
    xsd__dateTime                        Until                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingSummary is a complexType.
///
/// @note class tt__RecordingSummary operations:
/// - tt__RecordingSummary* soap_new_tt__RecordingSummary(soap*) allocate and default initialize
/// - tt__RecordingSummary* soap_new_tt__RecordingSummary(soap*, int num) allocate and default initialize an array
/// - tt__RecordingSummary* soap_new_req_tt__RecordingSummary(soap*, ...) allocate, set required members
/// - tt__RecordingSummary* soap_new_set_tt__RecordingSummary(soap*, ...) allocate, set all public members
/// - tt__RecordingSummary::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingSummary(soap*, tt__RecordingSummary*) deserialize from a stream
/// - int soap_write_tt__RecordingSummary(soap*, tt__RecordingSummary*) serialize to a stream
/// - tt__RecordingSummary* tt__RecordingSummary::soap_dup(soap*) returns deep copy of tt__RecordingSummary, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingSummary::soap_del() deep deletes tt__RecordingSummary data members, use only after tt__RecordingSummary::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingSummary::soap_type() returns SOAP_TYPE_tt__RecordingSummary or derived type identifier
class tt__RecordingSummary : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The earliest point in time where there is recorded data on the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "DataFrom" of type xs:dateTime.
    xsd__dateTime                        DataFrom                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The most recent point in time where there is recorded data on the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "DataUntil" of type xs:dateTime.
    xsd__dateTime                        DataUntil                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The device contains this many recordings.
/// </BLOCKQUOTE></PRE>
///
/// Element "NumberRecordings" of type xs:int.
    int                                  NumberRecordings               1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SearchScope is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A structure for defining a limited scope when searching in recorded data.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__SearchScope operations:
/// - tt__SearchScope* soap_new_tt__SearchScope(soap*) allocate and default initialize
/// - tt__SearchScope* soap_new_tt__SearchScope(soap*, int num) allocate and default initialize an array
/// - tt__SearchScope* soap_new_req_tt__SearchScope(soap*, ...) allocate, set required members
/// - tt__SearchScope* soap_new_set_tt__SearchScope(soap*, ...) allocate, set all public members
/// - tt__SearchScope::soap_default(soap*) default initialize members
/// - int soap_read_tt__SearchScope(soap*, tt__SearchScope*) deserialize from a stream
/// - int soap_write_tt__SearchScope(soap*, tt__SearchScope*) serialize to a stream
/// - tt__SearchScope* tt__SearchScope::soap_dup(soap*) returns deep copy of tt__SearchScope, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SearchScope::soap_del() deep deletes tt__SearchScope data members, use only after tt__SearchScope::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SearchScope::soap_type() returns SOAP_TYPE_tt__SearchScope or derived type identifier
class tt__SearchScope : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of sources that are included in the scope. If this list is included, only data from one of these sources shall be searched.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__SourceReference* of length 0..unbounded.
    std::vector<tt__SourceReference*   > IncludedSources                0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   A list of recordings that are included in the scope. If this list is included, only data from one of these recordings shall be searched.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__RecordingReference of length 0..unbounded.
    std::vector<tt__RecordingReference > IncludedRecordings             0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   An xpath expression used to specify what recordings to search. Only those recordings with an RecordingInformation structure that matches the filter shall be searched.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingInformationFilter" of type "http://www.onvif.org/ver10/schema":XPathExpression.
    tt__XPathExpression*                 RecordingInformationFilter     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
///
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SearchScopeExtension.
    tt__SearchScopeExtension*            Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SearchScopeExtension is a complexType.
///
/// @note class tt__SearchScopeExtension operations:
/// - tt__SearchScopeExtension* soap_new_tt__SearchScopeExtension(soap*) allocate and default initialize
/// - tt__SearchScopeExtension* soap_new_tt__SearchScopeExtension(soap*, int num) allocate and default initialize an array
/// - tt__SearchScopeExtension* soap_new_req_tt__SearchScopeExtension(soap*, ...) allocate, set required members
/// - tt__SearchScopeExtension* soap_new_set_tt__SearchScopeExtension(soap*, ...) allocate, set all public members
/// - tt__SearchScopeExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SearchScopeExtension(soap*, tt__SearchScopeExtension*) deserialize from a stream
/// - int soap_write_tt__SearchScopeExtension(soap*, tt__SearchScopeExtension*) serialize to a stream
/// - tt__SearchScopeExtension* tt__SearchScopeExtension::soap_dup(soap*) returns deep copy of tt__SearchScopeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SearchScopeExtension::soap_del() deep deletes tt__SearchScopeExtension data members, use only after tt__SearchScopeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SearchScopeExtension::soap_type() returns SOAP_TYPE_tt__SearchScopeExtension or derived type identifier
class tt__SearchScopeExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPositionFilter is a complexType.
///
/// @note class tt__PTZPositionFilter operations:
/// - tt__PTZPositionFilter* soap_new_tt__PTZPositionFilter(soap*) allocate and default initialize
/// - tt__PTZPositionFilter* soap_new_tt__PTZPositionFilter(soap*, int num) allocate and default initialize an array
/// - tt__PTZPositionFilter* soap_new_req_tt__PTZPositionFilter(soap*, ...) allocate, set required members
/// - tt__PTZPositionFilter* soap_new_set_tt__PTZPositionFilter(soap*, ...) allocate, set all public members
/// - tt__PTZPositionFilter::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPositionFilter(soap*, tt__PTZPositionFilter*) deserialize from a stream
/// - int soap_write_tt__PTZPositionFilter(soap*, tt__PTZPositionFilter*) serialize to a stream
/// - tt__PTZPositionFilter* tt__PTZPositionFilter::soap_dup(soap*) returns deep copy of tt__PTZPositionFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPositionFilter::soap_del() deep deletes tt__PTZPositionFilter data members, use only after tt__PTZPositionFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPositionFilter::soap_type() returns SOAP_TYPE_tt__PTZPositionFilter or derived type identifier
class tt__PTZPositionFilter : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The lower boundary of the PTZ volume to look for.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinPosition" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       MinPosition                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The upper boundary of the PTZ volume to look for.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxPosition" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       MaxPosition                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If true, search for when entering the specified PTZ volume.
/// </BLOCKQUOTE></PRE>
///
/// Element "EnterOrExit" of type xs:boolean.
    bool                                 EnterOrExit                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataFilter is a complexType.
///
/// @note class tt__MetadataFilter operations:
/// - tt__MetadataFilter* soap_new_tt__MetadataFilter(soap*) allocate and default initialize
/// - tt__MetadataFilter* soap_new_tt__MetadataFilter(soap*, int num) allocate and default initialize an array
/// - tt__MetadataFilter* soap_new_req_tt__MetadataFilter(soap*, ...) allocate, set required members
/// - tt__MetadataFilter* soap_new_set_tt__MetadataFilter(soap*, ...) allocate, set all public members
/// - tt__MetadataFilter::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataFilter(soap*, tt__MetadataFilter*) deserialize from a stream
/// - int soap_write_tt__MetadataFilter(soap*, tt__MetadataFilter*) serialize to a stream
/// - tt__MetadataFilter* tt__MetadataFilter::soap_dup(soap*) returns deep copy of tt__MetadataFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataFilter::soap_del() deep deletes tt__MetadataFilter data members, use only after tt__MetadataFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataFilter::soap_type() returns SOAP_TYPE_tt__MetadataFilter or derived type identifier
class tt__MetadataFilter : public xsd__anyType
{ public:
/// Element "MetadataStreamFilter" of type "http://www.onvif.org/ver10/schema":XPathExpression.
    tt__XPathExpression                  MetadataStreamFilter           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FindRecordingResultList is a complexType.
///
/// @note class tt__FindRecordingResultList operations:
/// - tt__FindRecordingResultList* soap_new_tt__FindRecordingResultList(soap*) allocate and default initialize
/// - tt__FindRecordingResultList* soap_new_tt__FindRecordingResultList(soap*, int num) allocate and default initialize an array
/// - tt__FindRecordingResultList* soap_new_req_tt__FindRecordingResultList(soap*, ...) allocate, set required members
/// - tt__FindRecordingResultList* soap_new_set_tt__FindRecordingResultList(soap*, ...) allocate, set all public members
/// - tt__FindRecordingResultList::soap_default(soap*) default initialize members
/// - int soap_read_tt__FindRecordingResultList(soap*, tt__FindRecordingResultList*) deserialize from a stream
/// - int soap_write_tt__FindRecordingResultList(soap*, tt__FindRecordingResultList*) serialize to a stream
/// - tt__FindRecordingResultList* tt__FindRecordingResultList::soap_dup(soap*) returns deep copy of tt__FindRecordingResultList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FindRecordingResultList::soap_del() deep deletes tt__FindRecordingResultList data members, use only after tt__FindRecordingResultList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FindRecordingResultList::soap_type() returns SOAP_TYPE_tt__FindRecordingResultList or derived type identifier
class tt__FindRecordingResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
///
/// Element "SearchState" of type "http://www.onvif.org/ver10/schema":SearchState.
    tt__SearchState                      SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A RecordingInformation structure for each found recording matching the search.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__RecordingInformation* of length 0..unbounded.
    std::vector<tt__RecordingInformation*> RecordingInformation           0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":FindEventResultList is a complexType.
///
/// @note class tt__FindEventResultList operations:
/// - tt__FindEventResultList* soap_new_tt__FindEventResultList(soap*) allocate and default initialize
/// - tt__FindEventResultList* soap_new_tt__FindEventResultList(soap*, int num) allocate and default initialize an array
/// - tt__FindEventResultList* soap_new_req_tt__FindEventResultList(soap*, ...) allocate, set required members
/// - tt__FindEventResultList* soap_new_set_tt__FindEventResultList(soap*, ...) allocate, set all public members
/// - tt__FindEventResultList::soap_default(soap*) default initialize members
/// - int soap_read_tt__FindEventResultList(soap*, tt__FindEventResultList*) deserialize from a stream
/// - int soap_write_tt__FindEventResultList(soap*, tt__FindEventResultList*) serialize to a stream
/// - tt__FindEventResultList* tt__FindEventResultList::soap_dup(soap*) returns deep copy of tt__FindEventResultList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FindEventResultList::soap_del() deep deletes tt__FindEventResultList data members, use only after tt__FindEventResultList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FindEventResultList::soap_type() returns SOAP_TYPE_tt__FindEventResultList or derived type identifier
class tt__FindEventResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
///
/// Element "SearchState" of type "http://www.onvif.org/ver10/schema":SearchState.
    tt__SearchState                      SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A FindEventResult structure for each found event matching the search.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__FindEventResult* of length 0..unbounded.
    std::vector<tt__FindEventResult*   > Result                         0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":FindEventResult is a complexType.
///
/// @note class tt__FindEventResult operations:
/// - tt__FindEventResult* soap_new_tt__FindEventResult(soap*) allocate and default initialize
/// - tt__FindEventResult* soap_new_tt__FindEventResult(soap*, int num) allocate and default initialize an array
/// - tt__FindEventResult* soap_new_req_tt__FindEventResult(soap*, ...) allocate, set required members
/// - tt__FindEventResult* soap_new_set_tt__FindEventResult(soap*, ...) allocate, set all public members
/// - tt__FindEventResult::soap_default(soap*) default initialize members
/// - int soap_read_tt__FindEventResult(soap*, tt__FindEventResult*) deserialize from a stream
/// - int soap_write_tt__FindEventResult(soap*, tt__FindEventResult*) serialize to a stream
/// - tt__FindEventResult* tt__FindEventResult::soap_dup(soap*) returns deep copy of tt__FindEventResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FindEventResult::soap_del() deep deletes tt__FindEventResult data members, use only after tt__FindEventResult::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FindEventResult::soap_type() returns SOAP_TYPE_tt__FindEventResult or derived type identifier
class tt__FindEventResult : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The recording where this event was found. Empty string if no recording is associated with this event.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the track where this event was found. Empty string if no track is associated with this event.
/// </BLOCKQUOTE></PRE>
///
/// Element "TrackToken" of type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The time when the event occured.
/// </BLOCKQUOTE></PRE>
///
/// Element "Time" of type xs:dateTime.
    xsd__dateTime                        Time                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The description of the event.
/// </BLOCKQUOTE></PRE>
///
/// Element "Event" of type "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType.
    wsnt__NotificationMessageHolderType*  Event                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If true, indicates that the event is a virtual event generated for this particular search session to give the state of a property at the start time of the search.
/// </BLOCKQUOTE></PRE>
///
/// Element "StartStateEvent" of type xs:boolean.
    bool                                 StartStateEvent                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FindPTZPositionResultList is a complexType.
///
/// @note class tt__FindPTZPositionResultList operations:
/// - tt__FindPTZPositionResultList* soap_new_tt__FindPTZPositionResultList(soap*) allocate and default initialize
/// - tt__FindPTZPositionResultList* soap_new_tt__FindPTZPositionResultList(soap*, int num) allocate and default initialize an array
/// - tt__FindPTZPositionResultList* soap_new_req_tt__FindPTZPositionResultList(soap*, ...) allocate, set required members
/// - tt__FindPTZPositionResultList* soap_new_set_tt__FindPTZPositionResultList(soap*, ...) allocate, set all public members
/// - tt__FindPTZPositionResultList::soap_default(soap*) default initialize members
/// - int soap_read_tt__FindPTZPositionResultList(soap*, tt__FindPTZPositionResultList*) deserialize from a stream
/// - int soap_write_tt__FindPTZPositionResultList(soap*, tt__FindPTZPositionResultList*) serialize to a stream
/// - tt__FindPTZPositionResultList* tt__FindPTZPositionResultList::soap_dup(soap*) returns deep copy of tt__FindPTZPositionResultList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FindPTZPositionResultList::soap_del() deep deletes tt__FindPTZPositionResultList data members, use only after tt__FindPTZPositionResultList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FindPTZPositionResultList::soap_type() returns SOAP_TYPE_tt__FindPTZPositionResultList or derived type identifier
class tt__FindPTZPositionResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
///
/// Element "SearchState" of type "http://www.onvif.org/ver10/schema":SearchState.
    tt__SearchState                      SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A FindPTZPositionResult structure for each found PTZ position matching the search.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__FindPTZPositionResult* of length 0..unbounded.
    std::vector<tt__FindPTZPositionResult*> Result                         0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":FindPTZPositionResult is a complexType.
///
/// @note class tt__FindPTZPositionResult operations:
/// - tt__FindPTZPositionResult* soap_new_tt__FindPTZPositionResult(soap*) allocate and default initialize
/// - tt__FindPTZPositionResult* soap_new_tt__FindPTZPositionResult(soap*, int num) allocate and default initialize an array
/// - tt__FindPTZPositionResult* soap_new_req_tt__FindPTZPositionResult(soap*, ...) allocate, set required members
/// - tt__FindPTZPositionResult* soap_new_set_tt__FindPTZPositionResult(soap*, ...) allocate, set all public members
/// - tt__FindPTZPositionResult::soap_default(soap*) default initialize members
/// - int soap_read_tt__FindPTZPositionResult(soap*, tt__FindPTZPositionResult*) deserialize from a stream
/// - int soap_write_tt__FindPTZPositionResult(soap*, tt__FindPTZPositionResult*) serialize to a stream
/// - tt__FindPTZPositionResult* tt__FindPTZPositionResult::soap_dup(soap*) returns deep copy of tt__FindPTZPositionResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FindPTZPositionResult::soap_del() deep deletes tt__FindPTZPositionResult data members, use only after tt__FindPTZPositionResult::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FindPTZPositionResult::soap_type() returns SOAP_TYPE_tt__FindPTZPositionResult or derived type identifier
class tt__FindPTZPositionResult : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to the recording containing the PTZ position.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the metadata track containing the PTZ position.
/// </BLOCKQUOTE></PRE>
///
/// Element "TrackToken" of type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The time when the PTZ position was valid.
/// </BLOCKQUOTE></PRE>
///
/// Element "Time" of type xs:dateTime.
    xsd__dateTime                        Time                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The PTZ position.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       Position                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FindMetadataResultList is a complexType.
///
/// @note class tt__FindMetadataResultList operations:
/// - tt__FindMetadataResultList* soap_new_tt__FindMetadataResultList(soap*) allocate and default initialize
/// - tt__FindMetadataResultList* soap_new_tt__FindMetadataResultList(soap*, int num) allocate and default initialize an array
/// - tt__FindMetadataResultList* soap_new_req_tt__FindMetadataResultList(soap*, ...) allocate, set required members
/// - tt__FindMetadataResultList* soap_new_set_tt__FindMetadataResultList(soap*, ...) allocate, set all public members
/// - tt__FindMetadataResultList::soap_default(soap*) default initialize members
/// - int soap_read_tt__FindMetadataResultList(soap*, tt__FindMetadataResultList*) deserialize from a stream
/// - int soap_write_tt__FindMetadataResultList(soap*, tt__FindMetadataResultList*) serialize to a stream
/// - tt__FindMetadataResultList* tt__FindMetadataResultList::soap_dup(soap*) returns deep copy of tt__FindMetadataResultList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FindMetadataResultList::soap_del() deep deletes tt__FindMetadataResultList data members, use only after tt__FindMetadataResultList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FindMetadataResultList::soap_type() returns SOAP_TYPE_tt__FindMetadataResultList or derived type identifier
class tt__FindMetadataResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
///
/// Element "SearchState" of type "http://www.onvif.org/ver10/schema":SearchState.
    tt__SearchState                      SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A FindMetadataResult structure for each found set of Metadata matching the search.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__FindMetadataResult* of length 0..unbounded.
    std::vector<tt__FindMetadataResult*> Result                         0;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":FindMetadataResult is a complexType.
///
/// @note class tt__FindMetadataResult operations:
/// - tt__FindMetadataResult* soap_new_tt__FindMetadataResult(soap*) allocate and default initialize
/// - tt__FindMetadataResult* soap_new_tt__FindMetadataResult(soap*, int num) allocate and default initialize an array
/// - tt__FindMetadataResult* soap_new_req_tt__FindMetadataResult(soap*, ...) allocate, set required members
/// - tt__FindMetadataResult* soap_new_set_tt__FindMetadataResult(soap*, ...) allocate, set all public members
/// - tt__FindMetadataResult::soap_default(soap*) default initialize members
/// - int soap_read_tt__FindMetadataResult(soap*, tt__FindMetadataResult*) deserialize from a stream
/// - int soap_write_tt__FindMetadataResult(soap*, tt__FindMetadataResult*) serialize to a stream
/// - tt__FindMetadataResult* tt__FindMetadataResult::soap_dup(soap*) returns deep copy of tt__FindMetadataResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FindMetadataResult::soap_del() deep deletes tt__FindMetadataResult data members, use only after tt__FindMetadataResult::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FindMetadataResult::soap_type() returns SOAP_TYPE_tt__FindMetadataResult or derived type identifier
class tt__FindMetadataResult : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to the recording containing the metadata.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the metadata track containing the matching metadata.
/// </BLOCKQUOTE></PRE>
///
/// Element "TrackToken" of type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The point in time when the matching metadata occurs in the metadata track.
/// </BLOCKQUOTE></PRE>
///
/// Element "Time" of type xs:dateTime.
    xsd__dateTime                        Time                           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingInformation is a complexType.
///
/// @note class tt__RecordingInformation operations:
/// - tt__RecordingInformation* soap_new_tt__RecordingInformation(soap*) allocate and default initialize
/// - tt__RecordingInformation* soap_new_tt__RecordingInformation(soap*, int num) allocate and default initialize an array
/// - tt__RecordingInformation* soap_new_req_tt__RecordingInformation(soap*, ...) allocate, set required members
/// - tt__RecordingInformation* soap_new_set_tt__RecordingInformation(soap*, ...) allocate, set all public members
/// - tt__RecordingInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingInformation(soap*, tt__RecordingInformation*) deserialize from a stream
/// - int soap_write_tt__RecordingInformation(soap*, tt__RecordingInformation*) serialize to a stream
/// - tt__RecordingInformation* tt__RecordingInformation::soap_dup(soap*) returns deep copy of tt__RecordingInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingInformation::soap_del() deep deletes tt__RecordingInformation data members, use only after tt__RecordingInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingInformation::soap_type() returns SOAP_TYPE_tt__RecordingInformation or derived type identifier
class tt__RecordingInformation : public xsd__anyType
{ public:
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the source of the recording. This gives a description of where the data in the recording comes from. Since a single
///   recording is intended to record related material, there is just one source. It is indicates the physical location or the
///   major data source for the recording. Currently the recordingconfiguration cannot describe each individual data source.
/// </BLOCKQUOTE></PRE>
///
/// Element "Source" of type "http://www.onvif.org/ver10/schema":RecordingSourceInformation.
    tt__RecordingSourceInformation*      Source                         1;	///< Required element.
/// Element "EarliestRecording" of type xs:dateTime.
    xsd__dateTime*                       EarliestRecording              0;	///< Optional element.
/// Element "LatestRecording" of type xs:dateTime.
    xsd__dateTime*                       LatestRecording                0;	///< Optional element.
/// Element "Content" of type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Content                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Basic information about the track. Note that a track may represent a single contiguous time span or consist of multiple slices.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__TrackInformation* of length 0..unbounded.
    std::vector<tt__TrackInformation*  > Track                          0;	///< Multiple elements.
/// Element "RecordingStatus" of type "http://www.onvif.org/ver10/schema":RecordingStatus.
    tt__RecordingStatus                  RecordingStatus                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingSourceInformation is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A set of informative desciptions of a data source. The Search searvice allows a client to filter on recordings based on information in this structure.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__RecordingSourceInformation operations:
/// - tt__RecordingSourceInformation* soap_new_tt__RecordingSourceInformation(soap*) allocate and default initialize
/// - tt__RecordingSourceInformation* soap_new_tt__RecordingSourceInformation(soap*, int num) allocate and default initialize an array
/// - tt__RecordingSourceInformation* soap_new_req_tt__RecordingSourceInformation(soap*, ...) allocate, set required members
/// - tt__RecordingSourceInformation* soap_new_set_tt__RecordingSourceInformation(soap*, ...) allocate, set all public members
/// - tt__RecordingSourceInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingSourceInformation(soap*, tt__RecordingSourceInformation*) deserialize from a stream
/// - int soap_write_tt__RecordingSourceInformation(soap*, tt__RecordingSourceInformation*) serialize to a stream
/// - tt__RecordingSourceInformation* tt__RecordingSourceInformation::soap_dup(soap*) returns deep copy of tt__RecordingSourceInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingSourceInformation::soap_del() deep deletes tt__RecordingSourceInformation data members, use only after tt__RecordingSourceInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingSourceInformation::soap_type() returns SOAP_TYPE_tt__RecordingSourceInformation or derived type identifier
class tt__RecordingSourceInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier for the source chosen by the client that creates the structure.
///   This identifier is opaque to the device. Clients may use any type of URI for this field. A device shall support at least 128 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "SourceId" of type xs:anyURI.
    xsd__anyURI                          SourceId                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative user readable name of the source, e.g. "Camera23". A device shall support at least 20 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the physical location of the source, e.g. the coordinates on a map.
/// </BLOCKQUOTE></PRE>
///
/// Element "Location" of type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Location                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the source.
/// </BLOCKQUOTE></PRE>
///
/// Element "Description" of type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Description                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URI provided by the service supplying data to be recorded. A device shall support at least 128 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Address" of type xs:anyURI.
    xsd__anyURI                          Address                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackInformation is a complexType.
///
/// @note class tt__TrackInformation operations:
/// - tt__TrackInformation* soap_new_tt__TrackInformation(soap*) allocate and default initialize
/// - tt__TrackInformation* soap_new_tt__TrackInformation(soap*, int num) allocate and default initialize an array
/// - tt__TrackInformation* soap_new_req_tt__TrackInformation(soap*, ...) allocate, set required members
/// - tt__TrackInformation* soap_new_set_tt__TrackInformation(soap*, ...) allocate, set all public members
/// - tt__TrackInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__TrackInformation(soap*, tt__TrackInformation*) deserialize from a stream
/// - int soap_write_tt__TrackInformation(soap*, tt__TrackInformation*) serialize to a stream
/// - tt__TrackInformation* tt__TrackInformation::soap_dup(soap*) returns deep copy of tt__TrackInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TrackInformation::soap_del() deep deletes tt__TrackInformation data members, use only after tt__TrackInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TrackInformation::soap_type() returns SOAP_TYPE_tt__TrackInformation or derived type identifier
class tt__TrackInformation : public xsd__anyType
{ public:
/// Element "TrackToken" of type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of the track: "Video", "Audio" or "Metadata".
///   The track shall only be able to hold data of that type.
/// </BLOCKQUOTE></PRE>
///
/// Element "TrackType" of type "http://www.onvif.org/ver10/schema":TrackType.
    tt__TrackType                        TrackType                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the contents of the track.
/// </BLOCKQUOTE></PRE>
///
/// Element "Description" of type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Description                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The start date and time of the oldest recorded data in the track.
/// </BLOCKQUOTE></PRE>
///
/// Element "DataFrom" of type xs:dateTime.
    xsd__dateTime                        DataFrom                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The stop date and time of the newest recorded data in the track.
/// </BLOCKQUOTE></PRE>
///
/// Element "DataTo" of type xs:dateTime.
    xsd__dateTime                        DataTo                         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaAttributes is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A set of media attributes valid for a recording at a point in time or for a time interval.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__MediaAttributes operations:
/// - tt__MediaAttributes* soap_new_tt__MediaAttributes(soap*) allocate and default initialize
/// - tt__MediaAttributes* soap_new_tt__MediaAttributes(soap*, int num) allocate and default initialize an array
/// - tt__MediaAttributes* soap_new_req_tt__MediaAttributes(soap*, ...) allocate, set required members
/// - tt__MediaAttributes* soap_new_set_tt__MediaAttributes(soap*, ...) allocate, set all public members
/// - tt__MediaAttributes::soap_default(soap*) default initialize members
/// - int soap_read_tt__MediaAttributes(soap*, tt__MediaAttributes*) deserialize from a stream
/// - int soap_write_tt__MediaAttributes(soap*, tt__MediaAttributes*) serialize to a stream
/// - tt__MediaAttributes* tt__MediaAttributes::soap_dup(soap*) returns deep copy of tt__MediaAttributes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MediaAttributes::soap_del() deep deletes tt__MediaAttributes data members, use only after tt__MediaAttributes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MediaAttributes::soap_type() returns SOAP_TYPE_tt__MediaAttributes or derived type identifier
class tt__MediaAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to the recording that has these attributes.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A set of attributes for each track.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__TrackAttributes* of length 0..unbounded.
    std::vector<tt__TrackAttributes*   > TrackAttributes                0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The attributes are valid from this point in time in the recording.
/// </BLOCKQUOTE></PRE>
///
/// Element "From" of type xs:dateTime.
    xsd__dateTime                        From                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The attributes are valid until this point in time in the recording. Can be equal to 'From' to indicate that the attributes are only known to be valid for this particular point in time.
/// </BLOCKQUOTE></PRE>
///
/// Element "Until" of type xs:dateTime.
    xsd__dateTime                        Until                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackAttributes is a complexType.
///
/// @note class tt__TrackAttributes operations:
/// - tt__TrackAttributes* soap_new_tt__TrackAttributes(soap*) allocate and default initialize
/// - tt__TrackAttributes* soap_new_tt__TrackAttributes(soap*, int num) allocate and default initialize an array
/// - tt__TrackAttributes* soap_new_req_tt__TrackAttributes(soap*, ...) allocate, set required members
/// - tt__TrackAttributes* soap_new_set_tt__TrackAttributes(soap*, ...) allocate, set all public members
/// - tt__TrackAttributes::soap_default(soap*) default initialize members
/// - int soap_read_tt__TrackAttributes(soap*, tt__TrackAttributes*) deserialize from a stream
/// - int soap_write_tt__TrackAttributes(soap*, tt__TrackAttributes*) serialize to a stream
/// - tt__TrackAttributes* tt__TrackAttributes::soap_dup(soap*) returns deep copy of tt__TrackAttributes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TrackAttributes::soap_del() deep deletes tt__TrackAttributes data members, use only after tt__TrackAttributes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TrackAttributes::soap_type() returns SOAP_TYPE_tt__TrackAttributes or derived type identifier
class tt__TrackAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The basic information about the track. Note that a track may represent a single contiguous time span or consist of multiple slices.
/// </BLOCKQUOTE></PRE>
///
/// Element "TrackInformation" of type "http://www.onvif.org/ver10/schema":TrackInformation.
    tt__TrackInformation*                TrackInformation               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If the track is a video track, exactly one of this structure shall be present and contain the video attributes.
/// </BLOCKQUOTE></PRE>
///
/// Element "VideoAttributes" of type "http://www.onvif.org/ver10/schema":VideoAttributes.
    tt__VideoAttributes*                 VideoAttributes                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the track is an audio track, exactly one of this structure shall be present and contain the audio attributes.
/// </BLOCKQUOTE></PRE>
///
/// Element "AudioAttributes" of type "http://www.onvif.org/ver10/schema":AudioAttributes.
    tt__AudioAttributes*                 AudioAttributes                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the track is an metadata track, exactly one of this structure shall be present and contain the metadata attributes.
/// </BLOCKQUOTE></PRE>
///
/// Element "MetadataAttributes" of type "http://www.onvif.org/ver10/schema":MetadataAttributes.
    tt__MetadataAttributes*              MetadataAttributes             0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
///
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":TrackAttributesExtension.
    tt__TrackAttributesExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackAttributesExtension is a complexType.
///
/// @note class tt__TrackAttributesExtension operations:
/// - tt__TrackAttributesExtension* soap_new_tt__TrackAttributesExtension(soap*) allocate and default initialize
/// - tt__TrackAttributesExtension* soap_new_tt__TrackAttributesExtension(soap*, int num) allocate and default initialize an array
/// - tt__TrackAttributesExtension* soap_new_req_tt__TrackAttributesExtension(soap*, ...) allocate, set required members
/// - tt__TrackAttributesExtension* soap_new_set_tt__TrackAttributesExtension(soap*, ...) allocate, set all public members
/// - tt__TrackAttributesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__TrackAttributesExtension(soap*, tt__TrackAttributesExtension*) deserialize from a stream
/// - int soap_write_tt__TrackAttributesExtension(soap*, tt__TrackAttributesExtension*) serialize to a stream
/// - tt__TrackAttributesExtension* tt__TrackAttributesExtension::soap_dup(soap*) returns deep copy of tt__TrackAttributesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TrackAttributesExtension::soap_del() deep deletes tt__TrackAttributesExtension data members, use only after tt__TrackAttributesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TrackAttributesExtension::soap_type() returns SOAP_TYPE_tt__TrackAttributesExtension or derived type identifier
class tt__TrackAttributesExtension : public xsd__anyType
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoAttributes is a complexType.
///
/// @note class tt__VideoAttributes operations:
/// - tt__VideoAttributes* soap_new_tt__VideoAttributes(soap*) allocate and default initialize
/// - tt__VideoAttributes* soap_new_tt__VideoAttributes(soap*, int num) allocate and default initialize an array
/// - tt__VideoAttributes* soap_new_req_tt__VideoAttributes(soap*, ...) allocate, set required members
/// - tt__VideoAttributes* soap_new_set_tt__VideoAttributes(soap*, ...) allocate, set all public members
/// - tt__VideoAttributes::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoAttributes(soap*, tt__VideoAttributes*) deserialize from a stream
/// - int soap_write_tt__VideoAttributes(soap*, tt__VideoAttributes*) serialize to a stream
/// - tt__VideoAttributes* tt__VideoAttributes::soap_dup(soap*) returns deep copy of tt__VideoAttributes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoAttributes::soap_del() deep deletes tt__VideoAttributes data members, use only after tt__VideoAttributes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoAttributes::soap_type() returns SOAP_TYPE_tt__VideoAttributes or derived type identifier
class tt__VideoAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Average bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type xs:int.
    int*                                 Bitrate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The width of the video in pixels.
/// </BLOCKQUOTE></PRE>
///
/// Element "Width" of type xs:int.
    int                                  Width                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The height of the video in pixels.
/// </BLOCKQUOTE></PRE>
///
/// Element "Height" of type xs:int.
    int                                  Height                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Video encoding of the track. Use value from tt:VideoEncoding for MPEG4. Otherwise use values from tt:VideoEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Average framerate in frames per second.
/// </BLOCKQUOTE></PRE>
///
/// Element "Framerate" of type xs:float.
    float                                Framerate                      1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioAttributes is a complexType.
///
/// @note class tt__AudioAttributes operations:
/// - tt__AudioAttributes* soap_new_tt__AudioAttributes(soap*) allocate and default initialize
/// - tt__AudioAttributes* soap_new_tt__AudioAttributes(soap*, int num) allocate and default initialize an array
/// - tt__AudioAttributes* soap_new_req_tt__AudioAttributes(soap*, ...) allocate, set required members
/// - tt__AudioAttributes* soap_new_set_tt__AudioAttributes(soap*, ...) allocate, set all public members
/// - tt__AudioAttributes::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioAttributes(soap*, tt__AudioAttributes*) deserialize from a stream
/// - int soap_write_tt__AudioAttributes(soap*, tt__AudioAttributes*) serialize to a stream
/// - tt__AudioAttributes* tt__AudioAttributes::soap_dup(soap*) returns deep copy of tt__AudioAttributes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioAttributes::soap_del() deep deletes tt__AudioAttributes data members, use only after tt__AudioAttributes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioAttributes::soap_type() returns SOAP_TYPE_tt__AudioAttributes or derived type identifier
class tt__AudioAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type xs:int.
    int*                                 Bitrate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Audio encoding of the track. Use values from tt:AudioEncoding for G711 and AAC. Otherwise use values from tt:AudioEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The sample rate in kHz.
/// </BLOCKQUOTE></PRE>
///
/// Element "Samplerate" of type xs:int.
    int                                  Samplerate                     1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataAttributes is a complexType.
///
/// @note class tt__MetadataAttributes operations:
/// - tt__MetadataAttributes* soap_new_tt__MetadataAttributes(soap*) allocate and default initialize
/// - tt__MetadataAttributes* soap_new_tt__MetadataAttributes(soap*, int num) allocate and default initialize an array
/// - tt__MetadataAttributes* soap_new_req_tt__MetadataAttributes(soap*, ...) allocate, set required members
/// - tt__MetadataAttributes* soap_new_set_tt__MetadataAttributes(soap*, ...) allocate, set all public members
/// - tt__MetadataAttributes::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataAttributes(soap*, tt__MetadataAttributes*) deserialize from a stream
/// - int soap_write_tt__MetadataAttributes(soap*, tt__MetadataAttributes*) serialize to a stream
/// - tt__MetadataAttributes* tt__MetadataAttributes::soap_dup(soap*) returns deep copy of tt__MetadataAttributes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataAttributes::soap_del() deep deletes tt__MetadataAttributes data members, use only after tt__MetadataAttributes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataAttributes::soap_type() returns SOAP_TYPE_tt__MetadataAttributes or derived type identifier
class tt__MetadataAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates that there can be PTZ data in the metadata track in the specified time interval.
/// </BLOCKQUOTE></PRE>
///
/// Element "CanContainPTZ" of type xs:boolean.
    bool                                 CanContainPTZ                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates that there can be analytics data in the metadata track in the specified time interval.
/// </BLOCKQUOTE></PRE>
///
/// Element "CanContainAnalytics" of type xs:boolean.
    bool                                 CanContainAnalytics            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates that there can be notifications in the metadata track in the specified time interval.
/// </BLOCKQUOTE></PRE>
///
/// Element "CanContainNotifications" of type xs:boolean.
    bool                                 CanContainNotifications        1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   List of all PTZ spaces active for recording. Note that events are only recorded on position changes and the actual point of recording may not necessarily contain an event of the specified type.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "PtzSpaces" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList*                  PtzSpaces                      0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingConfiguration is a complexType.
///
/// @note class tt__RecordingConfiguration operations:
/// - tt__RecordingConfiguration* soap_new_tt__RecordingConfiguration(soap*) allocate and default initialize
/// - tt__RecordingConfiguration* soap_new_tt__RecordingConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__RecordingConfiguration* soap_new_req_tt__RecordingConfiguration(soap*, ...) allocate, set required members
/// - tt__RecordingConfiguration* soap_new_set_tt__RecordingConfiguration(soap*, ...) allocate, set all public members
/// - tt__RecordingConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingConfiguration(soap*, tt__RecordingConfiguration*) deserialize from a stream
/// - int soap_write_tt__RecordingConfiguration(soap*, tt__RecordingConfiguration*) serialize to a stream
/// - tt__RecordingConfiguration* tt__RecordingConfiguration::soap_dup(soap*) returns deep copy of tt__RecordingConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingConfiguration::soap_del() deep deletes tt__RecordingConfiguration data members, use only after tt__RecordingConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingConfiguration::soap_type() returns SOAP_TYPE_tt__RecordingConfiguration or derived type identifier
class tt__RecordingConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Information about the source of the recording.
/// </BLOCKQUOTE></PRE>
///
/// Element "Source" of type "http://www.onvif.org/ver10/schema":RecordingSourceInformation.
    tt__RecordingSourceInformation*      Source                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the source.
/// </BLOCKQUOTE></PRE>
///
/// Element "Content" of type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Content                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sspecifies the maximum time that data in any track within the
///   recording shall be stored. The device shall delete any data older than the maximum retention
///   time. Such data shall not be accessible anymore. If the MaximumRetentionPeriod is set to 0,
///   the device shall not limit the retention time of stored data, except by resource constraints.
///   Whatever the value of MaximumRetentionTime, the device may automatically delete
///   recordings to free up storage space for new recordings.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumRetentionTime" of type xs:duration.
    xsd__duration                        MaximumRetentionTime           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackConfiguration is a complexType.
///
/// @note class tt__TrackConfiguration operations:
/// - tt__TrackConfiguration* soap_new_tt__TrackConfiguration(soap*) allocate and default initialize
/// - tt__TrackConfiguration* soap_new_tt__TrackConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__TrackConfiguration* soap_new_req_tt__TrackConfiguration(soap*, ...) allocate, set required members
/// - tt__TrackConfiguration* soap_new_set_tt__TrackConfiguration(soap*, ...) allocate, set all public members
/// - tt__TrackConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__TrackConfiguration(soap*, tt__TrackConfiguration*) deserialize from a stream
/// - int soap_write_tt__TrackConfiguration(soap*, tt__TrackConfiguration*) serialize to a stream
/// - tt__TrackConfiguration* tt__TrackConfiguration::soap_dup(soap*) returns deep copy of tt__TrackConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TrackConfiguration::soap_del() deep deletes tt__TrackConfiguration data members, use only after tt__TrackConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TrackConfiguration::soap_type() returns SOAP_TYPE_tt__TrackConfiguration or derived type identifier
class tt__TrackConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of the track. It shall be equal to the strings Video,
///   Audio or Metadata. The track shall only be able to hold data of that type.
/// </BLOCKQUOTE></PRE>
///
/// Element "TrackType" of type "http://www.onvif.org/ver10/schema":TrackType.
    tt__TrackType                        TrackType                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the track.
/// </BLOCKQUOTE></PRE>
///
/// Element "Description" of type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Description                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":GetRecordingsResponseItem is a complexType.
///
/// @note class tt__GetRecordingsResponseItem operations:
/// - tt__GetRecordingsResponseItem* soap_new_tt__GetRecordingsResponseItem(soap*) allocate and default initialize
/// - tt__GetRecordingsResponseItem* soap_new_tt__GetRecordingsResponseItem(soap*, int num) allocate and default initialize an array
/// - tt__GetRecordingsResponseItem* soap_new_req_tt__GetRecordingsResponseItem(soap*, ...) allocate, set required members
/// - tt__GetRecordingsResponseItem* soap_new_set_tt__GetRecordingsResponseItem(soap*, ...) allocate, set all public members
/// - tt__GetRecordingsResponseItem::soap_default(soap*) default initialize members
/// - int soap_read_tt__GetRecordingsResponseItem(soap*, tt__GetRecordingsResponseItem*) deserialize from a stream
/// - int soap_write_tt__GetRecordingsResponseItem(soap*, tt__GetRecordingsResponseItem*) serialize to a stream
/// - tt__GetRecordingsResponseItem* tt__GetRecordingsResponseItem::soap_dup(soap*) returns deep copy of tt__GetRecordingsResponseItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GetRecordingsResponseItem::soap_del() deep deletes tt__GetRecordingsResponseItem data members, use only after tt__GetRecordingsResponseItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GetRecordingsResponseItem::soap_type() returns SOAP_TYPE_tt__GetRecordingsResponseItem or derived type identifier
class tt__GetRecordingsResponseItem : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Token of the recording.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configuration of the recording.
/// </BLOCKQUOTE></PRE>
///
/// Element "Configuration" of type "http://www.onvif.org/ver10/schema":RecordingConfiguration.
    tt__RecordingConfiguration*          Configuration                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of tracks.
/// </BLOCKQUOTE></PRE>
///
/// Element "Tracks" of type "http://www.onvif.org/ver10/schema":GetTracksResponseList.
    tt__GetTracksResponseList*           Tracks                         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":GetTracksResponseList is a complexType.
///
/// @note class tt__GetTracksResponseList operations:
/// - tt__GetTracksResponseList* soap_new_tt__GetTracksResponseList(soap*) allocate and default initialize
/// - tt__GetTracksResponseList* soap_new_tt__GetTracksResponseList(soap*, int num) allocate and default initialize an array
/// - tt__GetTracksResponseList* soap_new_req_tt__GetTracksResponseList(soap*, ...) allocate, set required members
/// - tt__GetTracksResponseList* soap_new_set_tt__GetTracksResponseList(soap*, ...) allocate, set all public members
/// - tt__GetTracksResponseList::soap_default(soap*) default initialize members
/// - int soap_read_tt__GetTracksResponseList(soap*, tt__GetTracksResponseList*) deserialize from a stream
/// - int soap_write_tt__GetTracksResponseList(soap*, tt__GetTracksResponseList*) serialize to a stream
/// - tt__GetTracksResponseList* tt__GetTracksResponseList::soap_dup(soap*) returns deep copy of tt__GetTracksResponseList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GetTracksResponseList::soap_del() deep deletes tt__GetTracksResponseList data members, use only after tt__GetTracksResponseList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GetTracksResponseList::soap_type() returns SOAP_TYPE_tt__GetTracksResponseList or derived type identifier
class tt__GetTracksResponseList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Configuration of a track.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__GetTracksResponseItem* of length 0..unbounded.
    std::vector<tt__GetTracksResponseItem*> Track                          0;	///< Multiple elements.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":GetTracksResponseItem is a complexType.
///
/// @note class tt__GetTracksResponseItem operations:
/// - tt__GetTracksResponseItem* soap_new_tt__GetTracksResponseItem(soap*) allocate and default initialize
/// - tt__GetTracksResponseItem* soap_new_tt__GetTracksResponseItem(soap*, int num) allocate and default initialize an array
/// - tt__GetTracksResponseItem* soap_new_req_tt__GetTracksResponseItem(soap*, ...) allocate, set required members
/// - tt__GetTracksResponseItem* soap_new_set_tt__GetTracksResponseItem(soap*, ...) allocate, set all public members
/// - tt__GetTracksResponseItem::soap_default(soap*) default initialize members
/// - int soap_read_tt__GetTracksResponseItem(soap*, tt__GetTracksResponseItem*) deserialize from a stream
/// - int soap_write_tt__GetTracksResponseItem(soap*, tt__GetTracksResponseItem*) serialize to a stream
/// - tt__GetTracksResponseItem* tt__GetTracksResponseItem::soap_dup(soap*) returns deep copy of tt__GetTracksResponseItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GetTracksResponseItem::soap_del() deep deletes tt__GetTracksResponseItem data members, use only after tt__GetTracksResponseItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GetTracksResponseItem::soap_type() returns SOAP_TYPE_tt__GetTracksResponseItem or derived type identifier
class tt__GetTracksResponseItem : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Token of the track.
/// </BLOCKQUOTE></PRE>
///
/// Element "TrackToken" of type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configuration of the track.
/// </BLOCKQUOTE></PRE>
///
/// Element "Configuration" of type "http://www.onvif.org/ver10/schema":TrackConfiguration.
    tt__TrackConfiguration*              Configuration                  1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobConfiguration is a complexType.
///
/// @note class tt__RecordingJobConfiguration operations:
/// - tt__RecordingJobConfiguration* soap_new_tt__RecordingJobConfiguration(soap*) allocate and default initialize
/// - tt__RecordingJobConfiguration* soap_new_tt__RecordingJobConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobConfiguration* soap_new_req_tt__RecordingJobConfiguration(soap*, ...) allocate, set required members
/// - tt__RecordingJobConfiguration* soap_new_set_tt__RecordingJobConfiguration(soap*, ...) allocate, set all public members
/// - tt__RecordingJobConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobConfiguration(soap*, tt__RecordingJobConfiguration*) deserialize from a stream
/// - int soap_write_tt__RecordingJobConfiguration(soap*, tt__RecordingJobConfiguration*) serialize to a stream
/// - tt__RecordingJobConfiguration* tt__RecordingJobConfiguration::soap_dup(soap*) returns deep copy of tt__RecordingJobConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobConfiguration::soap_del() deep deletes tt__RecordingJobConfiguration data members, use only after tt__RecordingJobConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobConfiguration::soap_type() returns SOAP_TYPE_tt__RecordingJobConfiguration or derived type identifier
class tt__RecordingJobConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifies the recording to which this job shall store the received data.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The mode of the job. If it is idle, nothing shall happen. If it is active, the device shall try
///   to obtain data from the receivers. A client shall use GetRecordingJobState to determine if data transfer is really taking place.<br/>
///   The only valid values for Mode shall be Idle and Active.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":RecordingJobMode.
    tt__RecordingJobMode                 Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This shall be a non-negative number. If there are multiple recording jobs that store data to
///   the same track, the device will only store the data for the recording job with the highest
///   priority. The priority is specified per recording job, but the device shall determine the priority
///   of each track individually. If there are two recording jobs with the same priority, the device
///   shall record the data corresponding to the recording job that was activated the latest.
/// </BLOCKQUOTE></PRE>
///
/// Element "Priority" of type xs:int.
    int                                  Priority                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Source of the recording.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__RecordingJobSource* of length 0..unbounded.
    std::vector<tt__RecordingJobSource*> Source                         0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RecordingJobConfigurationExtension.
    tt__RecordingJobConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobConfigurationExtension is a complexType.
///
/// @note class tt__RecordingJobConfigurationExtension operations:
/// - tt__RecordingJobConfigurationExtension* soap_new_tt__RecordingJobConfigurationExtension(soap*) allocate and default initialize
/// - tt__RecordingJobConfigurationExtension* soap_new_tt__RecordingJobConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobConfigurationExtension* soap_new_req_tt__RecordingJobConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__RecordingJobConfigurationExtension* soap_new_set_tt__RecordingJobConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__RecordingJobConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobConfigurationExtension(soap*, tt__RecordingJobConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__RecordingJobConfigurationExtension(soap*, tt__RecordingJobConfigurationExtension*) serialize to a stream
/// - tt__RecordingJobConfigurationExtension* tt__RecordingJobConfigurationExtension::soap_dup(soap*) returns deep copy of tt__RecordingJobConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobConfigurationExtension::soap_del() deep deletes tt__RecordingJobConfigurationExtension data members, use only after tt__RecordingJobConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobConfigurationExtension::soap_type() returns SOAP_TYPE_tt__RecordingJobConfigurationExtension or derived type identifier
class tt__RecordingJobConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobSource is a complexType.
///
/// @note class tt__RecordingJobSource operations:
/// - tt__RecordingJobSource* soap_new_tt__RecordingJobSource(soap*) allocate and default initialize
/// - tt__RecordingJobSource* soap_new_tt__RecordingJobSource(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobSource* soap_new_req_tt__RecordingJobSource(soap*, ...) allocate, set required members
/// - tt__RecordingJobSource* soap_new_set_tt__RecordingJobSource(soap*, ...) allocate, set all public members
/// - tt__RecordingJobSource::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobSource(soap*, tt__RecordingJobSource*) deserialize from a stream
/// - int soap_write_tt__RecordingJobSource(soap*, tt__RecordingJobSource*) serialize to a stream
/// - tt__RecordingJobSource* tt__RecordingJobSource::soap_dup(soap*) returns deep copy of tt__RecordingJobSource, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobSource::soap_del() deep deletes tt__RecordingJobSource data members, use only after tt__RecordingJobSource::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobSource::soap_type() returns SOAP_TYPE_tt__RecordingJobSource or derived type identifier
class tt__RecordingJobSource : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   This field shall be a reference to the source of the data. The type of the source
///   is determined by the attribute Type in the SourceToken structure. If Type is
///   http://www.onvif.org/ver10/schema/Receiver, the token is a ReceiverReference. In this case
///   the device shall receive the data over the network. If Type is
///   http://www.onvif.org/ver10/schema/Profile, the token identifies a media profile, instructing the
///   device to obtain data from a profile that exists on the local device.
/// </BLOCKQUOTE></PRE>
///
/// Element "SourceToken" of type "http://www.onvif.org/ver10/schema":SourceReference.
    tt__SourceReference*                 SourceToken                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If this field is TRUE, and if the SourceToken is omitted, the device
///   shall create a receiver object (through the receiver service) and assign the
///   ReceiverReference to the SourceToken field. When retrieving the RecordingJobConfiguration
///   from the device, the AutoCreateReceiver field shall never be present.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoCreateReceiver" of type xs:boolean.
    bool*                                AutoCreateReceiver             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of tracks associated with the recording.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__RecordingJobTrack* of length 0..unbounded.
    std::vector<tt__RecordingJobTrack* > Tracks                         0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RecordingJobSourceExtension.
    tt__RecordingJobSourceExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobSourceExtension is a complexType.
///
/// @note class tt__RecordingJobSourceExtension operations:
/// - tt__RecordingJobSourceExtension* soap_new_tt__RecordingJobSourceExtension(soap*) allocate and default initialize
/// - tt__RecordingJobSourceExtension* soap_new_tt__RecordingJobSourceExtension(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobSourceExtension* soap_new_req_tt__RecordingJobSourceExtension(soap*, ...) allocate, set required members
/// - tt__RecordingJobSourceExtension* soap_new_set_tt__RecordingJobSourceExtension(soap*, ...) allocate, set all public members
/// - tt__RecordingJobSourceExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobSourceExtension(soap*, tt__RecordingJobSourceExtension*) deserialize from a stream
/// - int soap_write_tt__RecordingJobSourceExtension(soap*, tt__RecordingJobSourceExtension*) serialize to a stream
/// - tt__RecordingJobSourceExtension* tt__RecordingJobSourceExtension::soap_dup(soap*) returns deep copy of tt__RecordingJobSourceExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobSourceExtension::soap_del() deep deletes tt__RecordingJobSourceExtension data members, use only after tt__RecordingJobSourceExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobSourceExtension::soap_type() returns SOAP_TYPE_tt__RecordingJobSourceExtension or derived type identifier
class tt__RecordingJobSourceExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobTrack is a complexType.
///
/// @note class tt__RecordingJobTrack operations:
/// - tt__RecordingJobTrack* soap_new_tt__RecordingJobTrack(soap*) allocate and default initialize
/// - tt__RecordingJobTrack* soap_new_tt__RecordingJobTrack(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobTrack* soap_new_req_tt__RecordingJobTrack(soap*, ...) allocate, set required members
/// - tt__RecordingJobTrack* soap_new_set_tt__RecordingJobTrack(soap*, ...) allocate, set all public members
/// - tt__RecordingJobTrack::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobTrack(soap*, tt__RecordingJobTrack*) deserialize from a stream
/// - int soap_write_tt__RecordingJobTrack(soap*, tt__RecordingJobTrack*) serialize to a stream
/// - tt__RecordingJobTrack* tt__RecordingJobTrack::soap_dup(soap*) returns deep copy of tt__RecordingJobTrack, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobTrack::soap_del() deep deletes tt__RecordingJobTrack data members, use only after tt__RecordingJobTrack::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobTrack::soap_type() returns SOAP_TYPE_tt__RecordingJobTrack or derived type identifier
class tt__RecordingJobTrack : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the received RTSP stream contains multiple tracks of the same type, the
///   SourceTag differentiates between those Tracks. This field can be ignored in case of recording a local source.
/// </BLOCKQUOTE></PRE>
///
/// Element "SourceTag" of type xs:string.
    std::string                          SourceTag                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The destination is the tracktoken of the track to which the device shall store the
///   received data.
/// </BLOCKQUOTE></PRE>
///
/// Element "Destination" of type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   Destination                    1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateInformation is a complexType.
///
/// @note class tt__RecordingJobStateInformation operations:
/// - tt__RecordingJobStateInformation* soap_new_tt__RecordingJobStateInformation(soap*) allocate and default initialize
/// - tt__RecordingJobStateInformation* soap_new_tt__RecordingJobStateInformation(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobStateInformation* soap_new_req_tt__RecordingJobStateInformation(soap*, ...) allocate, set required members
/// - tt__RecordingJobStateInformation* soap_new_set_tt__RecordingJobStateInformation(soap*, ...) allocate, set all public members
/// - tt__RecordingJobStateInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobStateInformation(soap*, tt__RecordingJobStateInformation*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateInformation(soap*, tt__RecordingJobStateInformation*) serialize to a stream
/// - tt__RecordingJobStateInformation* tt__RecordingJobStateInformation::soap_dup(soap*) returns deep copy of tt__RecordingJobStateInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobStateInformation::soap_del() deep deletes tt__RecordingJobStateInformation data members, use only after tt__RecordingJobStateInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobStateInformation::soap_type() returns SOAP_TYPE_tt__RecordingJobStateInformation or derived type identifier
class tt__RecordingJobStateInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identification of the recording that the recording job records to.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecordingToken" of type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Holds the aggregated state over the whole RecordingJobInformation structure.
/// </BLOCKQUOTE></PRE>
///
/// Element "State" of type "http://www.onvif.org/ver10/schema":RecordingJobState.
    tt__RecordingJobState                State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifies the data source of the recording job.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__RecordingJobStateSource* of length 0..unbounded.
    std::vector<tt__RecordingJobStateSource*> Sources                        0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RecordingJobStateInformationExtension.
    tt__RecordingJobStateInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateInformationExtension is a complexType.
///
/// @note class tt__RecordingJobStateInformationExtension operations:
/// - tt__RecordingJobStateInformationExtension* soap_new_tt__RecordingJobStateInformationExtension(soap*) allocate and default initialize
/// - tt__RecordingJobStateInformationExtension* soap_new_tt__RecordingJobStateInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobStateInformationExtension* soap_new_req_tt__RecordingJobStateInformationExtension(soap*, ...) allocate, set required members
/// - tt__RecordingJobStateInformationExtension* soap_new_set_tt__RecordingJobStateInformationExtension(soap*, ...) allocate, set all public members
/// - tt__RecordingJobStateInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobStateInformationExtension(soap*, tt__RecordingJobStateInformationExtension*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateInformationExtension(soap*, tt__RecordingJobStateInformationExtension*) serialize to a stream
/// - tt__RecordingJobStateInformationExtension* tt__RecordingJobStateInformationExtension::soap_dup(soap*) returns deep copy of tt__RecordingJobStateInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobStateInformationExtension::soap_del() deep deletes tt__RecordingJobStateInformationExtension data members, use only after tt__RecordingJobStateInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobStateInformationExtension::soap_type() returns SOAP_TYPE_tt__RecordingJobStateInformationExtension or derived type identifier
class tt__RecordingJobStateInformationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateSource is a complexType.
///
/// @note class tt__RecordingJobStateSource operations:
/// - tt__RecordingJobStateSource* soap_new_tt__RecordingJobStateSource(soap*) allocate and default initialize
/// - tt__RecordingJobStateSource* soap_new_tt__RecordingJobStateSource(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobStateSource* soap_new_req_tt__RecordingJobStateSource(soap*, ...) allocate, set required members
/// - tt__RecordingJobStateSource* soap_new_set_tt__RecordingJobStateSource(soap*, ...) allocate, set all public members
/// - tt__RecordingJobStateSource::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobStateSource(soap*, tt__RecordingJobStateSource*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateSource(soap*, tt__RecordingJobStateSource*) serialize to a stream
/// - tt__RecordingJobStateSource* tt__RecordingJobStateSource::soap_dup(soap*) returns deep copy of tt__RecordingJobStateSource, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobStateSource::soap_del() deep deletes tt__RecordingJobStateSource data members, use only after tt__RecordingJobStateSource::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobStateSource::soap_type() returns SOAP_TYPE_tt__RecordingJobStateSource or derived type identifier
class tt__RecordingJobStateSource : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifies the data source of the recording job.
/// </BLOCKQUOTE></PRE>
///
/// Element "SourceToken" of type "http://www.onvif.org/ver10/schema":SourceReference.
    tt__SourceReference*                 SourceToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Holds the aggregated state over all substructures of RecordingJobStateSource.
/// </BLOCKQUOTE></PRE>
///
/// Element "State" of type "http://www.onvif.org/ver10/schema":RecordingJobState.
    tt__RecordingJobState                State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of track items.
/// </BLOCKQUOTE></PRE>
///
/// Element "Tracks" of type "http://www.onvif.org/ver10/schema":RecordingJobStateTracks.
    tt__RecordingJobStateTracks*         Tracks                         1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateTracks is a complexType.
///
/// @note class tt__RecordingJobStateTracks operations:
/// - tt__RecordingJobStateTracks* soap_new_tt__RecordingJobStateTracks(soap*) allocate and default initialize
/// - tt__RecordingJobStateTracks* soap_new_tt__RecordingJobStateTracks(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobStateTracks* soap_new_req_tt__RecordingJobStateTracks(soap*, ...) allocate, set required members
/// - tt__RecordingJobStateTracks* soap_new_set_tt__RecordingJobStateTracks(soap*, ...) allocate, set all public members
/// - tt__RecordingJobStateTracks::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobStateTracks(soap*, tt__RecordingJobStateTracks*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateTracks(soap*, tt__RecordingJobStateTracks*) serialize to a stream
/// - tt__RecordingJobStateTracks* tt__RecordingJobStateTracks::soap_dup(soap*) returns deep copy of tt__RecordingJobStateTracks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobStateTracks::soap_del() deep deletes tt__RecordingJobStateTracks data members, use only after tt__RecordingJobStateTracks::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobStateTracks::soap_type() returns SOAP_TYPE_tt__RecordingJobStateTracks or derived type identifier
class tt__RecordingJobStateTracks : public xsd__anyType
{ public:
/// Vector of tt__RecordingJobStateTrack* of length 0..unbounded.
    std::vector<tt__RecordingJobStateTrack*> Track                          0;	///< Multiple elements.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateTrack is a complexType.
///
/// @note class tt__RecordingJobStateTrack operations:
/// - tt__RecordingJobStateTrack* soap_new_tt__RecordingJobStateTrack(soap*) allocate and default initialize
/// - tt__RecordingJobStateTrack* soap_new_tt__RecordingJobStateTrack(soap*, int num) allocate and default initialize an array
/// - tt__RecordingJobStateTrack* soap_new_req_tt__RecordingJobStateTrack(soap*, ...) allocate, set required members
/// - tt__RecordingJobStateTrack* soap_new_set_tt__RecordingJobStateTrack(soap*, ...) allocate, set all public members
/// - tt__RecordingJobStateTrack::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingJobStateTrack(soap*, tt__RecordingJobStateTrack*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateTrack(soap*, tt__RecordingJobStateTrack*) serialize to a stream
/// - tt__RecordingJobStateTrack* tt__RecordingJobStateTrack::soap_dup(soap*) returns deep copy of tt__RecordingJobStateTrack, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingJobStateTrack::soap_del() deep deletes tt__RecordingJobStateTrack data members, use only after tt__RecordingJobStateTrack::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingJobStateTrack::soap_type() returns SOAP_TYPE_tt__RecordingJobStateTrack or derived type identifier
class tt__RecordingJobStateTrack : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifies the track of the data source that provides the data.
/// </BLOCKQUOTE></PRE>
///
/// Element "SourceTag" of type xs:string.
    std::string                          SourceTag                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates the destination track.
/// </BLOCKQUOTE></PRE>
///
/// Element "Destination" of type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   Destination                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optionally holds an implementation defined string value that describes the error.
///   The string should be in the English language.
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Provides the job state of the track. The valid
///   values of state shall be Idle, Active and Error. If state equals Error, the Error field may be filled in with an implementation defined value.
/// </BLOCKQUOTE></PRE>
///
/// Element "State" of type "http://www.onvif.org/ver10/schema":RecordingJobState.
    tt__RecordingJobState                State                          1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":GetRecordingJobsResponseItem is a complexType.
///
/// @note class tt__GetRecordingJobsResponseItem operations:
/// - tt__GetRecordingJobsResponseItem* soap_new_tt__GetRecordingJobsResponseItem(soap*) allocate and default initialize
/// - tt__GetRecordingJobsResponseItem* soap_new_tt__GetRecordingJobsResponseItem(soap*, int num) allocate and default initialize an array
/// - tt__GetRecordingJobsResponseItem* soap_new_req_tt__GetRecordingJobsResponseItem(soap*, ...) allocate, set required members
/// - tt__GetRecordingJobsResponseItem* soap_new_set_tt__GetRecordingJobsResponseItem(soap*, ...) allocate, set all public members
/// - tt__GetRecordingJobsResponseItem::soap_default(soap*) default initialize members
/// - int soap_read_tt__GetRecordingJobsResponseItem(soap*, tt__GetRecordingJobsResponseItem*) deserialize from a stream
/// - int soap_write_tt__GetRecordingJobsResponseItem(soap*, tt__GetRecordingJobsResponseItem*) serialize to a stream
/// - tt__GetRecordingJobsResponseItem* tt__GetRecordingJobsResponseItem::soap_dup(soap*) returns deep copy of tt__GetRecordingJobsResponseItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GetRecordingJobsResponseItem::soap_del() deep deletes tt__GetRecordingJobsResponseItem data members, use only after tt__GetRecordingJobsResponseItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GetRecordingJobsResponseItem::soap_type() returns SOAP_TYPE_tt__GetRecordingJobsResponseItem or derived type identifier
class tt__GetRecordingJobsResponseItem : public xsd__anyType
{ public:
/// Element "JobToken" of type "http://www.onvif.org/ver10/schema":RecordingJobReference.
    tt__RecordingJobReference            JobToken                       1;	///< Required element.
/// Element "JobConfiguration" of type "http://www.onvif.org/ver10/schema":RecordingJobConfiguration.
    tt__RecordingJobConfiguration*       JobConfiguration               1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ReplayConfiguration is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Configuration parameters for the replay service.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ReplayConfiguration operations:
/// - tt__ReplayConfiguration* soap_new_tt__ReplayConfiguration(soap*) allocate and default initialize
/// - tt__ReplayConfiguration* soap_new_tt__ReplayConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__ReplayConfiguration* soap_new_req_tt__ReplayConfiguration(soap*, ...) allocate, set required members
/// - tt__ReplayConfiguration* soap_new_set_tt__ReplayConfiguration(soap*, ...) allocate, set all public members
/// - tt__ReplayConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReplayConfiguration(soap*, tt__ReplayConfiguration*) deserialize from a stream
/// - int soap_write_tt__ReplayConfiguration(soap*, tt__ReplayConfiguration*) serialize to a stream
/// - tt__ReplayConfiguration* tt__ReplayConfiguration::soap_dup(soap*) returns deep copy of tt__ReplayConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReplayConfiguration::soap_del() deep deletes tt__ReplayConfiguration data members, use only after tt__ReplayConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReplayConfiguration::soap_type() returns SOAP_TYPE_tt__ReplayConfiguration or derived type identifier
class tt__ReplayConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The RTSP session timeout.
/// </BLOCKQUOTE></PRE>
///
/// Element "SessionTimeout" of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfiguration is a complexType.
///
/// @note class tt__AnalyticsDeviceEngineConfiguration operations:
/// - tt__AnalyticsDeviceEngineConfiguration* soap_new_tt__AnalyticsDeviceEngineConfiguration(soap*) allocate and default initialize
/// - tt__AnalyticsDeviceEngineConfiguration* soap_new_tt__AnalyticsDeviceEngineConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsDeviceEngineConfiguration* soap_new_req_tt__AnalyticsDeviceEngineConfiguration(soap*, ...) allocate, set required members
/// - tt__AnalyticsDeviceEngineConfiguration* soap_new_set_tt__AnalyticsDeviceEngineConfiguration(soap*, ...) allocate, set all public members
/// - tt__AnalyticsDeviceEngineConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsDeviceEngineConfiguration(soap*, tt__AnalyticsDeviceEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceEngineConfiguration(soap*, tt__AnalyticsDeviceEngineConfiguration*) serialize to a stream
/// - tt__AnalyticsDeviceEngineConfiguration* tt__AnalyticsDeviceEngineConfiguration::soap_dup(soap*) returns deep copy of tt__AnalyticsDeviceEngineConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsDeviceEngineConfiguration::soap_del() deep deletes tt__AnalyticsDeviceEngineConfiguration data members, use only after tt__AnalyticsDeviceEngineConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsDeviceEngineConfiguration::soap_type() returns SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration or derived type identifier
class tt__AnalyticsDeviceEngineConfiguration : public xsd__anyType
{ public:
/// Vector of tt__EngineConfiguration* of length 1..unbounded.
    std::vector<tt__EngineConfiguration*> EngineConfiguration            1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfigurationExtension.
    tt__AnalyticsDeviceEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfigurationExtension is a complexType.
///
/// @note class tt__AnalyticsDeviceEngineConfigurationExtension operations:
/// - tt__AnalyticsDeviceEngineConfigurationExtension* soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(soap*) allocate and default initialize
/// - tt__AnalyticsDeviceEngineConfigurationExtension* soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsDeviceEngineConfigurationExtension* soap_new_req_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__AnalyticsDeviceEngineConfigurationExtension* soap_new_set_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__AnalyticsDeviceEngineConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, tt__AnalyticsDeviceEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, tt__AnalyticsDeviceEngineConfigurationExtension*) serialize to a stream
/// - tt__AnalyticsDeviceEngineConfigurationExtension* tt__AnalyticsDeviceEngineConfigurationExtension::soap_dup(soap*) returns deep copy of tt__AnalyticsDeviceEngineConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsDeviceEngineConfigurationExtension::soap_del() deep deletes tt__AnalyticsDeviceEngineConfigurationExtension data members, use only after tt__AnalyticsDeviceEngineConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsDeviceEngineConfigurationExtension::soap_type() returns SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension or derived type identifier
class tt__AnalyticsDeviceEngineConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":EngineConfiguration is a complexType.
///
/// @note class tt__EngineConfiguration operations:
/// - tt__EngineConfiguration* soap_new_tt__EngineConfiguration(soap*) allocate and default initialize
/// - tt__EngineConfiguration* soap_new_tt__EngineConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__EngineConfiguration* soap_new_req_tt__EngineConfiguration(soap*, ...) allocate, set required members
/// - tt__EngineConfiguration* soap_new_set_tt__EngineConfiguration(soap*, ...) allocate, set all public members
/// - tt__EngineConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__EngineConfiguration(soap*, tt__EngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__EngineConfiguration(soap*, tt__EngineConfiguration*) serialize to a stream
/// - tt__EngineConfiguration* tt__EngineConfiguration::soap_dup(soap*) returns deep copy of tt__EngineConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EngineConfiguration::soap_del() deep deletes tt__EngineConfiguration data members, use only after tt__EngineConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EngineConfiguration::soap_type() returns SOAP_TYPE_tt__EngineConfiguration or derived type identifier
class tt__EngineConfiguration : public xsd__anyType
{ public:
/// Element "VideoAnalyticsConfiguration" of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    tt__VideoAnalyticsConfiguration*     VideoAnalyticsConfiguration    1;	///< Required element.
/// Element "AnalyticsEngineInputInfo" of type "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfo.
    tt__AnalyticsEngineInputInfo*        AnalyticsEngineInputInfo       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfo is a complexType.
///
/// @note class tt__AnalyticsEngineInputInfo operations:
/// - tt__AnalyticsEngineInputInfo* soap_new_tt__AnalyticsEngineInputInfo(soap*) allocate and default initialize
/// - tt__AnalyticsEngineInputInfo* soap_new_tt__AnalyticsEngineInputInfo(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineInputInfo* soap_new_req_tt__AnalyticsEngineInputInfo(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineInputInfo* soap_new_set_tt__AnalyticsEngineInputInfo(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineInputInfo::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineInputInfo(soap*, tt__AnalyticsEngineInputInfo*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineInputInfo(soap*, tt__AnalyticsEngineInputInfo*) serialize to a stream
/// - tt__AnalyticsEngineInputInfo* tt__AnalyticsEngineInputInfo::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineInputInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineInputInfo::soap_del() deep deletes tt__AnalyticsEngineInputInfo data members, use only after tt__AnalyticsEngineInputInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineInputInfo::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineInputInfo or derived type identifier
class tt__AnalyticsEngineInputInfo : public xsd__anyType
{ public:
/// Element "InputInfo" of type "http://www.onvif.org/ver10/schema":Config.
    tt__Config*                          InputInfo                      0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfoExtension.
    tt__AnalyticsEngineInputInfoExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfoExtension is a complexType.
///
/// @note class tt__AnalyticsEngineInputInfoExtension operations:
/// - tt__AnalyticsEngineInputInfoExtension* soap_new_tt__AnalyticsEngineInputInfoExtension(soap*) allocate and default initialize
/// - tt__AnalyticsEngineInputInfoExtension* soap_new_tt__AnalyticsEngineInputInfoExtension(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineInputInfoExtension* soap_new_req_tt__AnalyticsEngineInputInfoExtension(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineInputInfoExtension* soap_new_set_tt__AnalyticsEngineInputInfoExtension(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineInputInfoExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineInputInfoExtension(soap*, tt__AnalyticsEngineInputInfoExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineInputInfoExtension(soap*, tt__AnalyticsEngineInputInfoExtension*) serialize to a stream
/// - tt__AnalyticsEngineInputInfoExtension* tt__AnalyticsEngineInputInfoExtension::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineInputInfoExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineInputInfoExtension::soap_del() deep deletes tt__AnalyticsEngineInputInfoExtension data members, use only after tt__AnalyticsEngineInputInfoExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineInputInfoExtension::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension or derived type identifier
class tt__AnalyticsEngineInputInfoExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":SourceIdentification is a complexType.
///
/// @note class tt__SourceIdentification operations:
/// - tt__SourceIdentification* soap_new_tt__SourceIdentification(soap*) allocate and default initialize
/// - tt__SourceIdentification* soap_new_tt__SourceIdentification(soap*, int num) allocate and default initialize an array
/// - tt__SourceIdentification* soap_new_req_tt__SourceIdentification(soap*, ...) allocate, set required members
/// - tt__SourceIdentification* soap_new_set_tt__SourceIdentification(soap*, ...) allocate, set all public members
/// - tt__SourceIdentification::soap_default(soap*) default initialize members
/// - int soap_read_tt__SourceIdentification(soap*, tt__SourceIdentification*) deserialize from a stream
/// - int soap_write_tt__SourceIdentification(soap*, tt__SourceIdentification*) serialize to a stream
/// - tt__SourceIdentification* tt__SourceIdentification::soap_dup(soap*) returns deep copy of tt__SourceIdentification, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SourceIdentification::soap_del() deep deletes tt__SourceIdentification data members, use only after tt__SourceIdentification::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SourceIdentification::soap_type() returns SOAP_TYPE_tt__SourceIdentification or derived type identifier
class tt__SourceIdentification : public xsd__anyType
{ public:
/// Element "Name" of type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > Token                          1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SourceIdentificationExtension.
    tt__SourceIdentificationExtension*   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":SourceIdentificationExtension is a complexType.
///
/// @note class tt__SourceIdentificationExtension operations:
/// - tt__SourceIdentificationExtension* soap_new_tt__SourceIdentificationExtension(soap*) allocate and default initialize
/// - tt__SourceIdentificationExtension* soap_new_tt__SourceIdentificationExtension(soap*, int num) allocate and default initialize an array
/// - tt__SourceIdentificationExtension* soap_new_req_tt__SourceIdentificationExtension(soap*, ...) allocate, set required members
/// - tt__SourceIdentificationExtension* soap_new_set_tt__SourceIdentificationExtension(soap*, ...) allocate, set all public members
/// - tt__SourceIdentificationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SourceIdentificationExtension(soap*, tt__SourceIdentificationExtension*) deserialize from a stream
/// - int soap_write_tt__SourceIdentificationExtension(soap*, tt__SourceIdentificationExtension*) serialize to a stream
/// - tt__SourceIdentificationExtension* tt__SourceIdentificationExtension::soap_dup(soap*) returns deep copy of tt__SourceIdentificationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SourceIdentificationExtension::soap_del() deep deletes tt__SourceIdentificationExtension data members, use only after tt__SourceIdentificationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SourceIdentificationExtension::soap_type() returns SOAP_TYPE_tt__SourceIdentificationExtension or derived type identifier
class tt__SourceIdentificationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataInput is a complexType.
///
/// @note class tt__MetadataInput operations:
/// - tt__MetadataInput* soap_new_tt__MetadataInput(soap*) allocate and default initialize
/// - tt__MetadataInput* soap_new_tt__MetadataInput(soap*, int num) allocate and default initialize an array
/// - tt__MetadataInput* soap_new_req_tt__MetadataInput(soap*, ...) allocate, set required members
/// - tt__MetadataInput* soap_new_set_tt__MetadataInput(soap*, ...) allocate, set all public members
/// - tt__MetadataInput::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataInput(soap*, tt__MetadataInput*) deserialize from a stream
/// - int soap_write_tt__MetadataInput(soap*, tt__MetadataInput*) serialize to a stream
/// - tt__MetadataInput* tt__MetadataInput::soap_dup(soap*) returns deep copy of tt__MetadataInput, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataInput::soap_del() deep deletes tt__MetadataInput data members, use only after tt__MetadataInput::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataInput::soap_type() returns SOAP_TYPE_tt__MetadataInput or derived type identifier
class tt__MetadataInput : public xsd__anyType
{ public:
/// Vector of tt__Config* of length 0..unbounded.
    std::vector<tt__Config*            > MetadataConfig                 0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MetadataInputExtension.
    tt__MetadataInputExtension*          Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataInputExtension is a complexType.
///
/// @note class tt__MetadataInputExtension operations:
/// - tt__MetadataInputExtension* soap_new_tt__MetadataInputExtension(soap*) allocate and default initialize
/// - tt__MetadataInputExtension* soap_new_tt__MetadataInputExtension(soap*, int num) allocate and default initialize an array
/// - tt__MetadataInputExtension* soap_new_req_tt__MetadataInputExtension(soap*, ...) allocate, set required members
/// - tt__MetadataInputExtension* soap_new_set_tt__MetadataInputExtension(soap*, ...) allocate, set all public members
/// - tt__MetadataInputExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataInputExtension(soap*, tt__MetadataInputExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataInputExtension(soap*, tt__MetadataInputExtension*) serialize to a stream
/// - tt__MetadataInputExtension* tt__MetadataInputExtension::soap_dup(soap*) returns deep copy of tt__MetadataInputExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataInputExtension::soap_del() deep deletes tt__MetadataInputExtension data members, use only after tt__MetadataInputExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataInputExtension::soap_type() returns SOAP_TYPE_tt__MetadataInputExtension or derived type identifier
class tt__MetadataInputExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsStateInformation is a complexType.
///
/// @note class tt__AnalyticsStateInformation operations:
/// - tt__AnalyticsStateInformation* soap_new_tt__AnalyticsStateInformation(soap*) allocate and default initialize
/// - tt__AnalyticsStateInformation* soap_new_tt__AnalyticsStateInformation(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsStateInformation* soap_new_req_tt__AnalyticsStateInformation(soap*, ...) allocate, set required members
/// - tt__AnalyticsStateInformation* soap_new_set_tt__AnalyticsStateInformation(soap*, ...) allocate, set all public members
/// - tt__AnalyticsStateInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsStateInformation(soap*, tt__AnalyticsStateInformation*) deserialize from a stream
/// - int soap_write_tt__AnalyticsStateInformation(soap*, tt__AnalyticsStateInformation*) serialize to a stream
/// - tt__AnalyticsStateInformation* tt__AnalyticsStateInformation::soap_dup(soap*) returns deep copy of tt__AnalyticsStateInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsStateInformation::soap_del() deep deletes tt__AnalyticsStateInformation data members, use only after tt__AnalyticsStateInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsStateInformation::soap_type() returns SOAP_TYPE_tt__AnalyticsStateInformation or derived type identifier
class tt__AnalyticsStateInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Token of the control object whose status is requested.
/// </BLOCKQUOTE></PRE>
///
/// Element "AnalyticsEngineControlToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   AnalyticsEngineControlToken    1;	///< Required element.
/// Element "State" of type "http://www.onvif.org/ver10/schema":AnalyticsState.
    tt__AnalyticsState*                  State                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsState is a complexType.
///
/// @note class tt__AnalyticsState operations:
/// - tt__AnalyticsState* soap_new_tt__AnalyticsState(soap*) allocate and default initialize
/// - tt__AnalyticsState* soap_new_tt__AnalyticsState(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsState* soap_new_req_tt__AnalyticsState(soap*, ...) allocate, set required members
/// - tt__AnalyticsState* soap_new_set_tt__AnalyticsState(soap*, ...) allocate, set all public members
/// - tt__AnalyticsState::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsState(soap*, tt__AnalyticsState*) deserialize from a stream
/// - int soap_write_tt__AnalyticsState(soap*, tt__AnalyticsState*) serialize to a stream
/// - tt__AnalyticsState* tt__AnalyticsState::soap_dup(soap*) returns deep copy of tt__AnalyticsState, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsState::soap_del() deep deletes tt__AnalyticsState data members, use only after tt__AnalyticsState::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsState::soap_type() returns SOAP_TYPE_tt__AnalyticsState or derived type identifier
class tt__AnalyticsState : public xsd__anyType
{ public:
/// Element "Error" of type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// Element "State" of type xs:string.
    std::string                          State                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ActionEngineEventPayload is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Action Engine Event Payload data structure contains the information about the ONVIF command invocations. Since this event could be generated by other or proprietary actions, the command invocation specific fields are defined as optional and additional extension mechanism is provided for future or additional action definitions.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ActionEngineEventPayload operations:
/// - tt__ActionEngineEventPayload* soap_new_tt__ActionEngineEventPayload(soap*) allocate and default initialize
/// - tt__ActionEngineEventPayload* soap_new_tt__ActionEngineEventPayload(soap*, int num) allocate and default initialize an array
/// - tt__ActionEngineEventPayload* soap_new_req_tt__ActionEngineEventPayload(soap*, ...) allocate, set required members
/// - tt__ActionEngineEventPayload* soap_new_set_tt__ActionEngineEventPayload(soap*, ...) allocate, set all public members
/// - tt__ActionEngineEventPayload::soap_default(soap*) default initialize members
/// - int soap_read_tt__ActionEngineEventPayload(soap*, tt__ActionEngineEventPayload*) deserialize from a stream
/// - int soap_write_tt__ActionEngineEventPayload(soap*, tt__ActionEngineEventPayload*) serialize to a stream
/// - tt__ActionEngineEventPayload* tt__ActionEngineEventPayload::soap_dup(soap*) returns deep copy of tt__ActionEngineEventPayload, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ActionEngineEventPayload::soap_del() deep deletes tt__ActionEngineEventPayload data members, use only after tt__ActionEngineEventPayload::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ActionEngineEventPayload::soap_type() returns SOAP_TYPE_tt__ActionEngineEventPayload or derived type identifier
class tt__ActionEngineEventPayload : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Request Message
/// </BLOCKQUOTE></PRE>
///
/// Element "RequestInfo" of type SOAP-ENV:Envelope.
    SOAP_ENV__Envelope*                  RequestInfo                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Response Message
/// </BLOCKQUOTE></PRE>
///
/// Element "ResponseInfo" of type SOAP-ENV:Envelope.
    SOAP_ENV__Envelope*                  ResponseInfo                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Fault Message
/// </BLOCKQUOTE></PRE>
///
/// Element "Fault" of type SOAP-ENV:Fault.
    struct SOAP_ENV__Fault*              Fault                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ActionEngineEventPayloadExtension.
    tt__ActionEngineEventPayloadExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ActionEngineEventPayloadExtension is a complexType.
///
/// @note class tt__ActionEngineEventPayloadExtension operations:
/// - tt__ActionEngineEventPayloadExtension* soap_new_tt__ActionEngineEventPayloadExtension(soap*) allocate and default initialize
/// - tt__ActionEngineEventPayloadExtension* soap_new_tt__ActionEngineEventPayloadExtension(soap*, int num) allocate and default initialize an array
/// - tt__ActionEngineEventPayloadExtension* soap_new_req_tt__ActionEngineEventPayloadExtension(soap*, ...) allocate, set required members
/// - tt__ActionEngineEventPayloadExtension* soap_new_set_tt__ActionEngineEventPayloadExtension(soap*, ...) allocate, set all public members
/// - tt__ActionEngineEventPayloadExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ActionEngineEventPayloadExtension(soap*, tt__ActionEngineEventPayloadExtension*) deserialize from a stream
/// - int soap_write_tt__ActionEngineEventPayloadExtension(soap*, tt__ActionEngineEventPayloadExtension*) serialize to a stream
/// - tt__ActionEngineEventPayloadExtension* tt__ActionEngineEventPayloadExtension::soap_dup(soap*) returns deep copy of tt__ActionEngineEventPayloadExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ActionEngineEventPayloadExtension::soap_del() deep deletes tt__ActionEngineEventPayloadExtension data members, use only after tt__ActionEngineEventPayloadExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ActionEngineEventPayloadExtension::soap_type() returns SOAP_TYPE_tt__ActionEngineEventPayloadExtension or derived type identifier
class tt__ActionEngineEventPayloadExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassCandidate is a complexType.
///
/// @note class tt__AudioClassCandidate operations:
/// - tt__AudioClassCandidate* soap_new_tt__AudioClassCandidate(soap*) allocate and default initialize
/// - tt__AudioClassCandidate* soap_new_tt__AudioClassCandidate(soap*, int num) allocate and default initialize an array
/// - tt__AudioClassCandidate* soap_new_req_tt__AudioClassCandidate(soap*, ...) allocate, set required members
/// - tt__AudioClassCandidate* soap_new_set_tt__AudioClassCandidate(soap*, ...) allocate, set all public members
/// - tt__AudioClassCandidate::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioClassCandidate(soap*, tt__AudioClassCandidate*) deserialize from a stream
/// - int soap_write_tt__AudioClassCandidate(soap*, tt__AudioClassCandidate*) serialize to a stream
/// - tt__AudioClassCandidate* tt__AudioClassCandidate::soap_dup(soap*) returns deep copy of tt__AudioClassCandidate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioClassCandidate::soap_del() deep deletes tt__AudioClassCandidate data members, use only after tt__AudioClassCandidate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioClassCandidate::soap_type() returns SOAP_TYPE_tt__AudioClassCandidate or derived type identifier
class tt__AudioClassCandidate : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates audio class label
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":AudioClassType.
    tt__AudioClassType                   Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A likelihood/probability that the corresponding audio event belongs to this class. The sum of the likelihoods shall NOT exceed 1
/// </BLOCKQUOTE></PRE>
///
/// Element "Likelihood" of type xs:float.
    float                                Likelihood                     1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassDescriptor is a complexType.
///
/// @note class tt__AudioClassDescriptor operations:
/// - tt__AudioClassDescriptor* soap_new_tt__AudioClassDescriptor(soap*) allocate and default initialize
/// - tt__AudioClassDescriptor* soap_new_tt__AudioClassDescriptor(soap*, int num) allocate and default initialize an array
/// - tt__AudioClassDescriptor* soap_new_req_tt__AudioClassDescriptor(soap*, ...) allocate, set required members
/// - tt__AudioClassDescriptor* soap_new_set_tt__AudioClassDescriptor(soap*, ...) allocate, set all public members
/// - tt__AudioClassDescriptor::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioClassDescriptor(soap*, tt__AudioClassDescriptor*) deserialize from a stream
/// - int soap_write_tt__AudioClassDescriptor(soap*, tt__AudioClassDescriptor*) serialize to a stream
/// - tt__AudioClassDescriptor* tt__AudioClassDescriptor::soap_dup(soap*) returns deep copy of tt__AudioClassDescriptor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioClassDescriptor::soap_del() deep deletes tt__AudioClassDescriptor data members, use only after tt__AudioClassDescriptor::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioClassDescriptor::soap_type() returns SOAP_TYPE_tt__AudioClassDescriptor or derived type identifier
class tt__AudioClassDescriptor : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Array of audio class label and class probability
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__AudioClassCandidate* of length 0..unbounded.
    std::vector<tt__AudioClassCandidate*> ClassCandidate                 0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AudioClassDescriptorExtension.
    tt__AudioClassDescriptorExtension*   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassDescriptorExtension is a complexType.
///
/// @note class tt__AudioClassDescriptorExtension operations:
/// - tt__AudioClassDescriptorExtension* soap_new_tt__AudioClassDescriptorExtension(soap*) allocate and default initialize
/// - tt__AudioClassDescriptorExtension* soap_new_tt__AudioClassDescriptorExtension(soap*, int num) allocate and default initialize an array
/// - tt__AudioClassDescriptorExtension* soap_new_req_tt__AudioClassDescriptorExtension(soap*, ...) allocate, set required members
/// - tt__AudioClassDescriptorExtension* soap_new_set_tt__AudioClassDescriptorExtension(soap*, ...) allocate, set all public members
/// - tt__AudioClassDescriptorExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioClassDescriptorExtension(soap*, tt__AudioClassDescriptorExtension*) deserialize from a stream
/// - int soap_write_tt__AudioClassDescriptorExtension(soap*, tt__AudioClassDescriptorExtension*) serialize to a stream
/// - tt__AudioClassDescriptorExtension* tt__AudioClassDescriptorExtension::soap_dup(soap*) returns deep copy of tt__AudioClassDescriptorExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioClassDescriptorExtension::soap_del() deep deletes tt__AudioClassDescriptorExtension data members, use only after tt__AudioClassDescriptorExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioClassDescriptorExtension::soap_type() returns SOAP_TYPE_tt__AudioClassDescriptorExtension or derived type identifier
class tt__AudioClassDescriptorExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ActiveConnection is a complexType.
///
/// @note class tt__ActiveConnection operations:
/// - tt__ActiveConnection* soap_new_tt__ActiveConnection(soap*) allocate and default initialize
/// - tt__ActiveConnection* soap_new_tt__ActiveConnection(soap*, int num) allocate and default initialize an array
/// - tt__ActiveConnection* soap_new_req_tt__ActiveConnection(soap*, ...) allocate, set required members
/// - tt__ActiveConnection* soap_new_set_tt__ActiveConnection(soap*, ...) allocate, set all public members
/// - tt__ActiveConnection::soap_default(soap*) default initialize members
/// - int soap_read_tt__ActiveConnection(soap*, tt__ActiveConnection*) deserialize from a stream
/// - int soap_write_tt__ActiveConnection(soap*, tt__ActiveConnection*) serialize to a stream
/// - tt__ActiveConnection* tt__ActiveConnection::soap_dup(soap*) returns deep copy of tt__ActiveConnection, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ActiveConnection::soap_del() deep deletes tt__ActiveConnection data members, use only after tt__ActiveConnection::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ActiveConnection::soap_type() returns SOAP_TYPE_tt__ActiveConnection or derived type identifier
class tt__ActiveConnection : public xsd__anyType
{ public:
/// Element "CurrentBitrate" of type xs:float.
    float                                CurrentBitrate                 1;	///< Required element.
/// Element "CurrentFps" of type xs:float.
    float                                CurrentFps                     1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileStatus is a complexType.
///
/// @note class tt__ProfileStatus operations:
/// - tt__ProfileStatus* soap_new_tt__ProfileStatus(soap*) allocate and default initialize
/// - tt__ProfileStatus* soap_new_tt__ProfileStatus(soap*, int num) allocate and default initialize an array
/// - tt__ProfileStatus* soap_new_req_tt__ProfileStatus(soap*, ...) allocate, set required members
/// - tt__ProfileStatus* soap_new_set_tt__ProfileStatus(soap*, ...) allocate, set all public members
/// - tt__ProfileStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__ProfileStatus(soap*, tt__ProfileStatus*) deserialize from a stream
/// - int soap_write_tt__ProfileStatus(soap*, tt__ProfileStatus*) serialize to a stream
/// - tt__ProfileStatus* tt__ProfileStatus::soap_dup(soap*) returns deep copy of tt__ProfileStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ProfileStatus::soap_del() deep deletes tt__ProfileStatus data members, use only after tt__ProfileStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ProfileStatus::soap_type() returns SOAP_TYPE_tt__ProfileStatus or derived type identifier
class tt__ProfileStatus : public xsd__anyType
{ public:
/// Vector of tt__ActiveConnection* of length 0..unbounded.
    std::vector<tt__ActiveConnection*  > ActiveConnections              0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ProfileStatusExtension.
    tt__ProfileStatusExtension*          Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileStatusExtension is a complexType.
///
/// @note class tt__ProfileStatusExtension operations:
/// - tt__ProfileStatusExtension* soap_new_tt__ProfileStatusExtension(soap*) allocate and default initialize
/// - tt__ProfileStatusExtension* soap_new_tt__ProfileStatusExtension(soap*, int num) allocate and default initialize an array
/// - tt__ProfileStatusExtension* soap_new_req_tt__ProfileStatusExtension(soap*, ...) allocate, set required members
/// - tt__ProfileStatusExtension* soap_new_set_tt__ProfileStatusExtension(soap*, ...) allocate, set all public members
/// - tt__ProfileStatusExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ProfileStatusExtension(soap*, tt__ProfileStatusExtension*) deserialize from a stream
/// - int soap_write_tt__ProfileStatusExtension(soap*, tt__ProfileStatusExtension*) serialize to a stream
/// - tt__ProfileStatusExtension* tt__ProfileStatusExtension::soap_dup(soap*) returns deep copy of tt__ProfileStatusExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ProfileStatusExtension::soap_del() deep deletes tt__ProfileStatusExtension data members, use only after tt__ProfileStatusExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ProfileStatusExtension::soap_type() returns SOAP_TYPE_tt__ProfileStatusExtension or derived type identifier
class tt__ProfileStatusExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDPosConfiguration is a complexType.
///
/// @note class tt__OSDPosConfiguration operations:
/// - tt__OSDPosConfiguration* soap_new_tt__OSDPosConfiguration(soap*) allocate and default initialize
/// - tt__OSDPosConfiguration* soap_new_tt__OSDPosConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__OSDPosConfiguration* soap_new_req_tt__OSDPosConfiguration(soap*, ...) allocate, set required members
/// - tt__OSDPosConfiguration* soap_new_set_tt__OSDPosConfiguration(soap*, ...) allocate, set all public members
/// - tt__OSDPosConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDPosConfiguration(soap*, tt__OSDPosConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDPosConfiguration(soap*, tt__OSDPosConfiguration*) serialize to a stream
/// - tt__OSDPosConfiguration* tt__OSDPosConfiguration::soap_dup(soap*) returns deep copy of tt__OSDPosConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDPosConfiguration::soap_del() deep deletes tt__OSDPosConfiguration data members, use only after tt__OSDPosConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDPosConfiguration::soap_type() returns SOAP_TYPE_tt__OSDPosConfiguration or derived type identifier
class tt__OSDPosConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   For OSD position type, following are the pre-defined: <ul><li>UpperLeft</li>
///   <li>UpperRight</li>
///   <li>LowerLeft</li>
///   <li>LowerRight</li>
///   <li>Custom</li></ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type xs:string.
    std::string                          Type                           1;	///< Required element.
/// Element "Pos" of type "http://www.onvif.org/ver10/schema":Vector.
    tt__Vector*                          Pos                            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDPosConfigurationExtension.
    tt__OSDPosConfigurationExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDPosConfigurationExtension is a complexType.
///
/// @note class tt__OSDPosConfigurationExtension operations:
/// - tt__OSDPosConfigurationExtension* soap_new_tt__OSDPosConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDPosConfigurationExtension* soap_new_tt__OSDPosConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDPosConfigurationExtension* soap_new_req_tt__OSDPosConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDPosConfigurationExtension* soap_new_set_tt__OSDPosConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDPosConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDPosConfigurationExtension(soap*, tt__OSDPosConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDPosConfigurationExtension(soap*, tt__OSDPosConfigurationExtension*) serialize to a stream
/// - tt__OSDPosConfigurationExtension* tt__OSDPosConfigurationExtension::soap_dup(soap*) returns deep copy of tt__OSDPosConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDPosConfigurationExtension::soap_del() deep deletes tt__OSDPosConfigurationExtension data members, use only after tt__OSDPosConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDPosConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDPosConfigurationExtension or derived type identifier
class tt__OSDPosConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColor is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The value range of "Transparent" could be defined by vendors only should follow this rule: the minimum value means non-transparent and the maximum value maens fully transparent.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__OSDColor operations:
/// - tt__OSDColor* soap_new_tt__OSDColor(soap*) allocate and default initialize
/// - tt__OSDColor* soap_new_tt__OSDColor(soap*, int num) allocate and default initialize an array
/// - tt__OSDColor* soap_new_req_tt__OSDColor(soap*, ...) allocate, set required members
/// - tt__OSDColor* soap_new_set_tt__OSDColor(soap*, ...) allocate, set all public members
/// - tt__OSDColor::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDColor(soap*, tt__OSDColor*) deserialize from a stream
/// - int soap_write_tt__OSDColor(soap*, tt__OSDColor*) serialize to a stream
/// - tt__OSDColor* tt__OSDColor::soap_dup(soap*) returns deep copy of tt__OSDColor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDColor::soap_del() deep deletes tt__OSDColor data members, use only after tt__OSDColor::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDColor::soap_type() returns SOAP_TYPE_tt__OSDColor or derived type identifier
class tt__OSDColor : public xsd__anyType
{ public:
/// Element "Color" of type "http://www.onvif.org/ver10/schema":Color.
    tt__Color*                           Color                          1;	///< Required element.
/// Attribute "Transparent" of type xs:int.
  @ int*                                 Transparent                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextConfiguration is a complexType.
///
/// @note class tt__OSDTextConfiguration operations:
/// - tt__OSDTextConfiguration* soap_new_tt__OSDTextConfiguration(soap*) allocate and default initialize
/// - tt__OSDTextConfiguration* soap_new_tt__OSDTextConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextConfiguration* soap_new_req_tt__OSDTextConfiguration(soap*, ...) allocate, set required members
/// - tt__OSDTextConfiguration* soap_new_set_tt__OSDTextConfiguration(soap*, ...) allocate, set all public members
/// - tt__OSDTextConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextConfiguration(soap*, tt__OSDTextConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDTextConfiguration(soap*, tt__OSDTextConfiguration*) serialize to a stream
/// - tt__OSDTextConfiguration* tt__OSDTextConfiguration::soap_dup(soap*) returns deep copy of tt__OSDTextConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextConfiguration::soap_del() deep deletes tt__OSDTextConfiguration data members, use only after tt__OSDTextConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextConfiguration::soap_type() returns SOAP_TYPE_tt__OSDTextConfiguration or derived type identifier
class tt__OSDTextConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The following OSD Text Type are defined:<ul>
///   <li>Plain - The Plain type means the OSD is shown as a text string which defined in the "PlainText" item.</li>
///   <li>Date - The Date type means the OSD is shown as a date, format of which should be present in the "DateFormat" item.</li>
///   <li>Time - The Time type means the OSD is shown as a time, format of which should be present in the "TimeFormat" item.</li>
///   <li>DateAndTime - The DateAndTime type means the OSD is shown as date and time, format of which should be present in the "DateFormat" and the "TimeFormat" item.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type xs:string.
    std::string                          Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported OSD date formats. This element shall be present when the value of Type field has Date or DateAndTime. The following DateFormat are defined:<ul>
///   <li>M/d/yyyy - e.g. 3/6/2013</li>
///   <li>MM/dd/yyyy - e.g. 03/06/2013</li>
///   <li>dd/MM/yyyy - e.g. 06/03/2013</li>
///   <li>yyyy/MM/dd - e.g. 2013/03/06</li>
///   <li>yyyy-MM-dd - e.g. 2013-06-03</li>
///   <li>dddd, MMMM dd, yyyy - e.g. Wednesday, March 06, 2013</li>
///   <li>MMMM dd, yyyy - e.g. March 06, 2013</li>
///   <li>dd MMMM, yyyy - e.g. 06 March, 2013</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "DateFormat" of type xs:string.
    std::string*                         DateFormat                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported OSD time formats. This element shall be present when the value of Type field has Time or DateAndTime. The following TimeFormat are defined:<ul>
///   <li>h:mm:ss tt - e.g. 2:14:21 PM</li>
///   <li>hh:mm:ss tt - e.g. 02:14:21 PM</li>
///   <li>H:mm:ss - e.g. 14:14:21</li>
///   <li>HH:mm:ss - e.g. 14:14:21</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "TimeFormat" of type xs:string.
    std::string*                         TimeFormat                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Font size of the text in pt.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontSize" of type xs:int.
    int*                                 FontSize                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Font color of the text.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontColor" of type "http://www.onvif.org/ver10/schema":OSDColor.
    tt__OSDColor*                        FontColor                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Background color of the text.
/// </BLOCKQUOTE></PRE>
///
/// Element "BackgroundColor" of type "http://www.onvif.org/ver10/schema":OSDColor.
    tt__OSDColor*                        BackgroundColor                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The content of text to be displayed.
/// </BLOCKQUOTE></PRE>
///
/// Element "PlainText" of type xs:string.
    std::string*                         PlainText                      0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDTextConfigurationExtension.
    tt__OSDTextConfigurationExtension*   Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This flag is applicable for Type Plain and defaults to true. When set to false the PlainText content will not be persistent across device reboots.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "IsPersistentText" of type xs:boolean.
  @ bool*                                IsPersistentText               0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextConfigurationExtension is a complexType.
///
/// @note class tt__OSDTextConfigurationExtension operations:
/// - tt__OSDTextConfigurationExtension* soap_new_tt__OSDTextConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDTextConfigurationExtension* soap_new_tt__OSDTextConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextConfigurationExtension* soap_new_req_tt__OSDTextConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDTextConfigurationExtension* soap_new_set_tt__OSDTextConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDTextConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextConfigurationExtension(soap*, tt__OSDTextConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDTextConfigurationExtension(soap*, tt__OSDTextConfigurationExtension*) serialize to a stream
/// - tt__OSDTextConfigurationExtension* tt__OSDTextConfigurationExtension::soap_dup(soap*) returns deep copy of tt__OSDTextConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextConfigurationExtension::soap_del() deep deletes tt__OSDTextConfigurationExtension data members, use only after tt__OSDTextConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDTextConfigurationExtension or derived type identifier
class tt__OSDTextConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgConfiguration is a complexType.
///
/// @note class tt__OSDImgConfiguration operations:
/// - tt__OSDImgConfiguration* soap_new_tt__OSDImgConfiguration(soap*) allocate and default initialize
/// - tt__OSDImgConfiguration* soap_new_tt__OSDImgConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgConfiguration* soap_new_req_tt__OSDImgConfiguration(soap*, ...) allocate, set required members
/// - tt__OSDImgConfiguration* soap_new_set_tt__OSDImgConfiguration(soap*, ...) allocate, set all public members
/// - tt__OSDImgConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgConfiguration(soap*, tt__OSDImgConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDImgConfiguration(soap*, tt__OSDImgConfiguration*) serialize to a stream
/// - tt__OSDImgConfiguration* tt__OSDImgConfiguration::soap_dup(soap*) returns deep copy of tt__OSDImgConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgConfiguration::soap_del() deep deletes tt__OSDImgConfiguration data members, use only after tt__OSDImgConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgConfiguration::soap_type() returns SOAP_TYPE_tt__OSDImgConfiguration or derived type identifier
class tt__OSDImgConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The URI of the image which to be displayed.
/// </BLOCKQUOTE></PRE>
///
/// Element "ImgPath" of type xs:anyURI.
    xsd__anyURI                          ImgPath                        1;	///< Required element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDImgConfigurationExtension.
    tt__OSDImgConfigurationExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgConfigurationExtension is a complexType.
///
/// @note class tt__OSDImgConfigurationExtension operations:
/// - tt__OSDImgConfigurationExtension* soap_new_tt__OSDImgConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDImgConfigurationExtension* soap_new_tt__OSDImgConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgConfigurationExtension* soap_new_req_tt__OSDImgConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDImgConfigurationExtension* soap_new_set_tt__OSDImgConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDImgConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgConfigurationExtension(soap*, tt__OSDImgConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDImgConfigurationExtension(soap*, tt__OSDImgConfigurationExtension*) serialize to a stream
/// - tt__OSDImgConfigurationExtension* tt__OSDImgConfigurationExtension::soap_dup(soap*) returns deep copy of tt__OSDImgConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgConfigurationExtension::soap_del() deep deletes tt__OSDImgConfigurationExtension data members, use only after tt__OSDImgConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDImgConfigurationExtension or derived type identifier
class tt__OSDImgConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ColorspaceRange is a complexType.
///
/// @note class tt__ColorspaceRange operations:
/// - tt__ColorspaceRange* soap_new_tt__ColorspaceRange(soap*) allocate and default initialize
/// - tt__ColorspaceRange* soap_new_tt__ColorspaceRange(soap*, int num) allocate and default initialize an array
/// - tt__ColorspaceRange* soap_new_req_tt__ColorspaceRange(soap*, ...) allocate, set required members
/// - tt__ColorspaceRange* soap_new_set_tt__ColorspaceRange(soap*, ...) allocate, set all public members
/// - tt__ColorspaceRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__ColorspaceRange(soap*, tt__ColorspaceRange*) deserialize from a stream
/// - int soap_write_tt__ColorspaceRange(soap*, tt__ColorspaceRange*) serialize to a stream
/// - tt__ColorspaceRange* tt__ColorspaceRange::soap_dup(soap*) returns deep copy of tt__ColorspaceRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ColorspaceRange::soap_del() deep deletes tt__ColorspaceRange data members, use only after tt__ColorspaceRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ColorspaceRange::soap_type() returns SOAP_TYPE_tt__ColorspaceRange or derived type identifier
class tt__ColorspaceRange : public xsd__anyType
{ public:
/// Element "X" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      X                              1;	///< Required element.
/// Element "Y" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Y                              1;	///< Required element.
/// Element "Z" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Z                              1;	///< Required element.
/// Element "Colorspace" of type xs:anyURI.
    xsd__anyURI                          Colorspace                     1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ColorOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describe the option of the color supported. Either list each color or define the range of color value. The following values are acceptable for Colourspace attribute.<ul><li>http://www.onvif.org/ver10/colorspace/YCbCr - YCbCr colourspace</li>
///   <li>http://www.onvif.org/ver10/colorspace/CIELUV - CIE LUV</li>
///   <li>http://www.onvif.org/ver10/colorspace/CIELAB - CIE 1976 (L*a*b*)</li>
///   <li>http://www.onvif.org/ver10/colorspace/HSV - HSV colourspace</li></ul>
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ColorOptions operations:
/// - tt__ColorOptions* soap_new_tt__ColorOptions(soap*) allocate and default initialize
/// - tt__ColorOptions* soap_new_tt__ColorOptions(soap*, int num) allocate and default initialize an array
/// - tt__ColorOptions* soap_new_req_tt__ColorOptions(soap*, ...) allocate, set required members
/// - tt__ColorOptions* soap_new_set_tt__ColorOptions(soap*, ...) allocate, set all public members
/// - tt__ColorOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ColorOptions(soap*, tt__ColorOptions*) deserialize from a stream
/// - int soap_write_tt__ColorOptions(soap*, tt__ColorOptions*) serialize to a stream
/// - tt__ColorOptions* tt__ColorOptions::soap_dup(soap*) returns deep copy of tt__ColorOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ColorOptions::soap_del() deep deletes tt__ColorOptions data members, use only after tt__ColorOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ColorOptions::soap_type() returns SOAP_TYPE_tt__ColorOptions or derived type identifier
class tt__ColorOptions : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_ColorOptions          ;	///< Union _tt__union_ColorOptions selector: set to SOAP_UNION__tt__union_ColorOptions_<fieldname>
/// Union for choice in tt__ColorOptions.
    union _tt__union_ColorOptions
    {
/// <PRE><BLOCKQUOTE>
///   List the supported color.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Color* of length 1..unbounded.
    std::vector<tt__Color*            > *ColorList                     ;	///< Choice of element (one of multiple choices).
/// <PRE><BLOCKQUOTE>
///   Define the rang of color supported.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ColorspaceRange* of length 1..unbounded.
    std::vector<tt__ColorspaceRange*  > *ColorspaceRange               ;	///< Choice of element (one of multiple choices).
    }                                    union_ColorOptions            ;
//  END OF CHOICE
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColorOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describe the option of the color and its transparency.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__OSDColorOptions operations:
/// - tt__OSDColorOptions* soap_new_tt__OSDColorOptions(soap*) allocate and default initialize
/// - tt__OSDColorOptions* soap_new_tt__OSDColorOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDColorOptions* soap_new_req_tt__OSDColorOptions(soap*, ...) allocate, set required members
/// - tt__OSDColorOptions* soap_new_set_tt__OSDColorOptions(soap*, ...) allocate, set all public members
/// - tt__OSDColorOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDColorOptions(soap*, tt__OSDColorOptions*) deserialize from a stream
/// - int soap_write_tt__OSDColorOptions(soap*, tt__OSDColorOptions*) serialize to a stream
/// - tt__OSDColorOptions* tt__OSDColorOptions::soap_dup(soap*) returns deep copy of tt__OSDColorOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDColorOptions::soap_del() deep deletes tt__OSDColorOptions data members, use only after tt__OSDColorOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDColorOptions::soap_type() returns SOAP_TYPE_tt__OSDColorOptions or derived type identifier
class tt__OSDColorOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional list of supported colors.
/// </BLOCKQUOTE></PRE>
///
/// Element "Color" of type "http://www.onvif.org/ver10/schema":ColorOptions.
    tt__ColorOptions*                    Color                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Range of the transparent level. Larger means more tranparent.
/// </BLOCKQUOTE></PRE>
///
/// Element "Transparent" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        Transparent                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDColorOptionsExtension.
    tt__OSDColorOptionsExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColorOptionsExtension is a complexType.
///
/// @note class tt__OSDColorOptionsExtension operations:
/// - tt__OSDColorOptionsExtension* soap_new_tt__OSDColorOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDColorOptionsExtension* soap_new_tt__OSDColorOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDColorOptionsExtension* soap_new_req_tt__OSDColorOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDColorOptionsExtension* soap_new_set_tt__OSDColorOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDColorOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDColorOptionsExtension(soap*, tt__OSDColorOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDColorOptionsExtension(soap*, tt__OSDColorOptionsExtension*) serialize to a stream
/// - tt__OSDColorOptionsExtension* tt__OSDColorOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDColorOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDColorOptionsExtension::soap_del() deep deletes tt__OSDColorOptionsExtension data members, use only after tt__OSDColorOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDColorOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDColorOptionsExtension or derived type identifier
class tt__OSDColorOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextOptions is a complexType.
///
/// @note class tt__OSDTextOptions operations:
/// - tt__OSDTextOptions* soap_new_tt__OSDTextOptions(soap*) allocate and default initialize
/// - tt__OSDTextOptions* soap_new_tt__OSDTextOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextOptions* soap_new_req_tt__OSDTextOptions(soap*, ...) allocate, set required members
/// - tt__OSDTextOptions* soap_new_set_tt__OSDTextOptions(soap*, ...) allocate, set all public members
/// - tt__OSDTextOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextOptions(soap*, tt__OSDTextOptions*) deserialize from a stream
/// - int soap_write_tt__OSDTextOptions(soap*, tt__OSDTextOptions*) serialize to a stream
/// - tt__OSDTextOptions* tt__OSDTextOptions::soap_dup(soap*) returns deep copy of tt__OSDTextOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextOptions::soap_del() deep deletes tt__OSDTextOptions data members, use only after tt__OSDTextOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextOptions::soap_type() returns SOAP_TYPE_tt__OSDTextOptions or derived type identifier
class tt__OSDTextOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported OSD text type. When a device indicates the supported number relating to Text type in MaximumNumberOfOSDs, the type shall be presented.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Type                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Range of the font size value.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontSizeRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FontSizeRange                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported date format.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > DateFormat                     0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported time format.
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > TimeFormat                     0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported font color.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontColor" of type "http://www.onvif.org/ver10/schema":OSDColorOptions.
    tt__OSDColorOptions*                 FontColor                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported background color.
/// </BLOCKQUOTE></PRE>
///
/// Element "BackgroundColor" of type "http://www.onvif.org/ver10/schema":OSDColorOptions.
    tt__OSDColorOptions*                 BackgroundColor                0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDTextOptionsExtension.
    tt__OSDTextOptionsExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextOptionsExtension is a complexType.
///
/// @note class tt__OSDTextOptionsExtension operations:
/// - tt__OSDTextOptionsExtension* soap_new_tt__OSDTextOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDTextOptionsExtension* soap_new_tt__OSDTextOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextOptionsExtension* soap_new_req_tt__OSDTextOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDTextOptionsExtension* soap_new_set_tt__OSDTextOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDTextOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextOptionsExtension(soap*, tt__OSDTextOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDTextOptionsExtension(soap*, tt__OSDTextOptionsExtension*) serialize to a stream
/// - tt__OSDTextOptionsExtension* tt__OSDTextOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDTextOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextOptionsExtension::soap_del() deep deletes tt__OSDTextOptionsExtension data members, use only after tt__OSDTextOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDTextOptionsExtension or derived type identifier
class tt__OSDTextOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgOptions is a complexType.
///
/// @note class tt__OSDImgOptions operations:
/// - tt__OSDImgOptions* soap_new_tt__OSDImgOptions(soap*) allocate and default initialize
/// - tt__OSDImgOptions* soap_new_tt__OSDImgOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgOptions* soap_new_req_tt__OSDImgOptions(soap*, ...) allocate, set required members
/// - tt__OSDImgOptions* soap_new_set_tt__OSDImgOptions(soap*, ...) allocate, set all public members
/// - tt__OSDImgOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgOptions(soap*, tt__OSDImgOptions*) deserialize from a stream
/// - int soap_write_tt__OSDImgOptions(soap*, tt__OSDImgOptions*) serialize to a stream
/// - tt__OSDImgOptions* tt__OSDImgOptions::soap_dup(soap*) returns deep copy of tt__OSDImgOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgOptions::soap_del() deep deletes tt__OSDImgOptions data members, use only after tt__OSDImgOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgOptions::soap_type() returns SOAP_TYPE_tt__OSDImgOptions or derived type identifier
class tt__OSDImgOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of available image URIs.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > ImagePath                      1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDImgOptionsExtension.
    tt__OSDImgOptionsExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported image MIME types, such as "image/png".
/// </BLOCKQUOTE></PRE>
///
/// Attribute "FormatsSupported" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList*                  FormatsSupported               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum size (in bytes) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxSize" of type xs:int.
  @ int*                                 MaxSize                        0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum width (in pixels) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxWidth" of type xs:int.
  @ int*                                 MaxWidth                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum height (in pixels) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxHeight" of type xs:int.
  @ int*                                 MaxHeight                      0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgOptionsExtension is a complexType.
///
/// @note class tt__OSDImgOptionsExtension operations:
/// - tt__OSDImgOptionsExtension* soap_new_tt__OSDImgOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDImgOptionsExtension* soap_new_tt__OSDImgOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgOptionsExtension* soap_new_req_tt__OSDImgOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDImgOptionsExtension* soap_new_set_tt__OSDImgOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDImgOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgOptionsExtension(soap*, tt__OSDImgOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDImgOptionsExtension(soap*, tt__OSDImgOptionsExtension*) serialize to a stream
/// - tt__OSDImgOptionsExtension* tt__OSDImgOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDImgOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgOptionsExtension::soap_del() deep deletes tt__OSDImgOptionsExtension data members, use only after tt__OSDImgOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDImgOptionsExtension or derived type identifier
class tt__OSDImgOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationExtension is a complexType.
///
/// @note class tt__OSDConfigurationExtension operations:
/// - tt__OSDConfigurationExtension* soap_new_tt__OSDConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDConfigurationExtension* soap_new_tt__OSDConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDConfigurationExtension* soap_new_req_tt__OSDConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDConfigurationExtension* soap_new_set_tt__OSDConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDConfigurationExtension(soap*, tt__OSDConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationExtension(soap*, tt__OSDConfigurationExtension*) serialize to a stream
/// - tt__OSDConfigurationExtension* tt__OSDConfigurationExtension::soap_dup(soap*) returns deep copy of tt__OSDConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDConfigurationExtension::soap_del() deep deletes tt__OSDConfigurationExtension data members, use only after tt__OSDConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDConfigurationExtension or derived type identifier
class tt__OSDConfigurationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MaximumNumberOfOSDs is a complexType.
///
/// @note class tt__MaximumNumberOfOSDs operations:
/// - tt__MaximumNumberOfOSDs* soap_new_tt__MaximumNumberOfOSDs(soap*) allocate and default initialize
/// - tt__MaximumNumberOfOSDs* soap_new_tt__MaximumNumberOfOSDs(soap*, int num) allocate and default initialize an array
/// - tt__MaximumNumberOfOSDs* soap_new_req_tt__MaximumNumberOfOSDs(soap*, ...) allocate, set required members
/// - tt__MaximumNumberOfOSDs* soap_new_set_tt__MaximumNumberOfOSDs(soap*, ...) allocate, set all public members
/// - tt__MaximumNumberOfOSDs::soap_default(soap*) default initialize members
/// - int soap_read_tt__MaximumNumberOfOSDs(soap*, tt__MaximumNumberOfOSDs*) deserialize from a stream
/// - int soap_write_tt__MaximumNumberOfOSDs(soap*, tt__MaximumNumberOfOSDs*) serialize to a stream
/// - tt__MaximumNumberOfOSDs* tt__MaximumNumberOfOSDs::soap_dup(soap*) returns deep copy of tt__MaximumNumberOfOSDs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MaximumNumberOfOSDs::soap_del() deep deletes tt__MaximumNumberOfOSDs data members, use only after tt__MaximumNumberOfOSDs::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MaximumNumberOfOSDs::soap_type() returns SOAP_TYPE_tt__MaximumNumberOfOSDs or derived type identifier
class tt__MaximumNumberOfOSDs : public xsd__anyType
{ public:
/// Attribute "Total" of type xs:int.
  @ int                                  Total                          1;	///< Required attribute.
/// Attribute "Image" of type xs:int.
  @ int*                                 Image                          0;	///< Optional attribute.
/// Attribute "PlainText" of type xs:int.
  @ int*                                 PlainText                      0;	///< Optional attribute.
/// Attribute "Date" of type xs:int.
  @ int*                                 Date                           0;	///< Optional attribute.
/// Attribute "Time" of type xs:int.
  @ int*                                 Time                           0;	///< Optional attribute.
/// Attribute "DateAndTime" of type xs:int.
  @ int*                                 DateAndTime                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationOptions is a complexType.
///
/// @note class tt__OSDConfigurationOptions operations:
/// - tt__OSDConfigurationOptions* soap_new_tt__OSDConfigurationOptions(soap*) allocate and default initialize
/// - tt__OSDConfigurationOptions* soap_new_tt__OSDConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDConfigurationOptions* soap_new_req_tt__OSDConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__OSDConfigurationOptions* soap_new_set_tt__OSDConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__OSDConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDConfigurationOptions(soap*, tt__OSDConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationOptions(soap*, tt__OSDConfigurationOptions*) serialize to a stream
/// - tt__OSDConfigurationOptions* tt__OSDConfigurationOptions::soap_dup(soap*) returns deep copy of tt__OSDConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDConfigurationOptions::soap_del() deep deletes tt__OSDConfigurationOptions data members, use only after tt__OSDConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDConfigurationOptions::soap_type() returns SOAP_TYPE_tt__OSDConfigurationOptions or derived type identifier
class tt__OSDConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The maximum number of OSD configurations supported for the specified video source configuration. If the configuration does not support OSDs, this value shall be zero and the Type and PositionOption elements are ignored. If a device limits the number of instances by OSDType, it shall indicate the supported number for each type via the related attribute.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumNumberOfOSDs" of type "http://www.onvif.org/ver10/schema":MaximumNumberOfOSDs.
    tt__MaximumNumberOfOSDs*             MaximumNumberOfOSDs            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List supported type of OSD configuration. When a device indicates the supported number for each types in MaximumNumberOfOSDs, related type shall be presented. A device shall return Option element relating to listed type.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__OSDType of length 1..unbounded.
    std::vector<tt__OSDType            > Type                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List available OSD position type. Following are the pre-defined:<ul><li>UpperLeft</li>
///   <li>UpperRight</li>
///   <li>LowerLeft</li>
///   <li>LowerRight</li>
///   <li>Custom</li></ul>
/// </BLOCKQUOTE></PRE>
///
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > PositionOption                 1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Option of the OSD text configuration. This element shall be returned if the device is signaling the support for Text.
/// </BLOCKQUOTE></PRE>
///
/// Element "TextOption" of type "http://www.onvif.org/ver10/schema":OSDTextOptions.
    tt__OSDTextOptions*                  TextOption                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option of the OSD image configuration. This element shall be returned if the device is signaling the support for Image.
/// </BLOCKQUOTE></PRE>
///
/// Element "ImageOption" of type "http://www.onvif.org/ver10/schema":OSDImgOptions.
    tt__OSDImgOptions*                   ImageOption                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDConfigurationOptionsExtension.
    tt__OSDConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationOptionsExtension is a complexType.
///
/// @note class tt__OSDConfigurationOptionsExtension operations:
/// - tt__OSDConfigurationOptionsExtension* soap_new_tt__OSDConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDConfigurationOptionsExtension* soap_new_tt__OSDConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDConfigurationOptionsExtension* soap_new_req_tt__OSDConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDConfigurationOptionsExtension* soap_new_set_tt__OSDConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDConfigurationOptionsExtension(soap*, tt__OSDConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationOptionsExtension(soap*, tt__OSDConfigurationOptionsExtension*) serialize to a stream
/// - tt__OSDConfigurationOptionsExtension* tt__OSDConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDConfigurationOptionsExtension::soap_del() deep deletes tt__OSDConfigurationOptionsExtension data members, use only after tt__OSDConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDConfigurationOptionsExtension or derived type identifier
class tt__OSDConfigurationOptionsExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":FileProgress is a complexType.
///
/// @note class tt__FileProgress operations:
/// - tt__FileProgress* soap_new_tt__FileProgress(soap*) allocate and default initialize
/// - tt__FileProgress* soap_new_tt__FileProgress(soap*, int num) allocate and default initialize an array
/// - tt__FileProgress* soap_new_req_tt__FileProgress(soap*, ...) allocate, set required members
/// - tt__FileProgress* soap_new_set_tt__FileProgress(soap*, ...) allocate, set all public members
/// - tt__FileProgress::soap_default(soap*) default initialize members
/// - int soap_read_tt__FileProgress(soap*, tt__FileProgress*) deserialize from a stream
/// - int soap_write_tt__FileProgress(soap*, tt__FileProgress*) serialize to a stream
/// - tt__FileProgress* tt__FileProgress::soap_dup(soap*) returns deep copy of tt__FileProgress, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FileProgress::soap_del() deep deletes tt__FileProgress data members, use only after tt__FileProgress::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FileProgress::soap_type() returns SOAP_TYPE_tt__FileProgress or derived type identifier
class tt__FileProgress : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exported file name
/// </BLOCKQUOTE></PRE>
///
/// Element "FileName" of type xs:string.
    std::string                          FileName                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Normalized percentage completion for uploading the exported file
/// </BLOCKQUOTE></PRE>
///
/// Element "Progress" of type xs:float.
    float                                Progress                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ArrayOfFileProgress is a complexType.
///
/// @note class tt__ArrayOfFileProgress operations:
/// - tt__ArrayOfFileProgress* soap_new_tt__ArrayOfFileProgress(soap*) allocate and default initialize
/// - tt__ArrayOfFileProgress* soap_new_tt__ArrayOfFileProgress(soap*, int num) allocate and default initialize an array
/// - tt__ArrayOfFileProgress* soap_new_req_tt__ArrayOfFileProgress(soap*, ...) allocate, set required members
/// - tt__ArrayOfFileProgress* soap_new_set_tt__ArrayOfFileProgress(soap*, ...) allocate, set all public members
/// - tt__ArrayOfFileProgress::soap_default(soap*) default initialize members
/// - int soap_read_tt__ArrayOfFileProgress(soap*, tt__ArrayOfFileProgress*) deserialize from a stream
/// - int soap_write_tt__ArrayOfFileProgress(soap*, tt__ArrayOfFileProgress*) serialize to a stream
/// - tt__ArrayOfFileProgress* tt__ArrayOfFileProgress::soap_dup(soap*) returns deep copy of tt__ArrayOfFileProgress, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ArrayOfFileProgress::soap_del() deep deletes tt__ArrayOfFileProgress data members, use only after tt__ArrayOfFileProgress::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ArrayOfFileProgress::soap_type() returns SOAP_TYPE_tt__ArrayOfFileProgress or derived type identifier
class tt__ArrayOfFileProgress : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exported file name and export progress information
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__FileProgress* of length 0..unbounded.
    std::vector<tt__FileProgress*      > FileProgress                   0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ArrayOfFileProgressExtension.
    tt__ArrayOfFileProgressExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":ArrayOfFileProgressExtension is a complexType.
///
/// @note class tt__ArrayOfFileProgressExtension operations:
/// - tt__ArrayOfFileProgressExtension* soap_new_tt__ArrayOfFileProgressExtension(soap*) allocate and default initialize
/// - tt__ArrayOfFileProgressExtension* soap_new_tt__ArrayOfFileProgressExtension(soap*, int num) allocate and default initialize an array
/// - tt__ArrayOfFileProgressExtension* soap_new_req_tt__ArrayOfFileProgressExtension(soap*, ...) allocate, set required members
/// - tt__ArrayOfFileProgressExtension* soap_new_set_tt__ArrayOfFileProgressExtension(soap*, ...) allocate, set all public members
/// - tt__ArrayOfFileProgressExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ArrayOfFileProgressExtension(soap*, tt__ArrayOfFileProgressExtension*) deserialize from a stream
/// - int soap_write_tt__ArrayOfFileProgressExtension(soap*, tt__ArrayOfFileProgressExtension*) serialize to a stream
/// - tt__ArrayOfFileProgressExtension* tt__ArrayOfFileProgressExtension::soap_dup(soap*) returns deep copy of tt__ArrayOfFileProgressExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ArrayOfFileProgressExtension::soap_del() deep deletes tt__ArrayOfFileProgressExtension data members, use only after tt__ArrayOfFileProgressExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ArrayOfFileProgressExtension::soap_type() returns SOAP_TYPE_tt__ArrayOfFileProgressExtension or derived type identifier
class tt__ArrayOfFileProgressExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":StorageReferencePath is a complexType.
///
/// @note class tt__StorageReferencePath operations:
/// - tt__StorageReferencePath* soap_new_tt__StorageReferencePath(soap*) allocate and default initialize
/// - tt__StorageReferencePath* soap_new_tt__StorageReferencePath(soap*, int num) allocate and default initialize an array
/// - tt__StorageReferencePath* soap_new_req_tt__StorageReferencePath(soap*, ...) allocate, set required members
/// - tt__StorageReferencePath* soap_new_set_tt__StorageReferencePath(soap*, ...) allocate, set all public members
/// - tt__StorageReferencePath::soap_default(soap*) default initialize members
/// - int soap_read_tt__StorageReferencePath(soap*, tt__StorageReferencePath*) deserialize from a stream
/// - int soap_write_tt__StorageReferencePath(soap*, tt__StorageReferencePath*) serialize to a stream
/// - tt__StorageReferencePath* tt__StorageReferencePath::soap_dup(soap*) returns deep copy of tt__StorageReferencePath, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__StorageReferencePath::soap_del() deep deletes tt__StorageReferencePath data members, use only after tt__StorageReferencePath::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__StorageReferencePath::soap_type() returns SOAP_TYPE_tt__StorageReferencePath or derived type identifier
class tt__StorageReferencePath : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   identifier of an existing Storage Configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "StorageToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   StorageToken                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   gives the relative directory path on the storage
/// </BLOCKQUOTE></PRE>
///
/// Element "RelativePath" of type xs:string.
    std::string*                         RelativePath                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":StorageReferencePathExtension.
    tt__StorageReferencePathExtension*   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":StorageReferencePathExtension is a complexType.
///
/// @note class tt__StorageReferencePathExtension operations:
/// - tt__StorageReferencePathExtension* soap_new_tt__StorageReferencePathExtension(soap*) allocate and default initialize
/// - tt__StorageReferencePathExtension* soap_new_tt__StorageReferencePathExtension(soap*, int num) allocate and default initialize an array
/// - tt__StorageReferencePathExtension* soap_new_req_tt__StorageReferencePathExtension(soap*, ...) allocate, set required members
/// - tt__StorageReferencePathExtension* soap_new_set_tt__StorageReferencePathExtension(soap*, ...) allocate, set all public members
/// - tt__StorageReferencePathExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__StorageReferencePathExtension(soap*, tt__StorageReferencePathExtension*) deserialize from a stream
/// - int soap_write_tt__StorageReferencePathExtension(soap*, tt__StorageReferencePathExtension*) serialize to a stream
/// - tt__StorageReferencePathExtension* tt__StorageReferencePathExtension::soap_dup(soap*) returns deep copy of tt__StorageReferencePathExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__StorageReferencePathExtension::soap_del() deep deletes tt__StorageReferencePathExtension data members, use only after tt__StorageReferencePathExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__StorageReferencePathExtension::soap_type() returns SOAP_TYPE_tt__StorageReferencePathExtension or derived type identifier
class tt__StorageReferencePathExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Vector2D is a complexType.
///
/// @note class tt__Vector2D operations:
/// - tt__Vector2D* soap_new_tt__Vector2D(soap*) allocate and default initialize
/// - tt__Vector2D* soap_new_tt__Vector2D(soap*, int num) allocate and default initialize an array
/// - tt__Vector2D* soap_new_req_tt__Vector2D(soap*, ...) allocate, set required members
/// - tt__Vector2D* soap_new_set_tt__Vector2D(soap*, ...) allocate, set all public members
/// - tt__Vector2D::soap_default(soap*) default initialize members
/// - int soap_read_tt__Vector2D(soap*, tt__Vector2D*) deserialize from a stream
/// - int soap_write_tt__Vector2D(soap*, tt__Vector2D*) serialize to a stream
/// - tt__Vector2D* tt__Vector2D::soap_dup(soap*) returns deep copy of tt__Vector2D, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Vector2D::soap_del() deep deletes tt__Vector2D data members, use only after tt__Vector2D::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Vector2D::soap_type() returns SOAP_TYPE_tt__Vector2D or derived type identifier
class tt__Vector2D : public xsd__anyType
{ public:
/// Attribute "x" of type xs:float.
  @ float                                x                              1;	///< Required attribute.
/// Attribute "y" of type xs:float.
  @ float                                y                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Pan/tilt coordinate space selector. The following options are defined:<ul>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Attribute "space" of type xs:anyURI.
  @ xsd__anyURI*                         space                          0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":Vector1D is a complexType.
///
/// @note class tt__Vector1D operations:
/// - tt__Vector1D* soap_new_tt__Vector1D(soap*) allocate and default initialize
/// - tt__Vector1D* soap_new_tt__Vector1D(soap*, int num) allocate and default initialize an array
/// - tt__Vector1D* soap_new_req_tt__Vector1D(soap*, ...) allocate, set required members
/// - tt__Vector1D* soap_new_set_tt__Vector1D(soap*, ...) allocate, set all public members
/// - tt__Vector1D::soap_default(soap*) default initialize members
/// - int soap_read_tt__Vector1D(soap*, tt__Vector1D*) deserialize from a stream
/// - int soap_write_tt__Vector1D(soap*, tt__Vector1D*) serialize to a stream
/// - tt__Vector1D* tt__Vector1D::soap_dup(soap*) returns deep copy of tt__Vector1D, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Vector1D::soap_del() deep deletes tt__Vector1D data members, use only after tt__Vector1D::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Vector1D::soap_type() returns SOAP_TYPE_tt__Vector1D or derived type identifier
class tt__Vector1D : public xsd__anyType
{ public:
/// Attribute "x" of type xs:float.
  @ float                                x                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Zoom coordinate space selector. The following options are defined:<ul style="">
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/PositionGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/TranslationGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/VelocityGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/ZoomGenericSpeedSpace</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Attribute "space" of type xs:anyURI.
  @ xsd__anyURI*                         space                          0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZVector is a complexType.
///
/// @note class tt__PTZVector operations:
/// - tt__PTZVector* soap_new_tt__PTZVector(soap*) allocate and default initialize
/// - tt__PTZVector* soap_new_tt__PTZVector(soap*, int num) allocate and default initialize an array
/// - tt__PTZVector* soap_new_req_tt__PTZVector(soap*, ...) allocate, set required members
/// - tt__PTZVector* soap_new_set_tt__PTZVector(soap*, ...) allocate, set all public members
/// - tt__PTZVector::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZVector(soap*, tt__PTZVector*) deserialize from a stream
/// - int soap_write_tt__PTZVector(soap*, tt__PTZVector*) serialize to a stream
/// - tt__PTZVector* tt__PTZVector::soap_dup(soap*) returns deep copy of tt__PTZVector, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZVector::soap_del() deep deletes tt__PTZVector data members, use only after tt__PTZVector::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZVector::soap_type() returns SOAP_TYPE_tt__PTZVector or derived type identifier
class tt__PTZVector : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Pan and tilt position. The x component corresponds to pan and the y component to tilt.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTilt" of type "http://www.onvif.org/ver10/schema":Vector2D.
    tt__Vector2D*                        PanTilt                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A zoom position.
/// </BLOCKQUOTE></PRE>
///
/// Element "Zoom" of type "http://www.onvif.org/ver10/schema":Vector1D.
    tt__Vector1D*                        Zoom                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatus is a complexType.
///
/// @note class tt__PTZStatus operations:
/// - tt__PTZStatus* soap_new_tt__PTZStatus(soap*) allocate and default initialize
/// - tt__PTZStatus* soap_new_tt__PTZStatus(soap*, int num) allocate and default initialize an array
/// - tt__PTZStatus* soap_new_req_tt__PTZStatus(soap*, ...) allocate, set required members
/// - tt__PTZStatus* soap_new_set_tt__PTZStatus(soap*, ...) allocate, set all public members
/// - tt__PTZStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZStatus(soap*, tt__PTZStatus*) deserialize from a stream
/// - int soap_write_tt__PTZStatus(soap*, tt__PTZStatus*) serialize to a stream
/// - tt__PTZStatus* tt__PTZStatus::soap_dup(soap*) returns deep copy of tt__PTZStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZStatus::soap_del() deep deletes tt__PTZStatus data members, use only after tt__PTZStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZStatus::soap_type() returns SOAP_TYPE_tt__PTZStatus or derived type identifier
class tt__PTZStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       Position                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
/// </BLOCKQUOTE></PRE>
///
/// Element "MoveStatus" of type "http://www.onvif.org/ver10/schema":PTZMoveStatus.
    tt__PTZMoveStatus*                   MoveStatus                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   States a current PTZ error.
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specifies the UTC time when this status was generated.
/// </BLOCKQUOTE></PRE>
///
/// Element "UtcTime" of type xs:dateTime.
    xsd__dateTime                        UtcTime                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZMoveStatus is a complexType.
///
/// @note class tt__PTZMoveStatus operations:
/// - tt__PTZMoveStatus* soap_new_tt__PTZMoveStatus(soap*) allocate and default initialize
/// - tt__PTZMoveStatus* soap_new_tt__PTZMoveStatus(soap*, int num) allocate and default initialize an array
/// - tt__PTZMoveStatus* soap_new_req_tt__PTZMoveStatus(soap*, ...) allocate, set required members
/// - tt__PTZMoveStatus* soap_new_set_tt__PTZMoveStatus(soap*, ...) allocate, set all public members
/// - tt__PTZMoveStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZMoveStatus(soap*, tt__PTZMoveStatus*) deserialize from a stream
/// - int soap_write_tt__PTZMoveStatus(soap*, tt__PTZMoveStatus*) serialize to a stream
/// - tt__PTZMoveStatus* tt__PTZMoveStatus::soap_dup(soap*) returns deep copy of tt__PTZMoveStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZMoveStatus::soap_del() deep deletes tt__PTZMoveStatus data members, use only after tt__PTZMoveStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZMoveStatus::soap_type() returns SOAP_TYPE_tt__PTZMoveStatus or derived type identifier
class tt__PTZMoveStatus : public xsd__anyType
{ public:

/// </BLOCKQUOTE></PRE>
///
/// Element "PanTilt" of type "http://www.onvif.org/ver10/schema":MoveStatus.
    tt__MoveStatus*                      PanTilt                        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
///
/// Element "Zoom" of type "http://www.onvif.org/ver10/schema":MoveStatus.
    tt__MoveStatus*                      Zoom                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":Vector is a complexType.
///
/// @note class tt__Vector operations:
/// - tt__Vector* soap_new_tt__Vector(soap*) allocate and default initialize
/// - tt__Vector* soap_new_tt__Vector(soap*, int num) allocate and default initialize an array
/// - tt__Vector* soap_new_req_tt__Vector(soap*, ...) allocate, set required members
/// - tt__Vector* soap_new_set_tt__Vector(soap*, ...) allocate, set all public members
/// - tt__Vector::soap_default(soap*) default initialize members
/// - int soap_read_tt__Vector(soap*, tt__Vector*) deserialize from a stream
/// - int soap_write_tt__Vector(soap*, tt__Vector*) serialize to a stream
/// - tt__Vector* tt__Vector::soap_dup(soap*) returns deep copy of tt__Vector, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Vector::soap_del() deep deletes tt__Vector data members, use only after tt__Vector::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Vector::soap_type() returns SOAP_TYPE_tt__Vector or derived type identifier
class tt__Vector : public xsd__anyType
{ public:
/// Attribute "x" of type xs:float.
  @ float*                               x                              0;	///< Optional attribute.
/// Attribute "y" of type xs:float.
  @ float*                               y                              0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":Rectangle is a complexType.
///
/// @note class tt__Rectangle operations:
/// - tt__Rectangle* soap_new_tt__Rectangle(soap*) allocate and default initialize
/// - tt__Rectangle* soap_new_tt__Rectangle(soap*, int num) allocate and default initialize an array
/// - tt__Rectangle* soap_new_req_tt__Rectangle(soap*, ...) allocate, set required members
/// - tt__Rectangle* soap_new_set_tt__Rectangle(soap*, ...) allocate, set all public members
/// - tt__Rectangle::soap_default(soap*) default initialize members
/// - int soap_read_tt__Rectangle(soap*, tt__Rectangle*) deserialize from a stream
/// - int soap_write_tt__Rectangle(soap*, tt__Rectangle*) serialize to a stream
/// - tt__Rectangle* tt__Rectangle::soap_dup(soap*) returns deep copy of tt__Rectangle, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Rectangle::soap_del() deep deletes tt__Rectangle data members, use only after tt__Rectangle::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Rectangle::soap_type() returns SOAP_TYPE_tt__Rectangle or derived type identifier
class tt__Rectangle : public xsd__anyType
{ public:
/// Attribute "bottom" of type xs:float.
  @ float*                               bottom                         0;	///< Optional attribute.
/// Attribute "top" of type xs:float.
  @ float*                               top                            0;	///< Optional attribute.
/// Attribute "right" of type xs:float.
  @ float*                               right                          0;	///< Optional attribute.
/// Attribute "left" of type xs:float.
  @ float*                               left                           0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":Polygon is a complexType.
///
/// @note class tt__Polygon operations:
/// - tt__Polygon* soap_new_tt__Polygon(soap*) allocate and default initialize
/// - tt__Polygon* soap_new_tt__Polygon(soap*, int num) allocate and default initialize an array
/// - tt__Polygon* soap_new_req_tt__Polygon(soap*, ...) allocate, set required members
/// - tt__Polygon* soap_new_set_tt__Polygon(soap*, ...) allocate, set all public members
/// - tt__Polygon::soap_default(soap*) default initialize members
/// - int soap_read_tt__Polygon(soap*, tt__Polygon*) deserialize from a stream
/// - int soap_write_tt__Polygon(soap*, tt__Polygon*) serialize to a stream
/// - tt__Polygon* tt__Polygon::soap_dup(soap*) returns deep copy of tt__Polygon, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Polygon::soap_del() deep deletes tt__Polygon data members, use only after tt__Polygon::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Polygon::soap_type() returns SOAP_TYPE_tt__Polygon or derived type identifier
class tt__Polygon : public xsd__anyType
{ public:
/// Vector of tt__Vector* of length 3..unbounded.
    std::vector<tt__Vector*            > Point                          3;	///< Multiple elements.
};

/// @brief "http://www.onvif.org/ver10/schema":Color is a complexType.
///
/// @note class tt__Color operations:
/// - tt__Color* soap_new_tt__Color(soap*) allocate and default initialize
/// - tt__Color* soap_new_tt__Color(soap*, int num) allocate and default initialize an array
/// - tt__Color* soap_new_req_tt__Color(soap*, ...) allocate, set required members
/// - tt__Color* soap_new_set_tt__Color(soap*, ...) allocate, set all public members
/// - tt__Color::soap_default(soap*) default initialize members
/// - int soap_read_tt__Color(soap*, tt__Color*) deserialize from a stream
/// - int soap_write_tt__Color(soap*, tt__Color*) serialize to a stream
/// - tt__Color* tt__Color::soap_dup(soap*) returns deep copy of tt__Color, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Color::soap_del() deep deletes tt__Color data members, use only after tt__Color::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Color::soap_type() returns SOAP_TYPE_tt__Color or derived type identifier
class tt__Color : public xsd__anyType
{ public:
/// Attribute "X" of type xs:float.
  @ float                                X                              1;	///< Required attribute.
/// Attribute "Y" of type xs:float.
  @ float                                Y                              1;	///< Required attribute.
/// Attribute "Z" of type xs:float.
  @ float                                Z                              1;	///< Required attribute.
/// Attribute "Colorspace" of type xs:anyURI.
  @ xsd__anyURI*                         Colorspace                     0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":ColorCovariance is a complexType.
///
/// @note class tt__ColorCovariance operations:
/// - tt__ColorCovariance* soap_new_tt__ColorCovariance(soap*) allocate and default initialize
/// - tt__ColorCovariance* soap_new_tt__ColorCovariance(soap*, int num) allocate and default initialize an array
/// - tt__ColorCovariance* soap_new_req_tt__ColorCovariance(soap*, ...) allocate, set required members
/// - tt__ColorCovariance* soap_new_set_tt__ColorCovariance(soap*, ...) allocate, set all public members
/// - tt__ColorCovariance::soap_default(soap*) default initialize members
/// - int soap_read_tt__ColorCovariance(soap*, tt__ColorCovariance*) deserialize from a stream
/// - int soap_write_tt__ColorCovariance(soap*, tt__ColorCovariance*) serialize to a stream
/// - tt__ColorCovariance* tt__ColorCovariance::soap_dup(soap*) returns deep copy of tt__ColorCovariance, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ColorCovariance::soap_del() deep deletes tt__ColorCovariance data members, use only after tt__ColorCovariance::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ColorCovariance::soap_type() returns SOAP_TYPE_tt__ColorCovariance or derived type identifier
class tt__ColorCovariance : public xsd__anyType
{ public:
/// Attribute "XX" of type xs:float.
  @ float                                XX                             1;	///< Required attribute.
/// Attribute "YY" of type xs:float.
  @ float                                YY                             1;	///< Required attribute.
/// Attribute "ZZ" of type xs:float.
  @ float                                ZZ                             1;	///< Required attribute.
/// Attribute "XY" of type xs:float.
  @ float*                               XY                             0;	///< Optional attribute.
/// Attribute "XZ" of type xs:float.
  @ float*                               XZ                             0;	///< Optional attribute.
/// Attribute "YZ" of type xs:float.
  @ float*                               YZ                             0;	///< Optional attribute.
/// Attribute "Colorspace" of type xs:anyURI.
  @ xsd__anyURI*                         Colorspace                     0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":Transformation is a complexType.
///
/// @note class tt__Transformation operations:
/// - tt__Transformation* soap_new_tt__Transformation(soap*) allocate and default initialize
/// - tt__Transformation* soap_new_tt__Transformation(soap*, int num) allocate and default initialize an array
/// - tt__Transformation* soap_new_req_tt__Transformation(soap*, ...) allocate, set required members
/// - tt__Transformation* soap_new_set_tt__Transformation(soap*, ...) allocate, set all public members
/// - tt__Transformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__Transformation(soap*, tt__Transformation*) deserialize from a stream
/// - int soap_write_tt__Transformation(soap*, tt__Transformation*) serialize to a stream
/// - tt__Transformation* tt__Transformation::soap_dup(soap*) returns deep copy of tt__Transformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Transformation::soap_del() deep deletes tt__Transformation data members, use only after tt__Transformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Transformation::soap_type() returns SOAP_TYPE_tt__Transformation or derived type identifier
class tt__Transformation : public xsd__anyType
{ public:
/// Element "Translate" of type "http://www.onvif.org/ver10/schema":Vector.
    tt__Vector*                          Translate                      0;	///< Optional element.
/// Element "Scale" of type "http://www.onvif.org/ver10/schema":Vector.
    tt__Vector*                          Scale                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":TransformationExtension.
    tt__TransformationExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":TransformationExtension is a complexType.
///
/// @note class tt__TransformationExtension operations:
/// - tt__TransformationExtension* soap_new_tt__TransformationExtension(soap*) allocate and default initialize
/// - tt__TransformationExtension* soap_new_tt__TransformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__TransformationExtension* soap_new_req_tt__TransformationExtension(soap*, ...) allocate, set required members
/// - tt__TransformationExtension* soap_new_set_tt__TransformationExtension(soap*, ...) allocate, set all public members
/// - tt__TransformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__TransformationExtension(soap*, tt__TransformationExtension*) deserialize from a stream
/// - int soap_write_tt__TransformationExtension(soap*, tt__TransformationExtension*) serialize to a stream
/// - tt__TransformationExtension* tt__TransformationExtension::soap_dup(soap*) returns deep copy of tt__TransformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TransformationExtension::soap_del() deep deletes tt__TransformationExtension data members, use only after tt__TransformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TransformationExtension::soap_type() returns SOAP_TYPE_tt__TransformationExtension or derived type identifier
class tt__TransformationExtension : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://www.onvif.org/ver10/schema":GeoLocation is a complexType.
///
/// @note class tt__GeoLocation operations:
/// - tt__GeoLocation* soap_new_tt__GeoLocation(soap*) allocate and default initialize
/// - tt__GeoLocation* soap_new_tt__GeoLocation(soap*, int num) allocate and default initialize an array
/// - tt__GeoLocation* soap_new_req_tt__GeoLocation(soap*, ...) allocate, set required members
/// - tt__GeoLocation* soap_new_set_tt__GeoLocation(soap*, ...) allocate, set all public members
/// - tt__GeoLocation::soap_default(soap*) default initialize members
/// - int soap_read_tt__GeoLocation(soap*, tt__GeoLocation*) deserialize from a stream
/// - int soap_write_tt__GeoLocation(soap*, tt__GeoLocation*) serialize to a stream
/// - tt__GeoLocation* tt__GeoLocation::soap_dup(soap*) returns deep copy of tt__GeoLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GeoLocation::soap_del() deep deletes tt__GeoLocation data members, use only after tt__GeoLocation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GeoLocation::soap_type() returns SOAP_TYPE_tt__GeoLocation or derived type identifier
class tt__GeoLocation : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   East west location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "lon" of type xs:double.
  @ double*                              lon                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   North south location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "lat" of type xs:double.
  @ double*                              lat                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Hight in meters above sea level.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "elevation" of type xs:float.
  @ float*                               elevation                      0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":GeoOrientation is a complexType.
///
/// @note class tt__GeoOrientation operations:
/// - tt__GeoOrientation* soap_new_tt__GeoOrientation(soap*) allocate and default initialize
/// - tt__GeoOrientation* soap_new_tt__GeoOrientation(soap*, int num) allocate and default initialize an array
/// - tt__GeoOrientation* soap_new_req_tt__GeoOrientation(soap*, ...) allocate, set required members
/// - tt__GeoOrientation* soap_new_set_tt__GeoOrientation(soap*, ...) allocate, set all public members
/// - tt__GeoOrientation::soap_default(soap*) default initialize members
/// - int soap_read_tt__GeoOrientation(soap*, tt__GeoOrientation*) deserialize from a stream
/// - int soap_write_tt__GeoOrientation(soap*, tt__GeoOrientation*) serialize to a stream
/// - tt__GeoOrientation* tt__GeoOrientation::soap_dup(soap*) returns deep copy of tt__GeoOrientation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GeoOrientation::soap_del() deep deletes tt__GeoOrientation data members, use only after tt__GeoOrientation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GeoOrientation::soap_type() returns SOAP_TYPE_tt__GeoOrientation or derived type identifier
class tt__GeoOrientation : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Rotation around the x axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "roll" of type xs:float.
  @ float*                               roll                           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the y axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "pitch" of type xs:float.
  @ float*                               pitch                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the z axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "yaw" of type xs:float.
  @ float*                               yaw                            0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LocalLocation is a complexType.
///
/// @note class tt__LocalLocation operations:
/// - tt__LocalLocation* soap_new_tt__LocalLocation(soap*) allocate and default initialize
/// - tt__LocalLocation* soap_new_tt__LocalLocation(soap*, int num) allocate and default initialize an array
/// - tt__LocalLocation* soap_new_req_tt__LocalLocation(soap*, ...) allocate, set required members
/// - tt__LocalLocation* soap_new_set_tt__LocalLocation(soap*, ...) allocate, set all public members
/// - tt__LocalLocation::soap_default(soap*) default initialize members
/// - int soap_read_tt__LocalLocation(soap*, tt__LocalLocation*) deserialize from a stream
/// - int soap_write_tt__LocalLocation(soap*, tt__LocalLocation*) serialize to a stream
/// - tt__LocalLocation* tt__LocalLocation::soap_dup(soap*) returns deep copy of tt__LocalLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LocalLocation::soap_del() deep deletes tt__LocalLocation data members, use only after tt__LocalLocation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LocalLocation::soap_type() returns SOAP_TYPE_tt__LocalLocation or derived type identifier
class tt__LocalLocation : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   East west location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "x" of type xs:float.
  @ float*                               x                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   North south location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "y" of type xs:float.
  @ float*                               y                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Offset in meters from the sea level.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "z" of type xs:float.
  @ float*                               z                              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LocalOrientation is a complexType.
///
/// @note class tt__LocalOrientation operations:
/// - tt__LocalOrientation* soap_new_tt__LocalOrientation(soap*) allocate and default initialize
/// - tt__LocalOrientation* soap_new_tt__LocalOrientation(soap*, int num) allocate and default initialize an array
/// - tt__LocalOrientation* soap_new_req_tt__LocalOrientation(soap*, ...) allocate, set required members
/// - tt__LocalOrientation* soap_new_set_tt__LocalOrientation(soap*, ...) allocate, set all public members
/// - tt__LocalOrientation::soap_default(soap*) default initialize members
/// - int soap_read_tt__LocalOrientation(soap*, tt__LocalOrientation*) deserialize from a stream
/// - int soap_write_tt__LocalOrientation(soap*, tt__LocalOrientation*) serialize to a stream
/// - tt__LocalOrientation* tt__LocalOrientation::soap_dup(soap*) returns deep copy of tt__LocalOrientation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LocalOrientation::soap_del() deep deletes tt__LocalOrientation data members, use only after tt__LocalOrientation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LocalOrientation::soap_type() returns SOAP_TYPE_tt__LocalOrientation or derived type identifier
class tt__LocalOrientation : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Rotation around the y axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "pan" of type xs:float.
  @ float*                               pan                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the z axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "tilt" of type xs:float.
  @ float*                               tilt                           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the x axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "roll" of type xs:float.
  @ float*                               roll                           0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":LocationEntity is a complexType.
///
/// @note class tt__LocationEntity operations:
/// - tt__LocationEntity* soap_new_tt__LocationEntity(soap*) allocate and default initialize
/// - tt__LocationEntity* soap_new_tt__LocationEntity(soap*, int num) allocate and default initialize an array
/// - tt__LocationEntity* soap_new_req_tt__LocationEntity(soap*, ...) allocate, set required members
/// - tt__LocationEntity* soap_new_set_tt__LocationEntity(soap*, ...) allocate, set all public members
/// - tt__LocationEntity::soap_default(soap*) default initialize members
/// - int soap_read_tt__LocationEntity(soap*, tt__LocationEntity*) deserialize from a stream
/// - int soap_write_tt__LocationEntity(soap*, tt__LocationEntity*) serialize to a stream
/// - tt__LocationEntity* tt__LocationEntity::soap_dup(soap*) returns deep copy of tt__LocationEntity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LocationEntity::soap_del() deep deletes tt__LocationEntity data members, use only after tt__LocationEntity::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LocationEntity::soap_type() returns SOAP_TYPE_tt__LocationEntity or derived type identifier
class tt__LocationEntity : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Location on earth.
/// </BLOCKQUOTE></PRE>
///
/// Element "GeoLocation" of type "http://www.onvif.org/ver10/schema":GeoLocation.
    tt__GeoLocation*                     GeoLocation                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Orientation relative to earth.
/// </BLOCKQUOTE></PRE>
///
/// Element "GeoOrientation" of type "http://www.onvif.org/ver10/schema":GeoOrientation.
    tt__GeoOrientation*                  GeoOrientation                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indoor location offset.
/// </BLOCKQUOTE></PRE>
///
/// Element "LocalLocation" of type "http://www.onvif.org/ver10/schema":LocalLocation.
    tt__LocalLocation*                   LocalLocation                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indoor orientation offset.
/// </BLOCKQUOTE></PRE>
///
/// Element "LocalOrientation" of type "http://www.onvif.org/ver10/schema":LocalOrientation.
    tt__LocalOrientation*                LocalOrientation               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Entity type the entry refers to, use a value from the tt:Entity enumeration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Entity" of type xs:string.
  @ std::string*                         Entity                         0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional entity token.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken*                  Token                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If this value is true the entity cannot be deleted.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Fixed" of type xs:boolean.
  @ bool*                                Fixed                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional reference to the XAddr of another devices DeviceManagement service.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GeoSource" of type xs:anyURI.
  @ xsd__anyURI*                         GeoSource                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If set the geo location is obtained internally.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "AutoGeo" of type xs:boolean.
  @ bool*                                AutoGeo                        0;	///< Optional attribute.
};

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":Message
/// @brief "http://www.onvif.org/ver10/schema":Message is a complexType.
///
/// @note class _tt__Message operations:
/// - _tt__Message* soap_new__tt__Message(soap*) allocate and default initialize
/// - _tt__Message* soap_new__tt__Message(soap*, int num) allocate and default initialize an array
/// - _tt__Message* soap_new_req__tt__Message(soap*, ...) allocate, set required members
/// - _tt__Message* soap_new_set__tt__Message(soap*, ...) allocate, set all public members
/// - _tt__Message::soap_default(soap*) default initialize members
/// - int soap_read__tt__Message(soap*, _tt__Message*) deserialize from a stream
/// - int soap_write__tt__Message(soap*, _tt__Message*) serialize to a stream
/// - _tt__Message* _tt__Message::soap_dup(soap*) returns deep copy of _tt__Message, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__Message::soap_del() deep deletes _tt__Message data members, use only after _tt__Message::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__Message::soap_type() returns SOAP_TYPE__tt__Message or derived type identifier
class _tt__Message
{ public:
/// <PRE><BLOCKQUOTE>
///   Token value pairs that triggered this message. Typically only one item is present.
/// </BLOCKQUOTE></PRE>
///
/// Element "Source" of type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Source                         0;	///< Optional element.
/// Element "Key" of type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Key                            0;	///< Optional element.
/// Element "Data" of type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Data                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MessageExtension.
    tt__MessageExtension*                Extension                      0;	///< Optional element.
/// Attribute "UtcTime" of type xs:dateTime.
  @ xsd__dateTime                        UtcTime                        1;	///< Required attribute.
/// Attribute "PropertyOperation" of type "http://www.onvif.org/ver10/schema":PropertyOperation.
  @ tt__PropertyOperation*               PropertyOperation              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType is a complexType.
///
/// @note class wsnt__QueryExpressionType operations:
/// - wsnt__QueryExpressionType* soap_new_wsnt__QueryExpressionType(soap*) allocate and default initialize
/// - wsnt__QueryExpressionType* soap_new_wsnt__QueryExpressionType(soap*, int num) allocate and default initialize an array
/// - wsnt__QueryExpressionType* soap_new_req_wsnt__QueryExpressionType(soap*, ...) allocate, set required members
/// - wsnt__QueryExpressionType* soap_new_set_wsnt__QueryExpressionType(soap*, ...) allocate, set all public members
/// - wsnt__QueryExpressionType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__QueryExpressionType(soap*, wsnt__QueryExpressionType*) deserialize from a stream
/// - int soap_write_wsnt__QueryExpressionType(soap*, wsnt__QueryExpressionType*) serialize to a stream
/// - wsnt__QueryExpressionType* wsnt__QueryExpressionType::soap_dup(soap*) returns deep copy of wsnt__QueryExpressionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__QueryExpressionType::soap_del() deep deletes wsnt__QueryExpressionType data members, use only after wsnt__QueryExpressionType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__QueryExpressionType::soap_type() returns SOAP_TYPE_wsnt__QueryExpressionType or derived type identifier
class wsnt__QueryExpressionType : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "Dialect" of type xs:anyURI.
  @ xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":FilterType is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":EventFilter as tt__EventFilter
///
/// @note class wsnt__FilterType operations:
/// - wsnt__FilterType* soap_new_wsnt__FilterType(soap*) allocate and default initialize
/// - wsnt__FilterType* soap_new_wsnt__FilterType(soap*, int num) allocate and default initialize an array
/// - wsnt__FilterType* soap_new_req_wsnt__FilterType(soap*, ...) allocate, set required members
/// - wsnt__FilterType* soap_new_set_wsnt__FilterType(soap*, ...) allocate, set all public members
/// - wsnt__FilterType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__FilterType(soap*, wsnt__FilterType*) deserialize from a stream
/// - int soap_write_wsnt__FilterType(soap*, wsnt__FilterType*) serialize to a stream
/// - wsnt__FilterType* wsnt__FilterType::soap_dup(soap*) returns deep copy of wsnt__FilterType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__FilterType::soap_del() deep deletes wsnt__FilterType data members, use only after wsnt__FilterType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__FilterType::soap_type() returns SOAP_TYPE_wsnt__FilterType or derived type identifier
class wsnt__FilterType : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicyType is a complexType.
///
/// @note class wsnt__SubscriptionPolicyType operations:
/// - wsnt__SubscriptionPolicyType* soap_new_wsnt__SubscriptionPolicyType(soap*) allocate and default initialize
/// - wsnt__SubscriptionPolicyType* soap_new_wsnt__SubscriptionPolicyType(soap*, int num) allocate and default initialize an array
/// - wsnt__SubscriptionPolicyType* soap_new_req_wsnt__SubscriptionPolicyType(soap*, ...) allocate, set required members
/// - wsnt__SubscriptionPolicyType* soap_new_set_wsnt__SubscriptionPolicyType(soap*, ...) allocate, set all public members
/// - wsnt__SubscriptionPolicyType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__SubscriptionPolicyType(soap*, wsnt__SubscriptionPolicyType*) deserialize from a stream
/// - int soap_write_wsnt__SubscriptionPolicyType(soap*, wsnt__SubscriptionPolicyType*) serialize to a stream
/// - wsnt__SubscriptionPolicyType* wsnt__SubscriptionPolicyType::soap_dup(soap*) returns deep copy of wsnt__SubscriptionPolicyType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__SubscriptionPolicyType::soap_del() deep deletes wsnt__SubscriptionPolicyType data members, use only after wsnt__SubscriptionPolicyType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__SubscriptionPolicyType::soap_type() returns SOAP_TYPE_wsnt__SubscriptionPolicyType or derived type identifier
class wsnt__SubscriptionPolicyType : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType is a complexType.
///
/// @note class wsnt__NotificationMessageHolderType operations:
/// - wsnt__NotificationMessageHolderType* soap_new_wsnt__NotificationMessageHolderType(soap*) allocate and default initialize
/// - wsnt__NotificationMessageHolderType* soap_new_wsnt__NotificationMessageHolderType(soap*, int num) allocate and default initialize an array
/// - wsnt__NotificationMessageHolderType* soap_new_req_wsnt__NotificationMessageHolderType(soap*, ...) allocate, set required members
/// - wsnt__NotificationMessageHolderType* soap_new_set_wsnt__NotificationMessageHolderType(soap*, ...) allocate, set all public members
/// - wsnt__NotificationMessageHolderType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__NotificationMessageHolderType(soap*, wsnt__NotificationMessageHolderType*) deserialize from a stream
/// - int soap_write_wsnt__NotificationMessageHolderType(soap*, wsnt__NotificationMessageHolderType*) serialize to a stream
/// - wsnt__NotificationMessageHolderType* wsnt__NotificationMessageHolderType::soap_dup(soap*) returns deep copy of wsnt__NotificationMessageHolderType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__NotificationMessageHolderType::soap_del() deep deletes wsnt__NotificationMessageHolderType data members, use only after wsnt__NotificationMessageHolderType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__NotificationMessageHolderType::soap_type() returns SOAP_TYPE_wsnt__NotificationMessageHolderType or derived type identifier
class wsnt__NotificationMessageHolderType : public xsd__anyType
{ public:
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":SubscriptionReference.
    wsa5__EndpointReferenceType*         SubscriptionReference          0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":Topic.
    wsnt__TopicExpressionTypeCustom*     Topic                          0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":ProducerReference.
    wsa5__EndpointReferenceType*         ProducerReference              0;	///< Optional element.
/// @note class _wsnt__NotificationMessageHolderType_Message operations:
/// - _wsnt__NotificationMessageHolderType_Message* soap_new__wsnt__NotificationMessageHolderType_Message(soap*) allocate and default initialize
/// - _wsnt__NotificationMessageHolderType_Message* soap_new__wsnt__NotificationMessageHolderType_Message(soap*, int num) allocate and default initialize an array
/// - _wsnt__NotificationMessageHolderType_Message* soap_new_req__wsnt__NotificationMessageHolderType_Message(soap*, ...) allocate, set required members
/// - _wsnt__NotificationMessageHolderType_Message* soap_new_set__wsnt__NotificationMessageHolderType_Message(soap*, ...) allocate, set all public members
/// - _wsnt__NotificationMessageHolderType_Message::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__NotificationMessageHolderType_Message(soap*, _wsnt__NotificationMessageHolderType_Message*) deserialize from a stream
/// - int soap_write__wsnt__NotificationMessageHolderType_Message(soap*, _wsnt__NotificationMessageHolderType_Message*) serialize to a stream
/// - _wsnt__NotificationMessageHolderType_Message* _wsnt__NotificationMessageHolderType_Message::soap_dup(soap*) returns deep copy of _wsnt__NotificationMessageHolderType_Message, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__NotificationMessageHolderType_Message::soap_del() deep deletes _wsnt__NotificationMessageHolderType_Message data members, use only after _wsnt__NotificationMessageHolderType_Message::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__NotificationMessageHolderType_Message::soap_type() returns SOAP_TYPE__wsnt__NotificationMessageHolderType_Message or derived type identifier
    class _wsnt__NotificationMessageHolderType_Message
    { public:
/// <any namespace="##any" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                    Message                        1;	///< Required element.
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP
/// @brief "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP is a complexType.
///
/// @note class _wsnt__NotificationProducerRP operations:
/// - _wsnt__NotificationProducerRP* soap_new__wsnt__NotificationProducerRP(soap*) allocate and default initialize
/// - _wsnt__NotificationProducerRP* soap_new__wsnt__NotificationProducerRP(soap*, int num) allocate and default initialize an array
/// - _wsnt__NotificationProducerRP* soap_new_req__wsnt__NotificationProducerRP(soap*, ...) allocate, set required members
/// - _wsnt__NotificationProducerRP* soap_new_set__wsnt__NotificationProducerRP(soap*, ...) allocate, set all public members
/// - _wsnt__NotificationProducerRP::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__NotificationProducerRP(soap*, _wsnt__NotificationProducerRP*) deserialize from a stream
/// - int soap_write__wsnt__NotificationProducerRP(soap*, _wsnt__NotificationProducerRP*) serialize to a stream
/// - _wsnt__NotificationProducerRP* _wsnt__NotificationProducerRP::soap_dup(soap*) returns deep copy of _wsnt__NotificationProducerRP, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__NotificationProducerRP::soap_del() deep deletes _wsnt__NotificationProducerRP data members, use only after _wsnt__NotificationProducerRP::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__NotificationProducerRP::soap_type() returns SOAP_TYPE__wsnt__NotificationProducerRP or derived type identifier
class _wsnt__NotificationProducerRP
{ public:
/// Vector of wsnt__TopicExpressionTypeCustom element refs of length 0..unbounded.
    std::vector<wsnt__TopicExpressionTypeCustom> TopicExpression                0;	///< Multiple elements.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":FixedTopicSet.
    bool*                                FixedTopicSet                  0 = true;	///< Optional element with default value="true".
/// Vector of xsd__anyURI element refs of length 0..unbounded.
    std::vector<xsd__anyURI            > TopicExpressionDialect         0;	///< Multiple elements.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/t-1":TopicSet.
    wstop__TopicSetType*                 wstop__TopicSet                0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP
/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP is a complexType.
///
/// @note class _wsnt__SubscriptionManagerRP operations:
/// - _wsnt__SubscriptionManagerRP* soap_new__wsnt__SubscriptionManagerRP(soap*) allocate and default initialize
/// - _wsnt__SubscriptionManagerRP* soap_new__wsnt__SubscriptionManagerRP(soap*, int num) allocate and default initialize an array
/// - _wsnt__SubscriptionManagerRP* soap_new_req__wsnt__SubscriptionManagerRP(soap*, ...) allocate, set required members
/// - _wsnt__SubscriptionManagerRP* soap_new_set__wsnt__SubscriptionManagerRP(soap*, ...) allocate, set all public members
/// - _wsnt__SubscriptionManagerRP::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__SubscriptionManagerRP(soap*, _wsnt__SubscriptionManagerRP*) deserialize from a stream
/// - int soap_write__wsnt__SubscriptionManagerRP(soap*, _wsnt__SubscriptionManagerRP*) serialize to a stream
/// - _wsnt__SubscriptionManagerRP* _wsnt__SubscriptionManagerRP::soap_dup(soap*) returns deep copy of _wsnt__SubscriptionManagerRP, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__SubscriptionManagerRP::soap_del() deep deletes _wsnt__SubscriptionManagerRP data members, use only after _wsnt__SubscriptionManagerRP::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__SubscriptionManagerRP::soap_type() returns SOAP_TYPE__wsnt__SubscriptionManagerRP or derived type identifier
class _wsnt__SubscriptionManagerRP
{ public:
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":ConsumerReference.
    wsa5__EndpointReferenceType          ConsumerReference              1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":Filter.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicy.
    wsnt__SubscriptionPolicyType*        SubscriptionPolicy             0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":CreationTime.
    xsd__dateTime*                       CreationTime                   0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Notify
/// @brief "http://docs.oasis-open.org/wsn/b-2":Notify is a complexType.
///
/// @note class _wsnt__Notify operations:
/// - _wsnt__Notify* soap_new__wsnt__Notify(soap*) allocate and default initialize
/// - _wsnt__Notify* soap_new__wsnt__Notify(soap*, int num) allocate and default initialize an array
/// - _wsnt__Notify* soap_new_req__wsnt__Notify(soap*, ...) allocate, set required members
/// - _wsnt__Notify* soap_new_set__wsnt__Notify(soap*, ...) allocate, set all public members
/// - _wsnt__Notify::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__Notify(soap*, _wsnt__Notify*) deserialize from a stream
/// - int soap_write__wsnt__Notify(soap*, _wsnt__Notify*) serialize to a stream
/// - _wsnt__Notify* _wsnt__Notify::soap_dup(soap*) returns deep copy of _wsnt__Notify, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__Notify::soap_del() deep deletes _wsnt__Notify data members, use only after _wsnt__Notify::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__Notify::soap_type() returns SOAP_TYPE__wsnt__Notify or derived type identifier
class _wsnt__Notify
{ public:
/// Vector of wsnt__NotificationMessageHolderType* element refs of length 1..unbounded.
    std::vector<wsnt__NotificationMessageHolderType*> NotificationMessage            1;	///< Multiple elements.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UseRaw
/// @brief "http://docs.oasis-open.org/wsn/b-2":UseRaw is a complexType.
///
/// @note class _wsnt__UseRaw operations:
/// - _wsnt__UseRaw* soap_new__wsnt__UseRaw(soap*) allocate and default initialize
/// - _wsnt__UseRaw* soap_new__wsnt__UseRaw(soap*, int num) allocate and default initialize an array
/// - _wsnt__UseRaw* soap_new_req__wsnt__UseRaw(soap*, ...) allocate, set required members
/// - _wsnt__UseRaw* soap_new_set__wsnt__UseRaw(soap*, ...) allocate, set all public members
/// - _wsnt__UseRaw::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__UseRaw(soap*, _wsnt__UseRaw*) deserialize from a stream
/// - int soap_write__wsnt__UseRaw(soap*, _wsnt__UseRaw*) serialize to a stream
/// - _wsnt__UseRaw* _wsnt__UseRaw::soap_dup(soap*) returns deep copy of _wsnt__UseRaw, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__UseRaw::soap_del() deep deletes _wsnt__UseRaw data members, use only after _wsnt__UseRaw::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__UseRaw::soap_type() returns SOAP_TYPE__wsnt__UseRaw or derived type identifier
class _wsnt__UseRaw
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Subscribe
/// @brief "http://docs.oasis-open.org/wsn/b-2":Subscribe is a complexType.
///
/// @note class _wsnt__Subscribe operations:
/// - _wsnt__Subscribe* soap_new__wsnt__Subscribe(soap*) allocate and default initialize
/// - _wsnt__Subscribe* soap_new__wsnt__Subscribe(soap*, int num) allocate and default initialize an array
/// - _wsnt__Subscribe* soap_new_req__wsnt__Subscribe(soap*, ...) allocate, set required members
/// - _wsnt__Subscribe* soap_new_set__wsnt__Subscribe(soap*, ...) allocate, set all public members
/// - _wsnt__Subscribe::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__Subscribe(soap*, _wsnt__Subscribe*) deserialize from a stream
/// - int soap_write__wsnt__Subscribe(soap*, _wsnt__Subscribe*) serialize to a stream
/// - _wsnt__Subscribe* _wsnt__Subscribe::soap_dup(soap*) returns deep copy of _wsnt__Subscribe, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__Subscribe::soap_del() deep deletes _wsnt__Subscribe data members, use only after _wsnt__Subscribe::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__Subscribe::soap_type() returns SOAP_TYPE__wsnt__Subscribe or derived type identifier
class _wsnt__Subscribe
{ public:
/// Element "ConsumerReference" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType          ConsumerReference              1;	///< Required element.
/// Element "Filter" of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// Element "InitialTerminationTime" of type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    wsnt__AbsoluteOrRelativeTimeType*    InitialTerminationTime         0;	///< Optional element.
/// @note class _wsnt__Subscribe_SubscriptionPolicy operations:
/// - _wsnt__Subscribe_SubscriptionPolicy* soap_new__wsnt__Subscribe_SubscriptionPolicy(soap*) allocate and default initialize
/// - _wsnt__Subscribe_SubscriptionPolicy* soap_new__wsnt__Subscribe_SubscriptionPolicy(soap*, int num) allocate and default initialize an array
/// - _wsnt__Subscribe_SubscriptionPolicy* soap_new_req__wsnt__Subscribe_SubscriptionPolicy(soap*, ...) allocate, set required members
/// - _wsnt__Subscribe_SubscriptionPolicy* soap_new_set__wsnt__Subscribe_SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - _wsnt__Subscribe_SubscriptionPolicy::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__Subscribe_SubscriptionPolicy(soap*, _wsnt__Subscribe_SubscriptionPolicy*) deserialize from a stream
/// - int soap_write__wsnt__Subscribe_SubscriptionPolicy(soap*, _wsnt__Subscribe_SubscriptionPolicy*) serialize to a stream
/// - _wsnt__Subscribe_SubscriptionPolicy* _wsnt__Subscribe_SubscriptionPolicy::soap_dup(soap*) returns deep copy of _wsnt__Subscribe_SubscriptionPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__Subscribe_SubscriptionPolicy::soap_del() deep deletes _wsnt__Subscribe_SubscriptionPolicy data members, use only after _wsnt__Subscribe_SubscriptionPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__Subscribe_SubscriptionPolicy::soap_type() returns SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy or derived type identifier
    class _wsnt__Subscribe_SubscriptionPolicy
    { public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse is a complexType.
///
/// @note class _wsnt__SubscribeResponse operations:
/// - _wsnt__SubscribeResponse* soap_new__wsnt__SubscribeResponse(soap*) allocate and default initialize
/// - _wsnt__SubscribeResponse* soap_new__wsnt__SubscribeResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__SubscribeResponse* soap_new_req__wsnt__SubscribeResponse(soap*, ...) allocate, set required members
/// - _wsnt__SubscribeResponse* soap_new_set__wsnt__SubscribeResponse(soap*, ...) allocate, set all public members
/// - _wsnt__SubscribeResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__SubscribeResponse(soap*, _wsnt__SubscribeResponse*) deserialize from a stream
/// - int soap_write__wsnt__SubscribeResponse(soap*, _wsnt__SubscribeResponse*) serialize to a stream
/// - _wsnt__SubscribeResponse* _wsnt__SubscribeResponse::soap_dup(soap*) returns deep copy of _wsnt__SubscribeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__SubscribeResponse::soap_del() deep deletes _wsnt__SubscribeResponse data members, use only after _wsnt__SubscribeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__SubscribeResponse::soap_type() returns SOAP_TYPE__wsnt__SubscribeResponse or derived type identifier
class _wsnt__SubscribeResponse
{ public:
/// Element "SubscriptionReference" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType          SubscriptionReference          1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    xsd__dateTime*                       CurrentTime                    0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    xsd__dateTime*                       TerminationTime                0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage is a complexType.
///
/// @note class _wsnt__GetCurrentMessage operations:
/// - _wsnt__GetCurrentMessage* soap_new__wsnt__GetCurrentMessage(soap*) allocate and default initialize
/// - _wsnt__GetCurrentMessage* soap_new__wsnt__GetCurrentMessage(soap*, int num) allocate and default initialize an array
/// - _wsnt__GetCurrentMessage* soap_new_req__wsnt__GetCurrentMessage(soap*, ...) allocate, set required members
/// - _wsnt__GetCurrentMessage* soap_new_set__wsnt__GetCurrentMessage(soap*, ...) allocate, set all public members
/// - _wsnt__GetCurrentMessage::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__GetCurrentMessage(soap*, _wsnt__GetCurrentMessage*) deserialize from a stream
/// - int soap_write__wsnt__GetCurrentMessage(soap*, _wsnt__GetCurrentMessage*) serialize to a stream
/// - _wsnt__GetCurrentMessage* _wsnt__GetCurrentMessage::soap_dup(soap*) returns deep copy of _wsnt__GetCurrentMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__GetCurrentMessage::soap_del() deep deletes _wsnt__GetCurrentMessage data members, use only after _wsnt__GetCurrentMessage::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__GetCurrentMessage::soap_type() returns SOAP_TYPE__wsnt__GetCurrentMessage or derived type identifier
class _wsnt__GetCurrentMessage
{ public:
/// Element "Topic" of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
    wsnt__TopicExpressionTypeCustom      Topic                          1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse is a complexType.
///
/// @note class _wsnt__GetCurrentMessageResponse operations:
/// - _wsnt__GetCurrentMessageResponse* soap_new__wsnt__GetCurrentMessageResponse(soap*) allocate and default initialize
/// - _wsnt__GetCurrentMessageResponse* soap_new__wsnt__GetCurrentMessageResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__GetCurrentMessageResponse* soap_new_req__wsnt__GetCurrentMessageResponse(soap*, ...) allocate, set required members
/// - _wsnt__GetCurrentMessageResponse* soap_new_set__wsnt__GetCurrentMessageResponse(soap*, ...) allocate, set all public members
/// - _wsnt__GetCurrentMessageResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__GetCurrentMessageResponse(soap*, _wsnt__GetCurrentMessageResponse*) deserialize from a stream
/// - int soap_write__wsnt__GetCurrentMessageResponse(soap*, _wsnt__GetCurrentMessageResponse*) serialize to a stream
/// - _wsnt__GetCurrentMessageResponse* _wsnt__GetCurrentMessageResponse::soap_dup(soap*) returns deep copy of _wsnt__GetCurrentMessageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__GetCurrentMessageResponse::soap_del() deep deletes _wsnt__GetCurrentMessageResponse data members, use only after _wsnt__GetCurrentMessageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__GetCurrentMessageResponse::soap_type() returns SOAP_TYPE__wsnt__GetCurrentMessageResponse or derived type identifier
class _wsnt__GetCurrentMessageResponse
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessages
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetMessages is a complexType.
///
/// @note class _wsnt__GetMessages operations:
/// - _wsnt__GetMessages* soap_new__wsnt__GetMessages(soap*) allocate and default initialize
/// - _wsnt__GetMessages* soap_new__wsnt__GetMessages(soap*, int num) allocate and default initialize an array
/// - _wsnt__GetMessages* soap_new_req__wsnt__GetMessages(soap*, ...) allocate, set required members
/// - _wsnt__GetMessages* soap_new_set__wsnt__GetMessages(soap*, ...) allocate, set all public members
/// - _wsnt__GetMessages::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__GetMessages(soap*, _wsnt__GetMessages*) deserialize from a stream
/// - int soap_write__wsnt__GetMessages(soap*, _wsnt__GetMessages*) serialize to a stream
/// - _wsnt__GetMessages* _wsnt__GetMessages::soap_dup(soap*) returns deep copy of _wsnt__GetMessages, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__GetMessages::soap_del() deep deletes _wsnt__GetMessages data members, use only after _wsnt__GetMessages::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__GetMessages::soap_type() returns SOAP_TYPE__wsnt__GetMessages or derived type identifier
class _wsnt__GetMessages
{ public:
/// Element "MaximumNumber" of type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MaximumNumber                  0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse is a complexType.
///
/// @note class _wsnt__GetMessagesResponse operations:
/// - _wsnt__GetMessagesResponse* soap_new__wsnt__GetMessagesResponse(soap*) allocate and default initialize
/// - _wsnt__GetMessagesResponse* soap_new__wsnt__GetMessagesResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__GetMessagesResponse* soap_new_req__wsnt__GetMessagesResponse(soap*, ...) allocate, set required members
/// - _wsnt__GetMessagesResponse* soap_new_set__wsnt__GetMessagesResponse(soap*, ...) allocate, set all public members
/// - _wsnt__GetMessagesResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__GetMessagesResponse(soap*, _wsnt__GetMessagesResponse*) deserialize from a stream
/// - int soap_write__wsnt__GetMessagesResponse(soap*, _wsnt__GetMessagesResponse*) serialize to a stream
/// - _wsnt__GetMessagesResponse* _wsnt__GetMessagesResponse::soap_dup(soap*) returns deep copy of _wsnt__GetMessagesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__GetMessagesResponse::soap_del() deep deletes _wsnt__GetMessagesResponse data members, use only after _wsnt__GetMessagesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__GetMessagesResponse::soap_type() returns SOAP_TYPE__wsnt__GetMessagesResponse or derived type identifier
class _wsnt__GetMessagesResponse
{ public:
/// Vector of wsnt__NotificationMessageHolderType* element refs of length 0..unbounded.
    std::vector<wsnt__NotificationMessageHolderType*> NotificationMessage            0;	///< Multiple elements.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint
/// @brief "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint is a complexType.
///
/// @note class _wsnt__DestroyPullPoint operations:
/// - _wsnt__DestroyPullPoint* soap_new__wsnt__DestroyPullPoint(soap*) allocate and default initialize
/// - _wsnt__DestroyPullPoint* soap_new__wsnt__DestroyPullPoint(soap*, int num) allocate and default initialize an array
/// - _wsnt__DestroyPullPoint* soap_new_req__wsnt__DestroyPullPoint(soap*, ...) allocate, set required members
/// - _wsnt__DestroyPullPoint* soap_new_set__wsnt__DestroyPullPoint(soap*, ...) allocate, set all public members
/// - _wsnt__DestroyPullPoint::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__DestroyPullPoint(soap*, _wsnt__DestroyPullPoint*) deserialize from a stream
/// - int soap_write__wsnt__DestroyPullPoint(soap*, _wsnt__DestroyPullPoint*) serialize to a stream
/// - _wsnt__DestroyPullPoint* _wsnt__DestroyPullPoint::soap_dup(soap*) returns deep copy of _wsnt__DestroyPullPoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__DestroyPullPoint::soap_del() deep deletes _wsnt__DestroyPullPoint data members, use only after _wsnt__DestroyPullPoint::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__DestroyPullPoint::soap_type() returns SOAP_TYPE__wsnt__DestroyPullPoint or derived type identifier
class _wsnt__DestroyPullPoint
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse is a complexType.
///
/// @note class _wsnt__DestroyPullPointResponse operations:
/// - _wsnt__DestroyPullPointResponse* soap_new__wsnt__DestroyPullPointResponse(soap*) allocate and default initialize
/// - _wsnt__DestroyPullPointResponse* soap_new__wsnt__DestroyPullPointResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__DestroyPullPointResponse* soap_new_req__wsnt__DestroyPullPointResponse(soap*, ...) allocate, set required members
/// - _wsnt__DestroyPullPointResponse* soap_new_set__wsnt__DestroyPullPointResponse(soap*, ...) allocate, set all public members
/// - _wsnt__DestroyPullPointResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__DestroyPullPointResponse(soap*, _wsnt__DestroyPullPointResponse*) deserialize from a stream
/// - int soap_write__wsnt__DestroyPullPointResponse(soap*, _wsnt__DestroyPullPointResponse*) serialize to a stream
/// - _wsnt__DestroyPullPointResponse* _wsnt__DestroyPullPointResponse::soap_dup(soap*) returns deep copy of _wsnt__DestroyPullPointResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__DestroyPullPointResponse::soap_del() deep deletes _wsnt__DestroyPullPointResponse data members, use only after _wsnt__DestroyPullPointResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__DestroyPullPointResponse::soap_type() returns SOAP_TYPE__wsnt__DestroyPullPointResponse or derived type identifier
class _wsnt__DestroyPullPointResponse
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint
/// @brief "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint is a complexType.
///
/// @note class _wsnt__CreatePullPoint operations:
/// - _wsnt__CreatePullPoint* soap_new__wsnt__CreatePullPoint(soap*) allocate and default initialize
/// - _wsnt__CreatePullPoint* soap_new__wsnt__CreatePullPoint(soap*, int num) allocate and default initialize an array
/// - _wsnt__CreatePullPoint* soap_new_req__wsnt__CreatePullPoint(soap*, ...) allocate, set required members
/// - _wsnt__CreatePullPoint* soap_new_set__wsnt__CreatePullPoint(soap*, ...) allocate, set all public members
/// - _wsnt__CreatePullPoint::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__CreatePullPoint(soap*, _wsnt__CreatePullPoint*) deserialize from a stream
/// - int soap_write__wsnt__CreatePullPoint(soap*, _wsnt__CreatePullPoint*) serialize to a stream
/// - _wsnt__CreatePullPoint* _wsnt__CreatePullPoint::soap_dup(soap*) returns deep copy of _wsnt__CreatePullPoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__CreatePullPoint::soap_del() deep deletes _wsnt__CreatePullPoint data members, use only after _wsnt__CreatePullPoint::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__CreatePullPoint::soap_type() returns SOAP_TYPE__wsnt__CreatePullPoint or derived type identifier
class _wsnt__CreatePullPoint
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse is a complexType.
///
/// @note class _wsnt__CreatePullPointResponse operations:
/// - _wsnt__CreatePullPointResponse* soap_new__wsnt__CreatePullPointResponse(soap*) allocate and default initialize
/// - _wsnt__CreatePullPointResponse* soap_new__wsnt__CreatePullPointResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__CreatePullPointResponse* soap_new_req__wsnt__CreatePullPointResponse(soap*, ...) allocate, set required members
/// - _wsnt__CreatePullPointResponse* soap_new_set__wsnt__CreatePullPointResponse(soap*, ...) allocate, set all public members
/// - _wsnt__CreatePullPointResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__CreatePullPointResponse(soap*, _wsnt__CreatePullPointResponse*) deserialize from a stream
/// - int soap_write__wsnt__CreatePullPointResponse(soap*, _wsnt__CreatePullPointResponse*) serialize to a stream
/// - _wsnt__CreatePullPointResponse* _wsnt__CreatePullPointResponse::soap_dup(soap*) returns deep copy of _wsnt__CreatePullPointResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__CreatePullPointResponse::soap_del() deep deletes _wsnt__CreatePullPointResponse data members, use only after _wsnt__CreatePullPointResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__CreatePullPointResponse::soap_type() returns SOAP_TYPE__wsnt__CreatePullPointResponse or derived type identifier
class _wsnt__CreatePullPointResponse
{ public:
/// Element "PullPoint" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType          PullPoint                      1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Renew
/// @brief "http://docs.oasis-open.org/wsn/b-2":Renew is a complexType.
///
/// @note class _wsnt__Renew operations:
/// - _wsnt__Renew* soap_new__wsnt__Renew(soap*) allocate and default initialize
/// - _wsnt__Renew* soap_new__wsnt__Renew(soap*, int num) allocate and default initialize an array
/// - _wsnt__Renew* soap_new_req__wsnt__Renew(soap*, ...) allocate, set required members
/// - _wsnt__Renew* soap_new_set__wsnt__Renew(soap*, ...) allocate, set all public members
/// - _wsnt__Renew::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__Renew(soap*, _wsnt__Renew*) deserialize from a stream
/// - int soap_write__wsnt__Renew(soap*, _wsnt__Renew*) serialize to a stream
/// - _wsnt__Renew* _wsnt__Renew::soap_dup(soap*) returns deep copy of _wsnt__Renew, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__Renew::soap_del() deep deletes _wsnt__Renew data members, use only after _wsnt__Renew::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__Renew::soap_type() returns SOAP_TYPE__wsnt__Renew or derived type identifier
class _wsnt__Renew
{ public:
/// Element "TerminationTime" of type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    wsnt__AbsoluteOrRelativeTimeType*    TerminationTime                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":RenewResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":RenewResponse is a complexType.
///
/// @note class _wsnt__RenewResponse operations:
/// - _wsnt__RenewResponse* soap_new__wsnt__RenewResponse(soap*) allocate and default initialize
/// - _wsnt__RenewResponse* soap_new__wsnt__RenewResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__RenewResponse* soap_new_req__wsnt__RenewResponse(soap*, ...) allocate, set required members
/// - _wsnt__RenewResponse* soap_new_set__wsnt__RenewResponse(soap*, ...) allocate, set all public members
/// - _wsnt__RenewResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__RenewResponse(soap*, _wsnt__RenewResponse*) deserialize from a stream
/// - int soap_write__wsnt__RenewResponse(soap*, _wsnt__RenewResponse*) serialize to a stream
/// - _wsnt__RenewResponse* _wsnt__RenewResponse::soap_dup(soap*) returns deep copy of _wsnt__RenewResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__RenewResponse::soap_del() deep deletes _wsnt__RenewResponse data members, use only after _wsnt__RenewResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__RenewResponse::soap_type() returns SOAP_TYPE__wsnt__RenewResponse or derived type identifier
class _wsnt__RenewResponse
{ public:
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    xsd__dateTime                        TerminationTime                1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    xsd__dateTime*                       CurrentTime                    0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Unsubscribe
/// @brief "http://docs.oasis-open.org/wsn/b-2":Unsubscribe is a complexType.
///
/// @note class _wsnt__Unsubscribe operations:
/// - _wsnt__Unsubscribe* soap_new__wsnt__Unsubscribe(soap*) allocate and default initialize
/// - _wsnt__Unsubscribe* soap_new__wsnt__Unsubscribe(soap*, int num) allocate and default initialize an array
/// - _wsnt__Unsubscribe* soap_new_req__wsnt__Unsubscribe(soap*, ...) allocate, set required members
/// - _wsnt__Unsubscribe* soap_new_set__wsnt__Unsubscribe(soap*, ...) allocate, set all public members
/// - _wsnt__Unsubscribe::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__Unsubscribe(soap*, _wsnt__Unsubscribe*) deserialize from a stream
/// - int soap_write__wsnt__Unsubscribe(soap*, _wsnt__Unsubscribe*) serialize to a stream
/// - _wsnt__Unsubscribe* _wsnt__Unsubscribe::soap_dup(soap*) returns deep copy of _wsnt__Unsubscribe, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__Unsubscribe::soap_del() deep deletes _wsnt__Unsubscribe data members, use only after _wsnt__Unsubscribe::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__Unsubscribe::soap_type() returns SOAP_TYPE__wsnt__Unsubscribe or derived type identifier
class _wsnt__Unsubscribe
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse is a complexType.
///
/// @note class _wsnt__UnsubscribeResponse operations:
/// - _wsnt__UnsubscribeResponse* soap_new__wsnt__UnsubscribeResponse(soap*) allocate and default initialize
/// - _wsnt__UnsubscribeResponse* soap_new__wsnt__UnsubscribeResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__UnsubscribeResponse* soap_new_req__wsnt__UnsubscribeResponse(soap*, ...) allocate, set required members
/// - _wsnt__UnsubscribeResponse* soap_new_set__wsnt__UnsubscribeResponse(soap*, ...) allocate, set all public members
/// - _wsnt__UnsubscribeResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__UnsubscribeResponse(soap*, _wsnt__UnsubscribeResponse*) deserialize from a stream
/// - int soap_write__wsnt__UnsubscribeResponse(soap*, _wsnt__UnsubscribeResponse*) serialize to a stream
/// - _wsnt__UnsubscribeResponse* _wsnt__UnsubscribeResponse::soap_dup(soap*) returns deep copy of _wsnt__UnsubscribeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__UnsubscribeResponse::soap_del() deep deletes _wsnt__UnsubscribeResponse data members, use only after _wsnt__UnsubscribeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__UnsubscribeResponse::soap_type() returns SOAP_TYPE__wsnt__UnsubscribeResponse or derived type identifier
class _wsnt__UnsubscribeResponse
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscription
/// @brief "http://docs.oasis-open.org/wsn/b-2":PauseSubscription is a complexType.
///
/// @note class _wsnt__PauseSubscription operations:
/// - _wsnt__PauseSubscription* soap_new__wsnt__PauseSubscription(soap*) allocate and default initialize
/// - _wsnt__PauseSubscription* soap_new__wsnt__PauseSubscription(soap*, int num) allocate and default initialize an array
/// - _wsnt__PauseSubscription* soap_new_req__wsnt__PauseSubscription(soap*, ...) allocate, set required members
/// - _wsnt__PauseSubscription* soap_new_set__wsnt__PauseSubscription(soap*, ...) allocate, set all public members
/// - _wsnt__PauseSubscription::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__PauseSubscription(soap*, _wsnt__PauseSubscription*) deserialize from a stream
/// - int soap_write__wsnt__PauseSubscription(soap*, _wsnt__PauseSubscription*) serialize to a stream
/// - _wsnt__PauseSubscription* _wsnt__PauseSubscription::soap_dup(soap*) returns deep copy of _wsnt__PauseSubscription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__PauseSubscription::soap_del() deep deletes _wsnt__PauseSubscription data members, use only after _wsnt__PauseSubscription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__PauseSubscription::soap_type() returns SOAP_TYPE__wsnt__PauseSubscription or derived type identifier
class _wsnt__PauseSubscription
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse is a complexType.
///
/// @note class _wsnt__PauseSubscriptionResponse operations:
/// - _wsnt__PauseSubscriptionResponse* soap_new__wsnt__PauseSubscriptionResponse(soap*) allocate and default initialize
/// - _wsnt__PauseSubscriptionResponse* soap_new__wsnt__PauseSubscriptionResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__PauseSubscriptionResponse* soap_new_req__wsnt__PauseSubscriptionResponse(soap*, ...) allocate, set required members
/// - _wsnt__PauseSubscriptionResponse* soap_new_set__wsnt__PauseSubscriptionResponse(soap*, ...) allocate, set all public members
/// - _wsnt__PauseSubscriptionResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__PauseSubscriptionResponse(soap*, _wsnt__PauseSubscriptionResponse*) deserialize from a stream
/// - int soap_write__wsnt__PauseSubscriptionResponse(soap*, _wsnt__PauseSubscriptionResponse*) serialize to a stream
/// - _wsnt__PauseSubscriptionResponse* _wsnt__PauseSubscriptionResponse::soap_dup(soap*) returns deep copy of _wsnt__PauseSubscriptionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__PauseSubscriptionResponse::soap_del() deep deletes _wsnt__PauseSubscriptionResponse data members, use only after _wsnt__PauseSubscriptionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__PauseSubscriptionResponse::soap_type() returns SOAP_TYPE__wsnt__PauseSubscriptionResponse or derived type identifier
class _wsnt__PauseSubscriptionResponse
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription
/// @brief "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription is a complexType.
///
/// @note class _wsnt__ResumeSubscription operations:
/// - _wsnt__ResumeSubscription* soap_new__wsnt__ResumeSubscription(soap*) allocate and default initialize
/// - _wsnt__ResumeSubscription* soap_new__wsnt__ResumeSubscription(soap*, int num) allocate and default initialize an array
/// - _wsnt__ResumeSubscription* soap_new_req__wsnt__ResumeSubscription(soap*, ...) allocate, set required members
/// - _wsnt__ResumeSubscription* soap_new_set__wsnt__ResumeSubscription(soap*, ...) allocate, set all public members
/// - _wsnt__ResumeSubscription::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__ResumeSubscription(soap*, _wsnt__ResumeSubscription*) deserialize from a stream
/// - int soap_write__wsnt__ResumeSubscription(soap*, _wsnt__ResumeSubscription*) serialize to a stream
/// - _wsnt__ResumeSubscription* _wsnt__ResumeSubscription::soap_dup(soap*) returns deep copy of _wsnt__ResumeSubscription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__ResumeSubscription::soap_del() deep deletes _wsnt__ResumeSubscription data members, use only after _wsnt__ResumeSubscription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__ResumeSubscription::soap_type() returns SOAP_TYPE__wsnt__ResumeSubscription or derived type identifier
class _wsnt__ResumeSubscription
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse is a complexType.
///
/// @note class _wsnt__ResumeSubscriptionResponse operations:
/// - _wsnt__ResumeSubscriptionResponse* soap_new__wsnt__ResumeSubscriptionResponse(soap*) allocate and default initialize
/// - _wsnt__ResumeSubscriptionResponse* soap_new__wsnt__ResumeSubscriptionResponse(soap*, int num) allocate and default initialize an array
/// - _wsnt__ResumeSubscriptionResponse* soap_new_req__wsnt__ResumeSubscriptionResponse(soap*, ...) allocate, set required members
/// - _wsnt__ResumeSubscriptionResponse* soap_new_set__wsnt__ResumeSubscriptionResponse(soap*, ...) allocate, set all public members
/// - _wsnt__ResumeSubscriptionResponse::soap_default(soap*) default initialize members
/// - int soap_read__wsnt__ResumeSubscriptionResponse(soap*, _wsnt__ResumeSubscriptionResponse*) deserialize from a stream
/// - int soap_write__wsnt__ResumeSubscriptionResponse(soap*, _wsnt__ResumeSubscriptionResponse*) serialize to a stream
/// - _wsnt__ResumeSubscriptionResponse* _wsnt__ResumeSubscriptionResponse::soap_dup(soap*) returns deep copy of _wsnt__ResumeSubscriptionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsnt__ResumeSubscriptionResponse::soap_del() deep deletes _wsnt__ResumeSubscriptionResponse data members, use only after _wsnt__ResumeSubscriptionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsnt__ResumeSubscriptionResponse::soap_type() returns SOAP_TYPE__wsnt__ResumeSubscriptionResponse or derived type identifier
class _wsnt__ResumeSubscriptionResponse
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.w3.org/2004/08/xop/include":Include is a complexType.
///
/// @note class xop__Include operations:
/// - xop__Include* soap_new_xop__Include(soap*) allocate and default initialize
/// - xop__Include* soap_new_xop__Include(soap*, int num) allocate and default initialize an array
/// - xop__Include* soap_new_req_xop__Include(soap*, ...) allocate, set required members
/// - xop__Include* soap_new_set_xop__Include(soap*, ...) allocate, set all public members
/// - xop__Include::soap_default(soap*) default initialize members
/// - int soap_read_xop__Include(soap*, xop__Include*) deserialize from a stream
/// - int soap_write_xop__Include(soap*, xop__Include*) serialize to a stream
/// - xop__Include* xop__Include::soap_dup(soap*) returns deep copy of xop__Include, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - xop__Include::soap_del() deep deletes xop__Include data members, use only after xop__Include::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int xop__Include::soap_type() returns SOAP_TYPE_xop__Include or derived type identifier
class xop__Include : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "href" of type xs:anyURI.
  @ xsd__anyURI                          href                           1;	///< Required attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType is a complexType.
///
/// This type is extended by:
/// - "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFaultType as wsrf__ResourceUnknownFaultType
/// - "http://docs.oasis-open.org/wsrf/r-2":ResourceUnavailableFaultType as wsrf__ResourceUnavailableFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFaultType as wsnt__SubscribeCreationFailedFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFaultType as wsnt__InvalidFilterFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFaultType as wsnt__TopicExpressionDialectUnknownFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFaultType as wsnt__InvalidTopicExpressionFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFaultType as wsnt__TopicNotSupportedFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFaultType as wsnt__MultipleTopicsSpecifiedFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFaultType as wsnt__InvalidProducerPropertiesExpressionFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFaultType as wsnt__InvalidMessageContentExpressionFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFaultType as wsnt__UnrecognizedPolicyRequestFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFaultType as wsnt__UnsupportedPolicyRequestFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFaultType as wsnt__NotifyMessageNotSupportedFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFaultType as wsnt__UnacceptableInitialTerminationTimeFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFaultType as wsnt__NoCurrentMessageOnTopicFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFaultType as wsnt__UnableToGetMessagesFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFaultType as wsnt__UnableToDestroyPullPointFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFaultType as wsnt__UnableToCreatePullPointFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFaultType as wsnt__UnacceptableTerminationTimeFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFaultType as wsnt__UnableToDestroySubscriptionFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":PauseFailedFaultType as wsnt__PauseFailedFaultType
/// - "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFaultType as wsnt__ResumeFailedFaultType
///
/// @note class wsrfbf__BaseFaultType operations:
/// - wsrfbf__BaseFaultType* soap_new_wsrfbf__BaseFaultType(soap*) allocate and default initialize
/// - wsrfbf__BaseFaultType* soap_new_wsrfbf__BaseFaultType(soap*, int num) allocate and default initialize an array
/// - wsrfbf__BaseFaultType* soap_new_req_wsrfbf__BaseFaultType(soap*, ...) allocate, set required members
/// - wsrfbf__BaseFaultType* soap_new_set_wsrfbf__BaseFaultType(soap*, ...) allocate, set all public members
/// - wsrfbf__BaseFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsrfbf__BaseFaultType(soap*, wsrfbf__BaseFaultType*) deserialize from a stream
/// - int soap_write_wsrfbf__BaseFaultType(soap*, wsrfbf__BaseFaultType*) serialize to a stream
/// - wsrfbf__BaseFaultType* wsrfbf__BaseFaultType::soap_dup(soap*) returns deep copy of wsrfbf__BaseFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsrfbf__BaseFaultType::soap_del() deep deletes wsrfbf__BaseFaultType data members, use only after wsrfbf__BaseFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsrfbf__BaseFaultType::soap_type() returns SOAP_TYPE_wsrfbf__BaseFaultType or derived type identifier
class wsrfbf__BaseFaultType : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__BaseFaultType_ErrorCode operations:
/// - _wsrfbf__BaseFaultType_ErrorCode* soap_new__wsrfbf__BaseFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__BaseFaultType_ErrorCode* soap_new__wsrfbf__BaseFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__BaseFaultType_ErrorCode* soap_new_req__wsrfbf__BaseFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__BaseFaultType_ErrorCode* soap_new_set__wsrfbf__BaseFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__BaseFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__BaseFaultType_ErrorCode(soap*, _wsrfbf__BaseFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__BaseFaultType_ErrorCode(soap*, _wsrfbf__BaseFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__BaseFaultType_ErrorCode* _wsrfbf__BaseFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__BaseFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__BaseFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__BaseFaultType_ErrorCode data members, use only after _wsrfbf__BaseFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__BaseFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode or derived type identifier
    class _wsrfbf__BaseFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__BaseFaultType_Description operations:
/// - _wsrfbf__BaseFaultType_Description* soap_new__wsrfbf__BaseFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__BaseFaultType_Description* soap_new__wsrfbf__BaseFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__BaseFaultType_Description* soap_new_req__wsrfbf__BaseFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__BaseFaultType_Description* soap_new_set__wsrfbf__BaseFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__BaseFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__BaseFaultType_Description(soap*, _wsrfbf__BaseFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__BaseFaultType_Description(soap*, _wsrfbf__BaseFaultType_Description*) serialize to a stream
/// - _wsrfbf__BaseFaultType_Description* _wsrfbf__BaseFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__BaseFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__BaseFaultType_Description::soap_del() deep deletes _wsrfbf__BaseFaultType_Description data members, use only after _wsrfbf__BaseFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__BaseFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__BaseFaultType_Description or derived type identifier
    class _wsrfbf__BaseFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__BaseFaultType_FaultCause operations:
/// - _wsrfbf__BaseFaultType_FaultCause* soap_new__wsrfbf__BaseFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__BaseFaultType_FaultCause* soap_new__wsrfbf__BaseFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__BaseFaultType_FaultCause* soap_new_req__wsrfbf__BaseFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__BaseFaultType_FaultCause* soap_new_set__wsrfbf__BaseFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__BaseFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__BaseFaultType_FaultCause(soap*, _wsrfbf__BaseFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__BaseFaultType_FaultCause(soap*, _wsrfbf__BaseFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__BaseFaultType_FaultCause* _wsrfbf__BaseFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__BaseFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__BaseFaultType_FaultCause::soap_del() deep deletes _wsrfbf__BaseFaultType_FaultCause data members, use only after _wsrfbf__BaseFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__BaseFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause or derived type identifier
    class _wsrfbf__BaseFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsn/t-1":Documentation is a complexType.
///
/// @note class wstop__Documentation operations:
/// - wstop__Documentation* soap_new_wstop__Documentation(soap*) allocate and default initialize
/// - wstop__Documentation* soap_new_wstop__Documentation(soap*, int num) allocate and default initialize an array
/// - wstop__Documentation* soap_new_req_wstop__Documentation(soap*, ...) allocate, set required members
/// - wstop__Documentation* soap_new_set_wstop__Documentation(soap*, ...) allocate, set all public members
/// - wstop__Documentation::soap_default(soap*) default initialize members
/// - int soap_read_wstop__Documentation(soap*, wstop__Documentation*) deserialize from a stream
/// - int soap_write_wstop__Documentation(soap*, wstop__Documentation*) serialize to a stream
/// - wstop__Documentation* wstop__Documentation::soap_dup(soap*) returns deep copy of wstop__Documentation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wstop__Documentation::soap_del() deep deletes wstop__Documentation data members, use only after wstop__Documentation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wstop__Documentation::soap_type() returns SOAP_TYPE_wstop__Documentation or derived type identifier
class wstop__Documentation : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented is an abstract complexType.
///
/// This type is extended by:
/// - "http://docs.oasis-open.org/wsn/t-1":TopicNamespaceType as wstop__TopicNamespaceType
/// - "http://docs.oasis-open.org/wsn/t-1":TopicType as wstop__TopicType
/// - "http://docs.oasis-open.org/wsn/t-1":TopicSetType as wstop__TopicSetType
///
/// @note class wstop__ExtensibleDocumented operations:
/// - wstop__ExtensibleDocumented* soap_new_wstop__ExtensibleDocumented(soap*) allocate and default initialize
/// - wstop__ExtensibleDocumented* soap_new_wstop__ExtensibleDocumented(soap*, int num) allocate and default initialize an array
/// - wstop__ExtensibleDocumented* soap_new_req_wstop__ExtensibleDocumented(soap*, ...) allocate, set required members
/// - wstop__ExtensibleDocumented* soap_new_set_wstop__ExtensibleDocumented(soap*, ...) allocate, set all public members
/// - wstop__ExtensibleDocumented::soap_default(soap*) default initialize members
/// - int soap_read_wstop__ExtensibleDocumented(soap*, wstop__ExtensibleDocumented*) deserialize from a stream
/// - int soap_write_wstop__ExtensibleDocumented(soap*, wstop__ExtensibleDocumented*) serialize to a stream
/// - wstop__ExtensibleDocumented* wstop__ExtensibleDocumented::soap_dup(soap*) returns deep copy of wstop__ExtensibleDocumented, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wstop__ExtensibleDocumented::soap_del() deep deletes wstop__ExtensibleDocumented data members, use only after wstop__ExtensibleDocumented::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wstop__ExtensibleDocumented::soap_type() returns SOAP_TYPE_wstop__ExtensibleDocumented or derived type identifier
class wstop__ExtensibleDocumented : public xsd__anyType
{ public:
/// Element "documentation" of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType is a complexType.
///
/// @note class wstop__QueryExpressionType operations:
/// - wstop__QueryExpressionType* soap_new_wstop__QueryExpressionType(soap*) allocate and default initialize
/// - wstop__QueryExpressionType* soap_new_wstop__QueryExpressionType(soap*, int num) allocate and default initialize an array
/// - wstop__QueryExpressionType* soap_new_req_wstop__QueryExpressionType(soap*, ...) allocate, set required members
/// - wstop__QueryExpressionType* soap_new_set_wstop__QueryExpressionType(soap*, ...) allocate, set all public members
/// - wstop__QueryExpressionType::soap_default(soap*) default initialize members
/// - int soap_read_wstop__QueryExpressionType(soap*, wstop__QueryExpressionType*) deserialize from a stream
/// - int soap_write_wstop__QueryExpressionType(soap*, wstop__QueryExpressionType*) serialize to a stream
/// - wstop__QueryExpressionType* wstop__QueryExpressionType::soap_dup(soap*) returns deep copy of wstop__QueryExpressionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wstop__QueryExpressionType::soap_del() deep deletes wstop__QueryExpressionType data members, use only after wstop__QueryExpressionType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wstop__QueryExpressionType::soap_type() returns SOAP_TYPE_wstop__QueryExpressionType or derived type identifier
class wstop__QueryExpressionType : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "Dialect" of type xs:anyURI.
  @ xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/events/wsdl":Capabilities is a complexType.
///
/// @note class tev__Capabilities operations:
/// - tev__Capabilities* soap_new_tev__Capabilities(soap*) allocate and default initialize
/// - tev__Capabilities* soap_new_tev__Capabilities(soap*, int num) allocate and default initialize an array
/// - tev__Capabilities* soap_new_req_tev__Capabilities(soap*, ...) allocate, set required members
/// - tev__Capabilities* soap_new_set_tev__Capabilities(soap*, ...) allocate, set all public members
/// - tev__Capabilities::soap_default(soap*) default initialize members
/// - int soap_read_tev__Capabilities(soap*, tev__Capabilities*) deserialize from a stream
/// - int soap_write_tev__Capabilities(soap*, tev__Capabilities*) serialize to a stream
/// - tev__Capabilities* tev__Capabilities::soap_dup(soap*) returns deep copy of tev__Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tev__Capabilities::soap_del() deep deletes tev__Capabilities data members, use only after tev__Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tev__Capabilities::soap_type() returns SOAP_TYPE_tev__Capabilities or derived type identifier
class tev__Capabilities : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Indicates that the WS Subscription policy is supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "WSSubscriptionPolicySupport" of type xs:boolean.
  @ bool*                                WSSubscriptionPolicySupport    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates that the WS Pull Point is supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "WSPullPointSupport" of type xs:boolean.
  @ bool*                                WSPullPointSupport             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates that the WS Pausable Subscription Manager Interface is supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "WSPausableSubscriptionManagerInterfaceSupport" of type xs:boolean.
  @ bool*                                WSPausableSubscriptionManagerInterfaceSupport 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum number of supported notification producers as defined by WS-BaseNotification.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxNotificationProducers" of type xs:int.
  @ int*                                 MaxNotificationProducers       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum supported number of notification pull points.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxPullPoints" of type xs:int.
  @ int*                                 MaxPullPoints                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indication if the device supports persistent notification storage.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "PersistentNotificationStorage" of type xs:boolean.
  @ bool*                                PersistentNotificationStorage  0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/events/wsdl":SubscriptionPolicy is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Optional ONVIF defined pull point subscription policies
/// </BLOCKQUOTE></PRE>
///
/// @note class tev__SubscriptionPolicy operations:
/// - tev__SubscriptionPolicy* soap_new_tev__SubscriptionPolicy(soap*) allocate and default initialize
/// - tev__SubscriptionPolicy* soap_new_tev__SubscriptionPolicy(soap*, int num) allocate and default initialize an array
/// - tev__SubscriptionPolicy* soap_new_req_tev__SubscriptionPolicy(soap*, ...) allocate, set required members
/// - tev__SubscriptionPolicy* soap_new_set_tev__SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - tev__SubscriptionPolicy::soap_default(soap*) default initialize members
/// - int soap_read_tev__SubscriptionPolicy(soap*, tev__SubscriptionPolicy*) deserialize from a stream
/// - int soap_write_tev__SubscriptionPolicy(soap*, tev__SubscriptionPolicy*) serialize to a stream
/// - tev__SubscriptionPolicy* tev__SubscriptionPolicy::soap_dup(soap*) returns deep copy of tev__SubscriptionPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tev__SubscriptionPolicy::soap_del() deep deletes tev__SubscriptionPolicy data members, use only after tev__SubscriptionPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tev__SubscriptionPolicy::soap_type() returns SOAP_TYPE_tev__SubscriptionPolicy or derived type identifier
class tev__SubscriptionPolicy : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   The pullpoint should not provide Initialized nor Deleted events for Properties.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "ChangedOnly" of type xs:boolean.
  @ bool*                                ChangedOnly                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilities
/// @brief "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilities is a complexType.
///
/// @note class _tev__GetServiceCapabilities operations:
/// - _tev__GetServiceCapabilities* soap_new__tev__GetServiceCapabilities(soap*) allocate and default initialize
/// - _tev__GetServiceCapabilities* soap_new__tev__GetServiceCapabilities(soap*, int num) allocate and default initialize an array
/// - _tev__GetServiceCapabilities* soap_new_req__tev__GetServiceCapabilities(soap*, ...) allocate, set required members
/// - _tev__GetServiceCapabilities* soap_new_set__tev__GetServiceCapabilities(soap*, ...) allocate, set all public members
/// - _tev__GetServiceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__tev__GetServiceCapabilities(soap*, _tev__GetServiceCapabilities*) deserialize from a stream
/// - int soap_write__tev__GetServiceCapabilities(soap*, _tev__GetServiceCapabilities*) serialize to a stream
/// - _tev__GetServiceCapabilities* _tev__GetServiceCapabilities::soap_dup(soap*) returns deep copy of _tev__GetServiceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__GetServiceCapabilities::soap_del() deep deletes _tev__GetServiceCapabilities data members, use only after _tev__GetServiceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__GetServiceCapabilities::soap_type() returns SOAP_TYPE__tev__GetServiceCapabilities or derived type identifier
class _tev__GetServiceCapabilities
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilitiesResponse is a complexType.
///
/// @note class _tev__GetServiceCapabilitiesResponse operations:
/// - _tev__GetServiceCapabilitiesResponse* soap_new__tev__GetServiceCapabilitiesResponse(soap*) allocate and default initialize
/// - _tev__GetServiceCapabilitiesResponse* soap_new__tev__GetServiceCapabilitiesResponse(soap*, int num) allocate and default initialize an array
/// - _tev__GetServiceCapabilitiesResponse* soap_new_req__tev__GetServiceCapabilitiesResponse(soap*, ...) allocate, set required members
/// - _tev__GetServiceCapabilitiesResponse* soap_new_set__tev__GetServiceCapabilitiesResponse(soap*, ...) allocate, set all public members
/// - _tev__GetServiceCapabilitiesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tev__GetServiceCapabilitiesResponse(soap*, _tev__GetServiceCapabilitiesResponse*) deserialize from a stream
/// - int soap_write__tev__GetServiceCapabilitiesResponse(soap*, _tev__GetServiceCapabilitiesResponse*) serialize to a stream
/// - _tev__GetServiceCapabilitiesResponse* _tev__GetServiceCapabilitiesResponse::soap_dup(soap*) returns deep copy of _tev__GetServiceCapabilitiesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__GetServiceCapabilitiesResponse::soap_del() deep deletes _tev__GetServiceCapabilitiesResponse data members, use only after _tev__GetServiceCapabilitiesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__GetServiceCapabilitiesResponse::soap_type() returns SOAP_TYPE__tev__GetServiceCapabilitiesResponse or derived type identifier
class _tev__GetServiceCapabilitiesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   The capabilities for the event service is returned in the Capabilities element.
/// </BLOCKQUOTE></PRE>
///
/// Element "Capabilities" of type "http://www.onvif.org/ver10/events/wsdl":Capabilities.
    tev__Capabilities*                   Capabilities                   1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscription
/// @brief "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscription is a complexType.
///
/// @note class _tev__CreatePullPointSubscription operations:
/// - _tev__CreatePullPointSubscription* soap_new__tev__CreatePullPointSubscription(soap*) allocate and default initialize
/// - _tev__CreatePullPointSubscription* soap_new__tev__CreatePullPointSubscription(soap*, int num) allocate and default initialize an array
/// - _tev__CreatePullPointSubscription* soap_new_req__tev__CreatePullPointSubscription(soap*, ...) allocate, set required members
/// - _tev__CreatePullPointSubscription* soap_new_set__tev__CreatePullPointSubscription(soap*, ...) allocate, set all public members
/// - _tev__CreatePullPointSubscription::soap_default(soap*) default initialize members
/// - int soap_read__tev__CreatePullPointSubscription(soap*, _tev__CreatePullPointSubscription*) deserialize from a stream
/// - int soap_write__tev__CreatePullPointSubscription(soap*, _tev__CreatePullPointSubscription*) serialize to a stream
/// - _tev__CreatePullPointSubscription* _tev__CreatePullPointSubscription::soap_dup(soap*) returns deep copy of _tev__CreatePullPointSubscription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__CreatePullPointSubscription::soap_del() deep deletes _tev__CreatePullPointSubscription data members, use only after _tev__CreatePullPointSubscription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__CreatePullPointSubscription::soap_type() returns SOAP_TYPE__tev__CreatePullPointSubscription or derived type identifier
class _tev__CreatePullPointSubscription
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional XPATH expression to select specific topics.
/// </BLOCKQUOTE></PRE>
///
/// Element "Filter" of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Initial termination time.
/// </BLOCKQUOTE></PRE>
///
/// Element "InitialTerminationTime" of type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    wsnt__AbsoluteOrRelativeTimeType*    InitialTerminationTime         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refer to <a href="http://docs.oasis-open.org/wsn/wsn-ws_base_notification-1.3-spec-os.htm">Web Services Base Notification 1.3 (WS-BaseNotification)</a>.
/// </BLOCKQUOTE></PRE>
///
/// @note class _tev__CreatePullPointSubscription_SubscriptionPolicy operations:
/// - _tev__CreatePullPointSubscription_SubscriptionPolicy* soap_new__tev__CreatePullPointSubscription_SubscriptionPolicy(soap*) allocate and default initialize
/// - _tev__CreatePullPointSubscription_SubscriptionPolicy* soap_new__tev__CreatePullPointSubscription_SubscriptionPolicy(soap*, int num) allocate and default initialize an array
/// - _tev__CreatePullPointSubscription_SubscriptionPolicy* soap_new_req__tev__CreatePullPointSubscription_SubscriptionPolicy(soap*, ...) allocate, set required members
/// - _tev__CreatePullPointSubscription_SubscriptionPolicy* soap_new_set__tev__CreatePullPointSubscription_SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_default(soap*) default initialize members
/// - int soap_read__tev__CreatePullPointSubscription_SubscriptionPolicy(soap*, _tev__CreatePullPointSubscription_SubscriptionPolicy*) deserialize from a stream
/// - int soap_write__tev__CreatePullPointSubscription_SubscriptionPolicy(soap*, _tev__CreatePullPointSubscription_SubscriptionPolicy*) serialize to a stream
/// - _tev__CreatePullPointSubscription_SubscriptionPolicy* _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_dup(soap*) returns deep copy of _tev__CreatePullPointSubscription_SubscriptionPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_del() deep deletes _tev__CreatePullPointSubscription_SubscriptionPolicy data members, use only after _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_type() returns SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy or derived type identifier
    class _tev__CreatePullPointSubscription_SubscriptionPolicy
    { public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscriptionResponse
/// @brief "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscriptionResponse is a complexType.
///
/// @note class _tev__CreatePullPointSubscriptionResponse operations:
/// - _tev__CreatePullPointSubscriptionResponse* soap_new__tev__CreatePullPointSubscriptionResponse(soap*) allocate and default initialize
/// - _tev__CreatePullPointSubscriptionResponse* soap_new__tev__CreatePullPointSubscriptionResponse(soap*, int num) allocate and default initialize an array
/// - _tev__CreatePullPointSubscriptionResponse* soap_new_req__tev__CreatePullPointSubscriptionResponse(soap*, ...) allocate, set required members
/// - _tev__CreatePullPointSubscriptionResponse* soap_new_set__tev__CreatePullPointSubscriptionResponse(soap*, ...) allocate, set all public members
/// - _tev__CreatePullPointSubscriptionResponse::soap_default(soap*) default initialize members
/// - int soap_read__tev__CreatePullPointSubscriptionResponse(soap*, _tev__CreatePullPointSubscriptionResponse*) deserialize from a stream
/// - int soap_write__tev__CreatePullPointSubscriptionResponse(soap*, _tev__CreatePullPointSubscriptionResponse*) serialize to a stream
/// - _tev__CreatePullPointSubscriptionResponse* _tev__CreatePullPointSubscriptionResponse::soap_dup(soap*) returns deep copy of _tev__CreatePullPointSubscriptionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__CreatePullPointSubscriptionResponse::soap_del() deep deletes _tev__CreatePullPointSubscriptionResponse data members, use only after _tev__CreatePullPointSubscriptionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__CreatePullPointSubscriptionResponse::soap_type() returns SOAP_TYPE__tev__CreatePullPointSubscriptionResponse or derived type identifier
class _tev__CreatePullPointSubscriptionResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Endpoint reference of the subscription to be used for pulling the messages.
/// </BLOCKQUOTE></PRE>
///
/// Element "SubscriptionReference" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType          SubscriptionReference          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Current time of the server for synchronization purposes.
/// </BLOCKQUOTE></PRE>
///
/// Element reference "http://www.onvif.org/ver10/events/wsdl:""http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    xsd__dateTime                        wsnt__CurrentTime              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Date time when the PullPoint will be shut down without further pull requests.
/// </BLOCKQUOTE></PRE>
///
/// Element reference "http://www.onvif.org/ver10/events/wsdl:""http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    xsd__dateTime                        wsnt__TerminationTime          1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":PullMessages
/// @brief "http://www.onvif.org/ver10/events/wsdl":PullMessages is a complexType.
///
/// @note class _tev__PullMessages operations:
/// - _tev__PullMessages* soap_new__tev__PullMessages(soap*) allocate and default initialize
/// - _tev__PullMessages* soap_new__tev__PullMessages(soap*, int num) allocate and default initialize an array
/// - _tev__PullMessages* soap_new_req__tev__PullMessages(soap*, ...) allocate, set required members
/// - _tev__PullMessages* soap_new_set__tev__PullMessages(soap*, ...) allocate, set all public members
/// - _tev__PullMessages::soap_default(soap*) default initialize members
/// - int soap_read__tev__PullMessages(soap*, _tev__PullMessages*) deserialize from a stream
/// - int soap_write__tev__PullMessages(soap*, _tev__PullMessages*) serialize to a stream
/// - _tev__PullMessages* _tev__PullMessages::soap_dup(soap*) returns deep copy of _tev__PullMessages, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__PullMessages::soap_del() deep deletes _tev__PullMessages data members, use only after _tev__PullMessages::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__PullMessages::soap_type() returns SOAP_TYPE__tev__PullMessages or derived type identifier
class _tev__PullMessages
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum time to block until this method returns.
/// </BLOCKQUOTE></PRE>
///
/// Element "Timeout" of type xs:duration.
    xsd__duration                        Timeout                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Upper limit for the number of messages to return at once. A server implementation may decide to return less messages.
/// </BLOCKQUOTE></PRE>
///
/// Element "MessageLimit" of type xs:int.
    int                                  MessageLimit                   1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":PullMessagesResponse
/// @brief "http://www.onvif.org/ver10/events/wsdl":PullMessagesResponse is a complexType.
///
/// @note class _tev__PullMessagesResponse operations:
/// - _tev__PullMessagesResponse* soap_new__tev__PullMessagesResponse(soap*) allocate and default initialize
/// - _tev__PullMessagesResponse* soap_new__tev__PullMessagesResponse(soap*, int num) allocate and default initialize an array
/// - _tev__PullMessagesResponse* soap_new_req__tev__PullMessagesResponse(soap*, ...) allocate, set required members
/// - _tev__PullMessagesResponse* soap_new_set__tev__PullMessagesResponse(soap*, ...) allocate, set all public members
/// - _tev__PullMessagesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tev__PullMessagesResponse(soap*, _tev__PullMessagesResponse*) deserialize from a stream
/// - int soap_write__tev__PullMessagesResponse(soap*, _tev__PullMessagesResponse*) serialize to a stream
/// - _tev__PullMessagesResponse* _tev__PullMessagesResponse::soap_dup(soap*) returns deep copy of _tev__PullMessagesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__PullMessagesResponse::soap_del() deep deletes _tev__PullMessagesResponse data members, use only after _tev__PullMessagesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__PullMessagesResponse::soap_type() returns SOAP_TYPE__tev__PullMessagesResponse or derived type identifier
class _tev__PullMessagesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   The date and time when the messages have been delivered by the web server to the client.
/// </BLOCKQUOTE></PRE>
///
/// Element "CurrentTime" of type xs:dateTime.
    xsd__dateTime                        CurrentTime                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Date time when the PullPoint will be shut down without further pull requests.
/// </BLOCKQUOTE></PRE>
///
/// Element "TerminationTime" of type xs:dateTime.
    xsd__dateTime                        TerminationTime                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of messages. This list shall be empty in case of a timeout.
/// </BLOCKQUOTE></PRE>
///
/// Vector of wsnt__NotificationMessageHolderType* element refs of length 0..unbounded.
    std::vector<wsnt__NotificationMessageHolderType*> wsnt__NotificationMessage      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse
/// @brief "http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse is a complexType.
///
/// @note class _tev__PullMessagesFaultResponse operations:
/// - _tev__PullMessagesFaultResponse* soap_new__tev__PullMessagesFaultResponse(soap*) allocate and default initialize
/// - _tev__PullMessagesFaultResponse* soap_new__tev__PullMessagesFaultResponse(soap*, int num) allocate and default initialize an array
/// - _tev__PullMessagesFaultResponse* soap_new_req__tev__PullMessagesFaultResponse(soap*, ...) allocate, set required members
/// - _tev__PullMessagesFaultResponse* soap_new_set__tev__PullMessagesFaultResponse(soap*, ...) allocate, set all public members
/// - _tev__PullMessagesFaultResponse::soap_default(soap*) default initialize members
/// - int soap_read__tev__PullMessagesFaultResponse(soap*, _tev__PullMessagesFaultResponse*) deserialize from a stream
/// - int soap_write__tev__PullMessagesFaultResponse(soap*, _tev__PullMessagesFaultResponse*) serialize to a stream
/// - _tev__PullMessagesFaultResponse* _tev__PullMessagesFaultResponse::soap_dup(soap*) returns deep copy of _tev__PullMessagesFaultResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__PullMessagesFaultResponse::soap_del() deep deletes _tev__PullMessagesFaultResponse data members, use only after _tev__PullMessagesFaultResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__PullMessagesFaultResponse::soap_type() returns SOAP_TYPE__tev__PullMessagesFaultResponse or derived type identifier
class _tev__PullMessagesFaultResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum timeout supported by the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxTimeout" of type xs:duration.
    xsd__duration                        MaxTimeout                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum message limit supported by the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxMessageLimit" of type xs:int.
    int                                  MaxMessageLimit                1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":Seek
/// @brief "http://www.onvif.org/ver10/events/wsdl":Seek is a complexType.
///
/// @note class _tev__Seek operations:
/// - _tev__Seek* soap_new__tev__Seek(soap*) allocate and default initialize
/// - _tev__Seek* soap_new__tev__Seek(soap*, int num) allocate and default initialize an array
/// - _tev__Seek* soap_new_req__tev__Seek(soap*, ...) allocate, set required members
/// - _tev__Seek* soap_new_set__tev__Seek(soap*, ...) allocate, set all public members
/// - _tev__Seek::soap_default(soap*) default initialize members
/// - int soap_read__tev__Seek(soap*, _tev__Seek*) deserialize from a stream
/// - int soap_write__tev__Seek(soap*, _tev__Seek*) serialize to a stream
/// - _tev__Seek* _tev__Seek::soap_dup(soap*) returns deep copy of _tev__Seek, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__Seek::soap_del() deep deletes _tev__Seek data members, use only after _tev__Seek::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__Seek::soap_type() returns SOAP_TYPE__tev__Seek or derived type identifier
class _tev__Seek
{ public:
/// <PRE><BLOCKQUOTE>
///   The date and time to match against stored messages.
/// </BLOCKQUOTE></PRE>
///
/// Element "UtcTime" of type xs:dateTime.
    xsd__dateTime                        UtcTime                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reverse the pull direction of PullMessages.
/// </BLOCKQUOTE></PRE>
///
/// Element "Reverse" of type xs:boolean.
    bool*                                Reverse                        0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":SeekResponse
/// @brief "http://www.onvif.org/ver10/events/wsdl":SeekResponse is a complexType.
///
/// @note class _tev__SeekResponse operations:
/// - _tev__SeekResponse* soap_new__tev__SeekResponse(soap*) allocate and default initialize
/// - _tev__SeekResponse* soap_new__tev__SeekResponse(soap*, int num) allocate and default initialize an array
/// - _tev__SeekResponse* soap_new_req__tev__SeekResponse(soap*, ...) allocate, set required members
/// - _tev__SeekResponse* soap_new_set__tev__SeekResponse(soap*, ...) allocate, set all public members
/// - _tev__SeekResponse::soap_default(soap*) default initialize members
/// - int soap_read__tev__SeekResponse(soap*, _tev__SeekResponse*) deserialize from a stream
/// - int soap_write__tev__SeekResponse(soap*, _tev__SeekResponse*) serialize to a stream
/// - _tev__SeekResponse* _tev__SeekResponse::soap_dup(soap*) returns deep copy of _tev__SeekResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__SeekResponse::soap_del() deep deletes _tev__SeekResponse data members, use only after _tev__SeekResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__SeekResponse::soap_type() returns SOAP_TYPE__tev__SeekResponse or derived type identifier
class _tev__SeekResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPoint
/// @brief "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPoint is a complexType.
///
/// @note class _tev__SetSynchronizationPoint operations:
/// - _tev__SetSynchronizationPoint* soap_new__tev__SetSynchronizationPoint(soap*) allocate and default initialize
/// - _tev__SetSynchronizationPoint* soap_new__tev__SetSynchronizationPoint(soap*, int num) allocate and default initialize an array
/// - _tev__SetSynchronizationPoint* soap_new_req__tev__SetSynchronizationPoint(soap*, ...) allocate, set required members
/// - _tev__SetSynchronizationPoint* soap_new_set__tev__SetSynchronizationPoint(soap*, ...) allocate, set all public members
/// - _tev__SetSynchronizationPoint::soap_default(soap*) default initialize members
/// - int soap_read__tev__SetSynchronizationPoint(soap*, _tev__SetSynchronizationPoint*) deserialize from a stream
/// - int soap_write__tev__SetSynchronizationPoint(soap*, _tev__SetSynchronizationPoint*) serialize to a stream
/// - _tev__SetSynchronizationPoint* _tev__SetSynchronizationPoint::soap_dup(soap*) returns deep copy of _tev__SetSynchronizationPoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__SetSynchronizationPoint::soap_del() deep deletes _tev__SetSynchronizationPoint data members, use only after _tev__SetSynchronizationPoint::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__SetSynchronizationPoint::soap_type() returns SOAP_TYPE__tev__SetSynchronizationPoint or derived type identifier
class _tev__SetSynchronizationPoint
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPointResponse
/// @brief "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPointResponse is a complexType.
///
/// @note class _tev__SetSynchronizationPointResponse operations:
/// - _tev__SetSynchronizationPointResponse* soap_new__tev__SetSynchronizationPointResponse(soap*) allocate and default initialize
/// - _tev__SetSynchronizationPointResponse* soap_new__tev__SetSynchronizationPointResponse(soap*, int num) allocate and default initialize an array
/// - _tev__SetSynchronizationPointResponse* soap_new_req__tev__SetSynchronizationPointResponse(soap*, ...) allocate, set required members
/// - _tev__SetSynchronizationPointResponse* soap_new_set__tev__SetSynchronizationPointResponse(soap*, ...) allocate, set all public members
/// - _tev__SetSynchronizationPointResponse::soap_default(soap*) default initialize members
/// - int soap_read__tev__SetSynchronizationPointResponse(soap*, _tev__SetSynchronizationPointResponse*) deserialize from a stream
/// - int soap_write__tev__SetSynchronizationPointResponse(soap*, _tev__SetSynchronizationPointResponse*) serialize to a stream
/// - _tev__SetSynchronizationPointResponse* _tev__SetSynchronizationPointResponse::soap_dup(soap*) returns deep copy of _tev__SetSynchronizationPointResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__SetSynchronizationPointResponse::soap_del() deep deletes _tev__SetSynchronizationPointResponse data members, use only after _tev__SetSynchronizationPointResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__SetSynchronizationPointResponse::soap_type() returns SOAP_TYPE__tev__SetSynchronizationPointResponse or derived type identifier
class _tev__SetSynchronizationPointResponse
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetEventProperties
/// @brief "http://www.onvif.org/ver10/events/wsdl":GetEventProperties is a complexType.
///
/// @note class _tev__GetEventProperties operations:
/// - _tev__GetEventProperties* soap_new__tev__GetEventProperties(soap*) allocate and default initialize
/// - _tev__GetEventProperties* soap_new__tev__GetEventProperties(soap*, int num) allocate and default initialize an array
/// - _tev__GetEventProperties* soap_new_req__tev__GetEventProperties(soap*, ...) allocate, set required members
/// - _tev__GetEventProperties* soap_new_set__tev__GetEventProperties(soap*, ...) allocate, set all public members
/// - _tev__GetEventProperties::soap_default(soap*) default initialize members
/// - int soap_read__tev__GetEventProperties(soap*, _tev__GetEventProperties*) deserialize from a stream
/// - int soap_write__tev__GetEventProperties(soap*, _tev__GetEventProperties*) serialize to a stream
/// - _tev__GetEventProperties* _tev__GetEventProperties::soap_dup(soap*) returns deep copy of _tev__GetEventProperties, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__GetEventProperties::soap_del() deep deletes _tev__GetEventProperties data members, use only after _tev__GetEventProperties::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__GetEventProperties::soap_type() returns SOAP_TYPE__tev__GetEventProperties or derived type identifier
class _tev__GetEventProperties
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetEventPropertiesResponse
/// @brief "http://www.onvif.org/ver10/events/wsdl":GetEventPropertiesResponse is a complexType.
///
/// @note class _tev__GetEventPropertiesResponse operations:
/// - _tev__GetEventPropertiesResponse* soap_new__tev__GetEventPropertiesResponse(soap*) allocate and default initialize
/// - _tev__GetEventPropertiesResponse* soap_new__tev__GetEventPropertiesResponse(soap*, int num) allocate and default initialize an array
/// - _tev__GetEventPropertiesResponse* soap_new_req__tev__GetEventPropertiesResponse(soap*, ...) allocate, set required members
/// - _tev__GetEventPropertiesResponse* soap_new_set__tev__GetEventPropertiesResponse(soap*, ...) allocate, set all public members
/// - _tev__GetEventPropertiesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tev__GetEventPropertiesResponse(soap*, _tev__GetEventPropertiesResponse*) deserialize from a stream
/// - int soap_write__tev__GetEventPropertiesResponse(soap*, _tev__GetEventPropertiesResponse*) serialize to a stream
/// - _tev__GetEventPropertiesResponse* _tev__GetEventPropertiesResponse::soap_dup(soap*) returns deep copy of _tev__GetEventPropertiesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tev__GetEventPropertiesResponse::soap_del() deep deletes _tev__GetEventPropertiesResponse data members, use only after _tev__GetEventPropertiesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tev__GetEventPropertiesResponse::soap_type() returns SOAP_TYPE__tev__GetEventPropertiesResponse or derived type identifier
class _tev__GetEventPropertiesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   List of topic namespaces supported.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > TopicNamespaceLocation         1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   True when topicset is fixed for all times.
/// </BLOCKQUOTE></PRE>
///
/// Element reference "http://www.onvif.org/ver10/events/wsdl:""http://docs.oasis-open.org/wsn/b-2":FixedTopicSet.
    bool                                 wsnt__FixedTopicSet            1 = true;	///< Required element with default value="true".
/// <PRE><BLOCKQUOTE>
///   Set of topics supported.
/// </BLOCKQUOTE></PRE>
///
/// Element reference "http://www.onvif.org/ver10/events/wsdl:""http://docs.oasis-open.org/wsn/t-1":TopicSet.
    wstop__TopicSetType*                 wstop__TopicSet                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Defines the XPath expression syntax supported for matching topic expressions. <br/>
///   The following TopicExpressionDialects are mandatory for an ONVIF compliant device :
///   <ul type="disc">
///   <li>http://docs.oasis-open.org/wsn/t-1/TopicExpression/Concrete</li>
///   <li>http://www.onvif.org/ver10/tev/topicExpression/ConcreteSet.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI element refs of length 1..unbounded.
    std::vector<xsd__anyURI            > wsnt__TopicExpressionDialect   1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Defines the XPath function set supported for message content filtering.<br/> The following MessageContentFilterDialects should be returned if a device supports the message content filtering:
///   <ul type="disc">
///   <li>http://www.onvif.org/ver10/tev/messageContentFilter/ItemFilter.</li>
///   </ul>
///   A device that does not support any MessageContentFilterDialect returns a single empty url.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > MessageContentFilterDialect    1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Optional ProducerPropertiesDialects. Refer to <a href="http://docs.oasis-open.org/wsn/wsn-ws_base_notification-1.3-spec-os.htm">Web Services Base Notification 1.3 (WS-BaseNotification)</a> for advanced filtering.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > ProducerPropertiesFilterDialect 0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The Message Content Description Language allows referencing
///   of vendor-specific types. In order to ease the integration of such types into a client application,
///   the GetEventPropertiesResponse shall list all URI locations to schema files whose types are
///   used in the description of notifications, with MessageContentSchemaLocation elements.<br/> This list shall at least contain the URI of the ONVIF schema file.
/// </BLOCKQUOTE></PRE>
///
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > MessageContentSchemaLocation   1;	///< Multiple elements.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":HelloType is a complexType.
///
/// @note class wsd__HelloType operations:
/// - wsd__HelloType* soap_new_wsd__HelloType(soap*) allocate and default initialize
/// - wsd__HelloType* soap_new_wsd__HelloType(soap*, int num) allocate and default initialize an array
/// - wsd__HelloType* soap_new_req_wsd__HelloType(soap*, ...) allocate, set required members
/// - wsd__HelloType* soap_new_set_wsd__HelloType(soap*, ...) allocate, set all public members
/// - wsd__HelloType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__HelloType(soap*, wsd__HelloType*) deserialize from a stream
/// - int soap_write_wsd__HelloType(soap*, wsd__HelloType*) serialize to a stream
/// - wsd__HelloType* wsd__HelloType::soap_dup(soap*) returns deep copy of wsd__HelloType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__HelloType::soap_del() deep deletes wsd__HelloType data members, use only after wsd__HelloType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__HelloType::soap_type() returns SOAP_TYPE_wsd__HelloType or derived type identifier
class wsd__HelloType : public xsd__anyType
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    wsa__EndpointReferenceType*          wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    wsd__QNameListType*                  Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    wsd__ScopesType*                     Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType*                    XAddrs                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int                         MetadataVersion                1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ByeType is a complexType.
///
/// @note class wsd__ByeType operations:
/// - wsd__ByeType* soap_new_wsd__ByeType(soap*) allocate and default initialize
/// - wsd__ByeType* soap_new_wsd__ByeType(soap*, int num) allocate and default initialize an array
/// - wsd__ByeType* soap_new_req_wsd__ByeType(soap*, ...) allocate, set required members
/// - wsd__ByeType* soap_new_set_wsd__ByeType(soap*, ...) allocate, set all public members
/// - wsd__ByeType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ByeType(soap*, wsd__ByeType*) deserialize from a stream
/// - int soap_write_wsd__ByeType(soap*, wsd__ByeType*) serialize to a stream
/// - wsd__ByeType* wsd__ByeType::soap_dup(soap*) returns deep copy of wsd__ByeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ByeType::soap_del() deep deletes wsd__ByeType data members, use only after wsd__ByeType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ByeType::soap_type() returns SOAP_TYPE_wsd__ByeType or derived type identifier
class wsd__ByeType : public xsd__anyType
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    wsa__EndpointReferenceType*          wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    wsd__QNameListType*                  Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    wsd__ScopesType*                     Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType*                    XAddrs                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int*                        MetadataVersion                0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeType is a complexType.
///
/// @note class wsd__ProbeType operations:
/// - wsd__ProbeType* soap_new_wsd__ProbeType(soap*) allocate and default initialize
/// - wsd__ProbeType* soap_new_wsd__ProbeType(soap*, int num) allocate and default initialize an array
/// - wsd__ProbeType* soap_new_req_wsd__ProbeType(soap*, ...) allocate, set required members
/// - wsd__ProbeType* soap_new_set_wsd__ProbeType(soap*, ...) allocate, set all public members
/// - wsd__ProbeType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ProbeType(soap*, wsd__ProbeType*) deserialize from a stream
/// - int soap_write_wsd__ProbeType(soap*, wsd__ProbeType*) serialize to a stream
/// - wsd__ProbeType* wsd__ProbeType::soap_dup(soap*) returns deep copy of wsd__ProbeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ProbeType::soap_del() deep deletes wsd__ProbeType data members, use only after wsd__ProbeType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ProbeType::soap_type() returns SOAP_TYPE_wsd__ProbeType or derived type identifier
class wsd__ProbeType : public xsd__anyType
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    wsd__QNameListType*                  Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    wsd__ScopesType*                     Scopes                         0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatchesType is a complexType.
///
/// @note class wsd__ProbeMatchesType operations:
/// - wsd__ProbeMatchesType* soap_new_wsd__ProbeMatchesType(soap*) allocate and default initialize
/// - wsd__ProbeMatchesType* soap_new_wsd__ProbeMatchesType(soap*, int num) allocate and default initialize an array
/// - wsd__ProbeMatchesType* soap_new_req_wsd__ProbeMatchesType(soap*, ...) allocate, set required members
/// - wsd__ProbeMatchesType* soap_new_set_wsd__ProbeMatchesType(soap*, ...) allocate, set all public members
/// - wsd__ProbeMatchesType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ProbeMatchesType(soap*, wsd__ProbeMatchesType*) deserialize from a stream
/// - int soap_write_wsd__ProbeMatchesType(soap*, wsd__ProbeMatchesType*) serialize to a stream
/// - wsd__ProbeMatchesType* wsd__ProbeMatchesType::soap_dup(soap*) returns deep copy of wsd__ProbeMatchesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ProbeMatchesType::soap_del() deep deletes wsd__ProbeMatchesType data members, use only after wsd__ProbeMatchesType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ProbeMatchesType::soap_type() returns SOAP_TYPE_wsd__ProbeMatchesType or derived type identifier
class wsd__ProbeMatchesType : public xsd__anyType
{ public:
/// Vector of wsd__ProbeMatchType* of length 0..unbounded.
    std::vector<wsd__ProbeMatchType*   > ProbeMatch                     0;	///< Multiple elements.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatchType is a complexType.
///
/// @note class wsd__ProbeMatchType operations:
/// - wsd__ProbeMatchType* soap_new_wsd__ProbeMatchType(soap*) allocate and default initialize
/// - wsd__ProbeMatchType* soap_new_wsd__ProbeMatchType(soap*, int num) allocate and default initialize an array
/// - wsd__ProbeMatchType* soap_new_req_wsd__ProbeMatchType(soap*, ...) allocate, set required members
/// - wsd__ProbeMatchType* soap_new_set_wsd__ProbeMatchType(soap*, ...) allocate, set all public members
/// - wsd__ProbeMatchType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ProbeMatchType(soap*, wsd__ProbeMatchType*) deserialize from a stream
/// - int soap_write_wsd__ProbeMatchType(soap*, wsd__ProbeMatchType*) serialize to a stream
/// - wsd__ProbeMatchType* wsd__ProbeMatchType::soap_dup(soap*) returns deep copy of wsd__ProbeMatchType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ProbeMatchType::soap_del() deep deletes wsd__ProbeMatchType data members, use only after wsd__ProbeMatchType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ProbeMatchType::soap_type() returns SOAP_TYPE_wsd__ProbeMatchType or derived type identifier
class wsd__ProbeMatchType : public xsd__anyType
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    wsa__EndpointReferenceType*          wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    wsd__QNameListType*                  Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    wsd__ScopesType*                     Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType*                    XAddrs                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int                         MetadataVersion                1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveType is a complexType.
///
/// @note class wsd__ResolveType operations:
/// - wsd__ResolveType* soap_new_wsd__ResolveType(soap*) allocate and default initialize
/// - wsd__ResolveType* soap_new_wsd__ResolveType(soap*, int num) allocate and default initialize an array
/// - wsd__ResolveType* soap_new_req_wsd__ResolveType(soap*, ...) allocate, set required members
/// - wsd__ResolveType* soap_new_set_wsd__ResolveType(soap*, ...) allocate, set all public members
/// - wsd__ResolveType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ResolveType(soap*, wsd__ResolveType*) deserialize from a stream
/// - int soap_write_wsd__ResolveType(soap*, wsd__ResolveType*) serialize to a stream
/// - wsd__ResolveType* wsd__ResolveType::soap_dup(soap*) returns deep copy of wsd__ResolveType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ResolveType::soap_del() deep deletes wsd__ResolveType data members, use only after wsd__ResolveType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ResolveType::soap_type() returns SOAP_TYPE_wsd__ResolveType or derived type identifier
class wsd__ResolveType : public xsd__anyType
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    wsa__EndpointReferenceType*          wsa__EndpointReference         1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchesType is a complexType.
///
/// @note class wsd__ResolveMatchesType operations:
/// - wsd__ResolveMatchesType* soap_new_wsd__ResolveMatchesType(soap*) allocate and default initialize
/// - wsd__ResolveMatchesType* soap_new_wsd__ResolveMatchesType(soap*, int num) allocate and default initialize an array
/// - wsd__ResolveMatchesType* soap_new_req_wsd__ResolveMatchesType(soap*, ...) allocate, set required members
/// - wsd__ResolveMatchesType* soap_new_set_wsd__ResolveMatchesType(soap*, ...) allocate, set all public members
/// - wsd__ResolveMatchesType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ResolveMatchesType(soap*, wsd__ResolveMatchesType*) deserialize from a stream
/// - int soap_write_wsd__ResolveMatchesType(soap*, wsd__ResolveMatchesType*) serialize to a stream
/// - wsd__ResolveMatchesType* wsd__ResolveMatchesType::soap_dup(soap*) returns deep copy of wsd__ResolveMatchesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ResolveMatchesType::soap_del() deep deletes wsd__ResolveMatchesType data members, use only after wsd__ResolveMatchesType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ResolveMatchesType::soap_type() returns SOAP_TYPE_wsd__ResolveMatchesType or derived type identifier
class wsd__ResolveMatchesType : public xsd__anyType
{ public:
/// Element "ResolveMatch" of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchType.
    wsd__ResolveMatchType*               ResolveMatch                   0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchType is a complexType.
///
/// @note class wsd__ResolveMatchType operations:
/// - wsd__ResolveMatchType* soap_new_wsd__ResolveMatchType(soap*) allocate and default initialize
/// - wsd__ResolveMatchType* soap_new_wsd__ResolveMatchType(soap*, int num) allocate and default initialize an array
/// - wsd__ResolveMatchType* soap_new_req_wsd__ResolveMatchType(soap*, ...) allocate, set required members
/// - wsd__ResolveMatchType* soap_new_set_wsd__ResolveMatchType(soap*, ...) allocate, set all public members
/// - wsd__ResolveMatchType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ResolveMatchType(soap*, wsd__ResolveMatchType*) deserialize from a stream
/// - int soap_write_wsd__ResolveMatchType(soap*, wsd__ResolveMatchType*) serialize to a stream
/// - wsd__ResolveMatchType* wsd__ResolveMatchType::soap_dup(soap*) returns deep copy of wsd__ResolveMatchType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ResolveMatchType::soap_del() deep deletes wsd__ResolveMatchType data members, use only after wsd__ResolveMatchType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ResolveMatchType::soap_type() returns SOAP_TYPE_wsd__ResolveMatchType or derived type identifier
class wsd__ResolveMatchType : public xsd__anyType
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    wsa__EndpointReferenceType*          wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    wsd__QNameListType*                  Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    wsd__ScopesType*                     Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType                     XAddrs                         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int                         MetadataVersion                1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":SecurityType is a complexType.
///
/// @note class wsd__SecurityType operations:
/// - wsd__SecurityType* soap_new_wsd__SecurityType(soap*) allocate and default initialize
/// - wsd__SecurityType* soap_new_wsd__SecurityType(soap*, int num) allocate and default initialize an array
/// - wsd__SecurityType* soap_new_req_wsd__SecurityType(soap*, ...) allocate, set required members
/// - wsd__SecurityType* soap_new_set_wsd__SecurityType(soap*, ...) allocate, set all public members
/// - wsd__SecurityType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__SecurityType(soap*, wsd__SecurityType*) deserialize from a stream
/// - int soap_write_wsd__SecurityType(soap*, wsd__SecurityType*) serialize to a stream
/// - wsd__SecurityType* wsd__SecurityType::soap_dup(soap*) returns deep copy of wsd__SecurityType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__SecurityType::soap_del() deep deletes wsd__SecurityType data members, use only after wsd__SecurityType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__SecurityType::soap_type() returns SOAP_TYPE_wsd__SecurityType or derived type identifier
class wsd__SecurityType : public xsd__anyType
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery:""http://schemas.xmlsoap.org/ws/2005/04/discovery":Sig.
    wsd__SigType*                        Sig                            0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":SigType is a complexType.
///
/// @note class wsd__SigType operations:
/// - wsd__SigType* soap_new_wsd__SigType(soap*) allocate and default initialize
/// - wsd__SigType* soap_new_wsd__SigType(soap*, int num) allocate and default initialize an array
/// - wsd__SigType* soap_new_req_wsd__SigType(soap*, ...) allocate, set required members
/// - wsd__SigType* soap_new_set_wsd__SigType(soap*, ...) allocate, set all public members
/// - wsd__SigType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__SigType(soap*, wsd__SigType*) deserialize from a stream
/// - int soap_write_wsd__SigType(soap*, wsd__SigType*) serialize to a stream
/// - wsd__SigType* wsd__SigType::soap_dup(soap*) returns deep copy of wsd__SigType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__SigType::soap_del() deep deletes wsd__SigType data members, use only after wsd__SigType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__SigType::soap_type() returns SOAP_TYPE_wsd__SigType or derived type identifier
class wsd__SigType : public xsd__anyType
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "Scheme" of type xs:anyURI.
  @ xsd__anyURI                          Scheme                         1;	///< Required attribute.
/// Attribute "KeyId" of type xs:base64Binary.
  @ xsd__base64Binary*                   KeyId                          0;	///< Optional attribute.
/// Attribute "Refs" of type xs:IDREFS.
  @ xsd__IDREFS                          Refs                           1;	///< Required attribute.
/// Attribute "Sig" of type xs:base64Binary.
  @ xsd__base64Binary                    Sig                            1;	///< Required attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType is a complexType.
///
/// @note class wsa__EndpointReferenceType operations:
/// - wsa__EndpointReferenceType* soap_new_wsa__EndpointReferenceType(soap*) allocate and default initialize
/// - wsa__EndpointReferenceType* soap_new_wsa__EndpointReferenceType(soap*, int num) allocate and default initialize an array
/// - wsa__EndpointReferenceType* soap_new_req_wsa__EndpointReferenceType(soap*, ...) allocate, set required members
/// - wsa__EndpointReferenceType* soap_new_set_wsa__EndpointReferenceType(soap*, ...) allocate, set all public members
/// - wsa__EndpointReferenceType::soap_default(soap*) default initialize members
/// - int soap_read_wsa__EndpointReferenceType(soap*, wsa__EndpointReferenceType*) deserialize from a stream
/// - int soap_write_wsa__EndpointReferenceType(soap*, wsa__EndpointReferenceType*) serialize to a stream
/// - wsa__EndpointReferenceType* wsa__EndpointReferenceType::soap_dup(soap*) returns deep copy of wsa__EndpointReferenceType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__EndpointReferenceType::soap_del() deep deletes wsa__EndpointReferenceType data members, use only after wsa__EndpointReferenceType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__EndpointReferenceType::soap_type() returns SOAP_TYPE_wsa__EndpointReferenceType or derived type identifier
class wsa__EndpointReferenceType : public xsd__anyType
{ public:
/// Element "Address" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
    wsa__AttributedURI*                  Address                        1;	///< Required element.
/// Element "ReferenceProperties" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferencePropertiesType.
    wsa__ReferencePropertiesType*        ReferenceProperties            0;	///< Optional element.
/// Element "ReferenceParameters" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferenceParametersType.
    wsa__ReferenceParametersType*        ReferenceParameters            0;	///< Optional element.
/// Element "PortType" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedQName.
    wsa__AttributedQName*                PortType                       0;	///< Optional element.
/// Element "ServiceName" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ServiceNameType.
    wsa__ServiceNameType*                ServiceName                    0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferencePropertiesType is a complexType.
///
/// @note class wsa__ReferencePropertiesType operations:
/// - wsa__ReferencePropertiesType* soap_new_wsa__ReferencePropertiesType(soap*) allocate and default initialize
/// - wsa__ReferencePropertiesType* soap_new_wsa__ReferencePropertiesType(soap*, int num) allocate and default initialize an array
/// - wsa__ReferencePropertiesType* soap_new_req_wsa__ReferencePropertiesType(soap*, ...) allocate, set required members
/// - wsa__ReferencePropertiesType* soap_new_set_wsa__ReferencePropertiesType(soap*, ...) allocate, set all public members
/// - wsa__ReferencePropertiesType::soap_default(soap*) default initialize members
/// - int soap_read_wsa__ReferencePropertiesType(soap*, wsa__ReferencePropertiesType*) deserialize from a stream
/// - int soap_write_wsa__ReferencePropertiesType(soap*, wsa__ReferencePropertiesType*) serialize to a stream
/// - wsa__ReferencePropertiesType* wsa__ReferencePropertiesType::soap_dup(soap*) returns deep copy of wsa__ReferencePropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__ReferencePropertiesType::soap_del() deep deletes wsa__ReferencePropertiesType data members, use only after wsa__ReferencePropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__ReferencePropertiesType::soap_type() returns SOAP_TYPE_wsa__ReferencePropertiesType or derived type identifier
class wsa__ReferencePropertiesType : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferenceParametersType is a complexType.
///
/// @note class wsa__ReferenceParametersType operations:
/// - wsa__ReferenceParametersType* soap_new_wsa__ReferenceParametersType(soap*) allocate and default initialize
/// - wsa__ReferenceParametersType* soap_new_wsa__ReferenceParametersType(soap*, int num) allocate and default initialize an array
/// - wsa__ReferenceParametersType* soap_new_req_wsa__ReferenceParametersType(soap*, ...) allocate, set required members
/// - wsa__ReferenceParametersType* soap_new_set_wsa__ReferenceParametersType(soap*, ...) allocate, set all public members
/// - wsa__ReferenceParametersType::soap_default(soap*) default initialize members
/// - int soap_read_wsa__ReferenceParametersType(soap*, wsa__ReferenceParametersType*) deserialize from a stream
/// - int soap_write_wsa__ReferenceParametersType(soap*, wsa__ReferenceParametersType*) serialize to a stream
/// - wsa__ReferenceParametersType* wsa__ReferenceParametersType::soap_dup(soap*) returns deep copy of wsa__ReferenceParametersType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__ReferenceParametersType::soap_del() deep deletes wsa__ReferenceParametersType data members, use only after wsa__ReferenceParametersType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__ReferenceParametersType::soap_type() returns SOAP_TYPE_wsa__ReferenceParametersType or derived type identifier
class wsa__ReferenceParametersType : public xsd__anyType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":AccessControl is a complexType.
///
/// @note class tmk__AccessControl operations:
/// - tmk__AccessControl* soap_new_tmk__AccessControl(soap*) allocate and default initialize
/// - tmk__AccessControl* soap_new_tmk__AccessControl(soap*, int num) allocate and default initialize an array
/// - tmk__AccessControl* soap_new_req_tmk__AccessControl(soap*, ...) allocate, set required members
/// - tmk__AccessControl* soap_new_set_tmk__AccessControl(soap*, ...) allocate, set all public members
/// - tmk__AccessControl::soap_default(soap*) default initialize members
/// - int soap_read_tmk__AccessControl(soap*, tmk__AccessControl*) deserialize from a stream
/// - int soap_write_tmk__AccessControl(soap*, tmk__AccessControl*) serialize to a stream
/// - tmk__AccessControl* tmk__AccessControl::soap_dup(soap*) returns deep copy of tmk__AccessControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__AccessControl::soap_del() deep deletes tmk__AccessControl data members, use only after tmk__AccessControl::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__AccessControl::soap_type() returns SOAP_TYPE_tmk__AccessControl or derived type identifier
class tmk__AccessControl : public xsd__anyType
{ public:
/// Element "Accident" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Accident                       1;	///< Required element.
/// Element "Fault" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Fault                          1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":FireAlarm is a complexType.
///
/// @note class tmk__FireAlarm operations:
/// - tmk__FireAlarm* soap_new_tmk__FireAlarm(soap*) allocate and default initialize
/// - tmk__FireAlarm* soap_new_tmk__FireAlarm(soap*, int num) allocate and default initialize an array
/// - tmk__FireAlarm* soap_new_req_tmk__FireAlarm(soap*, ...) allocate, set required members
/// - tmk__FireAlarm* soap_new_set_tmk__FireAlarm(soap*, ...) allocate, set all public members
/// - tmk__FireAlarm::soap_default(soap*) default initialize members
/// - int soap_read_tmk__FireAlarm(soap*, tmk__FireAlarm*) deserialize from a stream
/// - int soap_write_tmk__FireAlarm(soap*, tmk__FireAlarm*) serialize to a stream
/// - tmk__FireAlarm* tmk__FireAlarm::soap_dup(soap*) returns deep copy of tmk__FireAlarm, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__FireAlarm::soap_del() deep deletes tmk__FireAlarm data members, use only after tmk__FireAlarm::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__FireAlarm::soap_type() returns SOAP_TYPE_tmk__FireAlarm or derived type identifier
class tmk__FireAlarm : public xsd__anyType
{ public:
/// Element "Alarm" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Alarm                          1;	///< Required element.
/// Element "Fire" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Fire                           1;	///< Required element.
/// Element "Fault" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Fault                          1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":GasAnalysis is a complexType.
///
/// @note class tmk__GasAnalysis operations:
/// - tmk__GasAnalysis* soap_new_tmk__GasAnalysis(soap*) allocate and default initialize
/// - tmk__GasAnalysis* soap_new_tmk__GasAnalysis(soap*, int num) allocate and default initialize an array
/// - tmk__GasAnalysis* soap_new_req_tmk__GasAnalysis(soap*, ...) allocate, set required members
/// - tmk__GasAnalysis* soap_new_set_tmk__GasAnalysis(soap*, ...) allocate, set all public members
/// - tmk__GasAnalysis::soap_default(soap*) default initialize members
/// - int soap_read_tmk__GasAnalysis(soap*, tmk__GasAnalysis*) deserialize from a stream
/// - int soap_write_tmk__GasAnalysis(soap*, tmk__GasAnalysis*) serialize to a stream
/// - tmk__GasAnalysis* tmk__GasAnalysis::soap_dup(soap*) returns deep copy of tmk__GasAnalysis, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__GasAnalysis::soap_del() deep deletes tmk__GasAnalysis data members, use only after tmk__GasAnalysis::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__GasAnalysis::soap_type() returns SOAP_TYPE_tmk__GasAnalysis or derived type identifier
class tmk__GasAnalysis : public xsd__anyType
{ public:
/// Element "ConcentrationExceeded" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              ConcentrationExceeded          1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":Introscopy is a complexType.
///
/// @note class tmk__Introscopy operations:
/// - tmk__Introscopy* soap_new_tmk__Introscopy(soap*) allocate and default initialize
/// - tmk__Introscopy* soap_new_tmk__Introscopy(soap*, int num) allocate and default initialize an array
/// - tmk__Introscopy* soap_new_req_tmk__Introscopy(soap*, ...) allocate, set required members
/// - tmk__Introscopy* soap_new_set_tmk__Introscopy(soap*, ...) allocate, set all public members
/// - tmk__Introscopy::soap_default(soap*) default initialize members
/// - int soap_read_tmk__Introscopy(soap*, tmk__Introscopy*) deserialize from a stream
/// - int soap_write_tmk__Introscopy(soap*, tmk__Introscopy*) serialize to a stream
/// - tmk__Introscopy* tmk__Introscopy::soap_dup(soap*) returns deep copy of tmk__Introscopy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__Introscopy::soap_del() deep deletes tmk__Introscopy data members, use only after tmk__Introscopy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__Introscopy::soap_type() returns SOAP_TYPE_tmk__Introscopy or derived type identifier
class tmk__Introscopy : public xsd__anyType
{ public:
/// Element "LimitExceeded" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              LimitExceeded                  1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":NeutronProbing is a complexType.
///
/// @note class tmk__NeutronProbing operations:
/// - tmk__NeutronProbing* soap_new_tmk__NeutronProbing(soap*) allocate and default initialize
/// - tmk__NeutronProbing* soap_new_tmk__NeutronProbing(soap*, int num) allocate and default initialize an array
/// - tmk__NeutronProbing* soap_new_req_tmk__NeutronProbing(soap*, ...) allocate, set required members
/// - tmk__NeutronProbing* soap_new_set_tmk__NeutronProbing(soap*, ...) allocate, set all public members
/// - tmk__NeutronProbing::soap_default(soap*) default initialize members
/// - int soap_read_tmk__NeutronProbing(soap*, tmk__NeutronProbing*) deserialize from a stream
/// - int soap_write_tmk__NeutronProbing(soap*, tmk__NeutronProbing*) serialize to a stream
/// - tmk__NeutronProbing* tmk__NeutronProbing::soap_dup(soap*) returns deep copy of tmk__NeutronProbing, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__NeutronProbing::soap_del() deep deletes tmk__NeutronProbing data members, use only after tmk__NeutronProbing::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__NeutronProbing::soap_type() returns SOAP_TYPE_tmk__NeutronProbing or derived type identifier
class tmk__NeutronProbing : public xsd__anyType
{ public:
/// Element "Detect" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Detect                         1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":RadiationMonitoring is a complexType.
///
/// @note class tmk__RadiationMonitoring operations:
/// - tmk__RadiationMonitoring* soap_new_tmk__RadiationMonitoring(soap*) allocate and default initialize
/// - tmk__RadiationMonitoring* soap_new_tmk__RadiationMonitoring(soap*, int num) allocate and default initialize an array
/// - tmk__RadiationMonitoring* soap_new_req_tmk__RadiationMonitoring(soap*, ...) allocate, set required members
/// - tmk__RadiationMonitoring* soap_new_set_tmk__RadiationMonitoring(soap*, ...) allocate, set all public members
/// - tmk__RadiationMonitoring::soap_default(soap*) default initialize members
/// - int soap_read_tmk__RadiationMonitoring(soap*, tmk__RadiationMonitoring*) deserialize from a stream
/// - int soap_write_tmk__RadiationMonitoring(soap*, tmk__RadiationMonitoring*) serialize to a stream
/// - tmk__RadiationMonitoring* tmk__RadiationMonitoring::soap_dup(soap*) returns deep copy of tmk__RadiationMonitoring, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__RadiationMonitoring::soap_del() deep deletes tmk__RadiationMonitoring data members, use only after tmk__RadiationMonitoring::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__RadiationMonitoring::soap_type() returns SOAP_TYPE_tmk__RadiationMonitoring or derived type identifier
class tmk__RadiationMonitoring : public xsd__anyType
{ public:
/// Element "Detect" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Detect                         1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":SteamDetector is a complexType.
///
/// @note class tmk__SteamDetector operations:
/// - tmk__SteamDetector* soap_new_tmk__SteamDetector(soap*) allocate and default initialize
/// - tmk__SteamDetector* soap_new_tmk__SteamDetector(soap*, int num) allocate and default initialize an array
/// - tmk__SteamDetector* soap_new_req_tmk__SteamDetector(soap*, ...) allocate, set required members
/// - tmk__SteamDetector* soap_new_set_tmk__SteamDetector(soap*, ...) allocate, set all public members
/// - tmk__SteamDetector::soap_default(soap*) default initialize members
/// - int soap_read_tmk__SteamDetector(soap*, tmk__SteamDetector*) deserialize from a stream
/// - int soap_write_tmk__SteamDetector(soap*, tmk__SteamDetector*) serialize to a stream
/// - tmk__SteamDetector* tmk__SteamDetector::soap_dup(soap*) returns deep copy of tmk__SteamDetector, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__SteamDetector::soap_del() deep deletes tmk__SteamDetector data members, use only after tmk__SteamDetector::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__SteamDetector::soap_type() returns SOAP_TYPE_tmk__SteamDetector or derived type identifier
class tmk__SteamDetector : public xsd__anyType
{ public:
/// Element "Detect" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Detect                         1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":MetalDetector is a complexType.
///
/// @note class tmk__MetalDetector operations:
/// - tmk__MetalDetector* soap_new_tmk__MetalDetector(soap*) allocate and default initialize
/// - tmk__MetalDetector* soap_new_tmk__MetalDetector(soap*, int num) allocate and default initialize an array
/// - tmk__MetalDetector* soap_new_req_tmk__MetalDetector(soap*, ...) allocate, set required members
/// - tmk__MetalDetector* soap_new_set_tmk__MetalDetector(soap*, ...) allocate, set all public members
/// - tmk__MetalDetector::soap_default(soap*) default initialize members
/// - int soap_read_tmk__MetalDetector(soap*, tmk__MetalDetector*) deserialize from a stream
/// - int soap_write_tmk__MetalDetector(soap*, tmk__MetalDetector*) serialize to a stream
/// - tmk__MetalDetector* tmk__MetalDetector::soap_dup(soap*) returns deep copy of tmk__MetalDetector, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__MetalDetector::soap_del() deep deletes tmk__MetalDetector data members, use only after tmk__MetalDetector::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__MetalDetector::soap_type() returns SOAP_TYPE_tmk__MetalDetector or derived type identifier
class tmk__MetalDetector : public xsd__anyType
{ public:
/// Element "Detect" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Detect                         1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors":VideoSurveillanceSystem is a complexType.
///
/// @note class tmk__VideoSurveillanceSystem operations:
/// - tmk__VideoSurveillanceSystem* soap_new_tmk__VideoSurveillanceSystem(soap*) allocate and default initialize
/// - tmk__VideoSurveillanceSystem* soap_new_tmk__VideoSurveillanceSystem(soap*, int num) allocate and default initialize an array
/// - tmk__VideoSurveillanceSystem* soap_new_req_tmk__VideoSurveillanceSystem(soap*, ...) allocate, set required members
/// - tmk__VideoSurveillanceSystem* soap_new_set_tmk__VideoSurveillanceSystem(soap*, ...) allocate, set all public members
/// - tmk__VideoSurveillanceSystem::soap_default(soap*) default initialize members
/// - int soap_read_tmk__VideoSurveillanceSystem(soap*, tmk__VideoSurveillanceSystem*) deserialize from a stream
/// - int soap_write_tmk__VideoSurveillanceSystem(soap*, tmk__VideoSurveillanceSystem*) serialize to a stream
/// - tmk__VideoSurveillanceSystem* tmk__VideoSurveillanceSystem::soap_dup(soap*) returns deep copy of tmk__VideoSurveillanceSystem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tmk__VideoSurveillanceSystem::soap_del() deep deletes tmk__VideoSurveillanceSystem data members, use only after tmk__VideoSurveillanceSystem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tmk__VideoSurveillanceSystem::soap_type() returns SOAP_TYPE_tmk__VideoSurveillanceSystem or derived type identifier
class tmk__VideoSurveillanceSystem : public xsd__anyType
{ public:
/// Element "ChannelDisconnect" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              ChannelDisconnect              1;	///< Required element.
/// Element "ChannelConnect" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              ChannelConnect                 1;	///< Required element.
/// Element "RecordTurnOff" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              RecordTurnOff                  1;	///< Required element.
/// Element "RecordTurnOn" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              RecordTurnOn                   1;	///< Required element.
/// Element "MotionDetectorTrigger" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              MotionDetectorTrigger          1;	///< Required element.
/// Element "ReadRecordRequest" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              ReadRecordRequest              1;	///< Required element.
/// Element "DeleteRecordRequest" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              DeleteRecordRequest            1;	///< Required element.
/// Element "EditDbRecordRequest" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              EditDbRecordRequest            1;	///< Required element.
/// Element "CopyDbRecordRequest" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              CopyDbRecordRequest            1;	///< Required element.
/// Element "Authorization" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              Authorization                  1;	///< Required element.
/// Element "ServerPowerOn" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              ServerPowerOn                  1;	///< Required element.
/// Element "ServerPowerOff" of type "http://www.onvif.org/ver10/schema":MessageDescription.
    tt__MessageDescription*              ServerPowerOff                 1;	///< Required element.
/// Attribute "topic" of type xs:boolean.
  @ bool                                 topic                          1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":StorageConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// @note class tds__StorageConfiguration operations:
/// - tds__StorageConfiguration* soap_new_tds__StorageConfiguration(soap*) allocate and default initialize
/// - tds__StorageConfiguration* soap_new_tds__StorageConfiguration(soap*, int num) allocate and default initialize an array
/// - tds__StorageConfiguration* soap_new_req_tds__StorageConfiguration(soap*, ...) allocate, set required members
/// - tds__StorageConfiguration* soap_new_set_tds__StorageConfiguration(soap*, ...) allocate, set all public members
/// - tds__StorageConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tds__StorageConfiguration(soap*, tds__StorageConfiguration*) deserialize from a stream
/// - int soap_write_tds__StorageConfiguration(soap*, tds__StorageConfiguration*) serialize to a stream
/// - tds__StorageConfiguration* tds__StorageConfiguration::soap_dup(soap*) returns deep copy of tds__StorageConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tds__StorageConfiguration::soap_del() deep deletes tds__StorageConfiguration data members, use only after tds__StorageConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tds__StorageConfiguration::soap_type() returns SOAP_TYPE_tds__StorageConfiguration or derived type identifier
class tds__StorageConfiguration : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// Element "Data" of type "http://www.onvif.org/ver10/device/wsdl":StorageConfigurationData.
    tds__StorageConfigurationData*       Data                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSource is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical video input.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__VideoSource operations:
/// - tt__VideoSource* soap_new_tt__VideoSource(soap*) allocate and default initialize
/// - tt__VideoSource* soap_new_tt__VideoSource(soap*, int num) allocate and default initialize an array
/// - tt__VideoSource* soap_new_req_tt__VideoSource(soap*, ...) allocate, set required members
/// - tt__VideoSource* soap_new_set_tt__VideoSource(soap*, ...) allocate, set all public members
/// - tt__VideoSource::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSource(soap*, tt__VideoSource*) deserialize from a stream
/// - int soap_write_tt__VideoSource(soap*, tt__VideoSource*) serialize to a stream
/// - tt__VideoSource* tt__VideoSource::soap_dup(soap*) returns deep copy of tt__VideoSource, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSource::soap_del() deep deletes tt__VideoSource data members, use only after tt__VideoSource::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSource::soap_type() returns SOAP_TYPE_tt__VideoSource or derived type identifier
class tt__VideoSource : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   Frame rate in frames per second.
/// </BLOCKQUOTE></PRE>
///
/// Element "Framerate" of type xs:float.
    float                                Framerate                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Horizontal and vertical resolution
/// </BLOCKQUOTE></PRE>
///
/// Element "Resolution" of type "http://www.onvif.org/ver10/schema":VideoResolution.
    tt__VideoResolution*                 Resolution                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the image sensor.
/// </BLOCKQUOTE></PRE>
///
/// Element "Imaging" of type "http://www.onvif.org/ver10/schema":ImagingSettings.
    tt__ImagingSettings*                 Imaging                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceExtension.
    tt__VideoSourceExtension*            Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSource is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical audio input.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__AudioSource operations:
/// - tt__AudioSource* soap_new_tt__AudioSource(soap*) allocate and default initialize
/// - tt__AudioSource* soap_new_tt__AudioSource(soap*, int num) allocate and default initialize an array
/// - tt__AudioSource* soap_new_req_tt__AudioSource(soap*, ...) allocate, set required members
/// - tt__AudioSource* soap_new_set_tt__AudioSource(soap*, ...) allocate, set all public members
/// - tt__AudioSource::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioSource(soap*, tt__AudioSource*) deserialize from a stream
/// - int soap_write_tt__AudioSource(soap*, tt__AudioSource*) serialize to a stream
/// - tt__AudioSource* tt__AudioSource::soap_dup(soap*) returns deep copy of tt__AudioSource, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioSource::soap_del() deep deletes tt__AudioSource data members, use only after tt__AudioSource::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioSource::soap_type() returns SOAP_TYPE_tt__AudioSource or derived type identifier
class tt__AudioSource : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   number of available audio channels. (1: mono, 2: stereo)
/// </BLOCKQUOTE></PRE>
///
/// Element "Channels" of type xs:int.
    int                                  Channels                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__VideoSourceConfiguration operations:
/// - tt__VideoSourceConfiguration* soap_new_tt__VideoSourceConfiguration(soap*) allocate and default initialize
/// - tt__VideoSourceConfiguration* soap_new_tt__VideoSourceConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfiguration* soap_new_req_tt__VideoSourceConfiguration(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfiguration* soap_new_set_tt__VideoSourceConfiguration(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfiguration(soap*, tt__VideoSourceConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfiguration(soap*, tt__VideoSourceConfiguration*) serialize to a stream
/// - tt__VideoSourceConfiguration* tt__VideoSourceConfiguration::soap_dup(soap*) returns deep copy of tt__VideoSourceConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfiguration::soap_del() deep deletes tt__VideoSourceConfiguration data members, use only after tt__VideoSourceConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfiguration::soap_type() returns SOAP_TYPE_tt__VideoSourceConfiguration or derived type identifier
class tt__VideoSourceConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Reference to the physical input.
/// </BLOCKQUOTE></PRE>
///
/// Element "SourceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   SourceToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rectangle specifying the Video capturing area. The capturing area shall not be larger than the whole Video source area.
/// </BLOCKQUOTE></PRE>
///
/// Element "Bounds" of type "http://www.onvif.org/ver10/schema":IntRectangle.
    tt__IntRectangle*                    Bounds                         1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension.
    tt__VideoSourceConfigurationExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Readonly parameter signalling Source configuration's view mode, for devices supporting different view modes as defined in tt:viewModes.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "ViewMode" of type xs:string.
  @ std::string*                         ViewMode                       0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__VideoEncoderConfiguration operations:
/// - tt__VideoEncoderConfiguration* soap_new_tt__VideoEncoderConfiguration(soap*) allocate and default initialize
/// - tt__VideoEncoderConfiguration* soap_new_tt__VideoEncoderConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoderConfiguration* soap_new_req_tt__VideoEncoderConfiguration(soap*, ...) allocate, set required members
/// - tt__VideoEncoderConfiguration* soap_new_set_tt__VideoEncoderConfiguration(soap*, ...) allocate, set all public members
/// - tt__VideoEncoderConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoderConfiguration(soap*, tt__VideoEncoderConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderConfiguration(soap*, tt__VideoEncoderConfiguration*) serialize to a stream
/// - tt__VideoEncoderConfiguration* tt__VideoEncoderConfiguration::soap_dup(soap*) returns deep copy of tt__VideoEncoderConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoderConfiguration::soap_del() deep deletes tt__VideoEncoderConfiguration data members, use only after tt__VideoEncoderConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoderConfiguration::soap_type() returns SOAP_TYPE_tt__VideoEncoderConfiguration or derived type identifier
class tt__VideoEncoderConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Used video codec, either Jpeg, H.264 or Mpeg4
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type "http://www.onvif.org/ver10/schema":VideoEncoding.
    tt__VideoEncoding                    Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configured video resolution
/// </BLOCKQUOTE></PRE>
///
/// Element "Resolution" of type "http://www.onvif.org/ver10/schema":VideoResolution.
    tt__VideoResolution*                 Resolution                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Relative value for the video quantizers and the quality of the video. A high value within supported quality range means higher quality
/// </BLOCKQUOTE></PRE>
///
/// Element "Quality" of type xs:float.
    float                                Quality                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure rate control related parameters.
/// </BLOCKQUOTE></PRE>
///
/// Element "RateControl" of type "http://www.onvif.org/ver10/schema":VideoRateControl.
    tt__VideoRateControl*                RateControl                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Mpeg4 related parameters.
/// </BLOCKQUOTE></PRE>
///
/// Element "MPEG4" of type "http://www.onvif.org/ver10/schema":Mpeg4Configuration.
    tt__Mpeg4Configuration*              MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure H.264 related parameters.
/// </BLOCKQUOTE></PRE>
///
/// Element "H264" of type "http://www.onvif.org/ver10/schema":H264Configuration.
    tt__H264Configuration*               H264                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
///
/// Element "Multicast" of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The rtsp session timeout for the related video stream
/// </BLOCKQUOTE></PRE>
///
/// Element "SessionTimeout" of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":JpegOptions2 is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":JpegOptions.
///
/// @note class tt__JpegOptions2 operations:
/// - tt__JpegOptions2* soap_new_tt__JpegOptions2(soap*) allocate and default initialize
/// - tt__JpegOptions2* soap_new_tt__JpegOptions2(soap*, int num) allocate and default initialize an array
/// - tt__JpegOptions2* soap_new_req_tt__JpegOptions2(soap*, ...) allocate, set required members
/// - tt__JpegOptions2* soap_new_set_tt__JpegOptions2(soap*, ...) allocate, set all public members
/// - tt__JpegOptions2::soap_default(soap*) default initialize members
/// - int soap_read_tt__JpegOptions2(soap*, tt__JpegOptions2*) deserialize from a stream
/// - int soap_write_tt__JpegOptions2(soap*, tt__JpegOptions2*) serialize to a stream
/// - tt__JpegOptions2* tt__JpegOptions2::soap_dup(soap*) returns deep copy of tt__JpegOptions2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__JpegOptions2::soap_del() deep deletes tt__JpegOptions2 data members, use only after tt__JpegOptions2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__JpegOptions2::soap_type() returns SOAP_TYPE_tt__JpegOptions2 or derived type identifier
class tt__JpegOptions2 : public tt__JpegOptions
{ public:
/*  INHERITED FROM tt__JpegOptions:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
    END OF INHERITED FROM tt__JpegOptions */
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Options2 is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":Mpeg4Options.
///
/// @note class tt__Mpeg4Options2 operations:
/// - tt__Mpeg4Options2* soap_new_tt__Mpeg4Options2(soap*) allocate and default initialize
/// - tt__Mpeg4Options2* soap_new_tt__Mpeg4Options2(soap*, int num) allocate and default initialize an array
/// - tt__Mpeg4Options2* soap_new_req_tt__Mpeg4Options2(soap*, ...) allocate, set required members
/// - tt__Mpeg4Options2* soap_new_set_tt__Mpeg4Options2(soap*, ...) allocate, set all public members
/// - tt__Mpeg4Options2::soap_default(soap*) default initialize members
/// - int soap_read_tt__Mpeg4Options2(soap*, tt__Mpeg4Options2*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Options2(soap*, tt__Mpeg4Options2*) serialize to a stream
/// - tt__Mpeg4Options2* tt__Mpeg4Options2::soap_dup(soap*) returns deep copy of tt__Mpeg4Options2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Mpeg4Options2::soap_del() deep deletes tt__Mpeg4Options2 data members, use only after tt__Mpeg4Options2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Mpeg4Options2::soap_type() returns SOAP_TYPE_tt__Mpeg4Options2 or derived type identifier
class tt__Mpeg4Options2 : public tt__Mpeg4Options
{ public:
/*  INHERITED FROM tt__Mpeg4Options:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLengthRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported MPEG-4 profiles.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__Mpeg4Profile of length 1..unbounded.
    std::vector<tt__Mpeg4Profile       > Mpeg4ProfilesSupported         1;	///< Multiple elements.
    END OF INHERITED FROM tt__Mpeg4Options */
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":H264Options2 is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":H264Options.
///
/// @note class tt__H264Options2 operations:
/// - tt__H264Options2* soap_new_tt__H264Options2(soap*) allocate and default initialize
/// - tt__H264Options2* soap_new_tt__H264Options2(soap*, int num) allocate and default initialize an array
/// - tt__H264Options2* soap_new_req_tt__H264Options2(soap*, ...) allocate, set required members
/// - tt__H264Options2* soap_new_set_tt__H264Options2(soap*, ...) allocate, set all public members
/// - tt__H264Options2::soap_default(soap*) default initialize members
/// - int soap_read_tt__H264Options2(soap*, tt__H264Options2*) deserialize from a stream
/// - int soap_write_tt__H264Options2(soap*, tt__H264Options2*) serialize to a stream
/// - tt__H264Options2* tt__H264Options2::soap_dup(soap*) returns deep copy of tt__H264Options2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__H264Options2::soap_del() deep deletes tt__H264Options2 data members, use only after tt__H264Options2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__H264Options2::soap_type() returns SOAP_TYPE_tt__H264Options2 or derived type identifier
class tt__H264Options2 : public tt__H264Options
{ public:
/*  INHERITED FROM tt__H264Options:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLengthRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported H.264 profiles.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__H264Profile of length 1..unbounded.
    std::vector<tt__H264Profile        > H264ProfilesSupported          1;	///< Multiple elements.
    END OF INHERITED FROM tt__H264Options */
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoder2Configuration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__VideoEncoder2Configuration operations:
/// - tt__VideoEncoder2Configuration* soap_new_tt__VideoEncoder2Configuration(soap*) allocate and default initialize
/// - tt__VideoEncoder2Configuration* soap_new_tt__VideoEncoder2Configuration(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoder2Configuration* soap_new_req_tt__VideoEncoder2Configuration(soap*, ...) allocate, set required members
/// - tt__VideoEncoder2Configuration* soap_new_set_tt__VideoEncoder2Configuration(soap*, ...) allocate, set all public members
/// - tt__VideoEncoder2Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoder2Configuration(soap*, tt__VideoEncoder2Configuration*) deserialize from a stream
/// - int soap_write_tt__VideoEncoder2Configuration(soap*, tt__VideoEncoder2Configuration*) serialize to a stream
/// - tt__VideoEncoder2Configuration* tt__VideoEncoder2Configuration::soap_dup(soap*) returns deep copy of tt__VideoEncoder2Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoder2Configuration::soap_del() deep deletes tt__VideoEncoder2Configuration data members, use only after tt__VideoEncoder2Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoder2Configuration::soap_type() returns SOAP_TYPE_tt__VideoEncoder2Configuration or derived type identifier
class tt__VideoEncoder2Configuration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Video Media Subtype for the video format. For definitions see tt:VideoEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configured video resolution
/// </BLOCKQUOTE></PRE>
///
/// Element "Resolution" of type "http://www.onvif.org/ver10/schema":VideoResolution2.
    tt__VideoResolution2*                Resolution                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure rate control related parameters.
/// </BLOCKQUOTE></PRE>
///
/// Element "RateControl" of type "http://www.onvif.org/ver10/schema":VideoRateControl2.
    tt__VideoRateControl2*               RateControl                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
///
/// Element "Multicast" of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Relative value for the video quantizers and the quality of the video. A high value within supported quality range means higher quality
/// </BLOCKQUOTE></PRE>
///
/// Element "Quality" of type xs:float.
    float                                Quality                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Group of Video frames length. Determines typically the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GovLength" of type xs:int.
  @ int*                                 GovLength                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The encoder profile as defined in tt:VideoEncodingProfiles.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Profile" of type xs:string.
  @ std::string*                         Profile                        0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__AudioSourceConfiguration operations:
/// - tt__AudioSourceConfiguration* soap_new_tt__AudioSourceConfiguration(soap*) allocate and default initialize
/// - tt__AudioSourceConfiguration* soap_new_tt__AudioSourceConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__AudioSourceConfiguration* soap_new_req_tt__AudioSourceConfiguration(soap*, ...) allocate, set required members
/// - tt__AudioSourceConfiguration* soap_new_set_tt__AudioSourceConfiguration(soap*, ...) allocate, set all public members
/// - tt__AudioSourceConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioSourceConfiguration(soap*, tt__AudioSourceConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioSourceConfiguration(soap*, tt__AudioSourceConfiguration*) serialize to a stream
/// - tt__AudioSourceConfiguration* tt__AudioSourceConfiguration::soap_dup(soap*) returns deep copy of tt__AudioSourceConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioSourceConfiguration::soap_del() deep deletes tt__AudioSourceConfiguration data members, use only after tt__AudioSourceConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioSourceConfiguration::soap_type() returns SOAP_TYPE_tt__AudioSourceConfiguration or derived type identifier
class tt__AudioSourceConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the Audio Source the configuration applies to
/// </BLOCKQUOTE></PRE>
///
/// Element "SourceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   SourceToken                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__AudioEncoderConfiguration operations:
/// - tt__AudioEncoderConfiguration* soap_new_tt__AudioEncoderConfiguration(soap*) allocate and default initialize
/// - tt__AudioEncoderConfiguration* soap_new_tt__AudioEncoderConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__AudioEncoderConfiguration* soap_new_req_tt__AudioEncoderConfiguration(soap*, ...) allocate, set required members
/// - tt__AudioEncoderConfiguration* soap_new_set_tt__AudioEncoderConfiguration(soap*, ...) allocate, set all public members
/// - tt__AudioEncoderConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioEncoderConfiguration(soap*, tt__AudioEncoderConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfiguration(soap*, tt__AudioEncoderConfiguration*) serialize to a stream
/// - tt__AudioEncoderConfiguration* tt__AudioEncoderConfiguration::soap_dup(soap*) returns deep copy of tt__AudioEncoderConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioEncoderConfiguration::soap_del() deep deletes tt__AudioEncoderConfiguration data members, use only after tt__AudioEncoderConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioEncoderConfiguration::soap_type() returns SOAP_TYPE_tt__AudioEncoderConfiguration or derived type identifier
class tt__AudioEncoderConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Audio codec used for encoding the audio input (either G.711, G.726 or AAC)
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type "http://www.onvif.org/ver10/schema":AudioEncoding.
    tt__AudioEncoding                    Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The output bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type xs:int.
    int                                  Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The output sample rate in kHz.
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRate" of type xs:int.
    int                                  SampleRate                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
///
/// Element "Multicast" of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The rtsp session timeout for the related audio stream
/// </BLOCKQUOTE></PRE>
///
/// Element "SessionTimeout" of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoder2Configuration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__AudioEncoder2Configuration operations:
/// - tt__AudioEncoder2Configuration* soap_new_tt__AudioEncoder2Configuration(soap*) allocate and default initialize
/// - tt__AudioEncoder2Configuration* soap_new_tt__AudioEncoder2Configuration(soap*, int num) allocate and default initialize an array
/// - tt__AudioEncoder2Configuration* soap_new_req_tt__AudioEncoder2Configuration(soap*, ...) allocate, set required members
/// - tt__AudioEncoder2Configuration* soap_new_set_tt__AudioEncoder2Configuration(soap*, ...) allocate, set all public members
/// - tt__AudioEncoder2Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioEncoder2Configuration(soap*, tt__AudioEncoder2Configuration*) deserialize from a stream
/// - int soap_write_tt__AudioEncoder2Configuration(soap*, tt__AudioEncoder2Configuration*) serialize to a stream
/// - tt__AudioEncoder2Configuration* tt__AudioEncoder2Configuration::soap_dup(soap*) returns deep copy of tt__AudioEncoder2Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioEncoder2Configuration::soap_del() deep deletes tt__AudioEncoder2Configuration data members, use only after tt__AudioEncoder2Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioEncoder2Configuration::soap_type() returns SOAP_TYPE_tt__AudioEncoder2Configuration or derived type identifier
class tt__AudioEncoder2Configuration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Audio Media Subtype for the audio format. For definitions see tt:AudioEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional multicast configuration of the audio stream.
/// </BLOCKQUOTE></PRE>
///
/// Element "Multicast" of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The output bitrate in kbps.
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type xs:int.
    int                                  Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The output sample rate in kHz.
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRate" of type xs:int.
    int                                  SampleRate                     1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__VideoAnalyticsConfiguration operations:
/// - tt__VideoAnalyticsConfiguration* soap_new_tt__VideoAnalyticsConfiguration(soap*) allocate and default initialize
/// - tt__VideoAnalyticsConfiguration* soap_new_tt__VideoAnalyticsConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__VideoAnalyticsConfiguration* soap_new_req_tt__VideoAnalyticsConfiguration(soap*, ...) allocate, set required members
/// - tt__VideoAnalyticsConfiguration* soap_new_set_tt__VideoAnalyticsConfiguration(soap*, ...) allocate, set all public members
/// - tt__VideoAnalyticsConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoAnalyticsConfiguration(soap*, tt__VideoAnalyticsConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoAnalyticsConfiguration(soap*, tt__VideoAnalyticsConfiguration*) serialize to a stream
/// - tt__VideoAnalyticsConfiguration* tt__VideoAnalyticsConfiguration::soap_dup(soap*) returns deep copy of tt__VideoAnalyticsConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoAnalyticsConfiguration::soap_del() deep deletes tt__VideoAnalyticsConfiguration data members, use only after tt__VideoAnalyticsConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoAnalyticsConfiguration::soap_type() returns SOAP_TYPE_tt__VideoAnalyticsConfiguration or derived type identifier
class tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// Element "AnalyticsEngineConfiguration" of type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration.
    tt__AnalyticsEngineConfiguration*    AnalyticsEngineConfiguration   1;	///< Required element.
/// Element "RuleEngineConfiguration" of type "http://www.onvif.org/ver10/schema":RuleEngineConfiguration.
    tt__RuleEngineConfiguration*         RuleEngineConfiguration        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__MetadataConfiguration operations:
/// - tt__MetadataConfiguration* soap_new_tt__MetadataConfiguration(soap*) allocate and default initialize
/// - tt__MetadataConfiguration* soap_new_tt__MetadataConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfiguration* soap_new_req_tt__MetadataConfiguration(soap*, ...) allocate, set required members
/// - tt__MetadataConfiguration* soap_new_set_tt__MetadataConfiguration(soap*, ...) allocate, set all public members
/// - tt__MetadataConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfiguration(soap*, tt__MetadataConfiguration*) deserialize from a stream
/// - int soap_write_tt__MetadataConfiguration(soap*, tt__MetadataConfiguration*) serialize to a stream
/// - tt__MetadataConfiguration* tt__MetadataConfiguration::soap_dup(soap*) returns deep copy of tt__MetadataConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfiguration::soap_del() deep deletes tt__MetadataConfiguration data members, use only after tt__MetadataConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfiguration::soap_type() returns SOAP_TYPE_tt__MetadataConfiguration or derived type identifier
class tt__MetadataConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   optional element to configure which PTZ related data is to include in the metadata stream
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZStatus" of type "http://www.onvif.org/ver10/schema":PTZFilter.
    tt__PTZFilter*                       PTZStatus                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure the streaming of events. A client might be interested in receiving all, none or some of the events produced by the device:<ul>
///   <li>To get all events: Include the Events element but do not include a filter.</li>
///   <li>To get no events: Do not include the Events element.</li>
///   <li>To get only some events: Include the Events element and include a filter in the element.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Events" of type "http://www.onvif.org/ver10/schema":EventSubscription.
    tt__EventSubscription*               Events                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines whether the streamed metadata will include metadata from the analytics engines (video, cell motion, audio etc.)
/// </BLOCKQUOTE></PRE>
///
/// Element "Analytics" of type xs:boolean.
    bool*                                Analytics                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
///
/// Element "Multicast" of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The rtsp session timeout for the related audio stream (when using Media2 Service, this value is deprecated and ignored)
/// </BLOCKQUOTE></PRE>
///
/// Element "SessionTimeout" of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "AnalyticsEngineConfiguration" of type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration.
    tt__AnalyticsEngineConfiguration*    AnalyticsEngineConfiguration   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MetadataConfigurationExtension.
    tt__MetadataConfigurationExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to configure compression type of Metadata payload. Use values from enumeration MetadataCompressionType.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "CompressionType" of type xs:string.
  @ std::string*                         CompressionType                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to configure if the metadata stream shall contain the Geo Location coordinates of each target.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GeoLocation" of type xs:boolean.
  @ bool*                                GeoLocation                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutput is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical video outputs.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__VideoOutput operations:
/// - tt__VideoOutput* soap_new_tt__VideoOutput(soap*) allocate and default initialize
/// - tt__VideoOutput* soap_new_tt__VideoOutput(soap*, int num) allocate and default initialize an array
/// - tt__VideoOutput* soap_new_req_tt__VideoOutput(soap*, ...) allocate, set required members
/// - tt__VideoOutput* soap_new_set_tt__VideoOutput(soap*, ...) allocate, set all public members
/// - tt__VideoOutput::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoOutput(soap*, tt__VideoOutput*) deserialize from a stream
/// - int soap_write_tt__VideoOutput(soap*, tt__VideoOutput*) serialize to a stream
/// - tt__VideoOutput* tt__VideoOutput::soap_dup(soap*) returns deep copy of tt__VideoOutput, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoOutput::soap_del() deep deletes tt__VideoOutput data members, use only after tt__VideoOutput::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoOutput::soap_type() returns SOAP_TYPE_tt__VideoOutput or derived type identifier
class tt__VideoOutput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// Element "Layout" of type "http://www.onvif.org/ver10/schema":Layout.
    tt__Layout*                          Layout                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Resolution of the display in Pixel.
/// </BLOCKQUOTE></PRE>
///
/// Element "Resolution" of type "http://www.onvif.org/ver10/schema":VideoResolution.
    tt__VideoResolution*                 Resolution                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refresh rate of the display in Hertz.
/// </BLOCKQUOTE></PRE>
///
/// Element "RefreshRate" of type xs:float.
    float*                               RefreshRate                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Aspect ratio of the display as physical extent of width divided by height.
/// </BLOCKQUOTE></PRE>
///
/// Element "AspectRatio" of type xs:float.
    float*                               AspectRatio                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoOutputExtension.
    tt__VideoOutputExtension*            Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutputConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__VideoOutputConfiguration operations:
/// - tt__VideoOutputConfiguration* soap_new_tt__VideoOutputConfiguration(soap*) allocate and default initialize
/// - tt__VideoOutputConfiguration* soap_new_tt__VideoOutputConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__VideoOutputConfiguration* soap_new_req_tt__VideoOutputConfiguration(soap*, ...) allocate, set required members
/// - tt__VideoOutputConfiguration* soap_new_set_tt__VideoOutputConfiguration(soap*, ...) allocate, set all public members
/// - tt__VideoOutputConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoOutputConfiguration(soap*, tt__VideoOutputConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoOutputConfiguration(soap*, tt__VideoOutputConfiguration*) serialize to a stream
/// - tt__VideoOutputConfiguration* tt__VideoOutputConfiguration::soap_dup(soap*) returns deep copy of tt__VideoOutputConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoOutputConfiguration::soap_del() deep deletes tt__VideoOutputConfiguration data members, use only after tt__VideoOutputConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoOutputConfiguration::soap_type() returns SOAP_TYPE_tt__VideoOutputConfiguration or derived type identifier
class tt__VideoOutputConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the Video Output the configuration applies to
/// </BLOCKQUOTE></PRE>
///
/// Element "OutputToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   OutputToken                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioOutput is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical audio outputs.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__AudioOutput operations:
/// - tt__AudioOutput* soap_new_tt__AudioOutput(soap*) allocate and default initialize
/// - tt__AudioOutput* soap_new_tt__AudioOutput(soap*, int num) allocate and default initialize an array
/// - tt__AudioOutput* soap_new_req_tt__AudioOutput(soap*, ...) allocate, set required members
/// - tt__AudioOutput* soap_new_set_tt__AudioOutput(soap*, ...) allocate, set all public members
/// - tt__AudioOutput::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioOutput(soap*, tt__AudioOutput*) deserialize from a stream
/// - int soap_write_tt__AudioOutput(soap*, tt__AudioOutput*) serialize to a stream
/// - tt__AudioOutput* tt__AudioOutput::soap_dup(soap*) returns deep copy of tt__AudioOutput, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioOutput::soap_del() deep deletes tt__AudioOutput data members, use only after tt__AudioOutput::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioOutput::soap_type() returns SOAP_TYPE_tt__AudioOutput or derived type identifier
class tt__AudioOutput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioOutputConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__AudioOutputConfiguration operations:
/// - tt__AudioOutputConfiguration* soap_new_tt__AudioOutputConfiguration(soap*) allocate and default initialize
/// - tt__AudioOutputConfiguration* soap_new_tt__AudioOutputConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__AudioOutputConfiguration* soap_new_req_tt__AudioOutputConfiguration(soap*, ...) allocate, set required members
/// - tt__AudioOutputConfiguration* soap_new_set_tt__AudioOutputConfiguration(soap*, ...) allocate, set all public members
/// - tt__AudioOutputConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioOutputConfiguration(soap*, tt__AudioOutputConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioOutputConfiguration(soap*, tt__AudioOutputConfiguration*) serialize to a stream
/// - tt__AudioOutputConfiguration* tt__AudioOutputConfiguration::soap_dup(soap*) returns deep copy of tt__AudioOutputConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioOutputConfiguration::soap_del() deep deletes tt__AudioOutputConfiguration data members, use only after tt__AudioOutputConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioOutputConfiguration::soap_type() returns SOAP_TYPE_tt__AudioOutputConfiguration or derived type identifier
class tt__AudioOutputConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the phsycial Audio output.
/// </BLOCKQUOTE></PRE>
///
/// Element "OutputToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   OutputToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An audio channel MAY support different types of audio transmission. While for full duplex
///   operation no special handling is required, in half duplex operation the transmission direction
///   needs to be switched.
///   The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
///   direction is currently active. An NVC can switch between different modes by setting the
///   AudioOutputConfiguration.<br/>
///   The following modes for the Send-Primacy are defined:<ul>
///   <li>www.onvif.org/ver20/HalfDuplex/Server
///   The server is allowed to send audio data to the client. The client shall not send
///   audio data via the backchannel to the NVT in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Client
///   The client is allowed to send audio data via the backchannel to the server. The
///   NVT shall not send audio data to the client in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Auto
///   It is up to the device how to deal with sending and receiving audio data.</li>
///   </ul>
///   Acoustic echo cancellation is out of ONVIF scope.
/// </BLOCKQUOTE></PRE>
///
/// Element "SendPrimacy" of type xs:anyURI.
    xsd__anyURI*                         SendPrimacy                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Volume setting of the output. The applicable range is defined via the option AudioOutputOptions.OutputLevelRange.
/// </BLOCKQUOTE></PRE>
///
/// Element "OutputLevel" of type xs:int.
    int                                  OutputLevel                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// <PRE><BLOCKQUOTE>
///   The Audio Decoder Configuration does not contain any that parameter to configure the
///   decoding .A decoder shall decode every data it receives (according to its capabilities).
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__AudioDecoderConfiguration operations:
/// - tt__AudioDecoderConfiguration* soap_new_tt__AudioDecoderConfiguration(soap*) allocate and default initialize
/// - tt__AudioDecoderConfiguration* soap_new_tt__AudioDecoderConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__AudioDecoderConfiguration* soap_new_req_tt__AudioDecoderConfiguration(soap*, ...) allocate, set required members
/// - tt__AudioDecoderConfiguration* soap_new_set_tt__AudioDecoderConfiguration(soap*, ...) allocate, set all public members
/// - tt__AudioDecoderConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioDecoderConfiguration(soap*, tt__AudioDecoderConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfiguration(soap*, tt__AudioDecoderConfiguration*) serialize to a stream
/// - tt__AudioDecoderConfiguration* tt__AudioDecoderConfiguration::soap_dup(soap*) returns deep copy of tt__AudioDecoderConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioDecoderConfiguration::soap_del() deep deletes tt__AudioDecoderConfiguration data members, use only after tt__AudioDecoderConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioDecoderConfiguration::soap_type() returns SOAP_TYPE_tt__AudioDecoderConfiguration or derived type identifier
class tt__AudioDecoderConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterface is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// @note class tt__NetworkInterface operations:
/// - tt__NetworkInterface* soap_new_tt__NetworkInterface(soap*) allocate and default initialize
/// - tt__NetworkInterface* soap_new_tt__NetworkInterface(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterface* soap_new_req_tt__NetworkInterface(soap*, ...) allocate, set required members
/// - tt__NetworkInterface* soap_new_set_tt__NetworkInterface(soap*, ...) allocate, set all public members
/// - tt__NetworkInterface::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterface(soap*, tt__NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__NetworkInterface(soap*, tt__NetworkInterface*) serialize to a stream
/// - tt__NetworkInterface* tt__NetworkInterface::soap_dup(soap*) returns deep copy of tt__NetworkInterface, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterface::soap_del() deep deletes tt__NetworkInterface data members, use only after tt__NetworkInterface::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterface::soap_type() returns SOAP_TYPE_tt__NetworkInterface or derived type identifier
class tt__NetworkInterface : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not an interface is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Network interface information
/// </BLOCKQUOTE></PRE>
///
/// Element "Info" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceInfo.
    tt__NetworkInterfaceInfo*            Info                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Link configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Link" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceLink.
    tt__NetworkInterfaceLink*            Link                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 network interface configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv4" of type "http://www.onvif.org/ver10/schema":IPv4NetworkInterface.
    tt__IPv4NetworkInterface*            IPv4                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 network interface configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv6" of type "http://www.onvif.org/ver10/schema":IPv6NetworkInterface.
    tt__IPv6NetworkInterface*            IPv6                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension.
    tt__NetworkInterfaceExtension*       Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateUsage is a complexType with simpleContent extension of type xs:string.
///
/// @note class tt__CertificateUsage operations:
/// - tt__CertificateUsage* soap_new_tt__CertificateUsage(soap*) allocate and default initialize
/// - tt__CertificateUsage* soap_new_tt__CertificateUsage(soap*, int num) allocate and default initialize an array
/// - tt__CertificateUsage* soap_new_req_tt__CertificateUsage(soap*, ...) allocate, set required members
/// - tt__CertificateUsage* soap_new_set_tt__CertificateUsage(soap*, ...) allocate, set all public members
/// - tt__CertificateUsage::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateUsage(soap*, tt__CertificateUsage*) deserialize from a stream
/// - int soap_write_tt__CertificateUsage(soap*, tt__CertificateUsage*) serialize to a stream
/// - tt__CertificateUsage* tt__CertificateUsage::soap_dup(soap*) returns deep copy of tt__CertificateUsage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateUsage::soap_del() deep deletes tt__CertificateUsage data members, use only after tt__CertificateUsage::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateUsage::soap_type() returns SOAP_TYPE_tt__CertificateUsage or derived type identifier
class tt__CertificateUsage : public xsd__anyType
{ public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Attribute "Critical" of type xs:boolean.
  @ bool                                 Critical                       1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":RelayOutput is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// @note class tt__RelayOutput operations:
/// - tt__RelayOutput* soap_new_tt__RelayOutput(soap*) allocate and default initialize
/// - tt__RelayOutput* soap_new_tt__RelayOutput(soap*, int num) allocate and default initialize an array
/// - tt__RelayOutput* soap_new_req_tt__RelayOutput(soap*, ...) allocate, set required members
/// - tt__RelayOutput* soap_new_set_tt__RelayOutput(soap*, ...) allocate, set all public members
/// - tt__RelayOutput::soap_default(soap*) default initialize members
/// - int soap_read_tt__RelayOutput(soap*, tt__RelayOutput*) deserialize from a stream
/// - int soap_write_tt__RelayOutput(soap*, tt__RelayOutput*) serialize to a stream
/// - tt__RelayOutput* tt__RelayOutput::soap_dup(soap*) returns deep copy of tt__RelayOutput, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RelayOutput::soap_del() deep deletes tt__RelayOutput data members, use only after tt__RelayOutput::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RelayOutput::soap_type() returns SOAP_TYPE_tt__RelayOutput or derived type identifier
class tt__RelayOutput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// Element "Properties" of type "http://www.onvif.org/ver10/schema":RelayOutputSettings.
    tt__RelayOutputSettings*             Properties                     1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":DigitalInput is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// @note class tt__DigitalInput operations:
/// - tt__DigitalInput* soap_new_tt__DigitalInput(soap*) allocate and default initialize
/// - tt__DigitalInput* soap_new_tt__DigitalInput(soap*, int num) allocate and default initialize an array
/// - tt__DigitalInput* soap_new_req_tt__DigitalInput(soap*, ...) allocate, set required members
/// - tt__DigitalInput* soap_new_set_tt__DigitalInput(soap*, ...) allocate, set all public members
/// - tt__DigitalInput::soap_default(soap*) default initialize members
/// - int soap_read_tt__DigitalInput(soap*, tt__DigitalInput*) deserialize from a stream
/// - int soap_write_tt__DigitalInput(soap*, tt__DigitalInput*) serialize to a stream
/// - tt__DigitalInput* tt__DigitalInput::soap_dup(soap*) returns deep copy of tt__DigitalInput, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DigitalInput::soap_del() deep deletes tt__DigitalInput data members, use only after tt__DigitalInput::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DigitalInput::soap_type() returns SOAP_TYPE_tt__DigitalInput or derived type identifier
class tt__DigitalInput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <PRE><BLOCKQUOTE>
///   Indicate the Digital IdleState status.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "IdleState" of type "http://www.onvif.org/ver10/schema":DigitalIdleState.
  @ tt__DigitalIdleState*                IdleState                      0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNode is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// @note class tt__PTZNode operations:
/// - tt__PTZNode* soap_new_tt__PTZNode(soap*) allocate and default initialize
/// - tt__PTZNode* soap_new_tt__PTZNode(soap*, int num) allocate and default initialize an array
/// - tt__PTZNode* soap_new_req_tt__PTZNode(soap*, ...) allocate, set required members
/// - tt__PTZNode* soap_new_set_tt__PTZNode(soap*, ...) allocate, set all public members
/// - tt__PTZNode::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZNode(soap*, tt__PTZNode*) deserialize from a stream
/// - int soap_write_tt__PTZNode(soap*, tt__PTZNode*) serialize to a stream
/// - tt__PTZNode* tt__PTZNode::soap_dup(soap*) returns deep copy of tt__PTZNode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZNode::soap_del() deep deletes tt__PTZNode data members, use only after tt__PTZNode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZNode::soap_type() returns SOAP_TYPE_tt__PTZNode or derived type identifier
class tt__PTZNode : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   A unique identifier that is used to reference PTZ Nodes.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name*                            Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A list of Coordinate Systems available for the PTZ Node. For each Coordinate System, the PTZ Node MUST specify its allowed range.
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedPTZSpaces" of type "http://www.onvif.org/ver10/schema":PTZSpaces.
    tt__PTZSpaces*                       SupportedPTZSpaces             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   All preset operations MUST be available for this PTZ Node if one preset is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumNumberOfPresets" of type xs:int.
    int                                  MaximumNumberOfPresets         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A boolean operator specifying the availability of a home position. If set to true, the Home Position Operations MUST be available for this PTZ Node.
/// </BLOCKQUOTE></PRE>
///
/// Element "HomeSupported" of type xs:boolean.
    bool                                 HomeSupported                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A list of supported Auxiliary commands. If the list is not empty, the Auxiliary Operations MUST be available for this PTZ Node.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__AuxiliaryData of length 0..unbounded.
    std::vector<tt__AuxiliaryData      > AuxiliaryCommands              0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZNodeExtension.
    tt__PTZNodeExtension*                Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indication whether the HomePosition of a Node is fixed or it can be changed via the SetHomePosition command.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "FixedHomePosition" of type xs:boolean.
  @ bool*                                FixedHomePosition              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indication whether the Node supports the geo-referenced move command.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GeoMove" of type xs:boolean.
  @ bool*                                GeoMove                        0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__PTZConfiguration operations:
/// - tt__PTZConfiguration* soap_new_tt__PTZConfiguration(soap*) allocate and default initialize
/// - tt__PTZConfiguration* soap_new_tt__PTZConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfiguration* soap_new_req_tt__PTZConfiguration(soap*, ...) allocate, set required members
/// - tt__PTZConfiguration* soap_new_set_tt__PTZConfiguration(soap*, ...) allocate, set all public members
/// - tt__PTZConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfiguration(soap*, tt__PTZConfiguration*) deserialize from a stream
/// - int soap_write_tt__PTZConfiguration(soap*, tt__PTZConfiguration*) serialize to a stream
/// - tt__PTZConfiguration* tt__PTZConfiguration::soap_dup(soap*) returns deep copy of tt__PTZConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfiguration::soap_del() deep deletes tt__PTZConfiguration data members, use only after tt__PTZConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfiguration::soap_type() returns SOAP_TYPE_tt__PTZConfiguration or derived type identifier
class tt__PTZConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   A mandatory reference to the PTZ Node that the PTZ Configuration belongs to.
/// </BLOCKQUOTE></PRE>
///
/// Element "NodeToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   NodeToken                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports absolute Pan/Tilt movements, it shall specify one Absolute Pan/Tilt Position Space as default.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultAbsolutePantTiltPositionSpace" of type xs:anyURI.
    xsd__anyURI*                         DefaultAbsolutePantTiltPositionSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports absolute zoom movements, it shall specify one Absolute Zoom Position Space as default.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultAbsoluteZoomPositionSpace" of type xs:anyURI.
    xsd__anyURI*                         DefaultAbsoluteZoomPositionSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports relative Pan/Tilt movements, it shall specify one RelativePan/Tilt Translation Space as default.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultRelativePanTiltTranslationSpace" of type xs:anyURI.
    xsd__anyURI*                         DefaultRelativePanTiltTranslationSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports relative zoom movements, it shall specify one Relative Zoom Translation Space as default.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultRelativeZoomTranslationSpace" of type xs:anyURI.
    xsd__anyURI*                         DefaultRelativeZoomTranslationSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports continuous Pan/Tilt movements, it shall specify one Continuous Pan/Tilt Velocity Space as default.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultContinuousPanTiltVelocitySpace" of type xs:anyURI.
    xsd__anyURI*                         DefaultContinuousPanTiltVelocitySpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports continuous zoom movements, it shall specify one Continuous Zoom Velocity Space as default.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultContinuousZoomVelocitySpace" of type xs:anyURI.
    xsd__anyURI*                         DefaultContinuousZoomVelocitySpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports absolute or relative PTZ movements, it shall specify corresponding default Pan/Tilt and Zoom speeds.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultPTZSpeed" of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    tt__PTZSpeed*                        DefaultPTZSpeed                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports continuous movements, it shall specify a default timeout, after which the movement stops.
/// </BLOCKQUOTE></PRE>
///
/// Element "DefaultPTZTimeout" of type xs:duration.
    xsd__duration*                       DefaultPTZTimeout              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Pan/Tilt limits element should be present for a PTZ Node that supports an absolute Pan/Tilt. If the element is present it signals the support for configurable Pan/Tilt limits. If limits are enabled, the Pan/Tilt movements shall always stay within the specified range. The Pan/Tilt limits are disabled by setting the limits to INF or +INF.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTiltLimits" of type "http://www.onvif.org/ver10/schema":PanTiltLimits.
    tt__PanTiltLimits*                   PanTiltLimits                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Zoom limits element should be present for a PTZ Node that supports absolute zoom. If the element is present it signals the supports for configurable Zoom limits. If limits are enabled the zoom movements shall always stay within the specified range. The Zoom limits are disabled by settings the limits to -INF and +INF.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZoomLimits" of type "http://www.onvif.org/ver10/schema":ZoomLimits.
    tt__ZoomLimits*                      ZoomLimits                     0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
///
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZConfigurationExtension.
    tt__PTZConfigurationExtension*       Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The optional acceleration ramp used by the device when moving.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MoveRamp" of type xs:int.
  @ int*                                 MoveRamp                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The optional acceleration ramp used by the device when recalling presets.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "PresetRamp" of type xs:int.
  @ int*                                 PresetRamp                     0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The optional acceleration ramp used by the device when executing PresetTours.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "PresetTourRamp" of type xs:int.
  @ int*                                 PresetTourRamp                 0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":EventFilter is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
///
/// @note class tt__EventFilter operations:
/// - tt__EventFilter* soap_new_tt__EventFilter(soap*) allocate and default initialize
/// - tt__EventFilter* soap_new_tt__EventFilter(soap*, int num) allocate and default initialize an array
/// - tt__EventFilter* soap_new_req_tt__EventFilter(soap*, ...) allocate, set required members
/// - tt__EventFilter* soap_new_set_tt__EventFilter(soap*, ...) allocate, set all public members
/// - tt__EventFilter::soap_default(soap*) default initialize members
/// - int soap_read_tt__EventFilter(soap*, tt__EventFilter*) deserialize from a stream
/// - int soap_write_tt__EventFilter(soap*, tt__EventFilter*) serialize to a stream
/// - tt__EventFilter* tt__EventFilter::soap_dup(soap*) returns deep copy of tt__EventFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EventFilter::soap_del() deep deletes tt__EventFilter data members, use only after tt__EventFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EventFilter::soap_type() returns SOAP_TYPE_tt__EventFilter or derived type identifier
class tt__EventFilter : public wsnt__FilterType
{ public:
/*  INHERITED FROM wsnt__FilterType:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
    END OF INHERITED FROM wsnt__FilterType */
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngine is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__AnalyticsEngine operations:
/// - tt__AnalyticsEngine* soap_new_tt__AnalyticsEngine(soap*) allocate and default initialize
/// - tt__AnalyticsEngine* soap_new_tt__AnalyticsEngine(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngine* soap_new_req_tt__AnalyticsEngine(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngine* soap_new_set_tt__AnalyticsEngine(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngine::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngine(soap*, tt__AnalyticsEngine*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngine(soap*, tt__AnalyticsEngine*) serialize to a stream
/// - tt__AnalyticsEngine* tt__AnalyticsEngine::soap_dup(soap*) returns deep copy of tt__AnalyticsEngine, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngine::soap_del() deep deletes tt__AnalyticsEngine data members, use only after tt__AnalyticsEngine::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngine::soap_type() returns SOAP_TYPE_tt__AnalyticsEngine or derived type identifier
class tt__AnalyticsEngine : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// Element "AnalyticsEngineConfiguration" of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfiguration.
    tt__AnalyticsDeviceEngineConfiguration*  AnalyticsEngineConfiguration   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineInput is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__AnalyticsEngineInput operations:
/// - tt__AnalyticsEngineInput* soap_new_tt__AnalyticsEngineInput(soap*) allocate and default initialize
/// - tt__AnalyticsEngineInput* soap_new_tt__AnalyticsEngineInput(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineInput* soap_new_req_tt__AnalyticsEngineInput(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineInput* soap_new_set_tt__AnalyticsEngineInput(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineInput::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineInput(soap*, tt__AnalyticsEngineInput*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineInput(soap*, tt__AnalyticsEngineInput*) serialize to a stream
/// - tt__AnalyticsEngineInput* tt__AnalyticsEngineInput::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineInput, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineInput::soap_del() deep deletes tt__AnalyticsEngineInput data members, use only after tt__AnalyticsEngineInput::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineInput::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineInput or derived type identifier
class tt__AnalyticsEngineInput : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// Element "SourceIdentification" of type "http://www.onvif.org/ver10/schema":SourceIdentification.
    tt__SourceIdentification*            SourceIdentification           1;	///< Required element.
/// Element "VideoInput" of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    tt__VideoEncoderConfiguration*       VideoInput                     1;	///< Required element.
/// Element "MetadataInput" of type "http://www.onvif.org/ver10/schema":MetadataInput.
    tt__MetadataInput*                   MetadataInput                  1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineControl is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// @note class tt__AnalyticsEngineControl operations:
/// - tt__AnalyticsEngineControl* soap_new_tt__AnalyticsEngineControl(soap*) allocate and default initialize
/// - tt__AnalyticsEngineControl* soap_new_tt__AnalyticsEngineControl(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineControl* soap_new_req_tt__AnalyticsEngineControl(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineControl* soap_new_set_tt__AnalyticsEngineControl(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineControl::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineControl(soap*, tt__AnalyticsEngineControl*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineControl(soap*, tt__AnalyticsEngineControl*) serialize to a stream
/// - tt__AnalyticsEngineControl* tt__AnalyticsEngineControl::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineControl::soap_del() deep deletes tt__AnalyticsEngineControl data members, use only after tt__AnalyticsEngineControl::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineControl::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineControl or derived type identifier
class tt__AnalyticsEngineControl : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
///
/// Element "UseCount" of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the analytics engine (AnalyticsEngine) being controlled.
/// </BLOCKQUOTE></PRE>
///
/// Element "EngineToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   EngineToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token of the analytics engine configuration (VideoAnalyticsConfiguration) in effect.
/// </BLOCKQUOTE></PRE>
///
/// Element "EngineConfigToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   EngineConfigToken              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Tokens of the input (AnalyticsEngineInput) configuration applied.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > InputToken                     1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Tokens of the receiver providing media input data. The order of ReceiverToken shall exactly match the order of InputToken.
/// </BLOCKQUOTE></PRE>
///
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > ReceiverToken                  1;	///< Multiple elements.
/// Element "Multicast" of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      0;	///< Optional element.
/// Element "Subscription" of type "http://www.onvif.org/ver10/schema":Config.
    tt__Config*                          Subscription                   1;	///< Required element.
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ModeOfOperation.
    tt__ModeOfOperation                  Mode                           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfiguration is a complexType with complexContent extension of type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// @note class tt__OSDConfiguration operations:
/// - tt__OSDConfiguration* soap_new_tt__OSDConfiguration(soap*) allocate and default initialize
/// - tt__OSDConfiguration* soap_new_tt__OSDConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__OSDConfiguration* soap_new_req_tt__OSDConfiguration(soap*, ...) allocate, set required members
/// - tt__OSDConfiguration* soap_new_set_tt__OSDConfiguration(soap*, ...) allocate, set all public members
/// - tt__OSDConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDConfiguration(soap*, tt__OSDConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDConfiguration(soap*, tt__OSDConfiguration*) serialize to a stream
/// - tt__OSDConfiguration* tt__OSDConfiguration::soap_dup(soap*) returns deep copy of tt__OSDConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDConfiguration::soap_del() deep deletes tt__OSDConfiguration data members, use only after tt__OSDConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDConfiguration::soap_type() returns SOAP_TYPE_tt__OSDConfiguration or derived type identifier
class tt__OSDConfiguration : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   Reference to the video source configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "VideoSourceConfigurationToken" of type "http://www.onvif.org/ver10/schema":OSDReference.
    tt__OSDReference*                    VideoSourceConfigurationToken  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of OSD.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":OSDType.
    tt__OSDType                          Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Position configuration of OSD.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type "http://www.onvif.org/ver10/schema":OSDPosConfiguration.
    tt__OSDPosConfiguration*             Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Text configuration of OSD. It shall be present when the value of Type field is Text.
/// </BLOCKQUOTE></PRE>
///
/// Element "TextString" of type "http://www.onvif.org/ver10/schema":OSDTextConfiguration.
    tt__OSDTextConfiguration*            TextString                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image configuration of OSD. It shall be present when the value of Type field is Image
/// </BLOCKQUOTE></PRE>
///
/// Element "Image" of type "http://www.onvif.org/ver10/schema":OSDImgConfiguration.
    tt__OSDImgConfiguration*             Image                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDConfigurationExtension.
    tt__OSDConfigurationExtension*       Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__SubscribeCreationFailedFaultType operations:
/// - wsnt__SubscribeCreationFailedFaultType* soap_new_wsnt__SubscribeCreationFailedFaultType(soap*) allocate and default initialize
/// - wsnt__SubscribeCreationFailedFaultType* soap_new_wsnt__SubscribeCreationFailedFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__SubscribeCreationFailedFaultType* soap_new_req_wsnt__SubscribeCreationFailedFaultType(soap*, ...) allocate, set required members
/// - wsnt__SubscribeCreationFailedFaultType* soap_new_set_wsnt__SubscribeCreationFailedFaultType(soap*, ...) allocate, set all public members
/// - wsnt__SubscribeCreationFailedFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__SubscribeCreationFailedFaultType(soap*, wsnt__SubscribeCreationFailedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__SubscribeCreationFailedFaultType(soap*, wsnt__SubscribeCreationFailedFaultType*) serialize to a stream
/// - wsnt__SubscribeCreationFailedFaultType* wsnt__SubscribeCreationFailedFaultType::soap_dup(soap*) returns deep copy of wsnt__SubscribeCreationFailedFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__SubscribeCreationFailedFaultType::soap_del() deep deletes wsnt__SubscribeCreationFailedFaultType data members, use only after wsnt__SubscribeCreationFailedFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__SubscribeCreationFailedFaultType::soap_type() returns SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType or derived type identifier
class wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode operations:
/// - _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode* soap_new__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode* soap_new__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode* soap_new_req__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode* soap_new_set__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode* _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode data members, use only after _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode or derived type identifier
    class _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__SubscribeCreationFailedFaultType_Description operations:
/// - _wsrfbf__SubscribeCreationFailedFaultType_Description* soap_new__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__SubscribeCreationFailedFaultType_Description* soap_new__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__SubscribeCreationFailedFaultType_Description* soap_new_req__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__SubscribeCreationFailedFaultType_Description* soap_new_set__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__SubscribeCreationFailedFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, _wsrfbf__SubscribeCreationFailedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, _wsrfbf__SubscribeCreationFailedFaultType_Description*) serialize to a stream
/// - _wsrfbf__SubscribeCreationFailedFaultType_Description* _wsrfbf__SubscribeCreationFailedFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__SubscribeCreationFailedFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__SubscribeCreationFailedFaultType_Description::soap_del() deep deletes _wsrfbf__SubscribeCreationFailedFaultType_Description data members, use only after _wsrfbf__SubscribeCreationFailedFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__SubscribeCreationFailedFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__SubscribeCreationFailedFaultType_Description or derived type identifier
    class _wsrfbf__SubscribeCreationFailedFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__SubscribeCreationFailedFaultType_FaultCause operations:
/// - _wsrfbf__SubscribeCreationFailedFaultType_FaultCause* soap_new__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__SubscribeCreationFailedFaultType_FaultCause* soap_new__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__SubscribeCreationFailedFaultType_FaultCause* soap_new_req__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__SubscribeCreationFailedFaultType_FaultCause* soap_new_set__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__SubscribeCreationFailedFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, _wsrfbf__SubscribeCreationFailedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, _wsrfbf__SubscribeCreationFailedFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__SubscribeCreationFailedFaultType_FaultCause* _wsrfbf__SubscribeCreationFailedFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__SubscribeCreationFailedFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__SubscribeCreationFailedFaultType_FaultCause::soap_del() deep deletes _wsrfbf__SubscribeCreationFailedFaultType_FaultCause data members, use only after _wsrfbf__SubscribeCreationFailedFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__SubscribeCreationFailedFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__SubscribeCreationFailedFaultType_FaultCause or derived type identifier
    class _wsrfbf__SubscribeCreationFailedFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__InvalidFilterFaultType operations:
/// - wsnt__InvalidFilterFaultType* soap_new_wsnt__InvalidFilterFaultType(soap*) allocate and default initialize
/// - wsnt__InvalidFilterFaultType* soap_new_wsnt__InvalidFilterFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__InvalidFilterFaultType* soap_new_req_wsnt__InvalidFilterFaultType(soap*, ...) allocate, set required members
/// - wsnt__InvalidFilterFaultType* soap_new_set_wsnt__InvalidFilterFaultType(soap*, ...) allocate, set all public members
/// - wsnt__InvalidFilterFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__InvalidFilterFaultType(soap*, wsnt__InvalidFilterFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidFilterFaultType(soap*, wsnt__InvalidFilterFaultType*) serialize to a stream
/// - wsnt__InvalidFilterFaultType* wsnt__InvalidFilterFaultType::soap_dup(soap*) returns deep copy of wsnt__InvalidFilterFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__InvalidFilterFaultType::soap_del() deep deletes wsnt__InvalidFilterFaultType data members, use only after wsnt__InvalidFilterFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__InvalidFilterFaultType::soap_type() returns SOAP_TYPE_wsnt__InvalidFilterFaultType or derived type identifier
class wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__InvalidFilterFaultType_ErrorCode operations:
/// - _wsrfbf__InvalidFilterFaultType_ErrorCode* soap_new__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__InvalidFilterFaultType_ErrorCode* soap_new__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidFilterFaultType_ErrorCode* soap_new_req__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidFilterFaultType_ErrorCode* soap_new_set__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidFilterFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, _wsrfbf__InvalidFilterFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, _wsrfbf__InvalidFilterFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__InvalidFilterFaultType_ErrorCode* _wsrfbf__InvalidFilterFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidFilterFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidFilterFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__InvalidFilterFaultType_ErrorCode data members, use only after _wsrfbf__InvalidFilterFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidFilterFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__InvalidFilterFaultType_ErrorCode or derived type identifier
    class _wsrfbf__InvalidFilterFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__InvalidFilterFaultType_Description operations:
/// - _wsrfbf__InvalidFilterFaultType_Description* soap_new__wsrfbf__InvalidFilterFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__InvalidFilterFaultType_Description* soap_new__wsrfbf__InvalidFilterFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidFilterFaultType_Description* soap_new_req__wsrfbf__InvalidFilterFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidFilterFaultType_Description* soap_new_set__wsrfbf__InvalidFilterFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidFilterFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidFilterFaultType_Description(soap*, _wsrfbf__InvalidFilterFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidFilterFaultType_Description(soap*, _wsrfbf__InvalidFilterFaultType_Description*) serialize to a stream
/// - _wsrfbf__InvalidFilterFaultType_Description* _wsrfbf__InvalidFilterFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidFilterFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidFilterFaultType_Description::soap_del() deep deletes _wsrfbf__InvalidFilterFaultType_Description data members, use only after _wsrfbf__InvalidFilterFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidFilterFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__InvalidFilterFaultType_Description or derived type identifier
    class _wsrfbf__InvalidFilterFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__InvalidFilterFaultType_FaultCause operations:
/// - _wsrfbf__InvalidFilterFaultType_FaultCause* soap_new__wsrfbf__InvalidFilterFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__InvalidFilterFaultType_FaultCause* soap_new__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidFilterFaultType_FaultCause* soap_new_req__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidFilterFaultType_FaultCause* soap_new_set__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidFilterFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, _wsrfbf__InvalidFilterFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, _wsrfbf__InvalidFilterFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__InvalidFilterFaultType_FaultCause* _wsrfbf__InvalidFilterFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidFilterFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidFilterFaultType_FaultCause::soap_del() deep deletes _wsrfbf__InvalidFilterFaultType_FaultCause data members, use only after _wsrfbf__InvalidFilterFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidFilterFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__InvalidFilterFaultType_FaultCause or derived type identifier
    class _wsrfbf__InvalidFilterFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Vector of xsd__QName of length 1..unbounded.
    std::vector<xsd__QName             > UnknownFilter                  1;	///< Multiple elements.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__TopicExpressionDialectUnknownFaultType operations:
/// - wsnt__TopicExpressionDialectUnknownFaultType* soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap*) allocate and default initialize
/// - wsnt__TopicExpressionDialectUnknownFaultType* soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__TopicExpressionDialectUnknownFaultType* soap_new_req_wsnt__TopicExpressionDialectUnknownFaultType(soap*, ...) allocate, set required members
/// - wsnt__TopicExpressionDialectUnknownFaultType* soap_new_set_wsnt__TopicExpressionDialectUnknownFaultType(soap*, ...) allocate, set all public members
/// - wsnt__TopicExpressionDialectUnknownFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__TopicExpressionDialectUnknownFaultType(soap*, wsnt__TopicExpressionDialectUnknownFaultType*) deserialize from a stream
/// - int soap_write_wsnt__TopicExpressionDialectUnknownFaultType(soap*, wsnt__TopicExpressionDialectUnknownFaultType*) serialize to a stream
/// - wsnt__TopicExpressionDialectUnknownFaultType* wsnt__TopicExpressionDialectUnknownFaultType::soap_dup(soap*) returns deep copy of wsnt__TopicExpressionDialectUnknownFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__TopicExpressionDialectUnknownFaultType::soap_del() deep deletes wsnt__TopicExpressionDialectUnknownFaultType data members, use only after wsnt__TopicExpressionDialectUnknownFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__TopicExpressionDialectUnknownFaultType::soap_type() returns SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType or derived type identifier
class wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode operations:
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode* soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode* soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode* soap_new_req__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode* soap_new_set__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode* _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode data members, use only after _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode or derived type identifier
    class _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__TopicExpressionDialectUnknownFaultType_Description operations:
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_Description* soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_Description* soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_Description* soap_new_req__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_Description* soap_new_set__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_Description*) serialize to a stream
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_Description* _wsrfbf__TopicExpressionDialectUnknownFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__TopicExpressionDialectUnknownFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_Description::soap_del() deep deletes _wsrfbf__TopicExpressionDialectUnknownFaultType_Description data members, use only after _wsrfbf__TopicExpressionDialectUnknownFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__TopicExpressionDialectUnknownFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__TopicExpressionDialectUnknownFaultType_Description or derived type identifier
    class _wsrfbf__TopicExpressionDialectUnknownFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause operations:
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause* soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause* soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause* soap_new_req__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause* soap_new_set__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause* _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause::soap_del() deep deletes _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause data members, use only after _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause or derived type identifier
    class _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__InvalidTopicExpressionFaultType operations:
/// - wsnt__InvalidTopicExpressionFaultType* soap_new_wsnt__InvalidTopicExpressionFaultType(soap*) allocate and default initialize
/// - wsnt__InvalidTopicExpressionFaultType* soap_new_wsnt__InvalidTopicExpressionFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__InvalidTopicExpressionFaultType* soap_new_req_wsnt__InvalidTopicExpressionFaultType(soap*, ...) allocate, set required members
/// - wsnt__InvalidTopicExpressionFaultType* soap_new_set_wsnt__InvalidTopicExpressionFaultType(soap*, ...) allocate, set all public members
/// - wsnt__InvalidTopicExpressionFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__InvalidTopicExpressionFaultType(soap*, wsnt__InvalidTopicExpressionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidTopicExpressionFaultType(soap*, wsnt__InvalidTopicExpressionFaultType*) serialize to a stream
/// - wsnt__InvalidTopicExpressionFaultType* wsnt__InvalidTopicExpressionFaultType::soap_dup(soap*) returns deep copy of wsnt__InvalidTopicExpressionFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__InvalidTopicExpressionFaultType::soap_del() deep deletes wsnt__InvalidTopicExpressionFaultType data members, use only after wsnt__InvalidTopicExpressionFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__InvalidTopicExpressionFaultType::soap_type() returns SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType or derived type identifier
class wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode operations:
/// - _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode* soap_new__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode* soap_new__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode* soap_new_req__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode* soap_new_set__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode* _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode data members, use only after _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode or derived type identifier
    class _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__InvalidTopicExpressionFaultType_Description operations:
/// - _wsrfbf__InvalidTopicExpressionFaultType_Description* soap_new__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__InvalidTopicExpressionFaultType_Description* soap_new__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidTopicExpressionFaultType_Description* soap_new_req__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidTopicExpressionFaultType_Description* soap_new_set__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidTopicExpressionFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, _wsrfbf__InvalidTopicExpressionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, _wsrfbf__InvalidTopicExpressionFaultType_Description*) serialize to a stream
/// - _wsrfbf__InvalidTopicExpressionFaultType_Description* _wsrfbf__InvalidTopicExpressionFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidTopicExpressionFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidTopicExpressionFaultType_Description::soap_del() deep deletes _wsrfbf__InvalidTopicExpressionFaultType_Description data members, use only after _wsrfbf__InvalidTopicExpressionFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidTopicExpressionFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__InvalidTopicExpressionFaultType_Description or derived type identifier
    class _wsrfbf__InvalidTopicExpressionFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__InvalidTopicExpressionFaultType_FaultCause operations:
/// - _wsrfbf__InvalidTopicExpressionFaultType_FaultCause* soap_new__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__InvalidTopicExpressionFaultType_FaultCause* soap_new__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidTopicExpressionFaultType_FaultCause* soap_new_req__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidTopicExpressionFaultType_FaultCause* soap_new_set__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidTopicExpressionFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidTopicExpressionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidTopicExpressionFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__InvalidTopicExpressionFaultType_FaultCause* _wsrfbf__InvalidTopicExpressionFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidTopicExpressionFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidTopicExpressionFaultType_FaultCause::soap_del() deep deletes _wsrfbf__InvalidTopicExpressionFaultType_FaultCause data members, use only after _wsrfbf__InvalidTopicExpressionFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidTopicExpressionFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__InvalidTopicExpressionFaultType_FaultCause or derived type identifier
    class _wsrfbf__InvalidTopicExpressionFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__TopicNotSupportedFaultType operations:
/// - wsnt__TopicNotSupportedFaultType* soap_new_wsnt__TopicNotSupportedFaultType(soap*) allocate and default initialize
/// - wsnt__TopicNotSupportedFaultType* soap_new_wsnt__TopicNotSupportedFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__TopicNotSupportedFaultType* soap_new_req_wsnt__TopicNotSupportedFaultType(soap*, ...) allocate, set required members
/// - wsnt__TopicNotSupportedFaultType* soap_new_set_wsnt__TopicNotSupportedFaultType(soap*, ...) allocate, set all public members
/// - wsnt__TopicNotSupportedFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__TopicNotSupportedFaultType(soap*, wsnt__TopicNotSupportedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__TopicNotSupportedFaultType(soap*, wsnt__TopicNotSupportedFaultType*) serialize to a stream
/// - wsnt__TopicNotSupportedFaultType* wsnt__TopicNotSupportedFaultType::soap_dup(soap*) returns deep copy of wsnt__TopicNotSupportedFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__TopicNotSupportedFaultType::soap_del() deep deletes wsnt__TopicNotSupportedFaultType data members, use only after wsnt__TopicNotSupportedFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__TopicNotSupportedFaultType::soap_type() returns SOAP_TYPE_wsnt__TopicNotSupportedFaultType or derived type identifier
class wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__TopicNotSupportedFaultType_ErrorCode operations:
/// - _wsrfbf__TopicNotSupportedFaultType_ErrorCode* soap_new__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__TopicNotSupportedFaultType_ErrorCode* soap_new__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__TopicNotSupportedFaultType_ErrorCode* soap_new_req__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__TopicNotSupportedFaultType_ErrorCode* soap_new_set__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__TopicNotSupportedFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, _wsrfbf__TopicNotSupportedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, _wsrfbf__TopicNotSupportedFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__TopicNotSupportedFaultType_ErrorCode* _wsrfbf__TopicNotSupportedFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__TopicNotSupportedFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__TopicNotSupportedFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__TopicNotSupportedFaultType_ErrorCode data members, use only after _wsrfbf__TopicNotSupportedFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__TopicNotSupportedFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__TopicNotSupportedFaultType_ErrorCode or derived type identifier
    class _wsrfbf__TopicNotSupportedFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__TopicNotSupportedFaultType_Description operations:
/// - _wsrfbf__TopicNotSupportedFaultType_Description* soap_new__wsrfbf__TopicNotSupportedFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__TopicNotSupportedFaultType_Description* soap_new__wsrfbf__TopicNotSupportedFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__TopicNotSupportedFaultType_Description* soap_new_req__wsrfbf__TopicNotSupportedFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__TopicNotSupportedFaultType_Description* soap_new_set__wsrfbf__TopicNotSupportedFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__TopicNotSupportedFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__TopicNotSupportedFaultType_Description(soap*, _wsrfbf__TopicNotSupportedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicNotSupportedFaultType_Description(soap*, _wsrfbf__TopicNotSupportedFaultType_Description*) serialize to a stream
/// - _wsrfbf__TopicNotSupportedFaultType_Description* _wsrfbf__TopicNotSupportedFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__TopicNotSupportedFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__TopicNotSupportedFaultType_Description::soap_del() deep deletes _wsrfbf__TopicNotSupportedFaultType_Description data members, use only after _wsrfbf__TopicNotSupportedFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__TopicNotSupportedFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__TopicNotSupportedFaultType_Description or derived type identifier
    class _wsrfbf__TopicNotSupportedFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__TopicNotSupportedFaultType_FaultCause operations:
/// - _wsrfbf__TopicNotSupportedFaultType_FaultCause* soap_new__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__TopicNotSupportedFaultType_FaultCause* soap_new__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__TopicNotSupportedFaultType_FaultCause* soap_new_req__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__TopicNotSupportedFaultType_FaultCause* soap_new_set__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__TopicNotSupportedFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, _wsrfbf__TopicNotSupportedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, _wsrfbf__TopicNotSupportedFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__TopicNotSupportedFaultType_FaultCause* _wsrfbf__TopicNotSupportedFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__TopicNotSupportedFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__TopicNotSupportedFaultType_FaultCause::soap_del() deep deletes _wsrfbf__TopicNotSupportedFaultType_FaultCause data members, use only after _wsrfbf__TopicNotSupportedFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__TopicNotSupportedFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__TopicNotSupportedFaultType_FaultCause or derived type identifier
    class _wsrfbf__TopicNotSupportedFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__MultipleTopicsSpecifiedFaultType operations:
/// - wsnt__MultipleTopicsSpecifiedFaultType* soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap*) allocate and default initialize
/// - wsnt__MultipleTopicsSpecifiedFaultType* soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__MultipleTopicsSpecifiedFaultType* soap_new_req_wsnt__MultipleTopicsSpecifiedFaultType(soap*, ...) allocate, set required members
/// - wsnt__MultipleTopicsSpecifiedFaultType* soap_new_set_wsnt__MultipleTopicsSpecifiedFaultType(soap*, ...) allocate, set all public members
/// - wsnt__MultipleTopicsSpecifiedFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__MultipleTopicsSpecifiedFaultType(soap*, wsnt__MultipleTopicsSpecifiedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__MultipleTopicsSpecifiedFaultType(soap*, wsnt__MultipleTopicsSpecifiedFaultType*) serialize to a stream
/// - wsnt__MultipleTopicsSpecifiedFaultType* wsnt__MultipleTopicsSpecifiedFaultType::soap_dup(soap*) returns deep copy of wsnt__MultipleTopicsSpecifiedFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__MultipleTopicsSpecifiedFaultType::soap_del() deep deletes wsnt__MultipleTopicsSpecifiedFaultType data members, use only after wsnt__MultipleTopicsSpecifiedFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__MultipleTopicsSpecifiedFaultType::soap_type() returns SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType or derived type identifier
class wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode operations:
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode* soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode* soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode* soap_new_req__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode* soap_new_set__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode* _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode data members, use only after _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode or derived type identifier
    class _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__MultipleTopicsSpecifiedFaultType_Description operations:
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_Description* soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_Description* soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_Description* soap_new_req__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_Description* soap_new_set__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_Description*) serialize to a stream
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_Description* _wsrfbf__MultipleTopicsSpecifiedFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__MultipleTopicsSpecifiedFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_Description::soap_del() deep deletes _wsrfbf__MultipleTopicsSpecifiedFaultType_Description data members, use only after _wsrfbf__MultipleTopicsSpecifiedFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__MultipleTopicsSpecifiedFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__MultipleTopicsSpecifiedFaultType_Description or derived type identifier
    class _wsrfbf__MultipleTopicsSpecifiedFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause operations:
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause* soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause* soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause* soap_new_req__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause* soap_new_set__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause* _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause::soap_del() deep deletes _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause data members, use only after _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause or derived type identifier
    class _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__InvalidProducerPropertiesExpressionFaultType operations:
/// - wsnt__InvalidProducerPropertiesExpressionFaultType* soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*) allocate and default initialize
/// - wsnt__InvalidProducerPropertiesExpressionFaultType* soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__InvalidProducerPropertiesExpressionFaultType* soap_new_req_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, ...) allocate, set required members
/// - wsnt__InvalidProducerPropertiesExpressionFaultType* soap_new_set_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, ...) allocate, set all public members
/// - wsnt__InvalidProducerPropertiesExpressionFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, wsnt__InvalidProducerPropertiesExpressionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, wsnt__InvalidProducerPropertiesExpressionFaultType*) serialize to a stream
/// - wsnt__InvalidProducerPropertiesExpressionFaultType* wsnt__InvalidProducerPropertiesExpressionFaultType::soap_dup(soap*) returns deep copy of wsnt__InvalidProducerPropertiesExpressionFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__InvalidProducerPropertiesExpressionFaultType::soap_del() deep deletes wsnt__InvalidProducerPropertiesExpressionFaultType data members, use only after wsnt__InvalidProducerPropertiesExpressionFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__InvalidProducerPropertiesExpressionFaultType::soap_type() returns SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType or derived type identifier
class wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode operations:
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode* soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode* soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode* soap_new_req__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode* soap_new_set__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode* _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode data members, use only after _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode or derived type identifier
    class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description operations:
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description* soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description* soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description* soap_new_req__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description* soap_new_set__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description*) serialize to a stream
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description* _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description::soap_del() deep deletes _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description data members, use only after _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description or derived type identifier
    class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause operations:
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause* soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause* soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause* soap_new_req__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause* soap_new_set__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause* _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause::soap_del() deep deletes _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause data members, use only after _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause or derived type identifier
    class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__InvalidMessageContentExpressionFaultType operations:
/// - wsnt__InvalidMessageContentExpressionFaultType* soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap*) allocate and default initialize
/// - wsnt__InvalidMessageContentExpressionFaultType* soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__InvalidMessageContentExpressionFaultType* soap_new_req_wsnt__InvalidMessageContentExpressionFaultType(soap*, ...) allocate, set required members
/// - wsnt__InvalidMessageContentExpressionFaultType* soap_new_set_wsnt__InvalidMessageContentExpressionFaultType(soap*, ...) allocate, set all public members
/// - wsnt__InvalidMessageContentExpressionFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__InvalidMessageContentExpressionFaultType(soap*, wsnt__InvalidMessageContentExpressionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidMessageContentExpressionFaultType(soap*, wsnt__InvalidMessageContentExpressionFaultType*) serialize to a stream
/// - wsnt__InvalidMessageContentExpressionFaultType* wsnt__InvalidMessageContentExpressionFaultType::soap_dup(soap*) returns deep copy of wsnt__InvalidMessageContentExpressionFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__InvalidMessageContentExpressionFaultType::soap_del() deep deletes wsnt__InvalidMessageContentExpressionFaultType data members, use only after wsnt__InvalidMessageContentExpressionFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__InvalidMessageContentExpressionFaultType::soap_type() returns SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType or derived type identifier
class wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode operations:
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode* soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode* soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode* soap_new_req__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode* soap_new_set__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode* _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode data members, use only after _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode or derived type identifier
    class _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__InvalidMessageContentExpressionFaultType_Description operations:
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_Description* soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_Description* soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_Description* soap_new_req__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_Description* soap_new_set__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_Description*) serialize to a stream
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_Description* _wsrfbf__InvalidMessageContentExpressionFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidMessageContentExpressionFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_Description::soap_del() deep deletes _wsrfbf__InvalidMessageContentExpressionFaultType_Description data members, use only after _wsrfbf__InvalidMessageContentExpressionFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidMessageContentExpressionFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__InvalidMessageContentExpressionFaultType_Description or derived type identifier
    class _wsrfbf__InvalidMessageContentExpressionFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause operations:
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause* soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause* soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause* soap_new_req__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause* soap_new_set__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause* _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause::soap_del() deep deletes _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause data members, use only after _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause or derived type identifier
    class _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnrecognizedPolicyRequestFaultType operations:
/// - wsnt__UnrecognizedPolicyRequestFaultType* soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap*) allocate and default initialize
/// - wsnt__UnrecognizedPolicyRequestFaultType* soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnrecognizedPolicyRequestFaultType* soap_new_req_wsnt__UnrecognizedPolicyRequestFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnrecognizedPolicyRequestFaultType* soap_new_set_wsnt__UnrecognizedPolicyRequestFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnrecognizedPolicyRequestFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnrecognizedPolicyRequestFaultType(soap*, wsnt__UnrecognizedPolicyRequestFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnrecognizedPolicyRequestFaultType(soap*, wsnt__UnrecognizedPolicyRequestFaultType*) serialize to a stream
/// - wsnt__UnrecognizedPolicyRequestFaultType* wsnt__UnrecognizedPolicyRequestFaultType::soap_dup(soap*) returns deep copy of wsnt__UnrecognizedPolicyRequestFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnrecognizedPolicyRequestFaultType::soap_del() deep deletes wsnt__UnrecognizedPolicyRequestFaultType data members, use only after wsnt__UnrecognizedPolicyRequestFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnrecognizedPolicyRequestFaultType::soap_type() returns SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType or derived type identifier
class wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode operations:
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode* soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode* soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode* soap_new_req__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode* soap_new_set__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode* _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode data members, use only after _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnrecognizedPolicyRequestFaultType_Description operations:
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_Description* soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_Description* soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_Description* soap_new_req__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_Description* soap_new_set__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_Description* _wsrfbf__UnrecognizedPolicyRequestFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnrecognizedPolicyRequestFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_Description::soap_del() deep deletes _wsrfbf__UnrecognizedPolicyRequestFaultType_Description data members, use only after _wsrfbf__UnrecognizedPolicyRequestFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnrecognizedPolicyRequestFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnrecognizedPolicyRequestFaultType_Description or derived type identifier
    class _wsrfbf__UnrecognizedPolicyRequestFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause operations:
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause* soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause* soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause* soap_new_req__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause* soap_new_set__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause* _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause data members, use only after _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Vector of xsd__QName of length 0..unbounded.
    std::vector<xsd__QName             > UnrecognizedPolicy             0;	///< Multiple elements.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnsupportedPolicyRequestFaultType operations:
/// - wsnt__UnsupportedPolicyRequestFaultType* soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap*) allocate and default initialize
/// - wsnt__UnsupportedPolicyRequestFaultType* soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnsupportedPolicyRequestFaultType* soap_new_req_wsnt__UnsupportedPolicyRequestFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnsupportedPolicyRequestFaultType* soap_new_set_wsnt__UnsupportedPolicyRequestFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnsupportedPolicyRequestFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnsupportedPolicyRequestFaultType(soap*, wsnt__UnsupportedPolicyRequestFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnsupportedPolicyRequestFaultType(soap*, wsnt__UnsupportedPolicyRequestFaultType*) serialize to a stream
/// - wsnt__UnsupportedPolicyRequestFaultType* wsnt__UnsupportedPolicyRequestFaultType::soap_dup(soap*) returns deep copy of wsnt__UnsupportedPolicyRequestFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnsupportedPolicyRequestFaultType::soap_del() deep deletes wsnt__UnsupportedPolicyRequestFaultType data members, use only after wsnt__UnsupportedPolicyRequestFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnsupportedPolicyRequestFaultType::soap_type() returns SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType or derived type identifier
class wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode operations:
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode* soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode* soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode* soap_new_req__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode* soap_new_set__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode* _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode data members, use only after _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnsupportedPolicyRequestFaultType_Description operations:
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_Description* soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_Description* soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_Description* soap_new_req__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_Description* soap_new_set__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_Description* _wsrfbf__UnsupportedPolicyRequestFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnsupportedPolicyRequestFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_Description::soap_del() deep deletes _wsrfbf__UnsupportedPolicyRequestFaultType_Description data members, use only after _wsrfbf__UnsupportedPolicyRequestFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnsupportedPolicyRequestFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnsupportedPolicyRequestFaultType_Description or derived type identifier
    class _wsrfbf__UnsupportedPolicyRequestFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause operations:
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause* soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause* soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause* soap_new_req__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause* soap_new_set__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause* _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause data members, use only after _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Vector of xsd__QName of length 0..unbounded.
    std::vector<xsd__QName             > UnsupportedPolicy              0;	///< Multiple elements.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__NotifyMessageNotSupportedFaultType operations:
/// - wsnt__NotifyMessageNotSupportedFaultType* soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap*) allocate and default initialize
/// - wsnt__NotifyMessageNotSupportedFaultType* soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__NotifyMessageNotSupportedFaultType* soap_new_req_wsnt__NotifyMessageNotSupportedFaultType(soap*, ...) allocate, set required members
/// - wsnt__NotifyMessageNotSupportedFaultType* soap_new_set_wsnt__NotifyMessageNotSupportedFaultType(soap*, ...) allocate, set all public members
/// - wsnt__NotifyMessageNotSupportedFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__NotifyMessageNotSupportedFaultType(soap*, wsnt__NotifyMessageNotSupportedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__NotifyMessageNotSupportedFaultType(soap*, wsnt__NotifyMessageNotSupportedFaultType*) serialize to a stream
/// - wsnt__NotifyMessageNotSupportedFaultType* wsnt__NotifyMessageNotSupportedFaultType::soap_dup(soap*) returns deep copy of wsnt__NotifyMessageNotSupportedFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__NotifyMessageNotSupportedFaultType::soap_del() deep deletes wsnt__NotifyMessageNotSupportedFaultType data members, use only after wsnt__NotifyMessageNotSupportedFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__NotifyMessageNotSupportedFaultType::soap_type() returns SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType or derived type identifier
class wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode operations:
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode* soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode* soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode* soap_new_req__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode* soap_new_set__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode* _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode data members, use only after _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode or derived type identifier
    class _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__NotifyMessageNotSupportedFaultType_Description operations:
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_Description* soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_Description* soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_Description* soap_new_req__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_Description* soap_new_set__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_Description*) serialize to a stream
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_Description* _wsrfbf__NotifyMessageNotSupportedFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__NotifyMessageNotSupportedFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_Description::soap_del() deep deletes _wsrfbf__NotifyMessageNotSupportedFaultType_Description data members, use only after _wsrfbf__NotifyMessageNotSupportedFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__NotifyMessageNotSupportedFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__NotifyMessageNotSupportedFaultType_Description or derived type identifier
    class _wsrfbf__NotifyMessageNotSupportedFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause operations:
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause* soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause* soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause* soap_new_req__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause* soap_new_set__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause* _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause::soap_del() deep deletes _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause data members, use only after _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause or derived type identifier
    class _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnacceptableInitialTerminationTimeFaultType operations:
/// - wsnt__UnacceptableInitialTerminationTimeFaultType* soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*) allocate and default initialize
/// - wsnt__UnacceptableInitialTerminationTimeFaultType* soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnacceptableInitialTerminationTimeFaultType* soap_new_req_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnacceptableInitialTerminationTimeFaultType* soap_new_set_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnacceptableInitialTerminationTimeFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, wsnt__UnacceptableInitialTerminationTimeFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, wsnt__UnacceptableInitialTerminationTimeFaultType*) serialize to a stream
/// - wsnt__UnacceptableInitialTerminationTimeFaultType* wsnt__UnacceptableInitialTerminationTimeFaultType::soap_dup(soap*) returns deep copy of wsnt__UnacceptableInitialTerminationTimeFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnacceptableInitialTerminationTimeFaultType::soap_del() deep deletes wsnt__UnacceptableInitialTerminationTimeFaultType data members, use only after wsnt__UnacceptableInitialTerminationTimeFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnacceptableInitialTerminationTimeFaultType::soap_type() returns SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType or derived type identifier
class wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode operations:
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode* soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode* soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode* soap_new_req__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode* soap_new_set__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode* _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode data members, use only after _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description operations:
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description* soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description* soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description* soap_new_req__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description* soap_new_set__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description* _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description::soap_del() deep deletes _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description data members, use only after _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description or derived type identifier
    class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause operations:
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause* soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause* soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause* soap_new_req__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause* soap_new_set__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause* _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause data members, use only after _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Element "MinimumTime" of type xs:dateTime.
    xsd__dateTime                        MinimumTime                    1;	///< Required element.
/// Element "MaximumTime" of type xs:dateTime.
    xsd__dateTime*                       MaximumTime                    0;	///< Optional element.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__NoCurrentMessageOnTopicFaultType operations:
/// - wsnt__NoCurrentMessageOnTopicFaultType* soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap*) allocate and default initialize
/// - wsnt__NoCurrentMessageOnTopicFaultType* soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__NoCurrentMessageOnTopicFaultType* soap_new_req_wsnt__NoCurrentMessageOnTopicFaultType(soap*, ...) allocate, set required members
/// - wsnt__NoCurrentMessageOnTopicFaultType* soap_new_set_wsnt__NoCurrentMessageOnTopicFaultType(soap*, ...) allocate, set all public members
/// - wsnt__NoCurrentMessageOnTopicFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__NoCurrentMessageOnTopicFaultType(soap*, wsnt__NoCurrentMessageOnTopicFaultType*) deserialize from a stream
/// - int soap_write_wsnt__NoCurrentMessageOnTopicFaultType(soap*, wsnt__NoCurrentMessageOnTopicFaultType*) serialize to a stream
/// - wsnt__NoCurrentMessageOnTopicFaultType* wsnt__NoCurrentMessageOnTopicFaultType::soap_dup(soap*) returns deep copy of wsnt__NoCurrentMessageOnTopicFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__NoCurrentMessageOnTopicFaultType::soap_del() deep deletes wsnt__NoCurrentMessageOnTopicFaultType data members, use only after wsnt__NoCurrentMessageOnTopicFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__NoCurrentMessageOnTopicFaultType::soap_type() returns SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType or derived type identifier
class wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode operations:
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode* soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode* soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode* soap_new_req__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode* soap_new_set__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode* _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode data members, use only after _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode or derived type identifier
    class _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__NoCurrentMessageOnTopicFaultType_Description operations:
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_Description* soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_Description* soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_Description* soap_new_req__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_Description* soap_new_set__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_Description*) serialize to a stream
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_Description* _wsrfbf__NoCurrentMessageOnTopicFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__NoCurrentMessageOnTopicFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_Description::soap_del() deep deletes _wsrfbf__NoCurrentMessageOnTopicFaultType_Description data members, use only after _wsrfbf__NoCurrentMessageOnTopicFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__NoCurrentMessageOnTopicFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__NoCurrentMessageOnTopicFaultType_Description or derived type identifier
    class _wsrfbf__NoCurrentMessageOnTopicFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause operations:
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause* soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause* soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause* soap_new_req__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause* soap_new_set__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause* _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause::soap_del() deep deletes _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause data members, use only after _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause or derived type identifier
    class _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnableToGetMessagesFaultType operations:
/// - wsnt__UnableToGetMessagesFaultType* soap_new_wsnt__UnableToGetMessagesFaultType(soap*) allocate and default initialize
/// - wsnt__UnableToGetMessagesFaultType* soap_new_wsnt__UnableToGetMessagesFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnableToGetMessagesFaultType* soap_new_req_wsnt__UnableToGetMessagesFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnableToGetMessagesFaultType* soap_new_set_wsnt__UnableToGetMessagesFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnableToGetMessagesFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnableToGetMessagesFaultType(soap*, wsnt__UnableToGetMessagesFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToGetMessagesFaultType(soap*, wsnt__UnableToGetMessagesFaultType*) serialize to a stream
/// - wsnt__UnableToGetMessagesFaultType* wsnt__UnableToGetMessagesFaultType::soap_dup(soap*) returns deep copy of wsnt__UnableToGetMessagesFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnableToGetMessagesFaultType::soap_del() deep deletes wsnt__UnableToGetMessagesFaultType data members, use only after wsnt__UnableToGetMessagesFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnableToGetMessagesFaultType::soap_type() returns SOAP_TYPE_wsnt__UnableToGetMessagesFaultType or derived type identifier
class wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnableToGetMessagesFaultType_ErrorCode operations:
/// - _wsrfbf__UnableToGetMessagesFaultType_ErrorCode* soap_new__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnableToGetMessagesFaultType_ErrorCode* soap_new__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToGetMessagesFaultType_ErrorCode* soap_new_req__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToGetMessagesFaultType_ErrorCode* soap_new_set__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToGetMessagesFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, _wsrfbf__UnableToGetMessagesFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, _wsrfbf__UnableToGetMessagesFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnableToGetMessagesFaultType_ErrorCode* _wsrfbf__UnableToGetMessagesFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToGetMessagesFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToGetMessagesFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnableToGetMessagesFaultType_ErrorCode data members, use only after _wsrfbf__UnableToGetMessagesFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToGetMessagesFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnableToGetMessagesFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnableToGetMessagesFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnableToGetMessagesFaultType_Description operations:
/// - _wsrfbf__UnableToGetMessagesFaultType_Description* soap_new__wsrfbf__UnableToGetMessagesFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnableToGetMessagesFaultType_Description* soap_new__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToGetMessagesFaultType_Description* soap_new_req__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToGetMessagesFaultType_Description* soap_new_set__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToGetMessagesFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, _wsrfbf__UnableToGetMessagesFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, _wsrfbf__UnableToGetMessagesFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnableToGetMessagesFaultType_Description* _wsrfbf__UnableToGetMessagesFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToGetMessagesFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToGetMessagesFaultType_Description::soap_del() deep deletes _wsrfbf__UnableToGetMessagesFaultType_Description data members, use only after _wsrfbf__UnableToGetMessagesFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToGetMessagesFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnableToGetMessagesFaultType_Description or derived type identifier
    class _wsrfbf__UnableToGetMessagesFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnableToGetMessagesFaultType_FaultCause operations:
/// - _wsrfbf__UnableToGetMessagesFaultType_FaultCause* soap_new__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnableToGetMessagesFaultType_FaultCause* soap_new__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToGetMessagesFaultType_FaultCause* soap_new_req__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToGetMessagesFaultType_FaultCause* soap_new_set__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToGetMessagesFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, _wsrfbf__UnableToGetMessagesFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, _wsrfbf__UnableToGetMessagesFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnableToGetMessagesFaultType_FaultCause* _wsrfbf__UnableToGetMessagesFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToGetMessagesFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToGetMessagesFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnableToGetMessagesFaultType_FaultCause data members, use only after _wsrfbf__UnableToGetMessagesFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToGetMessagesFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnableToGetMessagesFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnableToGetMessagesFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnableToDestroyPullPointFaultType operations:
/// - wsnt__UnableToDestroyPullPointFaultType* soap_new_wsnt__UnableToDestroyPullPointFaultType(soap*) allocate and default initialize
/// - wsnt__UnableToDestroyPullPointFaultType* soap_new_wsnt__UnableToDestroyPullPointFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnableToDestroyPullPointFaultType* soap_new_req_wsnt__UnableToDestroyPullPointFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnableToDestroyPullPointFaultType* soap_new_set_wsnt__UnableToDestroyPullPointFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnableToDestroyPullPointFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnableToDestroyPullPointFaultType(soap*, wsnt__UnableToDestroyPullPointFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToDestroyPullPointFaultType(soap*, wsnt__UnableToDestroyPullPointFaultType*) serialize to a stream
/// - wsnt__UnableToDestroyPullPointFaultType* wsnt__UnableToDestroyPullPointFaultType::soap_dup(soap*) returns deep copy of wsnt__UnableToDestroyPullPointFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnableToDestroyPullPointFaultType::soap_del() deep deletes wsnt__UnableToDestroyPullPointFaultType data members, use only after wsnt__UnableToDestroyPullPointFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnableToDestroyPullPointFaultType::soap_type() returns SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType or derived type identifier
class wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode operations:
/// - _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode* soap_new__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode* soap_new__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode* soap_new_req__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode* soap_new_set__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode* _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode data members, use only after _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnableToDestroyPullPointFaultType_Description operations:
/// - _wsrfbf__UnableToDestroyPullPointFaultType_Description* soap_new__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnableToDestroyPullPointFaultType_Description* soap_new__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToDestroyPullPointFaultType_Description* soap_new_req__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToDestroyPullPointFaultType_Description* soap_new_set__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToDestroyPullPointFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnableToDestroyPullPointFaultType_Description* _wsrfbf__UnableToDestroyPullPointFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToDestroyPullPointFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToDestroyPullPointFaultType_Description::soap_del() deep deletes _wsrfbf__UnableToDestroyPullPointFaultType_Description data members, use only after _wsrfbf__UnableToDestroyPullPointFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToDestroyPullPointFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnableToDestroyPullPointFaultType_Description or derived type identifier
    class _wsrfbf__UnableToDestroyPullPointFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause operations:
/// - _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause* soap_new__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause* soap_new__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause* soap_new_req__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause* soap_new_set__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause* _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause data members, use only after _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnableToCreatePullPointFaultType operations:
/// - wsnt__UnableToCreatePullPointFaultType* soap_new_wsnt__UnableToCreatePullPointFaultType(soap*) allocate and default initialize
/// - wsnt__UnableToCreatePullPointFaultType* soap_new_wsnt__UnableToCreatePullPointFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnableToCreatePullPointFaultType* soap_new_req_wsnt__UnableToCreatePullPointFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnableToCreatePullPointFaultType* soap_new_set_wsnt__UnableToCreatePullPointFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnableToCreatePullPointFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnableToCreatePullPointFaultType(soap*, wsnt__UnableToCreatePullPointFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToCreatePullPointFaultType(soap*, wsnt__UnableToCreatePullPointFaultType*) serialize to a stream
/// - wsnt__UnableToCreatePullPointFaultType* wsnt__UnableToCreatePullPointFaultType::soap_dup(soap*) returns deep copy of wsnt__UnableToCreatePullPointFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnableToCreatePullPointFaultType::soap_del() deep deletes wsnt__UnableToCreatePullPointFaultType data members, use only after wsnt__UnableToCreatePullPointFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnableToCreatePullPointFaultType::soap_type() returns SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType or derived type identifier
class wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode operations:
/// - _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode* soap_new__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode* soap_new__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode* soap_new_req__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode* soap_new_set__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode* _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode data members, use only after _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnableToCreatePullPointFaultType_Description operations:
/// - _wsrfbf__UnableToCreatePullPointFaultType_Description* soap_new__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnableToCreatePullPointFaultType_Description* soap_new__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToCreatePullPointFaultType_Description* soap_new_req__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToCreatePullPointFaultType_Description* soap_new_set__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToCreatePullPointFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, _wsrfbf__UnableToCreatePullPointFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, _wsrfbf__UnableToCreatePullPointFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnableToCreatePullPointFaultType_Description* _wsrfbf__UnableToCreatePullPointFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToCreatePullPointFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToCreatePullPointFaultType_Description::soap_del() deep deletes _wsrfbf__UnableToCreatePullPointFaultType_Description data members, use only after _wsrfbf__UnableToCreatePullPointFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToCreatePullPointFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnableToCreatePullPointFaultType_Description or derived type identifier
    class _wsrfbf__UnableToCreatePullPointFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnableToCreatePullPointFaultType_FaultCause operations:
/// - _wsrfbf__UnableToCreatePullPointFaultType_FaultCause* soap_new__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnableToCreatePullPointFaultType_FaultCause* soap_new__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToCreatePullPointFaultType_FaultCause* soap_new_req__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToCreatePullPointFaultType_FaultCause* soap_new_set__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToCreatePullPointFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, _wsrfbf__UnableToCreatePullPointFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, _wsrfbf__UnableToCreatePullPointFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnableToCreatePullPointFaultType_FaultCause* _wsrfbf__UnableToCreatePullPointFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToCreatePullPointFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToCreatePullPointFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnableToCreatePullPointFaultType_FaultCause data members, use only after _wsrfbf__UnableToCreatePullPointFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToCreatePullPointFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnableToCreatePullPointFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnableToCreatePullPointFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnacceptableTerminationTimeFaultType operations:
/// - wsnt__UnacceptableTerminationTimeFaultType* soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap*) allocate and default initialize
/// - wsnt__UnacceptableTerminationTimeFaultType* soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnacceptableTerminationTimeFaultType* soap_new_req_wsnt__UnacceptableTerminationTimeFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnacceptableTerminationTimeFaultType* soap_new_set_wsnt__UnacceptableTerminationTimeFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnacceptableTerminationTimeFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnacceptableTerminationTimeFaultType(soap*, wsnt__UnacceptableTerminationTimeFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnacceptableTerminationTimeFaultType(soap*, wsnt__UnacceptableTerminationTimeFaultType*) serialize to a stream
/// - wsnt__UnacceptableTerminationTimeFaultType* wsnt__UnacceptableTerminationTimeFaultType::soap_dup(soap*) returns deep copy of wsnt__UnacceptableTerminationTimeFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnacceptableTerminationTimeFaultType::soap_del() deep deletes wsnt__UnacceptableTerminationTimeFaultType data members, use only after wsnt__UnacceptableTerminationTimeFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnacceptableTerminationTimeFaultType::soap_type() returns SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType or derived type identifier
class wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode operations:
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode* soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode* soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode* soap_new_req__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode* soap_new_set__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode* _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode data members, use only after _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnacceptableTerminationTimeFaultType_Description operations:
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_Description* soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_Description* soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_Description* soap_new_req__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_Description* soap_new_set__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_Description* _wsrfbf__UnacceptableTerminationTimeFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnacceptableTerminationTimeFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_Description::soap_del() deep deletes _wsrfbf__UnacceptableTerminationTimeFaultType_Description data members, use only after _wsrfbf__UnacceptableTerminationTimeFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnacceptableTerminationTimeFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnacceptableTerminationTimeFaultType_Description or derived type identifier
    class _wsrfbf__UnacceptableTerminationTimeFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause operations:
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause* soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause* soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause* soap_new_req__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause* soap_new_set__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause* _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause data members, use only after _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Element "MinimumTime" of type xs:dateTime.
    xsd__dateTime                        MinimumTime                    1;	///< Required element.
/// Element "MaximumTime" of type xs:dateTime.
    xsd__dateTime*                       MaximumTime                    0;	///< Optional element.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__UnableToDestroySubscriptionFaultType operations:
/// - wsnt__UnableToDestroySubscriptionFaultType* soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap*) allocate and default initialize
/// - wsnt__UnableToDestroySubscriptionFaultType* soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__UnableToDestroySubscriptionFaultType* soap_new_req_wsnt__UnableToDestroySubscriptionFaultType(soap*, ...) allocate, set required members
/// - wsnt__UnableToDestroySubscriptionFaultType* soap_new_set_wsnt__UnableToDestroySubscriptionFaultType(soap*, ...) allocate, set all public members
/// - wsnt__UnableToDestroySubscriptionFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__UnableToDestroySubscriptionFaultType(soap*, wsnt__UnableToDestroySubscriptionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToDestroySubscriptionFaultType(soap*, wsnt__UnableToDestroySubscriptionFaultType*) serialize to a stream
/// - wsnt__UnableToDestroySubscriptionFaultType* wsnt__UnableToDestroySubscriptionFaultType::soap_dup(soap*) returns deep copy of wsnt__UnableToDestroySubscriptionFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__UnableToDestroySubscriptionFaultType::soap_del() deep deletes wsnt__UnableToDestroySubscriptionFaultType data members, use only after wsnt__UnableToDestroySubscriptionFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__UnableToDestroySubscriptionFaultType::soap_type() returns SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType or derived type identifier
class wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode operations:
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode* soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode* soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode* soap_new_req__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode* soap_new_set__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode* _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode data members, use only after _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode or derived type identifier
    class _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__UnableToDestroySubscriptionFaultType_Description operations:
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_Description* soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_Description* soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_Description* soap_new_req__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_Description* soap_new_set__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_Description*) serialize to a stream
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_Description* _wsrfbf__UnableToDestroySubscriptionFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToDestroySubscriptionFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_Description::soap_del() deep deletes _wsrfbf__UnableToDestroySubscriptionFaultType_Description data members, use only after _wsrfbf__UnableToDestroySubscriptionFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToDestroySubscriptionFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__UnableToDestroySubscriptionFaultType_Description or derived type identifier
    class _wsrfbf__UnableToDestroySubscriptionFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause operations:
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause* soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause* soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause* soap_new_req__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause* soap_new_set__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause* _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause::soap_del() deep deletes _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause data members, use only after _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause or derived type identifier
    class _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":PauseFailedFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__PauseFailedFaultType operations:
/// - wsnt__PauseFailedFaultType* soap_new_wsnt__PauseFailedFaultType(soap*) allocate and default initialize
/// - wsnt__PauseFailedFaultType* soap_new_wsnt__PauseFailedFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__PauseFailedFaultType* soap_new_req_wsnt__PauseFailedFaultType(soap*, ...) allocate, set required members
/// - wsnt__PauseFailedFaultType* soap_new_set_wsnt__PauseFailedFaultType(soap*, ...) allocate, set all public members
/// - wsnt__PauseFailedFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__PauseFailedFaultType(soap*, wsnt__PauseFailedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__PauseFailedFaultType(soap*, wsnt__PauseFailedFaultType*) serialize to a stream
/// - wsnt__PauseFailedFaultType* wsnt__PauseFailedFaultType::soap_dup(soap*) returns deep copy of wsnt__PauseFailedFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__PauseFailedFaultType::soap_del() deep deletes wsnt__PauseFailedFaultType data members, use only after wsnt__PauseFailedFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__PauseFailedFaultType::soap_type() returns SOAP_TYPE_wsnt__PauseFailedFaultType or derived type identifier
class wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__PauseFailedFaultType_ErrorCode operations:
/// - _wsrfbf__PauseFailedFaultType_ErrorCode* soap_new__wsrfbf__PauseFailedFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__PauseFailedFaultType_ErrorCode* soap_new__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__PauseFailedFaultType_ErrorCode* soap_new_req__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__PauseFailedFaultType_ErrorCode* soap_new_set__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__PauseFailedFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, _wsrfbf__PauseFailedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, _wsrfbf__PauseFailedFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__PauseFailedFaultType_ErrorCode* _wsrfbf__PauseFailedFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__PauseFailedFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__PauseFailedFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__PauseFailedFaultType_ErrorCode data members, use only after _wsrfbf__PauseFailedFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__PauseFailedFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__PauseFailedFaultType_ErrorCode or derived type identifier
    class _wsrfbf__PauseFailedFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__PauseFailedFaultType_Description operations:
/// - _wsrfbf__PauseFailedFaultType_Description* soap_new__wsrfbf__PauseFailedFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__PauseFailedFaultType_Description* soap_new__wsrfbf__PauseFailedFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__PauseFailedFaultType_Description* soap_new_req__wsrfbf__PauseFailedFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__PauseFailedFaultType_Description* soap_new_set__wsrfbf__PauseFailedFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__PauseFailedFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__PauseFailedFaultType_Description(soap*, _wsrfbf__PauseFailedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__PauseFailedFaultType_Description(soap*, _wsrfbf__PauseFailedFaultType_Description*) serialize to a stream
/// - _wsrfbf__PauseFailedFaultType_Description* _wsrfbf__PauseFailedFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__PauseFailedFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__PauseFailedFaultType_Description::soap_del() deep deletes _wsrfbf__PauseFailedFaultType_Description data members, use only after _wsrfbf__PauseFailedFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__PauseFailedFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__PauseFailedFaultType_Description or derived type identifier
    class _wsrfbf__PauseFailedFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__PauseFailedFaultType_FaultCause operations:
/// - _wsrfbf__PauseFailedFaultType_FaultCause* soap_new__wsrfbf__PauseFailedFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__PauseFailedFaultType_FaultCause* soap_new__wsrfbf__PauseFailedFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__PauseFailedFaultType_FaultCause* soap_new_req__wsrfbf__PauseFailedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__PauseFailedFaultType_FaultCause* soap_new_set__wsrfbf__PauseFailedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__PauseFailedFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__PauseFailedFaultType_FaultCause(soap*, _wsrfbf__PauseFailedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__PauseFailedFaultType_FaultCause(soap*, _wsrfbf__PauseFailedFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__PauseFailedFaultType_FaultCause* _wsrfbf__PauseFailedFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__PauseFailedFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__PauseFailedFaultType_FaultCause::soap_del() deep deletes _wsrfbf__PauseFailedFaultType_FaultCause data members, use only after _wsrfbf__PauseFailedFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__PauseFailedFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__PauseFailedFaultType_FaultCause or derived type identifier
    class _wsrfbf__PauseFailedFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsnt__ResumeFailedFaultType operations:
/// - wsnt__ResumeFailedFaultType* soap_new_wsnt__ResumeFailedFaultType(soap*) allocate and default initialize
/// - wsnt__ResumeFailedFaultType* soap_new_wsnt__ResumeFailedFaultType(soap*, int num) allocate and default initialize an array
/// - wsnt__ResumeFailedFaultType* soap_new_req_wsnt__ResumeFailedFaultType(soap*, ...) allocate, set required members
/// - wsnt__ResumeFailedFaultType* soap_new_set_wsnt__ResumeFailedFaultType(soap*, ...) allocate, set all public members
/// - wsnt__ResumeFailedFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__ResumeFailedFaultType(soap*, wsnt__ResumeFailedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__ResumeFailedFaultType(soap*, wsnt__ResumeFailedFaultType*) serialize to a stream
/// - wsnt__ResumeFailedFaultType* wsnt__ResumeFailedFaultType::soap_dup(soap*) returns deep copy of wsnt__ResumeFailedFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__ResumeFailedFaultType::soap_del() deep deletes wsnt__ResumeFailedFaultType data members, use only after wsnt__ResumeFailedFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__ResumeFailedFaultType::soap_type() returns SOAP_TYPE_wsnt__ResumeFailedFaultType or derived type identifier
class wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__ResumeFailedFaultType_ErrorCode operations:
/// - _wsrfbf__ResumeFailedFaultType_ErrorCode* soap_new__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__ResumeFailedFaultType_ErrorCode* soap_new__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResumeFailedFaultType_ErrorCode* soap_new_req__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__ResumeFailedFaultType_ErrorCode* soap_new_set__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResumeFailedFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, _wsrfbf__ResumeFailedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, _wsrfbf__ResumeFailedFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__ResumeFailedFaultType_ErrorCode* _wsrfbf__ResumeFailedFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__ResumeFailedFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResumeFailedFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__ResumeFailedFaultType_ErrorCode data members, use only after _wsrfbf__ResumeFailedFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResumeFailedFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__ResumeFailedFaultType_ErrorCode or derived type identifier
    class _wsrfbf__ResumeFailedFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__ResumeFailedFaultType_Description operations:
/// - _wsrfbf__ResumeFailedFaultType_Description* soap_new__wsrfbf__ResumeFailedFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__ResumeFailedFaultType_Description* soap_new__wsrfbf__ResumeFailedFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResumeFailedFaultType_Description* soap_new_req__wsrfbf__ResumeFailedFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__ResumeFailedFaultType_Description* soap_new_set__wsrfbf__ResumeFailedFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResumeFailedFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResumeFailedFaultType_Description(soap*, _wsrfbf__ResumeFailedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__ResumeFailedFaultType_Description(soap*, _wsrfbf__ResumeFailedFaultType_Description*) serialize to a stream
/// - _wsrfbf__ResumeFailedFaultType_Description* _wsrfbf__ResumeFailedFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__ResumeFailedFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResumeFailedFaultType_Description::soap_del() deep deletes _wsrfbf__ResumeFailedFaultType_Description data members, use only after _wsrfbf__ResumeFailedFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResumeFailedFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__ResumeFailedFaultType_Description or derived type identifier
    class _wsrfbf__ResumeFailedFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__ResumeFailedFaultType_FaultCause operations:
/// - _wsrfbf__ResumeFailedFaultType_FaultCause* soap_new__wsrfbf__ResumeFailedFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__ResumeFailedFaultType_FaultCause* soap_new__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResumeFailedFaultType_FaultCause* soap_new_req__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__ResumeFailedFaultType_FaultCause* soap_new_set__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResumeFailedFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, _wsrfbf__ResumeFailedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, _wsrfbf__ResumeFailedFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__ResumeFailedFaultType_FaultCause* _wsrfbf__ResumeFailedFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__ResumeFailedFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResumeFailedFaultType_FaultCause::soap_del() deep deletes _wsrfbf__ResumeFailedFaultType_FaultCause data members, use only after _wsrfbf__ResumeFailedFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResumeFailedFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__ResumeFailedFaultType_FaultCause or derived type identifier
    class _wsrfbf__ResumeFailedFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":TopicNamespaceType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
///
/// @note class wstop__TopicNamespaceType operations:
/// - wstop__TopicNamespaceType* soap_new_wstop__TopicNamespaceType(soap*) allocate and default initialize
/// - wstop__TopicNamespaceType* soap_new_wstop__TopicNamespaceType(soap*, int num) allocate and default initialize an array
/// - wstop__TopicNamespaceType* soap_new_req_wstop__TopicNamespaceType(soap*, ...) allocate, set required members
/// - wstop__TopicNamespaceType* soap_new_set_wstop__TopicNamespaceType(soap*, ...) allocate, set all public members
/// - wstop__TopicNamespaceType::soap_default(soap*) default initialize members
/// - int soap_read_wstop__TopicNamespaceType(soap*, wstop__TopicNamespaceType*) deserialize from a stream
/// - int soap_write_wstop__TopicNamespaceType(soap*, wstop__TopicNamespaceType*) serialize to a stream
/// - wstop__TopicNamespaceType* wstop__TopicNamespaceType::soap_dup(soap*) returns deep copy of wstop__TopicNamespaceType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wstop__TopicNamespaceType::soap_del() deep deletes wstop__TopicNamespaceType data members, use only after wstop__TopicNamespaceType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wstop__TopicNamespaceType::soap_type() returns SOAP_TYPE_wstop__TopicNamespaceType or derived type identifier
class wstop__TopicNamespaceType : public wstop__ExtensibleDocumented
{ public:
/*  INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wstop__ExtensibleDocumented */
/// Vector of Topic of length 0..unbounded.
    std::vector<
/// @note class _wstop__TopicNamespaceType_Topic operations:
/// - _wstop__TopicNamespaceType_Topic* soap_new__wstop__TopicNamespaceType_Topic(soap*) allocate and default initialize
/// - _wstop__TopicNamespaceType_Topic* soap_new__wstop__TopicNamespaceType_Topic(soap*, int num) allocate and default initialize an array
/// - _wstop__TopicNamespaceType_Topic* soap_new_req__wstop__TopicNamespaceType_Topic(soap*, ...) allocate, set required members
/// - _wstop__TopicNamespaceType_Topic* soap_new_set__wstop__TopicNamespaceType_Topic(soap*, ...) allocate, set all public members
/// - _wstop__TopicNamespaceType_Topic::soap_default(soap*) default initialize members
/// - int soap_read__wstop__TopicNamespaceType_Topic(soap*, _wstop__TopicNamespaceType_Topic*) deserialize from a stream
/// - int soap_write__wstop__TopicNamespaceType_Topic(soap*, _wstop__TopicNamespaceType_Topic*) serialize to a stream
/// - _wstop__TopicNamespaceType_Topic* _wstop__TopicNamespaceType_Topic::soap_dup(soap*) returns deep copy of _wstop__TopicNamespaceType_Topic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wstop__TopicNamespaceType_Topic::soap_del() deep deletes _wstop__TopicNamespaceType_Topic data members, use only after _wstop__TopicNamespaceType_Topic::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wstop__TopicNamespaceType_Topic::soap_type() returns SOAP_TYPE__wstop__TopicNamespaceType_Topic or derived type identifier
    class _wstop__TopicNamespaceType_Topic
    { public:
/// INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
//  END OF INHERITED FROM wstop__ExtensibleDocumented
/// INHERITED FROM wstop__TopicType:
/// Element "MessagePattern" of type "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType.
    wstop__QueryExpressionType*          MessagePattern                 0;	///< Optional element.
/// Vector of wstop__TopicType* of length 0..unbounded.
    std::vector<wstop__TopicType*      > Topic                          0;	///< Multiple elements.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "name" of type xs:NCName.
  @ xsd__NCName                          name                           1;	///< Required attribute.
@    xsd__QName                                                         

                                        *messageTypes                   0;	///< Optional attribute.
/// Attribute "final" of type xs:boolean.
  @ bool                                 final_                         0 = false;	///< Optional attribute with default value="false".
//  END OF INHERITED FROM wstop__TopicType
/// Attribute "parent" of type "http://docs.oasis-open.org/wsn/t-1":ConcreteTopicExpression.
  @ wstop__ConcreteTopicExpression*      parent                         0;	///< Optional attribute.
    }>                                   Topic                          0;	///< Multiple elements.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "name" of type xs:NCName.
  @ xsd__NCName*                         name                           0;	///< Optional attribute.
/// Attribute "targetNamespace" of type xs:anyURI.
  @ xsd__anyURI                          targetNamespace                1;	///< Required attribute.
/// Attribute "final" of type xs:boolean.
  @ bool                                 final_                         0 = false;	///< Optional attribute with default value="false".
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":TopicType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
///
/// @note class wstop__TopicType operations:
/// - wstop__TopicType* soap_new_wstop__TopicType(soap*) allocate and default initialize
/// - wstop__TopicType* soap_new_wstop__TopicType(soap*, int num) allocate and default initialize an array
/// - wstop__TopicType* soap_new_req_wstop__TopicType(soap*, ...) allocate, set required members
/// - wstop__TopicType* soap_new_set_wstop__TopicType(soap*, ...) allocate, set all public members
/// - wstop__TopicType::soap_default(soap*) default initialize members
/// - int soap_read_wstop__TopicType(soap*, wstop__TopicType*) deserialize from a stream
/// - int soap_write_wstop__TopicType(soap*, wstop__TopicType*) serialize to a stream
/// - wstop__TopicType* wstop__TopicType::soap_dup(soap*) returns deep copy of wstop__TopicType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wstop__TopicType::soap_del() deep deletes wstop__TopicType data members, use only after wstop__TopicType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wstop__TopicType::soap_type() returns SOAP_TYPE_wstop__TopicType or derived type identifier
class wstop__TopicType : public wstop__ExtensibleDocumented
{ public:
/*  INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wstop__ExtensibleDocumented */
/// Element "MessagePattern" of type "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType.
    wstop__QueryExpressionType*          MessagePattern                 0;	///< Optional element.
/// Vector of wstop__TopicType* of length 0..unbounded.
    std::vector<wstop__TopicType*      > Topic                          0;	///< Multiple elements.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Attribute "name" of type xs:NCName.
  @ xsd__NCName                          name                           1;	///< Required attribute.
@    xsd__QName                                                         

                                        *messageTypes                   0;	///< Optional attribute.
/// Attribute "final" of type xs:boolean.
  @ bool                                 final_                         0 = false;	///< Optional attribute with default value="false".
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":TopicSetType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
///
/// @note class wstop__TopicSetType operations:
/// - wstop__TopicSetType* soap_new_wstop__TopicSetType(soap*) allocate and default initialize
/// - wstop__TopicSetType* soap_new_wstop__TopicSetType(soap*, int num) allocate and default initialize an array
/// - wstop__TopicSetType* soap_new_req_wstop__TopicSetType(soap*, ...) allocate, set required members
/// - wstop__TopicSetType* soap_new_set_wstop__TopicSetType(soap*, ...) allocate, set all public members
/// - wstop__TopicSetType::soap_default(soap*) default initialize members
/// - int soap_read_wstop__TopicSetType(soap*, wstop__TopicSetType*) deserialize from a stream
/// - int soap_write_wstop__TopicSetType(soap*, wstop__TopicSetType*) serialize to a stream
/// - wstop__TopicSetType* wstop__TopicSetType::soap_dup(soap*) returns deep copy of wstop__TopicSetType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wstop__TopicSetType::soap_del() deep deletes wstop__TopicSetType data members, use only after wstop__TopicSetType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wstop__TopicSetType::soap_type() returns SOAP_TYPE_wstop__TopicSetType or derived type identifier
class wstop__TopicSetType : public wstop__ExtensibleDocumented
{ public:
/*  INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wstop__ExtensibleDocumented */
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
};

/// @brief "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsrf__ResourceUnknownFaultType operations:
/// - wsrf__ResourceUnknownFaultType* soap_new_wsrf__ResourceUnknownFaultType(soap*) allocate and default initialize
/// - wsrf__ResourceUnknownFaultType* soap_new_wsrf__ResourceUnknownFaultType(soap*, int num) allocate and default initialize an array
/// - wsrf__ResourceUnknownFaultType* soap_new_req_wsrf__ResourceUnknownFaultType(soap*, ...) allocate, set required members
/// - wsrf__ResourceUnknownFaultType* soap_new_set_wsrf__ResourceUnknownFaultType(soap*, ...) allocate, set all public members
/// - wsrf__ResourceUnknownFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsrf__ResourceUnknownFaultType(soap*, wsrf__ResourceUnknownFaultType*) deserialize from a stream
/// - int soap_write_wsrf__ResourceUnknownFaultType(soap*, wsrf__ResourceUnknownFaultType*) serialize to a stream
/// - wsrf__ResourceUnknownFaultType* wsrf__ResourceUnknownFaultType::soap_dup(soap*) returns deep copy of wsrf__ResourceUnknownFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsrf__ResourceUnknownFaultType::soap_del() deep deletes wsrf__ResourceUnknownFaultType data members, use only after wsrf__ResourceUnknownFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsrf__ResourceUnknownFaultType::soap_type() returns SOAP_TYPE_wsrf__ResourceUnknownFaultType or derived type identifier
class wsrf__ResourceUnknownFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__ResourceUnknownFaultType_ErrorCode operations:
/// - _wsrfbf__ResourceUnknownFaultType_ErrorCode* soap_new__wsrfbf__ResourceUnknownFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__ResourceUnknownFaultType_ErrorCode* soap_new__wsrfbf__ResourceUnknownFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResourceUnknownFaultType_ErrorCode* soap_new_req__wsrfbf__ResourceUnknownFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__ResourceUnknownFaultType_ErrorCode* soap_new_set__wsrfbf__ResourceUnknownFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResourceUnknownFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResourceUnknownFaultType_ErrorCode(soap*, _wsrfbf__ResourceUnknownFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__ResourceUnknownFaultType_ErrorCode(soap*, _wsrfbf__ResourceUnknownFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__ResourceUnknownFaultType_ErrorCode* _wsrfbf__ResourceUnknownFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__ResourceUnknownFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResourceUnknownFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__ResourceUnknownFaultType_ErrorCode data members, use only after _wsrfbf__ResourceUnknownFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResourceUnknownFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__ResourceUnknownFaultType_ErrorCode or derived type identifier
    class _wsrfbf__ResourceUnknownFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__ResourceUnknownFaultType_Description operations:
/// - _wsrfbf__ResourceUnknownFaultType_Description* soap_new__wsrfbf__ResourceUnknownFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__ResourceUnknownFaultType_Description* soap_new__wsrfbf__ResourceUnknownFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResourceUnknownFaultType_Description* soap_new_req__wsrfbf__ResourceUnknownFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__ResourceUnknownFaultType_Description* soap_new_set__wsrfbf__ResourceUnknownFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResourceUnknownFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResourceUnknownFaultType_Description(soap*, _wsrfbf__ResourceUnknownFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__ResourceUnknownFaultType_Description(soap*, _wsrfbf__ResourceUnknownFaultType_Description*) serialize to a stream
/// - _wsrfbf__ResourceUnknownFaultType_Description* _wsrfbf__ResourceUnknownFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__ResourceUnknownFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResourceUnknownFaultType_Description::soap_del() deep deletes _wsrfbf__ResourceUnknownFaultType_Description data members, use only after _wsrfbf__ResourceUnknownFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResourceUnknownFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__ResourceUnknownFaultType_Description or derived type identifier
    class _wsrfbf__ResourceUnknownFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__ResourceUnknownFaultType_FaultCause operations:
/// - _wsrfbf__ResourceUnknownFaultType_FaultCause* soap_new__wsrfbf__ResourceUnknownFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__ResourceUnknownFaultType_FaultCause* soap_new__wsrfbf__ResourceUnknownFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResourceUnknownFaultType_FaultCause* soap_new_req__wsrfbf__ResourceUnknownFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__ResourceUnknownFaultType_FaultCause* soap_new_set__wsrfbf__ResourceUnknownFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResourceUnknownFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResourceUnknownFaultType_FaultCause(soap*, _wsrfbf__ResourceUnknownFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__ResourceUnknownFaultType_FaultCause(soap*, _wsrfbf__ResourceUnknownFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__ResourceUnknownFaultType_FaultCause* _wsrfbf__ResourceUnknownFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__ResourceUnknownFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResourceUnknownFaultType_FaultCause::soap_del() deep deletes _wsrfbf__ResourceUnknownFaultType_FaultCause data members, use only after _wsrfbf__ResourceUnknownFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResourceUnknownFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__ResourceUnknownFaultType_FaultCause or derived type identifier
    class _wsrfbf__ResourceUnknownFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsrf/r-2":ResourceUnavailableFaultType is a complexType with complexContent extension of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// @note class wsrf__ResourceUnavailableFaultType operations:
/// - wsrf__ResourceUnavailableFaultType* soap_new_wsrf__ResourceUnavailableFaultType(soap*) allocate and default initialize
/// - wsrf__ResourceUnavailableFaultType* soap_new_wsrf__ResourceUnavailableFaultType(soap*, int num) allocate and default initialize an array
/// - wsrf__ResourceUnavailableFaultType* soap_new_req_wsrf__ResourceUnavailableFaultType(soap*, ...) allocate, set required members
/// - wsrf__ResourceUnavailableFaultType* soap_new_set_wsrf__ResourceUnavailableFaultType(soap*, ...) allocate, set all public members
/// - wsrf__ResourceUnavailableFaultType::soap_default(soap*) default initialize members
/// - int soap_read_wsrf__ResourceUnavailableFaultType(soap*, wsrf__ResourceUnavailableFaultType*) deserialize from a stream
/// - int soap_write_wsrf__ResourceUnavailableFaultType(soap*, wsrf__ResourceUnavailableFaultType*) serialize to a stream
/// - wsrf__ResourceUnavailableFaultType* wsrf__ResourceUnavailableFaultType::soap_dup(soap*) returns deep copy of wsrf__ResourceUnavailableFaultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsrf__ResourceUnavailableFaultType::soap_del() deep deletes wsrf__ResourceUnavailableFaultType data members, use only after wsrf__ResourceUnavailableFaultType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsrf__ResourceUnavailableFaultType::soap_type() returns SOAP_TYPE_wsrf__ResourceUnavailableFaultType or derived type identifier
class wsrf__ResourceUnavailableFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<xsd__anyType           > __any                         0;	///< Store any element content in DOM soap_dom_element node.
/// Element "Timestamp" of type xs:dateTime.
    xsd__dateTime                        Timestamp                      1;	///< Required element.
/// Element "Originator" of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// @note class _wsrfbf__ResourceUnavailableFaultType_ErrorCode operations:
/// - _wsrfbf__ResourceUnavailableFaultType_ErrorCode* soap_new__wsrfbf__ResourceUnavailableFaultType_ErrorCode(soap*) allocate and default initialize
/// - _wsrfbf__ResourceUnavailableFaultType_ErrorCode* soap_new__wsrfbf__ResourceUnavailableFaultType_ErrorCode(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResourceUnavailableFaultType_ErrorCode* soap_new_req__wsrfbf__ResourceUnavailableFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - _wsrfbf__ResourceUnavailableFaultType_ErrorCode* soap_new_set__wsrfbf__ResourceUnavailableFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResourceUnavailableFaultType_ErrorCode::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResourceUnavailableFaultType_ErrorCode(soap*, _wsrfbf__ResourceUnavailableFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__ResourceUnavailableFaultType_ErrorCode(soap*, _wsrfbf__ResourceUnavailableFaultType_ErrorCode*) serialize to a stream
/// - _wsrfbf__ResourceUnavailableFaultType_ErrorCode* _wsrfbf__ResourceUnavailableFaultType_ErrorCode::soap_dup(soap*) returns deep copy of _wsrfbf__ResourceUnavailableFaultType_ErrorCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResourceUnavailableFaultType_ErrorCode::soap_del() deep deletes _wsrfbf__ResourceUnavailableFaultType_ErrorCode data members, use only after _wsrfbf__ResourceUnavailableFaultType_ErrorCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResourceUnavailableFaultType_ErrorCode::soap_type() returns SOAP_TYPE__wsrfbf__ResourceUnavailableFaultType_ErrorCode or derived type identifier
    class _wsrfbf__ResourceUnavailableFaultType_ErrorCode
    { public:
/// Attribute "dialect" of type xs:anyURI.
  @ xsd__anyURI                          dialect                        1;	///< Required attribute.
/// Mixed content.
/// @note Mixed content is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    xsd__anyType                         __mixed                       0;	///< Store mixed content as xsd:any (by default a xsd__anyType DOM soap_dom_element linked node structure).
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// @note class _wsrfbf__ResourceUnavailableFaultType_Description operations:
/// - _wsrfbf__ResourceUnavailableFaultType_Description* soap_new__wsrfbf__ResourceUnavailableFaultType_Description(soap*) allocate and default initialize
/// - _wsrfbf__ResourceUnavailableFaultType_Description* soap_new__wsrfbf__ResourceUnavailableFaultType_Description(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResourceUnavailableFaultType_Description* soap_new_req__wsrfbf__ResourceUnavailableFaultType_Description(soap*, ...) allocate, set required members
/// - _wsrfbf__ResourceUnavailableFaultType_Description* soap_new_set__wsrfbf__ResourceUnavailableFaultType_Description(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResourceUnavailableFaultType_Description::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResourceUnavailableFaultType_Description(soap*, _wsrfbf__ResourceUnavailableFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__ResourceUnavailableFaultType_Description(soap*, _wsrfbf__ResourceUnavailableFaultType_Description*) serialize to a stream
/// - _wsrfbf__ResourceUnavailableFaultType_Description* _wsrfbf__ResourceUnavailableFaultType_Description::soap_dup(soap*) returns deep copy of _wsrfbf__ResourceUnavailableFaultType_Description, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResourceUnavailableFaultType_Description::soap_del() deep deletes _wsrfbf__ResourceUnavailableFaultType_Description data members, use only after _wsrfbf__ResourceUnavailableFaultType_Description::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResourceUnavailableFaultType_Description::soap_type() returns SOAP_TYPE__wsrfbf__ResourceUnavailableFaultType_Description or derived type identifier
    class _wsrfbf__ResourceUnavailableFaultType_Description
    { public:
/// __item wraps simpleContent of type xs:string.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
  @ _xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                   Description                    0;	///< Multiple elements.
/// @note class _wsrfbf__ResourceUnavailableFaultType_FaultCause operations:
/// - _wsrfbf__ResourceUnavailableFaultType_FaultCause* soap_new__wsrfbf__ResourceUnavailableFaultType_FaultCause(soap*) allocate and default initialize
/// - _wsrfbf__ResourceUnavailableFaultType_FaultCause* soap_new__wsrfbf__ResourceUnavailableFaultType_FaultCause(soap*, int num) allocate and default initialize an array
/// - _wsrfbf__ResourceUnavailableFaultType_FaultCause* soap_new_req__wsrfbf__ResourceUnavailableFaultType_FaultCause(soap*, ...) allocate, set required members
/// - _wsrfbf__ResourceUnavailableFaultType_FaultCause* soap_new_set__wsrfbf__ResourceUnavailableFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - _wsrfbf__ResourceUnavailableFaultType_FaultCause::soap_default(soap*) default initialize members
/// - int soap_read__wsrfbf__ResourceUnavailableFaultType_FaultCause(soap*, _wsrfbf__ResourceUnavailableFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__ResourceUnavailableFaultType_FaultCause(soap*, _wsrfbf__ResourceUnavailableFaultType_FaultCause*) serialize to a stream
/// - _wsrfbf__ResourceUnavailableFaultType_FaultCause* _wsrfbf__ResourceUnavailableFaultType_FaultCause::soap_dup(soap*) returns deep copy of _wsrfbf__ResourceUnavailableFaultType_FaultCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _wsrfbf__ResourceUnavailableFaultType_FaultCause::soap_del() deep deletes _wsrfbf__ResourceUnavailableFaultType_FaultCause data members, use only after _wsrfbf__ResourceUnavailableFaultType_FaultCause::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _wsrfbf__ResourceUnavailableFaultType_FaultCause::soap_type() returns SOAP_TYPE__wsrfbf__ResourceUnavailableFaultType_FaultCause or derived type identifier
    class _wsrfbf__ResourceUnavailableFaultType_FaultCause
    { public:
/// <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    xsd__anyType                         __any                         0;	///< Store any element content in DOM soap_dom_element node.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":ScopesType is a complexType with simpleContent extension of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType.
///
/// @note class wsd__ScopesType operations:
/// - wsd__ScopesType* soap_new_wsd__ScopesType(soap*) allocate and default initialize
/// - wsd__ScopesType* soap_new_wsd__ScopesType(soap*, int num) allocate and default initialize an array
/// - wsd__ScopesType* soap_new_req_wsd__ScopesType(soap*, ...) allocate, set required members
/// - wsd__ScopesType* soap_new_set_wsd__ScopesType(soap*, ...) allocate, set all public members
/// - wsd__ScopesType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__ScopesType(soap*, wsd__ScopesType*) deserialize from a stream
/// - int soap_write_wsd__ScopesType(soap*, wsd__ScopesType*) serialize to a stream
/// - wsd__ScopesType* wsd__ScopesType::soap_dup(soap*) returns deep copy of wsd__ScopesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__ScopesType::soap_del() deep deletes wsd__ScopesType data members, use only after wsd__ScopesType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__ScopesType::soap_type() returns SOAP_TYPE_wsd__ScopesType or derived type identifier
class wsd__ScopesType : public xsd__anyType
{ public:
/// __item wraps simpleContent of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType.
    wsd__UriListType                     __item                        ;
/// Attribute "MatchBy" of type xs:anyURI.
  @ xsd__anyURI*                         MatchBy                        0;	///< Optional attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2005/04/discovery":AppSequenceType is a complexType with complexContent restriction of type xs:anyType.
///
/// @note class wsd__AppSequenceType operations:
/// - wsd__AppSequenceType* soap_new_wsd__AppSequenceType(soap*) allocate and default initialize
/// - wsd__AppSequenceType* soap_new_wsd__AppSequenceType(soap*, int num) allocate and default initialize an array
/// - wsd__AppSequenceType* soap_new_req_wsd__AppSequenceType(soap*, ...) allocate, set required members
/// - wsd__AppSequenceType* soap_new_set_wsd__AppSequenceType(soap*, ...) allocate, set all public members
/// - wsd__AppSequenceType::soap_default(soap*) default initialize members
/// - int soap_read_wsd__AppSequenceType(soap*, wsd__AppSequenceType*) deserialize from a stream
/// - int soap_write_wsd__AppSequenceType(soap*, wsd__AppSequenceType*) serialize to a stream
/// - wsd__AppSequenceType* wsd__AppSequenceType::soap_dup(soap*) returns deep copy of wsd__AppSequenceType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsd__AppSequenceType::soap_del() deep deletes wsd__AppSequenceType data members, use only after wsd__AppSequenceType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsd__AppSequenceType::soap_type() returns SOAP_TYPE_wsd__AppSequenceType or derived type identifier
class wsd__AppSequenceType : public xsd__anyType
{ public:
/// Attribute "InstanceId" of type xs:unsignedInt.
  @ unsigned int                         InstanceId                     1;	///< Required attribute.
/// Attribute "SequenceId" of type xs:anyURI.
  @ xsd__anyURI*                         SequenceId                     0;	///< Optional attribute.
/// Attribute "MessageNumber" of type xs:unsignedInt.
  @ unsigned int                         MessageNumber                  1;	///< Required attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":ServiceNameType is a complexType with simpleContent extension of type xs:QName.
///
/// @note class wsa__ServiceNameType operations:
/// - wsa__ServiceNameType* soap_new_wsa__ServiceNameType(soap*) allocate and default initialize
/// - wsa__ServiceNameType* soap_new_wsa__ServiceNameType(soap*, int num) allocate and default initialize an array
/// - wsa__ServiceNameType* soap_new_req_wsa__ServiceNameType(soap*, ...) allocate, set required members
/// - wsa__ServiceNameType* soap_new_set_wsa__ServiceNameType(soap*, ...) allocate, set all public members
/// - wsa__ServiceNameType::soap_default(soap*) default initialize members
/// - int soap_read_wsa__ServiceNameType(soap*, wsa__ServiceNameType*) deserialize from a stream
/// - int soap_write_wsa__ServiceNameType(soap*, wsa__ServiceNameType*) serialize to a stream
/// - wsa__ServiceNameType* wsa__ServiceNameType::soap_dup(soap*) returns deep copy of wsa__ServiceNameType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__ServiceNameType::soap_del() deep deletes wsa__ServiceNameType data members, use only after wsa__ServiceNameType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__ServiceNameType::soap_type() returns SOAP_TYPE_wsa__ServiceNameType or derived type identifier
class wsa__ServiceNameType : public xsd__anyType
{ public:
/// __item wraps simpleContent of type xs:QName.
    xsd__QName                           __item                        ;
/// Attribute "PortName" of type xs:NCName.
  @ xsd__NCName*                         PortName                       0;	///< Optional attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":Relationship is a complexType with simpleContent extension of type xs:anyURI.
///
/// @note class wsa__Relationship operations:
/// - wsa__Relationship* soap_new_wsa__Relationship(soap*) allocate and default initialize
/// - wsa__Relationship* soap_new_wsa__Relationship(soap*, int num) allocate and default initialize an array
/// - wsa__Relationship* soap_new_req_wsa__Relationship(soap*, ...) allocate, set required members
/// - wsa__Relationship* soap_new_set_wsa__Relationship(soap*, ...) allocate, set all public members
/// - wsa__Relationship::soap_default(soap*) default initialize members
/// - int soap_read_wsa__Relationship(soap*, wsa__Relationship*) deserialize from a stream
/// - int soap_write_wsa__Relationship(soap*, wsa__Relationship*) serialize to a stream
/// - wsa__Relationship* wsa__Relationship::soap_dup(soap*) returns deep copy of wsa__Relationship, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__Relationship::soap_del() deep deletes wsa__Relationship data members, use only after wsa__Relationship::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__Relationship::soap_type() returns SOAP_TYPE_wsa__Relationship or derived type identifier
class wsa__Relationship : public xsd__anyType
{ public:
/// __item wraps simpleContent of type xs:anyURI.
    xsd__anyURI                          __item                        ;
/// Attribute "RelationshipType" of type xs:QName.
  @ xsd__QName*                          RelationshipType               0;	///< Optional attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyAfterType is a complexType with simpleContent extension of type xs:nonNegativeInteger.
///
/// @note class wsa__ReplyAfterType operations:
/// - wsa__ReplyAfterType* soap_new_wsa__ReplyAfterType(soap*) allocate and default initialize
/// - wsa__ReplyAfterType* soap_new_wsa__ReplyAfterType(soap*, int num) allocate and default initialize an array
/// - wsa__ReplyAfterType* soap_new_req_wsa__ReplyAfterType(soap*, ...) allocate, set required members
/// - wsa__ReplyAfterType* soap_new_set_wsa__ReplyAfterType(soap*, ...) allocate, set all public members
/// - wsa__ReplyAfterType::soap_default(soap*) default initialize members
/// - int soap_read_wsa__ReplyAfterType(soap*, wsa__ReplyAfterType*) deserialize from a stream
/// - int soap_write_wsa__ReplyAfterType(soap*, wsa__ReplyAfterType*) serialize to a stream
/// - wsa__ReplyAfterType* wsa__ReplyAfterType::soap_dup(soap*) returns deep copy of wsa__ReplyAfterType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__ReplyAfterType::soap_del() deep deletes wsa__ReplyAfterType data members, use only after wsa__ReplyAfterType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__ReplyAfterType::soap_type() returns SOAP_TYPE_wsa__ReplyAfterType or derived type identifier
class wsa__ReplyAfterType : public xsd__anyType
{ public:
/// __item wraps simpleContent of type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              __item                        ;
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":RetryAfterType is a complexType with simpleContent extension of type xs:nonNegativeInteger.
///
/// @note class wsa__RetryAfterType operations:
/// - wsa__RetryAfterType* soap_new_wsa__RetryAfterType(soap*) allocate and default initialize
/// - wsa__RetryAfterType* soap_new_wsa__RetryAfterType(soap*, int num) allocate and default initialize an array
/// - wsa__RetryAfterType* soap_new_req_wsa__RetryAfterType(soap*, ...) allocate, set required members
/// - wsa__RetryAfterType* soap_new_set_wsa__RetryAfterType(soap*, ...) allocate, set all public members
/// - wsa__RetryAfterType::soap_default(soap*) default initialize members
/// - int soap_read_wsa__RetryAfterType(soap*, wsa__RetryAfterType*) deserialize from a stream
/// - int soap_write_wsa__RetryAfterType(soap*, wsa__RetryAfterType*) serialize to a stream
/// - wsa__RetryAfterType* wsa__RetryAfterType::soap_dup(soap*) returns deep copy of wsa__RetryAfterType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__RetryAfterType::soap_del() deep deletes wsa__RetryAfterType data members, use only after wsa__RetryAfterType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__RetryAfterType::soap_type() returns SOAP_TYPE_wsa__RetryAfterType or derived type identifier
class wsa__RetryAfterType : public xsd__anyType
{ public:
/// __item wraps simpleContent of type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              __item                        ;
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedQName is a complexType with simpleContent extension of type xs:QName.
///
/// @note class wsa__AttributedQName operations:
/// - wsa__AttributedQName* soap_new_wsa__AttributedQName(soap*) allocate and default initialize
/// - wsa__AttributedQName* soap_new_wsa__AttributedQName(soap*, int num) allocate and default initialize an array
/// - wsa__AttributedQName* soap_new_req_wsa__AttributedQName(soap*, ...) allocate, set required members
/// - wsa__AttributedQName* soap_new_set_wsa__AttributedQName(soap*, ...) allocate, set all public members
/// - wsa__AttributedQName::soap_default(soap*) default initialize members
/// - int soap_read_wsa__AttributedQName(soap*, wsa__AttributedQName*) deserialize from a stream
/// - int soap_write_wsa__AttributedQName(soap*, wsa__AttributedQName*) serialize to a stream
/// - wsa__AttributedQName* wsa__AttributedQName::soap_dup(soap*) returns deep copy of wsa__AttributedQName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__AttributedQName::soap_del() deep deletes wsa__AttributedQName data members, use only after wsa__AttributedQName::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__AttributedQName::soap_type() returns SOAP_TYPE_wsa__AttributedQName or derived type identifier
class wsa__AttributedQName : public xsd__anyType
{ public:
/// __item wraps simpleContent of type xs:QName.
    xsd__QName                           __item                        ;
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI is a complexType with simpleContent extension of type xs:anyURI.
///
/// @note class wsa__AttributedURI operations:
/// - wsa__AttributedURI* soap_new_wsa__AttributedURI(soap*) allocate and default initialize
/// - wsa__AttributedURI* soap_new_wsa__AttributedURI(soap*, int num) allocate and default initialize an array
/// - wsa__AttributedURI* soap_new_req_wsa__AttributedURI(soap*, ...) allocate, set required members
/// - wsa__AttributedURI* soap_new_set_wsa__AttributedURI(soap*, ...) allocate, set all public members
/// - wsa__AttributedURI::soap_default(soap*) default initialize members
/// - int soap_read_wsa__AttributedURI(soap*, wsa__AttributedURI*) deserialize from a stream
/// - int soap_write_wsa__AttributedURI(soap*, wsa__AttributedURI*) serialize to a stream
/// - wsa__AttributedURI* wsa__AttributedURI::soap_dup(soap*) returns deep copy of wsa__AttributedURI, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsa__AttributedURI::soap_del() deep deletes wsa__AttributedURI data members, use only after wsa__AttributedURI::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsa__AttributedURI::soap_type() returns SOAP_TYPE_wsa__AttributedURI or derived type identifier
class wsa__AttributedURI : public xsd__anyType
{ public:
/// __item wraps simpleContent of type xs:anyURI.
    xsd__anyURI                          __item                        ;
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDReference is a complexType with simpleContent extension of type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
/// @note class tt__OSDReference operations:
/// - tt__OSDReference* soap_new_tt__OSDReference(soap*) allocate and default initialize
/// - tt__OSDReference* soap_new_tt__OSDReference(soap*, int num) allocate and default initialize an array
/// - tt__OSDReference* soap_new_req_tt__OSDReference(soap*, ...) allocate, set required members
/// - tt__OSDReference* soap_new_set_tt__OSDReference(soap*, ...) allocate, set all public members
/// - tt__OSDReference::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDReference(soap*, tt__OSDReference*) deserialize from a stream
/// - int soap_write_tt__OSDReference(soap*, tt__OSDReference*) serialize to a stream
/// - tt__OSDReference* tt__OSDReference::soap_dup(soap*) returns deep copy of tt__OSDReference, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDReference::soap_del() deep deletes tt__OSDReference data members, use only after tt__OSDReference::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDReference::soap_type() returns SOAP_TYPE_tt__OSDReference or derived type identifier
class tt__OSDReference : public xsd__anyType
{ public:
/// __item wraps simpleContent of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   __item                        ;
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":Capabilities of type "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities.
typedef tds__DeviceServiceCapabilities _tds__Capabilities;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":VideoSourceConfiguration of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
typedef tt__VideoSourceConfiguration _tt__VideoSourceConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioSourceConfiguration of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
typedef tt__AudioSourceConfiguration _tt__AudioSourceConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
typedef tt__VideoEncoderConfiguration _tt__VideoEncoderConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
typedef tt__AudioEncoderConfiguration _tt__AudioEncoderConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
typedef tt__VideoAnalyticsConfiguration _tt__VideoAnalyticsConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":PTZConfiguration of type "http://www.onvif.org/ver10/schema":PTZConfiguration.
typedef tt__PTZConfiguration _tt__PTZConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":MetadataConfiguration of type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
typedef tt__MetadataConfiguration _tt__MetadataConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioOutputConfiguration of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
typedef tt__AudioOutputConfiguration _tt__AudioOutputConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration of type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
typedef tt__AudioDecoderConfiguration _tt__AudioDecoderConfiguration;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":Polyline of type "http://www.onvif.org/ver10/schema":Polyline.
typedef tt__Polyline _tt__Polyline;

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":Polygon of type "http://www.onvif.org/ver10/schema":Polygon.
typedef tt__Polygon _tt__Polygon;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpression of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
typedef wsnt__TopicExpressionTypeCustom _wsnt__TopicExpression;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":FixedTopicSet of type xs:boolean.
typedef bool _wsnt__FixedTopicSet;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialect of type xs:anyURI.
typedef xsd__anyURI _wsnt__TopicExpressionDialect;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ConsumerReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
typedef wsa5__EndpointReferenceType _wsnt__ConsumerReference;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Filter of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
typedef wsnt__FilterType _wsnt__Filter;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicy of type "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicyType.
typedef wsnt__SubscriptionPolicyType _wsnt__SubscriptionPolicy;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreationTime of type xs:dateTime.
typedef xsd__dateTime _wsnt__CreationTime;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
typedef wsa5__EndpointReferenceType _wsnt__SubscriptionReference;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Topic of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
typedef wsnt__TopicExpressionTypeCustom _wsnt__Topic;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ProducerReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
typedef wsa5__EndpointReferenceType _wsnt__ProducerReference;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotificationMessage of type "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType.
typedef wsnt__NotificationMessageHolderType _wsnt__NotificationMessage;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CurrentTime of type xs:dateTime.
typedef xsd__dateTime _wsnt__CurrentTime;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TerminationTime of type xs:dateTime.
typedef xsd__dateTime _wsnt__TerminationTime;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ProducerProperties of type "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType.
typedef wsnt__QueryExpressionType _wsnt__ProducerProperties;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":MessageContent of type "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType.
typedef wsnt__QueryExpressionType _wsnt__MessageContent;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault of type "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFaultType.
typedef wsnt__SubscribeCreationFailedFaultType _wsnt__SubscribeCreationFailedFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFaultType.
typedef wsnt__InvalidFilterFaultType _wsnt__InvalidFilterFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFaultType.
typedef wsnt__TopicExpressionDialectUnknownFaultType _wsnt__TopicExpressionDialectUnknownFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFaultType.
typedef wsnt__InvalidTopicExpressionFaultType _wsnt__InvalidTopicExpressionFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault of type "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFaultType.
typedef wsnt__TopicNotSupportedFaultType _wsnt__TopicNotSupportedFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFault of type "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFaultType.
typedef wsnt__MultipleTopicsSpecifiedFaultType _wsnt__MultipleTopicsSpecifiedFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFaultType.
typedef wsnt__InvalidProducerPropertiesExpressionFaultType _wsnt__InvalidProducerPropertiesExpressionFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFaultType.
typedef wsnt__InvalidMessageContentExpressionFaultType _wsnt__InvalidMessageContentExpressionFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault of type "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFaultType.
typedef wsnt__UnrecognizedPolicyRequestFaultType _wsnt__UnrecognizedPolicyRequestFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault of type "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFaultType.
typedef wsnt__UnsupportedPolicyRequestFaultType _wsnt__UnsupportedPolicyRequestFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault of type "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFaultType.
typedef wsnt__NotifyMessageNotSupportedFaultType _wsnt__NotifyMessageNotSupportedFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault of type "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFaultType.
typedef wsnt__UnacceptableInitialTerminationTimeFaultType _wsnt__UnacceptableInitialTerminationTimeFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFault of type "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFaultType.
typedef wsnt__NoCurrentMessageOnTopicFaultType _wsnt__NoCurrentMessageOnTopicFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFaultType.
typedef wsnt__UnableToGetMessagesFaultType _wsnt__UnableToGetMessagesFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFaultType.
typedef wsnt__UnableToDestroyPullPointFaultType _wsnt__UnableToDestroyPullPointFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFaultType.
typedef wsnt__UnableToCreatePullPointFaultType _wsnt__UnableToCreatePullPointFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFault of type "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFaultType.
typedef wsnt__UnacceptableTerminationTimeFaultType _wsnt__UnacceptableTerminationTimeFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFaultType.
typedef wsnt__UnableToDestroySubscriptionFaultType _wsnt__UnableToDestroySubscriptionFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseFailedFault of type "http://docs.oasis-open.org/wsn/b-2":PauseFailedFaultType.
typedef wsnt__PauseFailedFaultType _wsnt__PauseFailedFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFault of type "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFaultType.
typedef wsnt__ResumeFailedFaultType _wsnt__ResumeFailedFault;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.w3.org/2004/08/xop/include":Include of type "http://www.w3.org/2004/08/xop/include":Include.
typedef xop__Include _xop__Include;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://docs.oasis-open.org/wsrf/bf-2":BaseFault of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
typedef wsrfbf__BaseFaultType _wsrfbf__BaseFault;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/t-1":TopicNamespace of type "http://docs.oasis-open.org/wsn/t-1":TopicNamespaceType.
typedef wstop__TopicNamespaceType _wstop__TopicNamespace;

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/t-1":TopicSet of type "http://docs.oasis-open.org/wsn/t-1":TopicSetType.
typedef wstop__TopicSetType _wstop__TopicSet;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://docs.oasis-open.org/wsn/t-1":topicNamespaceLocation of simpleType xs:anyURI.
typedef xsd__anyURI _wstop__topicNamespaceLocation;

/// @brief Top-level attribute "http://docs.oasis-open.org/wsn/t-1":topic of simpleType xs:boolean.
typedef bool _wstop__topic;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.onvif.org/ver10/events/wsdl":Capabilities of type "http://www.onvif.org/ver10/events/wsdl":Capabilities.
typedef tev__Capabilities _tev__Capabilities;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault of type "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFaultType.
typedef wsrf__ResourceUnknownFaultType _wsrf__ResourceUnknownFault;

/// @brief Top-level root element "http://docs.oasis-open.org/wsrf/r-2":ResourceUnavailableFault of type "http://docs.oasis-open.org/wsrf/r-2":ResourceUnavailableFaultType.
typedef wsrf__ResourceUnavailableFaultType _wsrf__ResourceUnavailableFault;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Hello of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":HelloType.
typedef wsd__HelloType _wsd__Hello;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Bye of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ByeType.
typedef wsd__ByeType _wsd__Bye;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Probe of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeType.
typedef wsd__ProbeType _wsd__Probe;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatches of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatchesType.
typedef wsd__ProbeMatchesType _wsd__ProbeMatches;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Resolve of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveType.
typedef wsd__ResolveType _wsd__Resolve;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatches of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchesType.
typedef wsd__ResolveMatchesType _wsd__ResolveMatches;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Types of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":QNameListType.
typedef wsd__QNameListType _wsd__Types;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ScopesType.
typedef wsd__ScopesType _wsd__Scopes;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType.
typedef wsd__UriListType _wsd__XAddrs;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion of type xs:unsignedInt.
typedef unsigned int _wsd__MetadataVersion;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":SupportedMatchingRules of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType.
typedef wsd__UriListType _wsd__SupportedMatchingRules;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Security of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":SecurityType.
typedef wsd__SecurityType _wsd__Security;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Sig of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":SigType.
typedef wsd__SigType _wsd__Sig;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":AppSequence of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":AppSequenceType.
typedef wsd__AppSequenceType _wsd__AppSequence;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.xmlsoap.org/ws/2005/04/discovery":Id of simpleType xs:ID.
typedef xsd__ID _wsd__Id;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
typedef wsa__EndpointReferenceType _wsa__EndpointReference;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":MessageID of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
typedef wsa__AttributedURI _wsa__MessageID;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":RelatesTo of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":Relationship.
typedef wsa__Relationship _wsa__RelatesTo;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":To of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
typedef wsa__AttributedURI _wsa__To;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":Action of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
typedef wsa__AttributedURI _wsa__Action;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":From of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
typedef wsa__EndpointReferenceType _wsa__From;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyTo of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
typedef wsa__EndpointReferenceType _wsa__ReplyTo;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":FaultTo of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
typedef wsa__EndpointReferenceType _wsa__FaultTo;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyAfter of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyAfterType.
typedef wsa__ReplyAfterType _wsa__ReplyAfter;

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":RetryAfter of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":RetryAfterType.
typedef wsa__RetryAfterType _wsa__RetryAfter;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.xmlsoap.org/ws/2004/08/addressing":Action of simpleType xs:anyURI.
// "_wsa__Action" attribute definition intentionally left blank.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap tds  service name:	DeviceBinding 
//gsoap tds  service type:	Device 
//gsoap tds  service namespace:	http://www.onvif.org/ver10/device/wsdl 
//gsoap tds  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap tevcppb service name:	CreatePullPointBinding 
//gsoap tevcppb service type:	CreatePullPoint 
//gsoap tevcppb service namespace:	http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding 
//gsoap tevcppb service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap teveb service name:	EventBinding 
//gsoap teveb service type:	EventPortType 
//gsoap teveb service namespace:	http://www.onvif.org/ver10/events/wsdl/EventBinding 
//gsoap teveb service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap tevncb service name:	NotificationConsumerBinding 
//gsoap tevncb service type:	NotificationConsumer 
//gsoap tevncb service namespace:	http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding 
//gsoap tevncb service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap tevnpb service name:	NotificationProducerBinding 
//gsoap tevnpb service type:	NotificationProducer 
//gsoap tevnpb service namespace:	http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding 
//gsoap tevnpb service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap tevppb service name:	PullPointBinding 
//gsoap tevppb service type:	PullPoint 
//gsoap tevppb service namespace:	http://www.onvif.org/ver10/events/wsdl/PullPointBinding 
//gsoap tevppb service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap tevpps service name:	PullPointSubscriptionBinding 
//gsoap tevpps service type:	PullPointSubscription 
//gsoap tevpps service namespace:	http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding 
//gsoap tevpps service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap tevpsmb service name:	PausableSubscriptionManagerBinding 
//gsoap tevpsmb service type:	PausableSubscriptionManager 
//gsoap tevpsmb service namespace:	http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding 
//gsoap tevpsmb service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap tevsmb service name:	SubscriptionManagerBinding 
//gsoap tevsmb service type:	SubscriptionManager 
//gsoap tevsmb service namespace:	http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding 
//gsoap tevsmb service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WSDL Definitions

@section WSDL_bindings Service Bindings

  - @ref DeviceBinding

  - @ref CreatePullPointBinding

  - @ref EventBinding

  - @ref NotificationConsumerBinding

  - @ref NotificationProducerBinding

  - @ref PullPointBinding

  - @ref PullPointSubscriptionBinding

  - @ref PausableSubscriptionManagerBinding

  - @ref SubscriptionManagerBinding

@section WSDL_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DeviceBinding Binding "DeviceBinding"

@section DeviceBinding_operations Operations of Binding "DeviceBinding"

  - @ref __tds__GetServices

  - @ref __tds__GetServiceCapabilities

  - @ref __tds__GetDeviceInformation

  - @ref __tds__SetSystemDateAndTime

  - @ref __tds__GetSystemDateAndTime

  - @ref __tds__SetSystemFactoryDefault

  - @ref __tds__UpgradeSystemFirmware

  - @ref __tds__SystemReboot

  - @ref __tds__RestoreSystem

  - @ref __tds__GetSystemBackup

  - @ref __tds__GetSystemLog

  - @ref __tds__GetSystemSupportInformation

  - @ref __tds__GetScopes

  - @ref __tds__SetScopes

  - @ref __tds__AddScopes

  - @ref __tds__RemoveScopes

  - @ref __tds__GetDiscoveryMode

  - @ref __tds__SetDiscoveryMode

  - @ref __tds__GetRemoteDiscoveryMode

  - @ref __tds__SetRemoteDiscoveryMode

  - @ref __tds__GetDPAddresses

  - @ref __tds__GetEndpointReference

  - @ref __tds__GetRemoteUser

  - @ref __tds__SetRemoteUser

  - @ref __tds__GetUsers

  - @ref __tds__CreateUsers

  - @ref __tds__DeleteUsers

  - @ref __tds__SetUser

  - @ref __tds__GetWsdlUrl

  - @ref __tds__GetCapabilities

  - @ref __tds__SetDPAddresses

  - @ref __tds__GetHostname

  - @ref __tds__SetHostname

  - @ref __tds__SetHostnameFromDHCP

  - @ref __tds__GetDNS

  - @ref __tds__SetDNS

  - @ref __tds__GetNTP

  - @ref __tds__SetNTP

  - @ref __tds__GetDynamicDNS

  - @ref __tds__SetDynamicDNS

  - @ref __tds__GetNetworkInterfaces

  - @ref __tds__SetNetworkInterfaces

  - @ref __tds__GetNetworkProtocols

  - @ref __tds__SetNetworkProtocols

  - @ref __tds__GetNetworkDefaultGateway

  - @ref __tds__SetNetworkDefaultGateway

  - @ref __tds__GetZeroConfiguration

  - @ref __tds__SetZeroConfiguration

  - @ref __tds__GetIPAddressFilter

  - @ref __tds__SetIPAddressFilter

  - @ref __tds__AddIPAddressFilter

  - @ref __tds__RemoveIPAddressFilter

  - @ref __tds__GetAccessPolicy

  - @ref __tds__SetAccessPolicy

  - @ref __tds__CreateCertificate

  - @ref __tds__GetCertificates

  - @ref __tds__GetCertificatesStatus

  - @ref __tds__SetCertificatesStatus

  - @ref __tds__DeleteCertificates

  - @ref __tds__GetPkcs10Request

  - @ref __tds__LoadCertificates

  - @ref __tds__GetClientCertificateMode

  - @ref __tds__SetClientCertificateMode

  - @ref __tds__GetRelayOutputs

  - @ref __tds__SetRelayOutputSettings

  - @ref __tds__SetRelayOutputState

  - @ref __tds__SendAuxiliaryCommand

  - @ref __tds__GetCACertificates

  - @ref __tds__LoadCertificateWithPrivateKey

  - @ref __tds__GetCertificateInformation

  - @ref __tds__LoadCACertificates

  - @ref __tds__CreateDot1XConfiguration

  - @ref __tds__SetDot1XConfiguration

  - @ref __tds__GetDot1XConfiguration

  - @ref __tds__GetDot1XConfigurations

  - @ref __tds__DeleteDot1XConfiguration

  - @ref __tds__GetDot11Capabilities

  - @ref __tds__GetDot11Status

  - @ref __tds__ScanAvailableDot11Networks

  - @ref __tds__GetSystemUris

  - @ref __tds__StartFirmwareUpgrade

  - @ref __tds__StartSystemRestore

  - @ref __tds__GetStorageConfigurations

  - @ref __tds__CreateStorageConfiguration

  - @ref __tds__GetStorageConfiguration

  - @ref __tds__SetStorageConfiguration

  - @ref __tds__DeleteStorageConfiguration

  - @ref __tds__GetGeoLocation

  - @ref __tds__SetGeoLocation

  - @ref __tds__DeleteGeoLocation

@section DeviceBinding_ports Default endpoints of Binding "DeviceBinding"


*/

/**

@page CreatePullPointBinding Binding "CreatePullPointBinding"

@section CreatePullPointBinding_operations Operations of Binding "CreatePullPointBinding"

  - @ref __tevcppb__CreatePullPoint

@section CreatePullPointBinding_ports Default endpoints of Binding "CreatePullPointBinding"


*/

/**

@page EventBinding Binding "EventBinding"

@section EventBinding_operations Operations of Binding "EventBinding"

  - @ref __teveb__GetServiceCapabilities

  - @ref __teveb__CreatePullPointSubscription

  - @ref __teveb__GetEventProperties

@section EventBinding_ports Default endpoints of Binding "EventBinding"


*/

/**

@page NotificationConsumerBinding Binding "NotificationConsumerBinding"

@section NotificationConsumerBinding_operations Operations of Binding "NotificationConsumerBinding"

  - @ref __tevncb__Notify

@section NotificationConsumerBinding_ports Default endpoints of Binding "NotificationConsumerBinding"


*/

/**

@page NotificationProducerBinding Binding "NotificationProducerBinding"

@section NotificationProducerBinding_operations Operations of Binding "NotificationProducerBinding"

  - @ref __tevnpb__Subscribe

  - @ref __tevnpb__GetCurrentMessage

@section NotificationProducerBinding_ports Default endpoints of Binding "NotificationProducerBinding"


*/

/**

@page PullPointBinding Binding "PullPointBinding"

@section PullPointBinding_operations Operations of Binding "PullPointBinding"

  - @ref __tevppb__GetMessages

  - @ref __tevppb__DestroyPullPoint

  - @ref __tevppb__Notify

@section PullPointBinding_ports Default endpoints of Binding "PullPointBinding"


*/

/**

@page PullPointSubscriptionBinding Binding "PullPointSubscriptionBinding"

@section PullPointSubscriptionBinding_operations Operations of Binding "PullPointSubscriptionBinding"

  - @ref __tevpps__PullMessages

  - @ref __tevpps__Seek

  - @ref __tevpps__SetSynchronizationPoint

  - @ref __tevpps__Unsubscribe

@section PullPointSubscriptionBinding_ports Default endpoints of Binding "PullPointSubscriptionBinding"


*/

/**

@page PausableSubscriptionManagerBinding Binding "PausableSubscriptionManagerBinding"

@section PausableSubscriptionManagerBinding_operations Operations of Binding "PausableSubscriptionManagerBinding"

  - @ref __tevpsmb__Renew

  - @ref __tevpsmb__Unsubscribe

  - @ref __tevpsmb__PauseSubscription

  - @ref __tevpsmb__ResumeSubscription

@section PausableSubscriptionManagerBinding_ports Default endpoints of Binding "PausableSubscriptionManagerBinding"


*/

/**

@page SubscriptionManagerBinding Binding "SubscriptionManagerBinding"

@section SubscriptionManagerBinding_operations Operations of Binding "SubscriptionManagerBinding"

  - @ref __tevsmb__Renew

  - @ref __tevsmb__Unsubscribe

@section SubscriptionManagerBinding_ports Default endpoints of Binding "SubscriptionManagerBinding"


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
mutable struct SOAP_ENV__Detail
{
  @ xsd__anyAttribute                    __anyAttribute                ;	///< Catch any attribute content in DOM.
/// SOAP Fault message "UnableToCreatePullPointFault" part "UnableToCreatePullPointFault" element ""http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFault".
    wsnt__UnableToCreatePullPointFaultType*  wsnt__UnableToCreatePullPointFault;
/// SOAP Fault message "InvalidFilterFault" part "InvalidFilterFault" element ""http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault".
    wsnt__InvalidFilterFaultType*        wsnt__InvalidFilterFault      ;
/// SOAP Fault message "InvalidMessageContentExpressionFault" part "InvalidMessageContentExpressionFault" element ""http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault".
    wsnt__InvalidMessageContentExpressionFaultType*  wsnt__InvalidMessageContentExpressionFault;
/// SOAP Fault message "InvalidProducerPropertiesExpressionFault" part "InvalidProducerPropertiesExpressionFault" element ""http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault".
    wsnt__InvalidProducerPropertiesExpressionFaultType*  wsnt__InvalidProducerPropertiesExpressionFault;
/// SOAP Fault message "InvalidTopicExpressionFault" part "InvalidTopicExpressionFault" element ""http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault".
    wsnt__InvalidTopicExpressionFaultType*  wsnt__InvalidTopicExpressionFault;
/// SOAP Fault message "NotifyMessageNotSupportedFault" part "NotifyMessageNotSupportedFault" element ""http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault".
    wsnt__NotifyMessageNotSupportedFaultType*  wsnt__NotifyMessageNotSupportedFault;
/// SOAP Fault message "ResourceUnknownFault" part "ResourceUnknownFault" element ""http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault".
    wsrf__ResourceUnknownFaultType*      wsrf__ResourceUnknownFault    ;
/// SOAP Fault message "SubscribeCreationFailedFault" part "SubscribeCreationFailedFault" element ""http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault".
    wsnt__SubscribeCreationFailedFaultType*  wsnt__SubscribeCreationFailedFault;
/// SOAP Fault message "TopicExpressionDialectUnknownFault" part "TopicExpressionDialectUnknownFault" element ""http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault".
    wsnt__TopicExpressionDialectUnknownFaultType*  wsnt__TopicExpressionDialectUnknownFault;
/// SOAP Fault message "TopicNotSupportedFault" part "TopicNotSupportedFault" element ""http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault".
    wsnt__TopicNotSupportedFaultType*    wsnt__TopicNotSupportedFault  ;
/// SOAP Fault message "UnacceptableInitialTerminationTimeFault" part "UnacceptableInitialTerminationTimeFault" element ""http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault".
    wsnt__UnacceptableInitialTerminationTimeFaultType*  wsnt__UnacceptableInitialTerminationTimeFault;
/// SOAP Fault message "UnrecognizedPolicyRequestFault" part "UnrecognizedPolicyRequestFault" element ""http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault".
    wsnt__UnrecognizedPolicyRequestFaultType*  wsnt__UnrecognizedPolicyRequestFault;
/// SOAP Fault message "UnsupportedPolicyRequestFault" part "UnsupportedPolicyRequestFault" element ""http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault".
    wsnt__UnsupportedPolicyRequestFaultType*  wsnt__UnsupportedPolicyRequestFault;
/// SOAP Fault message "MultipleTopicsSpecifiedFault" part "MultipleTopicsSpecifiedFault" element ""http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFault".
    wsnt__MultipleTopicsSpecifiedFaultType*  wsnt__MultipleTopicsSpecifiedFault;
/// SOAP Fault message "NoCurrentMessageOnTopicFault" part "NoCurrentMessageOnTopicFault" element ""http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFault".
    wsnt__NoCurrentMessageOnTopicFaultType*  wsnt__NoCurrentMessageOnTopicFault;
/// SOAP Fault message "UnableToDestroyPullPointFault" part "UnableToDestroyPullPointFault" element ""http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFault".
    wsnt__UnableToDestroyPullPointFaultType*  wsnt__UnableToDestroyPullPointFault;
/// SOAP Fault message "UnableToGetMessagesFault" part "UnableToGetMessagesFault" element ""http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFault".
    wsnt__UnableToGetMessagesFaultType*  wsnt__UnableToGetMessagesFault;
/// SOAP Fault message "PullMessagesFaultResponse" part "parameters" element ""http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse".
    _tev__PullMessagesFaultResponse*     tev__PullMessagesFaultResponse;
/// SOAP Fault message "UnableToDestroySubscriptionFault" part "UnableToDestroySubscriptionFault" element ""http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFault".
    wsnt__UnableToDestroySubscriptionFaultType*  wsnt__UnableToDestroySubscriptionFault;
/// SOAP Fault message "PauseFailedFault" part "PauseFailedFault" element ""http://docs.oasis-open.org/wsn/b-2":PauseFailedFault".
    wsnt__PauseFailedFaultType*          wsnt__PauseFailedFault        ;
/// SOAP Fault message "ResumeFailedFault" part "ResumeFailedFault" element ""http://docs.oasis-open.org/wsn/b-2":ResumeFailedFault".
    wsnt__ResumeFailedFaultType*         wsnt__ResumeFailedFault       ;
/// SOAP Fault message "UnacceptableTerminationTimeFault" part "UnacceptableTerminationTimeFault" element ""http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFault".
    wsnt__UnacceptableTerminationTimeFaultType*  wsnt__UnacceptableTerminationTimeFault;
    int                                  __type                        ;	///< set to SOAP_TYPE_T for a serializable type T
    void                                *fault                         ;	///< points to serializable value of type T or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DeviceBinding                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetServices                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetServices" of service binding "DeviceBinding".
Returns information about services on the device.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetServices"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetServices"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetServicesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetServices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetServices*                  tds__GetServices,
    // output parameters:
    _tds__GetServicesResponse          &tds__GetServicesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetServices(
    struct soap *soap,
    // input parameters:
    _tds__GetServices*                  tds__GetServices,
    // output parameters:
    _tds__GetServicesResponse          &tds__GetServicesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetServices SOAP
//gsoap tds  service method-style:	GetServices document
//gsoap tds  service method-encoding:	GetServices literal
//gsoap tds  service method-input-action:	GetServices http://www.onvif.org/ver10/device/wsdl/GetServices
//gsoap tds  service method-output-action:	GetServices http://www.onvif.org/ver10/device/wsdl/GetServicesResponse
int __tds__GetServices(
    _tds__GetServices*                  tds__GetServices,	///< Input parameter
    _tds__GetServicesResponse          &tds__GetServicesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetServiceCapabilities                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetServiceCapabilities" of service binding "DeviceBinding".
Returns the capabilities of the device service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilitiesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetServiceCapabilities*       tds__GetServiceCapabilities,
    // output parameters:
    _tds__GetServiceCapabilitiesResponse&tds__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetServiceCapabilities(
    struct soap *soap,
    // input parameters:
    _tds__GetServiceCapabilities*       tds__GetServiceCapabilities,
    // output parameters:
    _tds__GetServiceCapabilitiesResponse&tds__GetServiceCapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetServiceCapabilities SOAP
//gsoap tds  service method-style:	GetServiceCapabilities document
//gsoap tds  service method-encoding:	GetServiceCapabilities literal
//gsoap tds  service method-input-action:	GetServiceCapabilities http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities
//gsoap tds  service method-output-action:	GetServiceCapabilities http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilitiesResponse
int __tds__GetServiceCapabilities(
    _tds__GetServiceCapabilities*       tds__GetServiceCapabilities,	///< Input parameter
    _tds__GetServiceCapabilitiesResponse&tds__GetServiceCapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDeviceInformation                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDeviceInformation" of service binding "DeviceBinding".
This operation gets basic device information from the device.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDeviceInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDeviceInformation*         tds__GetDeviceInformation,
    // output parameters:
    _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDeviceInformation(
    struct soap *soap,
    // input parameters:
    _tds__GetDeviceInformation*         tds__GetDeviceInformation,
    // output parameters:
    _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDeviceInformation SOAP
//gsoap tds  service method-style:	GetDeviceInformation document
//gsoap tds  service method-encoding:	GetDeviceInformation literal
//gsoap tds  service method-input-action:	GetDeviceInformation http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation
//gsoap tds  service method-output-action:	GetDeviceInformation http://www.onvif.org/ver10/device/wsdl/GetDeviceInformationResponse
int __tds__GetDeviceInformation(
    _tds__GetDeviceInformation*         tds__GetDeviceInformation,	///< Input parameter
    _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetSystemDateAndTime                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetSystemDateAndTime" of service binding "DeviceBinding".
This operation sets the device system date and time. The device shall support the
				configuration of the daylight saving setting and
of the manual system date and time (if
				applicable) or indication of NTP time (if applicable)
through the SetSystemDateAndTime
				command. <br/>
				If system time and date are set manually, the client
shall include UTCDateTime in the request.<br/>
				A TimeZone token which is not formed according to
the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.<br/>
				The DayLightSavings flag should be set to true to
activate any DST settings of the TimeZone string. 
				Clear the DayLightSavings flag if the DST portion
of the TimeZone settings should be ignored.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetSystemDateAndTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetSystemDateAndTime*         tds__SetSystemDateAndTime,
    // output parameters:
    _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetSystemDateAndTime(
    struct soap *soap,
    // input parameters:
    _tds__SetSystemDateAndTime*         tds__SetSystemDateAndTime,
    // output parameters:
    _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetSystemDateAndTime SOAP
//gsoap tds  service method-style:	SetSystemDateAndTime document
//gsoap tds  service method-encoding:	SetSystemDateAndTime literal
//gsoap tds  service method-input-action:	SetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime
//gsoap tds  service method-output-action:	SetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTimeResponse
int __tds__SetSystemDateAndTime(
    _tds__SetSystemDateAndTime*         tds__SetSystemDateAndTime,	///< Input parameter
    _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemDateAndTime                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemDateAndTime" of service binding "DeviceBinding".
This operation gets the device system date and time. The device shall support the
return of
				the daylight saving setting and of the manual system
date and time (if applicable) or indication
				of NTP time (if applicable) through the GetSystemDateAndTime
command.<br/>
				A device shall provide the UTCDateTime information.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemDateAndTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemDateAndTime*         tds__GetSystemDateAndTime,
    // output parameters:
    _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemDateAndTime(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemDateAndTime*         tds__GetSystemDateAndTime,
    // output parameters:
    _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemDateAndTime SOAP
//gsoap tds  service method-style:	GetSystemDateAndTime document
//gsoap tds  service method-encoding:	GetSystemDateAndTime literal
//gsoap tds  service method-input-action:	GetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime
//gsoap tds  service method-output-action:	GetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTimeResponse
int __tds__GetSystemDateAndTime(
    _tds__GetSystemDateAndTime*         tds__GetSystemDateAndTime,	///< Input parameter
    _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetSystemFactoryDefault                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetSystemFactoryDefault" of service binding "DeviceBinding".
This operation reloads the parameters on the device to their factory default values.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefaultResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetSystemFactoryDefault(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetSystemFactoryDefault*      tds__SetSystemFactoryDefault,
    // output parameters:
    _tds__SetSystemFactoryDefaultResponse&tds__SetSystemFactoryDefaultResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetSystemFactoryDefault(
    struct soap *soap,
    // input parameters:
    _tds__SetSystemFactoryDefault*      tds__SetSystemFactoryDefault,
    // output parameters:
    _tds__SetSystemFactoryDefaultResponse&tds__SetSystemFactoryDefaultResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetSystemFactoryDefault SOAP
//gsoap tds  service method-style:	SetSystemFactoryDefault document
//gsoap tds  service method-encoding:	SetSystemFactoryDefault literal
//gsoap tds  service method-input-action:	SetSystemFactoryDefault http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault
//gsoap tds  service method-output-action:	SetSystemFactoryDefault http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefaultResponse
int __tds__SetSystemFactoryDefault(
    _tds__SetSystemFactoryDefault*      tds__SetSystemFactoryDefault,	///< Input parameter
    _tds__SetSystemFactoryDefaultResponse&tds__SetSystemFactoryDefaultResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__UpgradeSystemFirmware                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__UpgradeSystemFirmware" of service binding "DeviceBinding".
This operation upgrades a device firmware version. After a successful upgrade the
response
				message is sent before the device reboots. The device
should support firmware upgrade
				through the UpgradeSystemFirmware command. The exact
format of the firmware data is
				outside the scope of this standard.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmwareResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__UpgradeSystemFirmware(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__UpgradeSystemFirmware*        tds__UpgradeSystemFirmware,
    // output parameters:
    _tds__UpgradeSystemFirmwareResponse&tds__UpgradeSystemFirmwareResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__UpgradeSystemFirmware(
    struct soap *soap,
    // input parameters:
    _tds__UpgradeSystemFirmware*        tds__UpgradeSystemFirmware,
    // output parameters:
    _tds__UpgradeSystemFirmwareResponse&tds__UpgradeSystemFirmwareResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	UpgradeSystemFirmware SOAP
//gsoap tds  service method-style:	UpgradeSystemFirmware document
//gsoap tds  service method-encoding:	UpgradeSystemFirmware literal
//gsoap tds  service method-input-action:	UpgradeSystemFirmware http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware
//gsoap tds  service method-output-action:	UpgradeSystemFirmware http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmwareResponse
int __tds__UpgradeSystemFirmware(
    _tds__UpgradeSystemFirmware*        tds__UpgradeSystemFirmware,	///< Input parameter
    _tds__UpgradeSystemFirmwareResponse&tds__UpgradeSystemFirmwareResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SystemReboot                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SystemReboot" of service binding "DeviceBinding".
This operation reboots the device.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SystemReboot"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SystemReboot"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SystemRebootResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SystemReboot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SystemReboot*                 tds__SystemReboot,
    // output parameters:
    _tds__SystemRebootResponse         &tds__SystemRebootResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SystemReboot(
    struct soap *soap,
    // input parameters:
    _tds__SystemReboot*                 tds__SystemReboot,
    // output parameters:
    _tds__SystemRebootResponse         &tds__SystemRebootResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SystemReboot SOAP
//gsoap tds  service method-style:	SystemReboot document
//gsoap tds  service method-encoding:	SystemReboot literal
//gsoap tds  service method-input-action:	SystemReboot http://www.onvif.org/ver10/device/wsdl/SystemReboot
//gsoap tds  service method-output-action:	SystemReboot http://www.onvif.org/ver10/device/wsdl/SystemRebootResponse
int __tds__SystemReboot(
    _tds__SystemReboot*                 tds__SystemReboot,	///< Input parameter
    _tds__SystemRebootResponse         &tds__SystemRebootResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__RestoreSystem                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__RestoreSystem" of service binding "DeviceBinding".
This operation restores the system backup configuration files(s) previously retrieved
from a
				device. The device should support restore of backup
configuration file(s) through the
				RestoreSystem command. The exact format of the backup
configuration file(s) is outside the
				scope of this standard. If the command is supported,
it shall accept backup files returned by
				the GetSystemBackup command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/RestoreSystem"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/RestoreSystem"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/RestoreSystemResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__RestoreSystem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__RestoreSystem*                tds__RestoreSystem,
    // output parameters:
    _tds__RestoreSystemResponse        &tds__RestoreSystemResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__RestoreSystem(
    struct soap *soap,
    // input parameters:
    _tds__RestoreSystem*                tds__RestoreSystem,
    // output parameters:
    _tds__RestoreSystemResponse        &tds__RestoreSystemResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	RestoreSystem SOAP
//gsoap tds  service method-style:	RestoreSystem document
//gsoap tds  service method-encoding:	RestoreSystem literal
//gsoap tds  service method-input-action:	RestoreSystem http://www.onvif.org/ver10/device/wsdl/RestoreSystem
//gsoap tds  service method-output-action:	RestoreSystem http://www.onvif.org/ver10/device/wsdl/RestoreSystemResponse
int __tds__RestoreSystem(
    _tds__RestoreSystem*                tds__RestoreSystem,	///< Input parameter
    _tds__RestoreSystemResponse        &tds__RestoreSystemResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemBackup                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemBackup" of service binding "DeviceBinding".
This operation is retrieves system backup configuration file(s) from a device. The
device
				should support return of back up configuration file(s)
through the GetSystemBackup command.
				The backup is returned with reference to a name
and mime-type together with binary data.
				The exact format of the backup configuration files
is outside the scope of this standard.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemBackupResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemBackup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemBackup*              tds__GetSystemBackup,
    // output parameters:
    _tds__GetSystemBackupResponse      &tds__GetSystemBackupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemBackup(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemBackup*              tds__GetSystemBackup,
    // output parameters:
    _tds__GetSystemBackupResponse      &tds__GetSystemBackupResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemBackup SOAP
//gsoap tds  service method-style:	GetSystemBackup document
//gsoap tds  service method-encoding:	GetSystemBackup literal
//gsoap tds  service method-input-action:	GetSystemBackup http://www.onvif.org/ver10/device/wsdl/GetSystemBackup
//gsoap tds  service method-output-action:	GetSystemBackup http://www.onvif.org/ver10/device/wsdl/GetSystemBackupResponse
int __tds__GetSystemBackup(
    _tds__GetSystemBackup*              tds__GetSystemBackup,	///< Input parameter
    _tds__GetSystemBackupResponse      &tds__GetSystemBackupResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemLog                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemLog" of service binding "DeviceBinding".
This operation gets a system log from the device. The exact format of the system
logs is outside the scope of this standard.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetSystemLog"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemLog"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemLog*                 tds__GetSystemLog,
    // output parameters:
    _tds__GetSystemLogResponse         &tds__GetSystemLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemLog(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemLog*                 tds__GetSystemLog,
    // output parameters:
    _tds__GetSystemLogResponse         &tds__GetSystemLogResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemLog SOAP
//gsoap tds  service method-style:	GetSystemLog document
//gsoap tds  service method-encoding:	GetSystemLog literal
//gsoap tds  service method-input-action:	GetSystemLog http://www.onvif.org/ver10/device/wsdl/GetSystemLog
//gsoap tds  service method-output-action:	GetSystemLog http://www.onvif.org/ver10/device/wsdl/GetSystemLogResponse
int __tds__GetSystemLog(
    _tds__GetSystemLog*                 tds__GetSystemLog,	///< Input parameter
    _tds__GetSystemLogResponse         &tds__GetSystemLogResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemSupportInformation                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemSupportInformation" of service binding "DeviceBinding".
This operation gets arbitary device diagnostics information from the device.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemSupportInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemSupportInformation*  tds__GetSystemSupportInformation,
    // output parameters:
    _tds__GetSystemSupportInformationResponse&tds__GetSystemSupportInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemSupportInformation(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemSupportInformation*  tds__GetSystemSupportInformation,
    // output parameters:
    _tds__GetSystemSupportInformationResponse&tds__GetSystemSupportInformationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemSupportInformation SOAP
//gsoap tds  service method-style:	GetSystemSupportInformation document
//gsoap tds  service method-encoding:	GetSystemSupportInformation literal
//gsoap tds  service method-input-action:	GetSystemSupportInformation http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation
//gsoap tds  service method-output-action:	GetSystemSupportInformation http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformationResponse
int __tds__GetSystemSupportInformation(
    _tds__GetSystemSupportInformation*  tds__GetSystemSupportInformation,	///< Input parameter
    _tds__GetSystemSupportInformationResponse&tds__GetSystemSupportInformationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetScopes                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetScopes" of service binding "DeviceBinding".
This operation requests the scope parameters of a device. The scope parameters are
used in
				the device discovery to match a probe message, see
Section 7. The Scope parameters are of
				two different types: <ul>
					<li>Fixed</li>
					<li>Configurable</li>
				</ul>
				Fixed scope parameters are permanent device characteristics
and cannot be removed through the device management interface. 
				The scope type is indicated in the scope list returned
in the get scope parameters response. A device shall support 
				retrieval of discovery scope parameters through
the GetScopes command. As some scope parameters are mandatory, 
				the device shall return a non-empty scope list in
the response.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetScopes*                    tds__GetScopes,
    // output parameters:
    _tds__GetScopesResponse            &tds__GetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetScopes(
    struct soap *soap,
    // input parameters:
    _tds__GetScopes*                    tds__GetScopes,
    // output parameters:
    _tds__GetScopesResponse            &tds__GetScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetScopes SOAP
//gsoap tds  service method-style:	GetScopes document
//gsoap tds  service method-encoding:	GetScopes literal
//gsoap tds  service method-input-action:	GetScopes http://www.onvif.org/ver10/device/wsdl/GetScopes
//gsoap tds  service method-output-action:	GetScopes http://www.onvif.org/ver10/device/wsdl/GetScopesResponse
int __tds__GetScopes(
    _tds__GetScopes*                    tds__GetScopes,	///< Input parameter
    _tds__GetScopesResponse            &tds__GetScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetScopes                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetScopes" of service binding "DeviceBinding".
This operation sets the scope parameters of a device. The scope parameters are used
in the
				device discovery to match a probe message.
				This operation replaces all existing configurable
scope parameters (not fixed parameters). If
				this shall be avoided, one should use the scope
add command instead. The device shall
				support configuration of discovery scope parameters
through the SetScopes command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetScopes*                    tds__SetScopes,
    // output parameters:
    _tds__SetScopesResponse            &tds__SetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetScopes(
    struct soap *soap,
    // input parameters:
    _tds__SetScopes*                    tds__SetScopes,
    // output parameters:
    _tds__SetScopesResponse            &tds__SetScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetScopes SOAP
//gsoap tds  service method-style:	SetScopes document
//gsoap tds  service method-encoding:	SetScopes literal
//gsoap tds  service method-input-action:	SetScopes http://www.onvif.org/ver10/device/wsdl/SetScopes
//gsoap tds  service method-output-action:	SetScopes http://www.onvif.org/ver10/device/wsdl/SetScopesResponse
int __tds__SetScopes(
    _tds__SetScopes*                    tds__SetScopes,	///< Input parameter
    _tds__SetScopesResponse            &tds__SetScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__AddScopes                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__AddScopes" of service binding "DeviceBinding".
This operation adds new configurable scope parameters to a device. The scope parameters
				are used in the device discovery to match a probe
message. The device shall
				support addition of discovery scope parameters through
the AddScopes command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/AddScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/AddScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/AddScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__AddScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__AddScopes*                    tds__AddScopes,
    // output parameters:
    _tds__AddScopesResponse            &tds__AddScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__AddScopes(
    struct soap *soap,
    // input parameters:
    _tds__AddScopes*                    tds__AddScopes,
    // output parameters:
    _tds__AddScopesResponse            &tds__AddScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	AddScopes SOAP
//gsoap tds  service method-style:	AddScopes document
//gsoap tds  service method-encoding:	AddScopes literal
//gsoap tds  service method-input-action:	AddScopes http://www.onvif.org/ver10/device/wsdl/AddScopes
//gsoap tds  service method-output-action:	AddScopes http://www.onvif.org/ver10/device/wsdl/AddScopesResponse
int __tds__AddScopes(
    _tds__AddScopes*                    tds__AddScopes,	///< Input parameter
    _tds__AddScopesResponse            &tds__AddScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__RemoveScopes                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__RemoveScopes" of service binding "DeviceBinding".
This operation deletes scope-configurable scope parameters from a device. The scope
				parameters are used in the device discovery to match
a probe message, see Section 7. The
				device shall support deletion of discovery scope
parameters through the RemoveScopes
				command.
				Table

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/RemoveScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/RemoveScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/RemoveScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__RemoveScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__RemoveScopes*                 tds__RemoveScopes,
    // output parameters:
    _tds__RemoveScopesResponse         &tds__RemoveScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__RemoveScopes(
    struct soap *soap,
    // input parameters:
    _tds__RemoveScopes*                 tds__RemoveScopes,
    // output parameters:
    _tds__RemoveScopesResponse         &tds__RemoveScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	RemoveScopes SOAP
//gsoap tds  service method-style:	RemoveScopes document
//gsoap tds  service method-encoding:	RemoveScopes literal
//gsoap tds  service method-input-action:	RemoveScopes http://www.onvif.org/ver10/device/wsdl/RemoveScopes
//gsoap tds  service method-output-action:	RemoveScopes http://www.onvif.org/ver10/device/wsdl/RemoveScopesResponse
int __tds__RemoveScopes(
    _tds__RemoveScopes*                 tds__RemoveScopes,	///< Input parameter
    _tds__RemoveScopesResponse         &tds__RemoveScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDiscoveryMode                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDiscoveryMode" of service binding "DeviceBinding".
This operation gets the discovery mode of a device. See Section 7.2 for the definition
of the
				different device discovery modes. The device shall
support retrieval of the discovery mode
				setting through the GetDiscoveryMode command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDiscoveryMode*             tds__GetDiscoveryMode,
    // output parameters:
    _tds__GetDiscoveryModeResponse     &tds__GetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__GetDiscoveryMode*             tds__GetDiscoveryMode,
    // output parameters:
    _tds__GetDiscoveryModeResponse     &tds__GetDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDiscoveryMode SOAP
//gsoap tds  service method-style:	GetDiscoveryMode document
//gsoap tds  service method-encoding:	GetDiscoveryMode literal
//gsoap tds  service method-input-action:	GetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode
//gsoap tds  service method-output-action:	GetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetDiscoveryModeResponse
int __tds__GetDiscoveryMode(
    _tds__GetDiscoveryMode*             tds__GetDiscoveryMode,	///< Input parameter
    _tds__GetDiscoveryModeResponse     &tds__GetDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDiscoveryMode                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDiscoveryMode" of service binding "DeviceBinding".
This operation sets the discovery mode operation of a device. See Section 7.2 for
the
				definition of the different device discovery modes.
The device shall support configuration of
				the discovery mode setting through the SetDiscoveryMode
command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDiscoveryMode*             tds__SetDiscoveryMode,
    // output parameters:
    _tds__SetDiscoveryModeResponse     &tds__SetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__SetDiscoveryMode*             tds__SetDiscoveryMode,
    // output parameters:
    _tds__SetDiscoveryModeResponse     &tds__SetDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDiscoveryMode SOAP
//gsoap tds  service method-style:	SetDiscoveryMode document
//gsoap tds  service method-encoding:	SetDiscoveryMode literal
//gsoap tds  service method-input-action:	SetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode
//gsoap tds  service method-output-action:	SetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetDiscoveryModeResponse
int __tds__SetDiscoveryMode(
    _tds__SetDiscoveryMode*             tds__SetDiscoveryMode,	///< Input parameter
    _tds__SetDiscoveryModeResponse     &tds__SetDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetRemoteDiscoveryMode                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetRemoteDiscoveryMode" of service binding "DeviceBinding".
This operation gets the remote discovery mode of a device. See Section 7.4 for the
definition
				of remote discovery extensions. A device that supports
remote discovery shall support
				retrieval of the remote discovery mode setting through
the GetRemoteDiscoveryMode
				command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetRemoteDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetRemoteDiscoveryMode*       tds__GetRemoteDiscoveryMode,
    // output parameters:
    _tds__GetRemoteDiscoveryModeResponse&tds__GetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetRemoteDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__GetRemoteDiscoveryMode*       tds__GetRemoteDiscoveryMode,
    // output parameters:
    _tds__GetRemoteDiscoveryModeResponse&tds__GetRemoteDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetRemoteDiscoveryMode SOAP
//gsoap tds  service method-style:	GetRemoteDiscoveryMode document
//gsoap tds  service method-encoding:	GetRemoteDiscoveryMode literal
//gsoap tds  service method-input-action:	GetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode
//gsoap tds  service method-output-action:	GetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryModeResponse
int __tds__GetRemoteDiscoveryMode(
    _tds__GetRemoteDiscoveryMode*       tds__GetRemoteDiscoveryMode,	///< Input parameter
    _tds__GetRemoteDiscoveryModeResponse&tds__GetRemoteDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRemoteDiscoveryMode                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRemoteDiscoveryMode" of service binding "DeviceBinding".
This operation sets the remote discovery mode of operation of a device. See Section
7.4 for
				the definition of remote discovery remote extensions.
A device that supports remote discovery
				shall support configuration of the discovery mode
setting through the
				SetRemoteDiscoveryMode command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRemoteDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRemoteDiscoveryMode*       tds__SetRemoteDiscoveryMode,
    // output parameters:
    _tds__SetRemoteDiscoveryModeResponse&tds__SetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRemoteDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__SetRemoteDiscoveryMode*       tds__SetRemoteDiscoveryMode,
    // output parameters:
    _tds__SetRemoteDiscoveryModeResponse&tds__SetRemoteDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRemoteDiscoveryMode SOAP
//gsoap tds  service method-style:	SetRemoteDiscoveryMode document
//gsoap tds  service method-encoding:	SetRemoteDiscoveryMode literal
//gsoap tds  service method-input-action:	SetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode
//gsoap tds  service method-output-action:	SetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryModeResponse
int __tds__SetRemoteDiscoveryMode(
    _tds__SetRemoteDiscoveryMode*       tds__SetRemoteDiscoveryMode,	///< Input parameter
    _tds__SetRemoteDiscoveryModeResponse&tds__SetRemoteDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDPAddresses                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDPAddresses" of service binding "DeviceBinding".
This operation gets the remote DP address or addresses from a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support retrieval of the remote
				DP address(es) through the GetDPAddresses command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDPAddressesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDPAddresses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDPAddresses*               tds__GetDPAddresses,
    // output parameters:
    _tds__GetDPAddressesResponse       &tds__GetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDPAddresses(
    struct soap *soap,
    // input parameters:
    _tds__GetDPAddresses*               tds__GetDPAddresses,
    // output parameters:
    _tds__GetDPAddressesResponse       &tds__GetDPAddressesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDPAddresses SOAP
//gsoap tds  service method-style:	GetDPAddresses document
//gsoap tds  service method-encoding:	GetDPAddresses literal
//gsoap tds  service method-input-action:	GetDPAddresses http://www.onvif.org/ver10/device/wsdl/GetDPAddresses
//gsoap tds  service method-output-action:	GetDPAddresses http://www.onvif.org/ver10/device/wsdl/GetDPAddressesResponse
int __tds__GetDPAddresses(
    _tds__GetDPAddresses*               tds__GetDPAddresses,	///< Input parameter
    _tds__GetDPAddressesResponse       &tds__GetDPAddressesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetEndpointReference                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetEndpointReference" of service binding "DeviceBinding".
A client can ask for the device service endpoint reference address property that
can be used
				to derive the password equivalent for remote user
operation. The device shall support the
				GetEndpointReference command returning the address
property of the device service
				endpoint reference.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetEndpointReferenceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetEndpointReference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetEndpointReference*         tds__GetEndpointReference,
    // output parameters:
    _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetEndpointReference(
    struct soap *soap,
    // input parameters:
    _tds__GetEndpointReference*         tds__GetEndpointReference,
    // output parameters:
    _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetEndpointReference SOAP
//gsoap tds  service method-style:	GetEndpointReference document
//gsoap tds  service method-encoding:	GetEndpointReference literal
//gsoap tds  service method-input-action:	GetEndpointReference http://www.onvif.org/ver10/device/wsdl/GetEndpointReference
//gsoap tds  service method-output-action:	GetEndpointReference http://www.onvif.org/ver10/device/wsdl/GetEndpointReferenceResponse
int __tds__GetEndpointReference(
    _tds__GetEndpointReference*         tds__GetEndpointReference,	///< Input parameter
    _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetRemoteUser                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetRemoteUser" of service binding "DeviceBinding".
This operation returns the configured remote user (if any). A device supporting
remote user
				handling shall support this operation. The user
is only valid for the WS-UserToken profile or
				as a HTTP / RTSP user.<br/>
				The algorithm to use for deriving the password is
described in section 5.12.2.1 of the core specification.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetRemoteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetRemoteUser*                tds__GetRemoteUser,
    // output parameters:
    _tds__GetRemoteUserResponse        &tds__GetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetRemoteUser(
    struct soap *soap,
    // input parameters:
    _tds__GetRemoteUser*                tds__GetRemoteUser,
    // output parameters:
    _tds__GetRemoteUserResponse        &tds__GetRemoteUserResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetRemoteUser SOAP
//gsoap tds  service method-style:	GetRemoteUser document
//gsoap tds  service method-encoding:	GetRemoteUser literal
//gsoap tds  service method-input-action:	GetRemoteUser http://www.onvif.org/ver10/device/wsdl/GetRemoteUser
//gsoap tds  service method-output-action:	GetRemoteUser http://www.onvif.org/ver10/device/wsdl/GetRemoteUserResponse
int __tds__GetRemoteUser(
    _tds__GetRemoteUser*                tds__GetRemoteUser,	///< Input parameter
    _tds__GetRemoteUserResponse        &tds__GetRemoteUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRemoteUser                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRemoteUser" of service binding "DeviceBinding".
This operation sets the remote user. A device supporting remote user handling shall
support this
				operation. The user is only valid for the WS-UserToken
profile or as a HTTP / RTSP user.<br/>
				The password that is set shall always be the original
(not derived) password.<br/>
				If UseDerivedPassword is set password derivation
shall be done by the device when connecting to a
				remote device.The algorithm to use for deriving
the password is described in section 5.12.2.1 of the core specification.<br/>
				To remove the remote user SetRemoteUser should be
called without the RemoteUser parameter.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRemoteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRemoteUser*                tds__SetRemoteUser,
    // output parameters:
    _tds__SetRemoteUserResponse        &tds__SetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRemoteUser(
    struct soap *soap,
    // input parameters:
    _tds__SetRemoteUser*                tds__SetRemoteUser,
    // output parameters:
    _tds__SetRemoteUserResponse        &tds__SetRemoteUserResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRemoteUser SOAP
//gsoap tds  service method-style:	SetRemoteUser document
//gsoap tds  service method-encoding:	SetRemoteUser literal
//gsoap tds  service method-input-action:	SetRemoteUser http://www.onvif.org/ver10/device/wsdl/SetRemoteUser
//gsoap tds  service method-output-action:	SetRemoteUser http://www.onvif.org/ver10/device/wsdl/SetRemoteUserResponse
int __tds__SetRemoteUser(
    _tds__SetRemoteUser*                tds__SetRemoteUser,	///< Input parameter
    _tds__SetRemoteUserResponse        &tds__SetRemoteUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetUsers                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetUsers" of service binding "DeviceBinding".
This operation lists the registered users and corresponding credentials on a device.
The
				device shall support retrieval of registered device
users and their credentials for the user
				token through the GetUsers command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetUsers"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetUsers"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetUsersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetUsers*                     tds__GetUsers,
    // output parameters:
    _tds__GetUsersResponse             &tds__GetUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetUsers(
    struct soap *soap,
    // input parameters:
    _tds__GetUsers*                     tds__GetUsers,
    // output parameters:
    _tds__GetUsersResponse             &tds__GetUsersResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetUsers SOAP
//gsoap tds  service method-style:	GetUsers document
//gsoap tds  service method-encoding:	GetUsers literal
//gsoap tds  service method-input-action:	GetUsers http://www.onvif.org/ver10/device/wsdl/GetUsers
//gsoap tds  service method-output-action:	GetUsers http://www.onvif.org/ver10/device/wsdl/GetUsersResponse
int __tds__GetUsers(
    _tds__GetUsers*                     tds__GetUsers,	///< Input parameter
    _tds__GetUsersResponse             &tds__GetUsersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateUsers                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateUsers" of service binding "DeviceBinding".
This operation creates new device users and corresponding credentials on a device
for authentication purposes. 
				The device shall support creation of device users
and their credentials through the CreateUsers
				command. Either all users are created successfully
or a fault message shall be returned
				without creating any user.<br/>
				ONVIF compliant devices are recommended to support
password length of at least 28 bytes,
				as clients may follow the password derivation mechanism
which results in 'password
				equivalent' of length 28 bytes, as described in
section 3.1.2 of the ONVIF security white paper.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/CreateUsers"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateUsers"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateUsersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateUsers*                  tds__CreateUsers,
    // output parameters:
    _tds__CreateUsersResponse          &tds__CreateUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateUsers(
    struct soap *soap,
    // input parameters:
    _tds__CreateUsers*                  tds__CreateUsers,
    // output parameters:
    _tds__CreateUsersResponse          &tds__CreateUsersResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateUsers SOAP
//gsoap tds  service method-style:	CreateUsers document
//gsoap tds  service method-encoding:	CreateUsers literal
//gsoap tds  service method-input-action:	CreateUsers http://www.onvif.org/ver10/device/wsdl/CreateUsers
//gsoap tds  service method-output-action:	CreateUsers http://www.onvif.org/ver10/device/wsdl/CreateUsersResponse
int __tds__CreateUsers(
    _tds__CreateUsers*                  tds__CreateUsers,	///< Input parameter
    _tds__CreateUsersResponse          &tds__CreateUsersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteUsers                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteUsers" of service binding "DeviceBinding".
This operation deletes users on a device. The device shall support deletion of device
users and their credentials 
				through the DeleteUsers command. A device may have
one or more fixed users
				that cannot be deleted to ensure access to the unit.
Either all users are deleted successfully or a
				fault message shall be returned and no users be
deleted.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/DeleteUsers"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteUsers"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteUsersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteUsers*                  tds__DeleteUsers,
    // output parameters:
    _tds__DeleteUsersResponse          &tds__DeleteUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteUsers(
    struct soap *soap,
    // input parameters:
    _tds__DeleteUsers*                  tds__DeleteUsers,
    // output parameters:
    _tds__DeleteUsersResponse          &tds__DeleteUsersResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteUsers SOAP
//gsoap tds  service method-style:	DeleteUsers document
//gsoap tds  service method-encoding:	DeleteUsers literal
//gsoap tds  service method-input-action:	DeleteUsers http://www.onvif.org/ver10/device/wsdl/DeleteUsers
//gsoap tds  service method-output-action:	DeleteUsers http://www.onvif.org/ver10/device/wsdl/DeleteUsersResponse
int __tds__DeleteUsers(
    _tds__DeleteUsers*                  tds__DeleteUsers,	///< Input parameter
    _tds__DeleteUsersResponse          &tds__DeleteUsersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetUser                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetUser" of service binding "DeviceBinding".
This operation updates the settings for one or several users on a device for authentication
purposes.
				The device shall support update of device users
and their credentials through the SetUser command. 
				Either all change requests are processed successfully
or a fault message shall be returned and no change requests be processed.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetUser"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetUser"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetUser*                      tds__SetUser,
    // output parameters:
    _tds__SetUserResponse              &tds__SetUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetUser(
    struct soap *soap,
    // input parameters:
    _tds__SetUser*                      tds__SetUser,
    // output parameters:
    _tds__SetUserResponse              &tds__SetUserResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetUser SOAP
//gsoap tds  service method-style:	SetUser document
//gsoap tds  service method-encoding:	SetUser literal
//gsoap tds  service method-input-action:	SetUser http://www.onvif.org/ver10/device/wsdl/SetUser
//gsoap tds  service method-output-action:	SetUser http://www.onvif.org/ver10/device/wsdl/SetUserResponse
int __tds__SetUser(
    _tds__SetUser*                      tds__SetUser,	///< Input parameter
    _tds__SetUserResponse              &tds__SetUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetWsdlUrl                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetWsdlUrl" of service binding "DeviceBinding".
It is possible for an endpoint to request a URL that can be used to retrieve the
complete
				schema and WSDL definitions of a device. The command
gives in return a URL entry point
				where all the necessary product specific WSDL and
schema definitions can be retrieved. The
				device shall provide a URL for WSDL and schema download
through the GetWsdlUrl command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetWsdlUrl(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetWsdlUrl*                   tds__GetWsdlUrl,
    // output parameters:
    _tds__GetWsdlUrlResponse           &tds__GetWsdlUrlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetWsdlUrl(
    struct soap *soap,
    // input parameters:
    _tds__GetWsdlUrl*                   tds__GetWsdlUrl,
    // output parameters:
    _tds__GetWsdlUrlResponse           &tds__GetWsdlUrlResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetWsdlUrl SOAP
//gsoap tds  service method-style:	GetWsdlUrl document
//gsoap tds  service method-encoding:	GetWsdlUrl literal
//gsoap tds  service method-input-action:	GetWsdlUrl http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl
//gsoap tds  service method-output-action:	GetWsdlUrl http://www.onvif.org/ver10/device/wsdl/GetWsdlUrlResponse
int __tds__GetWsdlUrl(
    _tds__GetWsdlUrl*                   tds__GetWsdlUrl,	///< Input parameter
    _tds__GetWsdlUrlResponse           &tds__GetWsdlUrlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCapabilities                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCapabilities" of service binding "DeviceBinding".
This method has been replaced by the more generic GetServices method.
			 For capabilities of individual services refer to the GetServiceCapabilities
methods.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetCapabilities"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCapabilities"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCapabilitiesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCapabilities*              tds__GetCapabilities,
    // output parameters:
    _tds__GetCapabilitiesResponse      &tds__GetCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCapabilities(
    struct soap *soap,
    // input parameters:
    _tds__GetCapabilities*              tds__GetCapabilities,
    // output parameters:
    _tds__GetCapabilitiesResponse      &tds__GetCapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCapabilities SOAP
//gsoap tds  service method-style:	GetCapabilities document
//gsoap tds  service method-encoding:	GetCapabilities literal
//gsoap tds  service method-input-action:	GetCapabilities http://www.onvif.org/ver10/device/wsdl/GetCapabilities
//gsoap tds  service method-output-action:	GetCapabilities http://www.onvif.org/ver10/device/wsdl/GetCapabilitiesResponse
int __tds__GetCapabilities(
    _tds__GetCapabilities*              tds__GetCapabilities,	///< Input parameter
    _tds__GetCapabilitiesResponse      &tds__GetCapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDPAddresses                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDPAddresses" of service binding "DeviceBinding".
This operation sets the remote DP address or addresses on a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support configuration of the
				remote DP address(es) through the SetDPAddresses
command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDPAddressesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDPAddresses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDPAddresses*               tds__SetDPAddresses,
    // output parameters:
    _tds__SetDPAddressesResponse       &tds__SetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDPAddresses(
    struct soap *soap,
    // input parameters:
    _tds__SetDPAddresses*               tds__SetDPAddresses,
    // output parameters:
    _tds__SetDPAddressesResponse       &tds__SetDPAddressesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDPAddresses SOAP
//gsoap tds  service method-style:	SetDPAddresses document
//gsoap tds  service method-encoding:	SetDPAddresses literal
//gsoap tds  service method-input-action:	SetDPAddresses http://www.onvif.org/ver10/device/wsdl/SetDPAddresses
//gsoap tds  service method-output-action:	SetDPAddresses http://www.onvif.org/ver10/device/wsdl/SetDPAddressesResponse
int __tds__SetDPAddresses(
    _tds__SetDPAddresses*               tds__SetDPAddresses,	///< Input parameter
    _tds__SetDPAddressesResponse       &tds__SetDPAddressesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetHostname                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetHostname" of service binding "DeviceBinding".
This operation is used by an endpoint to get the hostname from a device. The device
shall
				return its hostname configurations through the GetHostname
command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetHostname"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetHostname"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetHostnameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetHostname(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetHostname*                  tds__GetHostname,
    // output parameters:
    _tds__GetHostnameResponse          &tds__GetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetHostname(
    struct soap *soap,
    // input parameters:
    _tds__GetHostname*                  tds__GetHostname,
    // output parameters:
    _tds__GetHostnameResponse          &tds__GetHostnameResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetHostname SOAP
//gsoap tds  service method-style:	GetHostname document
//gsoap tds  service method-encoding:	GetHostname literal
//gsoap tds  service method-input-action:	GetHostname http://www.onvif.org/ver10/device/wsdl/GetHostname
//gsoap tds  service method-output-action:	GetHostname http://www.onvif.org/ver10/device/wsdl/GetHostnameResponse
int __tds__GetHostname(
    _tds__GetHostname*                  tds__GetHostname,	///< Input parameter
    _tds__GetHostnameResponse          &tds__GetHostnameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetHostname                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetHostname" of service binding "DeviceBinding".
This operation sets the hostname on a device. It shall be possible to set the device
hostname
				configurations through the SetHostname command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.

			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetHostname"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetHostname"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetHostnameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetHostname(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetHostname*                  tds__SetHostname,
    // output parameters:
    _tds__SetHostnameResponse          &tds__SetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetHostname(
    struct soap *soap,
    // input parameters:
    _tds__SetHostname*                  tds__SetHostname,
    // output parameters:
    _tds__SetHostnameResponse          &tds__SetHostnameResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetHostname SOAP
//gsoap tds  service method-style:	SetHostname document
//gsoap tds  service method-encoding:	SetHostname literal
//gsoap tds  service method-input-action:	SetHostname http://www.onvif.org/ver10/device/wsdl/SetHostname
//gsoap tds  service method-output-action:	SetHostname http://www.onvif.org/ver10/device/wsdl/SetHostnameResponse
int __tds__SetHostname(
    _tds__SetHostname*                  tds__SetHostname,	///< Input parameter
    _tds__SetHostnameResponse          &tds__SetHostnameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetHostnameFromDHCP                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetHostnameFromDHCP" of service binding "DeviceBinding".
This operation controls whether the hostname is set manually or retrieved via DHCP.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCPResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetHostnameFromDHCP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetHostnameFromDHCP*          tds__SetHostnameFromDHCP,
    // output parameters:
    _tds__SetHostnameFromDHCPResponse  &tds__SetHostnameFromDHCPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetHostnameFromDHCP(
    struct soap *soap,
    // input parameters:
    _tds__SetHostnameFromDHCP*          tds__SetHostnameFromDHCP,
    // output parameters:
    _tds__SetHostnameFromDHCPResponse  &tds__SetHostnameFromDHCPResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetHostnameFromDHCP SOAP
//gsoap tds  service method-style:	SetHostnameFromDHCP document
//gsoap tds  service method-encoding:	SetHostnameFromDHCP literal
//gsoap tds  service method-input-action:	SetHostnameFromDHCP http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP
//gsoap tds  service method-output-action:	SetHostnameFromDHCP http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCPResponse
int __tds__SetHostnameFromDHCP(
    _tds__SetHostnameFromDHCP*          tds__SetHostnameFromDHCP,	///< Input parameter
    _tds__SetHostnameFromDHCPResponse  &tds__SetHostnameFromDHCPResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDNS                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDNS" of service binding "DeviceBinding".
This operation gets the DNS settings from a device. The device shall return its
DNS
				configurations through the GetDNS command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDNS*                       tds__GetDNS,
    // output parameters:
    _tds__GetDNSResponse               &tds__GetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDNS(
    struct soap *soap,
    // input parameters:
    _tds__GetDNS*                       tds__GetDNS,
    // output parameters:
    _tds__GetDNSResponse               &tds__GetDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDNS SOAP
//gsoap tds  service method-style:	GetDNS document
//gsoap tds  service method-encoding:	GetDNS literal
//gsoap tds  service method-input-action:	GetDNS http://www.onvif.org/ver10/device/wsdl/GetDNS
//gsoap tds  service method-output-action:	GetDNS http://www.onvif.org/ver10/device/wsdl/GetDNSResponse
int __tds__GetDNS(
    _tds__GetDNS*                       tds__GetDNS,	///< Input parameter
    _tds__GetDNSResponse               &tds__GetDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDNS                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDNS" of service binding "DeviceBinding".
This operation sets the DNS settings on a device. It shall be possible to set the
device DNS
				configurations through the SetDNS command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDNS*                       tds__SetDNS,
    // output parameters:
    _tds__SetDNSResponse               &tds__SetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDNS(
    struct soap *soap,
    // input parameters:
    _tds__SetDNS*                       tds__SetDNS,
    // output parameters:
    _tds__SetDNSResponse               &tds__SetDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDNS SOAP
//gsoap tds  service method-style:	SetDNS document
//gsoap tds  service method-encoding:	SetDNS literal
//gsoap tds  service method-input-action:	SetDNS http://www.onvif.org/ver10/device/wsdl/SetDNS
//gsoap tds  service method-output-action:	SetDNS http://www.onvif.org/ver10/device/wsdl/SetDNSResponse
int __tds__SetDNS(
    _tds__SetDNS*                       tds__SetDNS,	///< Input parameter
    _tds__SetDNSResponse               &tds__SetDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNTP                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNTP" of service binding "DeviceBinding".
This operation gets the NTP settings from a device. If the device supports NTP,
it shall be
				possible to get the NTP server settings through
the GetNTP command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetNTP"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNTP"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNTPResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNTP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNTP*                       tds__GetNTP,
    // output parameters:
    _tds__GetNTPResponse               &tds__GetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNTP(
    struct soap *soap,
    // input parameters:
    _tds__GetNTP*                       tds__GetNTP,
    // output parameters:
    _tds__GetNTPResponse               &tds__GetNTPResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNTP SOAP
//gsoap tds  service method-style:	GetNTP document
//gsoap tds  service method-encoding:	GetNTP literal
//gsoap tds  service method-input-action:	GetNTP http://www.onvif.org/ver10/device/wsdl/GetNTP
//gsoap tds  service method-output-action:	GetNTP http://www.onvif.org/ver10/device/wsdl/GetNTPResponse
int __tds__GetNTP(
    _tds__GetNTP*                       tds__GetNTP,	///< Input parameter
    _tds__GetNTPResponse               &tds__GetNTPResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNTP                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNTP" of service binding "DeviceBinding".
This operation sets the NTP settings on a device. If the device supports NTP, it
shall be
				possible to set the NTP server settings through
the SetNTP command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.
<br/>
				Changes to the NTP server list will not affect the
clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetNTP"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNTP"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNTPResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNTP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNTP*                       tds__SetNTP,
    // output parameters:
    _tds__SetNTPResponse               &tds__SetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNTP(
    struct soap *soap,
    // input parameters:
    _tds__SetNTP*                       tds__SetNTP,
    // output parameters:
    _tds__SetNTPResponse               &tds__SetNTPResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNTP SOAP
//gsoap tds  service method-style:	SetNTP document
//gsoap tds  service method-encoding:	SetNTP literal
//gsoap tds  service method-input-action:	SetNTP http://www.onvif.org/ver10/device/wsdl/SetNTP
//gsoap tds  service method-output-action:	SetNTP http://www.onvif.org/ver10/device/wsdl/SetNTPResponse
int __tds__SetNTP(
    _tds__SetNTP*                       tds__SetNTP,	///< Input parameter
    _tds__SetNTPResponse               &tds__SetNTPResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDynamicDNS                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDynamicDNS" of service binding "DeviceBinding".
This operation gets the dynamic DNS settings from a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to get the type, name
				and TTL through the GetDynamicDNS command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDynamicDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDynamicDNS*                tds__GetDynamicDNS,
    // output parameters:
    _tds__GetDynamicDNSResponse        &tds__GetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDynamicDNS(
    struct soap *soap,
    // input parameters:
    _tds__GetDynamicDNS*                tds__GetDynamicDNS,
    // output parameters:
    _tds__GetDynamicDNSResponse        &tds__GetDynamicDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDynamicDNS SOAP
//gsoap tds  service method-style:	GetDynamicDNS document
//gsoap tds  service method-encoding:	GetDynamicDNS literal
//gsoap tds  service method-input-action:	GetDynamicDNS http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS
//gsoap tds  service method-output-action:	GetDynamicDNS http://www.onvif.org/ver10/device/wsdl/GetDynamicDNSResponse
int __tds__GetDynamicDNS(
    _tds__GetDynamicDNS*                tds__GetDynamicDNS,	///< Input parameter
    _tds__GetDynamicDNSResponse        &tds__GetDynamicDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDynamicDNS                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDynamicDNS" of service binding "DeviceBinding".
This operation sets the dynamic DNS settings on a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to set the type, name
				and TTL through the SetDynamicDNS command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDynamicDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDynamicDNS*                tds__SetDynamicDNS,
    // output parameters:
    _tds__SetDynamicDNSResponse        &tds__SetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDynamicDNS(
    struct soap *soap,
    // input parameters:
    _tds__SetDynamicDNS*                tds__SetDynamicDNS,
    // output parameters:
    _tds__SetDynamicDNSResponse        &tds__SetDynamicDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDynamicDNS SOAP
//gsoap tds  service method-style:	SetDynamicDNS document
//gsoap tds  service method-encoding:	SetDynamicDNS literal
//gsoap tds  service method-input-action:	SetDynamicDNS http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS
//gsoap tds  service method-output-action:	SetDynamicDNS http://www.onvif.org/ver10/device/wsdl/SetDynamicDNSResponse
int __tds__SetDynamicDNS(
    _tds__SetDynamicDNS*                tds__SetDynamicDNS,	///< Input parameter
    _tds__SetDynamicDNSResponse        &tds__SetDynamicDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNetworkInterfaces                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNetworkInterfaces" of service binding "DeviceBinding".
This operation gets the network interface configuration from a device. The device
shall
				support return of network interface configuration
settings as defined by the NetworkInterface
				type through the GetNetworkInterfaces command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfacesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNetworkInterfaces(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNetworkInterfaces*         tds__GetNetworkInterfaces,
    // output parameters:
    _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNetworkInterfaces(
    struct soap *soap,
    // input parameters:
    _tds__GetNetworkInterfaces*         tds__GetNetworkInterfaces,
    // output parameters:
    _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNetworkInterfaces SOAP
//gsoap tds  service method-style:	GetNetworkInterfaces document
//gsoap tds  service method-encoding:	GetNetworkInterfaces literal
//gsoap tds  service method-input-action:	GetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces
//gsoap tds  service method-output-action:	GetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfacesResponse
int __tds__GetNetworkInterfaces(
    _tds__GetNetworkInterfaces*         tds__GetNetworkInterfaces,	///< Input parameter
    _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNetworkInterfaces                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNetworkInterfaces" of service binding "DeviceBinding".
This operation sets the network interface configuration on a device. The device
shall support
				network configuration of supported network interfaces
through the SetNetworkInterfaces
				command.<br/>
				For interoperability with a client unaware of the
IEEE 802.11 extension a device shall retain
				its IEEE 802.11 configuration if the IEEE 802.11
configuration element isnt present in the
				request.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfacesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNetworkInterfaces(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNetworkInterfaces*         tds__SetNetworkInterfaces,
    // output parameters:
    _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNetworkInterfaces(
    struct soap *soap,
    // input parameters:
    _tds__SetNetworkInterfaces*         tds__SetNetworkInterfaces,
    // output parameters:
    _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNetworkInterfaces SOAP
//gsoap tds  service method-style:	SetNetworkInterfaces document
//gsoap tds  service method-encoding:	SetNetworkInterfaces literal
//gsoap tds  service method-input-action:	SetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces
//gsoap tds  service method-output-action:	SetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfacesResponse
int __tds__SetNetworkInterfaces(
    _tds__SetNetworkInterfaces*         tds__SetNetworkInterfaces,	///< Input parameter
    _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNetworkProtocols                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNetworkProtocols" of service binding "DeviceBinding".
This operation gets defined network protocols from a device. The device shall support
the
				GetNetworkProtocols command returning configured
network protocols.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocolsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNetworkProtocols(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNetworkProtocols*          tds__GetNetworkProtocols,
    // output parameters:
    _tds__GetNetworkProtocolsResponse  &tds__GetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNetworkProtocols(
    struct soap *soap,
    // input parameters:
    _tds__GetNetworkProtocols*          tds__GetNetworkProtocols,
    // output parameters:
    _tds__GetNetworkProtocolsResponse  &tds__GetNetworkProtocolsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNetworkProtocols SOAP
//gsoap tds  service method-style:	GetNetworkProtocols document
//gsoap tds  service method-encoding:	GetNetworkProtocols literal
//gsoap tds  service method-input-action:	GetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols
//gsoap tds  service method-output-action:	GetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocolsResponse
int __tds__GetNetworkProtocols(
    _tds__GetNetworkProtocols*          tds__GetNetworkProtocols,	///< Input parameter
    _tds__GetNetworkProtocolsResponse  &tds__GetNetworkProtocolsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNetworkProtocols                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNetworkProtocols" of service binding "DeviceBinding".
This operation configures defined network protocols on a device. The device shall
support
				configuration of defined network protocols through
the SetNetworkProtocols command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocolsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNetworkProtocols(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNetworkProtocols*          tds__SetNetworkProtocols,
    // output parameters:
    _tds__SetNetworkProtocolsResponse  &tds__SetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNetworkProtocols(
    struct soap *soap,
    // input parameters:
    _tds__SetNetworkProtocols*          tds__SetNetworkProtocols,
    // output parameters:
    _tds__SetNetworkProtocolsResponse  &tds__SetNetworkProtocolsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNetworkProtocols SOAP
//gsoap tds  service method-style:	SetNetworkProtocols document
//gsoap tds  service method-encoding:	SetNetworkProtocols literal
//gsoap tds  service method-input-action:	SetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols
//gsoap tds  service method-output-action:	SetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocolsResponse
int __tds__SetNetworkProtocols(
    _tds__SetNetworkProtocols*          tds__SetNetworkProtocols,	///< Input parameter
    _tds__SetNetworkProtocolsResponse  &tds__SetNetworkProtocolsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNetworkDefaultGateway                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNetworkDefaultGateway" of service binding "DeviceBinding".
This operation gets the default gateway settings from a device. The device shall
support the
				GetNetworkDefaultGateway command returning configured
default gateway address(es).

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGatewayResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNetworkDefaultGateway(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNetworkDefaultGateway*     tds__GetNetworkDefaultGateway,
    // output parameters:
    _tds__GetNetworkDefaultGatewayResponse&tds__GetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNetworkDefaultGateway(
    struct soap *soap,
    // input parameters:
    _tds__GetNetworkDefaultGateway*     tds__GetNetworkDefaultGateway,
    // output parameters:
    _tds__GetNetworkDefaultGatewayResponse&tds__GetNetworkDefaultGatewayResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNetworkDefaultGateway SOAP
//gsoap tds  service method-style:	GetNetworkDefaultGateway document
//gsoap tds  service method-encoding:	GetNetworkDefaultGateway literal
//gsoap tds  service method-input-action:	GetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway
//gsoap tds  service method-output-action:	GetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGatewayResponse
int __tds__GetNetworkDefaultGateway(
    _tds__GetNetworkDefaultGateway*     tds__GetNetworkDefaultGateway,	///< Input parameter
    _tds__GetNetworkDefaultGatewayResponse&tds__GetNetworkDefaultGatewayResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNetworkDefaultGateway                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNetworkDefaultGateway" of service binding "DeviceBinding".
This operation sets the default gateway settings on a device. The device shall support
				configuration of default gateway through the SetNetworkDefaultGateway
command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGatewayResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNetworkDefaultGateway(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNetworkDefaultGateway*     tds__SetNetworkDefaultGateway,
    // output parameters:
    _tds__SetNetworkDefaultGatewayResponse&tds__SetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNetworkDefaultGateway(
    struct soap *soap,
    // input parameters:
    _tds__SetNetworkDefaultGateway*     tds__SetNetworkDefaultGateway,
    // output parameters:
    _tds__SetNetworkDefaultGatewayResponse&tds__SetNetworkDefaultGatewayResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNetworkDefaultGateway SOAP
//gsoap tds  service method-style:	SetNetworkDefaultGateway document
//gsoap tds  service method-encoding:	SetNetworkDefaultGateway literal
//gsoap tds  service method-input-action:	SetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway
//gsoap tds  service method-output-action:	SetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGatewayResponse
int __tds__SetNetworkDefaultGateway(
    _tds__SetNetworkDefaultGateway*     tds__SetNetworkDefaultGateway,	///< Input parameter
    _tds__SetNetworkDefaultGatewayResponse&tds__SetNetworkDefaultGatewayResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetZeroConfiguration                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetZeroConfiguration" of service binding "DeviceBinding".
This operation gets the zero-configuration from a device. If the device supports
dynamic IP
				configuration according to [RFC3927], it shall support
the return of IPv4 zero configuration
				address and status through the GetZeroConfiguration
command.<br/>
			Devices supporting zero configuration on more than one interface
shall use the extension to list the additional interface settings.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetZeroConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetZeroConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetZeroConfiguration*         tds__GetZeroConfiguration,
    // output parameters:
    _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetZeroConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__GetZeroConfiguration*         tds__GetZeroConfiguration,
    // output parameters:
    _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetZeroConfiguration SOAP
//gsoap tds  service method-style:	GetZeroConfiguration document
//gsoap tds  service method-encoding:	GetZeroConfiguration literal
//gsoap tds  service method-input-action:	GetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration
//gsoap tds  service method-output-action:	GetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/GetZeroConfigurationResponse
int __tds__GetZeroConfiguration(
    _tds__GetZeroConfiguration*         tds__GetZeroConfiguration,	///< Input parameter
    _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetZeroConfiguration                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetZeroConfiguration" of service binding "DeviceBinding".
This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration
is supported or not.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetZeroConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetZeroConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetZeroConfiguration*         tds__SetZeroConfiguration,
    // output parameters:
    _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetZeroConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__SetZeroConfiguration*         tds__SetZeroConfiguration,
    // output parameters:
    _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetZeroConfiguration SOAP
//gsoap tds  service method-style:	SetZeroConfiguration document
//gsoap tds  service method-encoding:	SetZeroConfiguration literal
//gsoap tds  service method-input-action:	SetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration
//gsoap tds  service method-output-action:	SetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/SetZeroConfigurationResponse
int __tds__SetZeroConfiguration(
    _tds__SetZeroConfiguration*         tds__SetZeroConfiguration,	///< Input parameter
    _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetIPAddressFilter" of service binding "DeviceBinding".
This operation gets the IP address filter settings from a device. If the device
supports device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support the GetIPAddressFilter command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetIPAddressFilter*           tds__GetIPAddressFilter,
    // output parameters:
    _tds__GetIPAddressFilterResponse   &tds__GetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__GetIPAddressFilter*           tds__GetIPAddressFilter,
    // output parameters:
    _tds__GetIPAddressFilterResponse   &tds__GetIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetIPAddressFilter SOAP
//gsoap tds  service method-style:	GetIPAddressFilter document
//gsoap tds  service method-encoding:	GetIPAddressFilter literal
//gsoap tds  service method-input-action:	GetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter
//gsoap tds  service method-output-action:	GetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilterResponse
int __tds__GetIPAddressFilter(
    _tds__GetIPAddressFilter*           tds__GetIPAddressFilter,	///< Input parameter
    _tds__GetIPAddressFilterResponse   &tds__GetIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetIPAddressFilter" of service binding "DeviceBinding".
This operation sets the IP address filter settings on a device. If the device supports
device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support configuration of IP filtering
rules through the SetIPAddressFilter
				command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetIPAddressFilter*           tds__SetIPAddressFilter,
    // output parameters:
    _tds__SetIPAddressFilterResponse   &tds__SetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__SetIPAddressFilter*           tds__SetIPAddressFilter,
    // output parameters:
    _tds__SetIPAddressFilterResponse   &tds__SetIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetIPAddressFilter SOAP
//gsoap tds  service method-style:	SetIPAddressFilter document
//gsoap tds  service method-encoding:	SetIPAddressFilter literal
//gsoap tds  service method-input-action:	SetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter
//gsoap tds  service method-output-action:	SetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilterResponse
int __tds__SetIPAddressFilter(
    _tds__SetIPAddressFilter*           tds__SetIPAddressFilter,	///< Input parameter
    _tds__SetIPAddressFilterResponse   &tds__SetIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__AddIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__AddIPAddressFilter" of service binding "DeviceBinding".
This operation adds an IP filter address to a device. If the device supports device
access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support adding of IP filtering addresses through
the AddIPAddressFilter command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__AddIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__AddIPAddressFilter*           tds__AddIPAddressFilter,
    // output parameters:
    _tds__AddIPAddressFilterResponse   &tds__AddIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__AddIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__AddIPAddressFilter*           tds__AddIPAddressFilter,
    // output parameters:
    _tds__AddIPAddressFilterResponse   &tds__AddIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	AddIPAddressFilter SOAP
//gsoap tds  service method-style:	AddIPAddressFilter document
//gsoap tds  service method-encoding:	AddIPAddressFilter literal
//gsoap tds  service method-input-action:	AddIPAddressFilter http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter
//gsoap tds  service method-output-action:	AddIPAddressFilter http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilterResponse
int __tds__AddIPAddressFilter(
    _tds__AddIPAddressFilter*           tds__AddIPAddressFilter,	///< Input parameter
    _tds__AddIPAddressFilterResponse   &tds__AddIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__RemoveIPAddressFilter                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__RemoveIPAddressFilter" of service binding "DeviceBinding".
This operation deletes an IP filter address from a device. If the device supports
device access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support deletion of IP filtering addresses
through the RemoveIPAddressFilter command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__RemoveIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__RemoveIPAddressFilter*        tds__RemoveIPAddressFilter,
    // output parameters:
    _tds__RemoveIPAddressFilterResponse&tds__RemoveIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__RemoveIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__RemoveIPAddressFilter*        tds__RemoveIPAddressFilter,
    // output parameters:
    _tds__RemoveIPAddressFilterResponse&tds__RemoveIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	RemoveIPAddressFilter SOAP
//gsoap tds  service method-style:	RemoveIPAddressFilter document
//gsoap tds  service method-encoding:	RemoveIPAddressFilter literal
//gsoap tds  service method-input-action:	RemoveIPAddressFilter http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter
//gsoap tds  service method-output-action:	RemoveIPAddressFilter http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilterResponse
int __tds__RemoveIPAddressFilter(
    _tds__RemoveIPAddressFilter*        tds__RemoveIPAddressFilter,	///< Input parameter
    _tds__RemoveIPAddressFilterResponse&tds__RemoveIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetAccessPolicy                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetAccessPolicy" of service binding "DeviceBinding".
Access to different services and sub-sets of services should be subject to access
control. The
				WS-Security framework gives the prerequisite for
end-point authentication. Authorization
				decisions can then be taken using an access security
policy. This standard does not mandate
				any particular policy description format or security
policy but this is up to the device
				manufacturer or system provider to choose policy
and policy description format of choice.
				However, an access policy (in arbitrary format)
can be requested using this command. If the
				device supports access policy settings based on
WS-Security authentication, then the device
				shall support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetAccessPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetAccessPolicy*              tds__GetAccessPolicy,
    // output parameters:
    _tds__GetAccessPolicyResponse      &tds__GetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetAccessPolicy(
    struct soap *soap,
    // input parameters:
    _tds__GetAccessPolicy*              tds__GetAccessPolicy,
    // output parameters:
    _tds__GetAccessPolicyResponse      &tds__GetAccessPolicyResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetAccessPolicy SOAP
//gsoap tds  service method-style:	GetAccessPolicy document
//gsoap tds  service method-encoding:	GetAccessPolicy literal
//gsoap tds  service method-input-action:	GetAccessPolicy http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy
//gsoap tds  service method-output-action:	GetAccessPolicy http://www.onvif.org/ver10/device/wsdl/GetAccessPolicyResponse
int __tds__GetAccessPolicy(
    _tds__GetAccessPolicy*              tds__GetAccessPolicy,	///< Input parameter
    _tds__GetAccessPolicyResponse      &tds__GetAccessPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetAccessPolicy                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetAccessPolicy" of service binding "DeviceBinding".
This command sets the device access security policy (for more details on the access
security
				policy see the Get command). If the device supports
access policy settings
				based on WS-Security authentication, then the device
shall support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetAccessPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetAccessPolicy*              tds__SetAccessPolicy,
    // output parameters:
    _tds__SetAccessPolicyResponse      &tds__SetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetAccessPolicy(
    struct soap *soap,
    // input parameters:
    _tds__SetAccessPolicy*              tds__SetAccessPolicy,
    // output parameters:
    _tds__SetAccessPolicyResponse      &tds__SetAccessPolicyResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetAccessPolicy SOAP
//gsoap tds  service method-style:	SetAccessPolicy document
//gsoap tds  service method-encoding:	SetAccessPolicy literal
//gsoap tds  service method-input-action:	SetAccessPolicy http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy
//gsoap tds  service method-output-action:	SetAccessPolicy http://www.onvif.org/ver10/device/wsdl/SetAccessPolicyResponse
int __tds__SetAccessPolicy(
    _tds__SetAccessPolicy*              tds__SetAccessPolicy,	///< Input parameter
    _tds__SetAccessPolicyResponse      &tds__SetAccessPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateCertificate                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateCertificate" of service binding "DeviceBinding".
This operation generates a private/public key pair and also can create a self-signed
device
				certificate as a result of key pair generation.
The certificate is created using a suitable
				onboard key pair generation mechanism.<br/>
				If a device supports onboard key pair generation,
the device that supports TLS shall support
				this certificate creation command. And also, if
a device supports onboard key pair generation,
				the device that support IEEE 802.1X shall support
this command for the purpose of key pair
				generation. Certificates and key pairs are identified
using certificate IDs. These IDs are either
				chosen by the certificate generation requester or
by the device (in case that no ID value is
				given).

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/CreateCertificate"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateCertificate"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateCertificateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateCertificate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateCertificate*            tds__CreateCertificate,
    // output parameters:
    _tds__CreateCertificateResponse    &tds__CreateCertificateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateCertificate(
    struct soap *soap,
    // input parameters:
    _tds__CreateCertificate*            tds__CreateCertificate,
    // output parameters:
    _tds__CreateCertificateResponse    &tds__CreateCertificateResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateCertificate SOAP
//gsoap tds  service method-style:	CreateCertificate document
//gsoap tds  service method-encoding:	CreateCertificate literal
//gsoap tds  service method-input-action:	CreateCertificate http://www.onvif.org/ver10/device/wsdl/CreateCertificate
//gsoap tds  service method-output-action:	CreateCertificate http://www.onvif.org/ver10/device/wsdl/CreateCertificateResponse
int __tds__CreateCertificate(
    _tds__CreateCertificate*            tds__CreateCertificate,	///< Input parameter
    _tds__CreateCertificateResponse    &tds__CreateCertificateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCertificates                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCertificates" of service binding "DeviceBinding".
This operation gets all device server certificates (including self-signed) for the
purpose of TLS
				authentication and all device client certificates
for the purpose of IEEE 802.1X authentication.
				This command lists only the TLS server certificates
and IEEE 802.1X client certificates for the
				device (neither trusted CA certificates nor trusted
root certificates). The certificates are
				returned as binary data. A device that supports
TLS shall support this command and the
				certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetCertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCertificates*              tds__GetCertificates,
    // output parameters:
    _tds__GetCertificatesResponse      &tds__GetCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCertificates(
    struct soap *soap,
    // input parameters:
    _tds__GetCertificates*              tds__GetCertificates,
    // output parameters:
    _tds__GetCertificatesResponse      &tds__GetCertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCertificates SOAP
//gsoap tds  service method-style:	GetCertificates document
//gsoap tds  service method-encoding:	GetCertificates literal
//gsoap tds  service method-input-action:	GetCertificates http://www.onvif.org/ver10/device/wsdl/GetCertificates
//gsoap tds  service method-output-action:	GetCertificates http://www.onvif.org/ver10/device/wsdl/GetCertificatesResponse
int __tds__GetCertificates(
    _tds__GetCertificates*              tds__GetCertificates,	///< Input parameter
    _tds__GetCertificatesResponse      &tds__GetCertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCertificatesStatus                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCertificatesStatus" of service binding "DeviceBinding".
This operation is specific to TLS functionality. This operation gets the status
				(enabled/disabled) of the device TLS server certificates.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCertificatesStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCertificatesStatus*        tds__GetCertificatesStatus,
    // output parameters:
    _tds__GetCertificatesStatusResponse&tds__GetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCertificatesStatus(
    struct soap *soap,
    // input parameters:
    _tds__GetCertificatesStatus*        tds__GetCertificatesStatus,
    // output parameters:
    _tds__GetCertificatesStatusResponse&tds__GetCertificatesStatusResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCertificatesStatus SOAP
//gsoap tds  service method-style:	GetCertificatesStatus document
//gsoap tds  service method-encoding:	GetCertificatesStatus literal
//gsoap tds  service method-input-action:	GetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus
//gsoap tds  service method-output-action:	GetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatusResponse
int __tds__GetCertificatesStatus(
    _tds__GetCertificatesStatus*        tds__GetCertificatesStatus,	///< Input parameter
    _tds__GetCertificatesStatusResponse&tds__GetCertificatesStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetCertificatesStatus                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetCertificatesStatus" of service binding "DeviceBinding".
This operation is specific to TLS functionality. This operation sets the status
(enable/disable)
				of the device TLS server certificates. A device
that supports TLS shall support this command.
				Typically only one device server certificate is
allowed to be enabled at a time.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetCertificatesStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetCertificatesStatus*        tds__SetCertificatesStatus,
    // output parameters:
    _tds__SetCertificatesStatusResponse&tds__SetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetCertificatesStatus(
    struct soap *soap,
    // input parameters:
    _tds__SetCertificatesStatus*        tds__SetCertificatesStatus,
    // output parameters:
    _tds__SetCertificatesStatusResponse&tds__SetCertificatesStatusResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetCertificatesStatus SOAP
//gsoap tds  service method-style:	SetCertificatesStatus document
//gsoap tds  service method-encoding:	SetCertificatesStatus literal
//gsoap tds  service method-input-action:	SetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus
//gsoap tds  service method-output-action:	SetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatusResponse
int __tds__SetCertificatesStatus(
    _tds__SetCertificatesStatus*        tds__SetCertificatesStatus,	///< Input parameter
    _tds__SetCertificatesStatusResponse&tds__SetCertificatesStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteCertificates                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteCertificates" of service binding "DeviceBinding".
This operation deletes a certificate or multiple certificates. The device MAY also
delete a
				private/public key pair which is coupled with the
certificate to be deleted. The device that
				support either TLS or IEEE 802.1X shall support
the deletion of a certificate or multiple
				certificates through this command. Either all certificates
are deleted successfully or a fault
				message shall be returned without deleting any certificate.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteCertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteCertificates*           tds__DeleteCertificates,
    // output parameters:
    _tds__DeleteCertificatesResponse   &tds__DeleteCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteCertificates(
    struct soap *soap,
    // input parameters:
    _tds__DeleteCertificates*           tds__DeleteCertificates,
    // output parameters:
    _tds__DeleteCertificatesResponse   &tds__DeleteCertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteCertificates SOAP
//gsoap tds  service method-style:	DeleteCertificates document
//gsoap tds  service method-encoding:	DeleteCertificates literal
//gsoap tds  service method-input-action:	DeleteCertificates http://www.onvif.org/ver10/device/wsdl/DeleteCertificates
//gsoap tds  service method-output-action:	DeleteCertificates http://www.onvif.org/ver10/device/wsdl/DeleteCertificatesResponse
int __tds__DeleteCertificates(
    _tds__DeleteCertificates*           tds__DeleteCertificates,	///< Input parameter
    _tds__DeleteCertificatesResponse   &tds__DeleteCertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetPkcs10Request                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetPkcs10Request" of service binding "DeviceBinding".
This operation requests a PKCS #10 certificate signature request from the device.
The
				returned information field shall be either formatted
exactly as specified in [PKCS#10] or PEM
				encoded [PKCS#10] format. In order for this command
to work, the device must already have
				a private/public key pair. This key pair should
be referred by CertificateID as specified in the
				input parameter description. This CertificateID
refers to the key pair generated using
				CreateCertificate command.<br/>
				A device that support onboard key pair generation
that supports either TLS or IEEE 802.1X
				using client certificate shall support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetPkcs10RequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetPkcs10Request(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetPkcs10Request*             tds__GetPkcs10Request,
    // output parameters:
    _tds__GetPkcs10RequestResponse     &tds__GetPkcs10RequestResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetPkcs10Request(
    struct soap *soap,
    // input parameters:
    _tds__GetPkcs10Request*             tds__GetPkcs10Request,
    // output parameters:
    _tds__GetPkcs10RequestResponse     &tds__GetPkcs10RequestResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetPkcs10Request SOAP
//gsoap tds  service method-style:	GetPkcs10Request document
//gsoap tds  service method-encoding:	GetPkcs10Request literal
//gsoap tds  service method-input-action:	GetPkcs10Request http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request
//gsoap tds  service method-output-action:	GetPkcs10Request http://www.onvif.org/ver10/device/wsdl/GetPkcs10RequestResponse
int __tds__GetPkcs10Request(
    _tds__GetPkcs10Request*             tds__GetPkcs10Request,	///< Input parameter
    _tds__GetPkcs10RequestResponse     &tds__GetPkcs10RequestResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__LoadCertificates                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__LoadCertificates" of service binding "DeviceBinding".
TLS server certificate(s) or IEEE 802.1X client certificate(s) created using the
PKCS#10
				certificate request command can be loaded into the
device using this command (see Section
				8.4.13). The certificate ID in the request shall
be present. The device may sort the received
				certificate(s) based on the public key and subject
information in the certificate(s).
				The certificate ID in the request will be the ID
value the client wish to have. The device is
				supposed to scan the generated key pairs present
in the device to identify which is the
				correspondent key pair with the loaded certificate
and then make the link between the
				certificate and the key pair.<br/>
				A device that supports onboard key pair generation
that support either TLS or IEEE 802.1X
				shall support this command.<br/>
				The certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.<br/>
				This command is applicable to any device type, although
the parameter name is called for
				historical reasons NVTCertificate.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/LoadCertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__LoadCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__LoadCertificates*             tds__LoadCertificates,
    // output parameters:
    _tds__LoadCertificatesResponse     &tds__LoadCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__LoadCertificates(
    struct soap *soap,
    // input parameters:
    _tds__LoadCertificates*             tds__LoadCertificates,
    // output parameters:
    _tds__LoadCertificatesResponse     &tds__LoadCertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	LoadCertificates SOAP
//gsoap tds  service method-style:	LoadCertificates document
//gsoap tds  service method-encoding:	LoadCertificates literal
//gsoap tds  service method-input-action:	LoadCertificates http://www.onvif.org/ver10/device/wsdl/LoadCertificates
//gsoap tds  service method-output-action:	LoadCertificates http://www.onvif.org/ver10/device/wsdl/LoadCertificatesResponse
int __tds__LoadCertificates(
    _tds__LoadCertificates*             tds__LoadCertificates,	///< Input parameter
    _tds__LoadCertificatesResponse     &tds__LoadCertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetClientCertificateMode                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetClientCertificateMode" of service binding "DeviceBinding".
This operation is specific to TLS functionality. This operation gets the status
				(enabled/disabled) of the device TLS client authentication.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetClientCertificateMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetClientCertificateMode*     tds__GetClientCertificateMode,
    // output parameters:
    _tds__GetClientCertificateModeResponse&tds__GetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetClientCertificateMode(
    struct soap *soap,
    // input parameters:
    _tds__GetClientCertificateMode*     tds__GetClientCertificateMode,
    // output parameters:
    _tds__GetClientCertificateModeResponse&tds__GetClientCertificateModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetClientCertificateMode SOAP
//gsoap tds  service method-style:	GetClientCertificateMode document
//gsoap tds  service method-encoding:	GetClientCertificateMode literal
//gsoap tds  service method-input-action:	GetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode
//gsoap tds  service method-output-action:	GetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/GetClientCertificateModeResponse
int __tds__GetClientCertificateMode(
    _tds__GetClientCertificateMode*     tds__GetClientCertificateMode,	///< Input parameter
    _tds__GetClientCertificateModeResponse&tds__GetClientCertificateModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetClientCertificateMode                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetClientCertificateMode" of service binding "DeviceBinding".
This operation is specific to TLS functionality. This operation sets the status
				(enabled/disabled) of the device TLS client authentication.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetClientCertificateMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetClientCertificateMode*     tds__SetClientCertificateMode,
    // output parameters:
    _tds__SetClientCertificateModeResponse&tds__SetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetClientCertificateMode(
    struct soap *soap,
    // input parameters:
    _tds__SetClientCertificateMode*     tds__SetClientCertificateMode,
    // output parameters:
    _tds__SetClientCertificateModeResponse&tds__SetClientCertificateModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetClientCertificateMode SOAP
//gsoap tds  service method-style:	SetClientCertificateMode document
//gsoap tds  service method-encoding:	SetClientCertificateMode literal
//gsoap tds  service method-input-action:	SetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode
//gsoap tds  service method-output-action:	SetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/SetClientCertificateModeResponse
int __tds__SetClientCertificateMode(
    _tds__SetClientCertificateMode*     tds__SetClientCertificateMode,	///< Input parameter
    _tds__SetClientCertificateModeResponse&tds__SetClientCertificateModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetRelayOutputs                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetRelayOutputs" of service binding "DeviceBinding".
This operation gets a list of all available relay outputs and their settings.<br/>
				This method has been depricated with version 2.0.
Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetRelayOutputs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetRelayOutputs*              tds__GetRelayOutputs,
    // output parameters:
    _tds__GetRelayOutputsResponse      &tds__GetRelayOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetRelayOutputs(
    struct soap *soap,
    // input parameters:
    _tds__GetRelayOutputs*              tds__GetRelayOutputs,
    // output parameters:
    _tds__GetRelayOutputsResponse      &tds__GetRelayOutputsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetRelayOutputs SOAP
//gsoap tds  service method-style:	GetRelayOutputs document
//gsoap tds  service method-encoding:	GetRelayOutputs literal
//gsoap tds  service method-input-action:	GetRelayOutputs http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs
//gsoap tds  service method-output-action:	GetRelayOutputs http://www.onvif.org/ver10/device/wsdl/GetRelayOutputsResponse
int __tds__GetRelayOutputs(
    _tds__GetRelayOutputs*              tds__GetRelayOutputs,	///< Input parameter
    _tds__GetRelayOutputsResponse      &tds__GetRelayOutputsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRelayOutputSettings                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRelayOutputSettings" of service binding "DeviceBinding".
This operation sets the settings of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettingsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRelayOutputSettings(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRelayOutputSettings*       tds__SetRelayOutputSettings,
    // output parameters:
    _tds__SetRelayOutputSettingsResponse&tds__SetRelayOutputSettingsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRelayOutputSettings(
    struct soap *soap,
    // input parameters:
    _tds__SetRelayOutputSettings*       tds__SetRelayOutputSettings,
    // output parameters:
    _tds__SetRelayOutputSettingsResponse&tds__SetRelayOutputSettingsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRelayOutputSettings SOAP
//gsoap tds  service method-style:	SetRelayOutputSettings document
//gsoap tds  service method-encoding:	SetRelayOutputSettings literal
//gsoap tds  service method-input-action:	SetRelayOutputSettings http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings
//gsoap tds  service method-output-action:	SetRelayOutputSettings http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettingsResponse
int __tds__SetRelayOutputSettings(
    _tds__SetRelayOutputSettings*       tds__SetRelayOutputSettings,	///< Input parameter
    _tds__SetRelayOutputSettingsResponse&tds__SetRelayOutputSettingsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRelayOutputState                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRelayOutputState" of service binding "DeviceBinding".
This operation sets the state of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputStateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRelayOutputState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRelayOutputState*          tds__SetRelayOutputState,
    // output parameters:
    _tds__SetRelayOutputStateResponse  &tds__SetRelayOutputStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRelayOutputState(
    struct soap *soap,
    // input parameters:
    _tds__SetRelayOutputState*          tds__SetRelayOutputState,
    // output parameters:
    _tds__SetRelayOutputStateResponse  &tds__SetRelayOutputStateResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRelayOutputState SOAP
//gsoap tds  service method-style:	SetRelayOutputState document
//gsoap tds  service method-encoding:	SetRelayOutputState literal
//gsoap tds  service method-input-action:	SetRelayOutputState http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState
//gsoap tds  service method-output-action:	SetRelayOutputState http://www.onvif.org/ver10/device/wsdl/SetRelayOutputStateResponse
int __tds__SetRelayOutputState(
    _tds__SetRelayOutputState*          tds__SetRelayOutputState,	///< Input parameter
    _tds__SetRelayOutputStateResponse  &tds__SetRelayOutputStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SendAuxiliaryCommand                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SendAuxiliaryCommand" of service binding "DeviceBinding".
Manage auxiliary commands supported by a device, such as controlling an Infrared
(IR) lamp, 
				a heater or a wiper or a thermometer that is connected
to the device.<br/>
				The supported commands can be retrieved via the
AuxiliaryCommands capability.<br/>
				Although the name of the auxiliary commands can
be freely defined, commands starting with the prefix tt: are 
				reserved to define frequently used commands and
these reserved commands shall all share the "tt:command|parameter" syntax.
				<ul>
					<li>tt:Wiper|On  Request to start the
wiper.</li>
					<li>tt:Wiper|Off  Request to stop the
wiper.</li>
					<li>tt:Washer|On  Request to start the
washer.</li>
					<li>tt:Washer|Off  Request to stop the
washer.</li>
					<li>tt:WashingProcedure|On  Request to
start the washing procedure.</li>
					<li>tt: WashingProcedure |Off  Request
to stop the washing procedure.</li>
					<li>tt:IRLamp|On  Request to turn ON
an IR illuminator attached to the unit.</li>
					<li>tt:IRLamp|Off  Request to turn OFF
an IR illuminator attached to the unit.</li>
					<li>tt:IRLamp|Auto  Request to configure
an IR illuminator attached to the unit so that it automatically turns ON and OFF.</li>
				</ul>
				A device that indicates auxiliary service capability
shall support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommandResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SendAuxiliaryCommand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SendAuxiliaryCommand*         tds__SendAuxiliaryCommand,
    // output parameters:
    _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SendAuxiliaryCommand(
    struct soap *soap,
    // input parameters:
    _tds__SendAuxiliaryCommand*         tds__SendAuxiliaryCommand,
    // output parameters:
    _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SendAuxiliaryCommand SOAP
//gsoap tds  service method-style:	SendAuxiliaryCommand document
//gsoap tds  service method-encoding:	SendAuxiliaryCommand literal
//gsoap tds  service method-input-action:	SendAuxiliaryCommand http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand
//gsoap tds  service method-output-action:	SendAuxiliaryCommand http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommandResponse
int __tds__SendAuxiliaryCommand(
    _tds__SendAuxiliaryCommand*         tds__SendAuxiliaryCommand,	///< Input parameter
    _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCACertificates                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCACertificates" of service binding "DeviceBinding".
CA certificates will be loaded into a device and be used for the sake of following
two cases.
				The one is for the purpose of TLS client authentication
in TLS server function. The other one
				is for the purpose of Authentication Server authentication
in IEEE 802.1X function. This
				operation gets all CA certificates loaded into a
device. A device that supports either TLS client
				authentication or IEEE 802.1X shall support this
command and the returned certificates shall
				be encoded using ASN.1 [X.681], [X.682], [X.683]
DER [X.690] encoding rules.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetCACertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCACertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCACertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCACertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCACertificates*            tds__GetCACertificates,
    // output parameters:
    _tds__GetCACertificatesResponse    &tds__GetCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCACertificates(
    struct soap *soap,
    // input parameters:
    _tds__GetCACertificates*            tds__GetCACertificates,
    // output parameters:
    _tds__GetCACertificatesResponse    &tds__GetCACertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCACertificates SOAP
//gsoap tds  service method-style:	GetCACertificates document
//gsoap tds  service method-encoding:	GetCACertificates literal
//gsoap tds  service method-input-action:	GetCACertificates http://www.onvif.org/ver10/device/wsdl/GetCACertificates
//gsoap tds  service method-output-action:	GetCACertificates http://www.onvif.org/ver10/device/wsdl/GetCACertificatesResponse
int __tds__GetCACertificates(
    _tds__GetCACertificates*            tds__GetCACertificates,	///< Input parameter
    _tds__GetCACertificatesResponse    &tds__GetCACertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__LoadCertificateWithPrivateKey                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__LoadCertificateWithPrivateKey" of service binding "DeviceBinding".
There might be some cases that a Certificate Authority or some other equivalent
creates a
				certificate without having PKCS#10 certificate signing
request. In such cases, the certificate
				will be bundled in conjunction with its private
key. This command will be used for such use
				case scenarios. The certificate ID in the request
is optionally set to the ID value the client
				wish to have. If the certificate ID is not specified
in the request, device can choose the ID
				accordingly.<br/>
				This operation imports a private/public key pair
into the device.
				The certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.<br/>
				A device that does not support onboard key pair
generation and support either TLS or IEEE
				802.1X using client certificate shall support this
command. A device that support onboard key
				pair generation MAY support this command. The security
policy of a device that supports this
				operation should make sure that the private key
is sufficiently protected.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__LoadCertificateWithPrivateKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__LoadCertificateWithPrivateKey* tds__LoadCertificateWithPrivateKey,
    // output parameters:
    _tds__LoadCertificateWithPrivateKeyResponse&tds__LoadCertificateWithPrivateKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__LoadCertificateWithPrivateKey(
    struct soap *soap,
    // input parameters:
    _tds__LoadCertificateWithPrivateKey* tds__LoadCertificateWithPrivateKey,
    // output parameters:
    _tds__LoadCertificateWithPrivateKeyResponse&tds__LoadCertificateWithPrivateKeyResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	LoadCertificateWithPrivateKey SOAP
//gsoap tds  service method-style:	LoadCertificateWithPrivateKey document
//gsoap tds  service method-encoding:	LoadCertificateWithPrivateKey literal
//gsoap tds  service method-input-action:	LoadCertificateWithPrivateKey http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey
//gsoap tds  service method-output-action:	LoadCertificateWithPrivateKey http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKeyResponse
int __tds__LoadCertificateWithPrivateKey(
    _tds__LoadCertificateWithPrivateKey* tds__LoadCertificateWithPrivateKey,	///< Input parameter
    _tds__LoadCertificateWithPrivateKeyResponse&tds__LoadCertificateWithPrivateKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCertificateInformation                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCertificateInformation" of service binding "DeviceBinding".
This operation requests the information of a certificate specified by certificate
ID. The device
				should respond with its Issuer DN, Subject
DN, Key usage, "Extended key usage, Key
				Length, Version, Serial Number, Signature
Algorithm and Validity data as the
				information of the certificate, as long as the device
can retrieve such information from the
				specified certificate.<br/>
				A device that supports either TLS or IEEE 802.1X
should support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCertificateInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCertificateInformation*    tds__GetCertificateInformation,
    // output parameters:
    _tds__GetCertificateInformationResponse&tds__GetCertificateInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCertificateInformation(
    struct soap *soap,
    // input parameters:
    _tds__GetCertificateInformation*    tds__GetCertificateInformation,
    // output parameters:
    _tds__GetCertificateInformationResponse&tds__GetCertificateInformationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCertificateInformation SOAP
//gsoap tds  service method-style:	GetCertificateInformation document
//gsoap tds  service method-encoding:	GetCertificateInformation literal
//gsoap tds  service method-input-action:	GetCertificateInformation http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation
//gsoap tds  service method-output-action:	GetCertificateInformation http://www.onvif.org/ver10/device/wsdl/GetCertificateInformationResponse
int __tds__GetCertificateInformation(
    _tds__GetCertificateInformation*    tds__GetCertificateInformation,	///< Input parameter
    _tds__GetCertificateInformationResponse&tds__GetCertificateInformationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__LoadCACertificates                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__LoadCACertificates" of service binding "DeviceBinding".
This command is used when it is necessary to load trusted CA certificates or trusted
root
				certificates for the purpose of verification for
its counterpart i.e. client certificate verification in
				TLS function or server certificate verification
in IEEE 802.1X function.<br/>
				A device that support either TLS or IEEE 802.1X
shall support this command. As for the
				supported certificate format, either DER format
or PEM format is possible to be used. But a
				device that support this command shall support at
least DER format as supported format type.
				The device may sort the received certificate(s)
based on the public key and subject
				information in the certificate(s). Either all CA
certificates are loaded successfully or a fault
				message shall be returned without loading any CA
certificate.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/LoadCACertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__LoadCACertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__LoadCACertificates*           tds__LoadCACertificates,
    // output parameters:
    _tds__LoadCACertificatesResponse   &tds__LoadCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__LoadCACertificates(
    struct soap *soap,
    // input parameters:
    _tds__LoadCACertificates*           tds__LoadCACertificates,
    // output parameters:
    _tds__LoadCACertificatesResponse   &tds__LoadCACertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	LoadCACertificates SOAP
//gsoap tds  service method-style:	LoadCACertificates document
//gsoap tds  service method-encoding:	LoadCACertificates literal
//gsoap tds  service method-input-action:	LoadCACertificates http://www.onvif.org/ver10/device/wsdl/LoadCACertificates
//gsoap tds  service method-output-action:	LoadCACertificates http://www.onvif.org/ver10/device/wsdl/LoadCACertificatesResponse
int __tds__LoadCACertificates(
    _tds__LoadCACertificates*           tds__LoadCACertificates,	///< Input parameter
    _tds__LoadCACertificatesResponse   &tds__LoadCACertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateDot1XConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateDot1XConfiguration" of service binding "DeviceBinding".
This operation newly creates IEEE 802.1X configuration parameter set of the device.
The
				device shall support this command if it supports
IEEE 802.1X. If the device receives this
				request with already existing configuration token
(Dot1XConfigurationToken) specification, the
				device should respond with 'ter:ReferenceToken '
error to indicate there is some configuration
				conflict.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateDot1XConfiguration*     tds__CreateDot1XConfiguration,
    // output parameters:
    _tds__CreateDot1XConfigurationResponse&tds__CreateDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__CreateDot1XConfiguration*     tds__CreateDot1XConfiguration,
    // output parameters:
    _tds__CreateDot1XConfigurationResponse&tds__CreateDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateDot1XConfiguration SOAP
//gsoap tds  service method-style:	CreateDot1XConfiguration document
//gsoap tds  service method-encoding:	CreateDot1XConfiguration literal
//gsoap tds  service method-input-action:	CreateDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration
//gsoap tds  service method-output-action:	CreateDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfigurationResponse
int __tds__CreateDot1XConfiguration(
    _tds__CreateDot1XConfiguration*     tds__CreateDot1XConfiguration,	///< Input parameter
    _tds__CreateDot1XConfigurationResponse&tds__CreateDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDot1XConfiguration                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDot1XConfiguration" of service binding "DeviceBinding".
While the CreateDot1XConfiguration command is trying to create a new configuration
				parameter set, this operation modifies existing
IEEE 802.1X configuration parameter set of
				the device. A device that support IEEE 802.1X shall
support this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDot1XConfiguration*        tds__SetDot1XConfiguration,
    // output parameters:
    _tds__SetDot1XConfigurationResponse&tds__SetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__SetDot1XConfiguration*        tds__SetDot1XConfiguration,
    // output parameters:
    _tds__SetDot1XConfigurationResponse&tds__SetDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDot1XConfiguration SOAP
//gsoap tds  service method-style:	SetDot1XConfiguration document
//gsoap tds  service method-encoding:	SetDot1XConfiguration literal
//gsoap tds  service method-input-action:	SetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration
//gsoap tds  service method-output-action:	SetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/SetDot1XConfigurationResponse
int __tds__SetDot1XConfiguration(
    _tds__SetDot1XConfiguration*        tds__SetDot1XConfiguration,	///< Input parameter
    _tds__SetDot1XConfigurationResponse&tds__SetDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot1XConfiguration                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot1XConfiguration" of service binding "DeviceBinding".
This operation gets one IEEE 802.1X configuration parameter set from the device
by
				specifying the configuration token (Dot1XConfigurationToken).<br/>
				A device that supports IEEE 802.1X shall support
this command.
				Regardless of whether the 802.1X method in the retrieved
configuration has a password or
				not, the device shall not include the Password element
in the response.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot1XConfiguration*        tds__GetDot1XConfiguration,
    // output parameters:
    _tds__GetDot1XConfigurationResponse&tds__GetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__GetDot1XConfiguration*        tds__GetDot1XConfiguration,
    // output parameters:
    _tds__GetDot1XConfigurationResponse&tds__GetDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot1XConfiguration SOAP
//gsoap tds  service method-style:	GetDot1XConfiguration document
//gsoap tds  service method-encoding:	GetDot1XConfiguration literal
//gsoap tds  service method-input-action:	GetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration
//gsoap tds  service method-output-action:	GetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationResponse
int __tds__GetDot1XConfiguration(
    _tds__GetDot1XConfiguration*        tds__GetDot1XConfiguration,	///< Input parameter
    _tds__GetDot1XConfigurationResponse&tds__GetDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot1XConfigurations                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot1XConfigurations" of service binding "DeviceBinding".
This operation gets all the existing IEEE 802.1X configuration parameter sets from
the device.
				The device shall respond with all the IEEE 802.1X
configurations so that the client can get to
				know how many IEEE 802.1X configurations are existing
and how they are configured.<br/>
				A device that support IEEE 802.1X shall support
this command.<br/>
				Regardless of whether the 802.1X method in the retrieved
configuration has a password or
				not, the device shall not include the Password element
in the response.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot1XConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot1XConfigurations*       tds__GetDot1XConfigurations,
    // output parameters:
    _tds__GetDot1XConfigurationsResponse&tds__GetDot1XConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot1XConfigurations(
    struct soap *soap,
    // input parameters:
    _tds__GetDot1XConfigurations*       tds__GetDot1XConfigurations,
    // output parameters:
    _tds__GetDot1XConfigurationsResponse&tds__GetDot1XConfigurationsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot1XConfigurations SOAP
//gsoap tds  service method-style:	GetDot1XConfigurations document
//gsoap tds  service method-encoding:	GetDot1XConfigurations literal
//gsoap tds  service method-input-action:	GetDot1XConfigurations http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations
//gsoap tds  service method-output-action:	GetDot1XConfigurations http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationsResponse
int __tds__GetDot1XConfigurations(
    _tds__GetDot1XConfigurations*       tds__GetDot1XConfigurations,	///< Input parameter
    _tds__GetDot1XConfigurationsResponse&tds__GetDot1XConfigurationsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteDot1XConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteDot1XConfiguration" of service binding "DeviceBinding".
This operation deletes an IEEE 802.1X configuration parameter set from the device.
Which
				configuration should be deleted is specified by
the 'Dot1XConfigurationToken' in the request.
				A device that support IEEE 802.1X shall support
this command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteDot1XConfiguration*     tds__DeleteDot1XConfiguration,
    // output parameters:
    _tds__DeleteDot1XConfigurationResponse&tds__DeleteDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__DeleteDot1XConfiguration*     tds__DeleteDot1XConfiguration,
    // output parameters:
    _tds__DeleteDot1XConfigurationResponse&tds__DeleteDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteDot1XConfiguration SOAP
//gsoap tds  service method-style:	DeleteDot1XConfiguration document
//gsoap tds  service method-encoding:	DeleteDot1XConfiguration literal
//gsoap tds  service method-input-action:	DeleteDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration
//gsoap tds  service method-output-action:	DeleteDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfigurationResponse
int __tds__DeleteDot1XConfiguration(
    _tds__DeleteDot1XConfiguration*     tds__DeleteDot1XConfiguration,	///< Input parameter
    _tds__DeleteDot1XConfigurationResponse&tds__DeleteDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot11Capabilities                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot11Capabilities" of service binding "DeviceBinding".
This operation returns the IEEE802.11 capabilities. The device shall support
				this operation.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot11CapabilitiesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot11Capabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot11Capabilities*         tds__GetDot11Capabilities,
    // output parameters:
    _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot11Capabilities(
    struct soap *soap,
    // input parameters:
    _tds__GetDot11Capabilities*         tds__GetDot11Capabilities,
    // output parameters:
    _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot11Capabilities SOAP
//gsoap tds  service method-style:	GetDot11Capabilities document
//gsoap tds  service method-encoding:	GetDot11Capabilities literal
//gsoap tds  service method-input-action:	GetDot11Capabilities http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities
//gsoap tds  service method-output-action:	GetDot11Capabilities http://www.onvif.org/ver10/device/wsdl/GetDot11CapabilitiesResponse
int __tds__GetDot11Capabilities(
    _tds__GetDot11Capabilities*         tds__GetDot11Capabilities,	///< Input parameter
    _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot11Status                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot11Status" of service binding "DeviceBinding".
This operation returns the status of a wireless network interface. The device shall
support this
				command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetDot11Status"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot11Status"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot11StatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot11Status(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot11Status*               tds__GetDot11Status,
    // output parameters:
    _tds__GetDot11StatusResponse       &tds__GetDot11StatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot11Status(
    struct soap *soap,
    // input parameters:
    _tds__GetDot11Status*               tds__GetDot11Status,
    // output parameters:
    _tds__GetDot11StatusResponse       &tds__GetDot11StatusResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot11Status SOAP
//gsoap tds  service method-style:	GetDot11Status document
//gsoap tds  service method-encoding:	GetDot11Status literal
//gsoap tds  service method-input-action:	GetDot11Status http://www.onvif.org/ver10/device/wsdl/GetDot11Status
//gsoap tds  service method-output-action:	GetDot11Status http://www.onvif.org/ver10/device/wsdl/GetDot11StatusResponse
int __tds__GetDot11Status(
    _tds__GetDot11Status*               tds__GetDot11Status,	///< Input parameter
    _tds__GetDot11StatusResponse       &tds__GetDot11StatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__ScanAvailableDot11Networks                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__ScanAvailableDot11Networks" of service binding "DeviceBinding".
This operation returns a lists of the wireless networks in range of the device.
A device should
				support this operation.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11NetworksResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__ScanAvailableDot11Networks(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__ScanAvailableDot11Networks*   tds__ScanAvailableDot11Networks,
    // output parameters:
    _tds__ScanAvailableDot11NetworksResponse&tds__ScanAvailableDot11NetworksResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__ScanAvailableDot11Networks(
    struct soap *soap,
    // input parameters:
    _tds__ScanAvailableDot11Networks*   tds__ScanAvailableDot11Networks,
    // output parameters:
    _tds__ScanAvailableDot11NetworksResponse&tds__ScanAvailableDot11NetworksResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	ScanAvailableDot11Networks SOAP
//gsoap tds  service method-style:	ScanAvailableDot11Networks document
//gsoap tds  service method-encoding:	ScanAvailableDot11Networks literal
//gsoap tds  service method-input-action:	ScanAvailableDot11Networks http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks
//gsoap tds  service method-output-action:	ScanAvailableDot11Networks http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11NetworksResponse
int __tds__ScanAvailableDot11Networks(
    _tds__ScanAvailableDot11Networks*   tds__ScanAvailableDot11Networks,	///< Input parameter
    _tds__ScanAvailableDot11NetworksResponse&tds__ScanAvailableDot11NetworksResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemUris                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemUris" of service binding "DeviceBinding".
This operation is used to retrieve URIs from which system information may be downloaded
				using HTTP. URIs may be returned for the following
system information:<br/>
				System Logs. Multiple system logs may be returned,
of different types. The exact format of
				the system logs is outside the scope of this specification.<br/>
				Support Information. This consists of arbitrary
device diagnostics information from a device.
				The exact format of the diagnostic information is
outside the scope of this specification.<br/>
				System Backup. The received file is a backup file
that can be used to restore the current
				device configuration at a later date. The exact
format of the backup configuration file is
				outside the scope of this specification.<br/>
				If the device allows retrieval of system logs, support
information or system backup data, it
				should make them available via HTTP GET. If it does,
it shall support the GetSystemUris
				command.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetSystemUris"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemUris"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemUrisResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemUris(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemUris*                tds__GetSystemUris,
    // output parameters:
    _tds__GetSystemUrisResponse        &tds__GetSystemUrisResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemUris(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemUris*                tds__GetSystemUris,
    // output parameters:
    _tds__GetSystemUrisResponse        &tds__GetSystemUrisResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemUris SOAP
//gsoap tds  service method-style:	GetSystemUris document
//gsoap tds  service method-encoding:	GetSystemUris literal
//gsoap tds  service method-input-action:	GetSystemUris http://www.onvif.org/ver10/device/wsdl/GetSystemUris
//gsoap tds  service method-output-action:	GetSystemUris http://www.onvif.org/ver10/device/wsdl/GetSystemUrisResponse
int __tds__GetSystemUris(
    _tds__GetSystemUris*                tds__GetSystemUris,	///< Input parameter
    _tds__GetSystemUrisResponse        &tds__GetSystemUrisResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__StartFirmwareUpgrade                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__StartFirmwareUpgrade" of service binding "DeviceBinding".
This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
				to the command includes an HTTP URL to which the
upgrade file may be uploaded. The
				actual upgrade takes place as soon as the HTTP POST
operation has completed. The device
				should support firmware upgrade through the StartFirmwareUpgrade
command. The exact
				format of the firmware data is outside the scope
of this specification.
				Firmware upgrade over HTTP may be achieved using
the following steps:<ol>
					<li>Client calls StartFirmwareUpgrade.</li>
					<li>Server responds with upload URI and
optional delay value.</li>
					<li>Client waits for delay duration if specified
by server.</li>
					<li>Client transmits the firmware image
to the upload URI using HTTP POST.</li>
					<li>Server reprograms itself using the uploaded
image, then reboots.</li>
				</ol>
				If the firmware upgrade fails because the upgrade
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
firmware upgrade fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgradeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__StartFirmwareUpgrade(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__StartFirmwareUpgrade*         tds__StartFirmwareUpgrade,
    // output parameters:
    _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__StartFirmwareUpgrade(
    struct soap *soap,
    // input parameters:
    _tds__StartFirmwareUpgrade*         tds__StartFirmwareUpgrade,
    // output parameters:
    _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	StartFirmwareUpgrade SOAP
//gsoap tds  service method-style:	StartFirmwareUpgrade document
//gsoap tds  service method-encoding:	StartFirmwareUpgrade literal
//gsoap tds  service method-input-action:	StartFirmwareUpgrade http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade
//gsoap tds  service method-output-action:	StartFirmwareUpgrade http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgradeResponse
int __tds__StartFirmwareUpgrade(
    _tds__StartFirmwareUpgrade*         tds__StartFirmwareUpgrade,	///< Input parameter
    _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__StartSystemRestore                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__StartSystemRestore" of service binding "DeviceBinding".
This operation initiates a system restore from backed up configuration data using
the HTTP
				POST mechanism. The response to the command includes
an HTTP URL to which the backup
				file may be uploaded. The actual restore takes place
as soon as the HTTP POST operation
				has completed. Devices should support system restore
through the StartSystemRestore
				command. The exact format of the backup configuration
data is outside the scope of this
				specification.<br/>
				System restore over HTTP may be achieved using the
following steps:<ol>
					<li>Client calls StartSystemRestore.</li>
					<li>Server responds with upload URI.</li>
					<li>Client transmits the configuration data
to the upload URI using HTTP POST.</li>
					<li>Server applies the uploaded configuration,
then reboots if necessary.</li>
				</ol>
				If the system restore fails because the uploaded
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
system restore fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/StartSystemRestoreResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__StartSystemRestore(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__StartSystemRestore*           tds__StartSystemRestore,
    // output parameters:
    _tds__StartSystemRestoreResponse   &tds__StartSystemRestoreResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__StartSystemRestore(
    struct soap *soap,
    // input parameters:
    _tds__StartSystemRestore*           tds__StartSystemRestore,
    // output parameters:
    _tds__StartSystemRestoreResponse   &tds__StartSystemRestoreResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	StartSystemRestore SOAP
//gsoap tds  service method-style:	StartSystemRestore document
//gsoap tds  service method-encoding:	StartSystemRestore literal
//gsoap tds  service method-input-action:	StartSystemRestore http://www.onvif.org/ver10/device/wsdl/StartSystemRestore
//gsoap tds  service method-output-action:	StartSystemRestore http://www.onvif.org/ver10/device/wsdl/StartSystemRestoreResponse
int __tds__StartSystemRestore(
    _tds__StartSystemRestore*           tds__StartSystemRestore,	///< Input parameter
    _tds__StartSystemRestoreResponse   &tds__StartSystemRestoreResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetStorageConfigurations                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetStorageConfigurations" of service binding "DeviceBinding".

			This operation lists all existing storage configurations
for the device. 
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetStorageConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetStorageConfigurations*     tds__GetStorageConfigurations,
    // output parameters:
    _tds__GetStorageConfigurationsResponse&tds__GetStorageConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetStorageConfigurations(
    struct soap *soap,
    // input parameters:
    _tds__GetStorageConfigurations*     tds__GetStorageConfigurations,
    // output parameters:
    _tds__GetStorageConfigurationsResponse&tds__GetStorageConfigurationsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetStorageConfigurations SOAP
//gsoap tds  service method-style:	GetStorageConfigurations document
//gsoap tds  service method-encoding:	GetStorageConfigurations literal
//gsoap tds  service method-input-action:	GetStorageConfigurations http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations
//gsoap tds  service method-output-action:	GetStorageConfigurations http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationsResponse
int __tds__GetStorageConfigurations(
    _tds__GetStorageConfigurations*     tds__GetStorageConfigurations,	///< Input parameter
    _tds__GetStorageConfigurationsResponse&tds__GetStorageConfigurationsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateStorageConfiguration                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateStorageConfiguration" of service binding "DeviceBinding".

			This operation creates a new storage configuration. 
			The configuration data shall be created in the device and
shall be persistent (remain after reboot).
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateStorageConfiguration*   tds__CreateStorageConfiguration,
    // output parameters:
    _tds__CreateStorageConfigurationResponse&tds__CreateStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__CreateStorageConfiguration*   tds__CreateStorageConfiguration,
    // output parameters:
    _tds__CreateStorageConfigurationResponse&tds__CreateStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateStorageConfiguration SOAP
//gsoap tds  service method-style:	CreateStorageConfiguration document
//gsoap tds  service method-encoding:	CreateStorageConfiguration literal
//gsoap tds  service method-input-action:	CreateStorageConfiguration http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration
//gsoap tds  service method-output-action:	CreateStorageConfiguration http://www.onvif.org/ver10/device/wsdl/CreateStorageConfigurationResponse
int __tds__CreateStorageConfiguration(
    _tds__CreateStorageConfiguration*   tds__CreateStorageConfiguration,	///< Input parameter
    _tds__CreateStorageConfigurationResponse&tds__CreateStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetStorageConfiguration                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetStorageConfiguration" of service binding "DeviceBinding".

			This operation retrieves the Storage configuration associated
with the given storage configuration token.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetStorageConfiguration*      tds__GetStorageConfiguration,
    // output parameters:
    _tds__GetStorageConfigurationResponse&tds__GetStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__GetStorageConfiguration*      tds__GetStorageConfiguration,
    // output parameters:
    _tds__GetStorageConfigurationResponse&tds__GetStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetStorageConfiguration SOAP
//gsoap tds  service method-style:	GetStorageConfiguration document
//gsoap tds  service method-encoding:	GetStorageConfiguration literal
//gsoap tds  service method-input-action:	GetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration
//gsoap tds  service method-output-action:	GetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationResponse
int __tds__GetStorageConfiguration(
    _tds__GetStorageConfiguration*      tds__GetStorageConfiguration,	///< Input parameter
    _tds__GetStorageConfigurationResponse&tds__GetStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetStorageConfiguration                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetStorageConfiguration" of service binding "DeviceBinding".

			This operation modifies an existing Storage configuration.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetStorageConfiguration*      tds__SetStorageConfiguration,
    // output parameters:
    _tds__SetStorageConfigurationResponse&tds__SetStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__SetStorageConfiguration*      tds__SetStorageConfiguration,
    // output parameters:
    _tds__SetStorageConfigurationResponse&tds__SetStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetStorageConfiguration SOAP
//gsoap tds  service method-style:	SetStorageConfiguration document
//gsoap tds  service method-encoding:	SetStorageConfiguration literal
//gsoap tds  service method-input-action:	SetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration
//gsoap tds  service method-output-action:	SetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/SetStorageConfigurationResponse
int __tds__SetStorageConfiguration(
    _tds__SetStorageConfiguration*      tds__SetStorageConfiguration,	///< Input parameter
    _tds__SetStorageConfigurationResponse&tds__SetStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteStorageConfiguration                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteStorageConfiguration" of service binding "DeviceBinding".

			This operation deletes the given storage configuration and
configuration change shall always be persistent.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteStorageConfiguration*   tds__DeleteStorageConfiguration,
    // output parameters:
    _tds__DeleteStorageConfigurationResponse&tds__DeleteStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__DeleteStorageConfiguration*   tds__DeleteStorageConfiguration,
    // output parameters:
    _tds__DeleteStorageConfigurationResponse&tds__DeleteStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteStorageConfiguration SOAP
//gsoap tds  service method-style:	DeleteStorageConfiguration document
//gsoap tds  service method-encoding:	DeleteStorageConfiguration literal
//gsoap tds  service method-input-action:	DeleteStorageConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration
//gsoap tds  service method-output-action:	DeleteStorageConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfigurationResponse
int __tds__DeleteStorageConfiguration(
    _tds__DeleteStorageConfiguration*   tds__DeleteStorageConfiguration,	///< Input parameter
    _tds__DeleteStorageConfigurationResponse&tds__DeleteStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetGeoLocation                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetGeoLocation" of service binding "DeviceBinding".

				This operation lists all existing geo location configurations
for the device. 
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/GetGeoLocation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetGeoLocation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetGeoLocationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetGeoLocation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetGeoLocation*               tds__GetGeoLocation,
    // output parameters:
    _tds__GetGeoLocationResponse       &tds__GetGeoLocationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetGeoLocation(
    struct soap *soap,
    // input parameters:
    _tds__GetGeoLocation*               tds__GetGeoLocation,
    // output parameters:
    _tds__GetGeoLocationResponse       &tds__GetGeoLocationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetGeoLocation SOAP
//gsoap tds  service method-style:	GetGeoLocation document
//gsoap tds  service method-encoding:	GetGeoLocation literal
//gsoap tds  service method-input-action:	GetGeoLocation http://www.onvif.org/ver10/device/wsdl/GetGeoLocation
//gsoap tds  service method-output-action:	GetGeoLocation http://www.onvif.org/ver10/device/wsdl/GetGeoLocationResponse
int __tds__GetGeoLocation(
    _tds__GetGeoLocation*               tds__GetGeoLocation,	///< Input parameter
    _tds__GetGeoLocationResponse       &tds__GetGeoLocationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetGeoLocation                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetGeoLocation" of service binding "DeviceBinding".

				This operation allows to modify one or more geo
configuration entries.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/SetGeoLocation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetGeoLocation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetGeoLocationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetGeoLocation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetGeoLocation*               tds__SetGeoLocation,
    // output parameters:
    _tds__SetGeoLocationResponse       &tds__SetGeoLocationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetGeoLocation(
    struct soap *soap,
    // input parameters:
    _tds__SetGeoLocation*               tds__SetGeoLocation,
    // output parameters:
    _tds__SetGeoLocationResponse       &tds__SetGeoLocationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetGeoLocation SOAP
//gsoap tds  service method-style:	SetGeoLocation document
//gsoap tds  service method-encoding:	SetGeoLocation literal
//gsoap tds  service method-input-action:	SetGeoLocation http://www.onvif.org/ver10/device/wsdl/SetGeoLocation
//gsoap tds  service method-output-action:	SetGeoLocation http://www.onvif.org/ver10/device/wsdl/SetGeoLocationResponse
int __tds__SetGeoLocation(
    _tds__SetGeoLocation*               tds__SetGeoLocation,	///< Input parameter
    _tds__SetGeoLocationResponse       &tds__SetGeoLocationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteGeoLocation                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteGeoLocation" of service binding "DeviceBinding".

				This operation deletes the given geo location entries.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteGeoLocation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteGeoLocation*            tds__DeleteGeoLocation,
    // output parameters:
    _tds__DeleteGeoLocationResponse    &tds__DeleteGeoLocationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteGeoLocation(
    struct soap *soap,
    // input parameters:
    _tds__DeleteGeoLocation*            tds__DeleteGeoLocation,
    // output parameters:
    _tds__DeleteGeoLocationResponse    &tds__DeleteGeoLocationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h generated with soapcpp2):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h generated with soapcpp2):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteGeoLocation SOAP
//gsoap tds  service method-style:	DeleteGeoLocation document
//gsoap tds  service method-encoding:	DeleteGeoLocation literal
//gsoap tds  service method-input-action:	DeleteGeoLocation http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation
//gsoap tds  service method-output-action:	DeleteGeoLocation http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocationResponse
int __tds__DeleteGeoLocation(
    _tds__DeleteGeoLocation*            tds__DeleteGeoLocation,	///< Input parameter
    _tds__DeleteGeoLocationResponse    &tds__DeleteGeoLocationResponse	///< Output parameter
);

/**

@page DeviceBinding Binding "DeviceBinding"

@section DeviceBinding_policy_enablers Policy Enablers of Binding "DeviceBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   CreatePullPointBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevcppb__CreatePullPoint                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevcppb__CreatePullPoint" of service binding "CreatePullPointBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevcppb__CreatePullPoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__CreatePullPoint*             wsnt__CreatePullPoint,
    // output parameters:
    _wsnt__CreatePullPointResponse     &wsnt__CreatePullPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevcppb__CreatePullPoint(
    struct soap *soap,
    // input parameters:
    _wsnt__CreatePullPoint*             wsnt__CreatePullPoint,
    // output parameters:
    _wsnt__CreatePullPointResponse     &wsnt__CreatePullPointResponse
  );
@endcode

C++ proxy class (defined in soapCreatePullPointBindingProxy.h generated with soapcpp2):
@code
  class CreatePullPointBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCreatePullPointBindingService.h generated with soapcpp2):
@code
  class CreatePullPointBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevcppb service method-protocol:	CreatePullPoint SOAP
//gsoap tevcppb service method-style:	CreatePullPoint document
//gsoap tevcppb service method-encoding:	CreatePullPoint literal
//gsoap tevcppb service method-input-action:	CreatePullPoint http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequest
//gsoap tevcppb service method-output-action:	CreatePullPoint http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequestResponse
//gsoap tevcppb service method-fault:	CreatePullPoint wsnt__UnableToCreatePullPointFault
int __tevcppb__CreatePullPoint(
    _wsnt__CreatePullPoint*             wsnt__CreatePullPoint,	///< Input parameter
    _wsnt__CreatePullPointResponse     &wsnt__CreatePullPointResponse	///< Output parameter
);

/**

@page CreatePullPointBinding Binding "CreatePullPointBinding"

@section CreatePullPointBinding_policy_enablers Policy Enablers of Binding "CreatePullPointBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   EventBinding                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __teveb__GetServiceCapabilities                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__teveb__GetServiceCapabilities" of service binding "EventBinding".
Returns the capabilities of the event service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilitiesRequest"

  - Addressing input action: "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilitiesRequest"

  - Addressing output action: "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilitiesRequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___teveb__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tev__GetServiceCapabilities*       tev__GetServiceCapabilities,
    // output parameters:
    _tev__GetServiceCapabilitiesResponse&tev__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __teveb__GetServiceCapabilities(
    struct soap *soap,
    // input parameters:
    _tev__GetServiceCapabilities*       tev__GetServiceCapabilities,
    // output parameters:
    _tev__GetServiceCapabilitiesResponse&tev__GetServiceCapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapEventBindingProxy.h generated with soapcpp2):
@code
  class EventBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEventBindingService.h generated with soapcpp2):
@code
  class EventBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap teveb service method-protocol:	GetServiceCapabilities SOAP
//gsoap teveb service method-style:	GetServiceCapabilities document
//gsoap teveb service method-encoding:	GetServiceCapabilities literal
//gsoap teveb service method-input-action:	GetServiceCapabilities http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilitiesRequest
//gsoap teveb service method-output-action:	GetServiceCapabilities http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilitiesRequestResponse
int __teveb__GetServiceCapabilities(
    _tev__GetServiceCapabilities*       tev__GetServiceCapabilities,	///< Input parameter
    _tev__GetServiceCapabilitiesResponse&tev__GetServiceCapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __teveb__CreatePullPointSubscription                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__teveb__CreatePullPointSubscription" of service binding "EventBinding".
This method returns a PullPointSubscription that can be polled using PullMessages.

				This message contains the same elements as the SubscriptionRequest
of the WS-BaseNotification without the ConsumerReference.<br/>
				If no Filter is specified the pullpoint notifies
all occurring events to the client.<br/>
				This method is mandatory.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequest"

  - Addressing input action: "http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequest"

  - Addressing output action: "http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___teveb__CreatePullPointSubscription(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tev__CreatePullPointSubscription*  tev__CreatePullPointSubscription,
    // output parameters:
    _tev__CreatePullPointSubscriptionResponse&tev__CreatePullPointSubscriptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __teveb__CreatePullPointSubscription(
    struct soap *soap,
    // input parameters:
    _tev__CreatePullPointSubscription*  tev__CreatePullPointSubscription,
    // output parameters:
    _tev__CreatePullPointSubscriptionResponse&tev__CreatePullPointSubscriptionResponse
  );
@endcode

C++ proxy class (defined in soapEventBindingProxy.h generated with soapcpp2):
@code
  class EventBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEventBindingService.h generated with soapcpp2):
@code
  class EventBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap teveb service method-protocol:	CreatePullPointSubscription SOAP
//gsoap teveb service method-style:	CreatePullPointSubscription document
//gsoap teveb service method-encoding:	CreatePullPointSubscription literal
//gsoap teveb service method-input-action:	CreatePullPointSubscription http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequest
//gsoap teveb service method-output-action:	CreatePullPointSubscription http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequestResponse
//gsoap teveb service method-fault:	CreatePullPointSubscription wsrf__ResourceUnknownFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__InvalidFilterFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__TopicExpressionDialectUnknownFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__InvalidTopicExpressionFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__TopicNotSupportedFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__InvalidProducerPropertiesExpressionFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__InvalidMessageContentExpressionFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__UnacceptableInitialTerminationTimeFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__UnrecognizedPolicyRequestFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__UnsupportedPolicyRequestFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__NotifyMessageNotSupportedFault
//gsoap teveb service method-fault:	CreatePullPointSubscription wsnt__SubscribeCreationFailedFault
int __teveb__CreatePullPointSubscription(
    _tev__CreatePullPointSubscription*  tev__CreatePullPointSubscription,	///< Input parameter
    _tev__CreatePullPointSubscriptionResponse&tev__CreatePullPointSubscriptionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __teveb__GetEventProperties                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__teveb__GetEventProperties" of service binding "EventBinding".
The WS-BaseNotification specification defines a set of OPTIONAL WS-ResouceProperties.
				This specification does not require the implementation
of the WS-ResourceProperty interface.
				Instead, the subsequent direct interface shall be
implemented by an ONVIF compliant device
				in order to provide information about the FilterDialects,
Schema files and topics supported by
				the device.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequest"

  - Addressing input action: "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequest"

  - Addressing output action: "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___teveb__GetEventProperties(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tev__GetEventProperties*           tev__GetEventProperties,
    // output parameters:
    _tev__GetEventPropertiesResponse   &tev__GetEventPropertiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __teveb__GetEventProperties(
    struct soap *soap,
    // input parameters:
    _tev__GetEventProperties*           tev__GetEventProperties,
    // output parameters:
    _tev__GetEventPropertiesResponse   &tev__GetEventPropertiesResponse
  );
@endcode

C++ proxy class (defined in soapEventBindingProxy.h generated with soapcpp2):
@code
  class EventBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEventBindingService.h generated with soapcpp2):
@code
  class EventBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap teveb service method-protocol:	GetEventProperties SOAP
//gsoap teveb service method-style:	GetEventProperties document
//gsoap teveb service method-encoding:	GetEventProperties literal
//gsoap teveb service method-input-action:	GetEventProperties http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequest
//gsoap teveb service method-output-action:	GetEventProperties http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequestResponse
int __teveb__GetEventProperties(
    _tev__GetEventProperties*           tev__GetEventProperties,	///< Input parameter
    _tev__GetEventPropertiesResponse   &tev__GetEventPropertiesResponse	///< Output parameter
);

/**

@page EventBinding Binding "EventBinding"

@section EventBinding_policy_enablers Policy Enablers of Binding "EventBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   NotificationConsumerBinding                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevncb__Notify                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevncb__Notify" of service binding "NotificationConsumerBinding".

  - One-way service request message

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/NotificationConsumer/Notify"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/NotificationConsumer/Notify"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tevncb__Notify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Notify*                      wsnt__Notify,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevncb__Notify(
    struct soap *soap,
    // input parameters:
    _wsnt__Notify*                      wsnt__Notify,
    // output parameters:
  );
@endcode

C++ proxy class (defined in soapNotificationConsumerBindingProxy.h generated with soapcpp2):
@code
  class NotificationConsumerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapNotificationConsumerBindingService.h generated with soapcpp2):
@code
  class NotificationConsumerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevncb service method-protocol:	Notify SOAP
//gsoap tevncb service method-style:	Notify document
//gsoap tevncb service method-encoding:	Notify literal
//gsoap tevncb service method-input-action:	Notify http://docs.oasis-open.org/wsn/bw-2/NotificationConsumer/Notify
int __tevncb__Notify(
    _wsnt__Notify*                      wsnt__Notify,	///< Input parameter
    void	///< One-way message: no output parameter
);

/**

@page NotificationConsumerBinding Binding "NotificationConsumerBinding"

@section NotificationConsumerBinding_policy_enablers Policy Enablers of Binding "NotificationConsumerBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   NotificationProducerBinding                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevnpb__Subscribe                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevnpb__Subscribe" of service binding "NotificationProducerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevnpb__Subscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Subscribe*                   wsnt__Subscribe,
    // output parameters:
    _wsnt__SubscribeResponse           &wsnt__SubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevnpb__Subscribe(
    struct soap *soap,
    // input parameters:
    _wsnt__Subscribe*                   wsnt__Subscribe,
    // output parameters:
    _wsnt__SubscribeResponse           &wsnt__SubscribeResponse
  );
@endcode

C++ proxy class (defined in soapNotificationProducerBindingProxy.h generated with soapcpp2):
@code
  class NotificationProducerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapNotificationProducerBindingService.h generated with soapcpp2):
@code
  class NotificationProducerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevnpb service method-protocol:	Subscribe SOAP
//gsoap tevnpb service method-style:	Subscribe document
//gsoap tevnpb service method-encoding:	Subscribe literal
//gsoap tevnpb service method-input-action:	Subscribe http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest
//gsoap tevnpb service method-output-action:	Subscribe http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequestResponse
//gsoap tevnpb service method-fault:	Subscribe wsrf__ResourceUnknownFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__InvalidFilterFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__TopicExpressionDialectUnknownFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__InvalidTopicExpressionFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__TopicNotSupportedFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__InvalidProducerPropertiesExpressionFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__InvalidMessageContentExpressionFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__UnacceptableInitialTerminationTimeFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__UnrecognizedPolicyRequestFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__UnsupportedPolicyRequestFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__NotifyMessageNotSupportedFault
//gsoap tevnpb service method-fault:	Subscribe wsnt__SubscribeCreationFailedFault
int __tevnpb__Subscribe(
    _wsnt__Subscribe*                   wsnt__Subscribe,	///< Input parameter
    _wsnt__SubscribeResponse           &wsnt__SubscribeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevnpb__GetCurrentMessage                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevnpb__GetCurrentMessage" of service binding "NotificationProducerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevnpb__GetCurrentMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__GetCurrentMessage*           wsnt__GetCurrentMessage,
    // output parameters:
    _wsnt__GetCurrentMessageResponse   &wsnt__GetCurrentMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevnpb__GetCurrentMessage(
    struct soap *soap,
    // input parameters:
    _wsnt__GetCurrentMessage*           wsnt__GetCurrentMessage,
    // output parameters:
    _wsnt__GetCurrentMessageResponse   &wsnt__GetCurrentMessageResponse
  );
@endcode

C++ proxy class (defined in soapNotificationProducerBindingProxy.h generated with soapcpp2):
@code
  class NotificationProducerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapNotificationProducerBindingService.h generated with soapcpp2):
@code
  class NotificationProducerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevnpb service method-protocol:	GetCurrentMessage SOAP
//gsoap tevnpb service method-style:	GetCurrentMessage document
//gsoap tevnpb service method-encoding:	GetCurrentMessage literal
//gsoap tevnpb service method-input-action:	GetCurrentMessage http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequest
//gsoap tevnpb service method-output-action:	GetCurrentMessage http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequestResponse
//gsoap tevnpb service method-fault:	GetCurrentMessage wsrf__ResourceUnknownFault
//gsoap tevnpb service method-fault:	GetCurrentMessage wsnt__TopicExpressionDialectUnknownFault
//gsoap tevnpb service method-fault:	GetCurrentMessage wsnt__InvalidTopicExpressionFault
//gsoap tevnpb service method-fault:	GetCurrentMessage wsnt__TopicNotSupportedFault
//gsoap tevnpb service method-fault:	GetCurrentMessage wsnt__NoCurrentMessageOnTopicFault
//gsoap tevnpb service method-fault:	GetCurrentMessage wsnt__MultipleTopicsSpecifiedFault
int __tevnpb__GetCurrentMessage(
    _wsnt__GetCurrentMessage*           wsnt__GetCurrentMessage,	///< Input parameter
    _wsnt__GetCurrentMessageResponse   &wsnt__GetCurrentMessageResponse	///< Output parameter
);

/**

@page NotificationProducerBinding Binding "NotificationProducerBinding"

@section NotificationProducerBinding_policy_enablers Policy Enablers of Binding "NotificationProducerBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PullPointBinding                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevppb__GetMessages                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevppb__GetMessages" of service binding "PullPointBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevppb__GetMessages(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__GetMessages*                 wsnt__GetMessages,
    // output parameters:
    _wsnt__GetMessagesResponse         &wsnt__GetMessagesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevppb__GetMessages(
    struct soap *soap,
    // input parameters:
    _wsnt__GetMessages*                 wsnt__GetMessages,
    // output parameters:
    _wsnt__GetMessagesResponse         &wsnt__GetMessagesResponse
  );
@endcode

C++ proxy class (defined in soapPullPointBindingProxy.h generated with soapcpp2):
@code
  class PullPointBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPullPointBindingService.h generated with soapcpp2):
@code
  class PullPointBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevppb service method-protocol:	GetMessages SOAP
//gsoap tevppb service method-style:	GetMessages document
//gsoap tevppb service method-encoding:	GetMessages literal
//gsoap tevppb service method-input-action:	GetMessages http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequest
//gsoap tevppb service method-output-action:	GetMessages http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequestResponse
//gsoap tevppb service method-fault:	GetMessages wsrf__ResourceUnknownFault
//gsoap tevppb service method-fault:	GetMessages wsnt__UnableToGetMessagesFault
int __tevppb__GetMessages(
    _wsnt__GetMessages*                 wsnt__GetMessages,	///< Input parameter
    _wsnt__GetMessagesResponse         &wsnt__GetMessagesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevppb__DestroyPullPoint                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevppb__DestroyPullPoint" of service binding "PullPointBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevppb__DestroyPullPoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__DestroyPullPoint*            wsnt__DestroyPullPoint,
    // output parameters:
    _wsnt__DestroyPullPointResponse    &wsnt__DestroyPullPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevppb__DestroyPullPoint(
    struct soap *soap,
    // input parameters:
    _wsnt__DestroyPullPoint*            wsnt__DestroyPullPoint,
    // output parameters:
    _wsnt__DestroyPullPointResponse    &wsnt__DestroyPullPointResponse
  );
@endcode

C++ proxy class (defined in soapPullPointBindingProxy.h generated with soapcpp2):
@code
  class PullPointBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPullPointBindingService.h generated with soapcpp2):
@code
  class PullPointBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevppb service method-protocol:	DestroyPullPoint SOAP
//gsoap tevppb service method-style:	DestroyPullPoint document
//gsoap tevppb service method-encoding:	DestroyPullPoint literal
//gsoap tevppb service method-input-action:	DestroyPullPoint http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequest
//gsoap tevppb service method-output-action:	DestroyPullPoint http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequestResponse
//gsoap tevppb service method-fault:	DestroyPullPoint wsrf__ResourceUnknownFault
//gsoap tevppb service method-fault:	DestroyPullPoint wsnt__UnableToDestroyPullPointFault
int __tevppb__DestroyPullPoint(
    _wsnt__DestroyPullPoint*            wsnt__DestroyPullPoint,	///< Input parameter
    _wsnt__DestroyPullPointResponse    &wsnt__DestroyPullPointResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevppb__Notify                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevppb__Notify" of service binding "PullPointBinding".

  - One-way service request message

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/PullPoint/Notify"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/PullPoint/Notify"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tevppb__Notify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Notify*                      wsnt__Notify,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevppb__Notify(
    struct soap *soap,
    // input parameters:
    _wsnt__Notify*                      wsnt__Notify,
    // output parameters:
  );
@endcode

C++ proxy class (defined in soapPullPointBindingProxy.h generated with soapcpp2):
@code
  class PullPointBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPullPointBindingService.h generated with soapcpp2):
@code
  class PullPointBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevppb service method-protocol:	Notify SOAP
//gsoap tevppb service method-style:	Notify document
//gsoap tevppb service method-encoding:	Notify literal
//gsoap tevppb service method-input-action:	Notify http://docs.oasis-open.org/wsn/bw-2/PullPoint/Notify
int __tevppb__Notify(
    _wsnt__Notify*                      wsnt__Notify,	///< Input parameter
    void	///< One-way message: no output parameter
);

/**

@page PullPointBinding Binding "PullPointBinding"

@section PullPointBinding_policy_enablers Policy Enablers of Binding "PullPointBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PullPointSubscriptionBinding                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpps__PullMessages                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpps__PullMessages" of service binding "PullPointSubscriptionBinding".

				This method pulls one or more messages from a PullPoint.
				The device shall provide the following PullMessages
command for all SubscriptionManager
				endpoints returned by the CreatePullPointSubscription
command. This method shall not wait until
				the requested number of messages is available but
return as soon as at least one message is available.<br/>
				The command shall at least support a Timeout of
one minute. In case a device supports retrieval of less messages 
				than requested it shall return these without generating
a fault.

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequest"

  - Addressing input action: "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequest"

  - Addressing output action: "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequestResponse"

  - Output Fault: "http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpps__PullMessages(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tev__PullMessages*                 tev__PullMessages,
    // output parameters:
    _tev__PullMessagesResponse         &tev__PullMessagesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpps__PullMessages(
    struct soap *soap,
    // input parameters:
    _tev__PullMessages*                 tev__PullMessages,
    // output parameters:
    _tev__PullMessagesResponse         &tev__PullMessagesResponse
  );
@endcode

C++ proxy class (defined in soapPullPointSubscriptionBindingProxy.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPullPointSubscriptionBindingService.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpps service method-protocol:	PullMessages SOAP
//gsoap tevpps service method-style:	PullMessages document
//gsoap tevpps service method-encoding:	PullMessages literal
//gsoap tevpps service method-input-action:	PullMessages http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequest
//gsoap tevpps service method-output-action:	PullMessages http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequestResponse
//gsoap tevpps service method-fault:	PullMessages tev__PullMessagesFaultResponse
int __tevpps__PullMessages(
    _tev__PullMessages*                 tev__PullMessages,	///< Input parameter
    _tev__PullMessagesResponse         &tev__PullMessagesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpps__Seek                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpps__Seek" of service binding "PullPointSubscriptionBinding".

				This method readjusts the pull pointer into the
past.
				A device supporting persistent notification storage
shall provide the
				following Seek command for all SubscriptionManager
endpoints returned by
				the CreatePullPointSubscription command. The optional
Reverse argument can
				be used to reverse the pull direction of the PullMessages
command.<br/>
				The UtcTime argument will be matched against the
UtcTime attribute on a
				NotificationMessage.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SeekRequest"

  - Addressing input action: "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SeekRequest"

  - Addressing output action: "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SeekRequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpps__Seek(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tev__Seek*                         tev__Seek,
    // output parameters:
    _tev__SeekResponse                 &tev__SeekResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpps__Seek(
    struct soap *soap,
    // input parameters:
    _tev__Seek*                         tev__Seek,
    // output parameters:
    _tev__SeekResponse                 &tev__SeekResponse
  );
@endcode

C++ proxy class (defined in soapPullPointSubscriptionBindingProxy.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPullPointSubscriptionBindingService.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpps service method-protocol:	Seek SOAP
//gsoap tevpps service method-style:	Seek document
//gsoap tevpps service method-encoding:	Seek literal
//gsoap tevpps service method-input-action:	Seek http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SeekRequest
//gsoap tevpps service method-output-action:	Seek http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SeekRequestResponse
int __tevpps__Seek(
    _tev__Seek*                         tev__Seek,	///< Input parameter
    _tev__SeekResponse                 &tev__SeekResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpps__SetSynchronizationPoint                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpps__SetSynchronizationPoint" of service binding "PullPointSubscriptionBinding".
Properties inform a client about property creation, changes and
				deletion in a uniform way. When a client wants to
synchronize its properties with the
				properties of the device, it can request a synchronization
point which repeats the current
				status of all properties to which a client has subscribed.
The PropertyOperation of all
				produced notifications is set to Initialized.
The Synchronization Point is
				requested directly from the SubscriptionManager
which was returned in either the
				SubscriptionResponse or in the CreatePullPointSubscriptionResponse.
The property update is
				transmitted via the notification transportation
of the notification interface. This method is mandatory.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequest"

  - Addressing input action: "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequest"

  - Addressing output action: "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpps__SetSynchronizationPoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tev__SetSynchronizationPoint*      tev__SetSynchronizationPoint,
    // output parameters:
    _tev__SetSynchronizationPointResponse&tev__SetSynchronizationPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpps__SetSynchronizationPoint(
    struct soap *soap,
    // input parameters:
    _tev__SetSynchronizationPoint*      tev__SetSynchronizationPoint,
    // output parameters:
    _tev__SetSynchronizationPointResponse&tev__SetSynchronizationPointResponse
  );
@endcode

C++ proxy class (defined in soapPullPointSubscriptionBindingProxy.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPullPointSubscriptionBindingService.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpps service method-protocol:	SetSynchronizationPoint SOAP
//gsoap tevpps service method-style:	SetSynchronizationPoint document
//gsoap tevpps service method-encoding:	SetSynchronizationPoint literal
//gsoap tevpps service method-input-action:	SetSynchronizationPoint http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequest
//gsoap tevpps service method-output-action:	SetSynchronizationPoint http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequestResponse
int __tevpps__SetSynchronizationPoint(
    _tev__SetSynchronizationPoint*      tev__SetSynchronizationPoint,	///< Input parameter
    _tev__SetSynchronizationPointResponse&tev__SetSynchronizationPointResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpps__Unsubscribe                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpps__Unsubscribe" of service binding "PullPointSubscriptionBinding".
The device shall provide the following Unsubscribe command for all SubscriptionManager
endpoints returned by the CreatePullPointSubscription command.<br/>
				This command shall terminate the lifetime of a pull
point.
			

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpps__Unsubscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,
    // output parameters:
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpps__Unsubscribe(
    struct soap *soap,
    // input parameters:
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,
    // output parameters:
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse
  );
@endcode

C++ proxy class (defined in soapPullPointSubscriptionBindingProxy.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPullPointSubscriptionBindingService.h generated with soapcpp2):
@code
  class PullPointSubscriptionBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpps service method-protocol:	Unsubscribe SOAP
//gsoap tevpps service method-style:	Unsubscribe document
//gsoap tevpps service method-encoding:	Unsubscribe literal
//gsoap tevpps service method-input-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest
//gsoap tevpps service method-output-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequestResponse
//gsoap tevpps service method-fault:	Unsubscribe wsrf__ResourceUnknownFault
//gsoap tevpps service method-fault:	Unsubscribe wsnt__UnableToDestroySubscriptionFault
int __tevpps__Unsubscribe(
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,	///< Input parameter
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse	///< Output parameter
);

/**

@page PullPointSubscriptionBinding Binding "PullPointSubscriptionBinding"

@section PullPointSubscriptionBinding_policy_enablers Policy Enablers of Binding "PullPointSubscriptionBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PausableSubscriptionManagerBinding                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpsmb__Renew                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpsmb__Renew" of service binding "PausableSubscriptionManagerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpsmb__Renew(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Renew*                       wsnt__Renew,
    // output parameters:
    _wsnt__RenewResponse               &wsnt__RenewResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpsmb__Renew(
    struct soap *soap,
    // input parameters:
    _wsnt__Renew*                       wsnt__Renew,
    // output parameters:
    _wsnt__RenewResponse               &wsnt__RenewResponse
  );
@endcode

C++ proxy class (defined in soapPausableSubscriptionManagerBindingProxy.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPausableSubscriptionManagerBindingService.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpsmb service method-protocol:	Renew SOAP
//gsoap tevpsmb service method-style:	Renew document
//gsoap tevpsmb service method-encoding:	Renew literal
//gsoap tevpsmb service method-input-action:	Renew http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest
//gsoap tevpsmb service method-output-action:	Renew http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequestResponse
//gsoap tevpsmb service method-fault:	Renew wsrf__ResourceUnknownFault
//gsoap tevpsmb service method-fault:	Renew wsnt__UnacceptableTerminationTimeFault
int __tevpsmb__Renew(
    _wsnt__Renew*                       wsnt__Renew,	///< Input parameter
    _wsnt__RenewResponse               &wsnt__RenewResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpsmb__Unsubscribe                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpsmb__Unsubscribe" of service binding "PausableSubscriptionManagerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpsmb__Unsubscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,
    // output parameters:
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpsmb__Unsubscribe(
    struct soap *soap,
    // input parameters:
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,
    // output parameters:
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse
  );
@endcode

C++ proxy class (defined in soapPausableSubscriptionManagerBindingProxy.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPausableSubscriptionManagerBindingService.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpsmb service method-protocol:	Unsubscribe SOAP
//gsoap tevpsmb service method-style:	Unsubscribe document
//gsoap tevpsmb service method-encoding:	Unsubscribe literal
//gsoap tevpsmb service method-input-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest
//gsoap tevpsmb service method-output-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequestResponse
//gsoap tevpsmb service method-fault:	Unsubscribe wsrf__ResourceUnknownFault
//gsoap tevpsmb service method-fault:	Unsubscribe wsnt__UnableToDestroySubscriptionFault
int __tevpsmb__Unsubscribe(
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,	///< Input parameter
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpsmb__PauseSubscription                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpsmb__PauseSubscription" of service binding "PausableSubscriptionManagerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":PauseFailedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpsmb__PauseSubscription(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__PauseSubscription*           wsnt__PauseSubscription,
    // output parameters:
    _wsnt__PauseSubscriptionResponse   &wsnt__PauseSubscriptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpsmb__PauseSubscription(
    struct soap *soap,
    // input parameters:
    _wsnt__PauseSubscription*           wsnt__PauseSubscription,
    // output parameters:
    _wsnt__PauseSubscriptionResponse   &wsnt__PauseSubscriptionResponse
  );
@endcode

C++ proxy class (defined in soapPausableSubscriptionManagerBindingProxy.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPausableSubscriptionManagerBindingService.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpsmb service method-protocol:	PauseSubscription SOAP
//gsoap tevpsmb service method-style:	PauseSubscription document
//gsoap tevpsmb service method-encoding:	PauseSubscription literal
//gsoap tevpsmb service method-input-action:	PauseSubscription http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest
//gsoap tevpsmb service method-output-action:	PauseSubscription http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequestResponse
//gsoap tevpsmb service method-fault:	PauseSubscription wsrf__ResourceUnknownFault
//gsoap tevpsmb service method-fault:	PauseSubscription wsnt__PauseFailedFault
int __tevpsmb__PauseSubscription(
    _wsnt__PauseSubscription*           wsnt__PauseSubscription,	///< Input parameter
    _wsnt__PauseSubscriptionResponse   &wsnt__PauseSubscriptionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevpsmb__ResumeSubscription                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevpsmb__ResumeSubscription" of service binding "PausableSubscriptionManagerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevpsmb__ResumeSubscription(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__ResumeSubscription*          wsnt__ResumeSubscription,
    // output parameters:
    _wsnt__ResumeSubscriptionResponse  &wsnt__ResumeSubscriptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevpsmb__ResumeSubscription(
    struct soap *soap,
    // input parameters:
    _wsnt__ResumeSubscription*          wsnt__ResumeSubscription,
    // output parameters:
    _wsnt__ResumeSubscriptionResponse  &wsnt__ResumeSubscriptionResponse
  );
@endcode

C++ proxy class (defined in soapPausableSubscriptionManagerBindingProxy.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPausableSubscriptionManagerBindingService.h generated with soapcpp2):
@code
  class PausableSubscriptionManagerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevpsmb service method-protocol:	ResumeSubscription SOAP
//gsoap tevpsmb service method-style:	ResumeSubscription document
//gsoap tevpsmb service method-encoding:	ResumeSubscription literal
//gsoap tevpsmb service method-input-action:	ResumeSubscription http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest
//gsoap tevpsmb service method-output-action:	ResumeSubscription http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequestResponse
//gsoap tevpsmb service method-fault:	ResumeSubscription wsrf__ResourceUnknownFault
//gsoap tevpsmb service method-fault:	ResumeSubscription wsnt__ResumeFailedFault
int __tevpsmb__ResumeSubscription(
    _wsnt__ResumeSubscription*          wsnt__ResumeSubscription,	///< Input parameter
    _wsnt__ResumeSubscriptionResponse  &wsnt__ResumeSubscriptionResponse	///< Output parameter
);

/**

@page PausableSubscriptionManagerBinding Binding "PausableSubscriptionManagerBinding"

@section PausableSubscriptionManagerBinding_policy_enablers Policy Enablers of Binding "PausableSubscriptionManagerBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SubscriptionManagerBinding                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevsmb__Renew                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevsmb__Renew" of service binding "SubscriptionManagerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevsmb__Renew(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Renew*                       wsnt__Renew,
    // output parameters:
    _wsnt__RenewResponse               &wsnt__RenewResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevsmb__Renew(
    struct soap *soap,
    // input parameters:
    _wsnt__Renew*                       wsnt__Renew,
    // output parameters:
    _wsnt__RenewResponse               &wsnt__RenewResponse
  );
@endcode

C++ proxy class (defined in soapSubscriptionManagerBindingProxy.h generated with soapcpp2):
@code
  class SubscriptionManagerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSubscriptionManagerBindingService.h generated with soapcpp2):
@code
  class SubscriptionManagerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevsmb service method-protocol:	Renew SOAP
//gsoap tevsmb service method-style:	Renew document
//gsoap tevsmb service method-encoding:	Renew literal
//gsoap tevsmb service method-input-action:	Renew http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequest
//gsoap tevsmb service method-output-action:	Renew http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequestResponse
//gsoap tevsmb service method-fault:	Renew wsrf__ResourceUnknownFault
//gsoap tevsmb service method-fault:	Renew wsnt__UnacceptableTerminationTimeFault
int __tevsmb__Renew(
    _wsnt__Renew*                       wsnt__Renew,	///< Input parameter
    _wsnt__RenewResponse               &wsnt__RenewResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tevsmb__Unsubscribe                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tevsmb__Unsubscribe" of service binding "SubscriptionManagerBinding".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest"

  - Addressing input action: "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest"

  - Addressing output action: "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequestResponse"

  - Output Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - Output Fault: "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tevsmb__Unsubscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,
    // output parameters:
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tevsmb__Unsubscribe(
    struct soap *soap,
    // input parameters:
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,
    // output parameters:
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse
  );
@endcode

C++ proxy class (defined in soapSubscriptionManagerBindingProxy.h generated with soapcpp2):
@code
  class SubscriptionManagerBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSubscriptionManagerBindingService.h generated with soapcpp2):
@code
  class SubscriptionManagerBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tevsmb service method-protocol:	Unsubscribe SOAP
//gsoap tevsmb service method-style:	Unsubscribe document
//gsoap tevsmb service method-encoding:	Unsubscribe literal
//gsoap tevsmb service method-input-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest
//gsoap tevsmb service method-output-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequestResponse
//gsoap tevsmb service method-fault:	Unsubscribe wsrf__ResourceUnknownFault
//gsoap tevsmb service method-fault:	Unsubscribe wsnt__UnableToDestroySubscriptionFault
int __tevsmb__Unsubscribe(
    _wsnt__Unsubscribe*                 wsnt__Unsubscribe,	///< Input parameter
    _wsnt__UnsubscribeResponse         &wsnt__UnsubscribeResponse	///< Output parameter
);

/**

@page SubscriptionManagerBinding Binding "SubscriptionManagerBinding"

@section SubscriptionManagerBinding_policy_enablers Policy Enablers of Binding "SubscriptionManagerBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDL and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section tds Top-level root elements of schema "http://www.onvif.org/ver10/device/wsdl"

  - <tds:GetServices> @ref _tds__GetServices
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServices(struct soap*, _tds__GetServices*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServices(struct soap*, _tds__GetServices*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetServices(struct soap*, const char *URL, _tds__GetServices*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetServices(struct soap*, const char *URL, _tds__GetServices*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetServices(struct soap*, const char *URL, _tds__GetServices*);
    soap_POST_recv__tds__GetServices(struct soap*, _tds__GetServices*);
    @endcode

  - <tds:GetServicesResponse> @ref _tds__GetServicesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServicesResponse(struct soap*, _tds__GetServicesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServicesResponse(struct soap*, _tds__GetServicesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetServicesResponse(struct soap*, const char *URL, _tds__GetServicesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetServicesResponse(struct soap*, const char *URL, _tds__GetServicesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetServicesResponse(struct soap*, const char *URL, _tds__GetServicesResponse*);
    soap_POST_recv__tds__GetServicesResponse(struct soap*, _tds__GetServicesResponse*);
    @endcode

  - <tds:GetServiceCapabilities> @ref _tds__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetServiceCapabilities(struct soap*, const char *URL, _tds__GetServiceCapabilities*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetServiceCapabilities(struct soap*, const char *URL, _tds__GetServiceCapabilities*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetServiceCapabilities(struct soap*, const char *URL, _tds__GetServiceCapabilities*);
    soap_POST_recv__tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities*);
    @endcode

  - <tds:GetServiceCapabilitiesResponse> @ref _tds__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServiceCapabilitiesResponse(struct soap*, _tds__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServiceCapabilitiesResponse(struct soap*, _tds__GetServiceCapabilitiesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetServiceCapabilitiesResponse(struct soap*, const char *URL, _tds__GetServiceCapabilitiesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetServiceCapabilitiesResponse(struct soap*, const char *URL, _tds__GetServiceCapabilitiesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetServiceCapabilitiesResponse(struct soap*, const char *URL, _tds__GetServiceCapabilitiesResponse*);
    soap_POST_recv__tds__GetServiceCapabilitiesResponse(struct soap*, _tds__GetServiceCapabilitiesResponse*);
    @endcode

  - <tds:Capabilities> @ref _tds__Capabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__Capabilities(struct soap*, _tds__Capabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__Capabilities(struct soap*, _tds__Capabilities*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__Capabilities(struct soap*, const char *URL, _tds__Capabilities*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__Capabilities(struct soap*, const char *URL, _tds__Capabilities*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__Capabilities(struct soap*, const char *URL, _tds__Capabilities*);
    soap_POST_recv__tds__Capabilities(struct soap*, _tds__Capabilities*);
    @endcode

  - <tds:GetDeviceInformation> @ref _tds__GetDeviceInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDeviceInformation(struct soap*, const char *URL, _tds__GetDeviceInformation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDeviceInformation(struct soap*, const char *URL, _tds__GetDeviceInformation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDeviceInformation(struct soap*, const char *URL, _tds__GetDeviceInformation*);
    soap_POST_recv__tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation*);
    @endcode

  - <tds:GetDeviceInformationResponse> @ref _tds__GetDeviceInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDeviceInformationResponse(struct soap*, _tds__GetDeviceInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDeviceInformationResponse(struct soap*, _tds__GetDeviceInformationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDeviceInformationResponse(struct soap*, const char *URL, _tds__GetDeviceInformationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDeviceInformationResponse(struct soap*, const char *URL, _tds__GetDeviceInformationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDeviceInformationResponse(struct soap*, const char *URL, _tds__GetDeviceInformationResponse*);
    soap_POST_recv__tds__GetDeviceInformationResponse(struct soap*, _tds__GetDeviceInformationResponse*);
    @endcode

  - <tds:SetSystemDateAndTime> @ref _tds__SetSystemDateAndTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetSystemDateAndTime(struct soap*, const char *URL, _tds__SetSystemDateAndTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetSystemDateAndTime(struct soap*, const char *URL, _tds__SetSystemDateAndTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetSystemDateAndTime(struct soap*, const char *URL, _tds__SetSystemDateAndTime*);
    soap_POST_recv__tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime*);
    @endcode

  - <tds:SetSystemDateAndTimeResponse> @ref _tds__SetSystemDateAndTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemDateAndTimeResponse(struct soap*, _tds__SetSystemDateAndTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemDateAndTimeResponse(struct soap*, _tds__SetSystemDateAndTimeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetSystemDateAndTimeResponse(struct soap*, const char *URL, _tds__SetSystemDateAndTimeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetSystemDateAndTimeResponse(struct soap*, const char *URL, _tds__SetSystemDateAndTimeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetSystemDateAndTimeResponse(struct soap*, const char *URL, _tds__SetSystemDateAndTimeResponse*);
    soap_POST_recv__tds__SetSystemDateAndTimeResponse(struct soap*, _tds__SetSystemDateAndTimeResponse*);
    @endcode

  - <tds:GetSystemDateAndTime> @ref _tds__GetSystemDateAndTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemDateAndTime(struct soap*, const char *URL, _tds__GetSystemDateAndTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemDateAndTime(struct soap*, const char *URL, _tds__GetSystemDateAndTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemDateAndTime(struct soap*, const char *URL, _tds__GetSystemDateAndTime*);
    soap_POST_recv__tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime*);
    @endcode

  - <tds:GetSystemDateAndTimeResponse> @ref _tds__GetSystemDateAndTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemDateAndTimeResponse(struct soap*, _tds__GetSystemDateAndTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemDateAndTimeResponse(struct soap*, _tds__GetSystemDateAndTimeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemDateAndTimeResponse(struct soap*, const char *URL, _tds__GetSystemDateAndTimeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemDateAndTimeResponse(struct soap*, const char *URL, _tds__GetSystemDateAndTimeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemDateAndTimeResponse(struct soap*, const char *URL, _tds__GetSystemDateAndTimeResponse*);
    soap_POST_recv__tds__GetSystemDateAndTimeResponse(struct soap*, _tds__GetSystemDateAndTimeResponse*);
    @endcode

  - <tds:SetSystemFactoryDefault> @ref _tds__SetSystemFactoryDefault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetSystemFactoryDefault(struct soap*, const char *URL, _tds__SetSystemFactoryDefault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetSystemFactoryDefault(struct soap*, const char *URL, _tds__SetSystemFactoryDefault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetSystemFactoryDefault(struct soap*, const char *URL, _tds__SetSystemFactoryDefault*);
    soap_POST_recv__tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault*);
    @endcode

  - <tds:SetSystemFactoryDefaultResponse> @ref _tds__SetSystemFactoryDefaultResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemFactoryDefaultResponse(struct soap*, _tds__SetSystemFactoryDefaultResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemFactoryDefaultResponse(struct soap*, _tds__SetSystemFactoryDefaultResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetSystemFactoryDefaultResponse(struct soap*, const char *URL, _tds__SetSystemFactoryDefaultResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetSystemFactoryDefaultResponse(struct soap*, const char *URL, _tds__SetSystemFactoryDefaultResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetSystemFactoryDefaultResponse(struct soap*, const char *URL, _tds__SetSystemFactoryDefaultResponse*);
    soap_POST_recv__tds__SetSystemFactoryDefaultResponse(struct soap*, _tds__SetSystemFactoryDefaultResponse*);
    @endcode

  - <tds:UpgradeSystemFirmware> @ref _tds__UpgradeSystemFirmware
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__UpgradeSystemFirmware(struct soap*, const char *URL, _tds__UpgradeSystemFirmware*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__UpgradeSystemFirmware(struct soap*, const char *URL, _tds__UpgradeSystemFirmware*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__UpgradeSystemFirmware(struct soap*, const char *URL, _tds__UpgradeSystemFirmware*);
    soap_POST_recv__tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware*);
    @endcode

  - <tds:UpgradeSystemFirmwareResponse> @ref _tds__UpgradeSystemFirmwareResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__UpgradeSystemFirmwareResponse(struct soap*, _tds__UpgradeSystemFirmwareResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__UpgradeSystemFirmwareResponse(struct soap*, _tds__UpgradeSystemFirmwareResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__UpgradeSystemFirmwareResponse(struct soap*, const char *URL, _tds__UpgradeSystemFirmwareResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__UpgradeSystemFirmwareResponse(struct soap*, const char *URL, _tds__UpgradeSystemFirmwareResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__UpgradeSystemFirmwareResponse(struct soap*, const char *URL, _tds__UpgradeSystemFirmwareResponse*);
    soap_POST_recv__tds__UpgradeSystemFirmwareResponse(struct soap*, _tds__UpgradeSystemFirmwareResponse*);
    @endcode

  - <tds:SystemReboot> @ref _tds__SystemReboot
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SystemReboot(struct soap*, _tds__SystemReboot*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SystemReboot(struct soap*, _tds__SystemReboot*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SystemReboot(struct soap*, const char *URL, _tds__SystemReboot*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SystemReboot(struct soap*, const char *URL, _tds__SystemReboot*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SystemReboot(struct soap*, const char *URL, _tds__SystemReboot*);
    soap_POST_recv__tds__SystemReboot(struct soap*, _tds__SystemReboot*);
    @endcode

  - <tds:SystemRebootResponse> @ref _tds__SystemRebootResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SystemRebootResponse(struct soap*, _tds__SystemRebootResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SystemRebootResponse(struct soap*, _tds__SystemRebootResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SystemRebootResponse(struct soap*, const char *URL, _tds__SystemRebootResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SystemRebootResponse(struct soap*, const char *URL, _tds__SystemRebootResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SystemRebootResponse(struct soap*, const char *URL, _tds__SystemRebootResponse*);
    soap_POST_recv__tds__SystemRebootResponse(struct soap*, _tds__SystemRebootResponse*);
    @endcode

  - <tds:RestoreSystem> @ref _tds__RestoreSystem
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RestoreSystem(struct soap*, _tds__RestoreSystem*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RestoreSystem(struct soap*, _tds__RestoreSystem*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__RestoreSystem(struct soap*, const char *URL, _tds__RestoreSystem*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__RestoreSystem(struct soap*, const char *URL, _tds__RestoreSystem*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__RestoreSystem(struct soap*, const char *URL, _tds__RestoreSystem*);
    soap_POST_recv__tds__RestoreSystem(struct soap*, _tds__RestoreSystem*);
    @endcode

  - <tds:RestoreSystemResponse> @ref _tds__RestoreSystemResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RestoreSystemResponse(struct soap*, _tds__RestoreSystemResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RestoreSystemResponse(struct soap*, _tds__RestoreSystemResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__RestoreSystemResponse(struct soap*, const char *URL, _tds__RestoreSystemResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__RestoreSystemResponse(struct soap*, const char *URL, _tds__RestoreSystemResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__RestoreSystemResponse(struct soap*, const char *URL, _tds__RestoreSystemResponse*);
    soap_POST_recv__tds__RestoreSystemResponse(struct soap*, _tds__RestoreSystemResponse*);
    @endcode

  - <tds:GetSystemBackup> @ref _tds__GetSystemBackup
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemBackup(struct soap*, const char *URL, _tds__GetSystemBackup*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemBackup(struct soap*, const char *URL, _tds__GetSystemBackup*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemBackup(struct soap*, const char *URL, _tds__GetSystemBackup*);
    soap_POST_recv__tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup*);
    @endcode

  - <tds:GetSystemBackupResponse> @ref _tds__GetSystemBackupResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemBackupResponse(struct soap*, _tds__GetSystemBackupResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemBackupResponse(struct soap*, _tds__GetSystemBackupResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemBackupResponse(struct soap*, const char *URL, _tds__GetSystemBackupResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemBackupResponse(struct soap*, const char *URL, _tds__GetSystemBackupResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemBackupResponse(struct soap*, const char *URL, _tds__GetSystemBackupResponse*);
    soap_POST_recv__tds__GetSystemBackupResponse(struct soap*, _tds__GetSystemBackupResponse*);
    @endcode

  - <tds:GetSystemSupportInformation> @ref _tds__GetSystemSupportInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemSupportInformation(struct soap*, const char *URL, _tds__GetSystemSupportInformation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemSupportInformation(struct soap*, const char *URL, _tds__GetSystemSupportInformation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemSupportInformation(struct soap*, const char *URL, _tds__GetSystemSupportInformation*);
    soap_POST_recv__tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation*);
    @endcode

  - <tds:GetSystemSupportInformationResponse> @ref _tds__GetSystemSupportInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemSupportInformationResponse(struct soap*, _tds__GetSystemSupportInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemSupportInformationResponse(struct soap*, _tds__GetSystemSupportInformationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemSupportInformationResponse(struct soap*, const char *URL, _tds__GetSystemSupportInformationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemSupportInformationResponse(struct soap*, const char *URL, _tds__GetSystemSupportInformationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemSupportInformationResponse(struct soap*, const char *URL, _tds__GetSystemSupportInformationResponse*);
    soap_POST_recv__tds__GetSystemSupportInformationResponse(struct soap*, _tds__GetSystemSupportInformationResponse*);
    @endcode

  - <tds:GetSystemLog> @ref _tds__GetSystemLog
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemLog(struct soap*, _tds__GetSystemLog*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemLog(struct soap*, _tds__GetSystemLog*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemLog(struct soap*, const char *URL, _tds__GetSystemLog*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemLog(struct soap*, const char *URL, _tds__GetSystemLog*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemLog(struct soap*, const char *URL, _tds__GetSystemLog*);
    soap_POST_recv__tds__GetSystemLog(struct soap*, _tds__GetSystemLog*);
    @endcode

  - <tds:GetSystemLogResponse> @ref _tds__GetSystemLogResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemLogResponse(struct soap*, _tds__GetSystemLogResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemLogResponse(struct soap*, _tds__GetSystemLogResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemLogResponse(struct soap*, const char *URL, _tds__GetSystemLogResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemLogResponse(struct soap*, const char *URL, _tds__GetSystemLogResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemLogResponse(struct soap*, const char *URL, _tds__GetSystemLogResponse*);
    soap_POST_recv__tds__GetSystemLogResponse(struct soap*, _tds__GetSystemLogResponse*);
    @endcode

  - <tds:GetScopes> @ref _tds__GetScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetScopes(struct soap*, _tds__GetScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetScopes(struct soap*, _tds__GetScopes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetScopes(struct soap*, const char *URL, _tds__GetScopes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetScopes(struct soap*, const char *URL, _tds__GetScopes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetScopes(struct soap*, const char *URL, _tds__GetScopes*);
    soap_POST_recv__tds__GetScopes(struct soap*, _tds__GetScopes*);
    @endcode

  - <tds:GetScopesResponse> @ref _tds__GetScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetScopesResponse(struct soap*, _tds__GetScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetScopesResponse(struct soap*, _tds__GetScopesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetScopesResponse(struct soap*, const char *URL, _tds__GetScopesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetScopesResponse(struct soap*, const char *URL, _tds__GetScopesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetScopesResponse(struct soap*, const char *URL, _tds__GetScopesResponse*);
    soap_POST_recv__tds__GetScopesResponse(struct soap*, _tds__GetScopesResponse*);
    @endcode

  - <tds:SetScopes> @ref _tds__SetScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetScopes(struct soap*, _tds__SetScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetScopes(struct soap*, _tds__SetScopes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetScopes(struct soap*, const char *URL, _tds__SetScopes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetScopes(struct soap*, const char *URL, _tds__SetScopes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetScopes(struct soap*, const char *URL, _tds__SetScopes*);
    soap_POST_recv__tds__SetScopes(struct soap*, _tds__SetScopes*);
    @endcode

  - <tds:SetScopesResponse> @ref _tds__SetScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetScopesResponse(struct soap*, _tds__SetScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetScopesResponse(struct soap*, _tds__SetScopesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetScopesResponse(struct soap*, const char *URL, _tds__SetScopesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetScopesResponse(struct soap*, const char *URL, _tds__SetScopesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetScopesResponse(struct soap*, const char *URL, _tds__SetScopesResponse*);
    soap_POST_recv__tds__SetScopesResponse(struct soap*, _tds__SetScopesResponse*);
    @endcode

  - <tds:AddScopes> @ref _tds__AddScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddScopes(struct soap*, _tds__AddScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddScopes(struct soap*, _tds__AddScopes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__AddScopes(struct soap*, const char *URL, _tds__AddScopes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__AddScopes(struct soap*, const char *URL, _tds__AddScopes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__AddScopes(struct soap*, const char *URL, _tds__AddScopes*);
    soap_POST_recv__tds__AddScopes(struct soap*, _tds__AddScopes*);
    @endcode

  - <tds:AddScopesResponse> @ref _tds__AddScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddScopesResponse(struct soap*, _tds__AddScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddScopesResponse(struct soap*, _tds__AddScopesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__AddScopesResponse(struct soap*, const char *URL, _tds__AddScopesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__AddScopesResponse(struct soap*, const char *URL, _tds__AddScopesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__AddScopesResponse(struct soap*, const char *URL, _tds__AddScopesResponse*);
    soap_POST_recv__tds__AddScopesResponse(struct soap*, _tds__AddScopesResponse*);
    @endcode

  - <tds:RemoveScopes> @ref _tds__RemoveScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveScopes(struct soap*, _tds__RemoveScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveScopes(struct soap*, _tds__RemoveScopes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__RemoveScopes(struct soap*, const char *URL, _tds__RemoveScopes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__RemoveScopes(struct soap*, const char *URL, _tds__RemoveScopes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__RemoveScopes(struct soap*, const char *URL, _tds__RemoveScopes*);
    soap_POST_recv__tds__RemoveScopes(struct soap*, _tds__RemoveScopes*);
    @endcode

  - <tds:RemoveScopesResponse> @ref _tds__RemoveScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveScopesResponse(struct soap*, _tds__RemoveScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveScopesResponse(struct soap*, _tds__RemoveScopesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__RemoveScopesResponse(struct soap*, const char *URL, _tds__RemoveScopesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__RemoveScopesResponse(struct soap*, const char *URL, _tds__RemoveScopesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__RemoveScopesResponse(struct soap*, const char *URL, _tds__RemoveScopesResponse*);
    soap_POST_recv__tds__RemoveScopesResponse(struct soap*, _tds__RemoveScopesResponse*);
    @endcode

  - <tds:GetDiscoveryMode> @ref _tds__GetDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDiscoveryMode(struct soap*, const char *URL, _tds__GetDiscoveryMode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDiscoveryMode(struct soap*, const char *URL, _tds__GetDiscoveryMode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDiscoveryMode(struct soap*, const char *URL, _tds__GetDiscoveryMode*);
    soap_POST_recv__tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode*);
    @endcode

  - <tds:GetDiscoveryModeResponse> @ref _tds__GetDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDiscoveryModeResponse(struct soap*, _tds__GetDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDiscoveryModeResponse(struct soap*, _tds__GetDiscoveryModeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDiscoveryModeResponse(struct soap*, const char *URL, _tds__GetDiscoveryModeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDiscoveryModeResponse(struct soap*, const char *URL, _tds__GetDiscoveryModeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDiscoveryModeResponse(struct soap*, const char *URL, _tds__GetDiscoveryModeResponse*);
    soap_POST_recv__tds__GetDiscoveryModeResponse(struct soap*, _tds__GetDiscoveryModeResponse*);
    @endcode

  - <tds:SetDiscoveryMode> @ref _tds__SetDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDiscoveryMode(struct soap*, const char *URL, _tds__SetDiscoveryMode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDiscoveryMode(struct soap*, const char *URL, _tds__SetDiscoveryMode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDiscoveryMode(struct soap*, const char *URL, _tds__SetDiscoveryMode*);
    soap_POST_recv__tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode*);
    @endcode

  - <tds:SetDiscoveryModeResponse> @ref _tds__SetDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDiscoveryModeResponse(struct soap*, _tds__SetDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDiscoveryModeResponse(struct soap*, _tds__SetDiscoveryModeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDiscoveryModeResponse(struct soap*, const char *URL, _tds__SetDiscoveryModeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDiscoveryModeResponse(struct soap*, const char *URL, _tds__SetDiscoveryModeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDiscoveryModeResponse(struct soap*, const char *URL, _tds__SetDiscoveryModeResponse*);
    soap_POST_recv__tds__SetDiscoveryModeResponse(struct soap*, _tds__SetDiscoveryModeResponse*);
    @endcode

  - <tds:GetRemoteDiscoveryMode> @ref _tds__GetRemoteDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetRemoteDiscoveryMode(struct soap*, const char *URL, _tds__GetRemoteDiscoveryMode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetRemoteDiscoveryMode(struct soap*, const char *URL, _tds__GetRemoteDiscoveryMode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetRemoteDiscoveryMode(struct soap*, const char *URL, _tds__GetRemoteDiscoveryMode*);
    soap_POST_recv__tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode*);
    @endcode

  - <tds:GetRemoteDiscoveryModeResponse> @ref _tds__GetRemoteDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteDiscoveryModeResponse(struct soap*, _tds__GetRemoteDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteDiscoveryModeResponse(struct soap*, _tds__GetRemoteDiscoveryModeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetRemoteDiscoveryModeResponse(struct soap*, const char *URL, _tds__GetRemoteDiscoveryModeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetRemoteDiscoveryModeResponse(struct soap*, const char *URL, _tds__GetRemoteDiscoveryModeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetRemoteDiscoveryModeResponse(struct soap*, const char *URL, _tds__GetRemoteDiscoveryModeResponse*);
    soap_POST_recv__tds__GetRemoteDiscoveryModeResponse(struct soap*, _tds__GetRemoteDiscoveryModeResponse*);
    @endcode

  - <tds:SetRemoteDiscoveryMode> @ref _tds__SetRemoteDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRemoteDiscoveryMode(struct soap*, const char *URL, _tds__SetRemoteDiscoveryMode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRemoteDiscoveryMode(struct soap*, const char *URL, _tds__SetRemoteDiscoveryMode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRemoteDiscoveryMode(struct soap*, const char *URL, _tds__SetRemoteDiscoveryMode*);
    soap_POST_recv__tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode*);
    @endcode

  - <tds:SetRemoteDiscoveryModeResponse> @ref _tds__SetRemoteDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteDiscoveryModeResponse(struct soap*, _tds__SetRemoteDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteDiscoveryModeResponse(struct soap*, _tds__SetRemoteDiscoveryModeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRemoteDiscoveryModeResponse(struct soap*, const char *URL, _tds__SetRemoteDiscoveryModeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRemoteDiscoveryModeResponse(struct soap*, const char *URL, _tds__SetRemoteDiscoveryModeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRemoteDiscoveryModeResponse(struct soap*, const char *URL, _tds__SetRemoteDiscoveryModeResponse*);
    soap_POST_recv__tds__SetRemoteDiscoveryModeResponse(struct soap*, _tds__SetRemoteDiscoveryModeResponse*);
    @endcode

  - <tds:GetDPAddresses> @ref _tds__GetDPAddresses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDPAddresses(struct soap*, const char *URL, _tds__GetDPAddresses*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDPAddresses(struct soap*, const char *URL, _tds__GetDPAddresses*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDPAddresses(struct soap*, const char *URL, _tds__GetDPAddresses*);
    soap_POST_recv__tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses*);
    @endcode

  - <tds:GetDPAddressesResponse> @ref _tds__GetDPAddressesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDPAddressesResponse(struct soap*, _tds__GetDPAddressesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDPAddressesResponse(struct soap*, _tds__GetDPAddressesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDPAddressesResponse(struct soap*, const char *URL, _tds__GetDPAddressesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDPAddressesResponse(struct soap*, const char *URL, _tds__GetDPAddressesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDPAddressesResponse(struct soap*, const char *URL, _tds__GetDPAddressesResponse*);
    soap_POST_recv__tds__GetDPAddressesResponse(struct soap*, _tds__GetDPAddressesResponse*);
    @endcode

  - <tds:SetDPAddresses> @ref _tds__SetDPAddresses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDPAddresses(struct soap*, const char *URL, _tds__SetDPAddresses*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDPAddresses(struct soap*, const char *URL, _tds__SetDPAddresses*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDPAddresses(struct soap*, const char *URL, _tds__SetDPAddresses*);
    soap_POST_recv__tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses*);
    @endcode

  - <tds:SetDPAddressesResponse> @ref _tds__SetDPAddressesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDPAddressesResponse(struct soap*, _tds__SetDPAddressesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDPAddressesResponse(struct soap*, _tds__SetDPAddressesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDPAddressesResponse(struct soap*, const char *URL, _tds__SetDPAddressesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDPAddressesResponse(struct soap*, const char *URL, _tds__SetDPAddressesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDPAddressesResponse(struct soap*, const char *URL, _tds__SetDPAddressesResponse*);
    soap_POST_recv__tds__SetDPAddressesResponse(struct soap*, _tds__SetDPAddressesResponse*);
    @endcode

  - <tds:GetEndpointReference> @ref _tds__GetEndpointReference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetEndpointReference(struct soap*, const char *URL, _tds__GetEndpointReference*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetEndpointReference(struct soap*, const char *URL, _tds__GetEndpointReference*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetEndpointReference(struct soap*, const char *URL, _tds__GetEndpointReference*);
    soap_POST_recv__tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference*);
    @endcode

  - <tds:GetEndpointReferenceResponse> @ref _tds__GetEndpointReferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetEndpointReferenceResponse(struct soap*, _tds__GetEndpointReferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetEndpointReferenceResponse(struct soap*, _tds__GetEndpointReferenceResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetEndpointReferenceResponse(struct soap*, const char *URL, _tds__GetEndpointReferenceResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetEndpointReferenceResponse(struct soap*, const char *URL, _tds__GetEndpointReferenceResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetEndpointReferenceResponse(struct soap*, const char *URL, _tds__GetEndpointReferenceResponse*);
    soap_POST_recv__tds__GetEndpointReferenceResponse(struct soap*, _tds__GetEndpointReferenceResponse*);
    @endcode

  - <tds:GetRemoteUser> @ref _tds__GetRemoteUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetRemoteUser(struct soap*, const char *URL, _tds__GetRemoteUser*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetRemoteUser(struct soap*, const char *URL, _tds__GetRemoteUser*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetRemoteUser(struct soap*, const char *URL, _tds__GetRemoteUser*);
    soap_POST_recv__tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser*);
    @endcode

  - <tds:GetRemoteUserResponse> @ref _tds__GetRemoteUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteUserResponse(struct soap*, _tds__GetRemoteUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteUserResponse(struct soap*, _tds__GetRemoteUserResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetRemoteUserResponse(struct soap*, const char *URL, _tds__GetRemoteUserResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetRemoteUserResponse(struct soap*, const char *URL, _tds__GetRemoteUserResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetRemoteUserResponse(struct soap*, const char *URL, _tds__GetRemoteUserResponse*);
    soap_POST_recv__tds__GetRemoteUserResponse(struct soap*, _tds__GetRemoteUserResponse*);
    @endcode

  - <tds:SetRemoteUser> @ref _tds__SetRemoteUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRemoteUser(struct soap*, const char *URL, _tds__SetRemoteUser*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRemoteUser(struct soap*, const char *URL, _tds__SetRemoteUser*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRemoteUser(struct soap*, const char *URL, _tds__SetRemoteUser*);
    soap_POST_recv__tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser*);
    @endcode

  - <tds:SetRemoteUserResponse> @ref _tds__SetRemoteUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteUserResponse(struct soap*, _tds__SetRemoteUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteUserResponse(struct soap*, _tds__SetRemoteUserResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRemoteUserResponse(struct soap*, const char *URL, _tds__SetRemoteUserResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRemoteUserResponse(struct soap*, const char *URL, _tds__SetRemoteUserResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRemoteUserResponse(struct soap*, const char *URL, _tds__SetRemoteUserResponse*);
    soap_POST_recv__tds__SetRemoteUserResponse(struct soap*, _tds__SetRemoteUserResponse*);
    @endcode

  - <tds:GetUsers> @ref _tds__GetUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetUsers(struct soap*, _tds__GetUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetUsers(struct soap*, _tds__GetUsers*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetUsers(struct soap*, const char *URL, _tds__GetUsers*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetUsers(struct soap*, const char *URL, _tds__GetUsers*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetUsers(struct soap*, const char *URL, _tds__GetUsers*);
    soap_POST_recv__tds__GetUsers(struct soap*, _tds__GetUsers*);
    @endcode

  - <tds:GetUsersResponse> @ref _tds__GetUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetUsersResponse(struct soap*, _tds__GetUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetUsersResponse(struct soap*, _tds__GetUsersResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetUsersResponse(struct soap*, const char *URL, _tds__GetUsersResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetUsersResponse(struct soap*, const char *URL, _tds__GetUsersResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetUsersResponse(struct soap*, const char *URL, _tds__GetUsersResponse*);
    soap_POST_recv__tds__GetUsersResponse(struct soap*, _tds__GetUsersResponse*);
    @endcode

  - <tds:CreateUsers> @ref _tds__CreateUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateUsers(struct soap*, _tds__CreateUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateUsers(struct soap*, _tds__CreateUsers*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateUsers(struct soap*, const char *URL, _tds__CreateUsers*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateUsers(struct soap*, const char *URL, _tds__CreateUsers*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateUsers(struct soap*, const char *URL, _tds__CreateUsers*);
    soap_POST_recv__tds__CreateUsers(struct soap*, _tds__CreateUsers*);
    @endcode

  - <tds:CreateUsersResponse> @ref _tds__CreateUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateUsersResponse(struct soap*, _tds__CreateUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateUsersResponse(struct soap*, _tds__CreateUsersResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateUsersResponse(struct soap*, const char *URL, _tds__CreateUsersResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateUsersResponse(struct soap*, const char *URL, _tds__CreateUsersResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateUsersResponse(struct soap*, const char *URL, _tds__CreateUsersResponse*);
    soap_POST_recv__tds__CreateUsersResponse(struct soap*, _tds__CreateUsersResponse*);
    @endcode

  - <tds:DeleteUsers> @ref _tds__DeleteUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteUsers(struct soap*, _tds__DeleteUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteUsers(struct soap*, _tds__DeleteUsers*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteUsers(struct soap*, const char *URL, _tds__DeleteUsers*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteUsers(struct soap*, const char *URL, _tds__DeleteUsers*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteUsers(struct soap*, const char *URL, _tds__DeleteUsers*);
    soap_POST_recv__tds__DeleteUsers(struct soap*, _tds__DeleteUsers*);
    @endcode

  - <tds:DeleteUsersResponse> @ref _tds__DeleteUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteUsersResponse(struct soap*, _tds__DeleteUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteUsersResponse(struct soap*, _tds__DeleteUsersResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteUsersResponse(struct soap*, const char *URL, _tds__DeleteUsersResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteUsersResponse(struct soap*, const char *URL, _tds__DeleteUsersResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteUsersResponse(struct soap*, const char *URL, _tds__DeleteUsersResponse*);
    soap_POST_recv__tds__DeleteUsersResponse(struct soap*, _tds__DeleteUsersResponse*);
    @endcode

  - <tds:SetUser> @ref _tds__SetUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetUser(struct soap*, _tds__SetUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetUser(struct soap*, _tds__SetUser*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetUser(struct soap*, const char *URL, _tds__SetUser*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetUser(struct soap*, const char *URL, _tds__SetUser*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetUser(struct soap*, const char *URL, _tds__SetUser*);
    soap_POST_recv__tds__SetUser(struct soap*, _tds__SetUser*);
    @endcode

  - <tds:SetUserResponse> @ref _tds__SetUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetUserResponse(struct soap*, _tds__SetUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetUserResponse(struct soap*, _tds__SetUserResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetUserResponse(struct soap*, const char *URL, _tds__SetUserResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetUserResponse(struct soap*, const char *URL, _tds__SetUserResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetUserResponse(struct soap*, const char *URL, _tds__SetUserResponse*);
    soap_POST_recv__tds__SetUserResponse(struct soap*, _tds__SetUserResponse*);
    @endcode

  - <tds:GetWsdlUrl> @ref _tds__GetWsdlUrl
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetWsdlUrl(struct soap*, const char *URL, _tds__GetWsdlUrl*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetWsdlUrl(struct soap*, const char *URL, _tds__GetWsdlUrl*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetWsdlUrl(struct soap*, const char *URL, _tds__GetWsdlUrl*);
    soap_POST_recv__tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl*);
    @endcode

  - <tds:GetWsdlUrlResponse> @ref _tds__GetWsdlUrlResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetWsdlUrlResponse(struct soap*, _tds__GetWsdlUrlResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetWsdlUrlResponse(struct soap*, _tds__GetWsdlUrlResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetWsdlUrlResponse(struct soap*, const char *URL, _tds__GetWsdlUrlResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetWsdlUrlResponse(struct soap*, const char *URL, _tds__GetWsdlUrlResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetWsdlUrlResponse(struct soap*, const char *URL, _tds__GetWsdlUrlResponse*);
    soap_POST_recv__tds__GetWsdlUrlResponse(struct soap*, _tds__GetWsdlUrlResponse*);
    @endcode

  - <tds:GetCapabilities> @ref _tds__GetCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCapabilities(struct soap*, _tds__GetCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCapabilities(struct soap*, _tds__GetCapabilities*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCapabilities(struct soap*, const char *URL, _tds__GetCapabilities*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCapabilities(struct soap*, const char *URL, _tds__GetCapabilities*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCapabilities(struct soap*, const char *URL, _tds__GetCapabilities*);
    soap_POST_recv__tds__GetCapabilities(struct soap*, _tds__GetCapabilities*);
    @endcode

  - <tds:GetCapabilitiesResponse> @ref _tds__GetCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCapabilitiesResponse(struct soap*, _tds__GetCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCapabilitiesResponse(struct soap*, _tds__GetCapabilitiesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCapabilitiesResponse(struct soap*, const char *URL, _tds__GetCapabilitiesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCapabilitiesResponse(struct soap*, const char *URL, _tds__GetCapabilitiesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCapabilitiesResponse(struct soap*, const char *URL, _tds__GetCapabilitiesResponse*);
    soap_POST_recv__tds__GetCapabilitiesResponse(struct soap*, _tds__GetCapabilitiesResponse*);
    @endcode

  - <tds:GetHostname> @ref _tds__GetHostname
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetHostname(struct soap*, _tds__GetHostname*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetHostname(struct soap*, _tds__GetHostname*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetHostname(struct soap*, const char *URL, _tds__GetHostname*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetHostname(struct soap*, const char *URL, _tds__GetHostname*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetHostname(struct soap*, const char *URL, _tds__GetHostname*);
    soap_POST_recv__tds__GetHostname(struct soap*, _tds__GetHostname*);
    @endcode

  - <tds:GetHostnameResponse> @ref _tds__GetHostnameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetHostnameResponse(struct soap*, _tds__GetHostnameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetHostnameResponse(struct soap*, _tds__GetHostnameResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetHostnameResponse(struct soap*, const char *URL, _tds__GetHostnameResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetHostnameResponse(struct soap*, const char *URL, _tds__GetHostnameResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetHostnameResponse(struct soap*, const char *URL, _tds__GetHostnameResponse*);
    soap_POST_recv__tds__GetHostnameResponse(struct soap*, _tds__GetHostnameResponse*);
    @endcode

  - <tds:SetHostname> @ref _tds__SetHostname
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostname(struct soap*, _tds__SetHostname*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostname(struct soap*, _tds__SetHostname*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetHostname(struct soap*, const char *URL, _tds__SetHostname*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetHostname(struct soap*, const char *URL, _tds__SetHostname*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetHostname(struct soap*, const char *URL, _tds__SetHostname*);
    soap_POST_recv__tds__SetHostname(struct soap*, _tds__SetHostname*);
    @endcode

  - <tds:SetHostnameResponse> @ref _tds__SetHostnameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostnameResponse(struct soap*, _tds__SetHostnameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostnameResponse(struct soap*, _tds__SetHostnameResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetHostnameResponse(struct soap*, const char *URL, _tds__SetHostnameResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetHostnameResponse(struct soap*, const char *URL, _tds__SetHostnameResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetHostnameResponse(struct soap*, const char *URL, _tds__SetHostnameResponse*);
    soap_POST_recv__tds__SetHostnameResponse(struct soap*, _tds__SetHostnameResponse*);
    @endcode

  - <tds:SetHostnameFromDHCP> @ref _tds__SetHostnameFromDHCP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetHostnameFromDHCP(struct soap*, const char *URL, _tds__SetHostnameFromDHCP*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetHostnameFromDHCP(struct soap*, const char *URL, _tds__SetHostnameFromDHCP*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetHostnameFromDHCP(struct soap*, const char *URL, _tds__SetHostnameFromDHCP*);
    soap_POST_recv__tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP*);
    @endcode

  - <tds:SetHostnameFromDHCPResponse> @ref _tds__SetHostnameFromDHCPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostnameFromDHCPResponse(struct soap*, _tds__SetHostnameFromDHCPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostnameFromDHCPResponse(struct soap*, _tds__SetHostnameFromDHCPResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetHostnameFromDHCPResponse(struct soap*, const char *URL, _tds__SetHostnameFromDHCPResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetHostnameFromDHCPResponse(struct soap*, const char *URL, _tds__SetHostnameFromDHCPResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetHostnameFromDHCPResponse(struct soap*, const char *URL, _tds__SetHostnameFromDHCPResponse*);
    soap_POST_recv__tds__SetHostnameFromDHCPResponse(struct soap*, _tds__SetHostnameFromDHCPResponse*);
    @endcode

  - <tds:GetDNS> @ref _tds__GetDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDNS(struct soap*, _tds__GetDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDNS(struct soap*, _tds__GetDNS*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDNS(struct soap*, const char *URL, _tds__GetDNS*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDNS(struct soap*, const char *URL, _tds__GetDNS*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDNS(struct soap*, const char *URL, _tds__GetDNS*);
    soap_POST_recv__tds__GetDNS(struct soap*, _tds__GetDNS*);
    @endcode

  - <tds:GetDNSResponse> @ref _tds__GetDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDNSResponse(struct soap*, _tds__GetDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDNSResponse(struct soap*, _tds__GetDNSResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDNSResponse(struct soap*, const char *URL, _tds__GetDNSResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDNSResponse(struct soap*, const char *URL, _tds__GetDNSResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDNSResponse(struct soap*, const char *URL, _tds__GetDNSResponse*);
    soap_POST_recv__tds__GetDNSResponse(struct soap*, _tds__GetDNSResponse*);
    @endcode

  - <tds:SetDNS> @ref _tds__SetDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDNS(struct soap*, _tds__SetDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDNS(struct soap*, _tds__SetDNS*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDNS(struct soap*, const char *URL, _tds__SetDNS*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDNS(struct soap*, const char *URL, _tds__SetDNS*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDNS(struct soap*, const char *URL, _tds__SetDNS*);
    soap_POST_recv__tds__SetDNS(struct soap*, _tds__SetDNS*);
    @endcode

  - <tds:SetDNSResponse> @ref _tds__SetDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDNSResponse(struct soap*, _tds__SetDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDNSResponse(struct soap*, _tds__SetDNSResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDNSResponse(struct soap*, const char *URL, _tds__SetDNSResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDNSResponse(struct soap*, const char *URL, _tds__SetDNSResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDNSResponse(struct soap*, const char *URL, _tds__SetDNSResponse*);
    soap_POST_recv__tds__SetDNSResponse(struct soap*, _tds__SetDNSResponse*);
    @endcode

  - <tds:GetNTP> @ref _tds__GetNTP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNTP(struct soap*, _tds__GetNTP*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNTP(struct soap*, _tds__GetNTP*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNTP(struct soap*, const char *URL, _tds__GetNTP*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNTP(struct soap*, const char *URL, _tds__GetNTP*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNTP(struct soap*, const char *URL, _tds__GetNTP*);
    soap_POST_recv__tds__GetNTP(struct soap*, _tds__GetNTP*);
    @endcode

  - <tds:GetNTPResponse> @ref _tds__GetNTPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNTPResponse(struct soap*, _tds__GetNTPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNTPResponse(struct soap*, _tds__GetNTPResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNTPResponse(struct soap*, const char *URL, _tds__GetNTPResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNTPResponse(struct soap*, const char *URL, _tds__GetNTPResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNTPResponse(struct soap*, const char *URL, _tds__GetNTPResponse*);
    soap_POST_recv__tds__GetNTPResponse(struct soap*, _tds__GetNTPResponse*);
    @endcode

  - <tds:SetNTP> @ref _tds__SetNTP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNTP(struct soap*, _tds__SetNTP*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNTP(struct soap*, _tds__SetNTP*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNTP(struct soap*, const char *URL, _tds__SetNTP*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNTP(struct soap*, const char *URL, _tds__SetNTP*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNTP(struct soap*, const char *URL, _tds__SetNTP*);
    soap_POST_recv__tds__SetNTP(struct soap*, _tds__SetNTP*);
    @endcode

  - <tds:SetNTPResponse> @ref _tds__SetNTPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNTPResponse(struct soap*, _tds__SetNTPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNTPResponse(struct soap*, _tds__SetNTPResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNTPResponse(struct soap*, const char *URL, _tds__SetNTPResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNTPResponse(struct soap*, const char *URL, _tds__SetNTPResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNTPResponse(struct soap*, const char *URL, _tds__SetNTPResponse*);
    soap_POST_recv__tds__SetNTPResponse(struct soap*, _tds__SetNTPResponse*);
    @endcode

  - <tds:GetDynamicDNS> @ref _tds__GetDynamicDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDynamicDNS(struct soap*, const char *URL, _tds__GetDynamicDNS*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDynamicDNS(struct soap*, const char *URL, _tds__GetDynamicDNS*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDynamicDNS(struct soap*, const char *URL, _tds__GetDynamicDNS*);
    soap_POST_recv__tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS*);
    @endcode

  - <tds:GetDynamicDNSResponse> @ref _tds__GetDynamicDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDynamicDNSResponse(struct soap*, _tds__GetDynamicDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDynamicDNSResponse(struct soap*, _tds__GetDynamicDNSResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDynamicDNSResponse(struct soap*, const char *URL, _tds__GetDynamicDNSResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDynamicDNSResponse(struct soap*, const char *URL, _tds__GetDynamicDNSResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDynamicDNSResponse(struct soap*, const char *URL, _tds__GetDynamicDNSResponse*);
    soap_POST_recv__tds__GetDynamicDNSResponse(struct soap*, _tds__GetDynamicDNSResponse*);
    @endcode

  - <tds:SetDynamicDNS> @ref _tds__SetDynamicDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDynamicDNS(struct soap*, const char *URL, _tds__SetDynamicDNS*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDynamicDNS(struct soap*, const char *URL, _tds__SetDynamicDNS*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDynamicDNS(struct soap*, const char *URL, _tds__SetDynamicDNS*);
    soap_POST_recv__tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS*);
    @endcode

  - <tds:SetDynamicDNSResponse> @ref _tds__SetDynamicDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDynamicDNSResponse(struct soap*, _tds__SetDynamicDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDynamicDNSResponse(struct soap*, _tds__SetDynamicDNSResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDynamicDNSResponse(struct soap*, const char *URL, _tds__SetDynamicDNSResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDynamicDNSResponse(struct soap*, const char *URL, _tds__SetDynamicDNSResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDynamicDNSResponse(struct soap*, const char *URL, _tds__SetDynamicDNSResponse*);
    soap_POST_recv__tds__SetDynamicDNSResponse(struct soap*, _tds__SetDynamicDNSResponse*);
    @endcode

  - <tds:GetNetworkInterfaces> @ref _tds__GetNetworkInterfaces
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNetworkInterfaces(struct soap*, const char *URL, _tds__GetNetworkInterfaces*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNetworkInterfaces(struct soap*, const char *URL, _tds__GetNetworkInterfaces*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNetworkInterfaces(struct soap*, const char *URL, _tds__GetNetworkInterfaces*);
    soap_POST_recv__tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces*);
    @endcode

  - <tds:GetNetworkInterfacesResponse> @ref _tds__GetNetworkInterfacesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkInterfacesResponse(struct soap*, _tds__GetNetworkInterfacesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkInterfacesResponse(struct soap*, _tds__GetNetworkInterfacesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNetworkInterfacesResponse(struct soap*, const char *URL, _tds__GetNetworkInterfacesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNetworkInterfacesResponse(struct soap*, const char *URL, _tds__GetNetworkInterfacesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNetworkInterfacesResponse(struct soap*, const char *URL, _tds__GetNetworkInterfacesResponse*);
    soap_POST_recv__tds__GetNetworkInterfacesResponse(struct soap*, _tds__GetNetworkInterfacesResponse*);
    @endcode

  - <tds:SetNetworkInterfaces> @ref _tds__SetNetworkInterfaces
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNetworkInterfaces(struct soap*, const char *URL, _tds__SetNetworkInterfaces*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNetworkInterfaces(struct soap*, const char *URL, _tds__SetNetworkInterfaces*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNetworkInterfaces(struct soap*, const char *URL, _tds__SetNetworkInterfaces*);
    soap_POST_recv__tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces*);
    @endcode

  - <tds:SetNetworkInterfacesResponse> @ref _tds__SetNetworkInterfacesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkInterfacesResponse(struct soap*, _tds__SetNetworkInterfacesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkInterfacesResponse(struct soap*, _tds__SetNetworkInterfacesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNetworkInterfacesResponse(struct soap*, const char *URL, _tds__SetNetworkInterfacesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNetworkInterfacesResponse(struct soap*, const char *URL, _tds__SetNetworkInterfacesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNetworkInterfacesResponse(struct soap*, const char *URL, _tds__SetNetworkInterfacesResponse*);
    soap_POST_recv__tds__SetNetworkInterfacesResponse(struct soap*, _tds__SetNetworkInterfacesResponse*);
    @endcode

  - <tds:GetNetworkProtocols> @ref _tds__GetNetworkProtocols
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNetworkProtocols(struct soap*, const char *URL, _tds__GetNetworkProtocols*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNetworkProtocols(struct soap*, const char *URL, _tds__GetNetworkProtocols*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNetworkProtocols(struct soap*, const char *URL, _tds__GetNetworkProtocols*);
    soap_POST_recv__tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols*);
    @endcode

  - <tds:GetNetworkProtocolsResponse> @ref _tds__GetNetworkProtocolsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkProtocolsResponse(struct soap*, _tds__GetNetworkProtocolsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkProtocolsResponse(struct soap*, _tds__GetNetworkProtocolsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNetworkProtocolsResponse(struct soap*, const char *URL, _tds__GetNetworkProtocolsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNetworkProtocolsResponse(struct soap*, const char *URL, _tds__GetNetworkProtocolsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNetworkProtocolsResponse(struct soap*, const char *URL, _tds__GetNetworkProtocolsResponse*);
    soap_POST_recv__tds__GetNetworkProtocolsResponse(struct soap*, _tds__GetNetworkProtocolsResponse*);
    @endcode

  - <tds:SetNetworkProtocols> @ref _tds__SetNetworkProtocols
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNetworkProtocols(struct soap*, const char *URL, _tds__SetNetworkProtocols*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNetworkProtocols(struct soap*, const char *URL, _tds__SetNetworkProtocols*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNetworkProtocols(struct soap*, const char *URL, _tds__SetNetworkProtocols*);
    soap_POST_recv__tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols*);
    @endcode

  - <tds:SetNetworkProtocolsResponse> @ref _tds__SetNetworkProtocolsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkProtocolsResponse(struct soap*, _tds__SetNetworkProtocolsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkProtocolsResponse(struct soap*, _tds__SetNetworkProtocolsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNetworkProtocolsResponse(struct soap*, const char *URL, _tds__SetNetworkProtocolsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNetworkProtocolsResponse(struct soap*, const char *URL, _tds__SetNetworkProtocolsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNetworkProtocolsResponse(struct soap*, const char *URL, _tds__SetNetworkProtocolsResponse*);
    soap_POST_recv__tds__SetNetworkProtocolsResponse(struct soap*, _tds__SetNetworkProtocolsResponse*);
    @endcode

  - <tds:GetNetworkDefaultGateway> @ref _tds__GetNetworkDefaultGateway
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNetworkDefaultGateway(struct soap*, const char *URL, _tds__GetNetworkDefaultGateway*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNetworkDefaultGateway(struct soap*, const char *URL, _tds__GetNetworkDefaultGateway*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNetworkDefaultGateway(struct soap*, const char *URL, _tds__GetNetworkDefaultGateway*);
    soap_POST_recv__tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway*);
    @endcode

  - <tds:GetNetworkDefaultGatewayResponse> @ref _tds__GetNetworkDefaultGatewayResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkDefaultGatewayResponse(struct soap*, _tds__GetNetworkDefaultGatewayResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkDefaultGatewayResponse(struct soap*, _tds__GetNetworkDefaultGatewayResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetNetworkDefaultGatewayResponse(struct soap*, const char *URL, _tds__GetNetworkDefaultGatewayResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetNetworkDefaultGatewayResponse(struct soap*, const char *URL, _tds__GetNetworkDefaultGatewayResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetNetworkDefaultGatewayResponse(struct soap*, const char *URL, _tds__GetNetworkDefaultGatewayResponse*);
    soap_POST_recv__tds__GetNetworkDefaultGatewayResponse(struct soap*, _tds__GetNetworkDefaultGatewayResponse*);
    @endcode

  - <tds:SetNetworkDefaultGateway> @ref _tds__SetNetworkDefaultGateway
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNetworkDefaultGateway(struct soap*, const char *URL, _tds__SetNetworkDefaultGateway*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNetworkDefaultGateway(struct soap*, const char *URL, _tds__SetNetworkDefaultGateway*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNetworkDefaultGateway(struct soap*, const char *URL, _tds__SetNetworkDefaultGateway*);
    soap_POST_recv__tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway*);
    @endcode

  - <tds:SetNetworkDefaultGatewayResponse> @ref _tds__SetNetworkDefaultGatewayResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkDefaultGatewayResponse(struct soap*, _tds__SetNetworkDefaultGatewayResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkDefaultGatewayResponse(struct soap*, _tds__SetNetworkDefaultGatewayResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetNetworkDefaultGatewayResponse(struct soap*, const char *URL, _tds__SetNetworkDefaultGatewayResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetNetworkDefaultGatewayResponse(struct soap*, const char *URL, _tds__SetNetworkDefaultGatewayResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetNetworkDefaultGatewayResponse(struct soap*, const char *URL, _tds__SetNetworkDefaultGatewayResponse*);
    soap_POST_recv__tds__SetNetworkDefaultGatewayResponse(struct soap*, _tds__SetNetworkDefaultGatewayResponse*);
    @endcode

  - <tds:GetZeroConfiguration> @ref _tds__GetZeroConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetZeroConfiguration(struct soap*, const char *URL, _tds__GetZeroConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetZeroConfiguration(struct soap*, const char *URL, _tds__GetZeroConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetZeroConfiguration(struct soap*, const char *URL, _tds__GetZeroConfiguration*);
    soap_POST_recv__tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration*);
    @endcode

  - <tds:GetZeroConfigurationResponse> @ref _tds__GetZeroConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetZeroConfigurationResponse(struct soap*, _tds__GetZeroConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetZeroConfigurationResponse(struct soap*, _tds__GetZeroConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetZeroConfigurationResponse(struct soap*, const char *URL, _tds__GetZeroConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetZeroConfigurationResponse(struct soap*, const char *URL, _tds__GetZeroConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetZeroConfigurationResponse(struct soap*, const char *URL, _tds__GetZeroConfigurationResponse*);
    soap_POST_recv__tds__GetZeroConfigurationResponse(struct soap*, _tds__GetZeroConfigurationResponse*);
    @endcode

  - <tds:SetZeroConfiguration> @ref _tds__SetZeroConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetZeroConfiguration(struct soap*, const char *URL, _tds__SetZeroConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetZeroConfiguration(struct soap*, const char *URL, _tds__SetZeroConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetZeroConfiguration(struct soap*, const char *URL, _tds__SetZeroConfiguration*);
    soap_POST_recv__tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration*);
    @endcode

  - <tds:SetZeroConfigurationResponse> @ref _tds__SetZeroConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetZeroConfigurationResponse(struct soap*, _tds__SetZeroConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetZeroConfigurationResponse(struct soap*, _tds__SetZeroConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetZeroConfigurationResponse(struct soap*, const char *URL, _tds__SetZeroConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetZeroConfigurationResponse(struct soap*, const char *URL, _tds__SetZeroConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetZeroConfigurationResponse(struct soap*, const char *URL, _tds__SetZeroConfigurationResponse*);
    soap_POST_recv__tds__SetZeroConfigurationResponse(struct soap*, _tds__SetZeroConfigurationResponse*);
    @endcode

  - <tds:GetIPAddressFilter> @ref _tds__GetIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetIPAddressFilter(struct soap*, const char *URL, _tds__GetIPAddressFilter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetIPAddressFilter(struct soap*, const char *URL, _tds__GetIPAddressFilter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetIPAddressFilter(struct soap*, const char *URL, _tds__GetIPAddressFilter*);
    soap_POST_recv__tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter*);
    @endcode

  - <tds:GetIPAddressFilterResponse> @ref _tds__GetIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetIPAddressFilterResponse(struct soap*, _tds__GetIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetIPAddressFilterResponse(struct soap*, _tds__GetIPAddressFilterResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetIPAddressFilterResponse(struct soap*, const char *URL, _tds__GetIPAddressFilterResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetIPAddressFilterResponse(struct soap*, const char *URL, _tds__GetIPAddressFilterResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetIPAddressFilterResponse(struct soap*, const char *URL, _tds__GetIPAddressFilterResponse*);
    soap_POST_recv__tds__GetIPAddressFilterResponse(struct soap*, _tds__GetIPAddressFilterResponse*);
    @endcode

  - <tds:SetIPAddressFilter> @ref _tds__SetIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetIPAddressFilter(struct soap*, const char *URL, _tds__SetIPAddressFilter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetIPAddressFilter(struct soap*, const char *URL, _tds__SetIPAddressFilter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetIPAddressFilter(struct soap*, const char *URL, _tds__SetIPAddressFilter*);
    soap_POST_recv__tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter*);
    @endcode

  - <tds:SetIPAddressFilterResponse> @ref _tds__SetIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetIPAddressFilterResponse(struct soap*, _tds__SetIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetIPAddressFilterResponse(struct soap*, _tds__SetIPAddressFilterResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetIPAddressFilterResponse(struct soap*, const char *URL, _tds__SetIPAddressFilterResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetIPAddressFilterResponse(struct soap*, const char *URL, _tds__SetIPAddressFilterResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetIPAddressFilterResponse(struct soap*, const char *URL, _tds__SetIPAddressFilterResponse*);
    soap_POST_recv__tds__SetIPAddressFilterResponse(struct soap*, _tds__SetIPAddressFilterResponse*);
    @endcode

  - <tds:AddIPAddressFilter> @ref _tds__AddIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__AddIPAddressFilter(struct soap*, const char *URL, _tds__AddIPAddressFilter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__AddIPAddressFilter(struct soap*, const char *URL, _tds__AddIPAddressFilter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__AddIPAddressFilter(struct soap*, const char *URL, _tds__AddIPAddressFilter*);
    soap_POST_recv__tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter*);
    @endcode

  - <tds:AddIPAddressFilterResponse> @ref _tds__AddIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddIPAddressFilterResponse(struct soap*, _tds__AddIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddIPAddressFilterResponse(struct soap*, _tds__AddIPAddressFilterResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__AddIPAddressFilterResponse(struct soap*, const char *URL, _tds__AddIPAddressFilterResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__AddIPAddressFilterResponse(struct soap*, const char *URL, _tds__AddIPAddressFilterResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__AddIPAddressFilterResponse(struct soap*, const char *URL, _tds__AddIPAddressFilterResponse*);
    soap_POST_recv__tds__AddIPAddressFilterResponse(struct soap*, _tds__AddIPAddressFilterResponse*);
    @endcode

  - <tds:RemoveIPAddressFilter> @ref _tds__RemoveIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__RemoveIPAddressFilter(struct soap*, const char *URL, _tds__RemoveIPAddressFilter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__RemoveIPAddressFilter(struct soap*, const char *URL, _tds__RemoveIPAddressFilter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__RemoveIPAddressFilter(struct soap*, const char *URL, _tds__RemoveIPAddressFilter*);
    soap_POST_recv__tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter*);
    @endcode

  - <tds:RemoveIPAddressFilterResponse> @ref _tds__RemoveIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveIPAddressFilterResponse(struct soap*, _tds__RemoveIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveIPAddressFilterResponse(struct soap*, _tds__RemoveIPAddressFilterResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__RemoveIPAddressFilterResponse(struct soap*, const char *URL, _tds__RemoveIPAddressFilterResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__RemoveIPAddressFilterResponse(struct soap*, const char *URL, _tds__RemoveIPAddressFilterResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__RemoveIPAddressFilterResponse(struct soap*, const char *URL, _tds__RemoveIPAddressFilterResponse*);
    soap_POST_recv__tds__RemoveIPAddressFilterResponse(struct soap*, _tds__RemoveIPAddressFilterResponse*);
    @endcode

  - <tds:GetAccessPolicy> @ref _tds__GetAccessPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetAccessPolicy(struct soap*, const char *URL, _tds__GetAccessPolicy*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetAccessPolicy(struct soap*, const char *URL, _tds__GetAccessPolicy*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetAccessPolicy(struct soap*, const char *URL, _tds__GetAccessPolicy*);
    soap_POST_recv__tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy*);
    @endcode

  - <tds:GetAccessPolicyResponse> @ref _tds__GetAccessPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetAccessPolicyResponse(struct soap*, _tds__GetAccessPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetAccessPolicyResponse(struct soap*, _tds__GetAccessPolicyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetAccessPolicyResponse(struct soap*, const char *URL, _tds__GetAccessPolicyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetAccessPolicyResponse(struct soap*, const char *URL, _tds__GetAccessPolicyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetAccessPolicyResponse(struct soap*, const char *URL, _tds__GetAccessPolicyResponse*);
    soap_POST_recv__tds__GetAccessPolicyResponse(struct soap*, _tds__GetAccessPolicyResponse*);
    @endcode

  - <tds:SetAccessPolicy> @ref _tds__SetAccessPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetAccessPolicy(struct soap*, const char *URL, _tds__SetAccessPolicy*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetAccessPolicy(struct soap*, const char *URL, _tds__SetAccessPolicy*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetAccessPolicy(struct soap*, const char *URL, _tds__SetAccessPolicy*);
    soap_POST_recv__tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy*);
    @endcode

  - <tds:SetAccessPolicyResponse> @ref _tds__SetAccessPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetAccessPolicyResponse(struct soap*, _tds__SetAccessPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetAccessPolicyResponse(struct soap*, _tds__SetAccessPolicyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetAccessPolicyResponse(struct soap*, const char *URL, _tds__SetAccessPolicyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetAccessPolicyResponse(struct soap*, const char *URL, _tds__SetAccessPolicyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetAccessPolicyResponse(struct soap*, const char *URL, _tds__SetAccessPolicyResponse*);
    soap_POST_recv__tds__SetAccessPolicyResponse(struct soap*, _tds__SetAccessPolicyResponse*);
    @endcode

  - <tds:CreateCertificate> @ref _tds__CreateCertificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateCertificate(struct soap*, _tds__CreateCertificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateCertificate(struct soap*, _tds__CreateCertificate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateCertificate(struct soap*, const char *URL, _tds__CreateCertificate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateCertificate(struct soap*, const char *URL, _tds__CreateCertificate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateCertificate(struct soap*, const char *URL, _tds__CreateCertificate*);
    soap_POST_recv__tds__CreateCertificate(struct soap*, _tds__CreateCertificate*);
    @endcode

  - <tds:CreateCertificateResponse> @ref _tds__CreateCertificateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateCertificateResponse(struct soap*, _tds__CreateCertificateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateCertificateResponse(struct soap*, _tds__CreateCertificateResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateCertificateResponse(struct soap*, const char *URL, _tds__CreateCertificateResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateCertificateResponse(struct soap*, const char *URL, _tds__CreateCertificateResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateCertificateResponse(struct soap*, const char *URL, _tds__CreateCertificateResponse*);
    soap_POST_recv__tds__CreateCertificateResponse(struct soap*, _tds__CreateCertificateResponse*);
    @endcode

  - <tds:GetCertificates> @ref _tds__GetCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificates(struct soap*, _tds__GetCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificates(struct soap*, _tds__GetCertificates*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCertificates(struct soap*, const char *URL, _tds__GetCertificates*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCertificates(struct soap*, const char *URL, _tds__GetCertificates*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCertificates(struct soap*, const char *URL, _tds__GetCertificates*);
    soap_POST_recv__tds__GetCertificates(struct soap*, _tds__GetCertificates*);
    @endcode

  - <tds:GetCertificatesResponse> @ref _tds__GetCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificatesResponse(struct soap*, _tds__GetCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificatesResponse(struct soap*, _tds__GetCertificatesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCertificatesResponse(struct soap*, const char *URL, _tds__GetCertificatesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCertificatesResponse(struct soap*, const char *URL, _tds__GetCertificatesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCertificatesResponse(struct soap*, const char *URL, _tds__GetCertificatesResponse*);
    soap_POST_recv__tds__GetCertificatesResponse(struct soap*, _tds__GetCertificatesResponse*);
    @endcode

  - <tds:GetCertificatesStatus> @ref _tds__GetCertificatesStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCertificatesStatus(struct soap*, const char *URL, _tds__GetCertificatesStatus*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCertificatesStatus(struct soap*, const char *URL, _tds__GetCertificatesStatus*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCertificatesStatus(struct soap*, const char *URL, _tds__GetCertificatesStatus*);
    soap_POST_recv__tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus*);
    @endcode

  - <tds:GetCertificatesStatusResponse> @ref _tds__GetCertificatesStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificatesStatusResponse(struct soap*, _tds__GetCertificatesStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificatesStatusResponse(struct soap*, _tds__GetCertificatesStatusResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCertificatesStatusResponse(struct soap*, const char *URL, _tds__GetCertificatesStatusResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCertificatesStatusResponse(struct soap*, const char *URL, _tds__GetCertificatesStatusResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCertificatesStatusResponse(struct soap*, const char *URL, _tds__GetCertificatesStatusResponse*);
    soap_POST_recv__tds__GetCertificatesStatusResponse(struct soap*, _tds__GetCertificatesStatusResponse*);
    @endcode

  - <tds:SetCertificatesStatus> @ref _tds__SetCertificatesStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetCertificatesStatus(struct soap*, const char *URL, _tds__SetCertificatesStatus*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetCertificatesStatus(struct soap*, const char *URL, _tds__SetCertificatesStatus*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetCertificatesStatus(struct soap*, const char *URL, _tds__SetCertificatesStatus*);
    soap_POST_recv__tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus*);
    @endcode

  - <tds:SetCertificatesStatusResponse> @ref _tds__SetCertificatesStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetCertificatesStatusResponse(struct soap*, _tds__SetCertificatesStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetCertificatesStatusResponse(struct soap*, _tds__SetCertificatesStatusResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetCertificatesStatusResponse(struct soap*, const char *URL, _tds__SetCertificatesStatusResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetCertificatesStatusResponse(struct soap*, const char *URL, _tds__SetCertificatesStatusResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetCertificatesStatusResponse(struct soap*, const char *URL, _tds__SetCertificatesStatusResponse*);
    soap_POST_recv__tds__SetCertificatesStatusResponse(struct soap*, _tds__SetCertificatesStatusResponse*);
    @endcode

  - <tds:DeleteCertificates> @ref _tds__DeleteCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteCertificates(struct soap*, const char *URL, _tds__DeleteCertificates*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteCertificates(struct soap*, const char *URL, _tds__DeleteCertificates*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteCertificates(struct soap*, const char *URL, _tds__DeleteCertificates*);
    soap_POST_recv__tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates*);
    @endcode

  - <tds:DeleteCertificatesResponse> @ref _tds__DeleteCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteCertificatesResponse(struct soap*, _tds__DeleteCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteCertificatesResponse(struct soap*, _tds__DeleteCertificatesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteCertificatesResponse(struct soap*, const char *URL, _tds__DeleteCertificatesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteCertificatesResponse(struct soap*, const char *URL, _tds__DeleteCertificatesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteCertificatesResponse(struct soap*, const char *URL, _tds__DeleteCertificatesResponse*);
    soap_POST_recv__tds__DeleteCertificatesResponse(struct soap*, _tds__DeleteCertificatesResponse*);
    @endcode

  - <tds:GetPkcs10Request> @ref _tds__GetPkcs10Request
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetPkcs10Request(struct soap*, const char *URL, _tds__GetPkcs10Request*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetPkcs10Request(struct soap*, const char *URL, _tds__GetPkcs10Request*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetPkcs10Request(struct soap*, const char *URL, _tds__GetPkcs10Request*);
    soap_POST_recv__tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request*);
    @endcode

  - <tds:GetPkcs10RequestResponse> @ref _tds__GetPkcs10RequestResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetPkcs10RequestResponse(struct soap*, _tds__GetPkcs10RequestResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetPkcs10RequestResponse(struct soap*, _tds__GetPkcs10RequestResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetPkcs10RequestResponse(struct soap*, const char *URL, _tds__GetPkcs10RequestResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetPkcs10RequestResponse(struct soap*, const char *URL, _tds__GetPkcs10RequestResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetPkcs10RequestResponse(struct soap*, const char *URL, _tds__GetPkcs10RequestResponse*);
    soap_POST_recv__tds__GetPkcs10RequestResponse(struct soap*, _tds__GetPkcs10RequestResponse*);
    @endcode

  - <tds:LoadCertificates> @ref _tds__LoadCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificates(struct soap*, _tds__LoadCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificates(struct soap*, _tds__LoadCertificates*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__LoadCertificates(struct soap*, const char *URL, _tds__LoadCertificates*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__LoadCertificates(struct soap*, const char *URL, _tds__LoadCertificates*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__LoadCertificates(struct soap*, const char *URL, _tds__LoadCertificates*);
    soap_POST_recv__tds__LoadCertificates(struct soap*, _tds__LoadCertificates*);
    @endcode

  - <tds:LoadCertificatesResponse> @ref _tds__LoadCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificatesResponse(struct soap*, _tds__LoadCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificatesResponse(struct soap*, _tds__LoadCertificatesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__LoadCertificatesResponse(struct soap*, const char *URL, _tds__LoadCertificatesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__LoadCertificatesResponse(struct soap*, const char *URL, _tds__LoadCertificatesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__LoadCertificatesResponse(struct soap*, const char *URL, _tds__LoadCertificatesResponse*);
    soap_POST_recv__tds__LoadCertificatesResponse(struct soap*, _tds__LoadCertificatesResponse*);
    @endcode

  - <tds:GetClientCertificateMode> @ref _tds__GetClientCertificateMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetClientCertificateMode(struct soap*, const char *URL, _tds__GetClientCertificateMode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetClientCertificateMode(struct soap*, const char *URL, _tds__GetClientCertificateMode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetClientCertificateMode(struct soap*, const char *URL, _tds__GetClientCertificateMode*);
    soap_POST_recv__tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode*);
    @endcode

  - <tds:GetClientCertificateModeResponse> @ref _tds__GetClientCertificateModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetClientCertificateModeResponse(struct soap*, _tds__GetClientCertificateModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetClientCertificateModeResponse(struct soap*, _tds__GetClientCertificateModeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetClientCertificateModeResponse(struct soap*, const char *URL, _tds__GetClientCertificateModeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetClientCertificateModeResponse(struct soap*, const char *URL, _tds__GetClientCertificateModeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetClientCertificateModeResponse(struct soap*, const char *URL, _tds__GetClientCertificateModeResponse*);
    soap_POST_recv__tds__GetClientCertificateModeResponse(struct soap*, _tds__GetClientCertificateModeResponse*);
    @endcode

  - <tds:SetClientCertificateMode> @ref _tds__SetClientCertificateMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetClientCertificateMode(struct soap*, const char *URL, _tds__SetClientCertificateMode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetClientCertificateMode(struct soap*, const char *URL, _tds__SetClientCertificateMode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetClientCertificateMode(struct soap*, const char *URL, _tds__SetClientCertificateMode*);
    soap_POST_recv__tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode*);
    @endcode

  - <tds:SetClientCertificateModeResponse> @ref _tds__SetClientCertificateModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetClientCertificateModeResponse(struct soap*, _tds__SetClientCertificateModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetClientCertificateModeResponse(struct soap*, _tds__SetClientCertificateModeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetClientCertificateModeResponse(struct soap*, const char *URL, _tds__SetClientCertificateModeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetClientCertificateModeResponse(struct soap*, const char *URL, _tds__SetClientCertificateModeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetClientCertificateModeResponse(struct soap*, const char *URL, _tds__SetClientCertificateModeResponse*);
    soap_POST_recv__tds__SetClientCertificateModeResponse(struct soap*, _tds__SetClientCertificateModeResponse*);
    @endcode

  - <tds:GetCACertificates> @ref _tds__GetCACertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCACertificates(struct soap*, _tds__GetCACertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCACertificates(struct soap*, _tds__GetCACertificates*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCACertificates(struct soap*, const char *URL, _tds__GetCACertificates*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCACertificates(struct soap*, const char *URL, _tds__GetCACertificates*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCACertificates(struct soap*, const char *URL, _tds__GetCACertificates*);
    soap_POST_recv__tds__GetCACertificates(struct soap*, _tds__GetCACertificates*);
    @endcode

  - <tds:GetCACertificatesResponse> @ref _tds__GetCACertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCACertificatesResponse(struct soap*, _tds__GetCACertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCACertificatesResponse(struct soap*, _tds__GetCACertificatesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCACertificatesResponse(struct soap*, const char *URL, _tds__GetCACertificatesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCACertificatesResponse(struct soap*, const char *URL, _tds__GetCACertificatesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCACertificatesResponse(struct soap*, const char *URL, _tds__GetCACertificatesResponse*);
    soap_POST_recv__tds__GetCACertificatesResponse(struct soap*, _tds__GetCACertificatesResponse*);
    @endcode

  - <tds:LoadCertificateWithPrivateKey> @ref _tds__LoadCertificateWithPrivateKey
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__LoadCertificateWithPrivateKey(struct soap*, const char *URL, _tds__LoadCertificateWithPrivateKey*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__LoadCertificateWithPrivateKey(struct soap*, const char *URL, _tds__LoadCertificateWithPrivateKey*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__LoadCertificateWithPrivateKey(struct soap*, const char *URL, _tds__LoadCertificateWithPrivateKey*);
    soap_POST_recv__tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey*);
    @endcode

  - <tds:LoadCertificateWithPrivateKeyResponse> @ref _tds__LoadCertificateWithPrivateKeyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, _tds__LoadCertificateWithPrivateKeyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, _tds__LoadCertificateWithPrivateKeyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, const char *URL, _tds__LoadCertificateWithPrivateKeyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, const char *URL, _tds__LoadCertificateWithPrivateKeyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, const char *URL, _tds__LoadCertificateWithPrivateKeyResponse*);
    soap_POST_recv__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, _tds__LoadCertificateWithPrivateKeyResponse*);
    @endcode

  - <tds:GetCertificateInformation> @ref _tds__GetCertificateInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCertificateInformation(struct soap*, const char *URL, _tds__GetCertificateInformation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCertificateInformation(struct soap*, const char *URL, _tds__GetCertificateInformation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCertificateInformation(struct soap*, const char *URL, _tds__GetCertificateInformation*);
    soap_POST_recv__tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation*);
    @endcode

  - <tds:GetCertificateInformationResponse> @ref _tds__GetCertificateInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificateInformationResponse(struct soap*, _tds__GetCertificateInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificateInformationResponse(struct soap*, _tds__GetCertificateInformationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetCertificateInformationResponse(struct soap*, const char *URL, _tds__GetCertificateInformationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetCertificateInformationResponse(struct soap*, const char *URL, _tds__GetCertificateInformationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetCertificateInformationResponse(struct soap*, const char *URL, _tds__GetCertificateInformationResponse*);
    soap_POST_recv__tds__GetCertificateInformationResponse(struct soap*, _tds__GetCertificateInformationResponse*);
    @endcode

  - <tds:LoadCACertificates> @ref _tds__LoadCACertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__LoadCACertificates(struct soap*, const char *URL, _tds__LoadCACertificates*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__LoadCACertificates(struct soap*, const char *URL, _tds__LoadCACertificates*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__LoadCACertificates(struct soap*, const char *URL, _tds__LoadCACertificates*);
    soap_POST_recv__tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates*);
    @endcode

  - <tds:LoadCACertificatesResponse> @ref _tds__LoadCACertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCACertificatesResponse(struct soap*, _tds__LoadCACertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCACertificatesResponse(struct soap*, _tds__LoadCACertificatesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__LoadCACertificatesResponse(struct soap*, const char *URL, _tds__LoadCACertificatesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__LoadCACertificatesResponse(struct soap*, const char *URL, _tds__LoadCACertificatesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__LoadCACertificatesResponse(struct soap*, const char *URL, _tds__LoadCACertificatesResponse*);
    soap_POST_recv__tds__LoadCACertificatesResponse(struct soap*, _tds__LoadCACertificatesResponse*);
    @endcode

  - <tds:CreateDot1XConfiguration> @ref _tds__CreateDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateDot1XConfiguration(struct soap*, const char *URL, _tds__CreateDot1XConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateDot1XConfiguration(struct soap*, const char *URL, _tds__CreateDot1XConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateDot1XConfiguration(struct soap*, const char *URL, _tds__CreateDot1XConfiguration*);
    soap_POST_recv__tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration*);
    @endcode

  - <tds:CreateDot1XConfigurationResponse> @ref _tds__CreateDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateDot1XConfigurationResponse(struct soap*, _tds__CreateDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateDot1XConfigurationResponse(struct soap*, _tds__CreateDot1XConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateDot1XConfigurationResponse(struct soap*, const char *URL, _tds__CreateDot1XConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateDot1XConfigurationResponse(struct soap*, const char *URL, _tds__CreateDot1XConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateDot1XConfigurationResponse(struct soap*, const char *URL, _tds__CreateDot1XConfigurationResponse*);
    soap_POST_recv__tds__CreateDot1XConfigurationResponse(struct soap*, _tds__CreateDot1XConfigurationResponse*);
    @endcode

  - <tds:SetDot1XConfiguration> @ref _tds__SetDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDot1XConfiguration(struct soap*, const char *URL, _tds__SetDot1XConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDot1XConfiguration(struct soap*, const char *URL, _tds__SetDot1XConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDot1XConfiguration(struct soap*, const char *URL, _tds__SetDot1XConfiguration*);
    soap_POST_recv__tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration*);
    @endcode

  - <tds:SetDot1XConfigurationResponse> @ref _tds__SetDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDot1XConfigurationResponse(struct soap*, _tds__SetDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDot1XConfigurationResponse(struct soap*, _tds__SetDot1XConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetDot1XConfigurationResponse(struct soap*, const char *URL, _tds__SetDot1XConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetDot1XConfigurationResponse(struct soap*, const char *URL, _tds__SetDot1XConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetDot1XConfigurationResponse(struct soap*, const char *URL, _tds__SetDot1XConfigurationResponse*);
    soap_POST_recv__tds__SetDot1XConfigurationResponse(struct soap*, _tds__SetDot1XConfigurationResponse*);
    @endcode

  - <tds:GetDot1XConfiguration> @ref _tds__GetDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot1XConfiguration(struct soap*, const char *URL, _tds__GetDot1XConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot1XConfiguration(struct soap*, const char *URL, _tds__GetDot1XConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot1XConfiguration(struct soap*, const char *URL, _tds__GetDot1XConfiguration*);
    soap_POST_recv__tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration*);
    @endcode

  - <tds:GetDot1XConfigurationResponse> @ref _tds__GetDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfigurationResponse(struct soap*, _tds__GetDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfigurationResponse(struct soap*, _tds__GetDot1XConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot1XConfigurationResponse(struct soap*, const char *URL, _tds__GetDot1XConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot1XConfigurationResponse(struct soap*, const char *URL, _tds__GetDot1XConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot1XConfigurationResponse(struct soap*, const char *URL, _tds__GetDot1XConfigurationResponse*);
    soap_POST_recv__tds__GetDot1XConfigurationResponse(struct soap*, _tds__GetDot1XConfigurationResponse*);
    @endcode

  - <tds:GetDot1XConfigurations> @ref _tds__GetDot1XConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot1XConfigurations(struct soap*, const char *URL, _tds__GetDot1XConfigurations*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot1XConfigurations(struct soap*, const char *URL, _tds__GetDot1XConfigurations*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot1XConfigurations(struct soap*, const char *URL, _tds__GetDot1XConfigurations*);
    soap_POST_recv__tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations*);
    @endcode

  - <tds:GetDot1XConfigurationsResponse> @ref _tds__GetDot1XConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfigurationsResponse(struct soap*, _tds__GetDot1XConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfigurationsResponse(struct soap*, _tds__GetDot1XConfigurationsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot1XConfigurationsResponse(struct soap*, const char *URL, _tds__GetDot1XConfigurationsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot1XConfigurationsResponse(struct soap*, const char *URL, _tds__GetDot1XConfigurationsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot1XConfigurationsResponse(struct soap*, const char *URL, _tds__GetDot1XConfigurationsResponse*);
    soap_POST_recv__tds__GetDot1XConfigurationsResponse(struct soap*, _tds__GetDot1XConfigurationsResponse*);
    @endcode

  - <tds:DeleteDot1XConfiguration> @ref _tds__DeleteDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteDot1XConfiguration(struct soap*, const char *URL, _tds__DeleteDot1XConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteDot1XConfiguration(struct soap*, const char *URL, _tds__DeleteDot1XConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteDot1XConfiguration(struct soap*, const char *URL, _tds__DeleteDot1XConfiguration*);
    soap_POST_recv__tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration*);
    @endcode

  - <tds:DeleteDot1XConfigurationResponse> @ref _tds__DeleteDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteDot1XConfigurationResponse(struct soap*, _tds__DeleteDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteDot1XConfigurationResponse(struct soap*, _tds__DeleteDot1XConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteDot1XConfigurationResponse(struct soap*, const char *URL, _tds__DeleteDot1XConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteDot1XConfigurationResponse(struct soap*, const char *URL, _tds__DeleteDot1XConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteDot1XConfigurationResponse(struct soap*, const char *URL, _tds__DeleteDot1XConfigurationResponse*);
    soap_POST_recv__tds__DeleteDot1XConfigurationResponse(struct soap*, _tds__DeleteDot1XConfigurationResponse*);
    @endcode

  - <tds:GetRelayOutputs> @ref _tds__GetRelayOutputs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetRelayOutputs(struct soap*, const char *URL, _tds__GetRelayOutputs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetRelayOutputs(struct soap*, const char *URL, _tds__GetRelayOutputs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetRelayOutputs(struct soap*, const char *URL, _tds__GetRelayOutputs*);
    soap_POST_recv__tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs*);
    @endcode

  - <tds:GetRelayOutputsResponse> @ref _tds__GetRelayOutputsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRelayOutputsResponse(struct soap*, _tds__GetRelayOutputsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRelayOutputsResponse(struct soap*, _tds__GetRelayOutputsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetRelayOutputsResponse(struct soap*, const char *URL, _tds__GetRelayOutputsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetRelayOutputsResponse(struct soap*, const char *URL, _tds__GetRelayOutputsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetRelayOutputsResponse(struct soap*, const char *URL, _tds__GetRelayOutputsResponse*);
    soap_POST_recv__tds__GetRelayOutputsResponse(struct soap*, _tds__GetRelayOutputsResponse*);
    @endcode

  - <tds:SetRelayOutputSettings> @ref _tds__SetRelayOutputSettings
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRelayOutputSettings(struct soap*, const char *URL, _tds__SetRelayOutputSettings*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRelayOutputSettings(struct soap*, const char *URL, _tds__SetRelayOutputSettings*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRelayOutputSettings(struct soap*, const char *URL, _tds__SetRelayOutputSettings*);
    soap_POST_recv__tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings*);
    @endcode

  - <tds:SetRelayOutputSettingsResponse> @ref _tds__SetRelayOutputSettingsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputSettingsResponse(struct soap*, _tds__SetRelayOutputSettingsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputSettingsResponse(struct soap*, _tds__SetRelayOutputSettingsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRelayOutputSettingsResponse(struct soap*, const char *URL, _tds__SetRelayOutputSettingsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRelayOutputSettingsResponse(struct soap*, const char *URL, _tds__SetRelayOutputSettingsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRelayOutputSettingsResponse(struct soap*, const char *URL, _tds__SetRelayOutputSettingsResponse*);
    soap_POST_recv__tds__SetRelayOutputSettingsResponse(struct soap*, _tds__SetRelayOutputSettingsResponse*);
    @endcode

  - <tds:SetRelayOutputState> @ref _tds__SetRelayOutputState
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRelayOutputState(struct soap*, const char *URL, _tds__SetRelayOutputState*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRelayOutputState(struct soap*, const char *URL, _tds__SetRelayOutputState*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRelayOutputState(struct soap*, const char *URL, _tds__SetRelayOutputState*);
    soap_POST_recv__tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState*);
    @endcode

  - <tds:SetRelayOutputStateResponse> @ref _tds__SetRelayOutputStateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputStateResponse(struct soap*, _tds__SetRelayOutputStateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputStateResponse(struct soap*, _tds__SetRelayOutputStateResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetRelayOutputStateResponse(struct soap*, const char *URL, _tds__SetRelayOutputStateResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetRelayOutputStateResponse(struct soap*, const char *URL, _tds__SetRelayOutputStateResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetRelayOutputStateResponse(struct soap*, const char *URL, _tds__SetRelayOutputStateResponse*);
    soap_POST_recv__tds__SetRelayOutputStateResponse(struct soap*, _tds__SetRelayOutputStateResponse*);
    @endcode

  - <tds:SendAuxiliaryCommand> @ref _tds__SendAuxiliaryCommand
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SendAuxiliaryCommand(struct soap*, const char *URL, _tds__SendAuxiliaryCommand*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SendAuxiliaryCommand(struct soap*, const char *URL, _tds__SendAuxiliaryCommand*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SendAuxiliaryCommand(struct soap*, const char *URL, _tds__SendAuxiliaryCommand*);
    soap_POST_recv__tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand*);
    @endcode

  - <tds:SendAuxiliaryCommandResponse> @ref _tds__SendAuxiliaryCommandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SendAuxiliaryCommandResponse(struct soap*, _tds__SendAuxiliaryCommandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SendAuxiliaryCommandResponse(struct soap*, _tds__SendAuxiliaryCommandResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SendAuxiliaryCommandResponse(struct soap*, const char *URL, _tds__SendAuxiliaryCommandResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SendAuxiliaryCommandResponse(struct soap*, const char *URL, _tds__SendAuxiliaryCommandResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SendAuxiliaryCommandResponse(struct soap*, const char *URL, _tds__SendAuxiliaryCommandResponse*);
    soap_POST_recv__tds__SendAuxiliaryCommandResponse(struct soap*, _tds__SendAuxiliaryCommandResponse*);
    @endcode

  - <tds:GetDot11Capabilities> @ref _tds__GetDot11Capabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot11Capabilities(struct soap*, const char *URL, _tds__GetDot11Capabilities*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot11Capabilities(struct soap*, const char *URL, _tds__GetDot11Capabilities*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot11Capabilities(struct soap*, const char *URL, _tds__GetDot11Capabilities*);
    soap_POST_recv__tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities*);
    @endcode

  - <tds:GetDot11CapabilitiesResponse> @ref _tds__GetDot11CapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11CapabilitiesResponse(struct soap*, _tds__GetDot11CapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11CapabilitiesResponse(struct soap*, _tds__GetDot11CapabilitiesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot11CapabilitiesResponse(struct soap*, const char *URL, _tds__GetDot11CapabilitiesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot11CapabilitiesResponse(struct soap*, const char *URL, _tds__GetDot11CapabilitiesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot11CapabilitiesResponse(struct soap*, const char *URL, _tds__GetDot11CapabilitiesResponse*);
    soap_POST_recv__tds__GetDot11CapabilitiesResponse(struct soap*, _tds__GetDot11CapabilitiesResponse*);
    @endcode

  - <tds:GetDot11Status> @ref _tds__GetDot11Status
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11Status(struct soap*, _tds__GetDot11Status*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11Status(struct soap*, _tds__GetDot11Status*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot11Status(struct soap*, const char *URL, _tds__GetDot11Status*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot11Status(struct soap*, const char *URL, _tds__GetDot11Status*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot11Status(struct soap*, const char *URL, _tds__GetDot11Status*);
    soap_POST_recv__tds__GetDot11Status(struct soap*, _tds__GetDot11Status*);
    @endcode

  - <tds:GetDot11StatusResponse> @ref _tds__GetDot11StatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11StatusResponse(struct soap*, _tds__GetDot11StatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11StatusResponse(struct soap*, _tds__GetDot11StatusResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetDot11StatusResponse(struct soap*, const char *URL, _tds__GetDot11StatusResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetDot11StatusResponse(struct soap*, const char *URL, _tds__GetDot11StatusResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetDot11StatusResponse(struct soap*, const char *URL, _tds__GetDot11StatusResponse*);
    soap_POST_recv__tds__GetDot11StatusResponse(struct soap*, _tds__GetDot11StatusResponse*);
    @endcode

  - <tds:ScanAvailableDot11Networks> @ref _tds__ScanAvailableDot11Networks
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__ScanAvailableDot11Networks(struct soap*, const char *URL, _tds__ScanAvailableDot11Networks*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__ScanAvailableDot11Networks(struct soap*, const char *URL, _tds__ScanAvailableDot11Networks*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__ScanAvailableDot11Networks(struct soap*, const char *URL, _tds__ScanAvailableDot11Networks*);
    soap_POST_recv__tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks*);
    @endcode

  - <tds:ScanAvailableDot11NetworksResponse> @ref _tds__ScanAvailableDot11NetworksResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__ScanAvailableDot11NetworksResponse(struct soap*, _tds__ScanAvailableDot11NetworksResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__ScanAvailableDot11NetworksResponse(struct soap*, _tds__ScanAvailableDot11NetworksResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__ScanAvailableDot11NetworksResponse(struct soap*, const char *URL, _tds__ScanAvailableDot11NetworksResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__ScanAvailableDot11NetworksResponse(struct soap*, const char *URL, _tds__ScanAvailableDot11NetworksResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__ScanAvailableDot11NetworksResponse(struct soap*, const char *URL, _tds__ScanAvailableDot11NetworksResponse*);
    soap_POST_recv__tds__ScanAvailableDot11NetworksResponse(struct soap*, _tds__ScanAvailableDot11NetworksResponse*);
    @endcode

  - <tds:GetSystemUris> @ref _tds__GetSystemUris
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemUris(struct soap*, _tds__GetSystemUris*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemUris(struct soap*, _tds__GetSystemUris*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemUris(struct soap*, const char *URL, _tds__GetSystemUris*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemUris(struct soap*, const char *URL, _tds__GetSystemUris*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemUris(struct soap*, const char *URL, _tds__GetSystemUris*);
    soap_POST_recv__tds__GetSystemUris(struct soap*, _tds__GetSystemUris*);
    @endcode

  - <tds:GetSystemUrisResponse> @ref _tds__GetSystemUrisResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemUrisResponse(struct soap*, _tds__GetSystemUrisResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemUrisResponse(struct soap*, _tds__GetSystemUrisResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetSystemUrisResponse(struct soap*, const char *URL, _tds__GetSystemUrisResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetSystemUrisResponse(struct soap*, const char *URL, _tds__GetSystemUrisResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetSystemUrisResponse(struct soap*, const char *URL, _tds__GetSystemUrisResponse*);
    soap_POST_recv__tds__GetSystemUrisResponse(struct soap*, _tds__GetSystemUrisResponse*);
    @endcode

  - <tds:StartFirmwareUpgrade> @ref _tds__StartFirmwareUpgrade
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__StartFirmwareUpgrade(struct soap*, const char *URL, _tds__StartFirmwareUpgrade*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__StartFirmwareUpgrade(struct soap*, const char *URL, _tds__StartFirmwareUpgrade*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__StartFirmwareUpgrade(struct soap*, const char *URL, _tds__StartFirmwareUpgrade*);
    soap_POST_recv__tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade*);
    @endcode

  - <tds:StartFirmwareUpgradeResponse> @ref _tds__StartFirmwareUpgradeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartFirmwareUpgradeResponse(struct soap*, _tds__StartFirmwareUpgradeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartFirmwareUpgradeResponse(struct soap*, _tds__StartFirmwareUpgradeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__StartFirmwareUpgradeResponse(struct soap*, const char *URL, _tds__StartFirmwareUpgradeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__StartFirmwareUpgradeResponse(struct soap*, const char *URL, _tds__StartFirmwareUpgradeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__StartFirmwareUpgradeResponse(struct soap*, const char *URL, _tds__StartFirmwareUpgradeResponse*);
    soap_POST_recv__tds__StartFirmwareUpgradeResponse(struct soap*, _tds__StartFirmwareUpgradeResponse*);
    @endcode

  - <tds:StartSystemRestore> @ref _tds__StartSystemRestore
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__StartSystemRestore(struct soap*, const char *URL, _tds__StartSystemRestore*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__StartSystemRestore(struct soap*, const char *URL, _tds__StartSystemRestore*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__StartSystemRestore(struct soap*, const char *URL, _tds__StartSystemRestore*);
    soap_POST_recv__tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore*);
    @endcode

  - <tds:StartSystemRestoreResponse> @ref _tds__StartSystemRestoreResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartSystemRestoreResponse(struct soap*, _tds__StartSystemRestoreResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartSystemRestoreResponse(struct soap*, _tds__StartSystemRestoreResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__StartSystemRestoreResponse(struct soap*, const char *URL, _tds__StartSystemRestoreResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__StartSystemRestoreResponse(struct soap*, const char *URL, _tds__StartSystemRestoreResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__StartSystemRestoreResponse(struct soap*, const char *URL, _tds__StartSystemRestoreResponse*);
    soap_POST_recv__tds__StartSystemRestoreResponse(struct soap*, _tds__StartSystemRestoreResponse*);
    @endcode

  - <tds:GetStorageConfigurations> @ref _tds__GetStorageConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetStorageConfigurations(struct soap*, const char *URL, _tds__GetStorageConfigurations*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetStorageConfigurations(struct soap*, const char *URL, _tds__GetStorageConfigurations*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetStorageConfigurations(struct soap*, const char *URL, _tds__GetStorageConfigurations*);
    soap_POST_recv__tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations*);
    @endcode

  - <tds:GetStorageConfigurationsResponse> @ref _tds__GetStorageConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfigurationsResponse(struct soap*, _tds__GetStorageConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfigurationsResponse(struct soap*, _tds__GetStorageConfigurationsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetStorageConfigurationsResponse(struct soap*, const char *URL, _tds__GetStorageConfigurationsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetStorageConfigurationsResponse(struct soap*, const char *URL, _tds__GetStorageConfigurationsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetStorageConfigurationsResponse(struct soap*, const char *URL, _tds__GetStorageConfigurationsResponse*);
    soap_POST_recv__tds__GetStorageConfigurationsResponse(struct soap*, _tds__GetStorageConfigurationsResponse*);
    @endcode

  - <tds:CreateStorageConfiguration> @ref _tds__CreateStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateStorageConfiguration(struct soap*, const char *URL, _tds__CreateStorageConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateStorageConfiguration(struct soap*, const char *URL, _tds__CreateStorageConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateStorageConfiguration(struct soap*, const char *URL, _tds__CreateStorageConfiguration*);
    soap_POST_recv__tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration*);
    @endcode

  - <tds:CreateStorageConfigurationResponse> @ref _tds__CreateStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateStorageConfigurationResponse(struct soap*, _tds__CreateStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateStorageConfigurationResponse(struct soap*, _tds__CreateStorageConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__CreateStorageConfigurationResponse(struct soap*, const char *URL, _tds__CreateStorageConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__CreateStorageConfigurationResponse(struct soap*, const char *URL, _tds__CreateStorageConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__CreateStorageConfigurationResponse(struct soap*, const char *URL, _tds__CreateStorageConfigurationResponse*);
    soap_POST_recv__tds__CreateStorageConfigurationResponse(struct soap*, _tds__CreateStorageConfigurationResponse*);
    @endcode

  - <tds:GetStorageConfiguration> @ref _tds__GetStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetStorageConfiguration(struct soap*, const char *URL, _tds__GetStorageConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetStorageConfiguration(struct soap*, const char *URL, _tds__GetStorageConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetStorageConfiguration(struct soap*, const char *URL, _tds__GetStorageConfiguration*);
    soap_POST_recv__tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration*);
    @endcode

  - <tds:GetStorageConfigurationResponse> @ref _tds__GetStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfigurationResponse(struct soap*, _tds__GetStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfigurationResponse(struct soap*, _tds__GetStorageConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetStorageConfigurationResponse(struct soap*, const char *URL, _tds__GetStorageConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetStorageConfigurationResponse(struct soap*, const char *URL, _tds__GetStorageConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetStorageConfigurationResponse(struct soap*, const char *URL, _tds__GetStorageConfigurationResponse*);
    soap_POST_recv__tds__GetStorageConfigurationResponse(struct soap*, _tds__GetStorageConfigurationResponse*);
    @endcode

  - <tds:SetStorageConfiguration> @ref _tds__SetStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetStorageConfiguration(struct soap*, const char *URL, _tds__SetStorageConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetStorageConfiguration(struct soap*, const char *URL, _tds__SetStorageConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetStorageConfiguration(struct soap*, const char *URL, _tds__SetStorageConfiguration*);
    soap_POST_recv__tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration*);
    @endcode

  - <tds:SetStorageConfigurationResponse> @ref _tds__SetStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetStorageConfigurationResponse(struct soap*, _tds__SetStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetStorageConfigurationResponse(struct soap*, _tds__SetStorageConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetStorageConfigurationResponse(struct soap*, const char *URL, _tds__SetStorageConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetStorageConfigurationResponse(struct soap*, const char *URL, _tds__SetStorageConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetStorageConfigurationResponse(struct soap*, const char *URL, _tds__SetStorageConfigurationResponse*);
    soap_POST_recv__tds__SetStorageConfigurationResponse(struct soap*, _tds__SetStorageConfigurationResponse*);
    @endcode

  - <tds:DeleteStorageConfiguration> @ref _tds__DeleteStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteStorageConfiguration(struct soap*, const char *URL, _tds__DeleteStorageConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteStorageConfiguration(struct soap*, const char *URL, _tds__DeleteStorageConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteStorageConfiguration(struct soap*, const char *URL, _tds__DeleteStorageConfiguration*);
    soap_POST_recv__tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration*);
    @endcode

  - <tds:DeleteStorageConfigurationResponse> @ref _tds__DeleteStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteStorageConfigurationResponse(struct soap*, _tds__DeleteStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteStorageConfigurationResponse(struct soap*, _tds__DeleteStorageConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteStorageConfigurationResponse(struct soap*, const char *URL, _tds__DeleteStorageConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteStorageConfigurationResponse(struct soap*, const char *URL, _tds__DeleteStorageConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteStorageConfigurationResponse(struct soap*, const char *URL, _tds__DeleteStorageConfigurationResponse*);
    soap_POST_recv__tds__DeleteStorageConfigurationResponse(struct soap*, _tds__DeleteStorageConfigurationResponse*);
    @endcode

  - <tds:GetGeoLocation> @ref _tds__GetGeoLocation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetGeoLocation(struct soap*, const char *URL, _tds__GetGeoLocation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetGeoLocation(struct soap*, const char *URL, _tds__GetGeoLocation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetGeoLocation(struct soap*, const char *URL, _tds__GetGeoLocation*);
    soap_POST_recv__tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation*);
    @endcode

  - <tds:GetGeoLocationResponse> @ref _tds__GetGeoLocationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetGeoLocationResponse(struct soap*, _tds__GetGeoLocationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetGeoLocationResponse(struct soap*, _tds__GetGeoLocationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__GetGeoLocationResponse(struct soap*, const char *URL, _tds__GetGeoLocationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__GetGeoLocationResponse(struct soap*, const char *URL, _tds__GetGeoLocationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__GetGeoLocationResponse(struct soap*, const char *URL, _tds__GetGeoLocationResponse*);
    soap_POST_recv__tds__GetGeoLocationResponse(struct soap*, _tds__GetGeoLocationResponse*);
    @endcode

  - <tds:SetGeoLocation> @ref _tds__SetGeoLocation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetGeoLocation(struct soap*, const char *URL, _tds__SetGeoLocation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetGeoLocation(struct soap*, const char *URL, _tds__SetGeoLocation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetGeoLocation(struct soap*, const char *URL, _tds__SetGeoLocation*);
    soap_POST_recv__tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation*);
    @endcode

  - <tds:SetGeoLocationResponse> @ref _tds__SetGeoLocationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetGeoLocationResponse(struct soap*, _tds__SetGeoLocationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetGeoLocationResponse(struct soap*, _tds__SetGeoLocationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__SetGeoLocationResponse(struct soap*, const char *URL, _tds__SetGeoLocationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__SetGeoLocationResponse(struct soap*, const char *URL, _tds__SetGeoLocationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__SetGeoLocationResponse(struct soap*, const char *URL, _tds__SetGeoLocationResponse*);
    soap_POST_recv__tds__SetGeoLocationResponse(struct soap*, _tds__SetGeoLocationResponse*);
    @endcode

  - <tds:DeleteGeoLocation> @ref _tds__DeleteGeoLocation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteGeoLocation(struct soap*, const char *URL, _tds__DeleteGeoLocation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteGeoLocation(struct soap*, const char *URL, _tds__DeleteGeoLocation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteGeoLocation(struct soap*, const char *URL, _tds__DeleteGeoLocation*);
    soap_POST_recv__tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation*);
    @endcode

  - <tds:DeleteGeoLocationResponse> @ref _tds__DeleteGeoLocationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteGeoLocationResponse(struct soap*, _tds__DeleteGeoLocationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteGeoLocationResponse(struct soap*, _tds__DeleteGeoLocationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tds__DeleteGeoLocationResponse(struct soap*, const char *URL, _tds__DeleteGeoLocationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tds__DeleteGeoLocationResponse(struct soap*, const char *URL, _tds__DeleteGeoLocationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tds__DeleteGeoLocationResponse(struct soap*, const char *URL, _tds__DeleteGeoLocationResponse*);
    soap_POST_recv__tds__DeleteGeoLocationResponse(struct soap*, _tds__DeleteGeoLocationResponse*);
    @endcode

@section tt Top-level root elements of schema "http://www.onvif.org/ver10/schema"

  - <tt:VideoSourceConfiguration> @ref _tt__VideoSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__VideoSourceConfiguration(struct soap*, _tt__VideoSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__VideoSourceConfiguration(struct soap*, _tt__VideoSourceConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__VideoSourceConfiguration(struct soap*, const char *URL, _tt__VideoSourceConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__VideoSourceConfiguration(struct soap*, const char *URL, _tt__VideoSourceConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__VideoSourceConfiguration(struct soap*, const char *URL, _tt__VideoSourceConfiguration*);
    soap_POST_recv__tt__VideoSourceConfiguration(struct soap*, _tt__VideoSourceConfiguration*);
    @endcode

  - <tt:AudioSourceConfiguration> @ref _tt__AudioSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__AudioSourceConfiguration(struct soap*, _tt__AudioSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__AudioSourceConfiguration(struct soap*, _tt__AudioSourceConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__AudioSourceConfiguration(struct soap*, const char *URL, _tt__AudioSourceConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__AudioSourceConfiguration(struct soap*, const char *URL, _tt__AudioSourceConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__AudioSourceConfiguration(struct soap*, const char *URL, _tt__AudioSourceConfiguration*);
    soap_POST_recv__tt__AudioSourceConfiguration(struct soap*, _tt__AudioSourceConfiguration*);
    @endcode

  - <tt:VideoEncoderConfiguration> @ref _tt__VideoEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__VideoEncoderConfiguration(struct soap*, _tt__VideoEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__VideoEncoderConfiguration(struct soap*, _tt__VideoEncoderConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__VideoEncoderConfiguration(struct soap*, const char *URL, _tt__VideoEncoderConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__VideoEncoderConfiguration(struct soap*, const char *URL, _tt__VideoEncoderConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__VideoEncoderConfiguration(struct soap*, const char *URL, _tt__VideoEncoderConfiguration*);
    soap_POST_recv__tt__VideoEncoderConfiguration(struct soap*, _tt__VideoEncoderConfiguration*);
    @endcode

  - <tt:AudioEncoderConfiguration> @ref _tt__AudioEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__AudioEncoderConfiguration(struct soap*, _tt__AudioEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__AudioEncoderConfiguration(struct soap*, _tt__AudioEncoderConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__AudioEncoderConfiguration(struct soap*, const char *URL, _tt__AudioEncoderConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__AudioEncoderConfiguration(struct soap*, const char *URL, _tt__AudioEncoderConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__AudioEncoderConfiguration(struct soap*, const char *URL, _tt__AudioEncoderConfiguration*);
    soap_POST_recv__tt__AudioEncoderConfiguration(struct soap*, _tt__AudioEncoderConfiguration*);
    @endcode

  - <tt:VideoAnalyticsConfiguration> @ref _tt__VideoAnalyticsConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__VideoAnalyticsConfiguration(struct soap*, _tt__VideoAnalyticsConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__VideoAnalyticsConfiguration(struct soap*, _tt__VideoAnalyticsConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__VideoAnalyticsConfiguration(struct soap*, const char *URL, _tt__VideoAnalyticsConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__VideoAnalyticsConfiguration(struct soap*, const char *URL, _tt__VideoAnalyticsConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__VideoAnalyticsConfiguration(struct soap*, const char *URL, _tt__VideoAnalyticsConfiguration*);
    soap_POST_recv__tt__VideoAnalyticsConfiguration(struct soap*, _tt__VideoAnalyticsConfiguration*);
    @endcode

  - <tt:PTZConfiguration> @ref _tt__PTZConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__PTZConfiguration(struct soap*, _tt__PTZConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__PTZConfiguration(struct soap*, _tt__PTZConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__PTZConfiguration(struct soap*, const char *URL, _tt__PTZConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__PTZConfiguration(struct soap*, const char *URL, _tt__PTZConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__PTZConfiguration(struct soap*, const char *URL, _tt__PTZConfiguration*);
    soap_POST_recv__tt__PTZConfiguration(struct soap*, _tt__PTZConfiguration*);
    @endcode

  - <tt:MetadataConfiguration> @ref _tt__MetadataConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__MetadataConfiguration(struct soap*, _tt__MetadataConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__MetadataConfiguration(struct soap*, _tt__MetadataConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__MetadataConfiguration(struct soap*, const char *URL, _tt__MetadataConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__MetadataConfiguration(struct soap*, const char *URL, _tt__MetadataConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__MetadataConfiguration(struct soap*, const char *URL, _tt__MetadataConfiguration*);
    soap_POST_recv__tt__MetadataConfiguration(struct soap*, _tt__MetadataConfiguration*);
    @endcode

  - <tt:AudioOutputConfiguration> @ref _tt__AudioOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__AudioOutputConfiguration(struct soap*, _tt__AudioOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__AudioOutputConfiguration(struct soap*, _tt__AudioOutputConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__AudioOutputConfiguration(struct soap*, const char *URL, _tt__AudioOutputConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__AudioOutputConfiguration(struct soap*, const char *URL, _tt__AudioOutputConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__AudioOutputConfiguration(struct soap*, const char *URL, _tt__AudioOutputConfiguration*);
    soap_POST_recv__tt__AudioOutputConfiguration(struct soap*, _tt__AudioOutputConfiguration*);
    @endcode

  - <tt:AudioDecoderConfiguration> @ref _tt__AudioDecoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__AudioDecoderConfiguration(struct soap*, _tt__AudioDecoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__AudioDecoderConfiguration(struct soap*, _tt__AudioDecoderConfiguration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__AudioDecoderConfiguration(struct soap*, const char *URL, _tt__AudioDecoderConfiguration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__AudioDecoderConfiguration(struct soap*, const char *URL, _tt__AudioDecoderConfiguration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__AudioDecoderConfiguration(struct soap*, const char *URL, _tt__AudioDecoderConfiguration*);
    soap_POST_recv__tt__AudioDecoderConfiguration(struct soap*, _tt__AudioDecoderConfiguration*);
    @endcode

  - <tt:Message> @ref _tt__Message
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__Message(struct soap*, _tt__Message*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__Message(struct soap*, _tt__Message*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__Message(struct soap*, const char *URL, _tt__Message*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__Message(struct soap*, const char *URL, _tt__Message*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__Message(struct soap*, const char *URL, _tt__Message*);
    soap_POST_recv__tt__Message(struct soap*, _tt__Message*);
    @endcode

  - <tt:Polyline> @ref _tt__Polyline
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__Polyline(struct soap*, _tt__Polyline*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__Polyline(struct soap*, _tt__Polyline*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__Polyline(struct soap*, const char *URL, _tt__Polyline*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__Polyline(struct soap*, const char *URL, _tt__Polyline*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__Polyline(struct soap*, const char *URL, _tt__Polyline*);
    soap_POST_recv__tt__Polyline(struct soap*, _tt__Polyline*);
    @endcode

  - <tt:Polygon> @ref _tt__Polygon
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__Polygon(struct soap*, _tt__Polygon*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__Polygon(struct soap*, _tt__Polygon*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tt__Polygon(struct soap*, const char *URL, _tt__Polygon*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tt__Polygon(struct soap*, const char *URL, _tt__Polygon*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tt__Polygon(struct soap*, const char *URL, _tt__Polygon*);
    soap_POST_recv__tt__Polygon(struct soap*, _tt__Polygon*);
    @endcode

@section wsnt Top-level root elements of schema "http://docs.oasis-open.org/wsn/b-2"

  - <wsnt:TopicExpression> @ref _wsnt__TopicExpression
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__TopicExpression(struct soap*, _wsnt__TopicExpression*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__TopicExpression(struct soap*, _wsnt__TopicExpression*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__TopicExpression(struct soap*, const char *URL, _wsnt__TopicExpression*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__TopicExpression(struct soap*, const char *URL, _wsnt__TopicExpression*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__TopicExpression(struct soap*, const char *URL, _wsnt__TopicExpression*);
    soap_POST_recv__wsnt__TopicExpression(struct soap*, _wsnt__TopicExpression*);
    @endcode

  - <wsnt:FixedTopicSet> @ref _wsnt__FixedTopicSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__FixedTopicSet(struct soap*, _wsnt__FixedTopicSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__FixedTopicSet(struct soap*, _wsnt__FixedTopicSet*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__FixedTopicSet(struct soap*, const char *URL, _wsnt__FixedTopicSet*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__FixedTopicSet(struct soap*, const char *URL, _wsnt__FixedTopicSet*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__FixedTopicSet(struct soap*, const char *URL, _wsnt__FixedTopicSet*);
    soap_POST_recv__wsnt__FixedTopicSet(struct soap*, _wsnt__FixedTopicSet*);
    @endcode

  - <wsnt:TopicExpressionDialect> @ref _wsnt__TopicExpressionDialect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__TopicExpressionDialect(struct soap*, _wsnt__TopicExpressionDialect*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__TopicExpressionDialect(struct soap*, _wsnt__TopicExpressionDialect*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__TopicExpressionDialect(struct soap*, const char *URL, _wsnt__TopicExpressionDialect*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__TopicExpressionDialect(struct soap*, const char *URL, _wsnt__TopicExpressionDialect*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__TopicExpressionDialect(struct soap*, const char *URL, _wsnt__TopicExpressionDialect*);
    soap_POST_recv__wsnt__TopicExpressionDialect(struct soap*, _wsnt__TopicExpressionDialect*);
    @endcode

  - <wsnt:NotificationProducerRP> @ref _wsnt__NotificationProducerRP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__NotificationProducerRP(struct soap*, const char *URL, _wsnt__NotificationProducerRP*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__NotificationProducerRP(struct soap*, const char *URL, _wsnt__NotificationProducerRP*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__NotificationProducerRP(struct soap*, const char *URL, _wsnt__NotificationProducerRP*);
    soap_POST_recv__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP*);
    @endcode

  - <wsnt:ConsumerReference> @ref _wsnt__ConsumerReference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ConsumerReference(struct soap*, _wsnt__ConsumerReference*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ConsumerReference(struct soap*, _wsnt__ConsumerReference*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__ConsumerReference(struct soap*, const char *URL, _wsnt__ConsumerReference*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__ConsumerReference(struct soap*, const char *URL, _wsnt__ConsumerReference*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__ConsumerReference(struct soap*, const char *URL, _wsnt__ConsumerReference*);
    soap_POST_recv__wsnt__ConsumerReference(struct soap*, _wsnt__ConsumerReference*);
    @endcode

  - <wsnt:Filter> @ref _wsnt__Filter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Filter(struct soap*, _wsnt__Filter*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Filter(struct soap*, _wsnt__Filter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__Filter(struct soap*, const char *URL, _wsnt__Filter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__Filter(struct soap*, const char *URL, _wsnt__Filter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__Filter(struct soap*, const char *URL, _wsnt__Filter*);
    soap_POST_recv__wsnt__Filter(struct soap*, _wsnt__Filter*);
    @endcode

  - <wsnt:SubscriptionPolicy> @ref _wsnt__SubscriptionPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__SubscriptionPolicy(struct soap*, _wsnt__SubscriptionPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__SubscriptionPolicy(struct soap*, _wsnt__SubscriptionPolicy*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__SubscriptionPolicy(struct soap*, const char *URL, _wsnt__SubscriptionPolicy*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__SubscriptionPolicy(struct soap*, const char *URL, _wsnt__SubscriptionPolicy*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__SubscriptionPolicy(struct soap*, const char *URL, _wsnt__SubscriptionPolicy*);
    soap_POST_recv__wsnt__SubscriptionPolicy(struct soap*, _wsnt__SubscriptionPolicy*);
    @endcode

  - <wsnt:CreationTime> @ref _wsnt__CreationTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__CreationTime(struct soap*, _wsnt__CreationTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__CreationTime(struct soap*, _wsnt__CreationTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__CreationTime(struct soap*, const char *URL, _wsnt__CreationTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__CreationTime(struct soap*, const char *URL, _wsnt__CreationTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__CreationTime(struct soap*, const char *URL, _wsnt__CreationTime*);
    soap_POST_recv__wsnt__CreationTime(struct soap*, _wsnt__CreationTime*);
    @endcode

  - <wsnt:SubscriptionManagerRP> @ref _wsnt__SubscriptionManagerRP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__SubscriptionManagerRP(struct soap*, const char *URL, _wsnt__SubscriptionManagerRP*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__SubscriptionManagerRP(struct soap*, const char *URL, _wsnt__SubscriptionManagerRP*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__SubscriptionManagerRP(struct soap*, const char *URL, _wsnt__SubscriptionManagerRP*);
    soap_POST_recv__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP*);
    @endcode

  - <wsnt:SubscriptionReference> @ref _wsnt__SubscriptionReference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__SubscriptionReference(struct soap*, _wsnt__SubscriptionReference*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__SubscriptionReference(struct soap*, _wsnt__SubscriptionReference*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__SubscriptionReference(struct soap*, const char *URL, _wsnt__SubscriptionReference*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__SubscriptionReference(struct soap*, const char *URL, _wsnt__SubscriptionReference*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__SubscriptionReference(struct soap*, const char *URL, _wsnt__SubscriptionReference*);
    soap_POST_recv__wsnt__SubscriptionReference(struct soap*, _wsnt__SubscriptionReference*);
    @endcode

  - <wsnt:Topic> @ref _wsnt__Topic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Topic(struct soap*, _wsnt__Topic*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Topic(struct soap*, _wsnt__Topic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__Topic(struct soap*, const char *URL, _wsnt__Topic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__Topic(struct soap*, const char *URL, _wsnt__Topic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__Topic(struct soap*, const char *URL, _wsnt__Topic*);
    soap_POST_recv__wsnt__Topic(struct soap*, _wsnt__Topic*);
    @endcode

  - <wsnt:ProducerReference> @ref _wsnt__ProducerReference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ProducerReference(struct soap*, _wsnt__ProducerReference*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ProducerReference(struct soap*, _wsnt__ProducerReference*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__ProducerReference(struct soap*, const char *URL, _wsnt__ProducerReference*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__ProducerReference(struct soap*, const char *URL, _wsnt__ProducerReference*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__ProducerReference(struct soap*, const char *URL, _wsnt__ProducerReference*);
    soap_POST_recv__wsnt__ProducerReference(struct soap*, _wsnt__ProducerReference*);
    @endcode

  - <wsnt:NotificationMessage> @ref _wsnt__NotificationMessage
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__NotificationMessage(struct soap*, _wsnt__NotificationMessage*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__NotificationMessage(struct soap*, _wsnt__NotificationMessage*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__NotificationMessage(struct soap*, const char *URL, _wsnt__NotificationMessage*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__NotificationMessage(struct soap*, const char *URL, _wsnt__NotificationMessage*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__NotificationMessage(struct soap*, const char *URL, _wsnt__NotificationMessage*);
    soap_POST_recv__wsnt__NotificationMessage(struct soap*, _wsnt__NotificationMessage*);
    @endcode

  - <wsnt:Notify> @ref _wsnt__Notify
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Notify(struct soap*, _wsnt__Notify*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Notify(struct soap*, _wsnt__Notify*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__Notify(struct soap*, const char *URL, _wsnt__Notify*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__Notify(struct soap*, const char *URL, _wsnt__Notify*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__Notify(struct soap*, const char *URL, _wsnt__Notify*);
    soap_POST_recv__wsnt__Notify(struct soap*, _wsnt__Notify*);
    @endcode

  - <wsnt:CurrentTime> @ref _wsnt__CurrentTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__CurrentTime(struct soap*, _wsnt__CurrentTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__CurrentTime(struct soap*, _wsnt__CurrentTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__CurrentTime(struct soap*, const char *URL, _wsnt__CurrentTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__CurrentTime(struct soap*, const char *URL, _wsnt__CurrentTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__CurrentTime(struct soap*, const char *URL, _wsnt__CurrentTime*);
    soap_POST_recv__wsnt__CurrentTime(struct soap*, _wsnt__CurrentTime*);
    @endcode

  - <wsnt:TerminationTime> @ref _wsnt__TerminationTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__TerminationTime(struct soap*, _wsnt__TerminationTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__TerminationTime(struct soap*, _wsnt__TerminationTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__TerminationTime(struct soap*, const char *URL, _wsnt__TerminationTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__TerminationTime(struct soap*, const char *URL, _wsnt__TerminationTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__TerminationTime(struct soap*, const char *URL, _wsnt__TerminationTime*);
    soap_POST_recv__wsnt__TerminationTime(struct soap*, _wsnt__TerminationTime*);
    @endcode

  - <wsnt:ProducerProperties> @ref _wsnt__ProducerProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ProducerProperties(struct soap*, _wsnt__ProducerProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ProducerProperties(struct soap*, _wsnt__ProducerProperties*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__ProducerProperties(struct soap*, const char *URL, _wsnt__ProducerProperties*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__ProducerProperties(struct soap*, const char *URL, _wsnt__ProducerProperties*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__ProducerProperties(struct soap*, const char *URL, _wsnt__ProducerProperties*);
    soap_POST_recv__wsnt__ProducerProperties(struct soap*, _wsnt__ProducerProperties*);
    @endcode

  - <wsnt:MessageContent> @ref _wsnt__MessageContent
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__MessageContent(struct soap*, _wsnt__MessageContent*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__MessageContent(struct soap*, _wsnt__MessageContent*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__MessageContent(struct soap*, const char *URL, _wsnt__MessageContent*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__MessageContent(struct soap*, const char *URL, _wsnt__MessageContent*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__MessageContent(struct soap*, const char *URL, _wsnt__MessageContent*);
    soap_POST_recv__wsnt__MessageContent(struct soap*, _wsnt__MessageContent*);
    @endcode

  - <wsnt:UseRaw> @ref _wsnt__UseRaw
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UseRaw(struct soap*, _wsnt__UseRaw*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UseRaw(struct soap*, _wsnt__UseRaw*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UseRaw(struct soap*, const char *URL, _wsnt__UseRaw*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UseRaw(struct soap*, const char *URL, _wsnt__UseRaw*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UseRaw(struct soap*, const char *URL, _wsnt__UseRaw*);
    soap_POST_recv__wsnt__UseRaw(struct soap*, _wsnt__UseRaw*);
    @endcode

  - <wsnt:Subscribe> @ref _wsnt__Subscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Subscribe(struct soap*, _wsnt__Subscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Subscribe(struct soap*, _wsnt__Subscribe*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__Subscribe(struct soap*, const char *URL, _wsnt__Subscribe*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__Subscribe(struct soap*, const char *URL, _wsnt__Subscribe*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__Subscribe(struct soap*, const char *URL, _wsnt__Subscribe*);
    soap_POST_recv__wsnt__Subscribe(struct soap*, _wsnt__Subscribe*);
    @endcode

  - <wsnt:SubscribeResponse> @ref _wsnt__SubscribeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__SubscribeResponse(struct soap*, const char *URL, _wsnt__SubscribeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__SubscribeResponse(struct soap*, const char *URL, _wsnt__SubscribeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__SubscribeResponse(struct soap*, const char *URL, _wsnt__SubscribeResponse*);
    soap_POST_recv__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse*);
    @endcode

  - <wsnt:GetCurrentMessage> @ref _wsnt__GetCurrentMessage
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__GetCurrentMessage(struct soap*, const char *URL, _wsnt__GetCurrentMessage*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__GetCurrentMessage(struct soap*, const char *URL, _wsnt__GetCurrentMessage*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__GetCurrentMessage(struct soap*, const char *URL, _wsnt__GetCurrentMessage*);
    soap_POST_recv__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage*);
    @endcode

  - <wsnt:GetCurrentMessageResponse> @ref _wsnt__GetCurrentMessageResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__GetCurrentMessageResponse(struct soap*, const char *URL, _wsnt__GetCurrentMessageResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__GetCurrentMessageResponse(struct soap*, const char *URL, _wsnt__GetCurrentMessageResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__GetCurrentMessageResponse(struct soap*, const char *URL, _wsnt__GetCurrentMessageResponse*);
    soap_POST_recv__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse*);
    @endcode

  - <wsnt:SubscribeCreationFailedFault> @ref _wsnt__SubscribeCreationFailedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__SubscribeCreationFailedFault(struct soap*, _wsnt__SubscribeCreationFailedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__SubscribeCreationFailedFault(struct soap*, _wsnt__SubscribeCreationFailedFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__SubscribeCreationFailedFault(struct soap*, const char *URL, _wsnt__SubscribeCreationFailedFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__SubscribeCreationFailedFault(struct soap*, const char *URL, _wsnt__SubscribeCreationFailedFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__SubscribeCreationFailedFault(struct soap*, const char *URL, _wsnt__SubscribeCreationFailedFault*);
    soap_POST_recv__wsnt__SubscribeCreationFailedFault(struct soap*, _wsnt__SubscribeCreationFailedFault*);
    @endcode

  - <wsnt:InvalidFilterFault> @ref _wsnt__InvalidFilterFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__InvalidFilterFault(struct soap*, _wsnt__InvalidFilterFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__InvalidFilterFault(struct soap*, _wsnt__InvalidFilterFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__InvalidFilterFault(struct soap*, const char *URL, _wsnt__InvalidFilterFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__InvalidFilterFault(struct soap*, const char *URL, _wsnt__InvalidFilterFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__InvalidFilterFault(struct soap*, const char *URL, _wsnt__InvalidFilterFault*);
    soap_POST_recv__wsnt__InvalidFilterFault(struct soap*, _wsnt__InvalidFilterFault*);
    @endcode

  - <wsnt:TopicExpressionDialectUnknownFault> @ref _wsnt__TopicExpressionDialectUnknownFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__TopicExpressionDialectUnknownFault(struct soap*, _wsnt__TopicExpressionDialectUnknownFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__TopicExpressionDialectUnknownFault(struct soap*, _wsnt__TopicExpressionDialectUnknownFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__TopicExpressionDialectUnknownFault(struct soap*, const char *URL, _wsnt__TopicExpressionDialectUnknownFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__TopicExpressionDialectUnknownFault(struct soap*, const char *URL, _wsnt__TopicExpressionDialectUnknownFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__TopicExpressionDialectUnknownFault(struct soap*, const char *URL, _wsnt__TopicExpressionDialectUnknownFault*);
    soap_POST_recv__wsnt__TopicExpressionDialectUnknownFault(struct soap*, _wsnt__TopicExpressionDialectUnknownFault*);
    @endcode

  - <wsnt:InvalidTopicExpressionFault> @ref _wsnt__InvalidTopicExpressionFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__InvalidTopicExpressionFault(struct soap*, _wsnt__InvalidTopicExpressionFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__InvalidTopicExpressionFault(struct soap*, _wsnt__InvalidTopicExpressionFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__InvalidTopicExpressionFault(struct soap*, const char *URL, _wsnt__InvalidTopicExpressionFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__InvalidTopicExpressionFault(struct soap*, const char *URL, _wsnt__InvalidTopicExpressionFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__InvalidTopicExpressionFault(struct soap*, const char *URL, _wsnt__InvalidTopicExpressionFault*);
    soap_POST_recv__wsnt__InvalidTopicExpressionFault(struct soap*, _wsnt__InvalidTopicExpressionFault*);
    @endcode

  - <wsnt:TopicNotSupportedFault> @ref _wsnt__TopicNotSupportedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__TopicNotSupportedFault(struct soap*, _wsnt__TopicNotSupportedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__TopicNotSupportedFault(struct soap*, _wsnt__TopicNotSupportedFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__TopicNotSupportedFault(struct soap*, const char *URL, _wsnt__TopicNotSupportedFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__TopicNotSupportedFault(struct soap*, const char *URL, _wsnt__TopicNotSupportedFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__TopicNotSupportedFault(struct soap*, const char *URL, _wsnt__TopicNotSupportedFault*);
    soap_POST_recv__wsnt__TopicNotSupportedFault(struct soap*, _wsnt__TopicNotSupportedFault*);
    @endcode

  - <wsnt:MultipleTopicsSpecifiedFault> @ref _wsnt__MultipleTopicsSpecifiedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__MultipleTopicsSpecifiedFault(struct soap*, _wsnt__MultipleTopicsSpecifiedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__MultipleTopicsSpecifiedFault(struct soap*, _wsnt__MultipleTopicsSpecifiedFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__MultipleTopicsSpecifiedFault(struct soap*, const char *URL, _wsnt__MultipleTopicsSpecifiedFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__MultipleTopicsSpecifiedFault(struct soap*, const char *URL, _wsnt__MultipleTopicsSpecifiedFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__MultipleTopicsSpecifiedFault(struct soap*, const char *URL, _wsnt__MultipleTopicsSpecifiedFault*);
    soap_POST_recv__wsnt__MultipleTopicsSpecifiedFault(struct soap*, _wsnt__MultipleTopicsSpecifiedFault*);
    @endcode

  - <wsnt:InvalidProducerPropertiesExpressionFault> @ref _wsnt__InvalidProducerPropertiesExpressionFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__InvalidProducerPropertiesExpressionFault(struct soap*, _wsnt__InvalidProducerPropertiesExpressionFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__InvalidProducerPropertiesExpressionFault(struct soap*, _wsnt__InvalidProducerPropertiesExpressionFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__InvalidProducerPropertiesExpressionFault(struct soap*, const char *URL, _wsnt__InvalidProducerPropertiesExpressionFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__InvalidProducerPropertiesExpressionFault(struct soap*, const char *URL, _wsnt__InvalidProducerPropertiesExpressionFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__InvalidProducerPropertiesExpressionFault(struct soap*, const char *URL, _wsnt__InvalidProducerPropertiesExpressionFault*);
    soap_POST_recv__wsnt__InvalidProducerPropertiesExpressionFault(struct soap*, _wsnt__InvalidProducerPropertiesExpressionFault*);
    @endcode

  - <wsnt:InvalidMessageContentExpressionFault> @ref _wsnt__InvalidMessageContentExpressionFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__InvalidMessageContentExpressionFault(struct soap*, _wsnt__InvalidMessageContentExpressionFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__InvalidMessageContentExpressionFault(struct soap*, _wsnt__InvalidMessageContentExpressionFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__InvalidMessageContentExpressionFault(struct soap*, const char *URL, _wsnt__InvalidMessageContentExpressionFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__InvalidMessageContentExpressionFault(struct soap*, const char *URL, _wsnt__InvalidMessageContentExpressionFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__InvalidMessageContentExpressionFault(struct soap*, const char *URL, _wsnt__InvalidMessageContentExpressionFault*);
    soap_POST_recv__wsnt__InvalidMessageContentExpressionFault(struct soap*, _wsnt__InvalidMessageContentExpressionFault*);
    @endcode

  - <wsnt:UnrecognizedPolicyRequestFault> @ref _wsnt__UnrecognizedPolicyRequestFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnrecognizedPolicyRequestFault(struct soap*, _wsnt__UnrecognizedPolicyRequestFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnrecognizedPolicyRequestFault(struct soap*, _wsnt__UnrecognizedPolicyRequestFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnrecognizedPolicyRequestFault(struct soap*, const char *URL, _wsnt__UnrecognizedPolicyRequestFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnrecognizedPolicyRequestFault(struct soap*, const char *URL, _wsnt__UnrecognizedPolicyRequestFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnrecognizedPolicyRequestFault(struct soap*, const char *URL, _wsnt__UnrecognizedPolicyRequestFault*);
    soap_POST_recv__wsnt__UnrecognizedPolicyRequestFault(struct soap*, _wsnt__UnrecognizedPolicyRequestFault*);
    @endcode

  - <wsnt:UnsupportedPolicyRequestFault> @ref _wsnt__UnsupportedPolicyRequestFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnsupportedPolicyRequestFault(struct soap*, _wsnt__UnsupportedPolicyRequestFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnsupportedPolicyRequestFault(struct soap*, _wsnt__UnsupportedPolicyRequestFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnsupportedPolicyRequestFault(struct soap*, const char *URL, _wsnt__UnsupportedPolicyRequestFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnsupportedPolicyRequestFault(struct soap*, const char *URL, _wsnt__UnsupportedPolicyRequestFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnsupportedPolicyRequestFault(struct soap*, const char *URL, _wsnt__UnsupportedPolicyRequestFault*);
    soap_POST_recv__wsnt__UnsupportedPolicyRequestFault(struct soap*, _wsnt__UnsupportedPolicyRequestFault*);
    @endcode

  - <wsnt:NotifyMessageNotSupportedFault> @ref _wsnt__NotifyMessageNotSupportedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__NotifyMessageNotSupportedFault(struct soap*, _wsnt__NotifyMessageNotSupportedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__NotifyMessageNotSupportedFault(struct soap*, _wsnt__NotifyMessageNotSupportedFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__NotifyMessageNotSupportedFault(struct soap*, const char *URL, _wsnt__NotifyMessageNotSupportedFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__NotifyMessageNotSupportedFault(struct soap*, const char *URL, _wsnt__NotifyMessageNotSupportedFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__NotifyMessageNotSupportedFault(struct soap*, const char *URL, _wsnt__NotifyMessageNotSupportedFault*);
    soap_POST_recv__wsnt__NotifyMessageNotSupportedFault(struct soap*, _wsnt__NotifyMessageNotSupportedFault*);
    @endcode

  - <wsnt:UnacceptableInitialTerminationTimeFault> @ref _wsnt__UnacceptableInitialTerminationTimeFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnacceptableInitialTerminationTimeFault(struct soap*, _wsnt__UnacceptableInitialTerminationTimeFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnacceptableInitialTerminationTimeFault(struct soap*, _wsnt__UnacceptableInitialTerminationTimeFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnacceptableInitialTerminationTimeFault(struct soap*, const char *URL, _wsnt__UnacceptableInitialTerminationTimeFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnacceptableInitialTerminationTimeFault(struct soap*, const char *URL, _wsnt__UnacceptableInitialTerminationTimeFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnacceptableInitialTerminationTimeFault(struct soap*, const char *URL, _wsnt__UnacceptableInitialTerminationTimeFault*);
    soap_POST_recv__wsnt__UnacceptableInitialTerminationTimeFault(struct soap*, _wsnt__UnacceptableInitialTerminationTimeFault*);
    @endcode

  - <wsnt:NoCurrentMessageOnTopicFault> @ref _wsnt__NoCurrentMessageOnTopicFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__NoCurrentMessageOnTopicFault(struct soap*, _wsnt__NoCurrentMessageOnTopicFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__NoCurrentMessageOnTopicFault(struct soap*, _wsnt__NoCurrentMessageOnTopicFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__NoCurrentMessageOnTopicFault(struct soap*, const char *URL, _wsnt__NoCurrentMessageOnTopicFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__NoCurrentMessageOnTopicFault(struct soap*, const char *URL, _wsnt__NoCurrentMessageOnTopicFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__NoCurrentMessageOnTopicFault(struct soap*, const char *URL, _wsnt__NoCurrentMessageOnTopicFault*);
    soap_POST_recv__wsnt__NoCurrentMessageOnTopicFault(struct soap*, _wsnt__NoCurrentMessageOnTopicFault*);
    @endcode

  - <wsnt:GetMessages> @ref _wsnt__GetMessages
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetMessages(struct soap*, _wsnt__GetMessages*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetMessages(struct soap*, _wsnt__GetMessages*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__GetMessages(struct soap*, const char *URL, _wsnt__GetMessages*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__GetMessages(struct soap*, const char *URL, _wsnt__GetMessages*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__GetMessages(struct soap*, const char *URL, _wsnt__GetMessages*);
    soap_POST_recv__wsnt__GetMessages(struct soap*, _wsnt__GetMessages*);
    @endcode

  - <wsnt:GetMessagesResponse> @ref _wsnt__GetMessagesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__GetMessagesResponse(struct soap*, const char *URL, _wsnt__GetMessagesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__GetMessagesResponse(struct soap*, const char *URL, _wsnt__GetMessagesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__GetMessagesResponse(struct soap*, const char *URL, _wsnt__GetMessagesResponse*);
    soap_POST_recv__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse*);
    @endcode

  - <wsnt:DestroyPullPoint> @ref _wsnt__DestroyPullPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__DestroyPullPoint(struct soap*, const char *URL, _wsnt__DestroyPullPoint*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__DestroyPullPoint(struct soap*, const char *URL, _wsnt__DestroyPullPoint*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__DestroyPullPoint(struct soap*, const char *URL, _wsnt__DestroyPullPoint*);
    soap_POST_recv__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint*);
    @endcode

  - <wsnt:DestroyPullPointResponse> @ref _wsnt__DestroyPullPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__DestroyPullPointResponse(struct soap*, const char *URL, _wsnt__DestroyPullPointResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__DestroyPullPointResponse(struct soap*, const char *URL, _wsnt__DestroyPullPointResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__DestroyPullPointResponse(struct soap*, const char *URL, _wsnt__DestroyPullPointResponse*);
    soap_POST_recv__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse*);
    @endcode

  - <wsnt:UnableToGetMessagesFault> @ref _wsnt__UnableToGetMessagesFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnableToGetMessagesFault(struct soap*, _wsnt__UnableToGetMessagesFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnableToGetMessagesFault(struct soap*, _wsnt__UnableToGetMessagesFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnableToGetMessagesFault(struct soap*, const char *URL, _wsnt__UnableToGetMessagesFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnableToGetMessagesFault(struct soap*, const char *URL, _wsnt__UnableToGetMessagesFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnableToGetMessagesFault(struct soap*, const char *URL, _wsnt__UnableToGetMessagesFault*);
    soap_POST_recv__wsnt__UnableToGetMessagesFault(struct soap*, _wsnt__UnableToGetMessagesFault*);
    @endcode

  - <wsnt:UnableToDestroyPullPointFault> @ref _wsnt__UnableToDestroyPullPointFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnableToDestroyPullPointFault(struct soap*, _wsnt__UnableToDestroyPullPointFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnableToDestroyPullPointFault(struct soap*, _wsnt__UnableToDestroyPullPointFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnableToDestroyPullPointFault(struct soap*, const char *URL, _wsnt__UnableToDestroyPullPointFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnableToDestroyPullPointFault(struct soap*, const char *URL, _wsnt__UnableToDestroyPullPointFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnableToDestroyPullPointFault(struct soap*, const char *URL, _wsnt__UnableToDestroyPullPointFault*);
    soap_POST_recv__wsnt__UnableToDestroyPullPointFault(struct soap*, _wsnt__UnableToDestroyPullPointFault*);
    @endcode

  - <wsnt:CreatePullPoint> @ref _wsnt__CreatePullPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__CreatePullPoint(struct soap*, const char *URL, _wsnt__CreatePullPoint*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__CreatePullPoint(struct soap*, const char *URL, _wsnt__CreatePullPoint*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__CreatePullPoint(struct soap*, const char *URL, _wsnt__CreatePullPoint*);
    soap_POST_recv__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint*);
    @endcode

  - <wsnt:CreatePullPointResponse> @ref _wsnt__CreatePullPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__CreatePullPointResponse(struct soap*, const char *URL, _wsnt__CreatePullPointResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__CreatePullPointResponse(struct soap*, const char *URL, _wsnt__CreatePullPointResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__CreatePullPointResponse(struct soap*, const char *URL, _wsnt__CreatePullPointResponse*);
    soap_POST_recv__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse*);
    @endcode

  - <wsnt:UnableToCreatePullPointFault> @ref _wsnt__UnableToCreatePullPointFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnableToCreatePullPointFault(struct soap*, _wsnt__UnableToCreatePullPointFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnableToCreatePullPointFault(struct soap*, _wsnt__UnableToCreatePullPointFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnableToCreatePullPointFault(struct soap*, const char *URL, _wsnt__UnableToCreatePullPointFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnableToCreatePullPointFault(struct soap*, const char *URL, _wsnt__UnableToCreatePullPointFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnableToCreatePullPointFault(struct soap*, const char *URL, _wsnt__UnableToCreatePullPointFault*);
    soap_POST_recv__wsnt__UnableToCreatePullPointFault(struct soap*, _wsnt__UnableToCreatePullPointFault*);
    @endcode

  - <wsnt:Renew> @ref _wsnt__Renew
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Renew(struct soap*, _wsnt__Renew*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Renew(struct soap*, _wsnt__Renew*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__Renew(struct soap*, const char *URL, _wsnt__Renew*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__Renew(struct soap*, const char *URL, _wsnt__Renew*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__Renew(struct soap*, const char *URL, _wsnt__Renew*);
    soap_POST_recv__wsnt__Renew(struct soap*, _wsnt__Renew*);
    @endcode

  - <wsnt:RenewResponse> @ref _wsnt__RenewResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__RenewResponse(struct soap*, const char *URL, _wsnt__RenewResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__RenewResponse(struct soap*, const char *URL, _wsnt__RenewResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__RenewResponse(struct soap*, const char *URL, _wsnt__RenewResponse*);
    soap_POST_recv__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse*);
    @endcode

  - <wsnt:UnacceptableTerminationTimeFault> @ref _wsnt__UnacceptableTerminationTimeFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnacceptableTerminationTimeFault(struct soap*, _wsnt__UnacceptableTerminationTimeFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnacceptableTerminationTimeFault(struct soap*, _wsnt__UnacceptableTerminationTimeFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnacceptableTerminationTimeFault(struct soap*, const char *URL, _wsnt__UnacceptableTerminationTimeFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnacceptableTerminationTimeFault(struct soap*, const char *URL, _wsnt__UnacceptableTerminationTimeFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnacceptableTerminationTimeFault(struct soap*, const char *URL, _wsnt__UnacceptableTerminationTimeFault*);
    soap_POST_recv__wsnt__UnacceptableTerminationTimeFault(struct soap*, _wsnt__UnacceptableTerminationTimeFault*);
    @endcode

  - <wsnt:Unsubscribe> @ref _wsnt__Unsubscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__Unsubscribe(struct soap*, const char *URL, _wsnt__Unsubscribe*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__Unsubscribe(struct soap*, const char *URL, _wsnt__Unsubscribe*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__Unsubscribe(struct soap*, const char *URL, _wsnt__Unsubscribe*);
    soap_POST_recv__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe*);
    @endcode

  - <wsnt:UnsubscribeResponse> @ref _wsnt__UnsubscribeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnsubscribeResponse(struct soap*, const char *URL, _wsnt__UnsubscribeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnsubscribeResponse(struct soap*, const char *URL, _wsnt__UnsubscribeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnsubscribeResponse(struct soap*, const char *URL, _wsnt__UnsubscribeResponse*);
    soap_POST_recv__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse*);
    @endcode

  - <wsnt:UnableToDestroySubscriptionFault> @ref _wsnt__UnableToDestroySubscriptionFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnableToDestroySubscriptionFault(struct soap*, _wsnt__UnableToDestroySubscriptionFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnableToDestroySubscriptionFault(struct soap*, _wsnt__UnableToDestroySubscriptionFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__UnableToDestroySubscriptionFault(struct soap*, const char *URL, _wsnt__UnableToDestroySubscriptionFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__UnableToDestroySubscriptionFault(struct soap*, const char *URL, _wsnt__UnableToDestroySubscriptionFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__UnableToDestroySubscriptionFault(struct soap*, const char *URL, _wsnt__UnableToDestroySubscriptionFault*);
    soap_POST_recv__wsnt__UnableToDestroySubscriptionFault(struct soap*, _wsnt__UnableToDestroySubscriptionFault*);
    @endcode

  - <wsnt:PauseSubscription> @ref _wsnt__PauseSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__PauseSubscription(struct soap*, const char *URL, _wsnt__PauseSubscription*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__PauseSubscription(struct soap*, const char *URL, _wsnt__PauseSubscription*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__PauseSubscription(struct soap*, const char *URL, _wsnt__PauseSubscription*);
    soap_POST_recv__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription*);
    @endcode

  - <wsnt:PauseSubscriptionResponse> @ref _wsnt__PauseSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__PauseSubscriptionResponse(struct soap*, const char *URL, _wsnt__PauseSubscriptionResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__PauseSubscriptionResponse(struct soap*, const char *URL, _wsnt__PauseSubscriptionResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__PauseSubscriptionResponse(struct soap*, const char *URL, _wsnt__PauseSubscriptionResponse*);
    soap_POST_recv__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse*);
    @endcode

  - <wsnt:ResumeSubscription> @ref _wsnt__ResumeSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__ResumeSubscription(struct soap*, const char *URL, _wsnt__ResumeSubscription*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__ResumeSubscription(struct soap*, const char *URL, _wsnt__ResumeSubscription*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__ResumeSubscription(struct soap*, const char *URL, _wsnt__ResumeSubscription*);
    soap_POST_recv__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription*);
    @endcode

  - <wsnt:ResumeSubscriptionResponse> @ref _wsnt__ResumeSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__ResumeSubscriptionResponse(struct soap*, const char *URL, _wsnt__ResumeSubscriptionResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__ResumeSubscriptionResponse(struct soap*, const char *URL, _wsnt__ResumeSubscriptionResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__ResumeSubscriptionResponse(struct soap*, const char *URL, _wsnt__ResumeSubscriptionResponse*);
    soap_POST_recv__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse*);
    @endcode

  - <wsnt:PauseFailedFault> @ref _wsnt__PauseFailedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__PauseFailedFault(struct soap*, _wsnt__PauseFailedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__PauseFailedFault(struct soap*, _wsnt__PauseFailedFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__PauseFailedFault(struct soap*, const char *URL, _wsnt__PauseFailedFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__PauseFailedFault(struct soap*, const char *URL, _wsnt__PauseFailedFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__PauseFailedFault(struct soap*, const char *URL, _wsnt__PauseFailedFault*);
    soap_POST_recv__wsnt__PauseFailedFault(struct soap*, _wsnt__PauseFailedFault*);
    @endcode

  - <wsnt:ResumeFailedFault> @ref _wsnt__ResumeFailedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ResumeFailedFault(struct soap*, _wsnt__ResumeFailedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ResumeFailedFault(struct soap*, _wsnt__ResumeFailedFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsnt__ResumeFailedFault(struct soap*, const char *URL, _wsnt__ResumeFailedFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsnt__ResumeFailedFault(struct soap*, const char *URL, _wsnt__ResumeFailedFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsnt__ResumeFailedFault(struct soap*, const char *URL, _wsnt__ResumeFailedFault*);
    soap_POST_recv__wsnt__ResumeFailedFault(struct soap*, _wsnt__ResumeFailedFault*);
    @endcode

@section xop Top-level root elements of schema "http://www.w3.org/2004/08/xop/include"

  - <xop:Include> @ref _xop__Include
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__xop__Include(struct soap*, _xop__Include*);
    // Writer (returns SOAP_OK on success):
    soap_write__xop__Include(struct soap*, _xop__Include*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__xop__Include(struct soap*, const char *URL, _xop__Include*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__xop__Include(struct soap*, const char *URL, _xop__Include*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__xop__Include(struct soap*, const char *URL, _xop__Include*);
    soap_POST_recv__xop__Include(struct soap*, _xop__Include*);
    @endcode

@section wsrfbf Top-level root elements of schema "http://docs.oasis-open.org/wsrf/bf-2"

  - <wsrfbf:BaseFault> @ref _wsrfbf__BaseFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsrfbf__BaseFault(struct soap*, _wsrfbf__BaseFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsrfbf__BaseFault(struct soap*, _wsrfbf__BaseFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsrfbf__BaseFault(struct soap*, const char *URL, _wsrfbf__BaseFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsrfbf__BaseFault(struct soap*, const char *URL, _wsrfbf__BaseFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsrfbf__BaseFault(struct soap*, const char *URL, _wsrfbf__BaseFault*);
    soap_POST_recv__wsrfbf__BaseFault(struct soap*, _wsrfbf__BaseFault*);
    @endcode

@section wstop Top-level root elements of schema "http://docs.oasis-open.org/wsn/t-1"

  - <wstop:TopicNamespace> @ref _wstop__TopicNamespace
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wstop__TopicNamespace(struct soap*, _wstop__TopicNamespace*);
    // Writer (returns SOAP_OK on success):
    soap_write__wstop__TopicNamespace(struct soap*, _wstop__TopicNamespace*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wstop__TopicNamespace(struct soap*, const char *URL, _wstop__TopicNamespace*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wstop__TopicNamespace(struct soap*, const char *URL, _wstop__TopicNamespace*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wstop__TopicNamespace(struct soap*, const char *URL, _wstop__TopicNamespace*);
    soap_POST_recv__wstop__TopicNamespace(struct soap*, _wstop__TopicNamespace*);
    @endcode

  - <wstop:TopicSet> @ref _wstop__TopicSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wstop__TopicSet(struct soap*, _wstop__TopicSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__wstop__TopicSet(struct soap*, _wstop__TopicSet*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wstop__TopicSet(struct soap*, const char *URL, _wstop__TopicSet*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wstop__TopicSet(struct soap*, const char *URL, _wstop__TopicSet*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wstop__TopicSet(struct soap*, const char *URL, _wstop__TopicSet*);
    soap_POST_recv__wstop__TopicSet(struct soap*, _wstop__TopicSet*);
    @endcode

@section tev Top-level root elements of schema "http://www.onvif.org/ver10/events/wsdl"

  - <tev:GetServiceCapabilities> @ref _tev__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__GetServiceCapabilities(struct soap*, _tev__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__GetServiceCapabilities(struct soap*, _tev__GetServiceCapabilities*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__GetServiceCapabilities(struct soap*, const char *URL, _tev__GetServiceCapabilities*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__GetServiceCapabilities(struct soap*, const char *URL, _tev__GetServiceCapabilities*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__GetServiceCapabilities(struct soap*, const char *URL, _tev__GetServiceCapabilities*);
    soap_POST_recv__tev__GetServiceCapabilities(struct soap*, _tev__GetServiceCapabilities*);
    @endcode

  - <tev:GetServiceCapabilitiesResponse> @ref _tev__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__GetServiceCapabilitiesResponse(struct soap*, _tev__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__GetServiceCapabilitiesResponse(struct soap*, _tev__GetServiceCapabilitiesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__GetServiceCapabilitiesResponse(struct soap*, const char *URL, _tev__GetServiceCapabilitiesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__GetServiceCapabilitiesResponse(struct soap*, const char *URL, _tev__GetServiceCapabilitiesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__GetServiceCapabilitiesResponse(struct soap*, const char *URL, _tev__GetServiceCapabilitiesResponse*);
    soap_POST_recv__tev__GetServiceCapabilitiesResponse(struct soap*, _tev__GetServiceCapabilitiesResponse*);
    @endcode

  - <tev:Capabilities> @ref _tev__Capabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__Capabilities(struct soap*, _tev__Capabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__Capabilities(struct soap*, _tev__Capabilities*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__Capabilities(struct soap*, const char *URL, _tev__Capabilities*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__Capabilities(struct soap*, const char *URL, _tev__Capabilities*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__Capabilities(struct soap*, const char *URL, _tev__Capabilities*);
    soap_POST_recv__tev__Capabilities(struct soap*, _tev__Capabilities*);
    @endcode

  - <tev:CreatePullPointSubscription> @ref _tev__CreatePullPointSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__CreatePullPointSubscription(struct soap*, _tev__CreatePullPointSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__CreatePullPointSubscription(struct soap*, _tev__CreatePullPointSubscription*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__CreatePullPointSubscription(struct soap*, const char *URL, _tev__CreatePullPointSubscription*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__CreatePullPointSubscription(struct soap*, const char *URL, _tev__CreatePullPointSubscription*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__CreatePullPointSubscription(struct soap*, const char *URL, _tev__CreatePullPointSubscription*);
    soap_POST_recv__tev__CreatePullPointSubscription(struct soap*, _tev__CreatePullPointSubscription*);
    @endcode

  - <tev:CreatePullPointSubscriptionResponse> @ref _tev__CreatePullPointSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__CreatePullPointSubscriptionResponse(struct soap*, _tev__CreatePullPointSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__CreatePullPointSubscriptionResponse(struct soap*, _tev__CreatePullPointSubscriptionResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__CreatePullPointSubscriptionResponse(struct soap*, const char *URL, _tev__CreatePullPointSubscriptionResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__CreatePullPointSubscriptionResponse(struct soap*, const char *URL, _tev__CreatePullPointSubscriptionResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__CreatePullPointSubscriptionResponse(struct soap*, const char *URL, _tev__CreatePullPointSubscriptionResponse*);
    soap_POST_recv__tev__CreatePullPointSubscriptionResponse(struct soap*, _tev__CreatePullPointSubscriptionResponse*);
    @endcode

  - <tev:PullMessages> @ref _tev__PullMessages
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__PullMessages(struct soap*, _tev__PullMessages*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__PullMessages(struct soap*, _tev__PullMessages*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__PullMessages(struct soap*, const char *URL, _tev__PullMessages*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__PullMessages(struct soap*, const char *URL, _tev__PullMessages*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__PullMessages(struct soap*, const char *URL, _tev__PullMessages*);
    soap_POST_recv__tev__PullMessages(struct soap*, _tev__PullMessages*);
    @endcode

  - <tev:PullMessagesResponse> @ref _tev__PullMessagesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__PullMessagesResponse(struct soap*, _tev__PullMessagesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__PullMessagesResponse(struct soap*, _tev__PullMessagesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__PullMessagesResponse(struct soap*, const char *URL, _tev__PullMessagesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__PullMessagesResponse(struct soap*, const char *URL, _tev__PullMessagesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__PullMessagesResponse(struct soap*, const char *URL, _tev__PullMessagesResponse*);
    soap_POST_recv__tev__PullMessagesResponse(struct soap*, _tev__PullMessagesResponse*);
    @endcode

  - <tev:PullMessagesFaultResponse> @ref _tev__PullMessagesFaultResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__PullMessagesFaultResponse(struct soap*, _tev__PullMessagesFaultResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__PullMessagesFaultResponse(struct soap*, _tev__PullMessagesFaultResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__PullMessagesFaultResponse(struct soap*, const char *URL, _tev__PullMessagesFaultResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__PullMessagesFaultResponse(struct soap*, const char *URL, _tev__PullMessagesFaultResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__PullMessagesFaultResponse(struct soap*, const char *URL, _tev__PullMessagesFaultResponse*);
    soap_POST_recv__tev__PullMessagesFaultResponse(struct soap*, _tev__PullMessagesFaultResponse*);
    @endcode

  - <tev:Seek> @ref _tev__Seek
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__Seek(struct soap*, _tev__Seek*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__Seek(struct soap*, _tev__Seek*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__Seek(struct soap*, const char *URL, _tev__Seek*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__Seek(struct soap*, const char *URL, _tev__Seek*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__Seek(struct soap*, const char *URL, _tev__Seek*);
    soap_POST_recv__tev__Seek(struct soap*, _tev__Seek*);
    @endcode

  - <tev:SeekResponse> @ref _tev__SeekResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__SeekResponse(struct soap*, _tev__SeekResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__SeekResponse(struct soap*, _tev__SeekResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__SeekResponse(struct soap*, const char *URL, _tev__SeekResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__SeekResponse(struct soap*, const char *URL, _tev__SeekResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__SeekResponse(struct soap*, const char *URL, _tev__SeekResponse*);
    soap_POST_recv__tev__SeekResponse(struct soap*, _tev__SeekResponse*);
    @endcode

  - <tev:SetSynchronizationPoint> @ref _tev__SetSynchronizationPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__SetSynchronizationPoint(struct soap*, _tev__SetSynchronizationPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__SetSynchronizationPoint(struct soap*, _tev__SetSynchronizationPoint*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__SetSynchronizationPoint(struct soap*, const char *URL, _tev__SetSynchronizationPoint*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__SetSynchronizationPoint(struct soap*, const char *URL, _tev__SetSynchronizationPoint*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__SetSynchronizationPoint(struct soap*, const char *URL, _tev__SetSynchronizationPoint*);
    soap_POST_recv__tev__SetSynchronizationPoint(struct soap*, _tev__SetSynchronizationPoint*);
    @endcode

  - <tev:SetSynchronizationPointResponse> @ref _tev__SetSynchronizationPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__SetSynchronizationPointResponse(struct soap*, _tev__SetSynchronizationPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__SetSynchronizationPointResponse(struct soap*, _tev__SetSynchronizationPointResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__SetSynchronizationPointResponse(struct soap*, const char *URL, _tev__SetSynchronizationPointResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__SetSynchronizationPointResponse(struct soap*, const char *URL, _tev__SetSynchronizationPointResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__SetSynchronizationPointResponse(struct soap*, const char *URL, _tev__SetSynchronizationPointResponse*);
    soap_POST_recv__tev__SetSynchronizationPointResponse(struct soap*, _tev__SetSynchronizationPointResponse*);
    @endcode

  - <tev:GetEventProperties> @ref _tev__GetEventProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__GetEventProperties(struct soap*, _tev__GetEventProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__GetEventProperties(struct soap*, _tev__GetEventProperties*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__GetEventProperties(struct soap*, const char *URL, _tev__GetEventProperties*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__GetEventProperties(struct soap*, const char *URL, _tev__GetEventProperties*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__GetEventProperties(struct soap*, const char *URL, _tev__GetEventProperties*);
    soap_POST_recv__tev__GetEventProperties(struct soap*, _tev__GetEventProperties*);
    @endcode

  - <tev:GetEventPropertiesResponse> @ref _tev__GetEventPropertiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tev__GetEventPropertiesResponse(struct soap*, _tev__GetEventPropertiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tev__GetEventPropertiesResponse(struct soap*, _tev__GetEventPropertiesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tev__GetEventPropertiesResponse(struct soap*, const char *URL, _tev__GetEventPropertiesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tev__GetEventPropertiesResponse(struct soap*, const char *URL, _tev__GetEventPropertiesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tev__GetEventPropertiesResponse(struct soap*, const char *URL, _tev__GetEventPropertiesResponse*);
    soap_POST_recv__tev__GetEventPropertiesResponse(struct soap*, _tev__GetEventPropertiesResponse*);
    @endcode

@section  Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://docs.oasis-open.org/wsrf/rw-2"

@section wsrf Top-level root elements of schema "http://docs.oasis-open.org/wsrf/r-2"

  - <wsrf:ResourceUnknownFault> @ref _wsrf__ResourceUnknownFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsrf__ResourceUnknownFault(struct soap*, _wsrf__ResourceUnknownFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsrf__ResourceUnknownFault(struct soap*, _wsrf__ResourceUnknownFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsrf__ResourceUnknownFault(struct soap*, const char *URL, _wsrf__ResourceUnknownFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsrf__ResourceUnknownFault(struct soap*, const char *URL, _wsrf__ResourceUnknownFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsrf__ResourceUnknownFault(struct soap*, const char *URL, _wsrf__ResourceUnknownFault*);
    soap_POST_recv__wsrf__ResourceUnknownFault(struct soap*, _wsrf__ResourceUnknownFault*);
    @endcode

  - <wsrf:ResourceUnavailableFault> @ref _wsrf__ResourceUnavailableFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsrf__ResourceUnavailableFault(struct soap*, _wsrf__ResourceUnavailableFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsrf__ResourceUnavailableFault(struct soap*, _wsrf__ResourceUnavailableFault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsrf__ResourceUnavailableFault(struct soap*, const char *URL, _wsrf__ResourceUnavailableFault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsrf__ResourceUnavailableFault(struct soap*, const char *URL, _wsrf__ResourceUnavailableFault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsrf__ResourceUnavailableFault(struct soap*, const char *URL, _wsrf__ResourceUnavailableFault*);
    soap_POST_recv__wsrf__ResourceUnavailableFault(struct soap*, _wsrf__ResourceUnavailableFault*);
    @endcode

@section wsd Top-level root elements of schema "http://schemas.xmlsoap.org/ws/2005/04/discovery"

  - <wsd:Hello> @ref _wsd__Hello
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Hello(struct soap*, _wsd__Hello*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Hello(struct soap*, _wsd__Hello*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Hello(struct soap*, const char *URL, _wsd__Hello*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Hello(struct soap*, const char *URL, _wsd__Hello*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Hello(struct soap*, const char *URL, _wsd__Hello*);
    soap_POST_recv__wsd__Hello(struct soap*, _wsd__Hello*);
    @endcode

  - <wsd:Bye> @ref _wsd__Bye
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Bye(struct soap*, _wsd__Bye*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Bye(struct soap*, _wsd__Bye*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Bye(struct soap*, const char *URL, _wsd__Bye*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Bye(struct soap*, const char *URL, _wsd__Bye*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Bye(struct soap*, const char *URL, _wsd__Bye*);
    soap_POST_recv__wsd__Bye(struct soap*, _wsd__Bye*);
    @endcode

  - <wsd:Probe> @ref _wsd__Probe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Probe(struct soap*, _wsd__Probe*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Probe(struct soap*, _wsd__Probe*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Probe(struct soap*, const char *URL, _wsd__Probe*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Probe(struct soap*, const char *URL, _wsd__Probe*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Probe(struct soap*, const char *URL, _wsd__Probe*);
    soap_POST_recv__wsd__Probe(struct soap*, _wsd__Probe*);
    @endcode

  - <wsd:ProbeMatches> @ref _wsd__ProbeMatches
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__ProbeMatches(struct soap*, _wsd__ProbeMatches*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__ProbeMatches(struct soap*, _wsd__ProbeMatches*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__ProbeMatches(struct soap*, const char *URL, _wsd__ProbeMatches*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__ProbeMatches(struct soap*, const char *URL, _wsd__ProbeMatches*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__ProbeMatches(struct soap*, const char *URL, _wsd__ProbeMatches*);
    soap_POST_recv__wsd__ProbeMatches(struct soap*, _wsd__ProbeMatches*);
    @endcode

  - <wsd:Resolve> @ref _wsd__Resolve
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Resolve(struct soap*, _wsd__Resolve*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Resolve(struct soap*, _wsd__Resolve*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Resolve(struct soap*, const char *URL, _wsd__Resolve*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Resolve(struct soap*, const char *URL, _wsd__Resolve*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Resolve(struct soap*, const char *URL, _wsd__Resolve*);
    soap_POST_recv__wsd__Resolve(struct soap*, _wsd__Resolve*);
    @endcode

  - <wsd:ResolveMatches> @ref _wsd__ResolveMatches
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__ResolveMatches(struct soap*, _wsd__ResolveMatches*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__ResolveMatches(struct soap*, _wsd__ResolveMatches*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__ResolveMatches(struct soap*, const char *URL, _wsd__ResolveMatches*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__ResolveMatches(struct soap*, const char *URL, _wsd__ResolveMatches*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__ResolveMatches(struct soap*, const char *URL, _wsd__ResolveMatches*);
    soap_POST_recv__wsd__ResolveMatches(struct soap*, _wsd__ResolveMatches*);
    @endcode

  - <wsd:Types> @ref _wsd__Types
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Types(struct soap*, _wsd__Types*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Types(struct soap*, _wsd__Types*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Types(struct soap*, const char *URL, _wsd__Types*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Types(struct soap*, const char *URL, _wsd__Types*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Types(struct soap*, const char *URL, _wsd__Types*);
    soap_POST_recv__wsd__Types(struct soap*, _wsd__Types*);
    @endcode

  - <wsd:Scopes> @ref _wsd__Scopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Scopes(struct soap*, _wsd__Scopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Scopes(struct soap*, _wsd__Scopes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Scopes(struct soap*, const char *URL, _wsd__Scopes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Scopes(struct soap*, const char *URL, _wsd__Scopes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Scopes(struct soap*, const char *URL, _wsd__Scopes*);
    soap_POST_recv__wsd__Scopes(struct soap*, _wsd__Scopes*);
    @endcode

  - <wsd:XAddrs> @ref _wsd__XAddrs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__XAddrs(struct soap*, _wsd__XAddrs*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__XAddrs(struct soap*, _wsd__XAddrs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__XAddrs(struct soap*, const char *URL, _wsd__XAddrs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__XAddrs(struct soap*, const char *URL, _wsd__XAddrs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__XAddrs(struct soap*, const char *URL, _wsd__XAddrs*);
    soap_POST_recv__wsd__XAddrs(struct soap*, _wsd__XAddrs*);
    @endcode

  - <wsd:MetadataVersion> @ref _wsd__MetadataVersion
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__MetadataVersion(struct soap*, _wsd__MetadataVersion*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__MetadataVersion(struct soap*, _wsd__MetadataVersion*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__MetadataVersion(struct soap*, const char *URL, _wsd__MetadataVersion*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__MetadataVersion(struct soap*, const char *URL, _wsd__MetadataVersion*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__MetadataVersion(struct soap*, const char *URL, _wsd__MetadataVersion*);
    soap_POST_recv__wsd__MetadataVersion(struct soap*, _wsd__MetadataVersion*);
    @endcode

  - <wsd:SupportedMatchingRules> @ref _wsd__SupportedMatchingRules
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__SupportedMatchingRules(struct soap*, _wsd__SupportedMatchingRules*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__SupportedMatchingRules(struct soap*, _wsd__SupportedMatchingRules*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__SupportedMatchingRules(struct soap*, const char *URL, _wsd__SupportedMatchingRules*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__SupportedMatchingRules(struct soap*, const char *URL, _wsd__SupportedMatchingRules*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__SupportedMatchingRules(struct soap*, const char *URL, _wsd__SupportedMatchingRules*);
    soap_POST_recv__wsd__SupportedMatchingRules(struct soap*, _wsd__SupportedMatchingRules*);
    @endcode

  - <wsd:Security> @ref _wsd__Security
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Security(struct soap*, _wsd__Security*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Security(struct soap*, _wsd__Security*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Security(struct soap*, const char *URL, _wsd__Security*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Security(struct soap*, const char *URL, _wsd__Security*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Security(struct soap*, const char *URL, _wsd__Security*);
    soap_POST_recv__wsd__Security(struct soap*, _wsd__Security*);
    @endcode

  - <wsd:Sig> @ref _wsd__Sig
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Sig(struct soap*, _wsd__Sig*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Sig(struct soap*, _wsd__Sig*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__Sig(struct soap*, const char *URL, _wsd__Sig*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__Sig(struct soap*, const char *URL, _wsd__Sig*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__Sig(struct soap*, const char *URL, _wsd__Sig*);
    soap_POST_recv__wsd__Sig(struct soap*, _wsd__Sig*);
    @endcode

  - <wsd:AppSequence> @ref _wsd__AppSequence
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__AppSequence(struct soap*, _wsd__AppSequence*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__AppSequence(struct soap*, _wsd__AppSequence*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsd__AppSequence(struct soap*, const char *URL, _wsd__AppSequence*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsd__AppSequence(struct soap*, const char *URL, _wsd__AppSequence*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsd__AppSequence(struct soap*, const char *URL, _wsd__AppSequence*);
    soap_POST_recv__wsd__AppSequence(struct soap*, _wsd__AppSequence*);
    @endcode

@section wsa Top-level root elements of schema "http://schemas.xmlsoap.org/ws/2004/08/addressing"

  - <wsa:EndpointReference> @ref _wsa__EndpointReference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__EndpointReference(struct soap*, _wsa__EndpointReference*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__EndpointReference(struct soap*, _wsa__EndpointReference*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__EndpointReference(struct soap*, const char *URL, _wsa__EndpointReference*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__EndpointReference(struct soap*, const char *URL, _wsa__EndpointReference*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__EndpointReference(struct soap*, const char *URL, _wsa__EndpointReference*);
    soap_POST_recv__wsa__EndpointReference(struct soap*, _wsa__EndpointReference*);
    @endcode

  - <wsa:MessageID> @ref _wsa__MessageID
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__MessageID(struct soap*, _wsa__MessageID*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__MessageID(struct soap*, _wsa__MessageID*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__MessageID(struct soap*, const char *URL, _wsa__MessageID*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__MessageID(struct soap*, const char *URL, _wsa__MessageID*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__MessageID(struct soap*, const char *URL, _wsa__MessageID*);
    soap_POST_recv__wsa__MessageID(struct soap*, _wsa__MessageID*);
    @endcode

  - <wsa:RelatesTo> @ref _wsa__RelatesTo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__RelatesTo(struct soap*, _wsa__RelatesTo*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__RelatesTo(struct soap*, _wsa__RelatesTo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__RelatesTo(struct soap*, const char *URL, _wsa__RelatesTo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__RelatesTo(struct soap*, const char *URL, _wsa__RelatesTo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__RelatesTo(struct soap*, const char *URL, _wsa__RelatesTo*);
    soap_POST_recv__wsa__RelatesTo(struct soap*, _wsa__RelatesTo*);
    @endcode

  - <wsa:To> @ref _wsa__To
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__To(struct soap*, _wsa__To*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__To(struct soap*, _wsa__To*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__To(struct soap*, const char *URL, _wsa__To*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__To(struct soap*, const char *URL, _wsa__To*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__To(struct soap*, const char *URL, _wsa__To*);
    soap_POST_recv__wsa__To(struct soap*, _wsa__To*);
    @endcode

  - <wsa:Action> @ref _wsa__Action
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__Action(struct soap*, _wsa__Action*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__Action(struct soap*, _wsa__Action*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__Action(struct soap*, const char *URL, _wsa__Action*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__Action(struct soap*, const char *URL, _wsa__Action*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__Action(struct soap*, const char *URL, _wsa__Action*);
    soap_POST_recv__wsa__Action(struct soap*, _wsa__Action*);
    @endcode

  - <wsa:From> @ref _wsa__From
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__From(struct soap*, _wsa__From*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__From(struct soap*, _wsa__From*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__From(struct soap*, const char *URL, _wsa__From*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__From(struct soap*, const char *URL, _wsa__From*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__From(struct soap*, const char *URL, _wsa__From*);
    soap_POST_recv__wsa__From(struct soap*, _wsa__From*);
    @endcode

  - <wsa:ReplyTo> @ref _wsa__ReplyTo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__ReplyTo(struct soap*, _wsa__ReplyTo*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__ReplyTo(struct soap*, _wsa__ReplyTo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__ReplyTo(struct soap*, const char *URL, _wsa__ReplyTo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__ReplyTo(struct soap*, const char *URL, _wsa__ReplyTo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__ReplyTo(struct soap*, const char *URL, _wsa__ReplyTo*);
    soap_POST_recv__wsa__ReplyTo(struct soap*, _wsa__ReplyTo*);
    @endcode

  - <wsa:FaultTo> @ref _wsa__FaultTo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__FaultTo(struct soap*, _wsa__FaultTo*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__FaultTo(struct soap*, _wsa__FaultTo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__FaultTo(struct soap*, const char *URL, _wsa__FaultTo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__FaultTo(struct soap*, const char *URL, _wsa__FaultTo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__FaultTo(struct soap*, const char *URL, _wsa__FaultTo*);
    soap_POST_recv__wsa__FaultTo(struct soap*, _wsa__FaultTo*);
    @endcode

  - <wsa:ReplyAfter> @ref _wsa__ReplyAfter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__ReplyAfter(struct soap*, _wsa__ReplyAfter*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__ReplyAfter(struct soap*, _wsa__ReplyAfter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__ReplyAfter(struct soap*, const char *URL, _wsa__ReplyAfter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__ReplyAfter(struct soap*, const char *URL, _wsa__ReplyAfter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__ReplyAfter(struct soap*, const char *URL, _wsa__ReplyAfter*);
    soap_POST_recv__wsa__ReplyAfter(struct soap*, _wsa__ReplyAfter*);
    @endcode

  - <wsa:RetryAfter> @ref _wsa__RetryAfter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__RetryAfter(struct soap*, _wsa__RetryAfter*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__RetryAfter(struct soap*, _wsa__RetryAfter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__RetryAfter(struct soap*, const char *URL, _wsa__RetryAfter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__RetryAfter(struct soap*, const char *URL, _wsa__RetryAfter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__RetryAfter(struct soap*, const char *URL, _wsa__RetryAfter*);
    soap_POST_recv__wsa__RetryAfter(struct soap*, _wsa__RetryAfter*);
    @endcode

@section tmk Top-level root elements of schema "http://www.inforion.ru/schemas/sstmk/onvif/topics/sensors"

*/

/* End of gSoap/onvif.h */
