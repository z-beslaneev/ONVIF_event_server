/* soapC_nnn.cpp
   Generated by gSOAP 2.8.78 for WS/onvifFull.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC_nnn.cpp ver 2.8.78 2019-03-11 21:45:00 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_tt__IANA_IfTypes:
		return soap_in_tt__IANA_IfTypes(soap, tag, NULL, "tt:IANA-IfTypes");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ULONG64:
		return soap_in_ULONG64(soap, tag, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_saml2__DecisionType:
		return soap_in_saml2__DecisionType(soap, tag, NULL, "saml2:DecisionType");
	case SOAP_TYPE_saml1__DecisionType:
		return soap_in_saml1__DecisionType(soap, tag, NULL, "saml1:DecisionType");
	case SOAP_TYPE_wsc__FaultCodeType:
		return soap_in_wsc__FaultCodeType(soap, tag, NULL, "wsc:FaultCodeType");
	case SOAP_TYPE_wsse__FaultcodeEnum:
		return soap_in_wsse__FaultcodeEnum(soap, tag, NULL, "wsse:FaultcodeEnum");
	case SOAP_TYPE_wsu__tTimestampFault:
		return soap_in_wsu__tTimestampFault(soap, tag, NULL, "wsu:tTimestampFault");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE__wsa5__IsReferenceParameter:
		return soap_in__wsa5__IsReferenceParameter(soap, tag, NULL, "wsa5:IsReferenceParameter");
	case SOAP_TYPE_wsa5__FaultCodesType:
		return soap_in_wsa5__FaultCodesType(soap, tag, NULL, "wsa5:FaultCodesType");
	case SOAP_TYPE_wsa5__RelationshipType:
		return soap_in_wsa5__RelationshipType(soap, tag, NULL, "wsa5:RelationshipType");
	case SOAP_TYPE_wsa__FaultSubcodeValues:
		return soap_in_wsa__FaultSubcodeValues(soap, tag, NULL, "wsa:FaultSubcodeValues");
	case SOAP_TYPE_wsa__RelationshipTypeValues:
		return soap_in_wsa__RelationshipTypeValues(soap, tag, NULL, "wsa:RelationshipTypeValues");
	case SOAP_TYPE_wsd__FaultCodeType:
		return soap_in_wsd__FaultCodeType(soap, tag, NULL, "wsd:FaultCodeType");
	case SOAP_TYPE_wsd__RelationshipType:
		return soap_in_wsd__RelationshipType(soap, tag, NULL, "wsd:RelationshipType");
	case SOAP_TYPE_tt__Entity:
		return soap_in_tt__Entity(soap, tag, NULL, "tt:Entity");
	case SOAP_TYPE_tt__MoveStatus:
		return soap_in_tt__MoveStatus(soap, tag, NULL, "tt:MoveStatus");
	case SOAP_TYPE_tt__OSDType:
		return soap_in_tt__OSDType(soap, tag, NULL, "tt:OSDType");
	case SOAP_TYPE_tt__ModeOfOperation:
		return soap_in_tt__ModeOfOperation(soap, tag, NULL, "tt:ModeOfOperation");
	case SOAP_TYPE_tt__TrackType:
		return soap_in_tt__TrackType(soap, tag, NULL, "tt:TrackType");
	case SOAP_TYPE_tt__RecordingStatus:
		return soap_in_tt__RecordingStatus(soap, tag, NULL, "tt:RecordingStatus");
	case SOAP_TYPE_tt__SearchState:
		return soap_in_tt__SearchState(soap, tag, NULL, "tt:SearchState");
	case SOAP_TYPE_tt__ReceiverState:
		return soap_in_tt__ReceiverState(soap, tag, NULL, "tt:ReceiverState");
	case SOAP_TYPE_tt__ReceiverMode:
		return soap_in_tt__ReceiverMode(soap, tag, NULL, "tt:ReceiverMode");
	case SOAP_TYPE_tt__Direction:
		return soap_in_tt__Direction(soap, tag, NULL, "tt:Direction");
	case SOAP_TYPE_tt__PropertyOperation:
		return soap_in_tt__PropertyOperation(soap, tag, NULL, "tt:PropertyOperation");
	case SOAP_TYPE_tt__DefoggingMode:
		return soap_in_tt__DefoggingMode(soap, tag, NULL, "tt:DefoggingMode");
	case SOAP_TYPE_tt__ToneCompensationMode:
		return soap_in_tt__ToneCompensationMode(soap, tag, NULL, "tt:ToneCompensationMode");
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType:
		return soap_in_tt__IrCutFilterAutoBoundaryType(soap, tag, NULL, "tt:IrCutFilterAutoBoundaryType");
	case SOAP_TYPE_tt__ImageStabilizationMode:
		return soap_in_tt__ImageStabilizationMode(soap, tag, NULL, "tt:ImageStabilizationMode");
	case SOAP_TYPE_tt__IrCutFilterMode:
		return soap_in_tt__IrCutFilterMode(soap, tag, NULL, "tt:IrCutFilterMode");
	case SOAP_TYPE_tt__WhiteBalanceMode:
		return soap_in_tt__WhiteBalanceMode(soap, tag, NULL, "tt:WhiteBalanceMode");
	case SOAP_TYPE_tt__Enabled:
		return soap_in_tt__Enabled(soap, tag, NULL, "tt:Enabled");
	case SOAP_TYPE_tt__ExposureMode:
		return soap_in_tt__ExposureMode(soap, tag, NULL, "tt:ExposureMode");
	case SOAP_TYPE_tt__ExposurePriority:
		return soap_in_tt__ExposurePriority(soap, tag, NULL, "tt:ExposurePriority");
	case SOAP_TYPE_tt__BacklightCompensationMode:
		return soap_in_tt__BacklightCompensationMode(soap, tag, NULL, "tt:BacklightCompensationMode");
	case SOAP_TYPE_tt__WideDynamicMode:
		return soap_in_tt__WideDynamicMode(soap, tag, NULL, "tt:WideDynamicMode");
	case SOAP_TYPE_tt__AutoFocusMode:
		return soap_in_tt__AutoFocusMode(soap, tag, NULL, "tt:AutoFocusMode");
	case SOAP_TYPE_tt__PTZPresetTourOperation:
		return soap_in_tt__PTZPresetTourOperation(soap, tag, NULL, "tt:PTZPresetTourOperation");
	case SOAP_TYPE_tt__PTZPresetTourDirection:
		return soap_in_tt__PTZPresetTourDirection(soap, tag, NULL, "tt:PTZPresetTourDirection");
	case SOAP_TYPE_tt__PTZPresetTourState:
		return soap_in_tt__PTZPresetTourState(soap, tag, NULL, "tt:PTZPresetTourState");
	case SOAP_TYPE_tt__ReverseMode:
		return soap_in_tt__ReverseMode(soap, tag, NULL, "tt:ReverseMode");
	case SOAP_TYPE_tt__EFlipMode:
		return soap_in_tt__EFlipMode(soap, tag, NULL, "tt:EFlipMode");
	case SOAP_TYPE_tt__DigitalIdleState:
		return soap_in_tt__DigitalIdleState(soap, tag, NULL, "tt:DigitalIdleState");
	case SOAP_TYPE_tt__RelayMode:
		return soap_in_tt__RelayMode(soap, tag, NULL, "tt:RelayMode");
	case SOAP_TYPE_tt__RelayIdleState:
		return soap_in_tt__RelayIdleState(soap, tag, NULL, "tt:RelayIdleState");
	case SOAP_TYPE_tt__RelayLogicalState:
		return soap_in_tt__RelayLogicalState(soap, tag, NULL, "tt:RelayLogicalState");
	case SOAP_TYPE_tt__UserLevel:
		return soap_in_tt__UserLevel(soap, tag, NULL, "tt:UserLevel");
	case SOAP_TYPE_tt__SetDateTimeType:
		return soap_in_tt__SetDateTimeType(soap, tag, NULL, "tt:SetDateTimeType");
	case SOAP_TYPE_tt__FactoryDefaultType:
		return soap_in_tt__FactoryDefaultType(soap, tag, NULL, "tt:FactoryDefaultType");
	case SOAP_TYPE_tt__SystemLogType:
		return soap_in_tt__SystemLogType(soap, tag, NULL, "tt:SystemLogType");
	case SOAP_TYPE_tt__CapabilityCategory:
		return soap_in_tt__CapabilityCategory(soap, tag, NULL, "tt:CapabilityCategory");
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite:
		return soap_in_tt__Dot11AuthAndMangementSuite(soap, tag, NULL, "tt:Dot11AuthAndMangementSuite");
	case SOAP_TYPE_tt__Dot11SignalStrength:
		return soap_in_tt__Dot11SignalStrength(soap, tag, NULL, "tt:Dot11SignalStrength");
	case SOAP_TYPE_tt__Dot11Cipher:
		return soap_in_tt__Dot11Cipher(soap, tag, NULL, "tt:Dot11Cipher");
	case SOAP_TYPE_tt__Dot11SecurityMode:
		return soap_in_tt__Dot11SecurityMode(soap, tag, NULL, "tt:Dot11SecurityMode");
	case SOAP_TYPE_tt__Dot11StationMode:
		return soap_in_tt__Dot11StationMode(soap, tag, NULL, "tt:Dot11StationMode");
	case SOAP_TYPE_tt__DynamicDNSType:
		return soap_in_tt__DynamicDNSType(soap, tag, NULL, "tt:DynamicDNSType");
	case SOAP_TYPE_tt__IPAddressFilterType:
		return soap_in_tt__IPAddressFilterType(soap, tag, NULL, "tt:IPAddressFilterType");
	case SOAP_TYPE_tt__IPType:
		return soap_in_tt__IPType(soap, tag, NULL, "tt:IPType");
	case SOAP_TYPE_tt__NetworkHostType:
		return soap_in_tt__NetworkHostType(soap, tag, NULL, "tt:NetworkHostType");
	case SOAP_TYPE_tt__NetworkProtocolType:
		return soap_in_tt__NetworkProtocolType(soap, tag, NULL, "tt:NetworkProtocolType");
	case SOAP_TYPE_tt__IPv6DHCPConfiguration:
		return soap_in_tt__IPv6DHCPConfiguration(soap, tag, NULL, "tt:IPv6DHCPConfiguration");
	case SOAP_TYPE_tt__Duplex:
		return soap_in_tt__Duplex(soap, tag, NULL, "tt:Duplex");
	case SOAP_TYPE_tt__DiscoveryMode:
		return soap_in_tt__DiscoveryMode(soap, tag, NULL, "tt:DiscoveryMode");
	case SOAP_TYPE_tt__ScopeDefinition:
		return soap_in_tt__ScopeDefinition(soap, tag, NULL, "tt:ScopeDefinition");
	case SOAP_TYPE_tt__TransportProtocol:
		return soap_in_tt__TransportProtocol(soap, tag, NULL, "tt:TransportProtocol");
	case SOAP_TYPE_tt__StreamType:
		return soap_in_tt__StreamType(soap, tag, NULL, "tt:StreamType");
	case SOAP_TYPE_tt__MetadataCompressionType:
		return soap_in_tt__MetadataCompressionType(soap, tag, NULL, "tt:MetadataCompressionType");
	case SOAP_TYPE_tt__AudioEncodingMimeNames:
		return soap_in_tt__AudioEncodingMimeNames(soap, tag, NULL, "tt:AudioEncodingMimeNames");
	case SOAP_TYPE_tt__AudioEncoding:
		return soap_in_tt__AudioEncoding(soap, tag, NULL, "tt:AudioEncoding");
	case SOAP_TYPE_tt__VideoEncodingProfiles:
		return soap_in_tt__VideoEncodingProfiles(soap, tag, NULL, "tt:VideoEncodingProfiles");
	case SOAP_TYPE_tt__VideoEncodingMimeNames:
		return soap_in_tt__VideoEncodingMimeNames(soap, tag, NULL, "tt:VideoEncodingMimeNames");
	case SOAP_TYPE_tt__H264Profile:
		return soap_in_tt__H264Profile(soap, tag, NULL, "tt:H264Profile");
	case SOAP_TYPE_tt__Mpeg4Profile:
		return soap_in_tt__Mpeg4Profile(soap, tag, NULL, "tt:Mpeg4Profile");
	case SOAP_TYPE_tt__VideoEncoding:
		return soap_in_tt__VideoEncoding(soap, tag, NULL, "tt:VideoEncoding");
	case SOAP_TYPE_tt__ViewModes:
		return soap_in_tt__ViewModes(soap, tag, NULL, "tt:ViewModes");
	case SOAP_TYPE_tt__SceneOrientationOption:
		return soap_in_tt__SceneOrientationOption(soap, tag, NULL, "tt:SceneOrientationOption");
	case SOAP_TYPE_tt__SceneOrientationMode:
		return soap_in_tt__SceneOrientationMode(soap, tag, NULL, "tt:SceneOrientationMode");
	case SOAP_TYPE_tt__RotateMode:
		return soap_in_tt__RotateMode(soap, tag, NULL, "tt:RotateMode");
	case SOAP_TYPE_tds__StorageType:
		return soap_in_tds__StorageType(soap, tag, NULL, "tds:StorageType");
	case SOAP_TYPE_tds__AutoGeoModes:
		return soap_in_tds__AutoGeoModes(soap, tag, NULL, "tds:AutoGeoModes");
	case SOAP_TYPE_tns1__dummy:
		return soap_in_tns1__dummy(soap, tag, NULL, "tns1:dummy");
	case SOAP_TYPE_dn__dummy:
		return soap_in_dn__dummy(soap, tag, NULL, "dn:dummy");
	case SOAP_TYPE__wsd__Types:
		return soap_in__wsd__Types(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_tt__RecordingJobReference__:
		return soap_in_tt__RecordingJobReference__(soap, tag, NULL, "tt:RecordingJobReference");
	case SOAP_TYPE_tt__RecordingJobReference:
		return soap_in_tt__RecordingJobReference(soap, tag, NULL, "tt:RecordingJobReference");
	case SOAP_TYPE_tt__JobToken__:
		return soap_in_tt__JobToken__(soap, tag, NULL, "tt:JobToken");
	case SOAP_TYPE_tt__JobToken:
		return soap_in_tt__JobToken(soap, tag, NULL, "tt:JobToken");
	case SOAP_TYPE_tt__TrackReference__:
		return soap_in_tt__TrackReference__(soap, tag, NULL, "tt:TrackReference");
	case SOAP_TYPE_tt__TrackReference:
		return soap_in_tt__TrackReference(soap, tag, NULL, "tt:TrackReference");
	case SOAP_TYPE_tt__RecordingReference__:
		return soap_in_tt__RecordingReference__(soap, tag, NULL, "tt:RecordingReference");
	case SOAP_TYPE_tt__RecordingReference:
		return soap_in_tt__RecordingReference(soap, tag, NULL, "tt:RecordingReference");
	case SOAP_TYPE_tt__ReceiverReference__:
		return soap_in_tt__ReceiverReference__(soap, tag, NULL, "tt:ReceiverReference");
	case SOAP_TYPE_tt__ReceiverReference:
		return soap_in_tt__ReceiverReference(soap, tag, NULL, "tt:ReceiverReference");
	case SOAP_TYPE_wsa__FaultSubcodeValues__:
		return soap_in_wsa__FaultSubcodeValues__(soap, tag, NULL, "wsa:FaultSubcodeValues");
	case SOAP_TYPE_wsa__RelationshipTypeValues__:
		return soap_in_wsa__RelationshipTypeValues__(soap, tag, NULL, "wsa:RelationshipTypeValues");
	case SOAP_TYPE_wsd__FaultCodeType__:
		return soap_in_wsd__FaultCodeType__(soap, tag, NULL, "wsd:FaultCodeType");
	case SOAP_TYPE_wsd__RelationshipType__:
		return soap_in_wsd__RelationshipType__(soap, tag, NULL, "wsd:RelationshipType");
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		return soap_in_wstop__SimpleTopicExpression__(soap, tag, NULL, "wstop:SimpleTopicExpression");
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		return soap_in_wstop__SimpleTopicExpression(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		return soap_in_wstop__ConcreteTopicExpression__(soap, tag, NULL, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		return soap_in_wstop__ConcreteTopicExpression(soap, tag, NULL, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression__:
		return soap_in_wstop__FullTopicExpression__(soap, tag, NULL, "wstop:FullTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression:
		return soap_in_wstop__FullTopicExpression(soap, tag, NULL, "wstop:FullTopicExpression");
	case SOAP_TYPE_tt__Entity__:
		return soap_in_tt__Entity__(soap, tag, NULL, "tt:Entity");
	case SOAP_TYPE_tt__MoveStatus__:
		return soap_in_tt__MoveStatus__(soap, tag, NULL, "tt:MoveStatus");
	case SOAP_TYPE_tt__ReferenceToken__:
		return soap_in_tt__ReferenceToken__(soap, tag, NULL, "tt:ReferenceToken");
	case SOAP_TYPE_tt__ReferenceToken:
		return soap_in_tt__ReferenceToken(soap, tag, NULL, "tt:ReferenceToken");
	case SOAP_TYPE_tt__OSDType__:
		return soap_in_tt__OSDType__(soap, tag, NULL, "tt:OSDType");
	case SOAP_TYPE_tt__AudioClassType__:
		return soap_in_tt__AudioClassType__(soap, tag, NULL, "tt:AudioClassType");
	case SOAP_TYPE_tt__AudioClassType:
		return soap_in_tt__AudioClassType(soap, tag, NULL, "tt:AudioClassType");
	case SOAP_TYPE_tt__ModeOfOperation__:
		return soap_in_tt__ModeOfOperation__(soap, tag, NULL, "tt:ModeOfOperation");
	case SOAP_TYPE_tt__RecordingJobState__:
		return soap_in_tt__RecordingJobState__(soap, tag, NULL, "tt:RecordingJobState");
	case SOAP_TYPE_tt__RecordingJobState:
		return soap_in_tt__RecordingJobState(soap, tag, NULL, "tt:RecordingJobState");
	case SOAP_TYPE_tt__RecordingJobMode__:
		return soap_in_tt__RecordingJobMode__(soap, tag, NULL, "tt:RecordingJobMode");
	case SOAP_TYPE_tt__RecordingJobMode:
		return soap_in_tt__RecordingJobMode(soap, tag, NULL, "tt:RecordingJobMode");
	case SOAP_TYPE_tt__TrackType__:
		return soap_in_tt__TrackType__(soap, tag, NULL, "tt:TrackType");
	case SOAP_TYPE_tt__RecordingStatus__:
		return soap_in_tt__RecordingStatus__(soap, tag, NULL, "tt:RecordingStatus");
	case SOAP_TYPE_tt__SearchState__:
		return soap_in_tt__SearchState__(soap, tag, NULL, "tt:SearchState");
	case SOAP_TYPE_tt__XPathExpression__:
		return soap_in_tt__XPathExpression__(soap, tag, NULL, "tt:XPathExpression");
	case SOAP_TYPE_tt__XPathExpression:
		return soap_in_tt__XPathExpression(soap, tag, NULL, "tt:XPathExpression");
	case SOAP_TYPE_tt__Description__:
		return soap_in_tt__Description__(soap, tag, NULL, "tt:Description");
	case SOAP_TYPE_tt__Description:
		return soap_in_tt__Description(soap, tag, NULL, "tt:Description");
	case SOAP_TYPE_tt__ReceiverState__:
		return soap_in_tt__ReceiverState__(soap, tag, NULL, "tt:ReceiverState");
	case SOAP_TYPE_tt__ReceiverMode__:
		return soap_in_tt__ReceiverMode__(soap, tag, NULL, "tt:ReceiverMode");
	case SOAP_TYPE_tt__Direction__:
		return soap_in_tt__Direction__(soap, tag, NULL, "tt:Direction");
	case SOAP_TYPE_tt__PropertyOperation__:
		return soap_in_tt__PropertyOperation__(soap, tag, NULL, "tt:PropertyOperation");
	case SOAP_TYPE_tt__TopicNamespaceLocation__:
		return soap_in_tt__TopicNamespaceLocation__(soap, tag, NULL, "tt:TopicNamespaceLocation");
	case SOAP_TYPE_tt__TopicNamespaceLocation:
		return soap_in_tt__TopicNamespaceLocation(soap, tag, NULL, "tt:TopicNamespaceLocation");
	case SOAP_TYPE_tt__DefoggingMode__:
		return soap_in_tt__DefoggingMode__(soap, tag, NULL, "tt:DefoggingMode");
	case SOAP_TYPE_tt__ToneCompensationMode__:
		return soap_in_tt__ToneCompensationMode__(soap, tag, NULL, "tt:ToneCompensationMode");
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__:
		return soap_in_tt__IrCutFilterAutoBoundaryType__(soap, tag, NULL, "tt:IrCutFilterAutoBoundaryType");
	case SOAP_TYPE_tt__ImageStabilizationMode__:
		return soap_in_tt__ImageStabilizationMode__(soap, tag, NULL, "tt:ImageStabilizationMode");
	case SOAP_TYPE_tt__IrCutFilterMode__:
		return soap_in_tt__IrCutFilterMode__(soap, tag, NULL, "tt:IrCutFilterMode");
	case SOAP_TYPE_tt__WhiteBalanceMode__:
		return soap_in_tt__WhiteBalanceMode__(soap, tag, NULL, "tt:WhiteBalanceMode");
	case SOAP_TYPE_tt__Enabled__:
		return soap_in_tt__Enabled__(soap, tag, NULL, "tt:Enabled");
	case SOAP_TYPE_tt__ExposureMode__:
		return soap_in_tt__ExposureMode__(soap, tag, NULL, "tt:ExposureMode");
	case SOAP_TYPE_tt__ExposurePriority__:
		return soap_in_tt__ExposurePriority__(soap, tag, NULL, "tt:ExposurePriority");
	case SOAP_TYPE_tt__BacklightCompensationMode__:
		return soap_in_tt__BacklightCompensationMode__(soap, tag, NULL, "tt:BacklightCompensationMode");
	case SOAP_TYPE_tt__WideDynamicMode__:
		return soap_in_tt__WideDynamicMode__(soap, tag, NULL, "tt:WideDynamicMode");
	case SOAP_TYPE_tt__AutoFocusMode__:
		return soap_in_tt__AutoFocusMode__(soap, tag, NULL, "tt:AutoFocusMode");
	case SOAP_TYPE_tt__PTZPresetTourOperation__:
		return soap_in_tt__PTZPresetTourOperation__(soap, tag, NULL, "tt:PTZPresetTourOperation");
	case SOAP_TYPE_tt__PTZPresetTourDirection__:
		return soap_in_tt__PTZPresetTourDirection__(soap, tag, NULL, "tt:PTZPresetTourDirection");
	case SOAP_TYPE_tt__PTZPresetTourState__:
		return soap_in_tt__PTZPresetTourState__(soap, tag, NULL, "tt:PTZPresetTourState");
	case SOAP_TYPE_tt__AuxiliaryData__:
		return soap_in_tt__AuxiliaryData__(soap, tag, NULL, "tt:AuxiliaryData");
	case SOAP_TYPE_tt__AuxiliaryData:
		return soap_in_tt__AuxiliaryData(soap, tag, NULL, "tt:AuxiliaryData");
	case SOAP_TYPE_tt__ReverseMode__:
		return soap_in_tt__ReverseMode__(soap, tag, NULL, "tt:ReverseMode");
	case SOAP_TYPE_tt__EFlipMode__:
		return soap_in_tt__EFlipMode__(soap, tag, NULL, "tt:EFlipMode");
	case SOAP_TYPE_tt__DigitalIdleState__:
		return soap_in_tt__DigitalIdleState__(soap, tag, NULL, "tt:DigitalIdleState");
	case SOAP_TYPE_tt__RelayMode__:
		return soap_in_tt__RelayMode__(soap, tag, NULL, "tt:RelayMode");
	case SOAP_TYPE_tt__RelayIdleState__:
		return soap_in_tt__RelayIdleState__(soap, tag, NULL, "tt:RelayIdleState");
	case SOAP_TYPE_tt__RelayLogicalState__:
		return soap_in_tt__RelayLogicalState__(soap, tag, NULL, "tt:RelayLogicalState");
	case SOAP_TYPE_tt__UserLevel__:
		return soap_in_tt__UserLevel__(soap, tag, NULL, "tt:UserLevel");
	case SOAP_TYPE_tt__SetDateTimeType__:
		return soap_in_tt__SetDateTimeType__(soap, tag, NULL, "tt:SetDateTimeType");
	case SOAP_TYPE_tt__FactoryDefaultType__:
		return soap_in_tt__FactoryDefaultType__(soap, tag, NULL, "tt:FactoryDefaultType");
	case SOAP_TYPE_tt__SystemLogType__:
		return soap_in_tt__SystemLogType__(soap, tag, NULL, "tt:SystemLogType");
	case SOAP_TYPE_tt__CapabilityCategory__:
		return soap_in_tt__CapabilityCategory__(soap, tag, NULL, "tt:CapabilityCategory");
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite__:
		return soap_in_tt__Dot11AuthAndMangementSuite__(soap, tag, NULL, "tt:Dot11AuthAndMangementSuite");
	case SOAP_TYPE_tt__Dot11SignalStrength__:
		return soap_in_tt__Dot11SignalStrength__(soap, tag, NULL, "tt:Dot11SignalStrength");
	case SOAP_TYPE_tt__Dot11PSKPassphrase__:
		return soap_in_tt__Dot11PSKPassphrase__(soap, tag, NULL, "tt:Dot11PSKPassphrase");
	case SOAP_TYPE_tt__Dot11PSKPassphrase:
		return soap_in_tt__Dot11PSKPassphrase(soap, tag, NULL, "tt:Dot11PSKPassphrase");
	case SOAP_TYPE_tt__Dot11PSK__:
		return soap_in_tt__Dot11PSK__(soap, tag, NULL, "tt:Dot11PSK");
	case SOAP_TYPE_tt__Dot11PSK:
		return soap_in_tt__Dot11PSK(soap, tag, NULL, "tt:Dot11PSK");
	case SOAP_TYPE_tt__Dot11Cipher__:
		return soap_in_tt__Dot11Cipher__(soap, tag, NULL, "tt:Dot11Cipher");
	case SOAP_TYPE_tt__Dot11SecurityMode__:
		return soap_in_tt__Dot11SecurityMode__(soap, tag, NULL, "tt:Dot11SecurityMode");
	case SOAP_TYPE_tt__Dot11StationMode__:
		return soap_in_tt__Dot11StationMode__(soap, tag, NULL, "tt:Dot11StationMode");
	case SOAP_TYPE_tt__Dot11SSIDType__:
		return soap_in_tt__Dot11SSIDType__(soap, tag, NULL, "tt:Dot11SSIDType");
	case SOAP_TYPE_tt__Dot11SSIDType:
		return soap_in_tt__Dot11SSIDType(soap, tag, NULL, "tt:Dot11SSIDType");
	case SOAP_TYPE_tt__DynamicDNSType__:
		return soap_in_tt__DynamicDNSType__(soap, tag, NULL, "tt:DynamicDNSType");
	case SOAP_TYPE_tt__IPAddressFilterType__:
		return soap_in_tt__IPAddressFilterType__(soap, tag, NULL, "tt:IPAddressFilterType");
	case SOAP_TYPE_tt__Domain__:
		return soap_in_tt__Domain__(soap, tag, NULL, "tt:Domain");
	case SOAP_TYPE_tt__Domain:
		return soap_in_tt__Domain(soap, tag, NULL, "tt:Domain");
	case SOAP_TYPE_tt__DNSName__:
		return soap_in_tt__DNSName__(soap, tag, NULL, "tt:DNSName");
	case SOAP_TYPE_tt__DNSName:
		return soap_in_tt__DNSName(soap, tag, NULL, "tt:DNSName");
	case SOAP_TYPE_tt__IPType__:
		return soap_in_tt__IPType__(soap, tag, NULL, "tt:IPType");
	case SOAP_TYPE_tt__HwAddress__:
		return soap_in_tt__HwAddress__(soap, tag, NULL, "tt:HwAddress");
	case SOAP_TYPE_tt__HwAddress:
		return soap_in_tt__HwAddress(soap, tag, NULL, "tt:HwAddress");
	case SOAP_TYPE_tt__IPv6Address__:
		return soap_in_tt__IPv6Address__(soap, tag, NULL, "tt:IPv6Address");
	case SOAP_TYPE_tt__IPv6Address:
		return soap_in_tt__IPv6Address(soap, tag, NULL, "tt:IPv6Address");
	case SOAP_TYPE_tt__IPv4Address__:
		return soap_in_tt__IPv4Address__(soap, tag, NULL, "tt:IPv4Address");
	case SOAP_TYPE_tt__IPv4Address:
		return soap_in_tt__IPv4Address(soap, tag, NULL, "tt:IPv4Address");
	case SOAP_TYPE_tt__NetworkHostType__:
		return soap_in_tt__NetworkHostType__(soap, tag, NULL, "tt:NetworkHostType");
	case SOAP_TYPE_tt__NetworkProtocolType__:
		return soap_in_tt__NetworkProtocolType__(soap, tag, NULL, "tt:NetworkProtocolType");
	case SOAP_TYPE_tt__IPv6DHCPConfiguration__:
		return soap_in_tt__IPv6DHCPConfiguration__(soap, tag, NULL, "tt:IPv6DHCPConfiguration");
	case SOAP_TYPE_tt__IANA_IfTypes__:
		return soap_in_tt__IANA_IfTypes__(soap, tag, NULL, "tt:IANA-IfTypes");
	case SOAP_TYPE_tt__Duplex__:
		return soap_in_tt__Duplex__(soap, tag, NULL, "tt:Duplex");
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority__:
		return soap_in_tt__NetworkInterfaceConfigPriority__(soap, tag, NULL, "tt:NetworkInterfaceConfigPriority");
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority:
		return soap_in_tt__NetworkInterfaceConfigPriority(soap, tag, NULL, "tt:NetworkInterfaceConfigPriority");
	case SOAP_TYPE_tt__DiscoveryMode__:
		return soap_in_tt__DiscoveryMode__(soap, tag, NULL, "tt:DiscoveryMode");
	case SOAP_TYPE_tt__ScopeDefinition__:
		return soap_in_tt__ScopeDefinition__(soap, tag, NULL, "tt:ScopeDefinition");
	case SOAP_TYPE_tt__TransportProtocol__:
		return soap_in_tt__TransportProtocol__(soap, tag, NULL, "tt:TransportProtocol");
	case SOAP_TYPE_tt__StreamType__:
		return soap_in_tt__StreamType__(soap, tag, NULL, "tt:StreamType");
	case SOAP_TYPE_tt__MetadataCompressionType__:
		return soap_in_tt__MetadataCompressionType__(soap, tag, NULL, "tt:MetadataCompressionType");
	case SOAP_TYPE_tt__AudioEncodingMimeNames__:
		return soap_in_tt__AudioEncodingMimeNames__(soap, tag, NULL, "tt:AudioEncodingMimeNames");
	case SOAP_TYPE_tt__AudioEncoding__:
		return soap_in_tt__AudioEncoding__(soap, tag, NULL, "tt:AudioEncoding");
	case SOAP_TYPE_tt__VideoEncodingProfiles__:
		return soap_in_tt__VideoEncodingProfiles__(soap, tag, NULL, "tt:VideoEncodingProfiles");
	case SOAP_TYPE_tt__VideoEncodingMimeNames__:
		return soap_in_tt__VideoEncodingMimeNames__(soap, tag, NULL, "tt:VideoEncodingMimeNames");
	case SOAP_TYPE_tt__H264Profile__:
		return soap_in_tt__H264Profile__(soap, tag, NULL, "tt:H264Profile");
	case SOAP_TYPE_tt__Mpeg4Profile__:
		return soap_in_tt__Mpeg4Profile__(soap, tag, NULL, "tt:Mpeg4Profile");
	case SOAP_TYPE_tt__VideoEncoding__:
		return soap_in_tt__VideoEncoding__(soap, tag, NULL, "tt:VideoEncoding");
	case SOAP_TYPE_tt__ViewModes__:
		return soap_in_tt__ViewModes__(soap, tag, NULL, "tt:ViewModes");
	case SOAP_TYPE_tt__SceneOrientationOption__:
		return soap_in_tt__SceneOrientationOption__(soap, tag, NULL, "tt:SceneOrientationOption");
	case SOAP_TYPE_tt__SceneOrientationMode__:
		return soap_in_tt__SceneOrientationMode__(soap, tag, NULL, "tt:SceneOrientationMode");
	case SOAP_TYPE_tt__RotateMode__:
		return soap_in_tt__RotateMode__(soap, tag, NULL, "tt:RotateMode");
	case SOAP_TYPE_tt__Name__:
		return soap_in_tt__Name__(soap, tag, NULL, "tt:Name");
	case SOAP_TYPE_tt__Name:
		return soap_in_tt__Name(soap, tag, NULL, "tt:Name");
	case SOAP_TYPE_tds__StorageType__:
		return soap_in_tds__StorageType__(soap, tag, NULL, "tds:StorageType");
	case SOAP_TYPE_tds__AutoGeoModes__:
		return soap_in_tds__AutoGeoModes__(soap, tag, NULL, "tds:AutoGeoModes");
	case SOAP_TYPE_wsd__FaultCodeOpenType:
		return soap_in_wsd__FaultCodeOpenType(soap, tag, NULL, "wsd:FaultCodeOpenType");
	case SOAP_TYPE_wsd__UriListType:
		return soap_in_wsd__UriListType(soap, tag, NULL, "wsd:UriListType");
	case SOAP_TYPE_wsd__QNameListType:
		return soap_in_wsd__QNameListType(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_wsd__OpenRelationshipType:
		return soap_in_wsd__OpenRelationshipType(soap, tag, NULL, "wsd:OpenRelationshipType");
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		return soap_in_wsnt__AbsoluteOrRelativeTimeType(soap, tag, NULL, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_tt__ReferenceTokenList:
		return soap_in_tt__ReferenceTokenList(soap, tag, NULL, "tt:ReferenceTokenList");
	case SOAP_TYPE_tt__StringAttrList:
		return soap_in_tt__StringAttrList(soap, tag, NULL, "tt:StringAttrList");
	case SOAP_TYPE_tt__FloatAttrList:
		return soap_in_tt__FloatAttrList(soap, tag, NULL, "tt:FloatAttrList");
	case SOAP_TYPE_tt__IntAttrList:
		return soap_in_tt__IntAttrList(soap, tag, NULL, "tt:IntAttrList");
	case SOAP_TYPE_tds__EAPMethodTypes:
		return soap_in_tds__EAPMethodTypes(soap, tag, NULL, "tds:EAPMethodTypes");
	case SOAP_TYPE_tmk__VideoSurveillanceSystem:
		return soap_in_tmk__VideoSurveillanceSystem(soap, tag, NULL, "tmk:VideoSurveillanceSystem");
	case SOAP_TYPE_tmk__MetalDetector:
		return soap_in_tmk__MetalDetector(soap, tag, NULL, "tmk:MetalDetector");
	case SOAP_TYPE_tmk__SteamDetector:
		return soap_in_tmk__SteamDetector(soap, tag, NULL, "tmk:SteamDetector");
	case SOAP_TYPE_tmk__RadiationMonitoring:
		return soap_in_tmk__RadiationMonitoring(soap, tag, NULL, "tmk:RadiationMonitoring");
	case SOAP_TYPE_tmk__NeutronProbing:
		return soap_in_tmk__NeutronProbing(soap, tag, NULL, "tmk:NeutronProbing");
	case SOAP_TYPE_tmk__Introscopy:
		return soap_in_tmk__Introscopy(soap, tag, NULL, "tmk:Introscopy");
	case SOAP_TYPE_tmk__GasAnalysis:
		return soap_in_tmk__GasAnalysis(soap, tag, NULL, "tmk:GasAnalysis");
	case SOAP_TYPE_tmk__FireAlarm:
		return soap_in_tmk__FireAlarm(soap, tag, NULL, "tmk:FireAlarm");
	case SOAP_TYPE_tmk__AccessControl:
		return soap_in_tmk__AccessControl(soap, tag, NULL, "tmk:AccessControl");
	case SOAP_TYPE_wsa__AttributedURI:
		return soap_in_wsa__AttributedURI(soap, tag, NULL, "wsa:AttributedURI");
	case SOAP_TYPE_wsa__AttributedQName:
		return soap_in_wsa__AttributedQName(soap, tag, NULL, "wsa:AttributedQName");
	case SOAP_TYPE_wsa__RetryAfterType:
		return soap_in_wsa__RetryAfterType(soap, tag, NULL, "wsa:RetryAfterType");
	case SOAP_TYPE_wsa__ReplyAfterType:
		return soap_in_wsa__ReplyAfterType(soap, tag, NULL, "wsa:ReplyAfterType");
	case SOAP_TYPE_wsa__Relationship:
		return soap_in_wsa__Relationship(soap, tag, NULL, "wsa:Relationship");
	case SOAP_TYPE_wsa__ServiceNameType:
		return soap_in_wsa__ServiceNameType(soap, tag, NULL, "wsa:ServiceNameType");
	case SOAP_TYPE_wsa__ReferenceParametersType:
		return soap_in_wsa__ReferenceParametersType(soap, tag, NULL, "wsa:ReferenceParametersType");
	case SOAP_TYPE_wsa__ReferencePropertiesType:
		return soap_in_wsa__ReferencePropertiesType(soap, tag, NULL, "wsa:ReferencePropertiesType");
	case SOAP_TYPE_wsa__EndpointReferenceType:
		return soap_in_wsa__EndpointReferenceType(soap, tag, NULL, "wsa:EndpointReferenceType");
	case SOAP_TYPE_wsd__AppSequenceType:
		return soap_in_wsd__AppSequenceType(soap, tag, NULL, "wsd:AppSequenceType");
	case SOAP_TYPE_wsd__SigType:
		return soap_in_wsd__SigType(soap, tag, NULL, "wsd:SigType");
	case SOAP_TYPE_wsd__SecurityType:
		return soap_in_wsd__SecurityType(soap, tag, NULL, "wsd:SecurityType");
	case SOAP_TYPE_wsd__ScopesType:
		return soap_in_wsd__ScopesType(soap, tag, NULL, "wsd:ScopesType");
	case SOAP_TYPE_wsd__ResolveMatchType:
		return soap_in_wsd__ResolveMatchType(soap, tag, NULL, "wsd:ResolveMatchType");
	case SOAP_TYPE_wsd__ResolveMatchesType:
		return soap_in_wsd__ResolveMatchesType(soap, tag, NULL, "wsd:ResolveMatchesType");
	case SOAP_TYPE_wsd__ResolveType:
		return soap_in_wsd__ResolveType(soap, tag, NULL, "wsd:ResolveType");
	case SOAP_TYPE_wsd__ProbeMatchType:
		return soap_in_wsd__ProbeMatchType(soap, tag, NULL, "wsd:ProbeMatchType");
	case SOAP_TYPE_wsd__ByeType:
		return soap_in_wsd__ByeType(soap, tag, NULL, "wsd:ByeType");
	case SOAP_TYPE_wsd__HelloType:
		return soap_in_wsd__HelloType(soap, tag, NULL, "wsd:HelloType");
	case SOAP_TYPE_wsrf__ResourceUnavailableFaultType:
		return soap_in_wsrf__ResourceUnavailableFaultType(soap, tag, NULL, "wsrf:ResourceUnavailableFaultType");
	case SOAP_TYPE_wsrf__ResourceUnknownFaultType:
		return soap_in_wsrf__ResourceUnknownFaultType(soap, tag, NULL, "wsrf:ResourceUnknownFaultType");
	case SOAP_TYPE_tev__SubscriptionPolicy:
		return soap_in_tev__SubscriptionPolicy(soap, tag, NULL, "tev:SubscriptionPolicy");
	case SOAP_TYPE_tev__Capabilities:
		return soap_in_tev__Capabilities(soap, tag, NULL, "tev:Capabilities");
	case SOAP_TYPE_wstop__TopicSetType:
		return soap_in_wstop__TopicSetType(soap, tag, NULL, "wstop:TopicSetType");
	case SOAP_TYPE_wstop__TopicType:
		return soap_in_wstop__TopicType(soap, tag, NULL, "wstop:TopicType");
	case SOAP_TYPE_wstop__TopicNamespaceType:
		return soap_in_wstop__TopicNamespaceType(soap, tag, NULL, "wstop:TopicNamespaceType");
	case SOAP_TYPE_wstop__QueryExpressionType:
		return soap_in_wstop__QueryExpressionType(soap, tag, NULL, "wstop:QueryExpressionType");
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		return soap_in_wstop__ExtensibleDocumented(soap, tag, NULL, "wstop:ExtensibleDocumented");
	case SOAP_TYPE_wstop__Documentation:
		return soap_in_wstop__Documentation(soap, tag, NULL, "wstop:Documentation");
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		return soap_in_wsrfbf__BaseFaultType(soap, tag, NULL, "wsrfbf:BaseFaultType");
	case SOAP_TYPE_xop__Include:
		return soap_in_xop__Include(soap, tag, NULL, "xop:Include");
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		return soap_in_wsnt__ResumeFailedFaultType(soap, tag, NULL, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		return soap_in_wsnt__PauseFailedFaultType(soap, tag, NULL, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		return soap_in_wsnt__UnableToDestroySubscriptionFaultType(soap, tag, NULL, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		return soap_in_wsnt__UnacceptableTerminationTimeFaultType(soap, tag, NULL, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		return soap_in_wsnt__UnableToCreatePullPointFaultType(soap, tag, NULL, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		return soap_in_wsnt__UnableToDestroyPullPointFaultType(soap, tag, NULL, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		return soap_in_wsnt__UnableToGetMessagesFaultType(soap, tag, NULL, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		return soap_in_wsnt__NoCurrentMessageOnTopicFaultType(soap, tag, NULL, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		return soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, NULL, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		return soap_in_wsnt__NotifyMessageNotSupportedFaultType(soap, tag, NULL, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		return soap_in_wsnt__UnsupportedPolicyRequestFaultType(soap, tag, NULL, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		return soap_in_wsnt__UnrecognizedPolicyRequestFaultType(soap, tag, NULL, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		return soap_in_wsnt__InvalidMessageContentExpressionFaultType(soap, tag, NULL, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		return soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, NULL, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		return soap_in_wsnt__MultipleTopicsSpecifiedFaultType(soap, tag, NULL, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		return soap_in_wsnt__TopicNotSupportedFaultType(soap, tag, NULL, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		return soap_in_wsnt__InvalidTopicExpressionFaultType(soap, tag, NULL, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		return soap_in_wsnt__TopicExpressionDialectUnknownFaultType(soap, tag, NULL, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		return soap_in_wsnt__InvalidFilterFaultType(soap, tag, NULL, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		return soap_in_wsnt__SubscribeCreationFailedFaultType(soap, tag, NULL, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		return soap_in_wsnt__NotificationMessageHolderType(soap, tag, NULL, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		return soap_in_wsnt__SubscriptionPolicyType(soap, tag, NULL, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_wsnt__FilterType:
		return soap_in_wsnt__FilterType(soap, tag, NULL, "wsnt:FilterType");
	case SOAP_TYPE_wsnt__TopicExpressionTypeCustom:
		return soap_in_wsnt__TopicExpressionTypeCustom(soap, tag, NULL, "wsnt:TopicExpressionTypeCustom");
	case SOAP_TYPE_wsnt__QueryExpressionType:
		return soap_in_wsnt__QueryExpressionType(soap, tag, NULL, "wsnt:QueryExpressionType");
	case SOAP_TYPE_tt__LocationEntity:
		return soap_in_tt__LocationEntity(soap, tag, NULL, "tt:LocationEntity");
	case SOAP_TYPE_tt__LocalOrientation:
		return soap_in_tt__LocalOrientation(soap, tag, NULL, "tt:LocalOrientation");
	case SOAP_TYPE_tt__LocalLocation:
		return soap_in_tt__LocalLocation(soap, tag, NULL, "tt:LocalLocation");
	case SOAP_TYPE_tt__GeoOrientation:
		return soap_in_tt__GeoOrientation(soap, tag, NULL, "tt:GeoOrientation");
	case SOAP_TYPE_tt__GeoLocation:
		return soap_in_tt__GeoLocation(soap, tag, NULL, "tt:GeoLocation");
	case SOAP_TYPE_tt__TransformationExtension:
		return soap_in_tt__TransformationExtension(soap, tag, NULL, "tt:TransformationExtension");
	case SOAP_TYPE_tt__Transformation:
		return soap_in_tt__Transformation(soap, tag, NULL, "tt:Transformation");
	case SOAP_TYPE_tt__ColorCovariance:
		return soap_in_tt__ColorCovariance(soap, tag, NULL, "tt:ColorCovariance");
	case SOAP_TYPE_tt__Color:
		return soap_in_tt__Color(soap, tag, NULL, "tt:Color");
	case SOAP_TYPE_tt__Polygon:
		return soap_in_tt__Polygon(soap, tag, NULL, "tt:Polygon");
	case SOAP_TYPE_tt__Rectangle:
		return soap_in_tt__Rectangle(soap, tag, NULL, "tt:Rectangle");
	case SOAP_TYPE_tt__Vector:
		return soap_in_tt__Vector(soap, tag, NULL, "tt:Vector");
	case SOAP_TYPE_tt__PTZMoveStatus:
		return soap_in_tt__PTZMoveStatus(soap, tag, NULL, "tt:PTZMoveStatus");
	case SOAP_TYPE_tt__PTZStatus:
		return soap_in_tt__PTZStatus(soap, tag, NULL, "tt:PTZStatus");
	case SOAP_TYPE_tt__PTZVector:
		return soap_in_tt__PTZVector(soap, tag, NULL, "tt:PTZVector");
	case SOAP_TYPE_tt__Vector1D:
		return soap_in_tt__Vector1D(soap, tag, NULL, "tt:Vector1D");
	case SOAP_TYPE_tt__Vector2D:
		return soap_in_tt__Vector2D(soap, tag, NULL, "tt:Vector2D");
	case SOAP_TYPE_tt__StorageReferencePathExtension:
		return soap_in_tt__StorageReferencePathExtension(soap, tag, NULL, "tt:StorageReferencePathExtension");
	case SOAP_TYPE_tt__StorageReferencePath:
		return soap_in_tt__StorageReferencePath(soap, tag, NULL, "tt:StorageReferencePath");
	case SOAP_TYPE_tt__ArrayOfFileProgressExtension:
		return soap_in_tt__ArrayOfFileProgressExtension(soap, tag, NULL, "tt:ArrayOfFileProgressExtension");
	case SOAP_TYPE_tt__ArrayOfFileProgress:
		return soap_in_tt__ArrayOfFileProgress(soap, tag, NULL, "tt:ArrayOfFileProgress");
	case SOAP_TYPE_tt__FileProgress:
		return soap_in_tt__FileProgress(soap, tag, NULL, "tt:FileProgress");
	case SOAP_TYPE_tt__OSDConfigurationOptionsExtension:
		return soap_in_tt__OSDConfigurationOptionsExtension(soap, tag, NULL, "tt:OSDConfigurationOptionsExtension");
	case SOAP_TYPE_tt__OSDConfigurationOptions:
		return soap_in_tt__OSDConfigurationOptions(soap, tag, NULL, "tt:OSDConfigurationOptions");
	case SOAP_TYPE_tt__MaximumNumberOfOSDs:
		return soap_in_tt__MaximumNumberOfOSDs(soap, tag, NULL, "tt:MaximumNumberOfOSDs");
	case SOAP_TYPE_tt__OSDConfigurationExtension:
		return soap_in_tt__OSDConfigurationExtension(soap, tag, NULL, "tt:OSDConfigurationExtension");
	case SOAP_TYPE_tt__OSDConfiguration:
		return soap_in_tt__OSDConfiguration(soap, tag, NULL, "tt:OSDConfiguration");
	case SOAP_TYPE_tt__OSDImgOptionsExtension:
		return soap_in_tt__OSDImgOptionsExtension(soap, tag, NULL, "tt:OSDImgOptionsExtension");
	case SOAP_TYPE_tt__OSDImgOptions:
		return soap_in_tt__OSDImgOptions(soap, tag, NULL, "tt:OSDImgOptions");
	case SOAP_TYPE_tt__OSDTextOptionsExtension:
		return soap_in_tt__OSDTextOptionsExtension(soap, tag, NULL, "tt:OSDTextOptionsExtension");
	case SOAP_TYPE_tt__OSDTextOptions:
		return soap_in_tt__OSDTextOptions(soap, tag, NULL, "tt:OSDTextOptions");
	case SOAP_TYPE_tt__OSDColorOptionsExtension:
		return soap_in_tt__OSDColorOptionsExtension(soap, tag, NULL, "tt:OSDColorOptionsExtension");
	case SOAP_TYPE_tt__OSDColorOptions:
		return soap_in_tt__OSDColorOptions(soap, tag, NULL, "tt:OSDColorOptions");
	case SOAP_TYPE_tt__ColorOptions:
		return soap_in_tt__ColorOptions(soap, tag, NULL, "tt:ColorOptions");
	case SOAP_TYPE_tt__ColorspaceRange:
		return soap_in_tt__ColorspaceRange(soap, tag, NULL, "tt:ColorspaceRange");
	case SOAP_TYPE_tt__OSDImgConfigurationExtension:
		return soap_in_tt__OSDImgConfigurationExtension(soap, tag, NULL, "tt:OSDImgConfigurationExtension");
	case SOAP_TYPE_tt__OSDImgConfiguration:
		return soap_in_tt__OSDImgConfiguration(soap, tag, NULL, "tt:OSDImgConfiguration");
	case SOAP_TYPE_tt__OSDTextConfigurationExtension:
		return soap_in_tt__OSDTextConfigurationExtension(soap, tag, NULL, "tt:OSDTextConfigurationExtension");
	case SOAP_TYPE_tt__OSDTextConfiguration:
		return soap_in_tt__OSDTextConfiguration(soap, tag, NULL, "tt:OSDTextConfiguration");
	case SOAP_TYPE_tt__OSDColor:
		return soap_in_tt__OSDColor(soap, tag, NULL, "tt:OSDColor");
	case SOAP_TYPE_tt__OSDPosConfigurationExtension:
		return soap_in_tt__OSDPosConfigurationExtension(soap, tag, NULL, "tt:OSDPosConfigurationExtension");
	case SOAP_TYPE_tt__OSDPosConfiguration:
		return soap_in_tt__OSDPosConfiguration(soap, tag, NULL, "tt:OSDPosConfiguration");
	case SOAP_TYPE_tt__OSDReference:
		return soap_in_tt__OSDReference(soap, tag, NULL, "tt:OSDReference");
	case SOAP_TYPE_tt__ProfileStatusExtension:
		return soap_in_tt__ProfileStatusExtension(soap, tag, NULL, "tt:ProfileStatusExtension");
	case SOAP_TYPE_tt__ProfileStatus:
		return soap_in_tt__ProfileStatus(soap, tag, NULL, "tt:ProfileStatus");
	case SOAP_TYPE_tt__ActiveConnection:
		return soap_in_tt__ActiveConnection(soap, tag, NULL, "tt:ActiveConnection");
	case SOAP_TYPE_tt__AudioClassDescriptorExtension:
		return soap_in_tt__AudioClassDescriptorExtension(soap, tag, NULL, "tt:AudioClassDescriptorExtension");
	case SOAP_TYPE_tt__AudioClassDescriptor:
		return soap_in_tt__AudioClassDescriptor(soap, tag, NULL, "tt:AudioClassDescriptor");
	case SOAP_TYPE_tt__AudioClassCandidate:
		return soap_in_tt__AudioClassCandidate(soap, tag, NULL, "tt:AudioClassCandidate");
	case SOAP_TYPE_tt__ActionEngineEventPayloadExtension:
		return soap_in_tt__ActionEngineEventPayloadExtension(soap, tag, NULL, "tt:ActionEngineEventPayloadExtension");
	case SOAP_TYPE_tt__ActionEngineEventPayload:
		return soap_in_tt__ActionEngineEventPayload(soap, tag, NULL, "tt:ActionEngineEventPayload");
	case SOAP_TYPE_tt__AnalyticsState:
		return soap_in_tt__AnalyticsState(soap, tag, NULL, "tt:AnalyticsState");
	case SOAP_TYPE_tt__AnalyticsStateInformation:
		return soap_in_tt__AnalyticsStateInformation(soap, tag, NULL, "tt:AnalyticsStateInformation");
	case SOAP_TYPE_tt__AnalyticsEngineControl:
		return soap_in_tt__AnalyticsEngineControl(soap, tag, NULL, "tt:AnalyticsEngineControl");
	case SOAP_TYPE_tt__MetadataInputExtension:
		return soap_in_tt__MetadataInputExtension(soap, tag, NULL, "tt:MetadataInputExtension");
	case SOAP_TYPE_tt__MetadataInput:
		return soap_in_tt__MetadataInput(soap, tag, NULL, "tt:MetadataInput");
	case SOAP_TYPE_tt__SourceIdentificationExtension:
		return soap_in_tt__SourceIdentificationExtension(soap, tag, NULL, "tt:SourceIdentificationExtension");
	case SOAP_TYPE_tt__SourceIdentification:
		return soap_in_tt__SourceIdentification(soap, tag, NULL, "tt:SourceIdentification");
	case SOAP_TYPE_tt__AnalyticsEngineInput:
		return soap_in_tt__AnalyticsEngineInput(soap, tag, NULL, "tt:AnalyticsEngineInput");
	case SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension:
		return soap_in_tt__AnalyticsEngineInputInfoExtension(soap, tag, NULL, "tt:AnalyticsEngineInputInfoExtension");
	case SOAP_TYPE_tt__AnalyticsEngineInputInfo:
		return soap_in_tt__AnalyticsEngineInputInfo(soap, tag, NULL, "tt:AnalyticsEngineInputInfo");
	case SOAP_TYPE_tt__EngineConfiguration:
		return soap_in_tt__EngineConfiguration(soap, tag, NULL, "tt:EngineConfiguration");
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension:
		return soap_in_tt__AnalyticsDeviceEngineConfigurationExtension(soap, tag, NULL, "tt:AnalyticsDeviceEngineConfigurationExtension");
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration:
		return soap_in_tt__AnalyticsDeviceEngineConfiguration(soap, tag, NULL, "tt:AnalyticsDeviceEngineConfiguration");
	case SOAP_TYPE_tt__AnalyticsEngine:
		return soap_in_tt__AnalyticsEngine(soap, tag, NULL, "tt:AnalyticsEngine");
	case SOAP_TYPE_tt__ReplayConfiguration:
		return soap_in_tt__ReplayConfiguration(soap, tag, NULL, "tt:ReplayConfiguration");
	case SOAP_TYPE_tt__GetRecordingJobsResponseItem:
		return soap_in_tt__GetRecordingJobsResponseItem(soap, tag, NULL, "tt:GetRecordingJobsResponseItem");
	case SOAP_TYPE_tt__RecordingJobStateTrack:
		return soap_in_tt__RecordingJobStateTrack(soap, tag, NULL, "tt:RecordingJobStateTrack");
	case SOAP_TYPE_tt__RecordingJobStateTracks:
		return soap_in_tt__RecordingJobStateTracks(soap, tag, NULL, "tt:RecordingJobStateTracks");
	case SOAP_TYPE_tt__RecordingJobStateSource:
		return soap_in_tt__RecordingJobStateSource(soap, tag, NULL, "tt:RecordingJobStateSource");
	case SOAP_TYPE_tt__RecordingJobStateInformationExtension:
		return soap_in_tt__RecordingJobStateInformationExtension(soap, tag, NULL, "tt:RecordingJobStateInformationExtension");
	case SOAP_TYPE_tt__RecordingJobStateInformation:
		return soap_in_tt__RecordingJobStateInformation(soap, tag, NULL, "tt:RecordingJobStateInformation");
	case SOAP_TYPE_tt__RecordingJobTrack:
		return soap_in_tt__RecordingJobTrack(soap, tag, NULL, "tt:RecordingJobTrack");
	case SOAP_TYPE_tt__RecordingJobSourceExtension:
		return soap_in_tt__RecordingJobSourceExtension(soap, tag, NULL, "tt:RecordingJobSourceExtension");
	case SOAP_TYPE_tt__RecordingJobSource:
		return soap_in_tt__RecordingJobSource(soap, tag, NULL, "tt:RecordingJobSource");
	case SOAP_TYPE_tt__RecordingJobConfigurationExtension:
		return soap_in_tt__RecordingJobConfigurationExtension(soap, tag, NULL, "tt:RecordingJobConfigurationExtension");
	case SOAP_TYPE_tt__RecordingJobConfiguration:
		return soap_in_tt__RecordingJobConfiguration(soap, tag, NULL, "tt:RecordingJobConfiguration");
	case SOAP_TYPE_tt__GetTracksResponseItem:
		return soap_in_tt__GetTracksResponseItem(soap, tag, NULL, "tt:GetTracksResponseItem");
	case SOAP_TYPE_tt__GetTracksResponseList:
		return soap_in_tt__GetTracksResponseList(soap, tag, NULL, "tt:GetTracksResponseList");
	case SOAP_TYPE_tt__GetRecordingsResponseItem:
		return soap_in_tt__GetRecordingsResponseItem(soap, tag, NULL, "tt:GetRecordingsResponseItem");
	case SOAP_TYPE_tt__TrackConfiguration:
		return soap_in_tt__TrackConfiguration(soap, tag, NULL, "tt:TrackConfiguration");
	case SOAP_TYPE_tt__RecordingConfiguration:
		return soap_in_tt__RecordingConfiguration(soap, tag, NULL, "tt:RecordingConfiguration");
	case SOAP_TYPE_tt__MetadataAttributes:
		return soap_in_tt__MetadataAttributes(soap, tag, NULL, "tt:MetadataAttributes");
	case SOAP_TYPE_tt__AudioAttributes:
		return soap_in_tt__AudioAttributes(soap, tag, NULL, "tt:AudioAttributes");
	case SOAP_TYPE_tt__VideoAttributes:
		return soap_in_tt__VideoAttributes(soap, tag, NULL, "tt:VideoAttributes");
	case SOAP_TYPE_tt__TrackAttributesExtension:
		return soap_in_tt__TrackAttributesExtension(soap, tag, NULL, "tt:TrackAttributesExtension");
	case SOAP_TYPE_tt__TrackAttributes:
		return soap_in_tt__TrackAttributes(soap, tag, NULL, "tt:TrackAttributes");
	case SOAP_TYPE_tt__MediaAttributes:
		return soap_in_tt__MediaAttributes(soap, tag, NULL, "tt:MediaAttributes");
	case SOAP_TYPE_tt__TrackInformation:
		return soap_in_tt__TrackInformation(soap, tag, NULL, "tt:TrackInformation");
	case SOAP_TYPE_tt__RecordingSourceInformation:
		return soap_in_tt__RecordingSourceInformation(soap, tag, NULL, "tt:RecordingSourceInformation");
	case SOAP_TYPE_tt__RecordingInformation:
		return soap_in_tt__RecordingInformation(soap, tag, NULL, "tt:RecordingInformation");
	case SOAP_TYPE_tt__FindMetadataResult:
		return soap_in_tt__FindMetadataResult(soap, tag, NULL, "tt:FindMetadataResult");
	case SOAP_TYPE_tt__FindMetadataResultList:
		return soap_in_tt__FindMetadataResultList(soap, tag, NULL, "tt:FindMetadataResultList");
	case SOAP_TYPE_tt__FindPTZPositionResult:
		return soap_in_tt__FindPTZPositionResult(soap, tag, NULL, "tt:FindPTZPositionResult");
	case SOAP_TYPE_tt__FindPTZPositionResultList:
		return soap_in_tt__FindPTZPositionResultList(soap, tag, NULL, "tt:FindPTZPositionResultList");
	case SOAP_TYPE_tt__FindEventResult:
		return soap_in_tt__FindEventResult(soap, tag, NULL, "tt:FindEventResult");
	case SOAP_TYPE_tt__FindEventResultList:
		return soap_in_tt__FindEventResultList(soap, tag, NULL, "tt:FindEventResultList");
	case SOAP_TYPE_tt__FindRecordingResultList:
		return soap_in_tt__FindRecordingResultList(soap, tag, NULL, "tt:FindRecordingResultList");
	case SOAP_TYPE_tt__MetadataFilter:
		return soap_in_tt__MetadataFilter(soap, tag, NULL, "tt:MetadataFilter");
	case SOAP_TYPE_tt__PTZPositionFilter:
		return soap_in_tt__PTZPositionFilter(soap, tag, NULL, "tt:PTZPositionFilter");
	case SOAP_TYPE_tt__EventFilter:
		return soap_in_tt__EventFilter(soap, tag, NULL, "tt:EventFilter");
	case SOAP_TYPE_tt__SearchScopeExtension:
		return soap_in_tt__SearchScopeExtension(soap, tag, NULL, "tt:SearchScopeExtension");
	case SOAP_TYPE_tt__SearchScope:
		return soap_in_tt__SearchScope(soap, tag, NULL, "tt:SearchScope");
	case SOAP_TYPE_tt__RecordingSummary:
		return soap_in_tt__RecordingSummary(soap, tag, NULL, "tt:RecordingSummary");
	case SOAP_TYPE_tt__DateTimeRange:
		return soap_in_tt__DateTimeRange(soap, tag, NULL, "tt:DateTimeRange");
	case SOAP_TYPE_tt__SourceReference:
		return soap_in_tt__SourceReference(soap, tag, NULL, "tt:SourceReference");
	case SOAP_TYPE_tt__ReceiverStateInformation:
		return soap_in_tt__ReceiverStateInformation(soap, tag, NULL, "tt:ReceiverStateInformation");
	case SOAP_TYPE_tt__ReceiverConfiguration:
		return soap_in_tt__ReceiverConfiguration(soap, tag, NULL, "tt:ReceiverConfiguration");
	case SOAP_TYPE_tt__Receiver:
		return soap_in_tt__Receiver(soap, tag, NULL, "tt:Receiver");
	case SOAP_TYPE_tt__PaneOptionExtension:
		return soap_in_tt__PaneOptionExtension(soap, tag, NULL, "tt:PaneOptionExtension");
	case SOAP_TYPE_tt__PaneLayoutOptions:
		return soap_in_tt__PaneLayoutOptions(soap, tag, NULL, "tt:PaneLayoutOptions");
	case SOAP_TYPE_tt__LayoutOptionsExtension:
		return soap_in_tt__LayoutOptionsExtension(soap, tag, NULL, "tt:LayoutOptionsExtension");
	case SOAP_TYPE_tt__LayoutOptions:
		return soap_in_tt__LayoutOptions(soap, tag, NULL, "tt:LayoutOptions");
	case SOAP_TYPE_tt__CodingCapabilities:
		return soap_in_tt__CodingCapabilities(soap, tag, NULL, "tt:CodingCapabilities");
	case SOAP_TYPE_tt__LayoutExtension:
		return soap_in_tt__LayoutExtension(soap, tag, NULL, "tt:LayoutExtension");
	case SOAP_TYPE_tt__Layout:
		return soap_in_tt__Layout(soap, tag, NULL, "tt:Layout");
	case SOAP_TYPE_tt__PaneLayout:
		return soap_in_tt__PaneLayout(soap, tag, NULL, "tt:PaneLayout");
	case SOAP_TYPE_tt__PaneConfiguration:
		return soap_in_tt__PaneConfiguration(soap, tag, NULL, "tt:PaneConfiguration");
	case SOAP_TYPE_tt__CellLayout:
		return soap_in_tt__CellLayout(soap, tag, NULL, "tt:CellLayout");
	case SOAP_TYPE_tt__MotionExpressionConfiguration:
		return soap_in_tt__MotionExpressionConfiguration(soap, tag, NULL, "tt:MotionExpressionConfiguration");
	case SOAP_TYPE_tt__MotionExpression:
		return soap_in_tt__MotionExpression(soap, tag, NULL, "tt:MotionExpression");
	case SOAP_TYPE_tt__PolylineArrayConfiguration:
		return soap_in_tt__PolylineArrayConfiguration(soap, tag, NULL, "tt:PolylineArrayConfiguration");
	case SOAP_TYPE_tt__PolylineArrayExtension:
		return soap_in_tt__PolylineArrayExtension(soap, tag, NULL, "tt:PolylineArrayExtension");
	case SOAP_TYPE_tt__PolylineArray:
		return soap_in_tt__PolylineArray(soap, tag, NULL, "tt:PolylineArray");
	case SOAP_TYPE_tt__PolygonConfiguration:
		return soap_in_tt__PolygonConfiguration(soap, tag, NULL, "tt:PolygonConfiguration");
	case SOAP_TYPE_tt__SupportedAnalyticsModulesExtension:
		return soap_in_tt__SupportedAnalyticsModulesExtension(soap, tag, NULL, "tt:SupportedAnalyticsModulesExtension");
	case SOAP_TYPE_tt__SupportedAnalyticsModules:
		return soap_in_tt__SupportedAnalyticsModules(soap, tag, NULL, "tt:SupportedAnalyticsModules");
	case SOAP_TYPE_tt__SupportedRulesExtension:
		return soap_in_tt__SupportedRulesExtension(soap, tag, NULL, "tt:SupportedRulesExtension");
	case SOAP_TYPE_tt__SupportedRules:
		return soap_in_tt__SupportedRules(soap, tag, NULL, "tt:SupportedRules");
	case SOAP_TYPE_tt__ConfigDescriptionExtension:
		return soap_in_tt__ConfigDescriptionExtension(soap, tag, NULL, "tt:ConfigDescriptionExtension");
	case SOAP_TYPE_tt__ConfigDescription:
		return soap_in_tt__ConfigDescription(soap, tag, NULL, "tt:ConfigDescription");
	case SOAP_TYPE_tt__Config:
		return soap_in_tt__Config(soap, tag, NULL, "tt:Config");
	case SOAP_TYPE_tt__RuleEngineConfigurationExtension:
		return soap_in_tt__RuleEngineConfigurationExtension(soap, tag, NULL, "tt:RuleEngineConfigurationExtension");
	case SOAP_TYPE_tt__RuleEngineConfiguration:
		return soap_in_tt__RuleEngineConfiguration(soap, tag, NULL, "tt:RuleEngineConfiguration");
	case SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension:
		return soap_in_tt__AnalyticsEngineConfigurationExtension(soap, tag, NULL, "tt:AnalyticsEngineConfigurationExtension");
	case SOAP_TYPE_tt__AnalyticsEngineConfiguration:
		return soap_in_tt__AnalyticsEngineConfiguration(soap, tag, NULL, "tt:AnalyticsEngineConfiguration");
	case SOAP_TYPE_tt__Polyline:
		return soap_in_tt__Polyline(soap, tag, NULL, "tt:Polyline");
	case SOAP_TYPE_tt__ItemListDescriptionExtension:
		return soap_in_tt__ItemListDescriptionExtension(soap, tag, NULL, "tt:ItemListDescriptionExtension");
	case SOAP_TYPE_tt__ItemListDescription:
		return soap_in_tt__ItemListDescription(soap, tag, NULL, "tt:ItemListDescription");
	case SOAP_TYPE_tt__MessageDescriptionExtension:
		return soap_in_tt__MessageDescriptionExtension(soap, tag, NULL, "tt:MessageDescriptionExtension");
	case SOAP_TYPE_tt__MessageDescription:
		return soap_in_tt__MessageDescription(soap, tag, NULL, "tt:MessageDescription");
	case SOAP_TYPE_tt__ItemListExtension:
		return soap_in_tt__ItemListExtension(soap, tag, NULL, "tt:ItemListExtension");
	case SOAP_TYPE_tt__ItemList:
		return soap_in_tt__ItemList(soap, tag, NULL, "tt:ItemList");
	case SOAP_TYPE_tt__MessageExtension:
		return soap_in_tt__MessageExtension(soap, tag, NULL, "tt:MessageExtension");
	case SOAP_TYPE_tt__NoiseReductionOptions:
		return soap_in_tt__NoiseReductionOptions(soap, tag, NULL, "tt:NoiseReductionOptions");
	case SOAP_TYPE_tt__DefoggingOptions:
		return soap_in_tt__DefoggingOptions(soap, tag, NULL, "tt:DefoggingOptions");
	case SOAP_TYPE_tt__ToneCompensationOptions:
		return soap_in_tt__ToneCompensationOptions(soap, tag, NULL, "tt:ToneCompensationOptions");
	case SOAP_TYPE_tt__FocusOptions20Extension:
		return soap_in_tt__FocusOptions20Extension(soap, tag, NULL, "tt:FocusOptions20Extension");
	case SOAP_TYPE_tt__FocusOptions20:
		return soap_in_tt__FocusOptions20(soap, tag, NULL, "tt:FocusOptions20");
	case SOAP_TYPE_tt__WhiteBalanceOptions20Extension:
		return soap_in_tt__WhiteBalanceOptions20Extension(soap, tag, NULL, "tt:WhiteBalanceOptions20Extension");
	case SOAP_TYPE_tt__WhiteBalanceOptions20:
		return soap_in_tt__WhiteBalanceOptions20(soap, tag, NULL, "tt:WhiteBalanceOptions20");
	case SOAP_TYPE_tt__FocusConfiguration20Extension:
		return soap_in_tt__FocusConfiguration20Extension(soap, tag, NULL, "tt:FocusConfiguration20Extension");
	case SOAP_TYPE_tt__FocusConfiguration20:
		return soap_in_tt__FocusConfiguration20(soap, tag, NULL, "tt:FocusConfiguration20");
	case SOAP_TYPE_tt__WhiteBalance20Extension:
		return soap_in_tt__WhiteBalance20Extension(soap, tag, NULL, "tt:WhiteBalance20Extension");
	case SOAP_TYPE_tt__WhiteBalance20:
		return soap_in_tt__WhiteBalance20(soap, tag, NULL, "tt:WhiteBalance20");
	case SOAP_TYPE_tt__RelativeFocusOptions20:
		return soap_in_tt__RelativeFocusOptions20(soap, tag, NULL, "tt:RelativeFocusOptions20");
	case SOAP_TYPE_tt__MoveOptions20:
		return soap_in_tt__MoveOptions20(soap, tag, NULL, "tt:MoveOptions20");
	case SOAP_TYPE_tt__ExposureOptions20:
		return soap_in_tt__ExposureOptions20(soap, tag, NULL, "tt:ExposureOptions20");
	case SOAP_TYPE_tt__BacklightCompensationOptions20:
		return soap_in_tt__BacklightCompensationOptions20(soap, tag, NULL, "tt:BacklightCompensationOptions20");
	case SOAP_TYPE_tt__WideDynamicRangeOptions20:
		return soap_in_tt__WideDynamicRangeOptions20(soap, tag, NULL, "tt:WideDynamicRangeOptions20");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension:
		return soap_in_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, tag, NULL, "tt:IrCutFilterAutoAdjustmentOptionsExtension");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions:
		return soap_in_tt__IrCutFilterAutoAdjustmentOptions(soap, tag, NULL, "tt:IrCutFilterAutoAdjustmentOptions");
	case SOAP_TYPE_tt__ImageStabilizationOptionsExtension:
		return soap_in_tt__ImageStabilizationOptionsExtension(soap, tag, NULL, "tt:ImageStabilizationOptionsExtension");
	case SOAP_TYPE_tt__ImageStabilizationOptions:
		return soap_in_tt__ImageStabilizationOptions(soap, tag, NULL, "tt:ImageStabilizationOptions");
	case SOAP_TYPE_tt__ImagingOptions20Extension4:
		return soap_in_tt__ImagingOptions20Extension4(soap, tag, NULL, "tt:ImagingOptions20Extension4");
	case SOAP_TYPE_tt__ImagingOptions20Extension3:
		return soap_in_tt__ImagingOptions20Extension3(soap, tag, NULL, "tt:ImagingOptions20Extension3");
	case SOAP_TYPE_tt__ImagingOptions20Extension2:
		return soap_in_tt__ImagingOptions20Extension2(soap, tag, NULL, "tt:ImagingOptions20Extension2");
	case SOAP_TYPE_tt__ImagingOptions20Extension:
		return soap_in_tt__ImagingOptions20Extension(soap, tag, NULL, "tt:ImagingOptions20Extension");
	case SOAP_TYPE_tt__ImagingOptions20:
		return soap_in_tt__ImagingOptions20(soap, tag, NULL, "tt:ImagingOptions20");
	case SOAP_TYPE_tt__NoiseReduction:
		return soap_in_tt__NoiseReduction(soap, tag, NULL, "tt:NoiseReduction");
	case SOAP_TYPE_tt__DefoggingExtension:
		return soap_in_tt__DefoggingExtension(soap, tag, NULL, "tt:DefoggingExtension");
	case SOAP_TYPE_tt__Defogging:
		return soap_in_tt__Defogging(soap, tag, NULL, "tt:Defogging");
	case SOAP_TYPE_tt__ToneCompensationExtension:
		return soap_in_tt__ToneCompensationExtension(soap, tag, NULL, "tt:ToneCompensationExtension");
	case SOAP_TYPE_tt__ToneCompensation:
		return soap_in_tt__ToneCompensation(soap, tag, NULL, "tt:ToneCompensation");
	case SOAP_TYPE_tt__Exposure20:
		return soap_in_tt__Exposure20(soap, tag, NULL, "tt:Exposure20");
	case SOAP_TYPE_tt__BacklightCompensation20:
		return soap_in_tt__BacklightCompensation20(soap, tag, NULL, "tt:BacklightCompensation20");
	case SOAP_TYPE_tt__WideDynamicRange20:
		return soap_in_tt__WideDynamicRange20(soap, tag, NULL, "tt:WideDynamicRange20");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension:
		return soap_in_tt__IrCutFilterAutoAdjustmentExtension(soap, tag, NULL, "tt:IrCutFilterAutoAdjustmentExtension");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustment:
		return soap_in_tt__IrCutFilterAutoAdjustment(soap, tag, NULL, "tt:IrCutFilterAutoAdjustment");
	case SOAP_TYPE_tt__ImageStabilizationExtension:
		return soap_in_tt__ImageStabilizationExtension(soap, tag, NULL, "tt:ImageStabilizationExtension");
	case SOAP_TYPE_tt__ImageStabilization:
		return soap_in_tt__ImageStabilization(soap, tag, NULL, "tt:ImageStabilization");
	case SOAP_TYPE_tt__ImagingSettingsExtension204:
		return soap_in_tt__ImagingSettingsExtension204(soap, tag, NULL, "tt:ImagingSettingsExtension204");
	case SOAP_TYPE_tt__ImagingSettingsExtension203:
		return soap_in_tt__ImagingSettingsExtension203(soap, tag, NULL, "tt:ImagingSettingsExtension203");
	case SOAP_TYPE_tt__ImagingSettingsExtension202:
		return soap_in_tt__ImagingSettingsExtension202(soap, tag, NULL, "tt:ImagingSettingsExtension202");
	case SOAP_TYPE_tt__ImagingSettingsExtension20:
		return soap_in_tt__ImagingSettingsExtension20(soap, tag, NULL, "tt:ImagingSettingsExtension20");
	case SOAP_TYPE_tt__ImagingSettings20:
		return soap_in_tt__ImagingSettings20(soap, tag, NULL, "tt:ImagingSettings20");
	case SOAP_TYPE_tt__FocusStatus20Extension:
		return soap_in_tt__FocusStatus20Extension(soap, tag, NULL, "tt:FocusStatus20Extension");
	case SOAP_TYPE_tt__FocusStatus20:
		return soap_in_tt__FocusStatus20(soap, tag, NULL, "tt:FocusStatus20");
	case SOAP_TYPE_tt__ImagingStatus20Extension:
		return soap_in_tt__ImagingStatus20Extension(soap, tag, NULL, "tt:ImagingStatus20Extension");
	case SOAP_TYPE_tt__ImagingStatus20:
		return soap_in_tt__ImagingStatus20(soap, tag, NULL, "tt:ImagingStatus20");
	case SOAP_TYPE_tt__WhiteBalance:
		return soap_in_tt__WhiteBalance(soap, tag, NULL, "tt:WhiteBalance");
	case SOAP_TYPE_tt__ContinuousFocusOptions:
		return soap_in_tt__ContinuousFocusOptions(soap, tag, NULL, "tt:ContinuousFocusOptions");
	case SOAP_TYPE_tt__RelativeFocusOptions:
		return soap_in_tt__RelativeFocusOptions(soap, tag, NULL, "tt:RelativeFocusOptions");
	case SOAP_TYPE_tt__AbsoluteFocusOptions:
		return soap_in_tt__AbsoluteFocusOptions(soap, tag, NULL, "tt:AbsoluteFocusOptions");
	case SOAP_TYPE_tt__MoveOptions:
		return soap_in_tt__MoveOptions(soap, tag, NULL, "tt:MoveOptions");
	case SOAP_TYPE_tt__ContinuousFocus:
		return soap_in_tt__ContinuousFocus(soap, tag, NULL, "tt:ContinuousFocus");
	case SOAP_TYPE_tt__RelativeFocus:
		return soap_in_tt__RelativeFocus(soap, tag, NULL, "tt:RelativeFocus");
	case SOAP_TYPE_tt__AbsoluteFocus:
		return soap_in_tt__AbsoluteFocus(soap, tag, NULL, "tt:AbsoluteFocus");
	case SOAP_TYPE_tt__FocusMove:
		return soap_in_tt__FocusMove(soap, tag, NULL, "tt:FocusMove");
	case SOAP_TYPE_tt__WhiteBalanceOptions:
		return soap_in_tt__WhiteBalanceOptions(soap, tag, NULL, "tt:WhiteBalanceOptions");
	case SOAP_TYPE_tt__ExposureOptions:
		return soap_in_tt__ExposureOptions(soap, tag, NULL, "tt:ExposureOptions");
	case SOAP_TYPE_tt__FocusOptions:
		return soap_in_tt__FocusOptions(soap, tag, NULL, "tt:FocusOptions");
	case SOAP_TYPE_tt__BacklightCompensationOptions:
		return soap_in_tt__BacklightCompensationOptions(soap, tag, NULL, "tt:BacklightCompensationOptions");
	case SOAP_TYPE_tt__WideDynamicRangeOptions:
		return soap_in_tt__WideDynamicRangeOptions(soap, tag, NULL, "tt:WideDynamicRangeOptions");
	case SOAP_TYPE_tt__ImagingOptions:
		return soap_in_tt__ImagingOptions(soap, tag, NULL, "tt:ImagingOptions");
	case SOAP_TYPE_tt__BacklightCompensation:
		return soap_in_tt__BacklightCompensation(soap, tag, NULL, "tt:BacklightCompensation");
	case SOAP_TYPE_tt__WideDynamicRange:
		return soap_in_tt__WideDynamicRange(soap, tag, NULL, "tt:WideDynamicRange");
	case SOAP_TYPE_tt__Exposure:
		return soap_in_tt__Exposure(soap, tag, NULL, "tt:Exposure");
	case SOAP_TYPE_tt__ImagingSettingsExtension:
		return soap_in_tt__ImagingSettingsExtension(soap, tag, NULL, "tt:ImagingSettingsExtension");
	case SOAP_TYPE_tt__ImagingSettings:
		return soap_in_tt__ImagingSettings(soap, tag, NULL, "tt:ImagingSettings");
	case SOAP_TYPE_tt__FocusConfiguration:
		return soap_in_tt__FocusConfiguration(soap, tag, NULL, "tt:FocusConfiguration");
	case SOAP_TYPE_tt__FocusStatus:
		return soap_in_tt__FocusStatus(soap, tag, NULL, "tt:FocusStatus");
	case SOAP_TYPE_tt__ImagingStatus:
		return soap_in_tt__ImagingStatus(soap, tag, NULL, "tt:ImagingStatus");
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension:
		return soap_in_tt__PTZPresetTourStartingConditionOptionsExtension(soap, tag, NULL, "tt:PTZPresetTourStartingConditionOptionsExtension");
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions:
		return soap_in_tt__PTZPresetTourStartingConditionOptions(soap, tag, NULL, "tt:PTZPresetTourStartingConditionOptions");
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension:
		return soap_in_tt__PTZPresetTourPresetDetailOptionsExtension(soap, tag, NULL, "tt:PTZPresetTourPresetDetailOptionsExtension");
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions:
		return soap_in_tt__PTZPresetTourPresetDetailOptions(soap, tag, NULL, "tt:PTZPresetTourPresetDetailOptions");
	case SOAP_TYPE_tt__PTZPresetTourSpotOptions:
		return soap_in_tt__PTZPresetTourSpotOptions(soap, tag, NULL, "tt:PTZPresetTourSpotOptions");
	case SOAP_TYPE_tt__PTZPresetTourOptions:
		return soap_in_tt__PTZPresetTourOptions(soap, tag, NULL, "tt:PTZPresetTourOptions");
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension:
		return soap_in_tt__PTZPresetTourStartingConditionExtension(soap, tag, NULL, "tt:PTZPresetTourStartingConditionExtension");
	case SOAP_TYPE_tt__PTZPresetTourStartingCondition:
		return soap_in_tt__PTZPresetTourStartingCondition(soap, tag, NULL, "tt:PTZPresetTourStartingCondition");
	case SOAP_TYPE_tt__PTZPresetTourStatusExtension:
		return soap_in_tt__PTZPresetTourStatusExtension(soap, tag, NULL, "tt:PTZPresetTourStatusExtension");
	case SOAP_TYPE_tt__PTZPresetTourStatus:
		return soap_in_tt__PTZPresetTourStatus(soap, tag, NULL, "tt:PTZPresetTourStatus");
	case SOAP_TYPE_tt__PTZPresetTourTypeExtension:
		return soap_in_tt__PTZPresetTourTypeExtension(soap, tag, NULL, "tt:PTZPresetTourTypeExtension");
	case SOAP_TYPE_tt__PTZPresetTourPresetDetail:
		return soap_in_tt__PTZPresetTourPresetDetail(soap, tag, NULL, "tt:PTZPresetTourPresetDetail");
	case SOAP_TYPE_tt__PTZPresetTourSpotExtension:
		return soap_in_tt__PTZPresetTourSpotExtension(soap, tag, NULL, "tt:PTZPresetTourSpotExtension");
	case SOAP_TYPE_tt__PTZPresetTourSpot:
		return soap_in_tt__PTZPresetTourSpot(soap, tag, NULL, "tt:PTZPresetTourSpot");
	case SOAP_TYPE_tt__PTZPresetTourExtension:
		return soap_in_tt__PTZPresetTourExtension(soap, tag, NULL, "tt:PTZPresetTourExtension");
	case SOAP_TYPE_tt__PresetTour:
		return soap_in_tt__PresetTour(soap, tag, NULL, "tt:PresetTour");
	case SOAP_TYPE_tt__PTZPreset:
		return soap_in_tt__PTZPreset(soap, tag, NULL, "tt:PTZPreset");
	case SOAP_TYPE_tt__PTZSpeed:
		return soap_in_tt__PTZSpeed(soap, tag, NULL, "tt:PTZSpeed");
	case SOAP_TYPE_tt__Space1DDescription:
		return soap_in_tt__Space1DDescription(soap, tag, NULL, "tt:Space1DDescription");
	case SOAP_TYPE_tt__Space2DDescription:
		return soap_in_tt__Space2DDescription(soap, tag, NULL, "tt:Space2DDescription");
	case SOAP_TYPE_tt__PTZSpacesExtension:
		return soap_in_tt__PTZSpacesExtension(soap, tag, NULL, "tt:PTZSpacesExtension");
	case SOAP_TYPE_tt__PTZSpaces:
		return soap_in_tt__PTZSpaces(soap, tag, NULL, "tt:PTZSpaces");
	case SOAP_TYPE_tt__ZoomLimits:
		return soap_in_tt__ZoomLimits(soap, tag, NULL, "tt:ZoomLimits");
	case SOAP_TYPE_tt__PanTiltLimits:
		return soap_in_tt__PanTiltLimits(soap, tag, NULL, "tt:PanTiltLimits");
	case SOAP_TYPE_tt__ReverseOptionsExtension:
		return soap_in_tt__ReverseOptionsExtension(soap, tag, NULL, "tt:ReverseOptionsExtension");
	case SOAP_TYPE_tt__ReverseOptions:
		return soap_in_tt__ReverseOptions(soap, tag, NULL, "tt:ReverseOptions");
	case SOAP_TYPE_tt__EFlipOptionsExtension:
		return soap_in_tt__EFlipOptionsExtension(soap, tag, NULL, "tt:EFlipOptionsExtension");
	case SOAP_TYPE_tt__EFlipOptions:
		return soap_in_tt__EFlipOptions(soap, tag, NULL, "tt:EFlipOptions");
	case SOAP_TYPE_tt__PTControlDirectionOptionsExtension:
		return soap_in_tt__PTControlDirectionOptionsExtension(soap, tag, NULL, "tt:PTControlDirectionOptionsExtension");
	case SOAP_TYPE_tt__PTControlDirectionOptions:
		return soap_in_tt__PTControlDirectionOptions(soap, tag, NULL, "tt:PTControlDirectionOptions");
	case SOAP_TYPE_tt__PTZConfigurationOptions2:
		return soap_in_tt__PTZConfigurationOptions2(soap, tag, NULL, "tt:PTZConfigurationOptions2");
	case SOAP_TYPE_tt__PTZConfigurationOptions:
		return soap_in_tt__PTZConfigurationOptions(soap, tag, NULL, "tt:PTZConfigurationOptions");
	case SOAP_TYPE_tt__Reverse:
		return soap_in_tt__Reverse(soap, tag, NULL, "tt:Reverse");
	case SOAP_TYPE_tt__EFlip:
		return soap_in_tt__EFlip(soap, tag, NULL, "tt:EFlip");
	case SOAP_TYPE_tt__PTControlDirectionExtension:
		return soap_in_tt__PTControlDirectionExtension(soap, tag, NULL, "tt:PTControlDirectionExtension");
	case SOAP_TYPE_tt__PTControlDirection:
		return soap_in_tt__PTControlDirection(soap, tag, NULL, "tt:PTControlDirection");
	case SOAP_TYPE_tt__PTZConfigurationExtension2:
		return soap_in_tt__PTZConfigurationExtension2(soap, tag, NULL, "tt:PTZConfigurationExtension2");
	case SOAP_TYPE_tt__PTZConfigurationExtension:
		return soap_in_tt__PTZConfigurationExtension(soap, tag, NULL, "tt:PTZConfigurationExtension");
	case SOAP_TYPE_tt__PTZConfiguration:
		return soap_in_tt__PTZConfiguration(soap, tag, NULL, "tt:PTZConfiguration");
	case SOAP_TYPE_tt__PTZPresetTourSupportedExtension:
		return soap_in_tt__PTZPresetTourSupportedExtension(soap, tag, NULL, "tt:PTZPresetTourSupportedExtension");
	case SOAP_TYPE_tt__PTZPresetTourSupported:
		return soap_in_tt__PTZPresetTourSupported(soap, tag, NULL, "tt:PTZPresetTourSupported");
	case SOAP_TYPE_tt__PTZNodeExtension2:
		return soap_in_tt__PTZNodeExtension2(soap, tag, NULL, "tt:PTZNodeExtension2");
	case SOAP_TYPE_tt__PTZNodeExtension:
		return soap_in_tt__PTZNodeExtension(soap, tag, NULL, "tt:PTZNodeExtension");
	case SOAP_TYPE_tt__PTZNode:
		return soap_in_tt__PTZNode(soap, tag, NULL, "tt:PTZNode");
	case SOAP_TYPE_tt__DigitalInput:
		return soap_in_tt__DigitalInput(soap, tag, NULL, "tt:DigitalInput");
	case SOAP_TYPE_tt__RelayOutput:
		return soap_in_tt__RelayOutput(soap, tag, NULL, "tt:RelayOutput");
	case SOAP_TYPE_tt__RelayOutputSettings:
		return soap_in_tt__RelayOutputSettings(soap, tag, NULL, "tt:RelayOutputSettings");
	case SOAP_TYPE_tt__GenericEapPwdConfigurationExtension:
		return soap_in_tt__GenericEapPwdConfigurationExtension(soap, tag, NULL, "tt:GenericEapPwdConfigurationExtension");
	case SOAP_TYPE_tt__TLSConfiguration:
		return soap_in_tt__TLSConfiguration(soap, tag, NULL, "tt:TLSConfiguration");
	case SOAP_TYPE_tt__EapMethodExtension:
		return soap_in_tt__EapMethodExtension(soap, tag, NULL, "tt:EapMethodExtension");
	case SOAP_TYPE_tt__EAPMethodConfiguration:
		return soap_in_tt__EAPMethodConfiguration(soap, tag, NULL, "tt:EAPMethodConfiguration");
	case SOAP_TYPE_tt__Dot1XConfigurationExtension:
		return soap_in_tt__Dot1XConfigurationExtension(soap, tag, NULL, "tt:Dot1XConfigurationExtension");
	case SOAP_TYPE_tt__Dot1XConfiguration:
		return soap_in_tt__Dot1XConfiguration(soap, tag, NULL, "tt:Dot1XConfiguration");
	case SOAP_TYPE_tt__CertificateInformationExtension:
		return soap_in_tt__CertificateInformationExtension(soap, tag, NULL, "tt:CertificateInformationExtension");
	case SOAP_TYPE_tt__CertificateUsage:
		return soap_in_tt__CertificateUsage(soap, tag, NULL, "tt:CertificateUsage");
	case SOAP_TYPE_tt__CertificateInformation:
		return soap_in_tt__CertificateInformation(soap, tag, NULL, "tt:CertificateInformation");
	case SOAP_TYPE_tt__CertificateWithPrivateKey:
		return soap_in_tt__CertificateWithPrivateKey(soap, tag, NULL, "tt:CertificateWithPrivateKey");
	case SOAP_TYPE_tt__CertificateStatus:
		return soap_in_tt__CertificateStatus(soap, tag, NULL, "tt:CertificateStatus");
	case SOAP_TYPE_tt__Certificate:
		return soap_in_tt__Certificate(soap, tag, NULL, "tt:Certificate");
	case SOAP_TYPE_tt__CertificateGenerationParametersExtension:
		return soap_in_tt__CertificateGenerationParametersExtension(soap, tag, NULL, "tt:CertificateGenerationParametersExtension");
	case SOAP_TYPE_tt__CertificateGenerationParameters:
		return soap_in_tt__CertificateGenerationParameters(soap, tag, NULL, "tt:CertificateGenerationParameters");
	case SOAP_TYPE_tt__UserExtension:
		return soap_in_tt__UserExtension(soap, tag, NULL, "tt:UserExtension");
	case SOAP_TYPE_tt__User:
		return soap_in_tt__User(soap, tag, NULL, "tt:User");
	case SOAP_TYPE_tt__RemoteUser:
		return soap_in_tt__RemoteUser(soap, tag, NULL, "tt:RemoteUser");
	case SOAP_TYPE_tt__TimeZone:
		return soap_in_tt__TimeZone(soap, tag, NULL, "tt:TimeZone");
	case SOAP_TYPE_tt__Time:
		return soap_in_tt__Time(soap, tag, NULL, "tt:Time");
	case SOAP_TYPE_tt__Date:
		return soap_in_tt__Date(soap, tag, NULL, "tt:Date");
	case SOAP_TYPE_tt__DateTime:
		return soap_in_tt__DateTime(soap, tag, NULL, "tt:DateTime");
	case SOAP_TYPE_tt__SystemDateTimeExtension:
		return soap_in_tt__SystemDateTimeExtension(soap, tag, NULL, "tt:SystemDateTimeExtension");
	case SOAP_TYPE_tt__SystemDateTime:
		return soap_in_tt__SystemDateTime(soap, tag, NULL, "tt:SystemDateTime");
	case SOAP_TYPE_tt__SystemLogUri:
		return soap_in_tt__SystemLogUri(soap, tag, NULL, "tt:SystemLogUri");
	case SOAP_TYPE_tt__SystemLogUriList:
		return soap_in_tt__SystemLogUriList(soap, tag, NULL, "tt:SystemLogUriList");
	case SOAP_TYPE_tt__BackupFile:
		return soap_in_tt__BackupFile(soap, tag, NULL, "tt:BackupFile");
	case SOAP_TYPE_tt__AttachmentData:
		return soap_in_tt__AttachmentData(soap, tag, NULL, "tt:AttachmentData");
	case SOAP_TYPE_tt__BinaryData:
		return soap_in_tt__BinaryData(soap, tag, NULL, "tt:BinaryData");
	case SOAP_TYPE_tt__SupportInformation:
		return soap_in_tt__SupportInformation(soap, tag, NULL, "tt:SupportInformation");
	case SOAP_TYPE_tt__SystemLog:
		return soap_in_tt__SystemLog(soap, tag, NULL, "tt:SystemLog");
	case SOAP_TYPE_tt__AnalyticsDeviceExtension:
		return soap_in_tt__AnalyticsDeviceExtension(soap, tag, NULL, "tt:AnalyticsDeviceExtension");
	case SOAP_TYPE_tt__AnalyticsDeviceCapabilities:
		return soap_in_tt__AnalyticsDeviceCapabilities(soap, tag, NULL, "tt:AnalyticsDeviceCapabilities");
	case SOAP_TYPE_tt__ReceiverCapabilities:
		return soap_in_tt__ReceiverCapabilities(soap, tag, NULL, "tt:ReceiverCapabilities");
	case SOAP_TYPE_tt__ReplayCapabilities:
		return soap_in_tt__ReplayCapabilities(soap, tag, NULL, "tt:ReplayCapabilities");
	case SOAP_TYPE_tt__SearchCapabilities:
		return soap_in_tt__SearchCapabilities(soap, tag, NULL, "tt:SearchCapabilities");
	case SOAP_TYPE_tt__RecordingCapabilities:
		return soap_in_tt__RecordingCapabilities(soap, tag, NULL, "tt:RecordingCapabilities");
	case SOAP_TYPE_tt__DisplayCapabilities:
		return soap_in_tt__DisplayCapabilities(soap, tag, NULL, "tt:DisplayCapabilities");
	case SOAP_TYPE_tt__DeviceIOCapabilities:
		return soap_in_tt__DeviceIOCapabilities(soap, tag, NULL, "tt:DeviceIOCapabilities");
	case SOAP_TYPE_tt__PTZCapabilities:
		return soap_in_tt__PTZCapabilities(soap, tag, NULL, "tt:PTZCapabilities");
	case SOAP_TYPE_tt__ImagingCapabilities:
		return soap_in_tt__ImagingCapabilities(soap, tag, NULL, "tt:ImagingCapabilities");
	case SOAP_TYPE_tt__OnvifVersion:
		return soap_in_tt__OnvifVersion(soap, tag, NULL, "tt:OnvifVersion");
	case SOAP_TYPE_tt__SystemCapabilitiesExtension2:
		return soap_in_tt__SystemCapabilitiesExtension2(soap, tag, NULL, "tt:SystemCapabilitiesExtension2");
	case SOAP_TYPE_tt__SystemCapabilitiesExtension:
		return soap_in_tt__SystemCapabilitiesExtension(soap, tag, NULL, "tt:SystemCapabilitiesExtension");
	case SOAP_TYPE_tt__SystemCapabilities:
		return soap_in_tt__SystemCapabilities(soap, tag, NULL, "tt:SystemCapabilities");
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension2:
		return soap_in_tt__SecurityCapabilitiesExtension2(soap, tag, NULL, "tt:SecurityCapabilitiesExtension2");
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension:
		return soap_in_tt__SecurityCapabilitiesExtension(soap, tag, NULL, "tt:SecurityCapabilitiesExtension");
	case SOAP_TYPE_tt__SecurityCapabilities:
		return soap_in_tt__SecurityCapabilities(soap, tag, NULL, "tt:SecurityCapabilities");
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension2:
		return soap_in_tt__NetworkCapabilitiesExtension2(soap, tag, NULL, "tt:NetworkCapabilitiesExtension2");
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension:
		return soap_in_tt__NetworkCapabilitiesExtension(soap, tag, NULL, "tt:NetworkCapabilitiesExtension");
	case SOAP_TYPE_tt__NetworkCapabilities:
		return soap_in_tt__NetworkCapabilities(soap, tag, NULL, "tt:NetworkCapabilities");
	case SOAP_TYPE_tt__ProfileCapabilities:
		return soap_in_tt__ProfileCapabilities(soap, tag, NULL, "tt:ProfileCapabilities");
	case SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension:
		return soap_in_tt__RealTimeStreamingCapabilitiesExtension(soap, tag, NULL, "tt:RealTimeStreamingCapabilitiesExtension");
	case SOAP_TYPE_tt__RealTimeStreamingCapabilities:
		return soap_in_tt__RealTimeStreamingCapabilities(soap, tag, NULL, "tt:RealTimeStreamingCapabilities");
	case SOAP_TYPE_tt__MediaCapabilitiesExtension:
		return soap_in_tt__MediaCapabilitiesExtension(soap, tag, NULL, "tt:MediaCapabilitiesExtension");
	case SOAP_TYPE_tt__MediaCapabilities:
		return soap_in_tt__MediaCapabilities(soap, tag, NULL, "tt:MediaCapabilities");
	case SOAP_TYPE_tt__IOCapabilitiesExtension2:
		return soap_in_tt__IOCapabilitiesExtension2(soap, tag, NULL, "tt:IOCapabilitiesExtension2");
	case SOAP_TYPE_tt__IOCapabilitiesExtension:
		return soap_in_tt__IOCapabilitiesExtension(soap, tag, NULL, "tt:IOCapabilitiesExtension");
	case SOAP_TYPE_tt__IOCapabilities:
		return soap_in_tt__IOCapabilities(soap, tag, NULL, "tt:IOCapabilities");
	case SOAP_TYPE_tt__EventCapabilities:
		return soap_in_tt__EventCapabilities(soap, tag, NULL, "tt:EventCapabilities");
	case SOAP_TYPE_tt__DeviceCapabilitiesExtension:
		return soap_in_tt__DeviceCapabilitiesExtension(soap, tag, NULL, "tt:DeviceCapabilitiesExtension");
	case SOAP_TYPE_tt__DeviceCapabilities:
		return soap_in_tt__DeviceCapabilities(soap, tag, NULL, "tt:DeviceCapabilities");
	case SOAP_TYPE_tt__AnalyticsCapabilities:
		return soap_in_tt__AnalyticsCapabilities(soap, tag, NULL, "tt:AnalyticsCapabilities");
	case SOAP_TYPE_tt__CapabilitiesExtension2:
		return soap_in_tt__CapabilitiesExtension2(soap, tag, NULL, "tt:CapabilitiesExtension2");
	case SOAP_TYPE_tt__CapabilitiesExtension:
		return soap_in_tt__CapabilitiesExtension(soap, tag, NULL, "tt:CapabilitiesExtension");
	case SOAP_TYPE_tt__Capabilities:
		return soap_in_tt__Capabilities(soap, tag, NULL, "tt:Capabilities");
	case SOAP_TYPE_tt__Dot11AvailableNetworksExtension:
		return soap_in_tt__Dot11AvailableNetworksExtension(soap, tag, NULL, "tt:Dot11AvailableNetworksExtension");
	case SOAP_TYPE_tt__Dot11AvailableNetworks:
		return soap_in_tt__Dot11AvailableNetworks(soap, tag, NULL, "tt:Dot11AvailableNetworks");
	case SOAP_TYPE_tt__Dot11Status:
		return soap_in_tt__Dot11Status(soap, tag, NULL, "tt:Dot11Status");
	case SOAP_TYPE_tt__Dot11Capabilities:
		return soap_in_tt__Dot11Capabilities(soap, tag, NULL, "tt:Dot11Capabilities");
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2:
		return soap_in_tt__NetworkInterfaceSetConfigurationExtension2(soap, tag, NULL, "tt:NetworkInterfaceSetConfigurationExtension2");
	case SOAP_TYPE_tt__Dot11PSKSetExtension:
		return soap_in_tt__Dot11PSKSetExtension(soap, tag, NULL, "tt:Dot11PSKSetExtension");
	case SOAP_TYPE_tt__Dot11PSKSet:
		return soap_in_tt__Dot11PSKSet(soap, tag, NULL, "tt:Dot11PSKSet");
	case SOAP_TYPE_tt__Dot11SecurityConfigurationExtension:
		return soap_in_tt__Dot11SecurityConfigurationExtension(soap, tag, NULL, "tt:Dot11SecurityConfigurationExtension");
	case SOAP_TYPE_tt__Dot11SecurityConfiguration:
		return soap_in_tt__Dot11SecurityConfiguration(soap, tag, NULL, "tt:Dot11SecurityConfiguration");
	case SOAP_TYPE_tt__Dot11Configuration:
		return soap_in_tt__Dot11Configuration(soap, tag, NULL, "tt:Dot11Configuration");
	case SOAP_TYPE_tt__IPAddressFilterExtension:
		return soap_in_tt__IPAddressFilterExtension(soap, tag, NULL, "tt:IPAddressFilterExtension");
	case SOAP_TYPE_tt__IPAddressFilter:
		return soap_in_tt__IPAddressFilter(soap, tag, NULL, "tt:IPAddressFilter");
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension2:
		return soap_in_tt__NetworkZeroConfigurationExtension2(soap, tag, NULL, "tt:NetworkZeroConfigurationExtension2");
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension:
		return soap_in_tt__NetworkZeroConfigurationExtension(soap, tag, NULL, "tt:NetworkZeroConfigurationExtension");
	case SOAP_TYPE_tt__NetworkZeroConfiguration:
		return soap_in_tt__NetworkZeroConfiguration(soap, tag, NULL, "tt:NetworkZeroConfiguration");
	case SOAP_TYPE_tt__NetworkGateway:
		return soap_in_tt__NetworkGateway(soap, tag, NULL, "tt:NetworkGateway");
	case SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration:
		return soap_in_tt__IPv4NetworkInterfaceSetConfiguration(soap, tag, NULL, "tt:IPv4NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration:
		return soap_in_tt__IPv6NetworkInterfaceSetConfiguration(soap, tag, NULL, "tt:IPv6NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension:
		return soap_in_tt__NetworkInterfaceSetConfigurationExtension(soap, tag, NULL, "tt:NetworkInterfaceSetConfigurationExtension");
	case SOAP_TYPE_tt__NetworkInterfaceSetConfiguration:
		return soap_in_tt__NetworkInterfaceSetConfiguration(soap, tag, NULL, "tt:NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_tt__DynamicDNSInformationExtension:
		return soap_in_tt__DynamicDNSInformationExtension(soap, tag, NULL, "tt:DynamicDNSInformationExtension");
	case SOAP_TYPE_tt__DynamicDNSInformation:
		return soap_in_tt__DynamicDNSInformation(soap, tag, NULL, "tt:DynamicDNSInformation");
	case SOAP_TYPE_tt__NTPInformationExtension:
		return soap_in_tt__NTPInformationExtension(soap, tag, NULL, "tt:NTPInformationExtension");
	case SOAP_TYPE_tt__NTPInformation:
		return soap_in_tt__NTPInformation(soap, tag, NULL, "tt:NTPInformation");
	case SOAP_TYPE_tt__DNSInformationExtension:
		return soap_in_tt__DNSInformationExtension(soap, tag, NULL, "tt:DNSInformationExtension");
	case SOAP_TYPE_tt__DNSInformation:
		return soap_in_tt__DNSInformation(soap, tag, NULL, "tt:DNSInformation");
	case SOAP_TYPE_tt__HostnameInformationExtension:
		return soap_in_tt__HostnameInformationExtension(soap, tag, NULL, "tt:HostnameInformationExtension");
	case SOAP_TYPE_tt__HostnameInformation:
		return soap_in_tt__HostnameInformation(soap, tag, NULL, "tt:HostnameInformation");
	case SOAP_TYPE_tt__PrefixedIPv6Address:
		return soap_in_tt__PrefixedIPv6Address(soap, tag, NULL, "tt:PrefixedIPv6Address");
	case SOAP_TYPE_tt__PrefixedIPv4Address:
		return soap_in_tt__PrefixedIPv4Address(soap, tag, NULL, "tt:PrefixedIPv4Address");
	case SOAP_TYPE_tt__IPAddress:
		return soap_in_tt__IPAddress(soap, tag, NULL, "tt:IPAddress");
	case SOAP_TYPE_tt__NetworkHostExtension:
		return soap_in_tt__NetworkHostExtension(soap, tag, NULL, "tt:NetworkHostExtension");
	case SOAP_TYPE_tt__NetworkHost:
		return soap_in_tt__NetworkHost(soap, tag, NULL, "tt:NetworkHost");
	case SOAP_TYPE_tt__NetworkProtocolExtension:
		return soap_in_tt__NetworkProtocolExtension(soap, tag, NULL, "tt:NetworkProtocolExtension");
	case SOAP_TYPE_tt__NetworkProtocol:
		return soap_in_tt__NetworkProtocol(soap, tag, NULL, "tt:NetworkProtocol");
	case SOAP_TYPE_tt__IPv6ConfigurationExtension:
		return soap_in_tt__IPv6ConfigurationExtension(soap, tag, NULL, "tt:IPv6ConfigurationExtension");
	case SOAP_TYPE_tt__IPv6Configuration:
		return soap_in_tt__IPv6Configuration(soap, tag, NULL, "tt:IPv6Configuration");
	case SOAP_TYPE_tt__IPv4Configuration:
		return soap_in_tt__IPv4Configuration(soap, tag, NULL, "tt:IPv4Configuration");
	case SOAP_TYPE_tt__IPv4NetworkInterface:
		return soap_in_tt__IPv4NetworkInterface(soap, tag, NULL, "tt:IPv4NetworkInterface");
	case SOAP_TYPE_tt__IPv6NetworkInterface:
		return soap_in_tt__IPv6NetworkInterface(soap, tag, NULL, "tt:IPv6NetworkInterface");
	case SOAP_TYPE_tt__NetworkInterfaceInfo:
		return soap_in_tt__NetworkInterfaceInfo(soap, tag, NULL, "tt:NetworkInterfaceInfo");
	case SOAP_TYPE_tt__NetworkInterfaceConnectionSetting:
		return soap_in_tt__NetworkInterfaceConnectionSetting(soap, tag, NULL, "tt:NetworkInterfaceConnectionSetting");
	case SOAP_TYPE_tt__NetworkInterfaceLink:
		return soap_in_tt__NetworkInterfaceLink(soap, tag, NULL, "tt:NetworkInterfaceLink");
	case SOAP_TYPE_tt__NetworkInterfaceExtension2:
		return soap_in_tt__NetworkInterfaceExtension2(soap, tag, NULL, "tt:NetworkInterfaceExtension2");
	case SOAP_TYPE_tt__Dot3Configuration:
		return soap_in_tt__Dot3Configuration(soap, tag, NULL, "tt:Dot3Configuration");
	case SOAP_TYPE_tt__NetworkInterfaceExtension:
		return soap_in_tt__NetworkInterfaceExtension(soap, tag, NULL, "tt:NetworkInterfaceExtension");
	case SOAP_TYPE_tt__NetworkInterface:
		return soap_in_tt__NetworkInterface(soap, tag, NULL, "tt:NetworkInterface");
	case SOAP_TYPE_tt__Scope:
		return soap_in_tt__Scope(soap, tag, NULL, "tt:Scope");
	case SOAP_TYPE_tt__MediaUri:
		return soap_in_tt__MediaUri(soap, tag, NULL, "tt:MediaUri");
	case SOAP_TYPE_tt__Transport:
		return soap_in_tt__Transport(soap, tag, NULL, "tt:Transport");
	case SOAP_TYPE_tt__StreamSetup:
		return soap_in_tt__StreamSetup(soap, tag, NULL, "tt:StreamSetup");
	case SOAP_TYPE_tt__MulticastConfiguration:
		return soap_in_tt__MulticastConfiguration(soap, tag, NULL, "tt:MulticastConfiguration");
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension:
		return soap_in_tt__AudioDecoderConfigurationOptionsExtension(soap, tag, NULL, "tt:AudioDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_tt__G726DecOptions:
		return soap_in_tt__G726DecOptions(soap, tag, NULL, "tt:G726DecOptions");
	case SOAP_TYPE_tt__AACDecOptions:
		return soap_in_tt__AACDecOptions(soap, tag, NULL, "tt:AACDecOptions");
	case SOAP_TYPE_tt__G711DecOptions:
		return soap_in_tt__G711DecOptions(soap, tag, NULL, "tt:G711DecOptions");
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptions:
		return soap_in_tt__AudioDecoderConfigurationOptions(soap, tag, NULL, "tt:AudioDecoderConfigurationOptions");
	case SOAP_TYPE_tt__AudioDecoderConfiguration:
		return soap_in_tt__AudioDecoderConfiguration(soap, tag, NULL, "tt:AudioDecoderConfiguration");
	case SOAP_TYPE_tt__AudioOutputConfigurationOptions:
		return soap_in_tt__AudioOutputConfigurationOptions(soap, tag, NULL, "tt:AudioOutputConfigurationOptions");
	case SOAP_TYPE_tt__AudioOutputConfiguration:
		return soap_in_tt__AudioOutputConfiguration(soap, tag, NULL, "tt:AudioOutputConfiguration");
	case SOAP_TYPE_tt__AudioOutput:
		return soap_in_tt__AudioOutput(soap, tag, NULL, "tt:AudioOutput");
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension:
		return soap_in_tt__VideoDecoderConfigurationOptionsExtension(soap, tag, NULL, "tt:VideoDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_tt__Mpeg4DecOptions:
		return soap_in_tt__Mpeg4DecOptions(soap, tag, NULL, "tt:Mpeg4DecOptions");
	case SOAP_TYPE_tt__JpegDecOptions:
		return soap_in_tt__JpegDecOptions(soap, tag, NULL, "tt:JpegDecOptions");
	case SOAP_TYPE_tt__H264DecOptions:
		return soap_in_tt__H264DecOptions(soap, tag, NULL, "tt:H264DecOptions");
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptions:
		return soap_in_tt__VideoDecoderConfigurationOptions(soap, tag, NULL, "tt:VideoDecoderConfigurationOptions");
	case SOAP_TYPE_tt__VideoOutputConfigurationOptions:
		return soap_in_tt__VideoOutputConfigurationOptions(soap, tag, NULL, "tt:VideoOutputConfigurationOptions");
	case SOAP_TYPE_tt__VideoOutputConfiguration:
		return soap_in_tt__VideoOutputConfiguration(soap, tag, NULL, "tt:VideoOutputConfiguration");
	case SOAP_TYPE_tt__VideoOutputExtension:
		return soap_in_tt__VideoOutputExtension(soap, tag, NULL, "tt:VideoOutputExtension");
	case SOAP_TYPE_tt__VideoOutput:
		return soap_in_tt__VideoOutput(soap, tag, NULL, "tt:VideoOutput");
	case SOAP_TYPE_tt__PTZStatusFilterOptionsExtension:
		return soap_in_tt__PTZStatusFilterOptionsExtension(soap, tag, NULL, "tt:PTZStatusFilterOptionsExtension");
	case SOAP_TYPE_tt__PTZStatusFilterOptions:
		return soap_in_tt__PTZStatusFilterOptions(soap, tag, NULL, "tt:PTZStatusFilterOptions");
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2:
		return soap_in_tt__MetadataConfigurationOptionsExtension2(soap, tag, NULL, "tt:MetadataConfigurationOptionsExtension2");
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension:
		return soap_in_tt__MetadataConfigurationOptionsExtension(soap, tag, NULL, "tt:MetadataConfigurationOptionsExtension");
	case SOAP_TYPE_tt__MetadataConfigurationOptions:
		return soap_in_tt__MetadataConfigurationOptions(soap, tag, NULL, "tt:MetadataConfigurationOptions");
	case SOAP_TYPE_tt__EventSubscription:
		return soap_in_tt__EventSubscription(soap, tag, NULL, "tt:EventSubscription");
	case SOAP_TYPE_tt__PTZFilter:
		return soap_in_tt__PTZFilter(soap, tag, NULL, "tt:PTZFilter");
	case SOAP_TYPE_tt__MetadataConfigurationExtension:
		return soap_in_tt__MetadataConfigurationExtension(soap, tag, NULL, "tt:MetadataConfigurationExtension");
	case SOAP_TYPE_tt__MetadataConfiguration:
		return soap_in_tt__MetadataConfiguration(soap, tag, NULL, "tt:MetadataConfiguration");
	case SOAP_TYPE_tt__VideoAnalyticsConfiguration:
		return soap_in_tt__VideoAnalyticsConfiguration(soap, tag, NULL, "tt:VideoAnalyticsConfiguration");
	case SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions:
		return soap_in_tt__AudioEncoder2ConfigurationOptions(soap, tag, NULL, "tt:AudioEncoder2ConfigurationOptions");
	case SOAP_TYPE_tt__AudioEncoder2Configuration:
		return soap_in_tt__AudioEncoder2Configuration(soap, tag, NULL, "tt:AudioEncoder2Configuration");
	case SOAP_TYPE_tt__AudioEncoderConfigurationOption:
		return soap_in_tt__AudioEncoderConfigurationOption(soap, tag, NULL, "tt:AudioEncoderConfigurationOption");
	case SOAP_TYPE_tt__AudioEncoderConfigurationOptions:
		return soap_in_tt__AudioEncoderConfigurationOptions(soap, tag, NULL, "tt:AudioEncoderConfigurationOptions");
	case SOAP_TYPE_tt__AudioEncoderConfiguration:
		return soap_in_tt__AudioEncoderConfiguration(soap, tag, NULL, "tt:AudioEncoderConfiguration");
	case SOAP_TYPE_tt__AudioSourceOptionsExtension:
		return soap_in_tt__AudioSourceOptionsExtension(soap, tag, NULL, "tt:AudioSourceOptionsExtension");
	case SOAP_TYPE_tt__AudioSourceConfigurationOptions:
		return soap_in_tt__AudioSourceConfigurationOptions(soap, tag, NULL, "tt:AudioSourceConfigurationOptions");
	case SOAP_TYPE_tt__AudioSourceConfiguration:
		return soap_in_tt__AudioSourceConfiguration(soap, tag, NULL, "tt:AudioSourceConfiguration");
	case SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions:
		return soap_in_tt__VideoEncoder2ConfigurationOptions(soap, tag, NULL, "tt:VideoEncoder2ConfigurationOptions");
	case SOAP_TYPE_tt__VideoRateControl2:
		return soap_in_tt__VideoRateControl2(soap, tag, NULL, "tt:VideoRateControl2");
	case SOAP_TYPE_tt__VideoResolution2:
		return soap_in_tt__VideoResolution2(soap, tag, NULL, "tt:VideoResolution2");
	case SOAP_TYPE_tt__VideoEncoder2Configuration:
		return soap_in_tt__VideoEncoder2Configuration(soap, tag, NULL, "tt:VideoEncoder2Configuration");
	case SOAP_TYPE_tt__H264Options2:
		return soap_in_tt__H264Options2(soap, tag, NULL, "tt:H264Options2");
	case SOAP_TYPE_tt__H264Options:
		return soap_in_tt__H264Options(soap, tag, NULL, "tt:H264Options");
	case SOAP_TYPE_tt__Mpeg4Options2:
		return soap_in_tt__Mpeg4Options2(soap, tag, NULL, "tt:Mpeg4Options2");
	case SOAP_TYPE_tt__Mpeg4Options:
		return soap_in_tt__Mpeg4Options(soap, tag, NULL, "tt:Mpeg4Options");
	case SOAP_TYPE_tt__JpegOptions2:
		return soap_in_tt__JpegOptions2(soap, tag, NULL, "tt:JpegOptions2");
	case SOAP_TYPE_tt__JpegOptions:
		return soap_in_tt__JpegOptions(soap, tag, NULL, "tt:JpegOptions");
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension2:
		return soap_in_tt__VideoEncoderOptionsExtension2(soap, tag, NULL, "tt:VideoEncoderOptionsExtension2");
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension:
		return soap_in_tt__VideoEncoderOptionsExtension(soap, tag, NULL, "tt:VideoEncoderOptionsExtension");
	case SOAP_TYPE_tt__VideoEncoderConfigurationOptions:
		return soap_in_tt__VideoEncoderConfigurationOptions(soap, tag, NULL, "tt:VideoEncoderConfigurationOptions");
	case SOAP_TYPE_tt__H264Configuration:
		return soap_in_tt__H264Configuration(soap, tag, NULL, "tt:H264Configuration");
	case SOAP_TYPE_tt__Mpeg4Configuration:
		return soap_in_tt__Mpeg4Configuration(soap, tag, NULL, "tt:Mpeg4Configuration");
	case SOAP_TYPE_tt__VideoRateControl:
		return soap_in_tt__VideoRateControl(soap, tag, NULL, "tt:VideoRateControl");
	case SOAP_TYPE_tt__VideoResolution:
		return soap_in_tt__VideoResolution(soap, tag, NULL, "tt:VideoResolution");
	case SOAP_TYPE_tt__VideoEncoderConfiguration:
		return soap_in_tt__VideoEncoderConfiguration(soap, tag, NULL, "tt:VideoEncoderConfiguration");
	case SOAP_TYPE_tt__SceneOrientation:
		return soap_in_tt__SceneOrientation(soap, tag, NULL, "tt:SceneOrientation");
	case SOAP_TYPE_tt__RotateOptionsExtension:
		return soap_in_tt__RotateOptionsExtension(soap, tag, NULL, "tt:RotateOptionsExtension");
	case SOAP_TYPE_tt__RotateOptions:
		return soap_in_tt__RotateOptions(soap, tag, NULL, "tt:RotateOptions");
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2:
		return soap_in_tt__VideoSourceConfigurationOptionsExtension2(soap, tag, NULL, "tt:VideoSourceConfigurationOptionsExtension2");
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension:
		return soap_in_tt__VideoSourceConfigurationOptionsExtension(soap, tag, NULL, "tt:VideoSourceConfigurationOptionsExtension");
	case SOAP_TYPE_tt__VideoSourceConfigurationOptions:
		return soap_in_tt__VideoSourceConfigurationOptions(soap, tag, NULL, "tt:VideoSourceConfigurationOptions");
	case SOAP_TYPE_tt__LensDescription:
		return soap_in_tt__LensDescription(soap, tag, NULL, "tt:LensDescription");
	case SOAP_TYPE_tt__LensOffset:
		return soap_in_tt__LensOffset(soap, tag, NULL, "tt:LensOffset");
	case SOAP_TYPE_tt__LensProjection:
		return soap_in_tt__LensProjection(soap, tag, NULL, "tt:LensProjection");
	case SOAP_TYPE_tt__RotateExtension:
		return soap_in_tt__RotateExtension(soap, tag, NULL, "tt:RotateExtension");
	case SOAP_TYPE_tt__Rotate:
		return soap_in_tt__Rotate(soap, tag, NULL, "tt:Rotate");
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension2:
		return soap_in_tt__VideoSourceConfigurationExtension2(soap, tag, NULL, "tt:VideoSourceConfigurationExtension2");
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension:
		return soap_in_tt__VideoSourceConfigurationExtension(soap, tag, NULL, "tt:VideoSourceConfigurationExtension");
	case SOAP_TYPE_tt__VideoSourceConfiguration:
		return soap_in_tt__VideoSourceConfiguration(soap, tag, NULL, "tt:VideoSourceConfiguration");
	case SOAP_TYPE_tt__ConfigurationEntity:
		return soap_in_tt__ConfigurationEntity(soap, tag, NULL, "tt:ConfigurationEntity");
	case SOAP_TYPE_tt__ProfileExtension2:
		return soap_in_tt__ProfileExtension2(soap, tag, NULL, "tt:ProfileExtension2");
	case SOAP_TYPE_tt__ProfileExtension:
		return soap_in_tt__ProfileExtension(soap, tag, NULL, "tt:ProfileExtension");
	case SOAP_TYPE_tt__Profile:
		return soap_in_tt__Profile(soap, tag, NULL, "tt:Profile");
	case SOAP_TYPE_tt__AudioSource:
		return soap_in_tt__AudioSource(soap, tag, NULL, "tt:AudioSource");
	case SOAP_TYPE_tt__VideoSourceExtension2:
		return soap_in_tt__VideoSourceExtension2(soap, tag, NULL, "tt:VideoSourceExtension2");
	case SOAP_TYPE_tt__VideoSourceExtension:
		return soap_in_tt__VideoSourceExtension(soap, tag, NULL, "tt:VideoSourceExtension");
	case SOAP_TYPE_tt__VideoSource:
		return soap_in_tt__VideoSource(soap, tag, NULL, "tt:VideoSource");
	case SOAP_TYPE_tt__AnyHolder:
		return soap_in_tt__AnyHolder(soap, tag, NULL, "tt:AnyHolder");
	case SOAP_TYPE_tt__FloatList:
		return soap_in_tt__FloatList(soap, tag, NULL, "tt:FloatList");
	case SOAP_TYPE_tt__IntList:
		return soap_in_tt__IntList(soap, tag, NULL, "tt:IntList");
	case SOAP_TYPE_tt__DurationRange:
		return soap_in_tt__DurationRange(soap, tag, NULL, "tt:DurationRange");
	case SOAP_TYPE_tt__FloatRange:
		return soap_in_tt__FloatRange(soap, tag, NULL, "tt:FloatRange");
	case SOAP_TYPE_tt__IntRange:
		return soap_in_tt__IntRange(soap, tag, NULL, "tt:IntRange");
	case SOAP_TYPE_tt__IntRectangleRange:
		return soap_in_tt__IntRectangleRange(soap, tag, NULL, "tt:IntRectangleRange");
	case SOAP_TYPE_tt__IntRectangle:
		return soap_in_tt__IntRectangle(soap, tag, NULL, "tt:IntRectangle");
	case SOAP_TYPE_tt__DeviceEntity:
		return soap_in_tt__DeviceEntity(soap, tag, NULL, "tt:DeviceEntity");
	case SOAP_TYPE_tds__StorageConfiguration:
		return soap_in_tds__StorageConfiguration(soap, tag, NULL, "tds:StorageConfiguration");
	case SOAP_TYPE_tds__StorageConfigurationData:
		return soap_in_tds__StorageConfigurationData(soap, tag, NULL, "tds:StorageConfigurationData");
	case SOAP_TYPE_tds__UserCredential:
		return soap_in_tds__UserCredential(soap, tag, NULL, "tds:UserCredential");
	case SOAP_TYPE_tds__MiscCapabilities:
		return soap_in_tds__MiscCapabilities(soap, tag, NULL, "tds:MiscCapabilities");
	case SOAP_TYPE_tds__SystemCapabilities:
		return soap_in_tds__SystemCapabilities(soap, tag, NULL, "tds:SystemCapabilities");
	case SOAP_TYPE_tds__SecurityCapabilities:
		return soap_in_tds__SecurityCapabilities(soap, tag, NULL, "tds:SecurityCapabilities");
	case SOAP_TYPE_tds__NetworkCapabilities:
		return soap_in_tds__NetworkCapabilities(soap, tag, NULL, "tds:NetworkCapabilities");
	case SOAP_TYPE_tds__DeviceServiceCapabilities:
		return soap_in_tds__DeviceServiceCapabilities(soap, tag, NULL, "tds:DeviceServiceCapabilities");
	case SOAP_TYPE_tds__Service:
		return soap_in_tds__Service(soap, tag, NULL, "tds:Service");
	case SOAP_TYPE_xsd__unsignedInt_:
		return soap_in_xsd__unsignedInt_(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__token__:
		return soap_in_xsd__token__(soap, tag, NULL, "xsd:token");
	case SOAP_TYPE_xsd__token:
		return soap_in_xsd__token(soap, tag, NULL, "xsd:token");
	case SOAP_TYPE_xsd__string_:
		return soap_in_xsd__string_(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_xsd__nonNegativeInteger__:
		return soap_in_xsd__nonNegativeInteger__(soap, tag, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_in_xsd__nonNegativeInteger(soap, tag, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__integer__:
		return soap_in_xsd__integer__(soap, tag, NULL, "xsd:integer");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, tag, NULL, "xsd:integer");
	case SOAP_TYPE_xsd__int_:
		return soap_in_xsd__int_(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_xsd__hexBinary__:
		return soap_in_xsd__hexBinary__(soap, tag, NULL, "xsd:hexBinary");
	case SOAP_TYPE_xsd__float_:
		return soap_in_xsd__float_(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_xsd__duration__:
		return soap_in_xsd__duration__(soap, tag, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__double_:
		return soap_in_xsd__double_(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_xsd__dateTime__:
		return soap_in_xsd__dateTime__(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__boolean_:
		return soap_in_xsd__boolean_(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary__:
		return soap_in_xsd__base64Binary__(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI__:
		return soap_in_xsd__anyURI__(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anySimpleType__:
		return soap_in_xsd__anySimpleType__(soap, tag, NULL, "xsd:anySimpleType");
	case SOAP_TYPE_xsd__anySimpleType:
		return soap_in_xsd__anySimpleType(soap, tag, NULL, "xsd:anySimpleType");
	case SOAP_TYPE_xsd__QName__:
		return soap_in_xsd__QName__(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__NCName__:
		return soap_in_xsd__NCName__(soap, tag, NULL, "xsd:NCName");
	case SOAP_TYPE_xsd__NCName:
		return soap_in_xsd__NCName(soap, tag, NULL, "xsd:NCName");
	case SOAP_TYPE_xsd__IDREFS__:
		return soap_in_xsd__IDREFS__(soap, tag, NULL, "xsd:IDREFS");
	case SOAP_TYPE_xsd__IDREFS:
		return soap_in_xsd__IDREFS(soap, tag, NULL, "xsd:IDREFS");
	case SOAP_TYPE_xsd__ID__:
		return soap_in_xsd__ID__(soap, tag, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_in_xsd__ID(soap, tag, NULL, "xsd:ID");
	case SOAP_TYPE_SOAP_ENV__Envelope:
		return soap_in_SOAP_ENV__Envelope(soap, tag, NULL, "SOAP-ENV:Envelope");
	case SOAP_TYPE_xsd__hexBinary:
		return soap_in_xsd__hexBinary(soap, tag, NULL, "xsd:hexBinary");
	case SOAP_TYPE_xsd__duration:
		return soap_in_xsd__duration(soap, tag, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_saml2__AttributeType:
		return soap_in_saml2__AttributeType(soap, tag, NULL, "saml2:AttributeType");
	case SOAP_TYPE_saml2__AttributeStatementType:
		return soap_in_saml2__AttributeStatementType(soap, tag, NULL, "saml2:AttributeStatementType");
	case SOAP_TYPE_saml2__EvidenceType:
		return soap_in_saml2__EvidenceType(soap, tag, NULL, "saml2:EvidenceType");
	case SOAP_TYPE_saml2__ActionType:
		return soap_in_saml2__ActionType(soap, tag, NULL, "saml2:ActionType");
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		return soap_in_saml2__AuthzDecisionStatementType(soap, tag, NULL, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_saml2__AuthnContextType:
		return soap_in_saml2__AuthnContextType(soap, tag, NULL, "saml2:AuthnContextType");
	case SOAP_TYPE_saml2__SubjectLocalityType:
		return soap_in_saml2__SubjectLocalityType(soap, tag, NULL, "saml2:SubjectLocalityType");
	case SOAP_TYPE_saml2__AuthnStatementType:
		return soap_in_saml2__AuthnStatementType(soap, tag, NULL, "saml2:AuthnStatementType");
	case SOAP_TYPE_saml2__StatementAbstractType:
		return soap_in_saml2__StatementAbstractType(soap, tag, NULL, "saml2:StatementAbstractType");
	case SOAP_TYPE_saml2__AdviceType:
		return soap_in_saml2__AdviceType(soap, tag, NULL, "saml2:AdviceType");
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		return soap_in_saml2__ProxyRestrictionType(soap, tag, NULL, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_saml2__OneTimeUseType:
		return soap_in_saml2__OneTimeUseType(soap, tag, NULL, "saml2:OneTimeUseType");
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		return soap_in_saml2__AudienceRestrictionType(soap, tag, NULL, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_saml2__ConditionAbstractType:
		return soap_in_saml2__ConditionAbstractType(soap, tag, NULL, "saml2:ConditionAbstractType");
	case SOAP_TYPE_saml2__ConditionsType:
		return soap_in_saml2__ConditionsType(soap, tag, NULL, "saml2:ConditionsType");
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		return soap_in_saml2__KeyInfoConfirmationDataType(soap, tag, NULL, "saml2:KeyInfoConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		return soap_in_saml2__SubjectConfirmationDataType(soap, tag, NULL, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		return soap_in_saml2__SubjectConfirmationType(soap, tag, NULL, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_saml2__SubjectType:
		return soap_in_saml2__SubjectType(soap, tag, NULL, "saml2:SubjectType");
	case SOAP_TYPE_saml2__AssertionType:
		return soap_in_saml2__AssertionType(soap, tag, NULL, "saml2:AssertionType");
	case SOAP_TYPE_saml2__EncryptedElementType:
		return soap_in_saml2__EncryptedElementType(soap, tag, NULL, "saml2:EncryptedElementType");
	case SOAP_TYPE_saml2__NameIDType:
		return soap_in_saml2__NameIDType(soap, tag, NULL, "saml2:NameIDType");
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		return soap_in_saml2__BaseIDAbstractType(soap, tag, NULL, "saml2:BaseIDAbstractType");
	case SOAP_TYPE_saml1__AttributeType:
		return soap_in_saml1__AttributeType(soap, tag, NULL, "saml1:AttributeType");
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		return soap_in_saml1__AttributeDesignatorType(soap, tag, NULL, "saml1:AttributeDesignatorType");
	case SOAP_TYPE_saml1__AttributeStatementType:
		return soap_in_saml1__AttributeStatementType(soap, tag, NULL, "saml1:AttributeStatementType");
	case SOAP_TYPE_saml1__EvidenceType:
		return soap_in_saml1__EvidenceType(soap, tag, NULL, "saml1:EvidenceType");
	case SOAP_TYPE_saml1__ActionType:
		return soap_in_saml1__ActionType(soap, tag, NULL, "saml1:ActionType");
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		return soap_in_saml1__AuthorizationDecisionStatementType(soap, tag, NULL, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_saml1__AuthorityBindingType:
		return soap_in_saml1__AuthorityBindingType(soap, tag, NULL, "saml1:AuthorityBindingType");
	case SOAP_TYPE_saml1__SubjectLocalityType:
		return soap_in_saml1__SubjectLocalityType(soap, tag, NULL, "saml1:SubjectLocalityType");
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		return soap_in_saml1__AuthenticationStatementType(soap, tag, NULL, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		return soap_in_saml1__SubjectConfirmationType(soap, tag, NULL, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_saml1__NameIdentifierType:
		return soap_in_saml1__NameIdentifierType(soap, tag, NULL, "saml1:NameIdentifierType");
	case SOAP_TYPE_saml1__SubjectType:
		return soap_in_saml1__SubjectType(soap, tag, NULL, "saml1:SubjectType");
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		return soap_in_saml1__SubjectStatementAbstractType(soap, tag, NULL, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_saml1__StatementAbstractType:
		return soap_in_saml1__StatementAbstractType(soap, tag, NULL, "saml1:StatementAbstractType");
	case SOAP_TYPE_saml1__AdviceType:
		return soap_in_saml1__AdviceType(soap, tag, NULL, "saml1:AdviceType");
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		return soap_in_saml1__DoNotCacheConditionType(soap, tag, NULL, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		return soap_in_saml1__AudienceRestrictionConditionType(soap, tag, NULL, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_saml1__ConditionAbstractType:
		return soap_in_saml1__ConditionAbstractType(soap, tag, NULL, "saml1:ConditionAbstractType");
	case SOAP_TYPE_saml1__ConditionsType:
		return soap_in_saml1__ConditionsType(soap, tag, NULL, "saml1:ConditionsType");
	case SOAP_TYPE_saml1__AssertionType:
		return soap_in_saml1__AssertionType(soap, tag, NULL, "saml1:AssertionType");
	case SOAP_TYPE_wsc__PropertiesType:
		return soap_in_wsc__PropertiesType(soap, tag, NULL, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		return soap_in_wsc__DerivedKeyTokenType(soap, tag, NULL, "wsc:DerivedKeyTokenType");
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		return soap_in_wsc__SecurityContextTokenType(soap, tag, NULL, "wsc:SecurityContextTokenType");
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		return soap_in_xenc__EncryptionPropertyType(soap, tag, NULL, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		return soap_in_xenc__EncryptionPropertiesType(soap, tag, NULL, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_xenc__ReferenceType:
		return soap_in_xenc__ReferenceType(soap, tag, NULL, "xenc:ReferenceType");
	case SOAP_TYPE_xenc__AgreementMethodType:
		return soap_in_xenc__AgreementMethodType(soap, tag, NULL, "xenc:AgreementMethodType");
	case SOAP_TYPE_xenc__EncryptedKeyType:
		return soap_in_xenc__EncryptedKeyType(soap, tag, NULL, "xenc:EncryptedKeyType");
	case SOAP_TYPE_xenc__EncryptedDataType:
		return soap_in_xenc__EncryptedDataType(soap, tag, NULL, "xenc:EncryptedDataType");
	case SOAP_TYPE_xenc__TransformsType:
		return soap_in_xenc__TransformsType(soap, tag, NULL, "xenc:TransformsType");
	case SOAP_TYPE_xenc__CipherReferenceType:
		return soap_in_xenc__CipherReferenceType(soap, tag, NULL, "xenc:CipherReferenceType");
	case SOAP_TYPE_xenc__CipherDataType:
		return soap_in_xenc__CipherDataType(soap, tag, NULL, "xenc:CipherDataType");
	case SOAP_TYPE_xenc__EncryptionMethodType:
		return soap_in_xenc__EncryptionMethodType(soap, tag, NULL, "xenc:EncryptionMethodType");
	case SOAP_TYPE_xenc__EncryptedType:
		return soap_in_xenc__EncryptedType(soap, tag, NULL, "xenc:EncryptedType");
	case SOAP_TYPE_ds__RSAKeyValueType:
		return soap_in_ds__RSAKeyValueType(soap, tag, NULL, "ds:RSAKeyValueType");
	case SOAP_TYPE_ds__DSAKeyValueType:
		return soap_in_ds__DSAKeyValueType(soap, tag, NULL, "ds:DSAKeyValueType");
	case SOAP_TYPE_ds__X509IssuerSerialType:
		return soap_in_ds__X509IssuerSerialType(soap, tag, NULL, "ds:X509IssuerSerialType");
	case SOAP_TYPE_ds__RetrievalMethodType:
		return soap_in_ds__RetrievalMethodType(soap, tag, NULL, "ds:RetrievalMethodType");
	case SOAP_TYPE_ds__KeyValueType:
		return soap_in_ds__KeyValueType(soap, tag, NULL, "ds:KeyValueType");
	case SOAP_TYPE_ds__DigestMethodType:
		return soap_in_ds__DigestMethodType(soap, tag, NULL, "ds:DigestMethodType");
	case SOAP_TYPE_ds__TransformType:
		return soap_in_ds__TransformType(soap, tag, NULL, "ds:TransformType");
	case SOAP_TYPE_ds__TransformsType:
		return soap_in_ds__TransformsType(soap, tag, NULL, "ds:TransformsType");
	case SOAP_TYPE_ds__ReferenceType:
		return soap_in_ds__ReferenceType(soap, tag, NULL, "ds:ReferenceType");
	case SOAP_TYPE_ds__SignatureMethodType:
		return soap_in_ds__SignatureMethodType(soap, tag, NULL, "ds:SignatureMethodType");
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		return soap_in_ds__CanonicalizationMethodType(soap, tag, NULL, "ds:CanonicalizationMethodType");
	case SOAP_TYPE_ds__KeyInfoType:
		return soap_in_ds__KeyInfoType(soap, tag, NULL, "ds:KeyInfoType");
	case SOAP_TYPE_ds__SignedInfoType:
		return soap_in_ds__SignedInfoType(soap, tag, NULL, "ds:SignedInfoType");
	case SOAP_TYPE_ds__SignatureType:
		return soap_in_ds__SignatureType(soap, tag, NULL, "ds:SignatureType");
	case SOAP_TYPE_ds__X509DataType:
		return soap_in_ds__X509DataType(soap, tag, NULL, "ds:X509DataType");
	case SOAP_TYPE_wsse__EncodedString:
		return soap_in_wsse__EncodedString(soap, tag, NULL, "wsse:EncodedString");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_timeval:
		return soap_in_timeval(soap, tag, NULL, "timeval");
	case SOAP_TYPE_chan__ChannelInstanceType:
		return soap_in_chan__ChannelInstanceType(soap, tag, NULL, "chan:ChannelInstanceType");
	case SOAP_TYPE_wsa5__ProblemActionType:
		return soap_in_wsa5__ProblemActionType(soap, tag, NULL, "wsa5:ProblemActionType");
	case SOAP_TYPE_wsa5__RelatesToType:
		return soap_in_wsa5__RelatesToType(soap, tag, NULL, "wsa5:RelatesToType");
	case SOAP_TYPE_wsa5__MetadataType:
		return soap_in_wsa5__MetadataType(soap, tag, NULL, "wsa5:MetadataType");
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		return soap_in_wsa5__ReferenceParametersType(soap, tag, NULL, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		return soap_in_wsa5__EndpointReferenceType(soap, tag, NULL, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_xsd__anyAttribute:
		return soap_in_xsd__anyAttribute(soap, tag, NULL, "xsd:anyAttribute");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, tag, NULL, "xsd:anyType");
	case SOAP_TYPE_wsd__ProbeMatchesType:
		return soap_in_wsd__ProbeMatchesType(soap, tag, NULL, "wsd:ProbeMatchesType");
	case SOAP_TYPE_wsd__ProbeType:
		return soap_in_wsd__ProbeType(soap, tag, NULL, "wsd:ProbeType");
	case SOAP_TYPE_PointerTo_wsse__Security:
		return soap_in_PointerTo_wsse__Security(soap, tag, NULL, "wsse:Security");
	case SOAP_TYPE_PointerTods__SignatureType:
		return soap_in_PointerTods__SignatureType(soap, tag, NULL, "ds:SignatureType");
	case SOAP_TYPE_PointerTowsc__SecurityContextTokenType:
		return soap_in_PointerTowsc__SecurityContextTokenType(soap, tag, NULL, "wsc:SecurityContextTokenType");
	case SOAP_TYPE_PointerTo_wsse__BinarySecurityToken:
		return soap_in_PointerTo_wsse__BinarySecurityToken(soap, tag, NULL, "wsse:BinarySecurityToken");
	case SOAP_TYPE_PointerTo_wsse__UsernameToken:
		return soap_in_PointerTo_wsse__UsernameToken(soap, tag, NULL, "wsse:UsernameToken");
	case SOAP_TYPE_PointerTo_wsu__Timestamp:
		return soap_in_PointerTo_wsu__Timestamp(soap, tag, NULL, "wsu:Timestamp");
	case SOAP_TYPE_PointerToPointerTo_ds__KeyInfo:
		return soap_in_PointerToPointerTo_ds__KeyInfo(soap, tag, NULL, "ds:KeyInfo");
	case SOAP_TYPE_PointerTosaml2__AttributeType:
		return soap_in_PointerTosaml2__AttributeType(soap, tag, NULL, "saml2:AttributeType");
	case SOAP_TYPE_PointerTosaml2__EvidenceType:
		return soap_in_PointerTosaml2__EvidenceType(soap, tag, NULL, "saml2:EvidenceType");
	case SOAP_TYPE_PointerTosaml2__ActionType:
		return soap_in_PointerTosaml2__ActionType(soap, tag, NULL, "saml2:ActionType");
	case SOAP_TYPE_PointerTosaml2__AuthnContextType:
		return soap_in_PointerTosaml2__AuthnContextType(soap, tag, NULL, "saml2:AuthnContextType");
	case SOAP_TYPE_PointerTosaml2__SubjectLocalityType:
		return soap_in_PointerTosaml2__SubjectLocalityType(soap, tag, NULL, "saml2:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml2__AssertionType:
		return soap_in_PointerTosaml2__AssertionType(soap, tag, NULL, "saml2:AssertionType");
	case SOAP_TYPE_PointerTosaml2__ProxyRestrictionType:
		return soap_in_PointerTosaml2__ProxyRestrictionType(soap, tag, NULL, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_PointerTosaml2__OneTimeUseType:
		return soap_in_PointerTosaml2__OneTimeUseType(soap, tag, NULL, "saml2:OneTimeUseType");
	case SOAP_TYPE_PointerTosaml2__AudienceRestrictionType:
		return soap_in_PointerTosaml2__AudienceRestrictionType(soap, tag, NULL, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_PointerTosaml2__ConditionAbstractType:
		return soap_in_PointerTosaml2__ConditionAbstractType(soap, tag, NULL, "saml2:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType:
		return soap_in_PointerTosaml2__SubjectConfirmationDataType(soap, tag, NULL, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationType:
		return soap_in_PointerTosaml2__SubjectConfirmationType(soap, tag, NULL, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml2__EncryptedElementType:
		return soap_in_PointerTosaml2__EncryptedElementType(soap, tag, NULL, "saml2:EncryptedElementType");
	case SOAP_TYPE_PointerTosaml2__BaseIDAbstractType:
		return soap_in_PointerTosaml2__BaseIDAbstractType(soap, tag, NULL, "saml2:BaseIDAbstractType");
	case SOAP_TYPE_PointerTosaml2__AttributeStatementType:
		return soap_in_PointerTosaml2__AttributeStatementType(soap, tag, NULL, "saml2:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType:
		return soap_in_PointerTosaml2__AuthzDecisionStatementType(soap, tag, NULL, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthnStatementType:
		return soap_in_PointerTosaml2__AuthnStatementType(soap, tag, NULL, "saml2:AuthnStatementType");
	case SOAP_TYPE_PointerTosaml2__StatementAbstractType:
		return soap_in_PointerTosaml2__StatementAbstractType(soap, tag, NULL, "saml2:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml2__AdviceType:
		return soap_in_PointerTosaml2__AdviceType(soap, tag, NULL, "saml2:AdviceType");
	case SOAP_TYPE_PointerTosaml2__ConditionsType:
		return soap_in_PointerTosaml2__ConditionsType(soap, tag, NULL, "saml2:ConditionsType");
	case SOAP_TYPE_PointerTosaml2__SubjectType:
		return soap_in_PointerTosaml2__SubjectType(soap, tag, NULL, "saml2:SubjectType");
	case SOAP_TYPE_PointerTosaml2__NameIDType:
		return soap_in_PointerTosaml2__NameIDType(soap, tag, NULL, "saml2:NameIDType");
	case SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType:
		return soap_in_PointerToPointerToxenc__EncryptedKeyType(soap, tag, NULL, "xenc:EncryptedKeyType");
	case SOAP_TYPE_PointerToxenc__EncryptedKeyType:
		return soap_in_PointerToxenc__EncryptedKeyType(soap, tag, NULL, "xenc:EncryptedKeyType");
	case SOAP_TYPE_PointerTosaml1__AttributeType:
		return soap_in_PointerTosaml1__AttributeType(soap, tag, NULL, "saml1:AttributeType");
	case SOAP_TYPE_PointerTosaml1__EvidenceType:
		return soap_in_PointerTosaml1__EvidenceType(soap, tag, NULL, "saml1:EvidenceType");
	case SOAP_TYPE_PointerTosaml1__ActionType:
		return soap_in_PointerTosaml1__ActionType(soap, tag, NULL, "saml1:ActionType");
	case SOAP_TYPE_PointerTosaml1__AuthorityBindingType:
		return soap_in_PointerTosaml1__AuthorityBindingType(soap, tag, NULL, "saml1:AuthorityBindingType");
	case SOAP_TYPE_PointerTosaml1__SubjectLocalityType:
		return soap_in_PointerTosaml1__SubjectLocalityType(soap, tag, NULL, "saml1:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml1__SubjectType:
		return soap_in_PointerTosaml1__SubjectType(soap, tag, NULL, "saml1:SubjectType");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTosaml1__SubjectConfirmationType:
		return soap_in_PointerTosaml1__SubjectConfirmationType(soap, tag, NULL, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml1__NameIdentifierType:
		return soap_in_PointerTosaml1__NameIdentifierType(soap, tag, NULL, "saml1:NameIdentifierType");
	case SOAP_TYPE_PointerTosaml1__AssertionType:
		return soap_in_PointerTosaml1__AssertionType(soap, tag, NULL, "saml1:AssertionType");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTosaml1__ConditionAbstractType:
		return soap_in_PointerTosaml1__ConditionAbstractType(soap, tag, NULL, "saml1:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType:
		return soap_in_PointerTosaml1__DoNotCacheConditionType(soap, tag, NULL, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType:
		return soap_in_PointerTosaml1__AudienceRestrictionConditionType(soap, tag, NULL, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_PointerTo_ds__Signature:
		return soap_in_PointerTo_ds__Signature(soap, tag, NULL, "ds:Signature");
	case SOAP_TYPE_PointerTosaml1__AttributeStatementType:
		return soap_in_PointerTosaml1__AttributeStatementType(soap, tag, NULL, "saml1:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType:
		return soap_in_PointerTosaml1__AuthorizationDecisionStatementType(soap, tag, NULL, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthenticationStatementType:
		return soap_in_PointerTosaml1__AuthenticationStatementType(soap, tag, NULL, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType:
		return soap_in_PointerTosaml1__SubjectStatementAbstractType(soap, tag, NULL, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__StatementAbstractType:
		return soap_in_PointerTosaml1__StatementAbstractType(soap, tag, NULL, "saml1:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__AdviceType:
		return soap_in_PointerTosaml1__AdviceType(soap, tag, NULL, "saml1:AdviceType");
	case SOAP_TYPE_PointerTosaml1__ConditionsType:
		return soap_in_PointerTosaml1__ConditionsType(soap, tag, NULL, "saml1:ConditionsType");
	case SOAP_TYPE_PointerToULONG64:
		return soap_in_PointerToULONG64(soap, tag, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_PointerTowsc__PropertiesType:
		return soap_in_PointerTowsc__PropertiesType(soap, tag, NULL, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__FaultCodeOpenEnumType:
	{	char **s;
		s = soap_in_wsc__FaultCodeOpenEnumType(soap, tag, NULL, "wsc:FaultCodeOpenEnumType");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerTo_xenc__ReferenceList:
		return soap_in_PointerTo_xenc__ReferenceList(soap, tag, NULL, "xenc:ReferenceList");
	case SOAP_TYPE_PointerToxenc__ReferenceType:
		return soap_in_PointerToxenc__ReferenceType(soap, tag, NULL, "xenc:ReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertyType:
		return soap_in_PointerToxenc__EncryptionPropertyType(soap, tag, NULL, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_PointerToxenc__TransformsType:
		return soap_in_PointerToxenc__TransformsType(soap, tag, NULL, "xenc:TransformsType");
	case SOAP_TYPE_PointerToxenc__CipherReferenceType:
		return soap_in_PointerToxenc__CipherReferenceType(soap, tag, NULL, "xenc:CipherReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertiesType:
		return soap_in_PointerToxenc__EncryptionPropertiesType(soap, tag, NULL, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_PointerToxenc__CipherDataType:
		return soap_in_PointerToxenc__CipherDataType(soap, tag, NULL, "xenc:CipherDataType");
	case SOAP_TYPE_PointerTo_ds__KeyInfo:
		return soap_in_PointerTo_ds__KeyInfo(soap, tag, NULL, "ds:KeyInfo");
	case SOAP_TYPE_PointerToxenc__EncryptionMethodType:
		return soap_in_PointerToxenc__EncryptionMethodType(soap, tag, NULL, "xenc:EncryptionMethodType");
	case SOAP_TYPE_PointerTods__X509IssuerSerialType:
		return soap_in_PointerTods__X509IssuerSerialType(soap, tag, NULL, "ds:X509IssuerSerialType");
	case SOAP_TYPE_PointerTods__RSAKeyValueType:
		return soap_in_PointerTods__RSAKeyValueType(soap, tag, NULL, "ds:RSAKeyValueType");
	case SOAP_TYPE_PointerTods__DSAKeyValueType:
		return soap_in_PointerTods__DSAKeyValueType(soap, tag, NULL, "ds:DSAKeyValueType");
	case SOAP_TYPE_PointerTods__TransformType:
		return soap_in_PointerTods__TransformType(soap, tag, NULL, "ds:TransformType");
	case SOAP_TYPE_PointerTods__DigestMethodType:
		return soap_in_PointerTods__DigestMethodType(soap, tag, NULL, "ds:DigestMethodType");
	case SOAP_TYPE_PointerTods__TransformsType:
		return soap_in_PointerTods__TransformsType(soap, tag, NULL, "ds:TransformsType");
	case SOAP_TYPE_PointerToPointerTods__ReferenceType:
		return soap_in_PointerToPointerTods__ReferenceType(soap, tag, NULL, "ds:ReferenceType");
	case SOAP_TYPE_PointerTods__ReferenceType:
		return soap_in_PointerTods__ReferenceType(soap, tag, NULL, "ds:ReferenceType");
	case SOAP_TYPE_PointerTods__SignatureMethodType:
		return soap_in_PointerTods__SignatureMethodType(soap, tag, NULL, "ds:SignatureMethodType");
	case SOAP_TYPE_PointerTods__CanonicalizationMethodType:
		return soap_in_PointerTods__CanonicalizationMethodType(soap, tag, NULL, "ds:CanonicalizationMethodType");
	case SOAP_TYPE_PointerTo_wsse__SecurityTokenReference:
		return soap_in_PointerTo_wsse__SecurityTokenReference(soap, tag, NULL, "wsse:SecurityTokenReference");
	case SOAP_TYPE_PointerTods__RetrievalMethodType:
		return soap_in_PointerTods__RetrievalMethodType(soap, tag, NULL, "ds:RetrievalMethodType");
	case SOAP_TYPE_PointerTods__KeyValueType:
		return soap_in_PointerTods__KeyValueType(soap, tag, NULL, "ds:KeyValueType");
	case SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces:
		return soap_in_PointerTo_c14n__InclusiveNamespaces(soap, tag, NULL, "c14n:InclusiveNamespaces");
	case SOAP_TYPE_PointerTods__KeyInfoType:
		return soap_in_PointerTods__KeyInfoType(soap, tag, NULL, "ds:KeyInfoType");
	case SOAP_TYPE_PointerTods__SignedInfoType:
		return soap_in_PointerTods__SignedInfoType(soap, tag, NULL, "ds:SignedInfoType");
	case SOAP_TYPE_PointerTods__X509DataType:
		return soap_in_PointerTods__X509DataType(soap, tag, NULL, "ds:X509DataType");
	case SOAP_TYPE_PointerTo_wsse__Embedded:
		return soap_in_PointerTo_wsse__Embedded(soap, tag, NULL, "wsse:Embedded");
	case SOAP_TYPE_PointerTo_wsse__KeyIdentifier:
		return soap_in_PointerTo_wsse__KeyIdentifier(soap, tag, NULL, "wsse:KeyIdentifier");
	case SOAP_TYPE_PointerTo_wsse__Reference:
		return soap_in_PointerTo_wsse__Reference(soap, tag, NULL, "wsse:Reference");
	case SOAP_TYPE_PointerTowsse__EncodedString:
		return soap_in_PointerTowsse__EncodedString(soap, tag, NULL, "wsse:EncodedString");
	case SOAP_TYPE_PointerTo_wsse__Password:
		return soap_in_PointerTo_wsse__Password(soap, tag, NULL, "wsse:Password");
	case SOAP_TYPE_PointerTowsd__AppSequenceType:
		return soap_in_PointerTowsd__AppSequenceType(soap, tag, NULL, "wsd:AppSequenceType");
	case SOAP_TYPE_PointerTowsa__Relationship:
		return soap_in_PointerTowsa__Relationship(soap, tag, NULL, "wsa:Relationship");
	case SOAP_TYPE_PointerTo_wsnt__ResumeSubscription:
		return soap_in_PointerTo_wsnt__ResumeSubscription(soap, tag, NULL, "wsnt:ResumeSubscription");
	case SOAP_TYPE_PointerTo_wsnt__PauseSubscription:
		return soap_in_PointerTo_wsnt__PauseSubscription(soap, tag, NULL, "wsnt:PauseSubscription");
	case SOAP_TYPE_PointerTo_wsnt__Renew:
		return soap_in_PointerTo_wsnt__Renew(soap, tag, NULL, "wsnt:Renew");
	case SOAP_TYPE_PointerTo_wsnt__Unsubscribe:
		return soap_in_PointerTo_wsnt__Unsubscribe(soap, tag, NULL, "wsnt:Unsubscribe");
	case SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint:
		return soap_in_PointerTo_tev__SetSynchronizationPoint(soap, tag, NULL, "tev:SetSynchronizationPoint");
	case SOAP_TYPE_PointerTo_tev__Seek:
		return soap_in_PointerTo_tev__Seek(soap, tag, NULL, "tev:Seek");
	case SOAP_TYPE_PointerTo_tev__PullMessages:
		return soap_in_PointerTo_tev__PullMessages(soap, tag, NULL, "tev:PullMessages");
	case SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint:
		return soap_in_PointerTo_wsnt__DestroyPullPoint(soap, tag, NULL, "wsnt:DestroyPullPoint");
	case SOAP_TYPE_PointerTo_wsnt__GetMessages:
		return soap_in_PointerTo_wsnt__GetMessages(soap, tag, NULL, "wsnt:GetMessages");
	case SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage:
		return soap_in_PointerTo_wsnt__GetCurrentMessage(soap, tag, NULL, "wsnt:GetCurrentMessage");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe:
		return soap_in_PointerTo_wsnt__Subscribe(soap, tag, NULL, "wsnt:Subscribe");
	case SOAP_TYPE_PointerTo_wsnt__Notify:
		return soap_in_PointerTo_wsnt__Notify(soap, tag, NULL, "wsnt:Notify");
	case SOAP_TYPE_PointerTo_tev__GetEventProperties:
		return soap_in_PointerTo_tev__GetEventProperties(soap, tag, NULL, "tev:GetEventProperties");
	case SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription:
		return soap_in_PointerTo_tev__CreatePullPointSubscription(soap, tag, NULL, "tev:CreatePullPointSubscription");
	case SOAP_TYPE_PointerTo_tev__GetServiceCapabilities:
		return soap_in_PointerTo_tev__GetServiceCapabilities(soap, tag, NULL, "tev:GetServiceCapabilities");
	case SOAP_TYPE_PointerTo_wsnt__CreatePullPoint:
		return soap_in_PointerTo_wsnt__CreatePullPoint(soap, tag, NULL, "wsnt:CreatePullPoint");
	case SOAP_TYPE_PointerTo_tds__DeleteGeoLocation:
		return soap_in_PointerTo_tds__DeleteGeoLocation(soap, tag, NULL, "tds:DeleteGeoLocation");
	case SOAP_TYPE_PointerTo_tds__SetGeoLocation:
		return soap_in_PointerTo_tds__SetGeoLocation(soap, tag, NULL, "tds:SetGeoLocation");
	case SOAP_TYPE_PointerTo_tds__GetGeoLocation:
		return soap_in_PointerTo_tds__GetGeoLocation(soap, tag, NULL, "tds:GetGeoLocation");
	case SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration:
		return soap_in_PointerTo_tds__DeleteStorageConfiguration(soap, tag, NULL, "tds:DeleteStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__SetStorageConfiguration:
		return soap_in_PointerTo_tds__SetStorageConfiguration(soap, tag, NULL, "tds:SetStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetStorageConfiguration:
		return soap_in_PointerTo_tds__GetStorageConfiguration(soap, tag, NULL, "tds:GetStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration:
		return soap_in_PointerTo_tds__CreateStorageConfiguration(soap, tag, NULL, "tds:CreateStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetStorageConfigurations:
		return soap_in_PointerTo_tds__GetStorageConfigurations(soap, tag, NULL, "tds:GetStorageConfigurations");
	case SOAP_TYPE_PointerTo_tds__StartSystemRestore:
		return soap_in_PointerTo_tds__StartSystemRestore(soap, tag, NULL, "tds:StartSystemRestore");
	case SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade:
		return soap_in_PointerTo_tds__StartFirmwareUpgrade(soap, tag, NULL, "tds:StartFirmwareUpgrade");
	case SOAP_TYPE_PointerTo_tds__GetSystemUris:
		return soap_in_PointerTo_tds__GetSystemUris(soap, tag, NULL, "tds:GetSystemUris");
	case SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks:
		return soap_in_PointerTo_tds__ScanAvailableDot11Networks(soap, tag, NULL, "tds:ScanAvailableDot11Networks");
	case SOAP_TYPE_PointerTo_tds__GetDot11Status:
		return soap_in_PointerTo_tds__GetDot11Status(soap, tag, NULL, "tds:GetDot11Status");
	case SOAP_TYPE_PointerTo_tds__GetDot11Capabilities:
		return soap_in_PointerTo_tds__GetDot11Capabilities(soap, tag, NULL, "tds:GetDot11Capabilities");
	case SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration:
		return soap_in_PointerTo_tds__DeleteDot1XConfiguration(soap, tag, NULL, "tds:DeleteDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations:
		return soap_in_PointerTo_tds__GetDot1XConfigurations(soap, tag, NULL, "tds:GetDot1XConfigurations");
	case SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration:
		return soap_in_PointerTo_tds__GetDot1XConfiguration(soap, tag, NULL, "tds:GetDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration:
		return soap_in_PointerTo_tds__SetDot1XConfiguration(soap, tag, NULL, "tds:SetDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration:
		return soap_in_PointerTo_tds__CreateDot1XConfiguration(soap, tag, NULL, "tds:CreateDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__LoadCACertificates:
		return soap_in_PointerTo_tds__LoadCACertificates(soap, tag, NULL, "tds:LoadCACertificates");
	case SOAP_TYPE_PointerTo_tds__GetCertificateInformation:
		return soap_in_PointerTo_tds__GetCertificateInformation(soap, tag, NULL, "tds:GetCertificateInformation");
	case SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey:
		return soap_in_PointerTo_tds__LoadCertificateWithPrivateKey(soap, tag, NULL, "tds:LoadCertificateWithPrivateKey");
	case SOAP_TYPE_PointerTo_tds__GetCACertificates:
		return soap_in_PointerTo_tds__GetCACertificates(soap, tag, NULL, "tds:GetCACertificates");
	case SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand:
		return soap_in_PointerTo_tds__SendAuxiliaryCommand(soap, tag, NULL, "tds:SendAuxiliaryCommand");
	case SOAP_TYPE_PointerTo_tds__SetRelayOutputState:
		return soap_in_PointerTo_tds__SetRelayOutputState(soap, tag, NULL, "tds:SetRelayOutputState");
	case SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings:
		return soap_in_PointerTo_tds__SetRelayOutputSettings(soap, tag, NULL, "tds:SetRelayOutputSettings");
	case SOAP_TYPE_PointerTo_tds__GetRelayOutputs:
		return soap_in_PointerTo_tds__GetRelayOutputs(soap, tag, NULL, "tds:GetRelayOutputs");
	case SOAP_TYPE_PointerTo_tds__SetClientCertificateMode:
		return soap_in_PointerTo_tds__SetClientCertificateMode(soap, tag, NULL, "tds:SetClientCertificateMode");
	case SOAP_TYPE_PointerTo_tds__GetClientCertificateMode:
		return soap_in_PointerTo_tds__GetClientCertificateMode(soap, tag, NULL, "tds:GetClientCertificateMode");
	case SOAP_TYPE_PointerTo_tds__LoadCertificates:
		return soap_in_PointerTo_tds__LoadCertificates(soap, tag, NULL, "tds:LoadCertificates");
	case SOAP_TYPE_PointerTo_tds__GetPkcs10Request:
		return soap_in_PointerTo_tds__GetPkcs10Request(soap, tag, NULL, "tds:GetPkcs10Request");
	case SOAP_TYPE_PointerTo_tds__DeleteCertificates:
		return soap_in_PointerTo_tds__DeleteCertificates(soap, tag, NULL, "tds:DeleteCertificates");
	case SOAP_TYPE_PointerTo_tds__SetCertificatesStatus:
		return soap_in_PointerTo_tds__SetCertificatesStatus(soap, tag, NULL, "tds:SetCertificatesStatus");
	case SOAP_TYPE_PointerTo_tds__GetCertificatesStatus:
		return soap_in_PointerTo_tds__GetCertificatesStatus(soap, tag, NULL, "tds:GetCertificatesStatus");
	case SOAP_TYPE_PointerTo_tds__GetCertificates:
		return soap_in_PointerTo_tds__GetCertificates(soap, tag, NULL, "tds:GetCertificates");
	case SOAP_TYPE_PointerTo_tds__CreateCertificate:
		return soap_in_PointerTo_tds__CreateCertificate(soap, tag, NULL, "tds:CreateCertificate");
	case SOAP_TYPE_PointerTo_tds__SetAccessPolicy:
		return soap_in_PointerTo_tds__SetAccessPolicy(soap, tag, NULL, "tds:SetAccessPolicy");
	case SOAP_TYPE_PointerTo_tds__GetAccessPolicy:
		return soap_in_PointerTo_tds__GetAccessPolicy(soap, tag, NULL, "tds:GetAccessPolicy");
	case SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter:
		return soap_in_PointerTo_tds__RemoveIPAddressFilter(soap, tag, NULL, "tds:RemoveIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__AddIPAddressFilter:
		return soap_in_PointerTo_tds__AddIPAddressFilter(soap, tag, NULL, "tds:AddIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__SetIPAddressFilter:
		return soap_in_PointerTo_tds__SetIPAddressFilter(soap, tag, NULL, "tds:SetIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__GetIPAddressFilter:
		return soap_in_PointerTo_tds__GetIPAddressFilter(soap, tag, NULL, "tds:GetIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__SetZeroConfiguration:
		return soap_in_PointerTo_tds__SetZeroConfiguration(soap, tag, NULL, "tds:SetZeroConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetZeroConfiguration:
		return soap_in_PointerTo_tds__GetZeroConfiguration(soap, tag, NULL, "tds:GetZeroConfiguration");
	case SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway:
		return soap_in_PointerTo_tds__SetNetworkDefaultGateway(soap, tag, NULL, "tds:SetNetworkDefaultGateway");
	case SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway:
		return soap_in_PointerTo_tds__GetNetworkDefaultGateway(soap, tag, NULL, "tds:GetNetworkDefaultGateway");
	case SOAP_TYPE_PointerTo_tds__SetNetworkProtocols:
		return soap_in_PointerTo_tds__SetNetworkProtocols(soap, tag, NULL, "tds:SetNetworkProtocols");
	case SOAP_TYPE_PointerTo_tds__GetNetworkProtocols:
		return soap_in_PointerTo_tds__GetNetworkProtocols(soap, tag, NULL, "tds:GetNetworkProtocols");
	case SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces:
		return soap_in_PointerTo_tds__SetNetworkInterfaces(soap, tag, NULL, "tds:SetNetworkInterfaces");
	case SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces:
		return soap_in_PointerTo_tds__GetNetworkInterfaces(soap, tag, NULL, "tds:GetNetworkInterfaces");
	case SOAP_TYPE_PointerTo_tds__SetDynamicDNS:
		return soap_in_PointerTo_tds__SetDynamicDNS(soap, tag, NULL, "tds:SetDynamicDNS");
	case SOAP_TYPE_PointerTo_tds__GetDynamicDNS:
		return soap_in_PointerTo_tds__GetDynamicDNS(soap, tag, NULL, "tds:GetDynamicDNS");
	case SOAP_TYPE_PointerTo_tds__SetNTP:
		return soap_in_PointerTo_tds__SetNTP(soap, tag, NULL, "tds:SetNTP");
	case SOAP_TYPE_PointerTo_tds__GetNTP:
		return soap_in_PointerTo_tds__GetNTP(soap, tag, NULL, "tds:GetNTP");
	case SOAP_TYPE_PointerTo_tds__SetDNS:
		return soap_in_PointerTo_tds__SetDNS(soap, tag, NULL, "tds:SetDNS");
	case SOAP_TYPE_PointerTo_tds__GetDNS:
		return soap_in_PointerTo_tds__GetDNS(soap, tag, NULL, "tds:GetDNS");
	case SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP:
		return soap_in_PointerTo_tds__SetHostnameFromDHCP(soap, tag, NULL, "tds:SetHostnameFromDHCP");
	case SOAP_TYPE_PointerTo_tds__SetHostname:
		return soap_in_PointerTo_tds__SetHostname(soap, tag, NULL, "tds:SetHostname");
	case SOAP_TYPE_PointerTo_tds__GetHostname:
		return soap_in_PointerTo_tds__GetHostname(soap, tag, NULL, "tds:GetHostname");
	case SOAP_TYPE_PointerTo_tds__SetDPAddresses:
		return soap_in_PointerTo_tds__SetDPAddresses(soap, tag, NULL, "tds:SetDPAddresses");
	case SOAP_TYPE_PointerTo_tds__GetCapabilities:
		return soap_in_PointerTo_tds__GetCapabilities(soap, tag, NULL, "tds:GetCapabilities");
	case SOAP_TYPE_PointerTo_tds__GetWsdlUrl:
		return soap_in_PointerTo_tds__GetWsdlUrl(soap, tag, NULL, "tds:GetWsdlUrl");
	case SOAP_TYPE_PointerTo_tds__SetUser:
		return soap_in_PointerTo_tds__SetUser(soap, tag, NULL, "tds:SetUser");
	case SOAP_TYPE_PointerTo_tds__DeleteUsers:
		return soap_in_PointerTo_tds__DeleteUsers(soap, tag, NULL, "tds:DeleteUsers");
	case SOAP_TYPE_PointerTo_tds__CreateUsers:
		return soap_in_PointerTo_tds__CreateUsers(soap, tag, NULL, "tds:CreateUsers");
	case SOAP_TYPE_PointerTo_tds__GetUsers:
		return soap_in_PointerTo_tds__GetUsers(soap, tag, NULL, "tds:GetUsers");
	case SOAP_TYPE_PointerTo_tds__SetRemoteUser:
		return soap_in_PointerTo_tds__SetRemoteUser(soap, tag, NULL, "tds:SetRemoteUser");
	case SOAP_TYPE_PointerTo_tds__GetRemoteUser:
		return soap_in_PointerTo_tds__GetRemoteUser(soap, tag, NULL, "tds:GetRemoteUser");
	case SOAP_TYPE_PointerTo_tds__GetEndpointReference:
		return soap_in_PointerTo_tds__GetEndpointReference(soap, tag, NULL, "tds:GetEndpointReference");
	case SOAP_TYPE_PointerTo_tds__GetDPAddresses:
		return soap_in_PointerTo_tds__GetDPAddresses(soap, tag, NULL, "tds:GetDPAddresses");
	case SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode:
		return soap_in_PointerTo_tds__SetRemoteDiscoveryMode(soap, tag, NULL, "tds:SetRemoteDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode:
		return soap_in_PointerTo_tds__GetRemoteDiscoveryMode(soap, tag, NULL, "tds:GetRemoteDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__SetDiscoveryMode:
		return soap_in_PointerTo_tds__SetDiscoveryMode(soap, tag, NULL, "tds:SetDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__GetDiscoveryMode:
		return soap_in_PointerTo_tds__GetDiscoveryMode(soap, tag, NULL, "tds:GetDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__RemoveScopes:
		return soap_in_PointerTo_tds__RemoveScopes(soap, tag, NULL, "tds:RemoveScopes");
	case SOAP_TYPE_PointerTo_tds__AddScopes:
		return soap_in_PointerTo_tds__AddScopes(soap, tag, NULL, "tds:AddScopes");
	case SOAP_TYPE_PointerTo_tds__SetScopes:
		return soap_in_PointerTo_tds__SetScopes(soap, tag, NULL, "tds:SetScopes");
	case SOAP_TYPE_PointerTo_tds__GetScopes:
		return soap_in_PointerTo_tds__GetScopes(soap, tag, NULL, "tds:GetScopes");
	case SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation:
		return soap_in_PointerTo_tds__GetSystemSupportInformation(soap, tag, NULL, "tds:GetSystemSupportInformation");
	case SOAP_TYPE_PointerTo_tds__GetSystemLog:
		return soap_in_PointerTo_tds__GetSystemLog(soap, tag, NULL, "tds:GetSystemLog");
	case SOAP_TYPE_PointerTo_tds__GetSystemBackup:
		return soap_in_PointerTo_tds__GetSystemBackup(soap, tag, NULL, "tds:GetSystemBackup");
	case SOAP_TYPE_PointerTo_tds__RestoreSystem:
		return soap_in_PointerTo_tds__RestoreSystem(soap, tag, NULL, "tds:RestoreSystem");
	case SOAP_TYPE_PointerTo_tds__SystemReboot:
		return soap_in_PointerTo_tds__SystemReboot(soap, tag, NULL, "tds:SystemReboot");
	case SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware:
		return soap_in_PointerTo_tds__UpgradeSystemFirmware(soap, tag, NULL, "tds:UpgradeSystemFirmware");
	case SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault:
		return soap_in_PointerTo_tds__SetSystemFactoryDefault(soap, tag, NULL, "tds:SetSystemFactoryDefault");
	case SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime:
		return soap_in_PointerTo_tds__GetSystemDateAndTime(soap, tag, NULL, "tds:GetSystemDateAndTime");
	case SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime:
		return soap_in_PointerTo_tds__SetSystemDateAndTime(soap, tag, NULL, "tds:SetSystemDateAndTime");
	case SOAP_TYPE_PointerTo_tds__GetDeviceInformation:
		return soap_in_PointerTo_tds__GetDeviceInformation(soap, tag, NULL, "tds:GetDeviceInformation");
	case SOAP_TYPE_PointerTo_tds__GetServiceCapabilities:
		return soap_in_PointerTo_tds__GetServiceCapabilities(soap, tag, NULL, "tds:GetServiceCapabilities");
	case SOAP_TYPE_PointerTo_tds__GetServices:
		return soap_in_PointerTo_tds__GetServices(soap, tag, NULL, "tds:GetServices");
	case SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType:
		return soap_in_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, tag, NULL, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType:
		return soap_in_PointerTowsnt__ResumeFailedFaultType(soap, tag, NULL, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__PauseFailedFaultType:
		return soap_in_PointerTowsnt__PauseFailedFaultType(soap, tag, NULL, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType:
		return soap_in_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, tag, NULL, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse:
		return soap_in_PointerTo_tev__PullMessagesFaultResponse(soap, tag, NULL, "tev:PullMessagesFaultResponse");
	case SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType:
		return soap_in_PointerTowsnt__UnableToGetMessagesFaultType(soap, tag, NULL, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType:
		return soap_in_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, tag, NULL, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType:
		return soap_in_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, tag, NULL, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType:
		return soap_in_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, tag, NULL, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType:
		return soap_in_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, tag, NULL, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType:
		return soap_in_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, tag, NULL, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType:
		return soap_in_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, NULL, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType:
		return soap_in_PointerTowsnt__TopicNotSupportedFaultType(soap, tag, NULL, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType:
		return soap_in_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, tag, NULL, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType:
		return soap_in_PointerTowsnt__SubscribeCreationFailedFaultType(soap, tag, NULL, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_PointerTowsrf__ResourceUnknownFaultType:
		return soap_in_PointerTowsrf__ResourceUnknownFaultType(soap, tag, NULL, "wsrf:ResourceUnknownFaultType");
	case SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType:
		return soap_in_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, tag, NULL, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType:
		return soap_in_PointerTowsnt__InvalidTopicExpressionFaultType(soap, tag, NULL, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType:
		return soap_in_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, NULL, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType:
		return soap_in_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, tag, NULL, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType:
		return soap_in_PointerTowsnt__InvalidFilterFaultType(soap, tag, NULL, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType:
		return soap_in_PointerTowsnt__UnableToCreatePullPointFaultType(soap, tag, NULL, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_PointerToxsd__NCName:
		return soap_in_PointerToxsd__NCName(soap, tag, NULL, "xsd:NCName");
	case SOAP_TYPE_PointerTowstop__ConcreteTopicExpression:
		return soap_in_PointerTowstop__ConcreteTopicExpression(soap, tag, NULL, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_PointerToxsd__QName:
		return soap_in_PointerToxsd__QName(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_PointerTowstop__TopicType:
		return soap_in_PointerTowstop__TopicType(soap, tag, NULL, "wstop:TopicType");
	case SOAP_TYPE_PointerTowstop__QueryExpressionType:
		return soap_in_PointerTowstop__QueryExpressionType(soap, tag, NULL, "wstop:QueryExpressionType");
	case SOAP_TYPE_PointerTott__OSDConfigurationExtension:
		return soap_in_PointerTott__OSDConfigurationExtension(soap, tag, NULL, "tt:OSDConfigurationExtension");
	case SOAP_TYPE_PointerTott__OSDImgConfiguration:
		return soap_in_PointerTott__OSDImgConfiguration(soap, tag, NULL, "tt:OSDImgConfiguration");
	case SOAP_TYPE_PointerTott__OSDTextConfiguration:
		return soap_in_PointerTott__OSDTextConfiguration(soap, tag, NULL, "tt:OSDTextConfiguration");
	case SOAP_TYPE_PointerTott__OSDPosConfiguration:
		return soap_in_PointerTott__OSDPosConfiguration(soap, tag, NULL, "tt:OSDPosConfiguration");
	case SOAP_TYPE_PointerTott__OSDReference:
		return soap_in_PointerTott__OSDReference(soap, tag, NULL, "tt:OSDReference");
	case SOAP_TYPE_PointerTott__MetadataInput:
		return soap_in_PointerTott__MetadataInput(soap, tag, NULL, "tt:MetadataInput");
	case SOAP_TYPE_PointerTott__SourceIdentification:
		return soap_in_PointerTott__SourceIdentification(soap, tag, NULL, "tt:SourceIdentification");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration:
		return soap_in_PointerTott__AnalyticsDeviceEngineConfiguration(soap, tag, NULL, "tt:AnalyticsDeviceEngineConfiguration");
	case SOAP_TYPE_PointerTott__PTZConfigurationExtension:
		return soap_in_PointerTott__PTZConfigurationExtension(soap, tag, NULL, "tt:PTZConfigurationExtension");
	case SOAP_TYPE_PointerTott__ZoomLimits:
		return soap_in_PointerTott__ZoomLimits(soap, tag, NULL, "tt:ZoomLimits");
	case SOAP_TYPE_PointerTott__PanTiltLimits:
		return soap_in_PointerTott__PanTiltLimits(soap, tag, NULL, "tt:PanTiltLimits");
	case SOAP_TYPE_PointerTott__PTZNodeExtension:
		return soap_in_PointerTott__PTZNodeExtension(soap, tag, NULL, "tt:PTZNodeExtension");
	case SOAP_TYPE_PointerTott__DigitalIdleState:
		return soap_in_PointerTott__DigitalIdleState(soap, tag, NULL, "tt:DigitalIdleState");
	case SOAP_TYPE_PointerTott__NetworkInterfaceExtension:
		return soap_in_PointerTott__NetworkInterfaceExtension(soap, tag, NULL, "tt:NetworkInterfaceExtension");
	case SOAP_TYPE_PointerTott__IPv6NetworkInterface:
		return soap_in_PointerTott__IPv6NetworkInterface(soap, tag, NULL, "tt:IPv6NetworkInterface");
	case SOAP_TYPE_PointerTott__IPv4NetworkInterface:
		return soap_in_PointerTott__IPv4NetworkInterface(soap, tag, NULL, "tt:IPv4NetworkInterface");
	case SOAP_TYPE_PointerTott__NetworkInterfaceLink:
		return soap_in_PointerTott__NetworkInterfaceLink(soap, tag, NULL, "tt:NetworkInterfaceLink");
	case SOAP_TYPE_PointerTott__NetworkInterfaceInfo:
		return soap_in_PointerTott__NetworkInterfaceInfo(soap, tag, NULL, "tt:NetworkInterfaceInfo");
	case SOAP_TYPE_PointerTott__VideoOutputExtension:
		return soap_in_PointerTott__VideoOutputExtension(soap, tag, NULL, "tt:VideoOutputExtension");
	case SOAP_TYPE_PointerTott__Layout:
		return soap_in_PointerTott__Layout(soap, tag, NULL, "tt:Layout");
	case SOAP_TYPE_PointerTott__MetadataConfigurationExtension:
		return soap_in_PointerTott__MetadataConfigurationExtension(soap, tag, NULL, "tt:MetadataConfigurationExtension");
	case SOAP_TYPE_PointerTott__EventSubscription:
		return soap_in_PointerTott__EventSubscription(soap, tag, NULL, "tt:EventSubscription");
	case SOAP_TYPE_PointerTott__PTZFilter:
		return soap_in_PointerTott__PTZFilter(soap, tag, NULL, "tt:PTZFilter");
	case SOAP_TYPE_PointerTott__RuleEngineConfiguration:
		return soap_in_PointerTott__RuleEngineConfiguration(soap, tag, NULL, "tt:RuleEngineConfiguration");
	case SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration:
		return soap_in_PointerTott__AnalyticsEngineConfiguration(soap, tag, NULL, "tt:AnalyticsEngineConfiguration");
	case SOAP_TYPE_PointerTott__VideoRateControl2:
		return soap_in_PointerTott__VideoRateControl2(soap, tag, NULL, "tt:VideoRateControl2");
	case SOAP_TYPE_PointerTott__MulticastConfiguration:
		return soap_in_PointerTott__MulticastConfiguration(soap, tag, NULL, "tt:MulticastConfiguration");
	case SOAP_TYPE_PointerTott__H264Configuration:
		return soap_in_PointerTott__H264Configuration(soap, tag, NULL, "tt:H264Configuration");
	case SOAP_TYPE_PointerTott__Mpeg4Configuration:
		return soap_in_PointerTott__Mpeg4Configuration(soap, tag, NULL, "tt:Mpeg4Configuration");
	case SOAP_TYPE_PointerTott__VideoRateControl:
		return soap_in_PointerTott__VideoRateControl(soap, tag, NULL, "tt:VideoRateControl");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension:
		return soap_in_PointerTott__VideoSourceConfigurationExtension(soap, tag, NULL, "tt:VideoSourceConfigurationExtension");
	case SOAP_TYPE_PointerTott__IntRectangle:
		return soap_in_PointerTott__IntRectangle(soap, tag, NULL, "tt:IntRectangle");
	case SOAP_TYPE_PointerTott__VideoSourceExtension:
		return soap_in_PointerTott__VideoSourceExtension(soap, tag, NULL, "tt:VideoSourceExtension");
	case SOAP_TYPE_PointerTott__ImagingSettings:
		return soap_in_PointerTott__ImagingSettings(soap, tag, NULL, "tt:ImagingSettings");
	case SOAP_TYPE_PointerTott__MessageDescription:
		return soap_in_PointerTott__MessageDescription(soap, tag, NULL, "tt:MessageDescription");
	case SOAP_TYPE_PointerTowsa__ServiceNameType:
		return soap_in_PointerTowsa__ServiceNameType(soap, tag, NULL, "wsa:ServiceNameType");
	case SOAP_TYPE_PointerTowsa__AttributedQName:
		return soap_in_PointerTowsa__AttributedQName(soap, tag, NULL, "wsa:AttributedQName");
	case SOAP_TYPE_PointerTowsa__ReferenceParametersType:
		return soap_in_PointerTowsa__ReferenceParametersType(soap, tag, NULL, "wsa:ReferenceParametersType");
	case SOAP_TYPE_PointerTowsa__ReferencePropertiesType:
		return soap_in_PointerTowsa__ReferencePropertiesType(soap, tag, NULL, "wsa:ReferencePropertiesType");
	case SOAP_TYPE_PointerTowsa__AttributedURI:
		return soap_in_PointerTowsa__AttributedURI(soap, tag, NULL, "wsa:AttributedURI");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTowsd__SigType:
		return soap_in_PointerTowsd__SigType(soap, tag, NULL, "wsd:SigType");
	case SOAP_TYPE_PointerTowsd__ResolveMatchType:
		return soap_in_PointerTowsd__ResolveMatchType(soap, tag, NULL, "wsd:ResolveMatchType");
	case SOAP_TYPE_PointerTowsd__ProbeMatchType:
		return soap_in_PointerTowsd__ProbeMatchType(soap, tag, NULL, "wsd:ProbeMatchType");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_in_PointerTounsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_PointerTowsd__UriListType:
		return soap_in_PointerTowsd__UriListType(soap, tag, NULL, "wsd:UriListType");
	case SOAP_TYPE_PointerTowsd__ScopesType:
		return soap_in_PointerTowsd__ScopesType(soap, tag, NULL, "wsd:ScopesType");
	case SOAP_TYPE_PointerTowsd__QNameListType:
		return soap_in_PointerTowsd__QNameListType(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_PointerTowsa__EndpointReferenceType:
		return soap_in_PointerTowsa__EndpointReferenceType(soap, tag, NULL, "wsa:EndpointReferenceType");
	case SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy:
		return soap_in_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, NULL, "tev:CreatePullPointSubscription-SubscriptionPolicy");
	case SOAP_TYPE_PointerTotev__Capabilities:
		return soap_in_PointerTotev__Capabilities(soap, tag, NULL, "tev:Capabilities");
	case SOAP_TYPE_PointerTowstop__Documentation:
		return soap_in_PointerTowstop__Documentation(soap, tag, NULL, "wstop:Documentation");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause:
		return soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, tag, NULL, "wsrfbf:BaseFaultType-FaultCause");
	case SOAP_TYPE_PointerTo_xml__lang:
		return soap_in_PointerTo_xml__lang(soap, tag, NULL, "xml:lang");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode:
		return soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, tag, NULL, "wsrfbf:BaseFaultType-ErrorCode");
	case SOAP_TYPE_PointerToxsd__nonNegativeInteger:
		return soap_in_PointerToxsd__nonNegativeInteger(soap, tag, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy:
		return soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, tag, NULL, "wsnt:Subscribe-SubscriptionPolicy");
	case SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType:
		return soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, tag, NULL, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType:
		return soap_in_PointerTowsnt__SubscriptionPolicyType(soap, tag, NULL, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_PointerTowstop__TopicSetType:
		return soap_in_PointerTowstop__TopicSetType(soap, tag, NULL, "wstop:TopicSetType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionTypeCustom:
		return soap_in_PointerTowsnt__TopicExpressionTypeCustom(soap, tag, NULL, "wsnt:TopicExpressionTypeCustom");
	case SOAP_TYPE_PointerTowsa5__EndpointReferenceType:
		return soap_in_PointerTowsa5__EndpointReferenceType(soap, tag, NULL, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_PointerTott__PropertyOperation:
		return soap_in_PointerTott__PropertyOperation(soap, tag, NULL, "tt:PropertyOperation");
	case SOAP_TYPE_PointerTott__MessageExtension:
		return soap_in_PointerTott__MessageExtension(soap, tag, NULL, "tt:MessageExtension");
	case SOAP_TYPE_PointerTott__LocalOrientation:
		return soap_in_PointerTott__LocalOrientation(soap, tag, NULL, "tt:LocalOrientation");
	case SOAP_TYPE_PointerTott__LocalLocation:
		return soap_in_PointerTott__LocalLocation(soap, tag, NULL, "tt:LocalLocation");
	case SOAP_TYPE_PointerTott__GeoOrientation:
		return soap_in_PointerTott__GeoOrientation(soap, tag, NULL, "tt:GeoOrientation");
	case SOAP_TYPE_PointerTott__GeoLocation:
		return soap_in_PointerTott__GeoLocation(soap, tag, NULL, "tt:GeoLocation");
	case SOAP_TYPE_PointerTodouble:
		return soap_in_PointerTodouble(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_PointerTott__TransformationExtension:
		return soap_in_PointerTott__TransformationExtension(soap, tag, NULL, "tt:TransformationExtension");
	case SOAP_TYPE_PointerTott__MoveStatus:
		return soap_in_PointerTott__MoveStatus(soap, tag, NULL, "tt:MoveStatus");
	case SOAP_TYPE_PointerTott__PTZMoveStatus:
		return soap_in_PointerTott__PTZMoveStatus(soap, tag, NULL, "tt:PTZMoveStatus");
	case SOAP_TYPE_PointerTott__StorageReferencePathExtension:
		return soap_in_PointerTott__StorageReferencePathExtension(soap, tag, NULL, "tt:StorageReferencePathExtension");
	case SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension:
		return soap_in_PointerTott__ArrayOfFileProgressExtension(soap, tag, NULL, "tt:ArrayOfFileProgressExtension");
	case SOAP_TYPE_PointerTott__FileProgress:
		return soap_in_PointerTott__FileProgress(soap, tag, NULL, "tt:FileProgress");
	case SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension:
		return soap_in_PointerTott__OSDConfigurationOptionsExtension(soap, tag, NULL, "tt:OSDConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__OSDImgOptions:
		return soap_in_PointerTott__OSDImgOptions(soap, tag, NULL, "tt:OSDImgOptions");
	case SOAP_TYPE_PointerTott__OSDTextOptions:
		return soap_in_PointerTott__OSDTextOptions(soap, tag, NULL, "tt:OSDTextOptions");
	case SOAP_TYPE_PointerTott__MaximumNumberOfOSDs:
		return soap_in_PointerTott__MaximumNumberOfOSDs(soap, tag, NULL, "tt:MaximumNumberOfOSDs");
	case SOAP_TYPE_PointerTott__OSDImgOptionsExtension:
		return soap_in_PointerTott__OSDImgOptionsExtension(soap, tag, NULL, "tt:OSDImgOptionsExtension");
	case SOAP_TYPE_PointerTott__OSDTextOptionsExtension:
		return soap_in_PointerTott__OSDTextOptionsExtension(soap, tag, NULL, "tt:OSDTextOptionsExtension");
	case SOAP_TYPE_PointerTott__OSDColorOptions:
		return soap_in_PointerTott__OSDColorOptions(soap, tag, NULL, "tt:OSDColorOptions");
	case SOAP_TYPE_PointerTott__OSDColorOptionsExtension:
		return soap_in_PointerTott__OSDColorOptionsExtension(soap, tag, NULL, "tt:OSDColorOptionsExtension");
	case SOAP_TYPE_PointerTott__ColorOptions:
		return soap_in_PointerTott__ColorOptions(soap, tag, NULL, "tt:ColorOptions");
	case SOAP_TYPE_PointerTott__ColorspaceRange:
		return soap_in_PointerTott__ColorspaceRange(soap, tag, NULL, "tt:ColorspaceRange");
	case SOAP_TYPE_PointerTott__OSDImgConfigurationExtension:
		return soap_in_PointerTott__OSDImgConfigurationExtension(soap, tag, NULL, "tt:OSDImgConfigurationExtension");
	case SOAP_TYPE_PointerTott__OSDTextConfigurationExtension:
		return soap_in_PointerTott__OSDTextConfigurationExtension(soap, tag, NULL, "tt:OSDTextConfigurationExtension");
	case SOAP_TYPE_PointerTott__OSDColor:
		return soap_in_PointerTott__OSDColor(soap, tag, NULL, "tt:OSDColor");
	case SOAP_TYPE_PointerTott__Color:
		return soap_in_PointerTott__Color(soap, tag, NULL, "tt:Color");
	case SOAP_TYPE_PointerTott__OSDPosConfigurationExtension:
		return soap_in_PointerTott__OSDPosConfigurationExtension(soap, tag, NULL, "tt:OSDPosConfigurationExtension");
	case SOAP_TYPE_PointerTott__ProfileStatusExtension:
		return soap_in_PointerTott__ProfileStatusExtension(soap, tag, NULL, "tt:ProfileStatusExtension");
	case SOAP_TYPE_PointerTott__ActiveConnection:
		return soap_in_PointerTott__ActiveConnection(soap, tag, NULL, "tt:ActiveConnection");
	case SOAP_TYPE_PointerTott__AudioClassDescriptorExtension:
		return soap_in_PointerTott__AudioClassDescriptorExtension(soap, tag, NULL, "tt:AudioClassDescriptorExtension");
	case SOAP_TYPE_PointerTott__AudioClassCandidate:
		return soap_in_PointerTott__AudioClassCandidate(soap, tag, NULL, "tt:AudioClassCandidate");
	case SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension:
		return soap_in_PointerTott__ActionEngineEventPayloadExtension(soap, tag, NULL, "tt:ActionEngineEventPayloadExtension");
	case SOAP_TYPE_PointerToSOAP_ENV__Envelope:
		return soap_in_PointerToSOAP_ENV__Envelope(soap, tag, NULL, "SOAP-ENV:Envelope");
	case SOAP_TYPE_PointerTott__AnalyticsState:
		return soap_in_PointerTott__AnalyticsState(soap, tag, NULL, "tt:AnalyticsState");
	case SOAP_TYPE_PointerTott__MetadataInputExtension:
		return soap_in_PointerTott__MetadataInputExtension(soap, tag, NULL, "tt:MetadataInputExtension");
	case SOAP_TYPE_PointerTott__SourceIdentificationExtension:
		return soap_in_PointerTott__SourceIdentificationExtension(soap, tag, NULL, "tt:SourceIdentificationExtension");
	case SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension:
		return soap_in_PointerTott__AnalyticsEngineInputInfoExtension(soap, tag, NULL, "tt:AnalyticsEngineInputInfoExtension");
	case SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo:
		return soap_in_PointerTott__AnalyticsEngineInputInfo(soap, tag, NULL, "tt:AnalyticsEngineInputInfo");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension:
		return soap_in_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, tag, NULL, "tt:AnalyticsDeviceEngineConfigurationExtension");
	case SOAP_TYPE_PointerTott__EngineConfiguration:
		return soap_in_PointerTott__EngineConfiguration(soap, tag, NULL, "tt:EngineConfiguration");
	case SOAP_TYPE_PointerTott__RecordingJobConfiguration:
		return soap_in_PointerTott__RecordingJobConfiguration(soap, tag, NULL, "tt:RecordingJobConfiguration");
	case SOAP_TYPE_PointerTott__RecordingJobStateTrack:
		return soap_in_PointerTott__RecordingJobStateTrack(soap, tag, NULL, "tt:RecordingJobStateTrack");
	case SOAP_TYPE_PointerTott__RecordingJobStateTracks:
		return soap_in_PointerTott__RecordingJobStateTracks(soap, tag, NULL, "tt:RecordingJobStateTracks");
	case SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension:
		return soap_in_PointerTott__RecordingJobStateInformationExtension(soap, tag, NULL, "tt:RecordingJobStateInformationExtension");
	case SOAP_TYPE_PointerTott__RecordingJobStateSource:
		return soap_in_PointerTott__RecordingJobStateSource(soap, tag, NULL, "tt:RecordingJobStateSource");
	case SOAP_TYPE_PointerTott__RecordingJobSourceExtension:
		return soap_in_PointerTott__RecordingJobSourceExtension(soap, tag, NULL, "tt:RecordingJobSourceExtension");
	case SOAP_TYPE_PointerTott__RecordingJobTrack:
		return soap_in_PointerTott__RecordingJobTrack(soap, tag, NULL, "tt:RecordingJobTrack");
	case SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension:
		return soap_in_PointerTott__RecordingJobConfigurationExtension(soap, tag, NULL, "tt:RecordingJobConfigurationExtension");
	case SOAP_TYPE_PointerTott__RecordingJobSource:
		return soap_in_PointerTott__RecordingJobSource(soap, tag, NULL, "tt:RecordingJobSource");
	case SOAP_TYPE_PointerTott__TrackConfiguration:
		return soap_in_PointerTott__TrackConfiguration(soap, tag, NULL, "tt:TrackConfiguration");
	case SOAP_TYPE_PointerTott__GetTracksResponseItem:
		return soap_in_PointerTott__GetTracksResponseItem(soap, tag, NULL, "tt:GetTracksResponseItem");
	case SOAP_TYPE_PointerTott__GetTracksResponseList:
		return soap_in_PointerTott__GetTracksResponseList(soap, tag, NULL, "tt:GetTracksResponseList");
	case SOAP_TYPE_PointerTott__RecordingConfiguration:
		return soap_in_PointerTott__RecordingConfiguration(soap, tag, NULL, "tt:RecordingConfiguration");
	case SOAP_TYPE_PointerTott__TrackAttributesExtension:
		return soap_in_PointerTott__TrackAttributesExtension(soap, tag, NULL, "tt:TrackAttributesExtension");
	case SOAP_TYPE_PointerTott__MetadataAttributes:
		return soap_in_PointerTott__MetadataAttributes(soap, tag, NULL, "tt:MetadataAttributes");
	case SOAP_TYPE_PointerTott__AudioAttributes:
		return soap_in_PointerTott__AudioAttributes(soap, tag, NULL, "tt:AudioAttributes");
	case SOAP_TYPE_PointerTott__VideoAttributes:
		return soap_in_PointerTott__VideoAttributes(soap, tag, NULL, "tt:VideoAttributes");
	case SOAP_TYPE_PointerTott__TrackAttributes:
		return soap_in_PointerTott__TrackAttributes(soap, tag, NULL, "tt:TrackAttributes");
	case SOAP_TYPE_PointerTott__TrackInformation:
		return soap_in_PointerTott__TrackInformation(soap, tag, NULL, "tt:TrackInformation");
	case SOAP_TYPE_PointerTott__RecordingSourceInformation:
		return soap_in_PointerTott__RecordingSourceInformation(soap, tag, NULL, "tt:RecordingSourceInformation");
	case SOAP_TYPE_PointerTott__FindMetadataResult:
		return soap_in_PointerTott__FindMetadataResult(soap, tag, NULL, "tt:FindMetadataResult");
	case SOAP_TYPE_PointerTott__FindPTZPositionResult:
		return soap_in_PointerTott__FindPTZPositionResult(soap, tag, NULL, "tt:FindPTZPositionResult");
	case SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType:
		return soap_in_PointerTowsnt__NotificationMessageHolderType(soap, tag, NULL, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_PointerTott__FindEventResult:
		return soap_in_PointerTott__FindEventResult(soap, tag, NULL, "tt:FindEventResult");
	case SOAP_TYPE_PointerTott__RecordingInformation:
		return soap_in_PointerTott__RecordingInformation(soap, tag, NULL, "tt:RecordingInformation");
	case SOAP_TYPE_PointerTott__SearchScopeExtension:
		return soap_in_PointerTott__SearchScopeExtension(soap, tag, NULL, "tt:SearchScopeExtension");
	case SOAP_TYPE_PointerTott__XPathExpression:
		return soap_in_PointerTott__XPathExpression(soap, tag, NULL, "tt:XPathExpression");
	case SOAP_TYPE_PointerTott__SourceReference:
		return soap_in_PointerTott__SourceReference(soap, tag, NULL, "tt:SourceReference");
	case SOAP_TYPE_PointerTott__StreamSetup:
		return soap_in_PointerTott__StreamSetup(soap, tag, NULL, "tt:StreamSetup");
	case SOAP_TYPE_PointerTott__ReceiverConfiguration:
		return soap_in_PointerTott__ReceiverConfiguration(soap, tag, NULL, "tt:ReceiverConfiguration");
	case SOAP_TYPE_PointerTott__PaneOptionExtension:
		return soap_in_PointerTott__PaneOptionExtension(soap, tag, NULL, "tt:PaneOptionExtension");
	case SOAP_TYPE_PointerTott__LayoutOptionsExtension:
		return soap_in_PointerTott__LayoutOptionsExtension(soap, tag, NULL, "tt:LayoutOptionsExtension");
	case SOAP_TYPE_PointerTott__PaneLayoutOptions:
		return soap_in_PointerTott__PaneLayoutOptions(soap, tag, NULL, "tt:PaneLayoutOptions");
	case SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions:
		return soap_in_PointerTott__VideoDecoderConfigurationOptions(soap, tag, NULL, "tt:VideoDecoderConfigurationOptions");
	case SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions:
		return soap_in_PointerTott__AudioDecoderConfigurationOptions(soap, tag, NULL, "tt:AudioDecoderConfigurationOptions");
	case SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions:
		return soap_in_PointerTott__AudioEncoderConfigurationOptions(soap, tag, NULL, "tt:AudioEncoderConfigurationOptions");
	case SOAP_TYPE_PointerTott__LayoutExtension:
		return soap_in_PointerTott__LayoutExtension(soap, tag, NULL, "tt:LayoutExtension");
	case SOAP_TYPE_PointerTott__PaneLayout:
		return soap_in_PointerTott__PaneLayout(soap, tag, NULL, "tt:PaneLayout");
	case SOAP_TYPE_PointerTott__Transformation:
		return soap_in_PointerTott__Transformation(soap, tag, NULL, "tt:Transformation");
	case SOAP_TYPE_PointerTott__MotionExpression:
		return soap_in_PointerTott__MotionExpression(soap, tag, NULL, "tt:MotionExpression");
	case SOAP_TYPE_PointerTott__PolylineArray:
		return soap_in_PointerTott__PolylineArray(soap, tag, NULL, "tt:PolylineArray");
	case SOAP_TYPE_PointerTott__PolylineArrayExtension:
		return soap_in_PointerTott__PolylineArrayExtension(soap, tag, NULL, "tt:PolylineArrayExtension");
	case SOAP_TYPE_PointerTott__Polyline:
		return soap_in_PointerTott__Polyline(soap, tag, NULL, "tt:Polyline");
	case SOAP_TYPE_PointerTott__Polygon:
		return soap_in_PointerTott__Polygon(soap, tag, NULL, "tt:Polygon");
	case SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension:
		return soap_in_PointerTott__SupportedAnalyticsModulesExtension(soap, tag, NULL, "tt:SupportedAnalyticsModulesExtension");
	case SOAP_TYPE_PointerTott__SupportedRulesExtension:
		return soap_in_PointerTott__SupportedRulesExtension(soap, tag, NULL, "tt:SupportedRulesExtension");
	case SOAP_TYPE_PointerTott__ConfigDescription:
		return soap_in_PointerTott__ConfigDescription(soap, tag, NULL, "tt:ConfigDescription");
	case SOAP_TYPE_PointerToxsd__integer:
		return soap_in_PointerToxsd__integer(soap, tag, NULL, "xsd:integer");
	case SOAP_TYPE_PointerTott__ConfigDescriptionExtension:
		return soap_in_PointerTott__ConfigDescriptionExtension(soap, tag, NULL, "tt:ConfigDescriptionExtension");
	case SOAP_TYPE_PointerTott__ItemList:
		return soap_in_PointerTott__ItemList(soap, tag, NULL, "tt:ItemList");
	case SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension:
		return soap_in_PointerTott__RuleEngineConfigurationExtension(soap, tag, NULL, "tt:RuleEngineConfigurationExtension");
	case SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension:
		return soap_in_PointerTott__AnalyticsEngineConfigurationExtension(soap, tag, NULL, "tt:AnalyticsEngineConfigurationExtension");
	case SOAP_TYPE_PointerTott__Config:
		return soap_in_PointerTott__Config(soap, tag, NULL, "tt:Config");
	case SOAP_TYPE_PointerTott__Vector:
		return soap_in_PointerTott__Vector(soap, tag, NULL, "tt:Vector");
	case SOAP_TYPE_PointerTott__ItemListDescriptionExtension:
		return soap_in_PointerTott__ItemListDescriptionExtension(soap, tag, NULL, "tt:ItemListDescriptionExtension");
	case SOAP_TYPE_PointerTott__MessageDescriptionExtension:
		return soap_in_PointerTott__MessageDescriptionExtension(soap, tag, NULL, "tt:MessageDescriptionExtension");
	case SOAP_TYPE_PointerTott__ItemListDescription:
		return soap_in_PointerTott__ItemListDescription(soap, tag, NULL, "tt:ItemListDescription");
	case SOAP_TYPE_PointerTott__ItemListExtension:
		return soap_in_PointerTott__ItemListExtension(soap, tag, NULL, "tt:ItemListExtension");
	case SOAP_TYPE_PointerTott__FocusOptions20Extension:
		return soap_in_PointerTott__FocusOptions20Extension(soap, tag, NULL, "tt:FocusOptions20Extension");
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension:
		return soap_in_PointerTott__WhiteBalanceOptions20Extension(soap, tag, NULL, "tt:WhiteBalanceOptions20Extension");
	case SOAP_TYPE_PointerTott__FocusConfiguration20Extension:
		return soap_in_PointerTott__FocusConfiguration20Extension(soap, tag, NULL, "tt:FocusConfiguration20Extension");
	case SOAP_TYPE_PointerTott__WhiteBalance20Extension:
		return soap_in_PointerTott__WhiteBalance20Extension(soap, tag, NULL, "tt:WhiteBalance20Extension");
	case SOAP_TYPE_PointerTott__RelativeFocusOptions20:
		return soap_in_PointerTott__RelativeFocusOptions20(soap, tag, NULL, "tt:RelativeFocusOptions20");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension:
		return soap_in_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, tag, NULL, "tt:IrCutFilterAutoAdjustmentOptionsExtension");
	case SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension:
		return soap_in_PointerTott__ImageStabilizationOptionsExtension(soap, tag, NULL, "tt:ImageStabilizationOptionsExtension");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension4:
		return soap_in_PointerTott__ImagingOptions20Extension4(soap, tag, NULL, "tt:ImagingOptions20Extension4");
	case SOAP_TYPE_PointerTott__NoiseReductionOptions:
		return soap_in_PointerTott__NoiseReductionOptions(soap, tag, NULL, "tt:NoiseReductionOptions");
	case SOAP_TYPE_PointerTott__DefoggingOptions:
		return soap_in_PointerTott__DefoggingOptions(soap, tag, NULL, "tt:DefoggingOptions");
	case SOAP_TYPE_PointerTott__ToneCompensationOptions:
		return soap_in_PointerTott__ToneCompensationOptions(soap, tag, NULL, "tt:ToneCompensationOptions");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension3:
		return soap_in_PointerTott__ImagingOptions20Extension3(soap, tag, NULL, "tt:ImagingOptions20Extension3");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions:
		return soap_in_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, tag, NULL, "tt:IrCutFilterAutoAdjustmentOptions");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension2:
		return soap_in_PointerTott__ImagingOptions20Extension2(soap, tag, NULL, "tt:ImagingOptions20Extension2");
	case SOAP_TYPE_PointerTott__ImageStabilizationOptions:
		return soap_in_PointerTott__ImageStabilizationOptions(soap, tag, NULL, "tt:ImageStabilizationOptions");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension:
		return soap_in_PointerTott__ImagingOptions20Extension(soap, tag, NULL, "tt:ImagingOptions20Extension");
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions20:
		return soap_in_PointerTott__WhiteBalanceOptions20(soap, tag, NULL, "tt:WhiteBalanceOptions20");
	case SOAP_TYPE_PointerTott__WideDynamicRangeOptions20:
		return soap_in_PointerTott__WideDynamicRangeOptions20(soap, tag, NULL, "tt:WideDynamicRangeOptions20");
	case SOAP_TYPE_PointerTott__FocusOptions20:
		return soap_in_PointerTott__FocusOptions20(soap, tag, NULL, "tt:FocusOptions20");
	case SOAP_TYPE_PointerTott__ExposureOptions20:
		return soap_in_PointerTott__ExposureOptions20(soap, tag, NULL, "tt:ExposureOptions20");
	case SOAP_TYPE_PointerTott__BacklightCompensationOptions20:
		return soap_in_PointerTott__BacklightCompensationOptions20(soap, tag, NULL, "tt:BacklightCompensationOptions20");
	case SOAP_TYPE_PointerTott__DefoggingExtension:
		return soap_in_PointerTott__DefoggingExtension(soap, tag, NULL, "tt:DefoggingExtension");
	case SOAP_TYPE_PointerTott__ToneCompensationExtension:
		return soap_in_PointerTott__ToneCompensationExtension(soap, tag, NULL, "tt:ToneCompensationExtension");
	case SOAP_TYPE_PointerTott__ExposurePriority:
		return soap_in_PointerTott__ExposurePriority(soap, tag, NULL, "tt:ExposurePriority");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension:
		return soap_in_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, tag, NULL, "tt:IrCutFilterAutoAdjustmentExtension");
	case SOAP_TYPE_PointerTott__ImageStabilizationExtension:
		return soap_in_PointerTott__ImageStabilizationExtension(soap, tag, NULL, "tt:ImageStabilizationExtension");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension204:
		return soap_in_PointerTott__ImagingSettingsExtension204(soap, tag, NULL, "tt:ImagingSettingsExtension204");
	case SOAP_TYPE_PointerTott__NoiseReduction:
		return soap_in_PointerTott__NoiseReduction(soap, tag, NULL, "tt:NoiseReduction");
	case SOAP_TYPE_PointerTott__Defogging:
		return soap_in_PointerTott__Defogging(soap, tag, NULL, "tt:Defogging");
	case SOAP_TYPE_PointerTott__ToneCompensation:
		return soap_in_PointerTott__ToneCompensation(soap, tag, NULL, "tt:ToneCompensation");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension203:
		return soap_in_PointerTott__ImagingSettingsExtension203(soap, tag, NULL, "tt:ImagingSettingsExtension203");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment:
		return soap_in_PointerTott__IrCutFilterAutoAdjustment(soap, tag, NULL, "tt:IrCutFilterAutoAdjustment");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension202:
		return soap_in_PointerTott__ImagingSettingsExtension202(soap, tag, NULL, "tt:ImagingSettingsExtension202");
	case SOAP_TYPE_PointerTott__ImageStabilization:
		return soap_in_PointerTott__ImageStabilization(soap, tag, NULL, "tt:ImageStabilization");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension20:
		return soap_in_PointerTott__ImagingSettingsExtension20(soap, tag, NULL, "tt:ImagingSettingsExtension20");
	case SOAP_TYPE_PointerTott__WhiteBalance20:
		return soap_in_PointerTott__WhiteBalance20(soap, tag, NULL, "tt:WhiteBalance20");
	case SOAP_TYPE_PointerTott__WideDynamicRange20:
		return soap_in_PointerTott__WideDynamicRange20(soap, tag, NULL, "tt:WideDynamicRange20");
	case SOAP_TYPE_PointerTott__FocusConfiguration20:
		return soap_in_PointerTott__FocusConfiguration20(soap, tag, NULL, "tt:FocusConfiguration20");
	case SOAP_TYPE_PointerTott__Exposure20:
		return soap_in_PointerTott__Exposure20(soap, tag, NULL, "tt:Exposure20");
	case SOAP_TYPE_PointerTott__BacklightCompensation20:
		return soap_in_PointerTott__BacklightCompensation20(soap, tag, NULL, "tt:BacklightCompensation20");
	case SOAP_TYPE_PointerTott__FocusStatus20Extension:
		return soap_in_PointerTott__FocusStatus20Extension(soap, tag, NULL, "tt:FocusStatus20Extension");
	case SOAP_TYPE_PointerTott__ImagingStatus20Extension:
		return soap_in_PointerTott__ImagingStatus20Extension(soap, tag, NULL, "tt:ImagingStatus20Extension");
	case SOAP_TYPE_PointerTott__FocusStatus20:
		return soap_in_PointerTott__FocusStatus20(soap, tag, NULL, "tt:FocusStatus20");
	case SOAP_TYPE_PointerTott__ContinuousFocusOptions:
		return soap_in_PointerTott__ContinuousFocusOptions(soap, tag, NULL, "tt:ContinuousFocusOptions");
	case SOAP_TYPE_PointerTott__RelativeFocusOptions:
		return soap_in_PointerTott__RelativeFocusOptions(soap, tag, NULL, "tt:RelativeFocusOptions");
	case SOAP_TYPE_PointerTott__AbsoluteFocusOptions:
		return soap_in_PointerTott__AbsoluteFocusOptions(soap, tag, NULL, "tt:AbsoluteFocusOptions");
	case SOAP_TYPE_PointerTott__ContinuousFocus:
		return soap_in_PointerTott__ContinuousFocus(soap, tag, NULL, "tt:ContinuousFocus");
	case SOAP_TYPE_PointerTott__RelativeFocus:
		return soap_in_PointerTott__RelativeFocus(soap, tag, NULL, "tt:RelativeFocus");
	case SOAP_TYPE_PointerTott__AbsoluteFocus:
		return soap_in_PointerTott__AbsoluteFocus(soap, tag, NULL, "tt:AbsoluteFocus");
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions:
		return soap_in_PointerTott__WhiteBalanceOptions(soap, tag, NULL, "tt:WhiteBalanceOptions");
	case SOAP_TYPE_PointerTott__WideDynamicRangeOptions:
		return soap_in_PointerTott__WideDynamicRangeOptions(soap, tag, NULL, "tt:WideDynamicRangeOptions");
	case SOAP_TYPE_PointerTott__FocusOptions:
		return soap_in_PointerTott__FocusOptions(soap, tag, NULL, "tt:FocusOptions");
	case SOAP_TYPE_PointerTott__ExposureOptions:
		return soap_in_PointerTott__ExposureOptions(soap, tag, NULL, "tt:ExposureOptions");
	case SOAP_TYPE_PointerTott__BacklightCompensationOptions:
		return soap_in_PointerTott__BacklightCompensationOptions(soap, tag, NULL, "tt:BacklightCompensationOptions");
	case SOAP_TYPE_PointerTott__Rectangle:
		return soap_in_PointerTott__Rectangle(soap, tag, NULL, "tt:Rectangle");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension:
		return soap_in_PointerTott__ImagingSettingsExtension(soap, tag, NULL, "tt:ImagingSettingsExtension");
	case SOAP_TYPE_PointerTott__WhiteBalance:
		return soap_in_PointerTott__WhiteBalance(soap, tag, NULL, "tt:WhiteBalance");
	case SOAP_TYPE_PointerTott__WideDynamicRange:
		return soap_in_PointerTott__WideDynamicRange(soap, tag, NULL, "tt:WideDynamicRange");
	case SOAP_TYPE_PointerTott__IrCutFilterMode:
		return soap_in_PointerTott__IrCutFilterMode(soap, tag, NULL, "tt:IrCutFilterMode");
	case SOAP_TYPE_PointerTott__FocusConfiguration:
		return soap_in_PointerTott__FocusConfiguration(soap, tag, NULL, "tt:FocusConfiguration");
	case SOAP_TYPE_PointerTott__Exposure:
		return soap_in_PointerTott__Exposure(soap, tag, NULL, "tt:Exposure");
	case SOAP_TYPE_PointerTott__BacklightCompensation:
		return soap_in_PointerTott__BacklightCompensation(soap, tag, NULL, "tt:BacklightCompensation");
	case SOAP_TYPE_PointerTott__FocusStatus:
		return soap_in_PointerTott__FocusStatus(soap, tag, NULL, "tt:FocusStatus");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension:
		return soap_in_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, tag, NULL, "tt:PTZPresetTourStartingConditionOptionsExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension:
		return soap_in_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, tag, NULL, "tt:PTZPresetTourPresetDetailOptionsExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions:
		return soap_in_PointerTott__PTZPresetTourPresetDetailOptions(soap, tag, NULL, "tt:PTZPresetTourPresetDetailOptions");
	case SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions:
		return soap_in_PointerTott__PTZPresetTourSpotOptions(soap, tag, NULL, "tt:PTZPresetTourSpotOptions");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions:
		return soap_in_PointerTott__PTZPresetTourStartingConditionOptions(soap, tag, NULL, "tt:PTZPresetTourStartingConditionOptions");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension:
		return soap_in_PointerTott__PTZPresetTourStartingConditionExtension(soap, tag, NULL, "tt:PTZPresetTourStartingConditionExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourDirection:
		return soap_in_PointerTott__PTZPresetTourDirection(soap, tag, NULL, "tt:PTZPresetTourDirection");
	case SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension:
		return soap_in_PointerTott__PTZPresetTourStatusExtension(soap, tag, NULL, "tt:PTZPresetTourStatusExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension:
		return soap_in_PointerTott__PTZPresetTourTypeExtension(soap, tag, NULL, "tt:PTZPresetTourTypeExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension:
		return soap_in_PointerTott__PTZPresetTourSpotExtension(soap, tag, NULL, "tt:PTZPresetTourSpotExtension");
	case SOAP_TYPE_PointerTott__PTZSpeed:
		return soap_in_PointerTott__PTZSpeed(soap, tag, NULL, "tt:PTZSpeed");
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail:
		return soap_in_PointerTott__PTZPresetTourPresetDetail(soap, tag, NULL, "tt:PTZPresetTourPresetDetail");
	case SOAP_TYPE_PointerTott__PTZPresetTourExtension:
		return soap_in_PointerTott__PTZPresetTourExtension(soap, tag, NULL, "tt:PTZPresetTourExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourSpot:
		return soap_in_PointerTott__PTZPresetTourSpot(soap, tag, NULL, "tt:PTZPresetTourSpot");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition:
		return soap_in_PointerTott__PTZPresetTourStartingCondition(soap, tag, NULL, "tt:PTZPresetTourStartingCondition");
	case SOAP_TYPE_PointerTott__PTZPresetTourStatus:
		return soap_in_PointerTott__PTZPresetTourStatus(soap, tag, NULL, "tt:PTZPresetTourStatus");
	case SOAP_TYPE_PointerTott__PTZVector:
		return soap_in_PointerTott__PTZVector(soap, tag, NULL, "tt:PTZVector");
	case SOAP_TYPE_PointerTott__Name:
		return soap_in_PointerTott__Name(soap, tag, NULL, "tt:Name");
	case SOAP_TYPE_PointerTott__Vector1D:
		return soap_in_PointerTott__Vector1D(soap, tag, NULL, "tt:Vector1D");
	case SOAP_TYPE_PointerTott__Vector2D:
		return soap_in_PointerTott__Vector2D(soap, tag, NULL, "tt:Vector2D");
	case SOAP_TYPE_PointerTott__PTZSpacesExtension:
		return soap_in_PointerTott__PTZSpacesExtension(soap, tag, NULL, "tt:PTZSpacesExtension");
	case SOAP_TYPE_PointerTott__Space1DDescription:
		return soap_in_PointerTott__Space1DDescription(soap, tag, NULL, "tt:Space1DDescription");
	case SOAP_TYPE_PointerTott__Space2DDescription:
		return soap_in_PointerTott__Space2DDescription(soap, tag, NULL, "tt:Space2DDescription");
	case SOAP_TYPE_PointerTott__ReverseOptionsExtension:
		return soap_in_PointerTott__ReverseOptionsExtension(soap, tag, NULL, "tt:ReverseOptionsExtension");
	case SOAP_TYPE_PointerTott__EFlipOptionsExtension:
		return soap_in_PointerTott__EFlipOptionsExtension(soap, tag, NULL, "tt:EFlipOptionsExtension");
	case SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension:
		return soap_in_PointerTott__PTControlDirectionOptionsExtension(soap, tag, NULL, "tt:PTControlDirectionOptionsExtension");
	case SOAP_TYPE_PointerTott__ReverseOptions:
		return soap_in_PointerTott__ReverseOptions(soap, tag, NULL, "tt:ReverseOptions");
	case SOAP_TYPE_PointerTott__EFlipOptions:
		return soap_in_PointerTott__EFlipOptions(soap, tag, NULL, "tt:EFlipOptions");
	case SOAP_TYPE_PointerTott__PTZConfigurationOptions2:
		return soap_in_PointerTott__PTZConfigurationOptions2(soap, tag, NULL, "tt:PTZConfigurationOptions2");
	case SOAP_TYPE_PointerTott__PTControlDirectionOptions:
		return soap_in_PointerTott__PTControlDirectionOptions(soap, tag, NULL, "tt:PTControlDirectionOptions");
	case SOAP_TYPE_PointerTott__DurationRange:
		return soap_in_PointerTott__DurationRange(soap, tag, NULL, "tt:DurationRange");
	case SOAP_TYPE_PointerTott__PTZSpaces:
		return soap_in_PointerTott__PTZSpaces(soap, tag, NULL, "tt:PTZSpaces");
	case SOAP_TYPE_PointerTott__PTControlDirectionExtension:
		return soap_in_PointerTott__PTControlDirectionExtension(soap, tag, NULL, "tt:PTControlDirectionExtension");
	case SOAP_TYPE_PointerTott__Reverse:
		return soap_in_PointerTott__Reverse(soap, tag, NULL, "tt:Reverse");
	case SOAP_TYPE_PointerTott__EFlip:
		return soap_in_PointerTott__EFlip(soap, tag, NULL, "tt:EFlip");
	case SOAP_TYPE_PointerTott__PTZConfigurationExtension2:
		return soap_in_PointerTott__PTZConfigurationExtension2(soap, tag, NULL, "tt:PTZConfigurationExtension2");
	case SOAP_TYPE_PointerTott__PTControlDirection:
		return soap_in_PointerTott__PTControlDirection(soap, tag, NULL, "tt:PTControlDirection");
	case SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension:
		return soap_in_PointerTott__PTZPresetTourSupportedExtension(soap, tag, NULL, "tt:PTZPresetTourSupportedExtension");
	case SOAP_TYPE_PointerTott__PTZNodeExtension2:
		return soap_in_PointerTott__PTZNodeExtension2(soap, tag, NULL, "tt:PTZNodeExtension2");
	case SOAP_TYPE_PointerTott__PTZPresetTourSupported:
		return soap_in_PointerTott__PTZPresetTourSupported(soap, tag, NULL, "tt:PTZPresetTourSupported");
	case SOAP_TYPE_PointerTott__EapMethodExtension:
		return soap_in_PointerTott__EapMethodExtension(soap, tag, NULL, "tt:EapMethodExtension");
	case SOAP_TYPE_PointerTott__TLSConfiguration:
		return soap_in_PointerTott__TLSConfiguration(soap, tag, NULL, "tt:TLSConfiguration");
	case SOAP_TYPE_PointerTott__Dot1XConfigurationExtension:
		return soap_in_PointerTott__Dot1XConfigurationExtension(soap, tag, NULL, "tt:Dot1XConfigurationExtension");
	case SOAP_TYPE_PointerTott__EAPMethodConfiguration:
		return soap_in_PointerTott__EAPMethodConfiguration(soap, tag, NULL, "tt:EAPMethodConfiguration");
	case SOAP_TYPE_PointerTott__CertificateInformationExtension:
		return soap_in_PointerTott__CertificateInformationExtension(soap, tag, NULL, "tt:CertificateInformationExtension");
	case SOAP_TYPE_PointerTott__DateTimeRange:
		return soap_in_PointerTott__DateTimeRange(soap, tag, NULL, "tt:DateTimeRange");
	case SOAP_TYPE_PointerTott__CertificateUsage:
		return soap_in_PointerTott__CertificateUsage(soap, tag, NULL, "tt:CertificateUsage");
	case SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension:
		return soap_in_PointerTott__CertificateGenerationParametersExtension(soap, tag, NULL, "tt:CertificateGenerationParametersExtension");
	case SOAP_TYPE_PointerTott__UserExtension:
		return soap_in_PointerTott__UserExtension(soap, tag, NULL, "tt:UserExtension");
	case SOAP_TYPE_PointerTott__Date:
		return soap_in_PointerTott__Date(soap, tag, NULL, "tt:Date");
	case SOAP_TYPE_PointerTott__Time:
		return soap_in_PointerTott__Time(soap, tag, NULL, "tt:Time");
	case SOAP_TYPE_PointerTott__SystemDateTimeExtension:
		return soap_in_PointerTott__SystemDateTimeExtension(soap, tag, NULL, "tt:SystemDateTimeExtension");
	case SOAP_TYPE_PointerTott__SystemLogUri:
		return soap_in_PointerTott__SystemLogUri(soap, tag, NULL, "tt:SystemLogUri");
	case SOAP_TYPE_PointerToxop__Include:
		return soap_in_PointerToxop__Include(soap, tag, NULL, "xop:Include");
	case SOAP_TYPE_PointerTo_xmime__contentType:
		return soap_in_PointerTo_xmime__contentType(soap, tag, NULL, "xmime:contentType");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceExtension:
		return soap_in_PointerTott__AnalyticsDeviceExtension(soap, tag, NULL, "tt:AnalyticsDeviceExtension");
	case SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2:
		return soap_in_PointerTott__SystemCapabilitiesExtension2(soap, tag, NULL, "tt:SystemCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__SystemCapabilitiesExtension:
		return soap_in_PointerTott__SystemCapabilitiesExtension(soap, tag, NULL, "tt:SystemCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2:
		return soap_in_PointerTott__SecurityCapabilitiesExtension2(soap, tag, NULL, "tt:SecurityCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension:
		return soap_in_PointerTott__SecurityCapabilitiesExtension(soap, tag, NULL, "tt:SecurityCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2:
		return soap_in_PointerTott__NetworkCapabilitiesExtension2(soap, tag, NULL, "tt:NetworkCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension:
		return soap_in_PointerTott__NetworkCapabilitiesExtension(soap, tag, NULL, "tt:NetworkCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension:
		return soap_in_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, tag, NULL, "tt:RealTimeStreamingCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__ProfileCapabilities:
		return soap_in_PointerTott__ProfileCapabilities(soap, tag, NULL, "tt:ProfileCapabilities");
	case SOAP_TYPE_PointerTott__MediaCapabilitiesExtension:
		return soap_in_PointerTott__MediaCapabilitiesExtension(soap, tag, NULL, "tt:MediaCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities:
		return soap_in_PointerTott__RealTimeStreamingCapabilities(soap, tag, NULL, "tt:RealTimeStreamingCapabilities");
	case SOAP_TYPE_PointerTott__IOCapabilitiesExtension2:
		return soap_in_PointerTott__IOCapabilitiesExtension2(soap, tag, NULL, "tt:IOCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__IOCapabilitiesExtension:
		return soap_in_PointerTott__IOCapabilitiesExtension(soap, tag, NULL, "tt:IOCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension:
		return soap_in_PointerTott__DeviceCapabilitiesExtension(soap, tag, NULL, "tt:DeviceCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__SecurityCapabilities:
		return soap_in_PointerTott__SecurityCapabilities(soap, tag, NULL, "tt:SecurityCapabilities");
	case SOAP_TYPE_PointerTott__IOCapabilities:
		return soap_in_PointerTott__IOCapabilities(soap, tag, NULL, "tt:IOCapabilities");
	case SOAP_TYPE_PointerTott__SystemCapabilities:
		return soap_in_PointerTott__SystemCapabilities(soap, tag, NULL, "tt:SystemCapabilities");
	case SOAP_TYPE_PointerTott__NetworkCapabilities:
		return soap_in_PointerTott__NetworkCapabilities(soap, tag, NULL, "tt:NetworkCapabilities");
	case SOAP_TYPE_PointerTott__CapabilitiesExtension2:
		return soap_in_PointerTott__CapabilitiesExtension2(soap, tag, NULL, "tt:CapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities:
		return soap_in_PointerTott__AnalyticsDeviceCapabilities(soap, tag, NULL, "tt:AnalyticsDeviceCapabilities");
	case SOAP_TYPE_PointerTott__ReceiverCapabilities:
		return soap_in_PointerTott__ReceiverCapabilities(soap, tag, NULL, "tt:ReceiverCapabilities");
	case SOAP_TYPE_PointerTott__ReplayCapabilities:
		return soap_in_PointerTott__ReplayCapabilities(soap, tag, NULL, "tt:ReplayCapabilities");
	case SOAP_TYPE_PointerTott__SearchCapabilities:
		return soap_in_PointerTott__SearchCapabilities(soap, tag, NULL, "tt:SearchCapabilities");
	case SOAP_TYPE_PointerTott__RecordingCapabilities:
		return soap_in_PointerTott__RecordingCapabilities(soap, tag, NULL, "tt:RecordingCapabilities");
	case SOAP_TYPE_PointerTott__DisplayCapabilities:
		return soap_in_PointerTott__DisplayCapabilities(soap, tag, NULL, "tt:DisplayCapabilities");
	case SOAP_TYPE_PointerTott__DeviceIOCapabilities:
		return soap_in_PointerTott__DeviceIOCapabilities(soap, tag, NULL, "tt:DeviceIOCapabilities");
	case SOAP_TYPE_PointerTott__CapabilitiesExtension:
		return soap_in_PointerTott__CapabilitiesExtension(soap, tag, NULL, "tt:CapabilitiesExtension");
	case SOAP_TYPE_PointerTott__PTZCapabilities:
		return soap_in_PointerTott__PTZCapabilities(soap, tag, NULL, "tt:PTZCapabilities");
	case SOAP_TYPE_PointerTott__MediaCapabilities:
		return soap_in_PointerTott__MediaCapabilities(soap, tag, NULL, "tt:MediaCapabilities");
	case SOAP_TYPE_PointerTott__ImagingCapabilities:
		return soap_in_PointerTott__ImagingCapabilities(soap, tag, NULL, "tt:ImagingCapabilities");
	case SOAP_TYPE_PointerTott__EventCapabilities:
		return soap_in_PointerTott__EventCapabilities(soap, tag, NULL, "tt:EventCapabilities");
	case SOAP_TYPE_PointerTott__DeviceCapabilities:
		return soap_in_PointerTott__DeviceCapabilities(soap, tag, NULL, "tt:DeviceCapabilities");
	case SOAP_TYPE_PointerTott__AnalyticsCapabilities:
		return soap_in_PointerTott__AnalyticsCapabilities(soap, tag, NULL, "tt:AnalyticsCapabilities");
	case SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension:
		return soap_in_PointerTott__Dot11AvailableNetworksExtension(soap, tag, NULL, "tt:Dot11AvailableNetworksExtension");
	case SOAP_TYPE_PointerTott__Dot11SignalStrength:
		return soap_in_PointerTott__Dot11SignalStrength(soap, tag, NULL, "tt:Dot11SignalStrength");
	case SOAP_TYPE_PointerTott__Dot11PSKSetExtension:
		return soap_in_PointerTott__Dot11PSKSetExtension(soap, tag, NULL, "tt:Dot11PSKSetExtension");
	case SOAP_TYPE_PointerTott__Dot11PSKPassphrase:
		return soap_in_PointerTott__Dot11PSKPassphrase(soap, tag, NULL, "tt:Dot11PSKPassphrase");
	case SOAP_TYPE_PointerTott__Dot11PSK:
		return soap_in_PointerTott__Dot11PSK(soap, tag, NULL, "tt:Dot11PSK");
	case SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension:
		return soap_in_PointerTott__Dot11SecurityConfigurationExtension(soap, tag, NULL, "tt:Dot11SecurityConfigurationExtension");
	case SOAP_TYPE_PointerTott__ReferenceToken:
		return soap_in_PointerTott__ReferenceToken(soap, tag, NULL, "tt:ReferenceToken");
	case SOAP_TYPE_PointerTott__Dot11PSKSet:
		return soap_in_PointerTott__Dot11PSKSet(soap, tag, NULL, "tt:Dot11PSKSet");
	case SOAP_TYPE_PointerTott__Dot11Cipher:
		return soap_in_PointerTott__Dot11Cipher(soap, tag, NULL, "tt:Dot11Cipher");
	case SOAP_TYPE_PointerTott__Dot11SecurityConfiguration:
		return soap_in_PointerTott__Dot11SecurityConfiguration(soap, tag, NULL, "tt:Dot11SecurityConfiguration");
	case SOAP_TYPE_PointerTott__IPAddressFilterExtension:
		return soap_in_PointerTott__IPAddressFilterExtension(soap, tag, NULL, "tt:IPAddressFilterExtension");
	case SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2:
		return soap_in_PointerTott__NetworkZeroConfigurationExtension2(soap, tag, NULL, "tt:NetworkZeroConfigurationExtension2");
	case SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension:
		return soap_in_PointerTott__NetworkZeroConfigurationExtension(soap, tag, NULL, "tt:NetworkZeroConfigurationExtension");
	case SOAP_TYPE_PointerTott__IPv6DHCPConfiguration:
		return soap_in_PointerTott__IPv6DHCPConfiguration(soap, tag, NULL, "tt:IPv6DHCPConfiguration");
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2:
		return soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, tag, NULL, "tt:NetworkInterfaceSetConfigurationExtension2");
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension:
		return soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, tag, NULL, "tt:NetworkInterfaceSetConfigurationExtension");
	case SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration:
		return soap_in_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, tag, NULL, "tt:IPv6NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration:
		return soap_in_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, tag, NULL, "tt:IPv4NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_PointerTott__DynamicDNSInformationExtension:
		return soap_in_PointerTott__DynamicDNSInformationExtension(soap, tag, NULL, "tt:DynamicDNSInformationExtension");
	case SOAP_TYPE_PointerTott__NTPInformationExtension:
		return soap_in_PointerTott__NTPInformationExtension(soap, tag, NULL, "tt:NTPInformationExtension");
	case SOAP_TYPE_PointerTott__DNSInformationExtension:
		return soap_in_PointerTott__DNSInformationExtension(soap, tag, NULL, "tt:DNSInformationExtension");
	case SOAP_TYPE_PointerTott__HostnameInformationExtension:
		return soap_in_PointerTott__HostnameInformationExtension(soap, tag, NULL, "tt:HostnameInformationExtension");
	case SOAP_TYPE_PointerTott__NetworkHostExtension:
		return soap_in_PointerTott__NetworkHostExtension(soap, tag, NULL, "tt:NetworkHostExtension");
	case SOAP_TYPE_PointerTott__IPv6Address:
		return soap_in_PointerTott__IPv6Address(soap, tag, NULL, "tt:IPv6Address");
	case SOAP_TYPE_PointerTott__IPv4Address:
		return soap_in_PointerTott__IPv4Address(soap, tag, NULL, "tt:IPv4Address");
	case SOAP_TYPE_PointerTott__NetworkProtocolExtension:
		return soap_in_PointerTott__NetworkProtocolExtension(soap, tag, NULL, "tt:NetworkProtocolExtension");
	case SOAP_TYPE_PointerTott__IPv6ConfigurationExtension:
		return soap_in_PointerTott__IPv6ConfigurationExtension(soap, tag, NULL, "tt:IPv6ConfigurationExtension");
	case SOAP_TYPE_PointerTott__PrefixedIPv6Address:
		return soap_in_PointerTott__PrefixedIPv6Address(soap, tag, NULL, "tt:PrefixedIPv6Address");
	case SOAP_TYPE_PointerTott__PrefixedIPv4Address:
		return soap_in_PointerTott__PrefixedIPv4Address(soap, tag, NULL, "tt:PrefixedIPv4Address");
	case SOAP_TYPE_PointerTott__IPv4Configuration:
		return soap_in_PointerTott__IPv4Configuration(soap, tag, NULL, "tt:IPv4Configuration");
	case SOAP_TYPE_PointerTott__IPv6Configuration:
		return soap_in_PointerTott__IPv6Configuration(soap, tag, NULL, "tt:IPv6Configuration");
	case SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting:
		return soap_in_PointerTott__NetworkInterfaceConnectionSetting(soap, tag, NULL, "tt:NetworkInterfaceConnectionSetting");
	case SOAP_TYPE_PointerTott__NetworkInterfaceExtension2:
		return soap_in_PointerTott__NetworkInterfaceExtension2(soap, tag, NULL, "tt:NetworkInterfaceExtension2");
	case SOAP_TYPE_PointerTott__Dot11Configuration:
		return soap_in_PointerTott__Dot11Configuration(soap, tag, NULL, "tt:Dot11Configuration");
	case SOAP_TYPE_PointerTott__Dot3Configuration:
		return soap_in_PointerTott__Dot3Configuration(soap, tag, NULL, "tt:Dot3Configuration");
	case SOAP_TYPE_PointerTott__Transport:
		return soap_in_PointerTott__Transport(soap, tag, NULL, "tt:Transport");
	case SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension:
		return soap_in_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, tag, NULL, "tt:AudioDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__G726DecOptions:
		return soap_in_PointerTott__G726DecOptions(soap, tag, NULL, "tt:G726DecOptions");
	case SOAP_TYPE_PointerTott__G711DecOptions:
		return soap_in_PointerTott__G711DecOptions(soap, tag, NULL, "tt:G711DecOptions");
	case SOAP_TYPE_PointerTott__AACDecOptions:
		return soap_in_PointerTott__AACDecOptions(soap, tag, NULL, "tt:AACDecOptions");
	case SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension:
		return soap_in_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, tag, NULL, "tt:VideoDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__Mpeg4DecOptions:
		return soap_in_PointerTott__Mpeg4DecOptions(soap, tag, NULL, "tt:Mpeg4DecOptions");
	case SOAP_TYPE_PointerTott__H264DecOptions:
		return soap_in_PointerTott__H264DecOptions(soap, tag, NULL, "tt:H264DecOptions");
	case SOAP_TYPE_PointerTott__JpegDecOptions:
		return soap_in_PointerTott__JpegDecOptions(soap, tag, NULL, "tt:JpegDecOptions");
	case SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension:
		return soap_in_PointerTott__PTZStatusFilterOptionsExtension(soap, tag, NULL, "tt:PTZStatusFilterOptionsExtension");
	case SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2:
		return soap_in_PointerTott__MetadataConfigurationOptionsExtension2(soap, tag, NULL, "tt:MetadataConfigurationOptionsExtension2");
	case SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension:
		return soap_in_PointerTott__MetadataConfigurationOptionsExtension(soap, tag, NULL, "tt:MetadataConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__PTZStatusFilterOptions:
		return soap_in_PointerTott__PTZStatusFilterOptions(soap, tag, NULL, "tt:PTZStatusFilterOptions");
	case SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy:
		return soap_in_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, tag, NULL, "tt:EventSubscription-SubscriptionPolicy");
	case SOAP_TYPE_PointerTowsnt__FilterType:
		return soap_in_PointerTowsnt__FilterType(soap, tag, NULL, "wsnt:FilterType");
	case SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption:
		return soap_in_PointerTott__AudioEncoderConfigurationOption(soap, tag, NULL, "tt:AudioEncoderConfigurationOption");
	case SOAP_TYPE_PointerTott__AudioSourceOptionsExtension:
		return soap_in_PointerTott__AudioSourceOptionsExtension(soap, tag, NULL, "tt:AudioSourceOptionsExtension");
	case SOAP_TYPE_PointerTott__FloatAttrList:
		return soap_in_PointerTott__FloatAttrList(soap, tag, NULL, "tt:FloatAttrList");
	case SOAP_TYPE_PointerTott__IntAttrList:
		return soap_in_PointerTott__IntAttrList(soap, tag, NULL, "tt:IntAttrList");
	case SOAP_TYPE_PointerTott__VideoResolution2:
		return soap_in_PointerTott__VideoResolution2(soap, tag, NULL, "tt:VideoResolution2");
	case SOAP_TYPE_PointerTott__FloatRange:
		return soap_in_PointerTott__FloatRange(soap, tag, NULL, "tt:FloatRange");
	case SOAP_TYPE_PointerTott__VideoResolution:
		return soap_in_PointerTott__VideoResolution(soap, tag, NULL, "tt:VideoResolution");
	case SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2:
		return soap_in_PointerTott__VideoEncoderOptionsExtension2(soap, tag, NULL, "tt:VideoEncoderOptionsExtension2");
	case SOAP_TYPE_PointerTott__H264Options2:
		return soap_in_PointerTott__H264Options2(soap, tag, NULL, "tt:H264Options2");
	case SOAP_TYPE_PointerTott__Mpeg4Options2:
		return soap_in_PointerTott__Mpeg4Options2(soap, tag, NULL, "tt:Mpeg4Options2");
	case SOAP_TYPE_PointerTott__JpegOptions2:
		return soap_in_PointerTott__JpegOptions2(soap, tag, NULL, "tt:JpegOptions2");
	case SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension:
		return soap_in_PointerTott__VideoEncoderOptionsExtension(soap, tag, NULL, "tt:VideoEncoderOptionsExtension");
	case SOAP_TYPE_PointerTott__H264Options:
		return soap_in_PointerTott__H264Options(soap, tag, NULL, "tt:H264Options");
	case SOAP_TYPE_PointerTott__Mpeg4Options:
		return soap_in_PointerTott__Mpeg4Options(soap, tag, NULL, "tt:Mpeg4Options");
	case SOAP_TYPE_PointerTott__JpegOptions:
		return soap_in_PointerTott__JpegOptions(soap, tag, NULL, "tt:JpegOptions");
	case SOAP_TYPE_PointerTott__RotateOptionsExtension:
		return soap_in_PointerTott__RotateOptionsExtension(soap, tag, NULL, "tt:RotateOptionsExtension");
	case SOAP_TYPE_PointerTott__IntList:
		return soap_in_PointerTott__IntList(soap, tag, NULL, "tt:IntList");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2:
		return soap_in_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, tag, NULL, "tt:VideoSourceConfigurationOptionsExtension2");
	case SOAP_TYPE_PointerTott__RotateOptions:
		return soap_in_PointerTott__RotateOptions(soap, tag, NULL, "tt:RotateOptions");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension:
		return soap_in_PointerTott__VideoSourceConfigurationOptionsExtension(soap, tag, NULL, "tt:VideoSourceConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__IntRectangleRange:
		return soap_in_PointerTott__IntRectangleRange(soap, tag, NULL, "tt:IntRectangleRange");
	case SOAP_TYPE_PointerTott__LensProjection:
		return soap_in_PointerTott__LensProjection(soap, tag, NULL, "tt:LensProjection");
	case SOAP_TYPE_PointerTott__LensOffset:
		return soap_in_PointerTott__LensOffset(soap, tag, NULL, "tt:LensOffset");
	case SOAP_TYPE_PointerTofloat:
		return soap_in_PointerTofloat(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_PointerTott__RotateExtension:
		return soap_in_PointerTott__RotateExtension(soap, tag, NULL, "tt:RotateExtension");
	case SOAP_TYPE_PointerTott__SceneOrientation:
		return soap_in_PointerTott__SceneOrientation(soap, tag, NULL, "tt:SceneOrientation");
	case SOAP_TYPE_PointerTott__LensDescription:
		return soap_in_PointerTott__LensDescription(soap, tag, NULL, "tt:LensDescription");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2:
		return soap_in_PointerTott__VideoSourceConfigurationExtension2(soap, tag, NULL, "tt:VideoSourceConfigurationExtension2");
	case SOAP_TYPE_PointerTott__Rotate:
		return soap_in_PointerTott__Rotate(soap, tag, NULL, "tt:Rotate");
	case SOAP_TYPE_PointerTott__ProfileExtension2:
		return soap_in_PointerTott__ProfileExtension2(soap, tag, NULL, "tt:ProfileExtension2");
	case SOAP_TYPE_PointerTott__AudioDecoderConfiguration:
		return soap_in_PointerTott__AudioDecoderConfiguration(soap, tag, NULL, "tt:AudioDecoderConfiguration");
	case SOAP_TYPE_PointerTott__AudioOutputConfiguration:
		return soap_in_PointerTott__AudioOutputConfiguration(soap, tag, NULL, "tt:AudioOutputConfiguration");
	case SOAP_TYPE_PointerTott__ProfileExtension:
		return soap_in_PointerTott__ProfileExtension(soap, tag, NULL, "tt:ProfileExtension");
	case SOAP_TYPE_PointerTott__MetadataConfiguration:
		return soap_in_PointerTott__MetadataConfiguration(soap, tag, NULL, "tt:MetadataConfiguration");
	case SOAP_TYPE_PointerTott__PTZConfiguration:
		return soap_in_PointerTott__PTZConfiguration(soap, tag, NULL, "tt:PTZConfiguration");
	case SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration:
		return soap_in_PointerTott__VideoAnalyticsConfiguration(soap, tag, NULL, "tt:VideoAnalyticsConfiguration");
	case SOAP_TYPE_PointerTott__AudioEncoderConfiguration:
		return soap_in_PointerTott__AudioEncoderConfiguration(soap, tag, NULL, "tt:AudioEncoderConfiguration");
	case SOAP_TYPE_PointerTott__VideoEncoderConfiguration:
		return soap_in_PointerTott__VideoEncoderConfiguration(soap, tag, NULL, "tt:VideoEncoderConfiguration");
	case SOAP_TYPE_PointerTott__AudioSourceConfiguration:
		return soap_in_PointerTott__AudioSourceConfiguration(soap, tag, NULL, "tt:AudioSourceConfiguration");
	case SOAP_TYPE_PointerTott__VideoSourceConfiguration:
		return soap_in_PointerTott__VideoSourceConfiguration(soap, tag, NULL, "tt:VideoSourceConfiguration");
	case SOAP_TYPE_PointerTott__VideoSourceExtension2:
		return soap_in_PointerTott__VideoSourceExtension2(soap, tag, NULL, "tt:VideoSourceExtension2");
	case SOAP_TYPE_PointerTott__ImagingSettings20:
		return soap_in_PointerTott__ImagingSettings20(soap, tag, NULL, "tt:ImagingSettings20");
	case SOAP_TYPE_PointerTott__IntRange:
		return soap_in_PointerTott__IntRange(soap, tag, NULL, "tt:IntRange");
	case SOAP_TYPE_PointerTott__LocationEntity:
		return soap_in_PointerTott__LocationEntity(soap, tag, NULL, "tt:LocationEntity");
	case SOAP_TYPE_PointerTotds__StorageConfigurationData:
		return soap_in_PointerTotds__StorageConfigurationData(soap, tag, NULL, "tds:StorageConfigurationData");
	case SOAP_TYPE_PointerTotds__StorageConfiguration:
		return soap_in_PointerTotds__StorageConfiguration(soap, tag, NULL, "tds:StorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension:
		return soap_in_PointerTo_tds__GetSystemUrisResponse_Extension(soap, tag, NULL, "tds:GetSystemUrisResponse-Extension");
	case SOAP_TYPE_PointerTott__SystemLogUriList:
		return soap_in_PointerTott__SystemLogUriList(soap, tag, NULL, "tt:SystemLogUriList");
	case SOAP_TYPE_PointerTott__Dot11AvailableNetworks:
		return soap_in_PointerTott__Dot11AvailableNetworks(soap, tag, NULL, "tt:Dot11AvailableNetworks");
	case SOAP_TYPE_PointerTott__Dot11Status:
		return soap_in_PointerTott__Dot11Status(soap, tag, NULL, "tt:Dot11Status");
	case SOAP_TYPE_PointerTott__Dot11Capabilities:
		return soap_in_PointerTott__Dot11Capabilities(soap, tag, NULL, "tt:Dot11Capabilities");
	case SOAP_TYPE_PointerTott__AuxiliaryData:
		return soap_in_PointerTott__AuxiliaryData(soap, tag, NULL, "tt:AuxiliaryData");
	case SOAP_TYPE_PointerTott__RelayOutputSettings:
		return soap_in_PointerTott__RelayOutputSettings(soap, tag, NULL, "tt:RelayOutputSettings");
	case SOAP_TYPE_PointerTott__RelayOutput:
		return soap_in_PointerTott__RelayOutput(soap, tag, NULL, "tt:RelayOutput");
	case SOAP_TYPE_PointerTott__Dot1XConfiguration:
		return soap_in_PointerTott__Dot1XConfiguration(soap, tag, NULL, "tt:Dot1XConfiguration");
	case SOAP_TYPE_PointerTott__CertificateInformation:
		return soap_in_PointerTott__CertificateInformation(soap, tag, NULL, "tt:CertificateInformation");
	case SOAP_TYPE_PointerTott__CertificateWithPrivateKey:
		return soap_in_PointerTott__CertificateWithPrivateKey(soap, tag, NULL, "tt:CertificateWithPrivateKey");
	case SOAP_TYPE_PointerTott__CertificateStatus:
		return soap_in_PointerTott__CertificateStatus(soap, tag, NULL, "tt:CertificateStatus");
	case SOAP_TYPE_PointerTott__Certificate:
		return soap_in_PointerTott__Certificate(soap, tag, NULL, "tt:Certificate");
	case SOAP_TYPE_PointerToxsd__dateTime:
		return soap_in_PointerToxsd__dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerToxsd__token:
		return soap_in_PointerToxsd__token(soap, tag, NULL, "xsd:token");
	case SOAP_TYPE_PointerTott__BinaryData:
		return soap_in_PointerTott__BinaryData(soap, tag, NULL, "tt:BinaryData");
	case SOAP_TYPE_PointerTott__IPAddressFilter:
		return soap_in_PointerTott__IPAddressFilter(soap, tag, NULL, "tt:IPAddressFilter");
	case SOAP_TYPE_PointerTott__NetworkZeroConfiguration:
		return soap_in_PointerTott__NetworkZeroConfiguration(soap, tag, NULL, "tt:NetworkZeroConfiguration");
	case SOAP_TYPE_PointerTott__NetworkGateway:
		return soap_in_PointerTott__NetworkGateway(soap, tag, NULL, "tt:NetworkGateway");
	case SOAP_TYPE_PointerTott__NetworkProtocol:
		return soap_in_PointerTott__NetworkProtocol(soap, tag, NULL, "tt:NetworkProtocol");
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration:
		return soap_in_PointerTott__NetworkInterfaceSetConfiguration(soap, tag, NULL, "tt:NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_PointerTott__NetworkInterface:
		return soap_in_PointerTott__NetworkInterface(soap, tag, NULL, "tt:NetworkInterface");
	case SOAP_TYPE_PointerToxsd__duration:
		return soap_in_PointerToxsd__duration(soap, tag, NULL, "xsd:duration");
	case SOAP_TYPE_PointerTott__DNSName:
		return soap_in_PointerTott__DNSName(soap, tag, NULL, "tt:DNSName");
	case SOAP_TYPE_PointerTott__DynamicDNSInformation:
		return soap_in_PointerTott__DynamicDNSInformation(soap, tag, NULL, "tt:DynamicDNSInformation");
	case SOAP_TYPE_PointerTott__NTPInformation:
		return soap_in_PointerTott__NTPInformation(soap, tag, NULL, "tt:NTPInformation");
	case SOAP_TYPE_PointerTott__IPAddress:
		return soap_in_PointerTott__IPAddress(soap, tag, NULL, "tt:IPAddress");
	case SOAP_TYPE_PointerTott__DNSInformation:
		return soap_in_PointerTott__DNSInformation(soap, tag, NULL, "tt:DNSInformation");
	case SOAP_TYPE_PointerTott__HostnameInformation:
		return soap_in_PointerTott__HostnameInformation(soap, tag, NULL, "tt:HostnameInformation");
	case SOAP_TYPE_PointerTott__Capabilities:
		return soap_in_PointerTott__Capabilities(soap, tag, NULL, "tt:Capabilities");
	case SOAP_TYPE_PointerTott__User:
		return soap_in_PointerTott__User(soap, tag, NULL, "tt:User");
	case SOAP_TYPE_PointerTott__RemoteUser:
		return soap_in_PointerTott__RemoteUser(soap, tag, NULL, "tt:RemoteUser");
	case SOAP_TYPE_PointerTott__NetworkHost:
		return soap_in_PointerTott__NetworkHost(soap, tag, NULL, "tt:NetworkHost");
	case SOAP_TYPE_PointerTott__Scope:
		return soap_in_PointerTott__Scope(soap, tag, NULL, "tt:Scope");
	case SOAP_TYPE_PointerTott__SystemLog:
		return soap_in_PointerTott__SystemLog(soap, tag, NULL, "tt:SystemLog");
	case SOAP_TYPE_PointerTott__SupportInformation:
		return soap_in_PointerTott__SupportInformation(soap, tag, NULL, "tt:SupportInformation");
	case SOAP_TYPE_PointerTott__BackupFile:
		return soap_in_PointerTott__BackupFile(soap, tag, NULL, "tt:BackupFile");
	case SOAP_TYPE_PointerTott__AttachmentData:
		return soap_in_PointerTott__AttachmentData(soap, tag, NULL, "tt:AttachmentData");
	case SOAP_TYPE_PointerTott__SystemDateTime:
		return soap_in_PointerTott__SystemDateTime(soap, tag, NULL, "tt:SystemDateTime");
	case SOAP_TYPE_PointerTott__DateTime:
		return soap_in_PointerTott__DateTime(soap, tag, NULL, "tt:DateTime");
	case SOAP_TYPE_PointerTott__TimeZone:
		return soap_in_PointerTott__TimeZone(soap, tag, NULL, "tt:TimeZone");
	case SOAP_TYPE_PointerTotds__DeviceServiceCapabilities:
		return soap_in_PointerTotds__DeviceServiceCapabilities(soap, tag, NULL, "tds:DeviceServiceCapabilities");
	case SOAP_TYPE_PointerTotds__Service:
		return soap_in_PointerTotds__Service(soap, tag, NULL, "tds:Service");
	case SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension:
		return soap_in_PointerTo_tds__StorageConfigurationData_Extension(soap, tag, NULL, "tds:StorageConfigurationData-Extension");
	case SOAP_TYPE_PointerTotds__UserCredential:
		return soap_in_PointerTotds__UserCredential(soap, tag, NULL, "tds:UserCredential");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_in_PointerToxsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_PointerTo_tds__UserCredential_Extension:
		return soap_in_PointerTo_tds__UserCredential_Extension(soap, tag, NULL, "tds:UserCredential-Extension");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTott__StringAttrList:
		return soap_in_PointerTott__StringAttrList(soap, tag, NULL, "tt:StringAttrList");
	case SOAP_TYPE_PointerTotds__EAPMethodTypes:
		return soap_in_PointerTotds__EAPMethodTypes(soap, tag, NULL, "tds:EAPMethodTypes");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerTotds__MiscCapabilities:
		return soap_in_PointerTotds__MiscCapabilities(soap, tag, NULL, "tds:MiscCapabilities");
	case SOAP_TYPE_PointerTotds__SystemCapabilities:
		return soap_in_PointerTotds__SystemCapabilities(soap, tag, NULL, "tds:SystemCapabilities");
	case SOAP_TYPE_PointerTotds__SecurityCapabilities:
		return soap_in_PointerTotds__SecurityCapabilities(soap, tag, NULL, "tds:SecurityCapabilities");
	case SOAP_TYPE_PointerTotds__NetworkCapabilities:
		return soap_in_PointerTotds__NetworkCapabilities(soap, tag, NULL, "tds:NetworkCapabilities");
	case SOAP_TYPE_PointerTott__OnvifVersion:
		return soap_in_PointerTott__OnvifVersion(soap, tag, NULL, "tt:OnvifVersion");
	case SOAP_TYPE_PointerTo_tds__Service_Capabilities:
		return soap_in_PointerTo_tds__Service_Capabilities(soap, tag, NULL, "tds:Service-Capabilities");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTochan__ChannelInstanceType:
		return soap_in_PointerTochan__ChannelInstanceType(soap, tag, NULL, "chan:ChannelInstanceType");
	case SOAP_TYPE_PointerTo_wsa5__FaultTo:
		return soap_in_PointerTo_wsa5__FaultTo(soap, tag, NULL, "wsa5:FaultTo");
	case SOAP_TYPE_PointerTo_wsa5__ReplyTo:
		return soap_in_PointerTo_wsa5__ReplyTo(soap, tag, NULL, "wsa5:ReplyTo");
	case SOAP_TYPE_PointerTo_wsa5__From:
		return soap_in_PointerTo_wsa5__From(soap, tag, NULL, "wsa5:From");
	case SOAP_TYPE_PointerTo_wsa5__RelatesTo:
		return soap_in_PointerTo_wsa5__RelatesTo(soap, tag, NULL, "wsa5:RelatesTo");
	case SOAP_TYPE__wsa5__ProblemHeaderQName:
	{	char **s;
		s = soap_in__wsa5__ProblemHeaderQName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_PointerTowsa5__MetadataType:
		return soap_in_PointerTowsa5__MetadataType(soap, tag, NULL, "wsa5:MetadataType");
	case SOAP_TYPE_PointerTowsa5__ReferenceParametersType:
		return soap_in_PointerTowsa5__ReferenceParametersType(soap, tag, NULL, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__FaultCodesOpenEnumType:
	{	char **s;
		s = soap_in_wsa5__FaultCodesOpenEnumType(soap, tag, NULL, "wsa5:FaultCodesOpenEnumType");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_wsa5__RelationshipTypeOpenEnum:
	{	char **s;
		s = soap_in_wsa5__RelationshipTypeOpenEnum(soap, tag, NULL, "wsa5:RelationshipTypeOpenEnum");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerTowsd__ProbeMatchesType:
		return soap_in_PointerTowsd__ProbeMatchesType(soap, tag, NULL, "wsd:ProbeMatchesType");
	case SOAP_TYPE_PointerTowsd__ProbeType:
		return soap_in_PointerTowsd__ProbeType(soap, tag, NULL, "wsd:ProbeType");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "tns1:dummy"))
		{	*type = SOAP_TYPE_tns1__dummy;
			return soap_in_tns1__dummy(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "dn:dummy"))
		{	*type = SOAP_TYPE_dn__dummy;
			return soap_in_dn__dummy(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE__wsd__Types;
			return soap_in__wsd__Types(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobReference"))
		{	*type = SOAP_TYPE_tt__RecordingJobReference__;
			return soap_in_tt__RecordingJobReference__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobReference"))
		{	*type = SOAP_TYPE_tt__RecordingJobReference;
			return soap_in_tt__RecordingJobReference(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:JobToken"))
		{	*type = SOAP_TYPE_tt__JobToken__;
			return soap_in_tt__JobToken__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:JobToken"))
		{	*type = SOAP_TYPE_tt__JobToken;
			return soap_in_tt__JobToken(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackReference"))
		{	*type = SOAP_TYPE_tt__TrackReference__;
			return soap_in_tt__TrackReference__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackReference"))
		{	*type = SOAP_TYPE_tt__TrackReference;
			return soap_in_tt__TrackReference(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingReference"))
		{	*type = SOAP_TYPE_tt__RecordingReference__;
			return soap_in_tt__RecordingReference__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingReference"))
		{	*type = SOAP_TYPE_tt__RecordingReference;
			return soap_in_tt__RecordingReference(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverReference"))
		{	*type = SOAP_TYPE_tt__ReceiverReference__;
			return soap_in_tt__ReceiverReference__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverReference"))
		{	*type = SOAP_TYPE_tt__ReceiverReference;
			return soap_in_tt__ReceiverReference(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:FaultSubcodeValues"))
		{	*type = SOAP_TYPE_wsa__FaultSubcodeValues__;
			return soap_in_wsa__FaultSubcodeValues__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:RelationshipTypeValues"))
		{	*type = SOAP_TYPE_wsa__RelationshipTypeValues__;
			return soap_in_wsa__RelationshipTypeValues__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:FaultCodeType"))
		{	*type = SOAP_TYPE_wsd__FaultCodeType__;
			return soap_in_wsd__FaultCodeType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:RelationshipType"))
		{	*type = SOAP_TYPE_wsd__RelationshipType__;
			return soap_in_wsd__RelationshipType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:SimpleTopicExpression"))
		{	*type = SOAP_TYPE_wstop__SimpleTopicExpression__;
			return soap_in_wstop__SimpleTopicExpression__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_wstop__SimpleTopicExpression;
			return soap_in_wstop__SimpleTopicExpression(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:ConcreteTopicExpression"))
		{	*type = SOAP_TYPE_wstop__ConcreteTopicExpression__;
			return soap_in_wstop__ConcreteTopicExpression__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:ConcreteTopicExpression"))
		{	*type = SOAP_TYPE_wstop__ConcreteTopicExpression;
			return soap_in_wstop__ConcreteTopicExpression(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:FullTopicExpression"))
		{	*type = SOAP_TYPE_wstop__FullTopicExpression__;
			return soap_in_wstop__FullTopicExpression__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:FullTopicExpression"))
		{	*type = SOAP_TYPE_wstop__FullTopicExpression;
			return soap_in_wstop__FullTopicExpression(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Entity"))
		{	*type = SOAP_TYPE_tt__Entity__;
			return soap_in_tt__Entity__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MoveStatus"))
		{	*type = SOAP_TYPE_tt__MoveStatus__;
			return soap_in_tt__MoveStatus__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReferenceToken"))
		{	*type = SOAP_TYPE_tt__ReferenceToken__;
			return soap_in_tt__ReferenceToken__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReferenceToken"))
		{	*type = SOAP_TYPE_tt__ReferenceToken;
			return soap_in_tt__ReferenceToken(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDType"))
		{	*type = SOAP_TYPE_tt__OSDType__;
			return soap_in_tt__OSDType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioClassType"))
		{	*type = SOAP_TYPE_tt__AudioClassType__;
			return soap_in_tt__AudioClassType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioClassType"))
		{	*type = SOAP_TYPE_tt__AudioClassType;
			return soap_in_tt__AudioClassType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ModeOfOperation"))
		{	*type = SOAP_TYPE_tt__ModeOfOperation__;
			return soap_in_tt__ModeOfOperation__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobState"))
		{	*type = SOAP_TYPE_tt__RecordingJobState__;
			return soap_in_tt__RecordingJobState__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobState"))
		{	*type = SOAP_TYPE_tt__RecordingJobState;
			return soap_in_tt__RecordingJobState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobMode"))
		{	*type = SOAP_TYPE_tt__RecordingJobMode__;
			return soap_in_tt__RecordingJobMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobMode"))
		{	*type = SOAP_TYPE_tt__RecordingJobMode;
			return soap_in_tt__RecordingJobMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackType"))
		{	*type = SOAP_TYPE_tt__TrackType__;
			return soap_in_tt__TrackType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingStatus"))
		{	*type = SOAP_TYPE_tt__RecordingStatus__;
			return soap_in_tt__RecordingStatus__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SearchState"))
		{	*type = SOAP_TYPE_tt__SearchState__;
			return soap_in_tt__SearchState__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:XPathExpression"))
		{	*type = SOAP_TYPE_tt__XPathExpression__;
			return soap_in_tt__XPathExpression__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:XPathExpression"))
		{	*type = SOAP_TYPE_tt__XPathExpression;
			return soap_in_tt__XPathExpression(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Description"))
		{	*type = SOAP_TYPE_tt__Description__;
			return soap_in_tt__Description__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Description"))
		{	*type = SOAP_TYPE_tt__Description;
			return soap_in_tt__Description(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverState"))
		{	*type = SOAP_TYPE_tt__ReceiverState__;
			return soap_in_tt__ReceiverState__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverMode"))
		{	*type = SOAP_TYPE_tt__ReceiverMode__;
			return soap_in_tt__ReceiverMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Direction"))
		{	*type = SOAP_TYPE_tt__Direction__;
			return soap_in_tt__Direction__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PropertyOperation"))
		{	*type = SOAP_TYPE_tt__PropertyOperation__;
			return soap_in_tt__PropertyOperation__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TopicNamespaceLocation"))
		{	*type = SOAP_TYPE_tt__TopicNamespaceLocation__;
			return soap_in_tt__TopicNamespaceLocation__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TopicNamespaceLocation"))
		{	*type = SOAP_TYPE_tt__TopicNamespaceLocation;
			return soap_in_tt__TopicNamespaceLocation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DefoggingMode"))
		{	*type = SOAP_TYPE_tt__DefoggingMode__;
			return soap_in_tt__DefoggingMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ToneCompensationMode"))
		{	*type = SOAP_TYPE_tt__ToneCompensationMode__;
			return soap_in_tt__ToneCompensationMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterAutoBoundaryType"))
		{	*type = SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__;
			return soap_in_tt__IrCutFilterAutoBoundaryType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImageStabilizationMode"))
		{	*type = SOAP_TYPE_tt__ImageStabilizationMode__;
			return soap_in_tt__ImageStabilizationMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterMode"))
		{	*type = SOAP_TYPE_tt__IrCutFilterMode__;
			return soap_in_tt__IrCutFilterMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalanceMode"))
		{	*type = SOAP_TYPE_tt__WhiteBalanceMode__;
			return soap_in_tt__WhiteBalanceMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Enabled"))
		{	*type = SOAP_TYPE_tt__Enabled__;
			return soap_in_tt__Enabled__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ExposureMode"))
		{	*type = SOAP_TYPE_tt__ExposureMode__;
			return soap_in_tt__ExposureMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ExposurePriority"))
		{	*type = SOAP_TYPE_tt__ExposurePriority__;
			return soap_in_tt__ExposurePriority__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BacklightCompensationMode"))
		{	*type = SOAP_TYPE_tt__BacklightCompensationMode__;
			return soap_in_tt__BacklightCompensationMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WideDynamicMode"))
		{	*type = SOAP_TYPE_tt__WideDynamicMode__;
			return soap_in_tt__WideDynamicMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AutoFocusMode"))
		{	*type = SOAP_TYPE_tt__AutoFocusMode__;
			return soap_in_tt__AutoFocusMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourOperation"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourOperation__;
			return soap_in_tt__PTZPresetTourOperation__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourDirection"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourDirection__;
			return soap_in_tt__PTZPresetTourDirection__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourState"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourState__;
			return soap_in_tt__PTZPresetTourState__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AuxiliaryData"))
		{	*type = SOAP_TYPE_tt__AuxiliaryData__;
			return soap_in_tt__AuxiliaryData__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AuxiliaryData"))
		{	*type = SOAP_TYPE_tt__AuxiliaryData;
			return soap_in_tt__AuxiliaryData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReverseMode"))
		{	*type = SOAP_TYPE_tt__ReverseMode__;
			return soap_in_tt__ReverseMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EFlipMode"))
		{	*type = SOAP_TYPE_tt__EFlipMode__;
			return soap_in_tt__EFlipMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DigitalIdleState"))
		{	*type = SOAP_TYPE_tt__DigitalIdleState__;
			return soap_in_tt__DigitalIdleState__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayMode"))
		{	*type = SOAP_TYPE_tt__RelayMode__;
			return soap_in_tt__RelayMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayIdleState"))
		{	*type = SOAP_TYPE_tt__RelayIdleState__;
			return soap_in_tt__RelayIdleState__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayLogicalState"))
		{	*type = SOAP_TYPE_tt__RelayLogicalState__;
			return soap_in_tt__RelayLogicalState__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:UserLevel"))
		{	*type = SOAP_TYPE_tt__UserLevel__;
			return soap_in_tt__UserLevel__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SetDateTimeType"))
		{	*type = SOAP_TYPE_tt__SetDateTimeType__;
			return soap_in_tt__SetDateTimeType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FactoryDefaultType"))
		{	*type = SOAP_TYPE_tt__FactoryDefaultType__;
			return soap_in_tt__FactoryDefaultType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemLogType"))
		{	*type = SOAP_TYPE_tt__SystemLogType__;
			return soap_in_tt__SystemLogType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CapabilityCategory"))
		{	*type = SOAP_TYPE_tt__CapabilityCategory__;
			return soap_in_tt__CapabilityCategory__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11AuthAndMangementSuite"))
		{	*type = SOAP_TYPE_tt__Dot11AuthAndMangementSuite__;
			return soap_in_tt__Dot11AuthAndMangementSuite__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SignalStrength"))
		{	*type = SOAP_TYPE_tt__Dot11SignalStrength__;
			return soap_in_tt__Dot11SignalStrength__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11PSKPassphrase"))
		{	*type = SOAP_TYPE_tt__Dot11PSKPassphrase__;
			return soap_in_tt__Dot11PSKPassphrase__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11PSKPassphrase"))
		{	*type = SOAP_TYPE_tt__Dot11PSKPassphrase;
			return soap_in_tt__Dot11PSKPassphrase(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11PSK"))
		{	*type = SOAP_TYPE_tt__Dot11PSK__;
			return soap_in_tt__Dot11PSK__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11PSK"))
		{	*type = SOAP_TYPE_tt__Dot11PSK;
			return soap_in_tt__Dot11PSK(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11Cipher"))
		{	*type = SOAP_TYPE_tt__Dot11Cipher__;
			return soap_in_tt__Dot11Cipher__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SecurityMode"))
		{	*type = SOAP_TYPE_tt__Dot11SecurityMode__;
			return soap_in_tt__Dot11SecurityMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11StationMode"))
		{	*type = SOAP_TYPE_tt__Dot11StationMode__;
			return soap_in_tt__Dot11StationMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SSIDType"))
		{	*type = SOAP_TYPE_tt__Dot11SSIDType__;
			return soap_in_tt__Dot11SSIDType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SSIDType"))
		{	*type = SOAP_TYPE_tt__Dot11SSIDType;
			return soap_in_tt__Dot11SSIDType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DynamicDNSType"))
		{	*type = SOAP_TYPE_tt__DynamicDNSType__;
			return soap_in_tt__DynamicDNSType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPAddressFilterType"))
		{	*type = SOAP_TYPE_tt__IPAddressFilterType__;
			return soap_in_tt__IPAddressFilterType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Domain"))
		{	*type = SOAP_TYPE_tt__Domain__;
			return soap_in_tt__Domain__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Domain"))
		{	*type = SOAP_TYPE_tt__Domain;
			return soap_in_tt__Domain(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DNSName"))
		{	*type = SOAP_TYPE_tt__DNSName__;
			return soap_in_tt__DNSName__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DNSName"))
		{	*type = SOAP_TYPE_tt__DNSName;
			return soap_in_tt__DNSName(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPType"))
		{	*type = SOAP_TYPE_tt__IPType__;
			return soap_in_tt__IPType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:HwAddress"))
		{	*type = SOAP_TYPE_tt__HwAddress__;
			return soap_in_tt__HwAddress__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:HwAddress"))
		{	*type = SOAP_TYPE_tt__HwAddress;
			return soap_in_tt__HwAddress(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6Address"))
		{	*type = SOAP_TYPE_tt__IPv6Address__;
			return soap_in_tt__IPv6Address__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6Address"))
		{	*type = SOAP_TYPE_tt__IPv6Address;
			return soap_in_tt__IPv6Address(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv4Address"))
		{	*type = SOAP_TYPE_tt__IPv4Address__;
			return soap_in_tt__IPv4Address__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv4Address"))
		{	*type = SOAP_TYPE_tt__IPv4Address;
			return soap_in_tt__IPv4Address(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkHostType"))
		{	*type = SOAP_TYPE_tt__NetworkHostType__;
			return soap_in_tt__NetworkHostType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkProtocolType"))
		{	*type = SOAP_TYPE_tt__NetworkProtocolType__;
			return soap_in_tt__NetworkProtocolType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6DHCPConfiguration"))
		{	*type = SOAP_TYPE_tt__IPv6DHCPConfiguration__;
			return soap_in_tt__IPv6DHCPConfiguration__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IANA-IfTypes"))
		{	*type = SOAP_TYPE_tt__IANA_IfTypes__;
			return soap_in_tt__IANA_IfTypes__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Duplex"))
		{	*type = SOAP_TYPE_tt__Duplex__;
			return soap_in_tt__Duplex__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceConfigPriority"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceConfigPriority__;
			return soap_in_tt__NetworkInterfaceConfigPriority__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceConfigPriority"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceConfigPriority;
			return soap_in_tt__NetworkInterfaceConfigPriority(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DiscoveryMode"))
		{	*type = SOAP_TYPE_tt__DiscoveryMode__;
			return soap_in_tt__DiscoveryMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ScopeDefinition"))
		{	*type = SOAP_TYPE_tt__ScopeDefinition__;
			return soap_in_tt__ScopeDefinition__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TransportProtocol"))
		{	*type = SOAP_TYPE_tt__TransportProtocol__;
			return soap_in_tt__TransportProtocol__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:StreamType"))
		{	*type = SOAP_TYPE_tt__StreamType__;
			return soap_in_tt__StreamType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataCompressionType"))
		{	*type = SOAP_TYPE_tt__MetadataCompressionType__;
			return soap_in_tt__MetadataCompressionType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncodingMimeNames"))
		{	*type = SOAP_TYPE_tt__AudioEncodingMimeNames__;
			return soap_in_tt__AudioEncodingMimeNames__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoding"))
		{	*type = SOAP_TYPE_tt__AudioEncoding__;
			return soap_in_tt__AudioEncoding__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncodingProfiles"))
		{	*type = SOAP_TYPE_tt__VideoEncodingProfiles__;
			return soap_in_tt__VideoEncodingProfiles__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncodingMimeNames"))
		{	*type = SOAP_TYPE_tt__VideoEncodingMimeNames__;
			return soap_in_tt__VideoEncodingMimeNames__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:H264Profile"))
		{	*type = SOAP_TYPE_tt__H264Profile__;
			return soap_in_tt__H264Profile__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Mpeg4Profile"))
		{	*type = SOAP_TYPE_tt__Mpeg4Profile__;
			return soap_in_tt__Mpeg4Profile__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoding"))
		{	*type = SOAP_TYPE_tt__VideoEncoding__;
			return soap_in_tt__VideoEncoding__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ViewModes"))
		{	*type = SOAP_TYPE_tt__ViewModes__;
			return soap_in_tt__ViewModes__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SceneOrientationOption"))
		{	*type = SOAP_TYPE_tt__SceneOrientationOption__;
			return soap_in_tt__SceneOrientationOption__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SceneOrientationMode"))
		{	*type = SOAP_TYPE_tt__SceneOrientationMode__;
			return soap_in_tt__SceneOrientationMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RotateMode"))
		{	*type = SOAP_TYPE_tt__RotateMode__;
			return soap_in_tt__RotateMode__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Name"))
		{	*type = SOAP_TYPE_tt__Name__;
			return soap_in_tt__Name__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Name"))
		{	*type = SOAP_TYPE_tt__Name;
			return soap_in_tt__Name(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StorageType"))
		{	*type = SOAP_TYPE_tds__StorageType__;
			return soap_in_tds__StorageType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:AutoGeoModes"))
		{	*type = SOAP_TYPE_tds__AutoGeoModes__;
			return soap_in_tds__AutoGeoModes__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:FaultCodeOpenType"))
		{	*type = SOAP_TYPE_wsd__FaultCodeOpenType;
			return soap_in_wsd__FaultCodeOpenType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:UriListType"))
		{	*type = SOAP_TYPE_wsd__UriListType;
			return soap_in_wsd__UriListType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_wsd__QNameListType;
			return soap_in_wsd__QNameListType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:OpenRelationshipType"))
		{	*type = SOAP_TYPE_wsd__OpenRelationshipType;
			return soap_in_wsd__OpenRelationshipType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:AbsoluteOrRelativeTimeType"))
		{	*type = SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType;
			return soap_in_wsnt__AbsoluteOrRelativeTimeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReferenceTokenList"))
		{	*type = SOAP_TYPE_tt__ReferenceTokenList;
			return soap_in_tt__ReferenceTokenList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:StringAttrList"))
		{	*type = SOAP_TYPE_tt__StringAttrList;
			return soap_in_tt__StringAttrList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FloatAttrList"))
		{	*type = SOAP_TYPE_tt__FloatAttrList;
			return soap_in_tt__FloatAttrList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IntAttrList"))
		{	*type = SOAP_TYPE_tt__IntAttrList;
			return soap_in_tt__IntAttrList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:EAPMethodTypes"))
		{	*type = SOAP_TYPE_tds__EAPMethodTypes;
			return soap_in_tds__EAPMethodTypes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:VideoSurveillanceSystem"))
		{	*type = SOAP_TYPE_tmk__VideoSurveillanceSystem;
			return soap_in_tmk__VideoSurveillanceSystem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:MetalDetector"))
		{	*type = SOAP_TYPE_tmk__MetalDetector;
			return soap_in_tmk__MetalDetector(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:SteamDetector"))
		{	*type = SOAP_TYPE_tmk__SteamDetector;
			return soap_in_tmk__SteamDetector(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:RadiationMonitoring"))
		{	*type = SOAP_TYPE_tmk__RadiationMonitoring;
			return soap_in_tmk__RadiationMonitoring(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:NeutronProbing"))
		{	*type = SOAP_TYPE_tmk__NeutronProbing;
			return soap_in_tmk__NeutronProbing(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:Introscopy"))
		{	*type = SOAP_TYPE_tmk__Introscopy;
			return soap_in_tmk__Introscopy(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:GasAnalysis"))
		{	*type = SOAP_TYPE_tmk__GasAnalysis;
			return soap_in_tmk__GasAnalysis(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:FireAlarm"))
		{	*type = SOAP_TYPE_tmk__FireAlarm;
			return soap_in_tmk__FireAlarm(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tmk:AccessControl"))
		{	*type = SOAP_TYPE_tmk__AccessControl;
			return soap_in_tmk__AccessControl(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:AttributedURI"))
		{	*type = SOAP_TYPE_wsa__AttributedURI;
			return soap_in_wsa__AttributedURI(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:AttributedQName"))
		{	*type = SOAP_TYPE_wsa__AttributedQName;
			return soap_in_wsa__AttributedQName(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:RetryAfterType"))
		{	*type = SOAP_TYPE_wsa__RetryAfterType;
			return soap_in_wsa__RetryAfterType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:ReplyAfterType"))
		{	*type = SOAP_TYPE_wsa__ReplyAfterType;
			return soap_in_wsa__ReplyAfterType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:Relationship"))
		{	*type = SOAP_TYPE_wsa__Relationship;
			return soap_in_wsa__Relationship(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:ServiceNameType"))
		{	*type = SOAP_TYPE_wsa__ServiceNameType;
			return soap_in_wsa__ServiceNameType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:ReferenceParametersType"))
		{	*type = SOAP_TYPE_wsa__ReferenceParametersType;
			return soap_in_wsa__ReferenceParametersType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:ReferencePropertiesType"))
		{	*type = SOAP_TYPE_wsa__ReferencePropertiesType;
			return soap_in_wsa__ReferencePropertiesType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:EndpointReferenceType"))
		{	*type = SOAP_TYPE_wsa__EndpointReferenceType;
			return soap_in_wsa__EndpointReferenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:AppSequenceType"))
		{	*type = SOAP_TYPE_wsd__AppSequenceType;
			return soap_in_wsd__AppSequenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:SigType"))
		{	*type = SOAP_TYPE_wsd__SigType;
			return soap_in_wsd__SigType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:SecurityType"))
		{	*type = SOAP_TYPE_wsd__SecurityType;
			return soap_in_wsd__SecurityType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ScopesType"))
		{	*type = SOAP_TYPE_wsd__ScopesType;
			return soap_in_wsd__ScopesType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ResolveMatchType"))
		{	*type = SOAP_TYPE_wsd__ResolveMatchType;
			return soap_in_wsd__ResolveMatchType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ResolveMatchesType"))
		{	*type = SOAP_TYPE_wsd__ResolveMatchesType;
			return soap_in_wsd__ResolveMatchesType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ResolveType"))
		{	*type = SOAP_TYPE_wsd__ResolveType;
			return soap_in_wsd__ResolveType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ProbeMatchType"))
		{	*type = SOAP_TYPE_wsd__ProbeMatchType;
			return soap_in_wsd__ProbeMatchType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ByeType"))
		{	*type = SOAP_TYPE_wsd__ByeType;
			return soap_in_wsd__ByeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:HelloType"))
		{	*type = SOAP_TYPE_wsd__HelloType;
			return soap_in_wsd__HelloType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrf:ResourceUnavailableFaultType"))
		{	*type = SOAP_TYPE_wsrf__ResourceUnavailableFaultType;
			return soap_in_wsrf__ResourceUnavailableFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrf:ResourceUnknownFaultType"))
		{	*type = SOAP_TYPE_wsrf__ResourceUnknownFaultType;
			return soap_in_wsrf__ResourceUnknownFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:SubscriptionPolicy"))
		{	*type = SOAP_TYPE_tev__SubscriptionPolicy;
			return soap_in_tev__SubscriptionPolicy(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:Capabilities"))
		{	*type = SOAP_TYPE_tev__Capabilities;
			return soap_in_tev__Capabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicSetType"))
		{	*type = SOAP_TYPE_wstop__TopicSetType;
			return soap_in_wstop__TopicSetType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicType"))
		{	*type = SOAP_TYPE_wstop__TopicType;
			return soap_in_wstop__TopicType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicNamespaceType"))
		{	*type = SOAP_TYPE_wstop__TopicNamespaceType;
			return soap_in_wstop__TopicNamespaceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:QueryExpressionType"))
		{	*type = SOAP_TYPE_wstop__QueryExpressionType;
			return soap_in_wstop__QueryExpressionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:ExtensibleDocumented"))
		{	*type = SOAP_TYPE_wstop__ExtensibleDocumented;
			return soap_in_wstop__ExtensibleDocumented(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:Documentation"))
		{	*type = SOAP_TYPE_wstop__Documentation;
			return soap_in_wstop__Documentation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType"))
		{	*type = SOAP_TYPE_wsrfbf__BaseFaultType;
			return soap_in_wsrfbf__BaseFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xop:Include"))
		{	*type = SOAP_TYPE_xop__Include;
			return soap_in_xop__Include(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ResumeFailedFaultType"))
		{	*type = SOAP_TYPE_wsnt__ResumeFailedFaultType;
			return soap_in_wsnt__ResumeFailedFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:PauseFailedFaultType"))
		{	*type = SOAP_TYPE_wsnt__PauseFailedFaultType;
			return soap_in_wsnt__PauseFailedFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToDestroySubscriptionFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType;
			return soap_in_wsnt__UnableToDestroySubscriptionFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnacceptableTerminationTimeFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType;
			return soap_in_wsnt__UnacceptableTerminationTimeFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToCreatePullPointFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType;
			return soap_in_wsnt__UnableToCreatePullPointFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToDestroyPullPointFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType;
			return soap_in_wsnt__UnableToDestroyPullPointFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToGetMessagesFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnableToGetMessagesFaultType;
			return soap_in_wsnt__UnableToGetMessagesFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NoCurrentMessageOnTopicFaultType"))
		{	*type = SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType;
			return soap_in_wsnt__NoCurrentMessageOnTopicFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnacceptableInitialTerminationTimeFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType;
			return soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotifyMessageNotSupportedFaultType"))
		{	*type = SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType;
			return soap_in_wsnt__NotifyMessageNotSupportedFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnsupportedPolicyRequestFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType;
			return soap_in_wsnt__UnsupportedPolicyRequestFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnrecognizedPolicyRequestFaultType"))
		{	*type = SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType;
			return soap_in_wsnt__UnrecognizedPolicyRequestFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidMessageContentExpressionFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType;
			return soap_in_wsnt__InvalidMessageContentExpressionFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidProducerPropertiesExpressionFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType;
			return soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:MultipleTopicsSpecifiedFaultType"))
		{	*type = SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType;
			return soap_in_wsnt__MultipleTopicsSpecifiedFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicNotSupportedFaultType"))
		{	*type = SOAP_TYPE_wsnt__TopicNotSupportedFaultType;
			return soap_in_wsnt__TopicNotSupportedFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidTopicExpressionFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType;
			return soap_in_wsnt__InvalidTopicExpressionFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicExpressionDialectUnknownFaultType"))
		{	*type = SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType;
			return soap_in_wsnt__TopicExpressionDialectUnknownFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidFilterFaultType"))
		{	*type = SOAP_TYPE_wsnt__InvalidFilterFaultType;
			return soap_in_wsnt__InvalidFilterFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscribeCreationFailedFaultType"))
		{	*type = SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType;
			return soap_in_wsnt__SubscribeCreationFailedFaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotificationMessageHolderType"))
		{	*type = SOAP_TYPE_wsnt__NotificationMessageHolderType;
			return soap_in_wsnt__NotificationMessageHolderType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscriptionPolicyType"))
		{	*type = SOAP_TYPE_wsnt__SubscriptionPolicyType;
			return soap_in_wsnt__SubscriptionPolicyType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:FilterType"))
		{	*type = SOAP_TYPE_wsnt__FilterType;
			return soap_in_wsnt__FilterType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicExpressionTypeCustom"))
		{	*type = SOAP_TYPE_wsnt__TopicExpressionTypeCustom;
			return soap_in_wsnt__TopicExpressionTypeCustom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:QueryExpressionType"))
		{	*type = SOAP_TYPE_wsnt__QueryExpressionType;
			return soap_in_wsnt__QueryExpressionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LocationEntity"))
		{	*type = SOAP_TYPE_tt__LocationEntity;
			return soap_in_tt__LocationEntity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LocalOrientation"))
		{	*type = SOAP_TYPE_tt__LocalOrientation;
			return soap_in_tt__LocalOrientation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LocalLocation"))
		{	*type = SOAP_TYPE_tt__LocalLocation;
			return soap_in_tt__LocalLocation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:GeoOrientation"))
		{	*type = SOAP_TYPE_tt__GeoOrientation;
			return soap_in_tt__GeoOrientation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:GeoLocation"))
		{	*type = SOAP_TYPE_tt__GeoLocation;
			return soap_in_tt__GeoLocation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TransformationExtension"))
		{	*type = SOAP_TYPE_tt__TransformationExtension;
			return soap_in_tt__TransformationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Transformation"))
		{	*type = SOAP_TYPE_tt__Transformation;
			return soap_in_tt__Transformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ColorCovariance"))
		{	*type = SOAP_TYPE_tt__ColorCovariance;
			return soap_in_tt__ColorCovariance(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Color"))
		{	*type = SOAP_TYPE_tt__Color;
			return soap_in_tt__Color(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Polygon"))
		{	*type = SOAP_TYPE_tt__Polygon;
			return soap_in_tt__Polygon(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Rectangle"))
		{	*type = SOAP_TYPE_tt__Rectangle;
			return soap_in_tt__Rectangle(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Vector"))
		{	*type = SOAP_TYPE_tt__Vector;
			return soap_in_tt__Vector(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZMoveStatus"))
		{	*type = SOAP_TYPE_tt__PTZMoveStatus;
			return soap_in_tt__PTZMoveStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZStatus"))
		{	*type = SOAP_TYPE_tt__PTZStatus;
			return soap_in_tt__PTZStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZVector"))
		{	*type = SOAP_TYPE_tt__PTZVector;
			return soap_in_tt__PTZVector(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Vector1D"))
		{	*type = SOAP_TYPE_tt__Vector1D;
			return soap_in_tt__Vector1D(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Vector2D"))
		{	*type = SOAP_TYPE_tt__Vector2D;
			return soap_in_tt__Vector2D(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:StorageReferencePathExtension"))
		{	*type = SOAP_TYPE_tt__StorageReferencePathExtension;
			return soap_in_tt__StorageReferencePathExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:StorageReferencePath"))
		{	*type = SOAP_TYPE_tt__StorageReferencePath;
			return soap_in_tt__StorageReferencePath(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ArrayOfFileProgressExtension"))
		{	*type = SOAP_TYPE_tt__ArrayOfFileProgressExtension;
			return soap_in_tt__ArrayOfFileProgressExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ArrayOfFileProgress"))
		{	*type = SOAP_TYPE_tt__ArrayOfFileProgress;
			return soap_in_tt__ArrayOfFileProgress(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FileProgress"))
		{	*type = SOAP_TYPE_tt__FileProgress;
			return soap_in_tt__FileProgress(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDConfigurationOptionsExtension"))
		{	*type = SOAP_TYPE_tt__OSDConfigurationOptionsExtension;
			return soap_in_tt__OSDConfigurationOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__OSDConfigurationOptions;
			return soap_in_tt__OSDConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MaximumNumberOfOSDs"))
		{	*type = SOAP_TYPE_tt__MaximumNumberOfOSDs;
			return soap_in_tt__MaximumNumberOfOSDs(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__OSDConfigurationExtension;
			return soap_in_tt__OSDConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDConfiguration"))
		{	*type = SOAP_TYPE_tt__OSDConfiguration;
			return soap_in_tt__OSDConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDImgOptionsExtension"))
		{	*type = SOAP_TYPE_tt__OSDImgOptionsExtension;
			return soap_in_tt__OSDImgOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDImgOptions"))
		{	*type = SOAP_TYPE_tt__OSDImgOptions;
			return soap_in_tt__OSDImgOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDTextOptionsExtension"))
		{	*type = SOAP_TYPE_tt__OSDTextOptionsExtension;
			return soap_in_tt__OSDTextOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDTextOptions"))
		{	*type = SOAP_TYPE_tt__OSDTextOptions;
			return soap_in_tt__OSDTextOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDColorOptionsExtension"))
		{	*type = SOAP_TYPE_tt__OSDColorOptionsExtension;
			return soap_in_tt__OSDColorOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDColorOptions"))
		{	*type = SOAP_TYPE_tt__OSDColorOptions;
			return soap_in_tt__OSDColorOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ColorOptions"))
		{	*type = SOAP_TYPE_tt__ColorOptions;
			return soap_in_tt__ColorOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ColorspaceRange"))
		{	*type = SOAP_TYPE_tt__ColorspaceRange;
			return soap_in_tt__ColorspaceRange(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDImgConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__OSDImgConfigurationExtension;
			return soap_in_tt__OSDImgConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDImgConfiguration"))
		{	*type = SOAP_TYPE_tt__OSDImgConfiguration;
			return soap_in_tt__OSDImgConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDTextConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__OSDTextConfigurationExtension;
			return soap_in_tt__OSDTextConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDTextConfiguration"))
		{	*type = SOAP_TYPE_tt__OSDTextConfiguration;
			return soap_in_tt__OSDTextConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDColor"))
		{	*type = SOAP_TYPE_tt__OSDColor;
			return soap_in_tt__OSDColor(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDPosConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__OSDPosConfigurationExtension;
			return soap_in_tt__OSDPosConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDPosConfiguration"))
		{	*type = SOAP_TYPE_tt__OSDPosConfiguration;
			return soap_in_tt__OSDPosConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDReference"))
		{	*type = SOAP_TYPE_tt__OSDReference;
			return soap_in_tt__OSDReference(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ProfileStatusExtension"))
		{	*type = SOAP_TYPE_tt__ProfileStatusExtension;
			return soap_in_tt__ProfileStatusExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ProfileStatus"))
		{	*type = SOAP_TYPE_tt__ProfileStatus;
			return soap_in_tt__ProfileStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ActiveConnection"))
		{	*type = SOAP_TYPE_tt__ActiveConnection;
			return soap_in_tt__ActiveConnection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioClassDescriptorExtension"))
		{	*type = SOAP_TYPE_tt__AudioClassDescriptorExtension;
			return soap_in_tt__AudioClassDescriptorExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioClassDescriptor"))
		{	*type = SOAP_TYPE_tt__AudioClassDescriptor;
			return soap_in_tt__AudioClassDescriptor(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioClassCandidate"))
		{	*type = SOAP_TYPE_tt__AudioClassCandidate;
			return soap_in_tt__AudioClassCandidate(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ActionEngineEventPayloadExtension"))
		{	*type = SOAP_TYPE_tt__ActionEngineEventPayloadExtension;
			return soap_in_tt__ActionEngineEventPayloadExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ActionEngineEventPayload"))
		{	*type = SOAP_TYPE_tt__ActionEngineEventPayload;
			return soap_in_tt__ActionEngineEventPayload(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsState"))
		{	*type = SOAP_TYPE_tt__AnalyticsState;
			return soap_in_tt__AnalyticsState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsStateInformation"))
		{	*type = SOAP_TYPE_tt__AnalyticsStateInformation;
			return soap_in_tt__AnalyticsStateInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsEngineControl"))
		{	*type = SOAP_TYPE_tt__AnalyticsEngineControl;
			return soap_in_tt__AnalyticsEngineControl(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataInputExtension"))
		{	*type = SOAP_TYPE_tt__MetadataInputExtension;
			return soap_in_tt__MetadataInputExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataInput"))
		{	*type = SOAP_TYPE_tt__MetadataInput;
			return soap_in_tt__MetadataInput(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SourceIdentificationExtension"))
		{	*type = SOAP_TYPE_tt__SourceIdentificationExtension;
			return soap_in_tt__SourceIdentificationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SourceIdentification"))
		{	*type = SOAP_TYPE_tt__SourceIdentification;
			return soap_in_tt__SourceIdentification(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsEngineInput"))
		{	*type = SOAP_TYPE_tt__AnalyticsEngineInput;
			return soap_in_tt__AnalyticsEngineInput(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsEngineInputInfoExtension"))
		{	*type = SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension;
			return soap_in_tt__AnalyticsEngineInputInfoExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsEngineInputInfo"))
		{	*type = SOAP_TYPE_tt__AnalyticsEngineInputInfo;
			return soap_in_tt__AnalyticsEngineInputInfo(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EngineConfiguration"))
		{	*type = SOAP_TYPE_tt__EngineConfiguration;
			return soap_in_tt__EngineConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsDeviceEngineConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension;
			return soap_in_tt__AnalyticsDeviceEngineConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsDeviceEngineConfiguration"))
		{	*type = SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration;
			return soap_in_tt__AnalyticsDeviceEngineConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsEngine"))
		{	*type = SOAP_TYPE_tt__AnalyticsEngine;
			return soap_in_tt__AnalyticsEngine(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReplayConfiguration"))
		{	*type = SOAP_TYPE_tt__ReplayConfiguration;
			return soap_in_tt__ReplayConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:GetRecordingJobsResponseItem"))
		{	*type = SOAP_TYPE_tt__GetRecordingJobsResponseItem;
			return soap_in_tt__GetRecordingJobsResponseItem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobStateTrack"))
		{	*type = SOAP_TYPE_tt__RecordingJobStateTrack;
			return soap_in_tt__RecordingJobStateTrack(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobStateTracks"))
		{	*type = SOAP_TYPE_tt__RecordingJobStateTracks;
			return soap_in_tt__RecordingJobStateTracks(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobStateSource"))
		{	*type = SOAP_TYPE_tt__RecordingJobStateSource;
			return soap_in_tt__RecordingJobStateSource(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobStateInformationExtension"))
		{	*type = SOAP_TYPE_tt__RecordingJobStateInformationExtension;
			return soap_in_tt__RecordingJobStateInformationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobStateInformation"))
		{	*type = SOAP_TYPE_tt__RecordingJobStateInformation;
			return soap_in_tt__RecordingJobStateInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobTrack"))
		{	*type = SOAP_TYPE_tt__RecordingJobTrack;
			return soap_in_tt__RecordingJobTrack(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobSourceExtension"))
		{	*type = SOAP_TYPE_tt__RecordingJobSourceExtension;
			return soap_in_tt__RecordingJobSourceExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobSource"))
		{	*type = SOAP_TYPE_tt__RecordingJobSource;
			return soap_in_tt__RecordingJobSource(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__RecordingJobConfigurationExtension;
			return soap_in_tt__RecordingJobConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingJobConfiguration"))
		{	*type = SOAP_TYPE_tt__RecordingJobConfiguration;
			return soap_in_tt__RecordingJobConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:GetTracksResponseItem"))
		{	*type = SOAP_TYPE_tt__GetTracksResponseItem;
			return soap_in_tt__GetTracksResponseItem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:GetTracksResponseList"))
		{	*type = SOAP_TYPE_tt__GetTracksResponseList;
			return soap_in_tt__GetTracksResponseList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:GetRecordingsResponseItem"))
		{	*type = SOAP_TYPE_tt__GetRecordingsResponseItem;
			return soap_in_tt__GetRecordingsResponseItem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackConfiguration"))
		{	*type = SOAP_TYPE_tt__TrackConfiguration;
			return soap_in_tt__TrackConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingConfiguration"))
		{	*type = SOAP_TYPE_tt__RecordingConfiguration;
			return soap_in_tt__RecordingConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataAttributes"))
		{	*type = SOAP_TYPE_tt__MetadataAttributes;
			return soap_in_tt__MetadataAttributes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioAttributes"))
		{	*type = SOAP_TYPE_tt__AudioAttributes;
			return soap_in_tt__AudioAttributes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoAttributes"))
		{	*type = SOAP_TYPE_tt__VideoAttributes;
			return soap_in_tt__VideoAttributes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackAttributesExtension"))
		{	*type = SOAP_TYPE_tt__TrackAttributesExtension;
			return soap_in_tt__TrackAttributesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackAttributes"))
		{	*type = SOAP_TYPE_tt__TrackAttributes;
			return soap_in_tt__TrackAttributes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MediaAttributes"))
		{	*type = SOAP_TYPE_tt__MediaAttributes;
			return soap_in_tt__MediaAttributes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackInformation"))
		{	*type = SOAP_TYPE_tt__TrackInformation;
			return soap_in_tt__TrackInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingSourceInformation"))
		{	*type = SOAP_TYPE_tt__RecordingSourceInformation;
			return soap_in_tt__RecordingSourceInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingInformation"))
		{	*type = SOAP_TYPE_tt__RecordingInformation;
			return soap_in_tt__RecordingInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FindMetadataResult"))
		{	*type = SOAP_TYPE_tt__FindMetadataResult;
			return soap_in_tt__FindMetadataResult(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FindMetadataResultList"))
		{	*type = SOAP_TYPE_tt__FindMetadataResultList;
			return soap_in_tt__FindMetadataResultList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FindPTZPositionResult"))
		{	*type = SOAP_TYPE_tt__FindPTZPositionResult;
			return soap_in_tt__FindPTZPositionResult(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FindPTZPositionResultList"))
		{	*type = SOAP_TYPE_tt__FindPTZPositionResultList;
			return soap_in_tt__FindPTZPositionResultList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FindEventResult"))
		{	*type = SOAP_TYPE_tt__FindEventResult;
			return soap_in_tt__FindEventResult(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FindEventResultList"))
		{	*type = SOAP_TYPE_tt__FindEventResultList;
			return soap_in_tt__FindEventResultList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FindRecordingResultList"))
		{	*type = SOAP_TYPE_tt__FindRecordingResultList;
			return soap_in_tt__FindRecordingResultList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataFilter"))
		{	*type = SOAP_TYPE_tt__MetadataFilter;
			return soap_in_tt__MetadataFilter(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPositionFilter"))
		{	*type = SOAP_TYPE_tt__PTZPositionFilter;
			return soap_in_tt__PTZPositionFilter(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EventFilter"))
		{	*type = SOAP_TYPE_tt__EventFilter;
			return soap_in_tt__EventFilter(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SearchScopeExtension"))
		{	*type = SOAP_TYPE_tt__SearchScopeExtension;
			return soap_in_tt__SearchScopeExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SearchScope"))
		{	*type = SOAP_TYPE_tt__SearchScope;
			return soap_in_tt__SearchScope(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingSummary"))
		{	*type = SOAP_TYPE_tt__RecordingSummary;
			return soap_in_tt__RecordingSummary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DateTimeRange"))
		{	*type = SOAP_TYPE_tt__DateTimeRange;
			return soap_in_tt__DateTimeRange(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SourceReference"))
		{	*type = SOAP_TYPE_tt__SourceReference;
			return soap_in_tt__SourceReference(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverStateInformation"))
		{	*type = SOAP_TYPE_tt__ReceiverStateInformation;
			return soap_in_tt__ReceiverStateInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverConfiguration"))
		{	*type = SOAP_TYPE_tt__ReceiverConfiguration;
			return soap_in_tt__ReceiverConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Receiver"))
		{	*type = SOAP_TYPE_tt__Receiver;
			return soap_in_tt__Receiver(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PaneOptionExtension"))
		{	*type = SOAP_TYPE_tt__PaneOptionExtension;
			return soap_in_tt__PaneOptionExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PaneLayoutOptions"))
		{	*type = SOAP_TYPE_tt__PaneLayoutOptions;
			return soap_in_tt__PaneLayoutOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LayoutOptionsExtension"))
		{	*type = SOAP_TYPE_tt__LayoutOptionsExtension;
			return soap_in_tt__LayoutOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LayoutOptions"))
		{	*type = SOAP_TYPE_tt__LayoutOptions;
			return soap_in_tt__LayoutOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CodingCapabilities"))
		{	*type = SOAP_TYPE_tt__CodingCapabilities;
			return soap_in_tt__CodingCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LayoutExtension"))
		{	*type = SOAP_TYPE_tt__LayoutExtension;
			return soap_in_tt__LayoutExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Layout"))
		{	*type = SOAP_TYPE_tt__Layout;
			return soap_in_tt__Layout(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PaneLayout"))
		{	*type = SOAP_TYPE_tt__PaneLayout;
			return soap_in_tt__PaneLayout(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PaneConfiguration"))
		{	*type = SOAP_TYPE_tt__PaneConfiguration;
			return soap_in_tt__PaneConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CellLayout"))
		{	*type = SOAP_TYPE_tt__CellLayout;
			return soap_in_tt__CellLayout(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MotionExpressionConfiguration"))
		{	*type = SOAP_TYPE_tt__MotionExpressionConfiguration;
			return soap_in_tt__MotionExpressionConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MotionExpression"))
		{	*type = SOAP_TYPE_tt__MotionExpression;
			return soap_in_tt__MotionExpression(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PolylineArrayConfiguration"))
		{	*type = SOAP_TYPE_tt__PolylineArrayConfiguration;
			return soap_in_tt__PolylineArrayConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PolylineArrayExtension"))
		{	*type = SOAP_TYPE_tt__PolylineArrayExtension;
			return soap_in_tt__PolylineArrayExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PolylineArray"))
		{	*type = SOAP_TYPE_tt__PolylineArray;
			return soap_in_tt__PolylineArray(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PolygonConfiguration"))
		{	*type = SOAP_TYPE_tt__PolygonConfiguration;
			return soap_in_tt__PolygonConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SupportedAnalyticsModulesExtension"))
		{	*type = SOAP_TYPE_tt__SupportedAnalyticsModulesExtension;
			return soap_in_tt__SupportedAnalyticsModulesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SupportedAnalyticsModules"))
		{	*type = SOAP_TYPE_tt__SupportedAnalyticsModules;
			return soap_in_tt__SupportedAnalyticsModules(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SupportedRulesExtension"))
		{	*type = SOAP_TYPE_tt__SupportedRulesExtension;
			return soap_in_tt__SupportedRulesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SupportedRules"))
		{	*type = SOAP_TYPE_tt__SupportedRules;
			return soap_in_tt__SupportedRules(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ConfigDescriptionExtension"))
		{	*type = SOAP_TYPE_tt__ConfigDescriptionExtension;
			return soap_in_tt__ConfigDescriptionExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ConfigDescription"))
		{	*type = SOAP_TYPE_tt__ConfigDescription;
			return soap_in_tt__ConfigDescription(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Config"))
		{	*type = SOAP_TYPE_tt__Config;
			return soap_in_tt__Config(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RuleEngineConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__RuleEngineConfigurationExtension;
			return soap_in_tt__RuleEngineConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RuleEngineConfiguration"))
		{	*type = SOAP_TYPE_tt__RuleEngineConfiguration;
			return soap_in_tt__RuleEngineConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsEngineConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension;
			return soap_in_tt__AnalyticsEngineConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsEngineConfiguration"))
		{	*type = SOAP_TYPE_tt__AnalyticsEngineConfiguration;
			return soap_in_tt__AnalyticsEngineConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Polyline"))
		{	*type = SOAP_TYPE_tt__Polyline;
			return soap_in_tt__Polyline(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemListDescriptionExtension"))
		{	*type = SOAP_TYPE_tt__ItemListDescriptionExtension;
			return soap_in_tt__ItemListDescriptionExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemListDescription"))
		{	*type = SOAP_TYPE_tt__ItemListDescription;
			return soap_in_tt__ItemListDescription(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MessageDescriptionExtension"))
		{	*type = SOAP_TYPE_tt__MessageDescriptionExtension;
			return soap_in_tt__MessageDescriptionExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MessageDescription"))
		{	*type = SOAP_TYPE_tt__MessageDescription;
			return soap_in_tt__MessageDescription(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemListExtension"))
		{	*type = SOAP_TYPE_tt__ItemListExtension;
			return soap_in_tt__ItemListExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemList"))
		{	*type = SOAP_TYPE_tt__ItemList;
			return soap_in_tt__ItemList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MessageExtension"))
		{	*type = SOAP_TYPE_tt__MessageExtension;
			return soap_in_tt__MessageExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NoiseReductionOptions"))
		{	*type = SOAP_TYPE_tt__NoiseReductionOptions;
			return soap_in_tt__NoiseReductionOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DefoggingOptions"))
		{	*type = SOAP_TYPE_tt__DefoggingOptions;
			return soap_in_tt__DefoggingOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ToneCompensationOptions"))
		{	*type = SOAP_TYPE_tt__ToneCompensationOptions;
			return soap_in_tt__ToneCompensationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusOptions20Extension"))
		{	*type = SOAP_TYPE_tt__FocusOptions20Extension;
			return soap_in_tt__FocusOptions20Extension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusOptions20"))
		{	*type = SOAP_TYPE_tt__FocusOptions20;
			return soap_in_tt__FocusOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalanceOptions20Extension"))
		{	*type = SOAP_TYPE_tt__WhiteBalanceOptions20Extension;
			return soap_in_tt__WhiteBalanceOptions20Extension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalanceOptions20"))
		{	*type = SOAP_TYPE_tt__WhiteBalanceOptions20;
			return soap_in_tt__WhiteBalanceOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusConfiguration20Extension"))
		{	*type = SOAP_TYPE_tt__FocusConfiguration20Extension;
			return soap_in_tt__FocusConfiguration20Extension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusConfiguration20"))
		{	*type = SOAP_TYPE_tt__FocusConfiguration20;
			return soap_in_tt__FocusConfiguration20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalance20Extension"))
		{	*type = SOAP_TYPE_tt__WhiteBalance20Extension;
			return soap_in_tt__WhiteBalance20Extension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalance20"))
		{	*type = SOAP_TYPE_tt__WhiteBalance20;
			return soap_in_tt__WhiteBalance20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelativeFocusOptions20"))
		{	*type = SOAP_TYPE_tt__RelativeFocusOptions20;
			return soap_in_tt__RelativeFocusOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MoveOptions20"))
		{	*type = SOAP_TYPE_tt__MoveOptions20;
			return soap_in_tt__MoveOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ExposureOptions20"))
		{	*type = SOAP_TYPE_tt__ExposureOptions20;
			return soap_in_tt__ExposureOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BacklightCompensationOptions20"))
		{	*type = SOAP_TYPE_tt__BacklightCompensationOptions20;
			return soap_in_tt__BacklightCompensationOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WideDynamicRangeOptions20"))
		{	*type = SOAP_TYPE_tt__WideDynamicRangeOptions20;
			return soap_in_tt__WideDynamicRangeOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterAutoAdjustmentOptionsExtension"))
		{	*type = SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension;
			return soap_in_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterAutoAdjustmentOptions"))
		{	*type = SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions;
			return soap_in_tt__IrCutFilterAutoAdjustmentOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImageStabilizationOptionsExtension"))
		{	*type = SOAP_TYPE_tt__ImageStabilizationOptionsExtension;
			return soap_in_tt__ImageStabilizationOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImageStabilizationOptions"))
		{	*type = SOAP_TYPE_tt__ImageStabilizationOptions;
			return soap_in_tt__ImageStabilizationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingOptions20Extension4"))
		{	*type = SOAP_TYPE_tt__ImagingOptions20Extension4;
			return soap_in_tt__ImagingOptions20Extension4(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingOptions20Extension3"))
		{	*type = SOAP_TYPE_tt__ImagingOptions20Extension3;
			return soap_in_tt__ImagingOptions20Extension3(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingOptions20Extension2"))
		{	*type = SOAP_TYPE_tt__ImagingOptions20Extension2;
			return soap_in_tt__ImagingOptions20Extension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingOptions20Extension"))
		{	*type = SOAP_TYPE_tt__ImagingOptions20Extension;
			return soap_in_tt__ImagingOptions20Extension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingOptions20"))
		{	*type = SOAP_TYPE_tt__ImagingOptions20;
			return soap_in_tt__ImagingOptions20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NoiseReduction"))
		{	*type = SOAP_TYPE_tt__NoiseReduction;
			return soap_in_tt__NoiseReduction(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DefoggingExtension"))
		{	*type = SOAP_TYPE_tt__DefoggingExtension;
			return soap_in_tt__DefoggingExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Defogging"))
		{	*type = SOAP_TYPE_tt__Defogging;
			return soap_in_tt__Defogging(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ToneCompensationExtension"))
		{	*type = SOAP_TYPE_tt__ToneCompensationExtension;
			return soap_in_tt__ToneCompensationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ToneCompensation"))
		{	*type = SOAP_TYPE_tt__ToneCompensation;
			return soap_in_tt__ToneCompensation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Exposure20"))
		{	*type = SOAP_TYPE_tt__Exposure20;
			return soap_in_tt__Exposure20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BacklightCompensation20"))
		{	*type = SOAP_TYPE_tt__BacklightCompensation20;
			return soap_in_tt__BacklightCompensation20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WideDynamicRange20"))
		{	*type = SOAP_TYPE_tt__WideDynamicRange20;
			return soap_in_tt__WideDynamicRange20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterAutoAdjustmentExtension"))
		{	*type = SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension;
			return soap_in_tt__IrCutFilterAutoAdjustmentExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterAutoAdjustment"))
		{	*type = SOAP_TYPE_tt__IrCutFilterAutoAdjustment;
			return soap_in_tt__IrCutFilterAutoAdjustment(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImageStabilizationExtension"))
		{	*type = SOAP_TYPE_tt__ImageStabilizationExtension;
			return soap_in_tt__ImageStabilizationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImageStabilization"))
		{	*type = SOAP_TYPE_tt__ImageStabilization;
			return soap_in_tt__ImageStabilization(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingSettingsExtension204"))
		{	*type = SOAP_TYPE_tt__ImagingSettingsExtension204;
			return soap_in_tt__ImagingSettingsExtension204(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingSettingsExtension203"))
		{	*type = SOAP_TYPE_tt__ImagingSettingsExtension203;
			return soap_in_tt__ImagingSettingsExtension203(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingSettingsExtension202"))
		{	*type = SOAP_TYPE_tt__ImagingSettingsExtension202;
			return soap_in_tt__ImagingSettingsExtension202(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingSettingsExtension20"))
		{	*type = SOAP_TYPE_tt__ImagingSettingsExtension20;
			return soap_in_tt__ImagingSettingsExtension20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingSettings20"))
		{	*type = SOAP_TYPE_tt__ImagingSettings20;
			return soap_in_tt__ImagingSettings20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusStatus20Extension"))
		{	*type = SOAP_TYPE_tt__FocusStatus20Extension;
			return soap_in_tt__FocusStatus20Extension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusStatus20"))
		{	*type = SOAP_TYPE_tt__FocusStatus20;
			return soap_in_tt__FocusStatus20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingStatus20Extension"))
		{	*type = SOAP_TYPE_tt__ImagingStatus20Extension;
			return soap_in_tt__ImagingStatus20Extension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingStatus20"))
		{	*type = SOAP_TYPE_tt__ImagingStatus20;
			return soap_in_tt__ImagingStatus20(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalance"))
		{	*type = SOAP_TYPE_tt__WhiteBalance;
			return soap_in_tt__WhiteBalance(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ContinuousFocusOptions"))
		{	*type = SOAP_TYPE_tt__ContinuousFocusOptions;
			return soap_in_tt__ContinuousFocusOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelativeFocusOptions"))
		{	*type = SOAP_TYPE_tt__RelativeFocusOptions;
			return soap_in_tt__RelativeFocusOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AbsoluteFocusOptions"))
		{	*type = SOAP_TYPE_tt__AbsoluteFocusOptions;
			return soap_in_tt__AbsoluteFocusOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MoveOptions"))
		{	*type = SOAP_TYPE_tt__MoveOptions;
			return soap_in_tt__MoveOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ContinuousFocus"))
		{	*type = SOAP_TYPE_tt__ContinuousFocus;
			return soap_in_tt__ContinuousFocus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelativeFocus"))
		{	*type = SOAP_TYPE_tt__RelativeFocus;
			return soap_in_tt__RelativeFocus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AbsoluteFocus"))
		{	*type = SOAP_TYPE_tt__AbsoluteFocus;
			return soap_in_tt__AbsoluteFocus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusMove"))
		{	*type = SOAP_TYPE_tt__FocusMove;
			return soap_in_tt__FocusMove(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalanceOptions"))
		{	*type = SOAP_TYPE_tt__WhiteBalanceOptions;
			return soap_in_tt__WhiteBalanceOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ExposureOptions"))
		{	*type = SOAP_TYPE_tt__ExposureOptions;
			return soap_in_tt__ExposureOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusOptions"))
		{	*type = SOAP_TYPE_tt__FocusOptions;
			return soap_in_tt__FocusOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BacklightCompensationOptions"))
		{	*type = SOAP_TYPE_tt__BacklightCompensationOptions;
			return soap_in_tt__BacklightCompensationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WideDynamicRangeOptions"))
		{	*type = SOAP_TYPE_tt__WideDynamicRangeOptions;
			return soap_in_tt__WideDynamicRangeOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingOptions"))
		{	*type = SOAP_TYPE_tt__ImagingOptions;
			return soap_in_tt__ImagingOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BacklightCompensation"))
		{	*type = SOAP_TYPE_tt__BacklightCompensation;
			return soap_in_tt__BacklightCompensation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WideDynamicRange"))
		{	*type = SOAP_TYPE_tt__WideDynamicRange;
			return soap_in_tt__WideDynamicRange(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Exposure"))
		{	*type = SOAP_TYPE_tt__Exposure;
			return soap_in_tt__Exposure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingSettingsExtension"))
		{	*type = SOAP_TYPE_tt__ImagingSettingsExtension;
			return soap_in_tt__ImagingSettingsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingSettings"))
		{	*type = SOAP_TYPE_tt__ImagingSettings;
			return soap_in_tt__ImagingSettings(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusConfiguration"))
		{	*type = SOAP_TYPE_tt__FocusConfiguration;
			return soap_in_tt__FocusConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FocusStatus"))
		{	*type = SOAP_TYPE_tt__FocusStatus;
			return soap_in_tt__FocusStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingStatus"))
		{	*type = SOAP_TYPE_tt__ImagingStatus;
			return soap_in_tt__ImagingStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourStartingConditionOptionsExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension;
			return soap_in_tt__PTZPresetTourStartingConditionOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourStartingConditionOptions"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions;
			return soap_in_tt__PTZPresetTourStartingConditionOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourPresetDetailOptionsExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension;
			return soap_in_tt__PTZPresetTourPresetDetailOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourPresetDetailOptions"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions;
			return soap_in_tt__PTZPresetTourPresetDetailOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourSpotOptions"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourSpotOptions;
			return soap_in_tt__PTZPresetTourSpotOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourOptions"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourOptions;
			return soap_in_tt__PTZPresetTourOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourStartingConditionExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension;
			return soap_in_tt__PTZPresetTourStartingConditionExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourStartingCondition"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourStartingCondition;
			return soap_in_tt__PTZPresetTourStartingCondition(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourStatusExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourStatusExtension;
			return soap_in_tt__PTZPresetTourStatusExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourStatus"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourStatus;
			return soap_in_tt__PTZPresetTourStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourTypeExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourTypeExtension;
			return soap_in_tt__PTZPresetTourTypeExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourPresetDetail"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourPresetDetail;
			return soap_in_tt__PTZPresetTourPresetDetail(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourSpotExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourSpotExtension;
			return soap_in_tt__PTZPresetTourSpotExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourSpot"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourSpot;
			return soap_in_tt__PTZPresetTourSpot(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourExtension;
			return soap_in_tt__PTZPresetTourExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PresetTour"))
		{	*type = SOAP_TYPE_tt__PresetTour;
			return soap_in_tt__PresetTour(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPreset"))
		{	*type = SOAP_TYPE_tt__PTZPreset;
			return soap_in_tt__PTZPreset(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZSpeed"))
		{	*type = SOAP_TYPE_tt__PTZSpeed;
			return soap_in_tt__PTZSpeed(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Space1DDescription"))
		{	*type = SOAP_TYPE_tt__Space1DDescription;
			return soap_in_tt__Space1DDescription(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Space2DDescription"))
		{	*type = SOAP_TYPE_tt__Space2DDescription;
			return soap_in_tt__Space2DDescription(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZSpacesExtension"))
		{	*type = SOAP_TYPE_tt__PTZSpacesExtension;
			return soap_in_tt__PTZSpacesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZSpaces"))
		{	*type = SOAP_TYPE_tt__PTZSpaces;
			return soap_in_tt__PTZSpaces(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ZoomLimits"))
		{	*type = SOAP_TYPE_tt__ZoomLimits;
			return soap_in_tt__ZoomLimits(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PanTiltLimits"))
		{	*type = SOAP_TYPE_tt__PanTiltLimits;
			return soap_in_tt__PanTiltLimits(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReverseOptionsExtension"))
		{	*type = SOAP_TYPE_tt__ReverseOptionsExtension;
			return soap_in_tt__ReverseOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReverseOptions"))
		{	*type = SOAP_TYPE_tt__ReverseOptions;
			return soap_in_tt__ReverseOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EFlipOptionsExtension"))
		{	*type = SOAP_TYPE_tt__EFlipOptionsExtension;
			return soap_in_tt__EFlipOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EFlipOptions"))
		{	*type = SOAP_TYPE_tt__EFlipOptions;
			return soap_in_tt__EFlipOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTControlDirectionOptionsExtension"))
		{	*type = SOAP_TYPE_tt__PTControlDirectionOptionsExtension;
			return soap_in_tt__PTControlDirectionOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTControlDirectionOptions"))
		{	*type = SOAP_TYPE_tt__PTControlDirectionOptions;
			return soap_in_tt__PTControlDirectionOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZConfigurationOptions2"))
		{	*type = SOAP_TYPE_tt__PTZConfigurationOptions2;
			return soap_in_tt__PTZConfigurationOptions2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__PTZConfigurationOptions;
			return soap_in_tt__PTZConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Reverse"))
		{	*type = SOAP_TYPE_tt__Reverse;
			return soap_in_tt__Reverse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EFlip"))
		{	*type = SOAP_TYPE_tt__EFlip;
			return soap_in_tt__EFlip(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTControlDirectionExtension"))
		{	*type = SOAP_TYPE_tt__PTControlDirectionExtension;
			return soap_in_tt__PTControlDirectionExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTControlDirection"))
		{	*type = SOAP_TYPE_tt__PTControlDirection;
			return soap_in_tt__PTControlDirection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZConfigurationExtension2"))
		{	*type = SOAP_TYPE_tt__PTZConfigurationExtension2;
			return soap_in_tt__PTZConfigurationExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__PTZConfigurationExtension;
			return soap_in_tt__PTZConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZConfiguration"))
		{	*type = SOAP_TYPE_tt__PTZConfiguration;
			return soap_in_tt__PTZConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourSupportedExtension"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourSupportedExtension;
			return soap_in_tt__PTZPresetTourSupportedExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourSupported"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourSupported;
			return soap_in_tt__PTZPresetTourSupported(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZNodeExtension2"))
		{	*type = SOAP_TYPE_tt__PTZNodeExtension2;
			return soap_in_tt__PTZNodeExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZNodeExtension"))
		{	*type = SOAP_TYPE_tt__PTZNodeExtension;
			return soap_in_tt__PTZNodeExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZNode"))
		{	*type = SOAP_TYPE_tt__PTZNode;
			return soap_in_tt__PTZNode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DigitalInput"))
		{	*type = SOAP_TYPE_tt__DigitalInput;
			return soap_in_tt__DigitalInput(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayOutput"))
		{	*type = SOAP_TYPE_tt__RelayOutput;
			return soap_in_tt__RelayOutput(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayOutputSettings"))
		{	*type = SOAP_TYPE_tt__RelayOutputSettings;
			return soap_in_tt__RelayOutputSettings(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:GenericEapPwdConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__GenericEapPwdConfigurationExtension;
			return soap_in_tt__GenericEapPwdConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TLSConfiguration"))
		{	*type = SOAP_TYPE_tt__TLSConfiguration;
			return soap_in_tt__TLSConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EapMethodExtension"))
		{	*type = SOAP_TYPE_tt__EapMethodExtension;
			return soap_in_tt__EapMethodExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EAPMethodConfiguration"))
		{	*type = SOAP_TYPE_tt__EAPMethodConfiguration;
			return soap_in_tt__EAPMethodConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot1XConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__Dot1XConfigurationExtension;
			return soap_in_tt__Dot1XConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot1XConfiguration"))
		{	*type = SOAP_TYPE_tt__Dot1XConfiguration;
			return soap_in_tt__Dot1XConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CertificateInformationExtension"))
		{	*type = SOAP_TYPE_tt__CertificateInformationExtension;
			return soap_in_tt__CertificateInformationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CertificateUsage"))
		{	*type = SOAP_TYPE_tt__CertificateUsage;
			return soap_in_tt__CertificateUsage(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CertificateInformation"))
		{	*type = SOAP_TYPE_tt__CertificateInformation;
			return soap_in_tt__CertificateInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CertificateWithPrivateKey"))
		{	*type = SOAP_TYPE_tt__CertificateWithPrivateKey;
			return soap_in_tt__CertificateWithPrivateKey(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CertificateStatus"))
		{	*type = SOAP_TYPE_tt__CertificateStatus;
			return soap_in_tt__CertificateStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Certificate"))
		{	*type = SOAP_TYPE_tt__Certificate;
			return soap_in_tt__Certificate(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CertificateGenerationParametersExtension"))
		{	*type = SOAP_TYPE_tt__CertificateGenerationParametersExtension;
			return soap_in_tt__CertificateGenerationParametersExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CertificateGenerationParameters"))
		{	*type = SOAP_TYPE_tt__CertificateGenerationParameters;
			return soap_in_tt__CertificateGenerationParameters(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:UserExtension"))
		{	*type = SOAP_TYPE_tt__UserExtension;
			return soap_in_tt__UserExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:User"))
		{	*type = SOAP_TYPE_tt__User;
			return soap_in_tt__User(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RemoteUser"))
		{	*type = SOAP_TYPE_tt__RemoteUser;
			return soap_in_tt__RemoteUser(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TimeZone"))
		{	*type = SOAP_TYPE_tt__TimeZone;
			return soap_in_tt__TimeZone(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Time"))
		{	*type = SOAP_TYPE_tt__Time;
			return soap_in_tt__Time(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Date"))
		{	*type = SOAP_TYPE_tt__Date;
			return soap_in_tt__Date(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DateTime"))
		{	*type = SOAP_TYPE_tt__DateTime;
			return soap_in_tt__DateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemDateTimeExtension"))
		{	*type = SOAP_TYPE_tt__SystemDateTimeExtension;
			return soap_in_tt__SystemDateTimeExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemDateTime"))
		{	*type = SOAP_TYPE_tt__SystemDateTime;
			return soap_in_tt__SystemDateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemLogUri"))
		{	*type = SOAP_TYPE_tt__SystemLogUri;
			return soap_in_tt__SystemLogUri(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemLogUriList"))
		{	*type = SOAP_TYPE_tt__SystemLogUriList;
			return soap_in_tt__SystemLogUriList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BackupFile"))
		{	*type = SOAP_TYPE_tt__BackupFile;
			return soap_in_tt__BackupFile(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AttachmentData"))
		{	*type = SOAP_TYPE_tt__AttachmentData;
			return soap_in_tt__AttachmentData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BinaryData"))
		{	*type = SOAP_TYPE_tt__BinaryData;
			return soap_in_tt__BinaryData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SupportInformation"))
		{	*type = SOAP_TYPE_tt__SupportInformation;
			return soap_in_tt__SupportInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemLog"))
		{	*type = SOAP_TYPE_tt__SystemLog;
			return soap_in_tt__SystemLog(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsDeviceExtension"))
		{	*type = SOAP_TYPE_tt__AnalyticsDeviceExtension;
			return soap_in_tt__AnalyticsDeviceExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsDeviceCapabilities"))
		{	*type = SOAP_TYPE_tt__AnalyticsDeviceCapabilities;
			return soap_in_tt__AnalyticsDeviceCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverCapabilities"))
		{	*type = SOAP_TYPE_tt__ReceiverCapabilities;
			return soap_in_tt__ReceiverCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReplayCapabilities"))
		{	*type = SOAP_TYPE_tt__ReplayCapabilities;
			return soap_in_tt__ReplayCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SearchCapabilities"))
		{	*type = SOAP_TYPE_tt__SearchCapabilities;
			return soap_in_tt__SearchCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingCapabilities"))
		{	*type = SOAP_TYPE_tt__RecordingCapabilities;
			return soap_in_tt__RecordingCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DisplayCapabilities"))
		{	*type = SOAP_TYPE_tt__DisplayCapabilities;
			return soap_in_tt__DisplayCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DeviceIOCapabilities"))
		{	*type = SOAP_TYPE_tt__DeviceIOCapabilities;
			return soap_in_tt__DeviceIOCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZCapabilities"))
		{	*type = SOAP_TYPE_tt__PTZCapabilities;
			return soap_in_tt__PTZCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImagingCapabilities"))
		{	*type = SOAP_TYPE_tt__ImagingCapabilities;
			return soap_in_tt__ImagingCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OnvifVersion"))
		{	*type = SOAP_TYPE_tt__OnvifVersion;
			return soap_in_tt__OnvifVersion(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemCapabilitiesExtension2"))
		{	*type = SOAP_TYPE_tt__SystemCapabilitiesExtension2;
			return soap_in_tt__SystemCapabilitiesExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemCapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__SystemCapabilitiesExtension;
			return soap_in_tt__SystemCapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemCapabilities"))
		{	*type = SOAP_TYPE_tt__SystemCapabilities;
			return soap_in_tt__SystemCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SecurityCapabilitiesExtension2"))
		{	*type = SOAP_TYPE_tt__SecurityCapabilitiesExtension2;
			return soap_in_tt__SecurityCapabilitiesExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SecurityCapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__SecurityCapabilitiesExtension;
			return soap_in_tt__SecurityCapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SecurityCapabilities"))
		{	*type = SOAP_TYPE_tt__SecurityCapabilities;
			return soap_in_tt__SecurityCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkCapabilitiesExtension2"))
		{	*type = SOAP_TYPE_tt__NetworkCapabilitiesExtension2;
			return soap_in_tt__NetworkCapabilitiesExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkCapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__NetworkCapabilitiesExtension;
			return soap_in_tt__NetworkCapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkCapabilities"))
		{	*type = SOAP_TYPE_tt__NetworkCapabilities;
			return soap_in_tt__NetworkCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ProfileCapabilities"))
		{	*type = SOAP_TYPE_tt__ProfileCapabilities;
			return soap_in_tt__ProfileCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RealTimeStreamingCapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension;
			return soap_in_tt__RealTimeStreamingCapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RealTimeStreamingCapabilities"))
		{	*type = SOAP_TYPE_tt__RealTimeStreamingCapabilities;
			return soap_in_tt__RealTimeStreamingCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MediaCapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__MediaCapabilitiesExtension;
			return soap_in_tt__MediaCapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MediaCapabilities"))
		{	*type = SOAP_TYPE_tt__MediaCapabilities;
			return soap_in_tt__MediaCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IOCapabilitiesExtension2"))
		{	*type = SOAP_TYPE_tt__IOCapabilitiesExtension2;
			return soap_in_tt__IOCapabilitiesExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IOCapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__IOCapabilitiesExtension;
			return soap_in_tt__IOCapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IOCapabilities"))
		{	*type = SOAP_TYPE_tt__IOCapabilities;
			return soap_in_tt__IOCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EventCapabilities"))
		{	*type = SOAP_TYPE_tt__EventCapabilities;
			return soap_in_tt__EventCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DeviceCapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__DeviceCapabilitiesExtension;
			return soap_in_tt__DeviceCapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DeviceCapabilities"))
		{	*type = SOAP_TYPE_tt__DeviceCapabilities;
			return soap_in_tt__DeviceCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnalyticsCapabilities"))
		{	*type = SOAP_TYPE_tt__AnalyticsCapabilities;
			return soap_in_tt__AnalyticsCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CapabilitiesExtension2"))
		{	*type = SOAP_TYPE_tt__CapabilitiesExtension2;
			return soap_in_tt__CapabilitiesExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CapabilitiesExtension"))
		{	*type = SOAP_TYPE_tt__CapabilitiesExtension;
			return soap_in_tt__CapabilitiesExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Capabilities"))
		{	*type = SOAP_TYPE_tt__Capabilities;
			return soap_in_tt__Capabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11AvailableNetworksExtension"))
		{	*type = SOAP_TYPE_tt__Dot11AvailableNetworksExtension;
			return soap_in_tt__Dot11AvailableNetworksExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11AvailableNetworks"))
		{	*type = SOAP_TYPE_tt__Dot11AvailableNetworks;
			return soap_in_tt__Dot11AvailableNetworks(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11Status"))
		{	*type = SOAP_TYPE_tt__Dot11Status;
			return soap_in_tt__Dot11Status(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11Capabilities"))
		{	*type = SOAP_TYPE_tt__Dot11Capabilities;
			return soap_in_tt__Dot11Capabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceSetConfigurationExtension2"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2;
			return soap_in_tt__NetworkInterfaceSetConfigurationExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11PSKSetExtension"))
		{	*type = SOAP_TYPE_tt__Dot11PSKSetExtension;
			return soap_in_tt__Dot11PSKSetExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11PSKSet"))
		{	*type = SOAP_TYPE_tt__Dot11PSKSet;
			return soap_in_tt__Dot11PSKSet(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SecurityConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__Dot11SecurityConfigurationExtension;
			return soap_in_tt__Dot11SecurityConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SecurityConfiguration"))
		{	*type = SOAP_TYPE_tt__Dot11SecurityConfiguration;
			return soap_in_tt__Dot11SecurityConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11Configuration"))
		{	*type = SOAP_TYPE_tt__Dot11Configuration;
			return soap_in_tt__Dot11Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPAddressFilterExtension"))
		{	*type = SOAP_TYPE_tt__IPAddressFilterExtension;
			return soap_in_tt__IPAddressFilterExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPAddressFilter"))
		{	*type = SOAP_TYPE_tt__IPAddressFilter;
			return soap_in_tt__IPAddressFilter(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkZeroConfigurationExtension2"))
		{	*type = SOAP_TYPE_tt__NetworkZeroConfigurationExtension2;
			return soap_in_tt__NetworkZeroConfigurationExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkZeroConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__NetworkZeroConfigurationExtension;
			return soap_in_tt__NetworkZeroConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkZeroConfiguration"))
		{	*type = SOAP_TYPE_tt__NetworkZeroConfiguration;
			return soap_in_tt__NetworkZeroConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkGateway"))
		{	*type = SOAP_TYPE_tt__NetworkGateway;
			return soap_in_tt__NetworkGateway(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv4NetworkInterfaceSetConfiguration"))
		{	*type = SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration;
			return soap_in_tt__IPv4NetworkInterfaceSetConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6NetworkInterfaceSetConfiguration"))
		{	*type = SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration;
			return soap_in_tt__IPv6NetworkInterfaceSetConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceSetConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension;
			return soap_in_tt__NetworkInterfaceSetConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceSetConfiguration"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceSetConfiguration;
			return soap_in_tt__NetworkInterfaceSetConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DynamicDNSInformationExtension"))
		{	*type = SOAP_TYPE_tt__DynamicDNSInformationExtension;
			return soap_in_tt__DynamicDNSInformationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DynamicDNSInformation"))
		{	*type = SOAP_TYPE_tt__DynamicDNSInformation;
			return soap_in_tt__DynamicDNSInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NTPInformationExtension"))
		{	*type = SOAP_TYPE_tt__NTPInformationExtension;
			return soap_in_tt__NTPInformationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NTPInformation"))
		{	*type = SOAP_TYPE_tt__NTPInformation;
			return soap_in_tt__NTPInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DNSInformationExtension"))
		{	*type = SOAP_TYPE_tt__DNSInformationExtension;
			return soap_in_tt__DNSInformationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DNSInformation"))
		{	*type = SOAP_TYPE_tt__DNSInformation;
			return soap_in_tt__DNSInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:HostnameInformationExtension"))
		{	*type = SOAP_TYPE_tt__HostnameInformationExtension;
			return soap_in_tt__HostnameInformationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:HostnameInformation"))
		{	*type = SOAP_TYPE_tt__HostnameInformation;
			return soap_in_tt__HostnameInformation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PrefixedIPv6Address"))
		{	*type = SOAP_TYPE_tt__PrefixedIPv6Address;
			return soap_in_tt__PrefixedIPv6Address(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PrefixedIPv4Address"))
		{	*type = SOAP_TYPE_tt__PrefixedIPv4Address;
			return soap_in_tt__PrefixedIPv4Address(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPAddress"))
		{	*type = SOAP_TYPE_tt__IPAddress;
			return soap_in_tt__IPAddress(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkHostExtension"))
		{	*type = SOAP_TYPE_tt__NetworkHostExtension;
			return soap_in_tt__NetworkHostExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkHost"))
		{	*type = SOAP_TYPE_tt__NetworkHost;
			return soap_in_tt__NetworkHost(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkProtocolExtension"))
		{	*type = SOAP_TYPE_tt__NetworkProtocolExtension;
			return soap_in_tt__NetworkProtocolExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkProtocol"))
		{	*type = SOAP_TYPE_tt__NetworkProtocol;
			return soap_in_tt__NetworkProtocol(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6ConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__IPv6ConfigurationExtension;
			return soap_in_tt__IPv6ConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6Configuration"))
		{	*type = SOAP_TYPE_tt__IPv6Configuration;
			return soap_in_tt__IPv6Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv4Configuration"))
		{	*type = SOAP_TYPE_tt__IPv4Configuration;
			return soap_in_tt__IPv4Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv4NetworkInterface"))
		{	*type = SOAP_TYPE_tt__IPv4NetworkInterface;
			return soap_in_tt__IPv4NetworkInterface(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6NetworkInterface"))
		{	*type = SOAP_TYPE_tt__IPv6NetworkInterface;
			return soap_in_tt__IPv6NetworkInterface(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceInfo"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceInfo;
			return soap_in_tt__NetworkInterfaceInfo(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceConnectionSetting"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceConnectionSetting;
			return soap_in_tt__NetworkInterfaceConnectionSetting(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceLink"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceLink;
			return soap_in_tt__NetworkInterfaceLink(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceExtension2"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceExtension2;
			return soap_in_tt__NetworkInterfaceExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot3Configuration"))
		{	*type = SOAP_TYPE_tt__Dot3Configuration;
			return soap_in_tt__Dot3Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterfaceExtension"))
		{	*type = SOAP_TYPE_tt__NetworkInterfaceExtension;
			return soap_in_tt__NetworkInterfaceExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkInterface"))
		{	*type = SOAP_TYPE_tt__NetworkInterface;
			return soap_in_tt__NetworkInterface(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Scope"))
		{	*type = SOAP_TYPE_tt__Scope;
			return soap_in_tt__Scope(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MediaUri"))
		{	*type = SOAP_TYPE_tt__MediaUri;
			return soap_in_tt__MediaUri(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Transport"))
		{	*type = SOAP_TYPE_tt__Transport;
			return soap_in_tt__Transport(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:StreamSetup"))
		{	*type = SOAP_TYPE_tt__StreamSetup;
			return soap_in_tt__StreamSetup(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MulticastConfiguration"))
		{	*type = SOAP_TYPE_tt__MulticastConfiguration;
			return soap_in_tt__MulticastConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioDecoderConfigurationOptionsExtension"))
		{	*type = SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension;
			return soap_in_tt__AudioDecoderConfigurationOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:G726DecOptions"))
		{	*type = SOAP_TYPE_tt__G726DecOptions;
			return soap_in_tt__G726DecOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AACDecOptions"))
		{	*type = SOAP_TYPE_tt__AACDecOptions;
			return soap_in_tt__AACDecOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:G711DecOptions"))
		{	*type = SOAP_TYPE_tt__G711DecOptions;
			return soap_in_tt__G711DecOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioDecoderConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__AudioDecoderConfigurationOptions;
			return soap_in_tt__AudioDecoderConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioDecoderConfiguration"))
		{	*type = SOAP_TYPE_tt__AudioDecoderConfiguration;
			return soap_in_tt__AudioDecoderConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioOutputConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__AudioOutputConfigurationOptions;
			return soap_in_tt__AudioOutputConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioOutputConfiguration"))
		{	*type = SOAP_TYPE_tt__AudioOutputConfiguration;
			return soap_in_tt__AudioOutputConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioOutput"))
		{	*type = SOAP_TYPE_tt__AudioOutput;
			return soap_in_tt__AudioOutput(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoDecoderConfigurationOptionsExtension"))
		{	*type = SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension;
			return soap_in_tt__VideoDecoderConfigurationOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Mpeg4DecOptions"))
		{	*type = SOAP_TYPE_tt__Mpeg4DecOptions;
			return soap_in_tt__Mpeg4DecOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:JpegDecOptions"))
		{	*type = SOAP_TYPE_tt__JpegDecOptions;
			return soap_in_tt__JpegDecOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:H264DecOptions"))
		{	*type = SOAP_TYPE_tt__H264DecOptions;
			return soap_in_tt__H264DecOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoDecoderConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__VideoDecoderConfigurationOptions;
			return soap_in_tt__VideoDecoderConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoOutputConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__VideoOutputConfigurationOptions;
			return soap_in_tt__VideoOutputConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoOutputConfiguration"))
		{	*type = SOAP_TYPE_tt__VideoOutputConfiguration;
			return soap_in_tt__VideoOutputConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoOutputExtension"))
		{	*type = SOAP_TYPE_tt__VideoOutputExtension;
			return soap_in_tt__VideoOutputExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoOutput"))
		{	*type = SOAP_TYPE_tt__VideoOutput;
			return soap_in_tt__VideoOutput(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZStatusFilterOptionsExtension"))
		{	*type = SOAP_TYPE_tt__PTZStatusFilterOptionsExtension;
			return soap_in_tt__PTZStatusFilterOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZStatusFilterOptions"))
		{	*type = SOAP_TYPE_tt__PTZStatusFilterOptions;
			return soap_in_tt__PTZStatusFilterOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataConfigurationOptionsExtension2"))
		{	*type = SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2;
			return soap_in_tt__MetadataConfigurationOptionsExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataConfigurationOptionsExtension"))
		{	*type = SOAP_TYPE_tt__MetadataConfigurationOptionsExtension;
			return soap_in_tt__MetadataConfigurationOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__MetadataConfigurationOptions;
			return soap_in_tt__MetadataConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EventSubscription"))
		{	*type = SOAP_TYPE_tt__EventSubscription;
			return soap_in_tt__EventSubscription(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZFilter"))
		{	*type = SOAP_TYPE_tt__PTZFilter;
			return soap_in_tt__PTZFilter(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__MetadataConfigurationExtension;
			return soap_in_tt__MetadataConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataConfiguration"))
		{	*type = SOAP_TYPE_tt__MetadataConfiguration;
			return soap_in_tt__MetadataConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoAnalyticsConfiguration"))
		{	*type = SOAP_TYPE_tt__VideoAnalyticsConfiguration;
			return soap_in_tt__VideoAnalyticsConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoder2ConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions;
			return soap_in_tt__AudioEncoder2ConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoder2Configuration"))
		{	*type = SOAP_TYPE_tt__AudioEncoder2Configuration;
			return soap_in_tt__AudioEncoder2Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoderConfigurationOption"))
		{	*type = SOAP_TYPE_tt__AudioEncoderConfigurationOption;
			return soap_in_tt__AudioEncoderConfigurationOption(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoderConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__AudioEncoderConfigurationOptions;
			return soap_in_tt__AudioEncoderConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoderConfiguration"))
		{	*type = SOAP_TYPE_tt__AudioEncoderConfiguration;
			return soap_in_tt__AudioEncoderConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioSourceOptionsExtension"))
		{	*type = SOAP_TYPE_tt__AudioSourceOptionsExtension;
			return soap_in_tt__AudioSourceOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioSourceConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__AudioSourceConfigurationOptions;
			return soap_in_tt__AudioSourceConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioSourceConfiguration"))
		{	*type = SOAP_TYPE_tt__AudioSourceConfiguration;
			return soap_in_tt__AudioSourceConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoder2ConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions;
			return soap_in_tt__VideoEncoder2ConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoRateControl2"))
		{	*type = SOAP_TYPE_tt__VideoRateControl2;
			return soap_in_tt__VideoRateControl2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoResolution2"))
		{	*type = SOAP_TYPE_tt__VideoResolution2;
			return soap_in_tt__VideoResolution2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoder2Configuration"))
		{	*type = SOAP_TYPE_tt__VideoEncoder2Configuration;
			return soap_in_tt__VideoEncoder2Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:H264Options2"))
		{	*type = SOAP_TYPE_tt__H264Options2;
			return soap_in_tt__H264Options2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:H264Options"))
		{	*type = SOAP_TYPE_tt__H264Options;
			return soap_in_tt__H264Options(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Mpeg4Options2"))
		{	*type = SOAP_TYPE_tt__Mpeg4Options2;
			return soap_in_tt__Mpeg4Options2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Mpeg4Options"))
		{	*type = SOAP_TYPE_tt__Mpeg4Options;
			return soap_in_tt__Mpeg4Options(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:JpegOptions2"))
		{	*type = SOAP_TYPE_tt__JpegOptions2;
			return soap_in_tt__JpegOptions2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:JpegOptions"))
		{	*type = SOAP_TYPE_tt__JpegOptions;
			return soap_in_tt__JpegOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoderOptionsExtension2"))
		{	*type = SOAP_TYPE_tt__VideoEncoderOptionsExtension2;
			return soap_in_tt__VideoEncoderOptionsExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoderOptionsExtension"))
		{	*type = SOAP_TYPE_tt__VideoEncoderOptionsExtension;
			return soap_in_tt__VideoEncoderOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoderConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__VideoEncoderConfigurationOptions;
			return soap_in_tt__VideoEncoderConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:H264Configuration"))
		{	*type = SOAP_TYPE_tt__H264Configuration;
			return soap_in_tt__H264Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Mpeg4Configuration"))
		{	*type = SOAP_TYPE_tt__Mpeg4Configuration;
			return soap_in_tt__Mpeg4Configuration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoRateControl"))
		{	*type = SOAP_TYPE_tt__VideoRateControl;
			return soap_in_tt__VideoRateControl(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoResolution"))
		{	*type = SOAP_TYPE_tt__VideoResolution;
			return soap_in_tt__VideoResolution(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoderConfiguration"))
		{	*type = SOAP_TYPE_tt__VideoEncoderConfiguration;
			return soap_in_tt__VideoEncoderConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SceneOrientation"))
		{	*type = SOAP_TYPE_tt__SceneOrientation;
			return soap_in_tt__SceneOrientation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RotateOptionsExtension"))
		{	*type = SOAP_TYPE_tt__RotateOptionsExtension;
			return soap_in_tt__RotateOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RotateOptions"))
		{	*type = SOAP_TYPE_tt__RotateOptions;
			return soap_in_tt__RotateOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceConfigurationOptionsExtension2"))
		{	*type = SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2;
			return soap_in_tt__VideoSourceConfigurationOptionsExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceConfigurationOptionsExtension"))
		{	*type = SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension;
			return soap_in_tt__VideoSourceConfigurationOptionsExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceConfigurationOptions"))
		{	*type = SOAP_TYPE_tt__VideoSourceConfigurationOptions;
			return soap_in_tt__VideoSourceConfigurationOptions(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LensDescription"))
		{	*type = SOAP_TYPE_tt__LensDescription;
			return soap_in_tt__LensDescription(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LensOffset"))
		{	*type = SOAP_TYPE_tt__LensOffset;
			return soap_in_tt__LensOffset(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:LensProjection"))
		{	*type = SOAP_TYPE_tt__LensProjection;
			return soap_in_tt__LensProjection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RotateExtension"))
		{	*type = SOAP_TYPE_tt__RotateExtension;
			return soap_in_tt__RotateExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Rotate"))
		{	*type = SOAP_TYPE_tt__Rotate;
			return soap_in_tt__Rotate(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceConfigurationExtension2"))
		{	*type = SOAP_TYPE_tt__VideoSourceConfigurationExtension2;
			return soap_in_tt__VideoSourceConfigurationExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceConfigurationExtension"))
		{	*type = SOAP_TYPE_tt__VideoSourceConfigurationExtension;
			return soap_in_tt__VideoSourceConfigurationExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceConfiguration"))
		{	*type = SOAP_TYPE_tt__VideoSourceConfiguration;
			return soap_in_tt__VideoSourceConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ConfigurationEntity"))
		{	*type = SOAP_TYPE_tt__ConfigurationEntity;
			return soap_in_tt__ConfigurationEntity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ProfileExtension2"))
		{	*type = SOAP_TYPE_tt__ProfileExtension2;
			return soap_in_tt__ProfileExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ProfileExtension"))
		{	*type = SOAP_TYPE_tt__ProfileExtension;
			return soap_in_tt__ProfileExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Profile"))
		{	*type = SOAP_TYPE_tt__Profile;
			return soap_in_tt__Profile(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioSource"))
		{	*type = SOAP_TYPE_tt__AudioSource;
			return soap_in_tt__AudioSource(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceExtension2"))
		{	*type = SOAP_TYPE_tt__VideoSourceExtension2;
			return soap_in_tt__VideoSourceExtension2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceExtension"))
		{	*type = SOAP_TYPE_tt__VideoSourceExtension;
			return soap_in_tt__VideoSourceExtension(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSource"))
		{	*type = SOAP_TYPE_tt__VideoSource;
			return soap_in_tt__VideoSource(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AnyHolder"))
		{	*type = SOAP_TYPE_tt__AnyHolder;
			return soap_in_tt__AnyHolder(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FloatList"))
		{	*type = SOAP_TYPE_tt__FloatList;
			return soap_in_tt__FloatList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IntList"))
		{	*type = SOAP_TYPE_tt__IntList;
			return soap_in_tt__IntList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DurationRange"))
		{	*type = SOAP_TYPE_tt__DurationRange;
			return soap_in_tt__DurationRange(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FloatRange"))
		{	*type = SOAP_TYPE_tt__FloatRange;
			return soap_in_tt__FloatRange(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IntRange"))
		{	*type = SOAP_TYPE_tt__IntRange;
			return soap_in_tt__IntRange(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IntRectangleRange"))
		{	*type = SOAP_TYPE_tt__IntRectangleRange;
			return soap_in_tt__IntRectangleRange(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IntRectangle"))
		{	*type = SOAP_TYPE_tt__IntRectangle;
			return soap_in_tt__IntRectangle(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DeviceEntity"))
		{	*type = SOAP_TYPE_tt__DeviceEntity;
			return soap_in_tt__DeviceEntity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StorageConfiguration"))
		{	*type = SOAP_TYPE_tds__StorageConfiguration;
			return soap_in_tds__StorageConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StorageConfigurationData"))
		{	*type = SOAP_TYPE_tds__StorageConfigurationData;
			return soap_in_tds__StorageConfigurationData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:UserCredential"))
		{	*type = SOAP_TYPE_tds__UserCredential;
			return soap_in_tds__UserCredential(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:MiscCapabilities"))
		{	*type = SOAP_TYPE_tds__MiscCapabilities;
			return soap_in_tds__MiscCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SystemCapabilities"))
		{	*type = SOAP_TYPE_tds__SystemCapabilities;
			return soap_in_tds__SystemCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SecurityCapabilities"))
		{	*type = SOAP_TYPE_tds__SecurityCapabilities;
			return soap_in_tds__SecurityCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:NetworkCapabilities"))
		{	*type = SOAP_TYPE_tds__NetworkCapabilities;
			return soap_in_tds__NetworkCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeviceServiceCapabilities"))
		{	*type = SOAP_TYPE_tds__DeviceServiceCapabilities;
			return soap_in_tds__DeviceServiceCapabilities(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:Service"))
		{	*type = SOAP_TYPE_tds__Service;
			return soap_in_tds__Service(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt_;
			return soap_in_xsd__unsignedInt_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:token"))
		{	*type = SOAP_TYPE_xsd__token__;
			return soap_in_xsd__token__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:token"))
		{	*type = SOAP_TYPE_xsd__token;
			return soap_in_xsd__token(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string_;
			return soap_in_xsd__string_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:nonNegativeInteger"))
		{	*type = SOAP_TYPE_xsd__nonNegativeInteger__;
			return soap_in_xsd__nonNegativeInteger__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:nonNegativeInteger"))
		{	*type = SOAP_TYPE_xsd__nonNegativeInteger;
			return soap_in_xsd__nonNegativeInteger(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer__;
			return soap_in_xsd__integer__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int_;
			return soap_in_xsd__int_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:hexBinary"))
		{	*type = SOAP_TYPE_xsd__hexBinary__;
			return soap_in_xsd__hexBinary__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float_;
			return soap_in_xsd__float_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration__;
			return soap_in_xsd__duration__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double_;
			return soap_in_xsd__double_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime__;
			return soap_in_xsd__dateTime__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean_;
			return soap_in_xsd__boolean_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary__;
			return soap_in_xsd__base64Binary__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI__;
			return soap_in_xsd__anyURI__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anySimpleType"))
		{	*type = SOAP_TYPE_xsd__anySimpleType__;
			return soap_in_xsd__anySimpleType__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anySimpleType"))
		{	*type = SOAP_TYPE_xsd__anySimpleType;
			return soap_in_xsd__anySimpleType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName__;
			return soap_in_xsd__QName__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:NCName"))
		{	*type = SOAP_TYPE_xsd__NCName__;
			return soap_in_xsd__NCName__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:NCName"))
		{	*type = SOAP_TYPE_xsd__NCName;
			return soap_in_xsd__NCName(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREFS"))
		{	*type = SOAP_TYPE_xsd__IDREFS__;
			return soap_in_xsd__IDREFS__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREFS"))
		{	*type = SOAP_TYPE_xsd__IDREFS;
			return soap_in_xsd__IDREFS(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID__;
			return soap_in_xsd__ID__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID;
			return soap_in_xsd__ID(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENV:Envelope"))
		{	*type = SOAP_TYPE_SOAP_ENV__Envelope;
			return soap_in_SOAP_ENV__Envelope(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:hexBinary"))
		{	*type = SOAP_TYPE_xsd__hexBinary;
			return soap_in_xsd__hexBinary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration;
			return soap_in_xsd__duration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IANA-IfTypes"))
		{	*type = SOAP_TYPE_tt__IANA_IfTypes;
			return soap_in_tt__IANA_IfTypes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_ULONG64;
			return soap_in_ULONG64(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:DecisionType"))
		{	*type = SOAP_TYPE_saml2__DecisionType;
			return soap_in_saml2__DecisionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:DecisionType"))
		{	*type = SOAP_TYPE_saml1__DecisionType;
			return soap_in_saml1__DecisionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:FaultCodeType"))
		{	*type = SOAP_TYPE_wsc__FaultCodeType;
			return soap_in_wsc__FaultCodeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:FaultcodeEnum"))
		{	*type = SOAP_TYPE_wsse__FaultcodeEnum;
			return soap_in_wsse__FaultcodeEnum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsu:tTimestampFault"))
		{	*type = SOAP_TYPE_wsu__tTimestampFault;
			return soap_in_wsu__tTimestampFault(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:IsReferenceParameter"))
		{	*type = SOAP_TYPE__wsa5__IsReferenceParameter;
			return soap_in__wsa5__IsReferenceParameter(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:FaultCodesType"))
		{	*type = SOAP_TYPE_wsa5__FaultCodesType;
			return soap_in_wsa5__FaultCodesType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:RelationshipType"))
		{	*type = SOAP_TYPE_wsa5__RelationshipType;
			return soap_in_wsa5__RelationshipType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:FaultSubcodeValues"))
		{	*type = SOAP_TYPE_wsa__FaultSubcodeValues;
			return soap_in_wsa__FaultSubcodeValues(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:RelationshipTypeValues"))
		{	*type = SOAP_TYPE_wsa__RelationshipTypeValues;
			return soap_in_wsa__RelationshipTypeValues(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:FaultCodeType"))
		{	*type = SOAP_TYPE_wsd__FaultCodeType;
			return soap_in_wsd__FaultCodeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:RelationshipType"))
		{	*type = SOAP_TYPE_wsd__RelationshipType;
			return soap_in_wsd__RelationshipType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Entity"))
		{	*type = SOAP_TYPE_tt__Entity;
			return soap_in_tt__Entity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MoveStatus"))
		{	*type = SOAP_TYPE_tt__MoveStatus;
			return soap_in_tt__MoveStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:OSDType"))
		{	*type = SOAP_TYPE_tt__OSDType;
			return soap_in_tt__OSDType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ModeOfOperation"))
		{	*type = SOAP_TYPE_tt__ModeOfOperation;
			return soap_in_tt__ModeOfOperation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TrackType"))
		{	*type = SOAP_TYPE_tt__TrackType;
			return soap_in_tt__TrackType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RecordingStatus"))
		{	*type = SOAP_TYPE_tt__RecordingStatus;
			return soap_in_tt__RecordingStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SearchState"))
		{	*type = SOAP_TYPE_tt__SearchState;
			return soap_in_tt__SearchState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverState"))
		{	*type = SOAP_TYPE_tt__ReceiverState;
			return soap_in_tt__ReceiverState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReceiverMode"))
		{	*type = SOAP_TYPE_tt__ReceiverMode;
			return soap_in_tt__ReceiverMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Direction"))
		{	*type = SOAP_TYPE_tt__Direction;
			return soap_in_tt__Direction(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PropertyOperation"))
		{	*type = SOAP_TYPE_tt__PropertyOperation;
			return soap_in_tt__PropertyOperation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DefoggingMode"))
		{	*type = SOAP_TYPE_tt__DefoggingMode;
			return soap_in_tt__DefoggingMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ToneCompensationMode"))
		{	*type = SOAP_TYPE_tt__ToneCompensationMode;
			return soap_in_tt__ToneCompensationMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterAutoBoundaryType"))
		{	*type = SOAP_TYPE_tt__IrCutFilterAutoBoundaryType;
			return soap_in_tt__IrCutFilterAutoBoundaryType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ImageStabilizationMode"))
		{	*type = SOAP_TYPE_tt__ImageStabilizationMode;
			return soap_in_tt__ImageStabilizationMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IrCutFilterMode"))
		{	*type = SOAP_TYPE_tt__IrCutFilterMode;
			return soap_in_tt__IrCutFilterMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WhiteBalanceMode"))
		{	*type = SOAP_TYPE_tt__WhiteBalanceMode;
			return soap_in_tt__WhiteBalanceMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Enabled"))
		{	*type = SOAP_TYPE_tt__Enabled;
			return soap_in_tt__Enabled(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ExposureMode"))
		{	*type = SOAP_TYPE_tt__ExposureMode;
			return soap_in_tt__ExposureMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ExposurePriority"))
		{	*type = SOAP_TYPE_tt__ExposurePriority;
			return soap_in_tt__ExposurePriority(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:BacklightCompensationMode"))
		{	*type = SOAP_TYPE_tt__BacklightCompensationMode;
			return soap_in_tt__BacklightCompensationMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:WideDynamicMode"))
		{	*type = SOAP_TYPE_tt__WideDynamicMode;
			return soap_in_tt__WideDynamicMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AutoFocusMode"))
		{	*type = SOAP_TYPE_tt__AutoFocusMode;
			return soap_in_tt__AutoFocusMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourOperation"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourOperation;
			return soap_in_tt__PTZPresetTourOperation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourDirection"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourDirection;
			return soap_in_tt__PTZPresetTourDirection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZPresetTourState"))
		{	*type = SOAP_TYPE_tt__PTZPresetTourState;
			return soap_in_tt__PTZPresetTourState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ReverseMode"))
		{	*type = SOAP_TYPE_tt__ReverseMode;
			return soap_in_tt__ReverseMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EFlipMode"))
		{	*type = SOAP_TYPE_tt__EFlipMode;
			return soap_in_tt__EFlipMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DigitalIdleState"))
		{	*type = SOAP_TYPE_tt__DigitalIdleState;
			return soap_in_tt__DigitalIdleState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayMode"))
		{	*type = SOAP_TYPE_tt__RelayMode;
			return soap_in_tt__RelayMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayIdleState"))
		{	*type = SOAP_TYPE_tt__RelayIdleState;
			return soap_in_tt__RelayIdleState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RelayLogicalState"))
		{	*type = SOAP_TYPE_tt__RelayLogicalState;
			return soap_in_tt__RelayLogicalState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:UserLevel"))
		{	*type = SOAP_TYPE_tt__UserLevel;
			return soap_in_tt__UserLevel(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SetDateTimeType"))
		{	*type = SOAP_TYPE_tt__SetDateTimeType;
			return soap_in_tt__SetDateTimeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:FactoryDefaultType"))
		{	*type = SOAP_TYPE_tt__FactoryDefaultType;
			return soap_in_tt__FactoryDefaultType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SystemLogType"))
		{	*type = SOAP_TYPE_tt__SystemLogType;
			return soap_in_tt__SystemLogType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:CapabilityCategory"))
		{	*type = SOAP_TYPE_tt__CapabilityCategory;
			return soap_in_tt__CapabilityCategory(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11AuthAndMangementSuite"))
		{	*type = SOAP_TYPE_tt__Dot11AuthAndMangementSuite;
			return soap_in_tt__Dot11AuthAndMangementSuite(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SignalStrength"))
		{	*type = SOAP_TYPE_tt__Dot11SignalStrength;
			return soap_in_tt__Dot11SignalStrength(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11Cipher"))
		{	*type = SOAP_TYPE_tt__Dot11Cipher;
			return soap_in_tt__Dot11Cipher(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11SecurityMode"))
		{	*type = SOAP_TYPE_tt__Dot11SecurityMode;
			return soap_in_tt__Dot11SecurityMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Dot11StationMode"))
		{	*type = SOAP_TYPE_tt__Dot11StationMode;
			return soap_in_tt__Dot11StationMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DynamicDNSType"))
		{	*type = SOAP_TYPE_tt__DynamicDNSType;
			return soap_in_tt__DynamicDNSType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPAddressFilterType"))
		{	*type = SOAP_TYPE_tt__IPAddressFilterType;
			return soap_in_tt__IPAddressFilterType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPType"))
		{	*type = SOAP_TYPE_tt__IPType;
			return soap_in_tt__IPType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkHostType"))
		{	*type = SOAP_TYPE_tt__NetworkHostType;
			return soap_in_tt__NetworkHostType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:NetworkProtocolType"))
		{	*type = SOAP_TYPE_tt__NetworkProtocolType;
			return soap_in_tt__NetworkProtocolType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:IPv6DHCPConfiguration"))
		{	*type = SOAP_TYPE_tt__IPv6DHCPConfiguration;
			return soap_in_tt__IPv6DHCPConfiguration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Duplex"))
		{	*type = SOAP_TYPE_tt__Duplex;
			return soap_in_tt__Duplex(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:DiscoveryMode"))
		{	*type = SOAP_TYPE_tt__DiscoveryMode;
			return soap_in_tt__DiscoveryMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ScopeDefinition"))
		{	*type = SOAP_TYPE_tt__ScopeDefinition;
			return soap_in_tt__ScopeDefinition(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:TransportProtocol"))
		{	*type = SOAP_TYPE_tt__TransportProtocol;
			return soap_in_tt__TransportProtocol(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:StreamType"))
		{	*type = SOAP_TYPE_tt__StreamType;
			return soap_in_tt__StreamType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataCompressionType"))
		{	*type = SOAP_TYPE_tt__MetadataCompressionType;
			return soap_in_tt__MetadataCompressionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncodingMimeNames"))
		{	*type = SOAP_TYPE_tt__AudioEncodingMimeNames;
			return soap_in_tt__AudioEncodingMimeNames(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoding"))
		{	*type = SOAP_TYPE_tt__AudioEncoding;
			return soap_in_tt__AudioEncoding(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncodingProfiles"))
		{	*type = SOAP_TYPE_tt__VideoEncodingProfiles;
			return soap_in_tt__VideoEncodingProfiles(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncodingMimeNames"))
		{	*type = SOAP_TYPE_tt__VideoEncodingMimeNames;
			return soap_in_tt__VideoEncodingMimeNames(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:H264Profile"))
		{	*type = SOAP_TYPE_tt__H264Profile;
			return soap_in_tt__H264Profile(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Mpeg4Profile"))
		{	*type = SOAP_TYPE_tt__Mpeg4Profile;
			return soap_in_tt__Mpeg4Profile(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoding"))
		{	*type = SOAP_TYPE_tt__VideoEncoding;
			return soap_in_tt__VideoEncoding(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ViewModes"))
		{	*type = SOAP_TYPE_tt__ViewModes;
			return soap_in_tt__ViewModes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SceneOrientationOption"))
		{	*type = SOAP_TYPE_tt__SceneOrientationOption;
			return soap_in_tt__SceneOrientationOption(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:SceneOrientationMode"))
		{	*type = SOAP_TYPE_tt__SceneOrientationMode;
			return soap_in_tt__SceneOrientationMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:RotateMode"))
		{	*type = SOAP_TYPE_tt__RotateMode;
			return soap_in_tt__RotateMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StorageType"))
		{	*type = SOAP_TYPE_tds__StorageType;
			return soap_in_tds__StorageType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:AutoGeoModes"))
		{	*type = SOAP_TYPE_tds__AutoGeoModes;
			return soap_in_tds__AutoGeoModes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AttributeType"))
		{	*type = SOAP_TYPE_saml2__AttributeType;
			return soap_in_saml2__AttributeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AttributeStatementType"))
		{	*type = SOAP_TYPE_saml2__AttributeStatementType;
			return soap_in_saml2__AttributeStatementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EvidenceType"))
		{	*type = SOAP_TYPE_saml2__EvidenceType;
			return soap_in_saml2__EvidenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ActionType"))
		{	*type = SOAP_TYPE_saml2__ActionType;
			return soap_in_saml2__ActionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthzDecisionStatementType"))
		{	*type = SOAP_TYPE_saml2__AuthzDecisionStatementType;
			return soap_in_saml2__AuthzDecisionStatementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContextType"))
		{	*type = SOAP_TYPE_saml2__AuthnContextType;
			return soap_in_saml2__AuthnContextType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectLocalityType"))
		{	*type = SOAP_TYPE_saml2__SubjectLocalityType;
			return soap_in_saml2__SubjectLocalityType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnStatementType"))
		{	*type = SOAP_TYPE_saml2__AuthnStatementType;
			return soap_in_saml2__AuthnStatementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:StatementAbstractType"))
		{	*type = SOAP_TYPE_saml2__StatementAbstractType;
			return soap_in_saml2__StatementAbstractType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AdviceType"))
		{	*type = SOAP_TYPE_saml2__AdviceType;
			return soap_in_saml2__AdviceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ProxyRestrictionType"))
		{	*type = SOAP_TYPE_saml2__ProxyRestrictionType;
			return soap_in_saml2__ProxyRestrictionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:OneTimeUseType"))
		{	*type = SOAP_TYPE_saml2__OneTimeUseType;
			return soap_in_saml2__OneTimeUseType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AudienceRestrictionType"))
		{	*type = SOAP_TYPE_saml2__AudienceRestrictionType;
			return soap_in_saml2__AudienceRestrictionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ConditionAbstractType"))
		{	*type = SOAP_TYPE_saml2__ConditionAbstractType;
			return soap_in_saml2__ConditionAbstractType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ConditionsType"))
		{	*type = SOAP_TYPE_saml2__ConditionsType;
			return soap_in_saml2__ConditionsType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:KeyInfoConfirmationDataType"))
		{	*type = SOAP_TYPE_saml2__KeyInfoConfirmationDataType;
			return soap_in_saml2__KeyInfoConfirmationDataType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmationDataType"))
		{	*type = SOAP_TYPE_saml2__SubjectConfirmationDataType;
			return soap_in_saml2__SubjectConfirmationDataType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmationType"))
		{	*type = SOAP_TYPE_saml2__SubjectConfirmationType;
			return soap_in_saml2__SubjectConfirmationType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectType"))
		{	*type = SOAP_TYPE_saml2__SubjectType;
			return soap_in_saml2__SubjectType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AssertionType"))
		{	*type = SOAP_TYPE_saml2__AssertionType;
			return soap_in_saml2__AssertionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedElementType"))
		{	*type = SOAP_TYPE_saml2__EncryptedElementType;
			return soap_in_saml2__EncryptedElementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:NameIDType"))
		{	*type = SOAP_TYPE_saml2__NameIDType;
			return soap_in_saml2__NameIDType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:BaseIDAbstractType"))
		{	*type = SOAP_TYPE_saml2__BaseIDAbstractType;
			return soap_in_saml2__BaseIDAbstractType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeType"))
		{	*type = SOAP_TYPE_saml1__AttributeType;
			return soap_in_saml1__AttributeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeDesignatorType"))
		{	*type = SOAP_TYPE_saml1__AttributeDesignatorType;
			return soap_in_saml1__AttributeDesignatorType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeStatementType"))
		{	*type = SOAP_TYPE_saml1__AttributeStatementType;
			return soap_in_saml1__AttributeStatementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:EvidenceType"))
		{	*type = SOAP_TYPE_saml1__EvidenceType;
			return soap_in_saml1__EvidenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:ActionType"))
		{	*type = SOAP_TYPE_saml1__ActionType;
			return soap_in_saml1__ActionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorizationDecisionStatementType"))
		{	*type = SOAP_TYPE_saml1__AuthorizationDecisionStatementType;
			return soap_in_saml1__AuthorizationDecisionStatementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorityBindingType"))
		{	*type = SOAP_TYPE_saml1__AuthorityBindingType;
			return soap_in_saml1__AuthorityBindingType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectLocalityType"))
		{	*type = SOAP_TYPE_saml1__SubjectLocalityType;
			return soap_in_saml1__SubjectLocalityType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthenticationStatementType"))
		{	*type = SOAP_TYPE_saml1__AuthenticationStatementType;
			return soap_in_saml1__AuthenticationStatementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectConfirmationType"))
		{	*type = SOAP_TYPE_saml1__SubjectConfirmationType;
			return soap_in_saml1__SubjectConfirmationType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:NameIdentifierType"))
		{	*type = SOAP_TYPE_saml1__NameIdentifierType;
			return soap_in_saml1__NameIdentifierType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectType"))
		{	*type = SOAP_TYPE_saml1__SubjectType;
			return soap_in_saml1__SubjectType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectStatementAbstractType"))
		{	*type = SOAP_TYPE_saml1__SubjectStatementAbstractType;
			return soap_in_saml1__SubjectStatementAbstractType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:StatementAbstractType"))
		{	*type = SOAP_TYPE_saml1__StatementAbstractType;
			return soap_in_saml1__StatementAbstractType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AdviceType"))
		{	*type = SOAP_TYPE_saml1__AdviceType;
			return soap_in_saml1__AdviceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:DoNotCacheConditionType"))
		{	*type = SOAP_TYPE_saml1__DoNotCacheConditionType;
			return soap_in_saml1__DoNotCacheConditionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AudienceRestrictionConditionType"))
		{	*type = SOAP_TYPE_saml1__AudienceRestrictionConditionType;
			return soap_in_saml1__AudienceRestrictionConditionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:ConditionAbstractType"))
		{	*type = SOAP_TYPE_saml1__ConditionAbstractType;
			return soap_in_saml1__ConditionAbstractType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:ConditionsType"))
		{	*type = SOAP_TYPE_saml1__ConditionsType;
			return soap_in_saml1__ConditionsType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AssertionType"))
		{	*type = SOAP_TYPE_saml1__AssertionType;
			return soap_in_saml1__AssertionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:PropertiesType"))
		{	*type = SOAP_TYPE_wsc__PropertiesType;
			return soap_in_wsc__PropertiesType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:DerivedKeyTokenType"))
		{	*type = SOAP_TYPE_wsc__DerivedKeyTokenType;
			return soap_in_wsc__DerivedKeyTokenType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:SecurityContextTokenType"))
		{	*type = SOAP_TYPE_wsc__SecurityContextTokenType;
			return soap_in_wsc__SecurityContextTokenType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionPropertyType"))
		{	*type = SOAP_TYPE_xenc__EncryptionPropertyType;
			return soap_in_xenc__EncryptionPropertyType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionPropertiesType"))
		{	*type = SOAP_TYPE_xenc__EncryptionPropertiesType;
			return soap_in_xenc__EncryptionPropertiesType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:ReferenceType"))
		{	*type = SOAP_TYPE_xenc__ReferenceType;
			return soap_in_xenc__ReferenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:AgreementMethodType"))
		{	*type = SOAP_TYPE_xenc__AgreementMethodType;
			return soap_in_xenc__AgreementMethodType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptedKeyType"))
		{	*type = SOAP_TYPE_xenc__EncryptedKeyType;
			return soap_in_xenc__EncryptedKeyType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptedDataType"))
		{	*type = SOAP_TYPE_xenc__EncryptedDataType;
			return soap_in_xenc__EncryptedDataType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:TransformsType"))
		{	*type = SOAP_TYPE_xenc__TransformsType;
			return soap_in_xenc__TransformsType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:CipherReferenceType"))
		{	*type = SOAP_TYPE_xenc__CipherReferenceType;
			return soap_in_xenc__CipherReferenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:CipherDataType"))
		{	*type = SOAP_TYPE_xenc__CipherDataType;
			return soap_in_xenc__CipherDataType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionMethodType"))
		{	*type = SOAP_TYPE_xenc__EncryptionMethodType;
			return soap_in_xenc__EncryptionMethodType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptedType"))
		{	*type = SOAP_TYPE_xenc__EncryptedType;
			return soap_in_xenc__EncryptedType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:RSAKeyValueType"))
		{	*type = SOAP_TYPE_ds__RSAKeyValueType;
			return soap_in_ds__RSAKeyValueType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:DSAKeyValueType"))
		{	*type = SOAP_TYPE_ds__DSAKeyValueType;
			return soap_in_ds__DSAKeyValueType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:X509IssuerSerialType"))
		{	*type = SOAP_TYPE_ds__X509IssuerSerialType;
			return soap_in_ds__X509IssuerSerialType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:RetrievalMethodType"))
		{	*type = SOAP_TYPE_ds__RetrievalMethodType;
			return soap_in_ds__RetrievalMethodType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:KeyValueType"))
		{	*type = SOAP_TYPE_ds__KeyValueType;
			return soap_in_ds__KeyValueType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:DigestMethodType"))
		{	*type = SOAP_TYPE_ds__DigestMethodType;
			return soap_in_ds__DigestMethodType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:TransformType"))
		{	*type = SOAP_TYPE_ds__TransformType;
			return soap_in_ds__TransformType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:TransformsType"))
		{	*type = SOAP_TYPE_ds__TransformsType;
			return soap_in_ds__TransformsType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:ReferenceType"))
		{	*type = SOAP_TYPE_ds__ReferenceType;
			return soap_in_ds__ReferenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignatureMethodType"))
		{	*type = SOAP_TYPE_ds__SignatureMethodType;
			return soap_in_ds__SignatureMethodType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:CanonicalizationMethodType"))
		{	*type = SOAP_TYPE_ds__CanonicalizationMethodType;
			return soap_in_ds__CanonicalizationMethodType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:KeyInfoType"))
		{	*type = SOAP_TYPE_ds__KeyInfoType;
			return soap_in_ds__KeyInfoType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignedInfoType"))
		{	*type = SOAP_TYPE_ds__SignedInfoType;
			return soap_in_ds__SignedInfoType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignatureType"))
		{	*type = SOAP_TYPE_ds__SignatureType;
			return soap_in_ds__SignatureType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:X509DataType"))
		{	*type = SOAP_TYPE_ds__X509DataType;
			return soap_in_ds__X509DataType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:EncodedString"))
		{	*type = SOAP_TYPE_wsse__EncodedString;
			return soap_in_wsse__EncodedString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "timeval"))
		{	*type = SOAP_TYPE_timeval;
			return soap_in_timeval(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "chan:ChannelInstanceType"))
		{	*type = SOAP_TYPE_chan__ChannelInstanceType;
			return soap_in_chan__ChannelInstanceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ProblemActionType"))
		{	*type = SOAP_TYPE_wsa5__ProblemActionType;
			return soap_in_wsa5__ProblemActionType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:RelatesToType"))
		{	*type = SOAP_TYPE_wsa5__RelatesToType;
			return soap_in_wsa5__RelatesToType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:MetadataType"))
		{	*type = SOAP_TYPE_wsa5__MetadataType;
			return soap_in_wsa5__MetadataType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ReferenceParametersType"))
		{	*type = SOAP_TYPE_wsa5__ReferenceParametersType;
			return soap_in_wsa5__ReferenceParametersType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:EndpointReferenceType"))
		{	*type = SOAP_TYPE_wsa5__EndpointReferenceType;
			return soap_in_wsa5__EndpointReferenceType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyAttribute"))
		{	*type = SOAP_TYPE_xsd__anyAttribute;
			return soap_in_xsd__anyAttribute(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ProbeMatchesType"))
		{	*type = SOAP_TYPE_wsd__ProbeMatchesType;
			return soap_in_wsd__ProbeMatchesType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ProbeType"))
		{	*type = SOAP_TYPE_wsd__ProbeType;
			return soap_in_wsd__ProbeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:FaultCodeOpenEnumType"))
		{	char **s;
			*type = SOAP_TYPE_wsc__FaultCodeOpenEnumType;
			s = soap_in_wsc__FaultCodeOpenEnumType(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__ProblemHeaderQName;
			s = soap_in__wsa5__ProblemHeaderQName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:FaultCodesOpenEnumType"))
		{	char **s;
			*type = SOAP_TYPE_wsa5__FaultCodesOpenEnumType;
			s = soap_in_wsa5__FaultCodesOpenEnumType(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:RelationshipTypeOpenEnum"))
		{	char **s;
			*type = SOAP_TYPE_wsa5__RelationshipTypeOpenEnum;
			s = soap_in_wsa5__RelationshipTypeOpenEnum(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "wsd:MetadataVersion"))
		{	*type = SOAP_TYPE__wsd__MetadataVersion;
			return soap_in__wsd__MetadataVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:RetryAfter"))
		{	*type = SOAP_TYPE__wsa5__RetryAfter;
			return soap_in__wsa5__RetryAfter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:topic"))
		{	*type = SOAP_TYPE__wstop__topic;
			return soap_in__wstop__topic(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:FixedTopicSet"))
		{	*type = SOAP_TYPE__wsnt__FixedTopicSet;
			return soap_in__wsnt__FixedTopicSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:RetryAfter"))
		{	*type = SOAP_TYPE__wsa__RetryAfter;
			return soap_in__wsa__RetryAfter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:ReplyAfter"))
		{	*type = SOAP_TYPE__wsa__ReplyAfter;
			return soap_in__wsa__ReplyAfter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:FaultTo"))
		{	*type = SOAP_TYPE__wsa__FaultTo;
			return soap_in__wsa__FaultTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:ReplyTo"))
		{	*type = SOAP_TYPE__wsa__ReplyTo;
			return soap_in__wsa__ReplyTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:From"))
		{	*type = SOAP_TYPE__wsa__From;
			return soap_in__wsa__From(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:Action"))
		{	*type = SOAP_TYPE__wsa__Action;
			return soap_in__wsa__Action(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:To"))
		{	*type = SOAP_TYPE__wsa__To;
			return soap_in__wsa__To(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:RelatesTo"))
		{	*type = SOAP_TYPE__wsa__RelatesTo;
			return soap_in__wsa__RelatesTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:MessageID"))
		{	*type = SOAP_TYPE__wsa__MessageID;
			return soap_in__wsa__MessageID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa:EndpointReference"))
		{	*type = SOAP_TYPE__wsa__EndpointReference;
			return soap_in__wsa__EndpointReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Id"))
		{	*type = SOAP_TYPE__wsd__Id;
			return soap_in__wsd__Id(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:AppSequence"))
		{	*type = SOAP_TYPE__wsd__AppSequence;
			return soap_in__wsd__AppSequence(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Sig"))
		{	*type = SOAP_TYPE__wsd__Sig;
			return soap_in__wsd__Sig(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Security"))
		{	*type = SOAP_TYPE__wsd__Security;
			return soap_in__wsd__Security(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:SupportedMatchingRules"))
		{	*type = SOAP_TYPE__wsd__SupportedMatchingRules;
			return soap_in__wsd__SupportedMatchingRules(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:XAddrs"))
		{	*type = SOAP_TYPE__wsd__XAddrs;
			return soap_in__wsd__XAddrs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Scopes"))
		{	*type = SOAP_TYPE__wsd__Scopes;
			return soap_in__wsd__Scopes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ResolveMatches"))
		{	*type = SOAP_TYPE__wsd__ResolveMatches;
			return soap_in__wsd__ResolveMatches(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Resolve"))
		{	*type = SOAP_TYPE__wsd__Resolve;
			return soap_in__wsd__Resolve(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Bye"))
		{	*type = SOAP_TYPE__wsd__Bye;
			return soap_in__wsd__Bye(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Hello"))
		{	*type = SOAP_TYPE__wsd__Hello;
			return soap_in__wsd__Hello(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrf:ResourceUnavailableFault"))
		{	*type = SOAP_TYPE__wsrf__ResourceUnavailableFault;
			return soap_in__wsrf__ResourceUnavailableFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrf:ResourceUnknownFault"))
		{	*type = SOAP_TYPE__wsrf__ResourceUnknownFault;
			return soap_in__wsrf__ResourceUnknownFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:Capabilities"))
		{	*type = SOAP_TYPE__tev__Capabilities;
			return soap_in__tev__Capabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:topicNamespaceLocation"))
		{	*type = SOAP_TYPE__wstop__topicNamespaceLocation;
			return soap_in__wstop__topicNamespaceLocation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicSet"))
		{	*type = SOAP_TYPE__wstop__TopicSet;
			return soap_in__wstop__TopicSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicNamespace"))
		{	*type = SOAP_TYPE__wstop__TopicNamespace;
			return soap_in__wstop__TopicNamespace(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFault"))
		{	*type = SOAP_TYPE__wsrfbf__BaseFault;
			return soap_in__wsrfbf__BaseFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xop:Include"))
		{	*type = SOAP_TYPE__xop__Include;
			return soap_in__xop__Include(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ResumeFailedFault"))
		{	*type = SOAP_TYPE__wsnt__ResumeFailedFault;
			return soap_in__wsnt__ResumeFailedFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:PauseFailedFault"))
		{	*type = SOAP_TYPE__wsnt__PauseFailedFault;
			return soap_in__wsnt__PauseFailedFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToDestroySubscriptionFault"))
		{	*type = SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault;
			return soap_in__wsnt__UnableToDestroySubscriptionFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnacceptableTerminationTimeFault"))
		{	*type = SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault;
			return soap_in__wsnt__UnacceptableTerminationTimeFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToCreatePullPointFault"))
		{	*type = SOAP_TYPE__wsnt__UnableToCreatePullPointFault;
			return soap_in__wsnt__UnableToCreatePullPointFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToDestroyPullPointFault"))
		{	*type = SOAP_TYPE__wsnt__UnableToDestroyPullPointFault;
			return soap_in__wsnt__UnableToDestroyPullPointFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnableToGetMessagesFault"))
		{	*type = SOAP_TYPE__wsnt__UnableToGetMessagesFault;
			return soap_in__wsnt__UnableToGetMessagesFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NoCurrentMessageOnTopicFault"))
		{	*type = SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault;
			return soap_in__wsnt__NoCurrentMessageOnTopicFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnacceptableInitialTerminationTimeFault"))
		{	*type = SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault;
			return soap_in__wsnt__UnacceptableInitialTerminationTimeFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotifyMessageNotSupportedFault"))
		{	*type = SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault;
			return soap_in__wsnt__NotifyMessageNotSupportedFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnsupportedPolicyRequestFault"))
		{	*type = SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault;
			return soap_in__wsnt__UnsupportedPolicyRequestFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnrecognizedPolicyRequestFault"))
		{	*type = SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault;
			return soap_in__wsnt__UnrecognizedPolicyRequestFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidMessageContentExpressionFault"))
		{	*type = SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault;
			return soap_in__wsnt__InvalidMessageContentExpressionFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidProducerPropertiesExpressionFault"))
		{	*type = SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault;
			return soap_in__wsnt__InvalidProducerPropertiesExpressionFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:MultipleTopicsSpecifiedFault"))
		{	*type = SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault;
			return soap_in__wsnt__MultipleTopicsSpecifiedFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicNotSupportedFault"))
		{	*type = SOAP_TYPE__wsnt__TopicNotSupportedFault;
			return soap_in__wsnt__TopicNotSupportedFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidTopicExpressionFault"))
		{	*type = SOAP_TYPE__wsnt__InvalidTopicExpressionFault;
			return soap_in__wsnt__InvalidTopicExpressionFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicExpressionDialectUnknownFault"))
		{	*type = SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault;
			return soap_in__wsnt__TopicExpressionDialectUnknownFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:InvalidFilterFault"))
		{	*type = SOAP_TYPE__wsnt__InvalidFilterFault;
			return soap_in__wsnt__InvalidFilterFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscribeCreationFailedFault"))
		{	*type = SOAP_TYPE__wsnt__SubscribeCreationFailedFault;
			return soap_in__wsnt__SubscribeCreationFailedFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:MessageContent"))
		{	*type = SOAP_TYPE__wsnt__MessageContent;
			return soap_in__wsnt__MessageContent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ProducerProperties"))
		{	*type = SOAP_TYPE__wsnt__ProducerProperties;
			return soap_in__wsnt__ProducerProperties(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotificationMessage"))
		{	*type = SOAP_TYPE__wsnt__NotificationMessage;
			return soap_in__wsnt__NotificationMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Topic"))
		{	*type = SOAP_TYPE__wsnt__Topic;
			return soap_in__wsnt__Topic(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscriptionPolicy"))
		{	*type = SOAP_TYPE__wsnt__SubscriptionPolicy;
			return soap_in__wsnt__SubscriptionPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Filter"))
		{	*type = SOAP_TYPE__wsnt__Filter;
			return soap_in__wsnt__Filter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicExpressionDialect"))
		{	*type = SOAP_TYPE__wsnt__TopicExpressionDialect;
			return soap_in__wsnt__TopicExpressionDialect(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TopicExpression"))
		{	*type = SOAP_TYPE__wsnt__TopicExpression;
			return soap_in__wsnt__TopicExpression(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Polygon"))
		{	*type = SOAP_TYPE__tt__Polygon;
			return soap_in__tt__Polygon(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Polyline"))
		{	*type = SOAP_TYPE__tt__Polyline;
			return soap_in__tt__Polyline(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioDecoderConfiguration"))
		{	*type = SOAP_TYPE__tt__AudioDecoderConfiguration;
			return soap_in__tt__AudioDecoderConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioOutputConfiguration"))
		{	*type = SOAP_TYPE__tt__AudioOutputConfiguration;
			return soap_in__tt__AudioOutputConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:MetadataConfiguration"))
		{	*type = SOAP_TYPE__tt__MetadataConfiguration;
			return soap_in__tt__MetadataConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:PTZConfiguration"))
		{	*type = SOAP_TYPE__tt__PTZConfiguration;
			return soap_in__tt__PTZConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoAnalyticsConfiguration"))
		{	*type = SOAP_TYPE__tt__VideoAnalyticsConfiguration;
			return soap_in__tt__VideoAnalyticsConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioEncoderConfiguration"))
		{	*type = SOAP_TYPE__tt__AudioEncoderConfiguration;
			return soap_in__tt__AudioEncoderConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoEncoderConfiguration"))
		{	*type = SOAP_TYPE__tt__VideoEncoderConfiguration;
			return soap_in__tt__VideoEncoderConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:AudioSourceConfiguration"))
		{	*type = SOAP_TYPE__tt__AudioSourceConfiguration;
			return soap_in__tt__AudioSourceConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:VideoSourceConfiguration"))
		{	*type = SOAP_TYPE__tt__VideoSourceConfiguration;
			return soap_in__tt__VideoSourceConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:Capabilities"))
		{	*type = SOAP_TYPE__tds__Capabilities;
			return soap_in__tds__Capabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wstop:TopicNamespaceType-Topic"))
		{	*type = SOAP_TYPE__wstop__TopicNamespaceType_Topic;
			return soap_in__wstop__TopicNamespaceType_Topic(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:CreatePullPointSubscription-SubscriptionPolicy"))
		{	*type = SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy;
			return soap_in__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType-FaultCause"))
		{	*type = SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause;
			return soap_in__wsrfbf__BaseFaultType_FaultCause(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType-Description"))
		{	*type = SOAP_TYPE__wsrfbf__BaseFaultType_Description;
			return soap_in__wsrfbf__BaseFaultType_Description(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsrfbf:BaseFaultType-ErrorCode"))
		{	*type = SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode;
			return soap_in__wsrfbf__BaseFaultType_ErrorCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Subscribe-SubscriptionPolicy"))
		{	*type = SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy;
			return soap_in__wsnt__Subscribe_SubscriptionPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotificationMessageHolderType-Message"))
		{	*type = SOAP_TYPE__wsnt__NotificationMessageHolderType_Message;
			return soap_in__wsnt__NotificationMessageHolderType_Message(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ConfigDescription-Messages"))
		{	*type = SOAP_TYPE__tt__ConfigDescription_Messages;
			return soap_in__tt__ConfigDescription_Messages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemListDescription-ElementItemDescription"))
		{	*type = SOAP_TYPE__tt__ItemListDescription_ElementItemDescription;
			return soap_in__tt__ItemListDescription_ElementItemDescription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemListDescription-SimpleItemDescription"))
		{	*type = SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription;
			return soap_in__tt__ItemListDescription_SimpleItemDescription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemList-ElementItem"))
		{	*type = SOAP_TYPE__tt__ItemList_ElementItem;
			return soap_in__tt__ItemList_ElementItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:ItemList-SimpleItem"))
		{	*type = SOAP_TYPE__tt__ItemList_SimpleItem;
			return soap_in__tt__ItemList_SimpleItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:EventSubscription-SubscriptionPolicy"))
		{	*type = SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy;
			return soap_in__tt__EventSubscription_SubscriptionPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemUrisResponse-Extension"))
		{	*type = SOAP_TYPE__tds__GetSystemUrisResponse_Extension;
			return soap_in__tds__GetSystemUrisResponse_Extension(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StorageConfigurationData-Extension"))
		{	*type = SOAP_TYPE__tds__StorageConfigurationData_Extension;
			return soap_in__tds__StorageConfigurationData_Extension(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:UserCredential-Extension"))
		{	*type = SOAP_TYPE__tds__UserCredential_Extension;
			return soap_in__tds__UserCredential_Extension(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:Service-Capabilities"))
		{	*type = SOAP_TYPE__tds__Service_Capabilities;
			return soap_in__tds__Service_Capabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:GetEventPropertiesResponse"))
		{	*type = SOAP_TYPE__tev__GetEventPropertiesResponse;
			return soap_in__tev__GetEventPropertiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:GetEventProperties"))
		{	*type = SOAP_TYPE__tev__GetEventProperties;
			return soap_in__tev__GetEventProperties(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:SetSynchronizationPointResponse"))
		{	*type = SOAP_TYPE__tev__SetSynchronizationPointResponse;
			return soap_in__tev__SetSynchronizationPointResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:SetSynchronizationPoint"))
		{	*type = SOAP_TYPE__tev__SetSynchronizationPoint;
			return soap_in__tev__SetSynchronizationPoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:SeekResponse"))
		{	*type = SOAP_TYPE__tev__SeekResponse;
			return soap_in__tev__SeekResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:Seek"))
		{	*type = SOAP_TYPE__tev__Seek;
			return soap_in__tev__Seek(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:PullMessagesFaultResponse"))
		{	*type = SOAP_TYPE__tev__PullMessagesFaultResponse;
			return soap_in__tev__PullMessagesFaultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:PullMessagesResponse"))
		{	*type = SOAP_TYPE__tev__PullMessagesResponse;
			return soap_in__tev__PullMessagesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:PullMessages"))
		{	*type = SOAP_TYPE__tev__PullMessages;
			return soap_in__tev__PullMessages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:CreatePullPointSubscriptionResponse"))
		{	*type = SOAP_TYPE__tev__CreatePullPointSubscriptionResponse;
			return soap_in__tev__CreatePullPointSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:CreatePullPointSubscription"))
		{	*type = SOAP_TYPE__tev__CreatePullPointSubscription;
			return soap_in__tev__CreatePullPointSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:GetServiceCapabilitiesResponse"))
		{	*type = SOAP_TYPE__tev__GetServiceCapabilitiesResponse;
			return soap_in__tev__GetServiceCapabilitiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tev:GetServiceCapabilities"))
		{	*type = SOAP_TYPE__tev__GetServiceCapabilities;
			return soap_in__tev__GetServiceCapabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ResumeSubscriptionResponse"))
		{	*type = SOAP_TYPE__wsnt__ResumeSubscriptionResponse;
			return soap_in__wsnt__ResumeSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ResumeSubscription"))
		{	*type = SOAP_TYPE__wsnt__ResumeSubscription;
			return soap_in__wsnt__ResumeSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:PauseSubscriptionResponse"))
		{	*type = SOAP_TYPE__wsnt__PauseSubscriptionResponse;
			return soap_in__wsnt__PauseSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:PauseSubscription"))
		{	*type = SOAP_TYPE__wsnt__PauseSubscription;
			return soap_in__wsnt__PauseSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UnsubscribeResponse"))
		{	*type = SOAP_TYPE__wsnt__UnsubscribeResponse;
			return soap_in__wsnt__UnsubscribeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Unsubscribe"))
		{	*type = SOAP_TYPE__wsnt__Unsubscribe;
			return soap_in__wsnt__Unsubscribe(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:RenewResponse"))
		{	*type = SOAP_TYPE__wsnt__RenewResponse;
			return soap_in__wsnt__RenewResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Renew"))
		{	*type = SOAP_TYPE__wsnt__Renew;
			return soap_in__wsnt__Renew(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:CreatePullPointResponse"))
		{	*type = SOAP_TYPE__wsnt__CreatePullPointResponse;
			return soap_in__wsnt__CreatePullPointResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:CreatePullPoint"))
		{	*type = SOAP_TYPE__wsnt__CreatePullPoint;
			return soap_in__wsnt__CreatePullPoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:DestroyPullPointResponse"))
		{	*type = SOAP_TYPE__wsnt__DestroyPullPointResponse;
			return soap_in__wsnt__DestroyPullPointResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:DestroyPullPoint"))
		{	*type = SOAP_TYPE__wsnt__DestroyPullPoint;
			return soap_in__wsnt__DestroyPullPoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetMessagesResponse"))
		{	*type = SOAP_TYPE__wsnt__GetMessagesResponse;
			return soap_in__wsnt__GetMessagesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetMessages"))
		{	*type = SOAP_TYPE__wsnt__GetMessages;
			return soap_in__wsnt__GetMessages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetCurrentMessageResponse"))
		{	*type = SOAP_TYPE__wsnt__GetCurrentMessageResponse;
			return soap_in__wsnt__GetCurrentMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:GetCurrentMessage"))
		{	*type = SOAP_TYPE__wsnt__GetCurrentMessage;
			return soap_in__wsnt__GetCurrentMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscribeResponse"))
		{	*type = SOAP_TYPE__wsnt__SubscribeResponse;
			return soap_in__wsnt__SubscribeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Subscribe"))
		{	*type = SOAP_TYPE__wsnt__Subscribe;
			return soap_in__wsnt__Subscribe(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:UseRaw"))
		{	*type = SOAP_TYPE__wsnt__UseRaw;
			return soap_in__wsnt__UseRaw(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:Notify"))
		{	*type = SOAP_TYPE__wsnt__Notify;
			return soap_in__wsnt__Notify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscriptionManagerRP"))
		{	*type = SOAP_TYPE__wsnt__SubscriptionManagerRP;
			return soap_in__wsnt__SubscriptionManagerRP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:NotificationProducerRP"))
		{	*type = SOAP_TYPE__wsnt__NotificationProducerRP;
			return soap_in__wsnt__NotificationProducerRP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tt:Message"))
		{	*type = SOAP_TYPE__tt__Message;
			return soap_in__tt__Message(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteGeoLocationResponse"))
		{	*type = SOAP_TYPE__tds__DeleteGeoLocationResponse;
			return soap_in__tds__DeleteGeoLocationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteGeoLocation"))
		{	*type = SOAP_TYPE__tds__DeleteGeoLocation;
			return soap_in__tds__DeleteGeoLocation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetGeoLocationResponse"))
		{	*type = SOAP_TYPE__tds__SetGeoLocationResponse;
			return soap_in__tds__SetGeoLocationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetGeoLocation"))
		{	*type = SOAP_TYPE__tds__SetGeoLocation;
			return soap_in__tds__SetGeoLocation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetGeoLocationResponse"))
		{	*type = SOAP_TYPE__tds__GetGeoLocationResponse;
			return soap_in__tds__GetGeoLocationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetGeoLocation"))
		{	*type = SOAP_TYPE__tds__GetGeoLocation;
			return soap_in__tds__GetGeoLocation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteStorageConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__DeleteStorageConfigurationResponse;
			return soap_in__tds__DeleteStorageConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteStorageConfiguration"))
		{	*type = SOAP_TYPE__tds__DeleteStorageConfiguration;
			return soap_in__tds__DeleteStorageConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetStorageConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__SetStorageConfigurationResponse;
			return soap_in__tds__SetStorageConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetStorageConfiguration"))
		{	*type = SOAP_TYPE__tds__SetStorageConfiguration;
			return soap_in__tds__SetStorageConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetStorageConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__GetStorageConfigurationResponse;
			return soap_in__tds__GetStorageConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetStorageConfiguration"))
		{	*type = SOAP_TYPE__tds__GetStorageConfiguration;
			return soap_in__tds__GetStorageConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateStorageConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__CreateStorageConfigurationResponse;
			return soap_in__tds__CreateStorageConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateStorageConfiguration"))
		{	*type = SOAP_TYPE__tds__CreateStorageConfiguration;
			return soap_in__tds__CreateStorageConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetStorageConfigurationsResponse"))
		{	*type = SOAP_TYPE__tds__GetStorageConfigurationsResponse;
			return soap_in__tds__GetStorageConfigurationsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetStorageConfigurations"))
		{	*type = SOAP_TYPE__tds__GetStorageConfigurations;
			return soap_in__tds__GetStorageConfigurations(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StartSystemRestoreResponse"))
		{	*type = SOAP_TYPE__tds__StartSystemRestoreResponse;
			return soap_in__tds__StartSystemRestoreResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StartSystemRestore"))
		{	*type = SOAP_TYPE__tds__StartSystemRestore;
			return soap_in__tds__StartSystemRestore(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StartFirmwareUpgradeResponse"))
		{	*type = SOAP_TYPE__tds__StartFirmwareUpgradeResponse;
			return soap_in__tds__StartFirmwareUpgradeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:StartFirmwareUpgrade"))
		{	*type = SOAP_TYPE__tds__StartFirmwareUpgrade;
			return soap_in__tds__StartFirmwareUpgrade(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemUrisResponse"))
		{	*type = SOAP_TYPE__tds__GetSystemUrisResponse;
			return soap_in__tds__GetSystemUrisResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemUris"))
		{	*type = SOAP_TYPE__tds__GetSystemUris;
			return soap_in__tds__GetSystemUris(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:ScanAvailableDot11NetworksResponse"))
		{	*type = SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse;
			return soap_in__tds__ScanAvailableDot11NetworksResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:ScanAvailableDot11Networks"))
		{	*type = SOAP_TYPE__tds__ScanAvailableDot11Networks;
			return soap_in__tds__ScanAvailableDot11Networks(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot11StatusResponse"))
		{	*type = SOAP_TYPE__tds__GetDot11StatusResponse;
			return soap_in__tds__GetDot11StatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot11Status"))
		{	*type = SOAP_TYPE__tds__GetDot11Status;
			return soap_in__tds__GetDot11Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot11CapabilitiesResponse"))
		{	*type = SOAP_TYPE__tds__GetDot11CapabilitiesResponse;
			return soap_in__tds__GetDot11CapabilitiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot11Capabilities"))
		{	*type = SOAP_TYPE__tds__GetDot11Capabilities;
			return soap_in__tds__GetDot11Capabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SendAuxiliaryCommandResponse"))
		{	*type = SOAP_TYPE__tds__SendAuxiliaryCommandResponse;
			return soap_in__tds__SendAuxiliaryCommandResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SendAuxiliaryCommand"))
		{	*type = SOAP_TYPE__tds__SendAuxiliaryCommand;
			return soap_in__tds__SendAuxiliaryCommand(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRelayOutputStateResponse"))
		{	*type = SOAP_TYPE__tds__SetRelayOutputStateResponse;
			return soap_in__tds__SetRelayOutputStateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRelayOutputState"))
		{	*type = SOAP_TYPE__tds__SetRelayOutputState;
			return soap_in__tds__SetRelayOutputState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRelayOutputSettingsResponse"))
		{	*type = SOAP_TYPE__tds__SetRelayOutputSettingsResponse;
			return soap_in__tds__SetRelayOutputSettingsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRelayOutputSettings"))
		{	*type = SOAP_TYPE__tds__SetRelayOutputSettings;
			return soap_in__tds__SetRelayOutputSettings(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetRelayOutputsResponse"))
		{	*type = SOAP_TYPE__tds__GetRelayOutputsResponse;
			return soap_in__tds__GetRelayOutputsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetRelayOutputs"))
		{	*type = SOAP_TYPE__tds__GetRelayOutputs;
			return soap_in__tds__GetRelayOutputs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteDot1XConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__DeleteDot1XConfigurationResponse;
			return soap_in__tds__DeleteDot1XConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteDot1XConfiguration"))
		{	*type = SOAP_TYPE__tds__DeleteDot1XConfiguration;
			return soap_in__tds__DeleteDot1XConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot1XConfigurationsResponse"))
		{	*type = SOAP_TYPE__tds__GetDot1XConfigurationsResponse;
			return soap_in__tds__GetDot1XConfigurationsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot1XConfigurations"))
		{	*type = SOAP_TYPE__tds__GetDot1XConfigurations;
			return soap_in__tds__GetDot1XConfigurations(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot1XConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__GetDot1XConfigurationResponse;
			return soap_in__tds__GetDot1XConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDot1XConfiguration"))
		{	*type = SOAP_TYPE__tds__GetDot1XConfiguration;
			return soap_in__tds__GetDot1XConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDot1XConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__SetDot1XConfigurationResponse;
			return soap_in__tds__SetDot1XConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDot1XConfiguration"))
		{	*type = SOAP_TYPE__tds__SetDot1XConfiguration;
			return soap_in__tds__SetDot1XConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateDot1XConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__CreateDot1XConfigurationResponse;
			return soap_in__tds__CreateDot1XConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateDot1XConfiguration"))
		{	*type = SOAP_TYPE__tds__CreateDot1XConfiguration;
			return soap_in__tds__CreateDot1XConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:LoadCACertificatesResponse"))
		{	*type = SOAP_TYPE__tds__LoadCACertificatesResponse;
			return soap_in__tds__LoadCACertificatesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:LoadCACertificates"))
		{	*type = SOAP_TYPE__tds__LoadCACertificates;
			return soap_in__tds__LoadCACertificates(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCertificateInformationResponse"))
		{	*type = SOAP_TYPE__tds__GetCertificateInformationResponse;
			return soap_in__tds__GetCertificateInformationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCertificateInformation"))
		{	*type = SOAP_TYPE__tds__GetCertificateInformation;
			return soap_in__tds__GetCertificateInformation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:LoadCertificateWithPrivateKeyResponse"))
		{	*type = SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse;
			return soap_in__tds__LoadCertificateWithPrivateKeyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:LoadCertificateWithPrivateKey"))
		{	*type = SOAP_TYPE__tds__LoadCertificateWithPrivateKey;
			return soap_in__tds__LoadCertificateWithPrivateKey(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCACertificatesResponse"))
		{	*type = SOAP_TYPE__tds__GetCACertificatesResponse;
			return soap_in__tds__GetCACertificatesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCACertificates"))
		{	*type = SOAP_TYPE__tds__GetCACertificates;
			return soap_in__tds__GetCACertificates(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetClientCertificateModeResponse"))
		{	*type = SOAP_TYPE__tds__SetClientCertificateModeResponse;
			return soap_in__tds__SetClientCertificateModeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetClientCertificateMode"))
		{	*type = SOAP_TYPE__tds__SetClientCertificateMode;
			return soap_in__tds__SetClientCertificateMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetClientCertificateModeResponse"))
		{	*type = SOAP_TYPE__tds__GetClientCertificateModeResponse;
			return soap_in__tds__GetClientCertificateModeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetClientCertificateMode"))
		{	*type = SOAP_TYPE__tds__GetClientCertificateMode;
			return soap_in__tds__GetClientCertificateMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:LoadCertificatesResponse"))
		{	*type = SOAP_TYPE__tds__LoadCertificatesResponse;
			return soap_in__tds__LoadCertificatesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:LoadCertificates"))
		{	*type = SOAP_TYPE__tds__LoadCertificates;
			return soap_in__tds__LoadCertificates(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetPkcs10RequestResponse"))
		{	*type = SOAP_TYPE__tds__GetPkcs10RequestResponse;
			return soap_in__tds__GetPkcs10RequestResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetPkcs10Request"))
		{	*type = SOAP_TYPE__tds__GetPkcs10Request;
			return soap_in__tds__GetPkcs10Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteCertificatesResponse"))
		{	*type = SOAP_TYPE__tds__DeleteCertificatesResponse;
			return soap_in__tds__DeleteCertificatesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteCertificates"))
		{	*type = SOAP_TYPE__tds__DeleteCertificates;
			return soap_in__tds__DeleteCertificates(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetCertificatesStatusResponse"))
		{	*type = SOAP_TYPE__tds__SetCertificatesStatusResponse;
			return soap_in__tds__SetCertificatesStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetCertificatesStatus"))
		{	*type = SOAP_TYPE__tds__SetCertificatesStatus;
			return soap_in__tds__SetCertificatesStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCertificatesStatusResponse"))
		{	*type = SOAP_TYPE__tds__GetCertificatesStatusResponse;
			return soap_in__tds__GetCertificatesStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCertificatesStatus"))
		{	*type = SOAP_TYPE__tds__GetCertificatesStatus;
			return soap_in__tds__GetCertificatesStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCertificatesResponse"))
		{	*type = SOAP_TYPE__tds__GetCertificatesResponse;
			return soap_in__tds__GetCertificatesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCertificates"))
		{	*type = SOAP_TYPE__tds__GetCertificates;
			return soap_in__tds__GetCertificates(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateCertificateResponse"))
		{	*type = SOAP_TYPE__tds__CreateCertificateResponse;
			return soap_in__tds__CreateCertificateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateCertificate"))
		{	*type = SOAP_TYPE__tds__CreateCertificate;
			return soap_in__tds__CreateCertificate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetAccessPolicyResponse"))
		{	*type = SOAP_TYPE__tds__SetAccessPolicyResponse;
			return soap_in__tds__SetAccessPolicyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetAccessPolicy"))
		{	*type = SOAP_TYPE__tds__SetAccessPolicy;
			return soap_in__tds__SetAccessPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetAccessPolicyResponse"))
		{	*type = SOAP_TYPE__tds__GetAccessPolicyResponse;
			return soap_in__tds__GetAccessPolicyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetAccessPolicy"))
		{	*type = SOAP_TYPE__tds__GetAccessPolicy;
			return soap_in__tds__GetAccessPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:RemoveIPAddressFilterResponse"))
		{	*type = SOAP_TYPE__tds__RemoveIPAddressFilterResponse;
			return soap_in__tds__RemoveIPAddressFilterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:RemoveIPAddressFilter"))
		{	*type = SOAP_TYPE__tds__RemoveIPAddressFilter;
			return soap_in__tds__RemoveIPAddressFilter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:AddIPAddressFilterResponse"))
		{	*type = SOAP_TYPE__tds__AddIPAddressFilterResponse;
			return soap_in__tds__AddIPAddressFilterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:AddIPAddressFilter"))
		{	*type = SOAP_TYPE__tds__AddIPAddressFilter;
			return soap_in__tds__AddIPAddressFilter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetIPAddressFilterResponse"))
		{	*type = SOAP_TYPE__tds__SetIPAddressFilterResponse;
			return soap_in__tds__SetIPAddressFilterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetIPAddressFilter"))
		{	*type = SOAP_TYPE__tds__SetIPAddressFilter;
			return soap_in__tds__SetIPAddressFilter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetIPAddressFilterResponse"))
		{	*type = SOAP_TYPE__tds__GetIPAddressFilterResponse;
			return soap_in__tds__GetIPAddressFilterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetIPAddressFilter"))
		{	*type = SOAP_TYPE__tds__GetIPAddressFilter;
			return soap_in__tds__GetIPAddressFilter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetZeroConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__SetZeroConfigurationResponse;
			return soap_in__tds__SetZeroConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetZeroConfiguration"))
		{	*type = SOAP_TYPE__tds__SetZeroConfiguration;
			return soap_in__tds__SetZeroConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetZeroConfigurationResponse"))
		{	*type = SOAP_TYPE__tds__GetZeroConfigurationResponse;
			return soap_in__tds__GetZeroConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetZeroConfiguration"))
		{	*type = SOAP_TYPE__tds__GetZeroConfiguration;
			return soap_in__tds__GetZeroConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNetworkDefaultGatewayResponse"))
		{	*type = SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse;
			return soap_in__tds__SetNetworkDefaultGatewayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNetworkDefaultGateway"))
		{	*type = SOAP_TYPE__tds__SetNetworkDefaultGateway;
			return soap_in__tds__SetNetworkDefaultGateway(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNetworkDefaultGatewayResponse"))
		{	*type = SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse;
			return soap_in__tds__GetNetworkDefaultGatewayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNetworkDefaultGateway"))
		{	*type = SOAP_TYPE__tds__GetNetworkDefaultGateway;
			return soap_in__tds__GetNetworkDefaultGateway(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNetworkProtocolsResponse"))
		{	*type = SOAP_TYPE__tds__SetNetworkProtocolsResponse;
			return soap_in__tds__SetNetworkProtocolsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNetworkProtocols"))
		{	*type = SOAP_TYPE__tds__SetNetworkProtocols;
			return soap_in__tds__SetNetworkProtocols(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNetworkProtocolsResponse"))
		{	*type = SOAP_TYPE__tds__GetNetworkProtocolsResponse;
			return soap_in__tds__GetNetworkProtocolsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNetworkProtocols"))
		{	*type = SOAP_TYPE__tds__GetNetworkProtocols;
			return soap_in__tds__GetNetworkProtocols(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNetworkInterfacesResponse"))
		{	*type = SOAP_TYPE__tds__SetNetworkInterfacesResponse;
			return soap_in__tds__SetNetworkInterfacesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNetworkInterfaces"))
		{	*type = SOAP_TYPE__tds__SetNetworkInterfaces;
			return soap_in__tds__SetNetworkInterfaces(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNetworkInterfacesResponse"))
		{	*type = SOAP_TYPE__tds__GetNetworkInterfacesResponse;
			return soap_in__tds__GetNetworkInterfacesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNetworkInterfaces"))
		{	*type = SOAP_TYPE__tds__GetNetworkInterfaces;
			return soap_in__tds__GetNetworkInterfaces(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDynamicDNSResponse"))
		{	*type = SOAP_TYPE__tds__SetDynamicDNSResponse;
			return soap_in__tds__SetDynamicDNSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDynamicDNS"))
		{	*type = SOAP_TYPE__tds__SetDynamicDNS;
			return soap_in__tds__SetDynamicDNS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDynamicDNSResponse"))
		{	*type = SOAP_TYPE__tds__GetDynamicDNSResponse;
			return soap_in__tds__GetDynamicDNSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDynamicDNS"))
		{	*type = SOAP_TYPE__tds__GetDynamicDNS;
			return soap_in__tds__GetDynamicDNS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNTPResponse"))
		{	*type = SOAP_TYPE__tds__SetNTPResponse;
			return soap_in__tds__SetNTPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetNTP"))
		{	*type = SOAP_TYPE__tds__SetNTP;
			return soap_in__tds__SetNTP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNTPResponse"))
		{	*type = SOAP_TYPE__tds__GetNTPResponse;
			return soap_in__tds__GetNTPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetNTP"))
		{	*type = SOAP_TYPE__tds__GetNTP;
			return soap_in__tds__GetNTP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDNSResponse"))
		{	*type = SOAP_TYPE__tds__SetDNSResponse;
			return soap_in__tds__SetDNSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDNS"))
		{	*type = SOAP_TYPE__tds__SetDNS;
			return soap_in__tds__SetDNS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDNSResponse"))
		{	*type = SOAP_TYPE__tds__GetDNSResponse;
			return soap_in__tds__GetDNSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDNS"))
		{	*type = SOAP_TYPE__tds__GetDNS;
			return soap_in__tds__GetDNS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetHostnameFromDHCPResponse"))
		{	*type = SOAP_TYPE__tds__SetHostnameFromDHCPResponse;
			return soap_in__tds__SetHostnameFromDHCPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetHostnameFromDHCP"))
		{	*type = SOAP_TYPE__tds__SetHostnameFromDHCP;
			return soap_in__tds__SetHostnameFromDHCP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetHostnameResponse"))
		{	*type = SOAP_TYPE__tds__SetHostnameResponse;
			return soap_in__tds__SetHostnameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetHostname"))
		{	*type = SOAP_TYPE__tds__SetHostname;
			return soap_in__tds__SetHostname(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetHostnameResponse"))
		{	*type = SOAP_TYPE__tds__GetHostnameResponse;
			return soap_in__tds__GetHostnameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetHostname"))
		{	*type = SOAP_TYPE__tds__GetHostname;
			return soap_in__tds__GetHostname(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCapabilitiesResponse"))
		{	*type = SOAP_TYPE__tds__GetCapabilitiesResponse;
			return soap_in__tds__GetCapabilitiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetCapabilities"))
		{	*type = SOAP_TYPE__tds__GetCapabilities;
			return soap_in__tds__GetCapabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetWsdlUrlResponse"))
		{	*type = SOAP_TYPE__tds__GetWsdlUrlResponse;
			return soap_in__tds__GetWsdlUrlResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetWsdlUrl"))
		{	*type = SOAP_TYPE__tds__GetWsdlUrl;
			return soap_in__tds__GetWsdlUrl(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetUserResponse"))
		{	*type = SOAP_TYPE__tds__SetUserResponse;
			return soap_in__tds__SetUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetUser"))
		{	*type = SOAP_TYPE__tds__SetUser;
			return soap_in__tds__SetUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteUsersResponse"))
		{	*type = SOAP_TYPE__tds__DeleteUsersResponse;
			return soap_in__tds__DeleteUsersResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:DeleteUsers"))
		{	*type = SOAP_TYPE__tds__DeleteUsers;
			return soap_in__tds__DeleteUsers(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateUsersResponse"))
		{	*type = SOAP_TYPE__tds__CreateUsersResponse;
			return soap_in__tds__CreateUsersResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:CreateUsers"))
		{	*type = SOAP_TYPE__tds__CreateUsers;
			return soap_in__tds__CreateUsers(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetUsersResponse"))
		{	*type = SOAP_TYPE__tds__GetUsersResponse;
			return soap_in__tds__GetUsersResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetUsers"))
		{	*type = SOAP_TYPE__tds__GetUsers;
			return soap_in__tds__GetUsers(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRemoteUserResponse"))
		{	*type = SOAP_TYPE__tds__SetRemoteUserResponse;
			return soap_in__tds__SetRemoteUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRemoteUser"))
		{	*type = SOAP_TYPE__tds__SetRemoteUser;
			return soap_in__tds__SetRemoteUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetRemoteUserResponse"))
		{	*type = SOAP_TYPE__tds__GetRemoteUserResponse;
			return soap_in__tds__GetRemoteUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetRemoteUser"))
		{	*type = SOAP_TYPE__tds__GetRemoteUser;
			return soap_in__tds__GetRemoteUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetEndpointReferenceResponse"))
		{	*type = SOAP_TYPE__tds__GetEndpointReferenceResponse;
			return soap_in__tds__GetEndpointReferenceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetEndpointReference"))
		{	*type = SOAP_TYPE__tds__GetEndpointReference;
			return soap_in__tds__GetEndpointReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDPAddressesResponse"))
		{	*type = SOAP_TYPE__tds__SetDPAddressesResponse;
			return soap_in__tds__SetDPAddressesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDPAddresses"))
		{	*type = SOAP_TYPE__tds__SetDPAddresses;
			return soap_in__tds__SetDPAddresses(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDPAddressesResponse"))
		{	*type = SOAP_TYPE__tds__GetDPAddressesResponse;
			return soap_in__tds__GetDPAddressesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDPAddresses"))
		{	*type = SOAP_TYPE__tds__GetDPAddresses;
			return soap_in__tds__GetDPAddresses(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRemoteDiscoveryModeResponse"))
		{	*type = SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse;
			return soap_in__tds__SetRemoteDiscoveryModeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetRemoteDiscoveryMode"))
		{	*type = SOAP_TYPE__tds__SetRemoteDiscoveryMode;
			return soap_in__tds__SetRemoteDiscoveryMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetRemoteDiscoveryModeResponse"))
		{	*type = SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse;
			return soap_in__tds__GetRemoteDiscoveryModeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetRemoteDiscoveryMode"))
		{	*type = SOAP_TYPE__tds__GetRemoteDiscoveryMode;
			return soap_in__tds__GetRemoteDiscoveryMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDiscoveryModeResponse"))
		{	*type = SOAP_TYPE__tds__SetDiscoveryModeResponse;
			return soap_in__tds__SetDiscoveryModeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetDiscoveryMode"))
		{	*type = SOAP_TYPE__tds__SetDiscoveryMode;
			return soap_in__tds__SetDiscoveryMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDiscoveryModeResponse"))
		{	*type = SOAP_TYPE__tds__GetDiscoveryModeResponse;
			return soap_in__tds__GetDiscoveryModeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDiscoveryMode"))
		{	*type = SOAP_TYPE__tds__GetDiscoveryMode;
			return soap_in__tds__GetDiscoveryMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:RemoveScopesResponse"))
		{	*type = SOAP_TYPE__tds__RemoveScopesResponse;
			return soap_in__tds__RemoveScopesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:RemoveScopes"))
		{	*type = SOAP_TYPE__tds__RemoveScopes;
			return soap_in__tds__RemoveScopes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:AddScopesResponse"))
		{	*type = SOAP_TYPE__tds__AddScopesResponse;
			return soap_in__tds__AddScopesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:AddScopes"))
		{	*type = SOAP_TYPE__tds__AddScopes;
			return soap_in__tds__AddScopes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetScopesResponse"))
		{	*type = SOAP_TYPE__tds__SetScopesResponse;
			return soap_in__tds__SetScopesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetScopes"))
		{	*type = SOAP_TYPE__tds__SetScopes;
			return soap_in__tds__SetScopes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetScopesResponse"))
		{	*type = SOAP_TYPE__tds__GetScopesResponse;
			return soap_in__tds__GetScopesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetScopes"))
		{	*type = SOAP_TYPE__tds__GetScopes;
			return soap_in__tds__GetScopes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemLogResponse"))
		{	*type = SOAP_TYPE__tds__GetSystemLogResponse;
			return soap_in__tds__GetSystemLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemLog"))
		{	*type = SOAP_TYPE__tds__GetSystemLog;
			return soap_in__tds__GetSystemLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemSupportInformationResponse"))
		{	*type = SOAP_TYPE__tds__GetSystemSupportInformationResponse;
			return soap_in__tds__GetSystemSupportInformationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemSupportInformation"))
		{	*type = SOAP_TYPE__tds__GetSystemSupportInformation;
			return soap_in__tds__GetSystemSupportInformation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemBackupResponse"))
		{	*type = SOAP_TYPE__tds__GetSystemBackupResponse;
			return soap_in__tds__GetSystemBackupResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemBackup"))
		{	*type = SOAP_TYPE__tds__GetSystemBackup;
			return soap_in__tds__GetSystemBackup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:RestoreSystemResponse"))
		{	*type = SOAP_TYPE__tds__RestoreSystemResponse;
			return soap_in__tds__RestoreSystemResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:RestoreSystem"))
		{	*type = SOAP_TYPE__tds__RestoreSystem;
			return soap_in__tds__RestoreSystem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SystemRebootResponse"))
		{	*type = SOAP_TYPE__tds__SystemRebootResponse;
			return soap_in__tds__SystemRebootResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SystemReboot"))
		{	*type = SOAP_TYPE__tds__SystemReboot;
			return soap_in__tds__SystemReboot(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:UpgradeSystemFirmwareResponse"))
		{	*type = SOAP_TYPE__tds__UpgradeSystemFirmwareResponse;
			return soap_in__tds__UpgradeSystemFirmwareResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:UpgradeSystemFirmware"))
		{	*type = SOAP_TYPE__tds__UpgradeSystemFirmware;
			return soap_in__tds__UpgradeSystemFirmware(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetSystemFactoryDefaultResponse"))
		{	*type = SOAP_TYPE__tds__SetSystemFactoryDefaultResponse;
			return soap_in__tds__SetSystemFactoryDefaultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetSystemFactoryDefault"))
		{	*type = SOAP_TYPE__tds__SetSystemFactoryDefault;
			return soap_in__tds__SetSystemFactoryDefault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemDateAndTimeResponse"))
		{	*type = SOAP_TYPE__tds__GetSystemDateAndTimeResponse;
			return soap_in__tds__GetSystemDateAndTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetSystemDateAndTime"))
		{	*type = SOAP_TYPE__tds__GetSystemDateAndTime;
			return soap_in__tds__GetSystemDateAndTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetSystemDateAndTimeResponse"))
		{	*type = SOAP_TYPE__tds__SetSystemDateAndTimeResponse;
			return soap_in__tds__SetSystemDateAndTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:SetSystemDateAndTime"))
		{	*type = SOAP_TYPE__tds__SetSystemDateAndTime;
			return soap_in__tds__SetSystemDateAndTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDeviceInformationResponse"))
		{	*type = SOAP_TYPE__tds__GetDeviceInformationResponse;
			return soap_in__tds__GetDeviceInformationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetDeviceInformation"))
		{	*type = SOAP_TYPE__tds__GetDeviceInformation;
			return soap_in__tds__GetDeviceInformation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetServiceCapabilitiesResponse"))
		{	*type = SOAP_TYPE__tds__GetServiceCapabilitiesResponse;
			return soap_in__tds__GetServiceCapabilitiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetServiceCapabilities"))
		{	*type = SOAP_TYPE__tds__GetServiceCapabilities;
			return soap_in__tds__GetServiceCapabilities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetServicesResponse"))
		{	*type = SOAP_TYPE__tds__GetServicesResponse;
			return soap_in__tds__GetServicesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tds:GetServices"))
		{	*type = SOAP_TYPE__tds__GetServices;
			return soap_in__tds__GetServices(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xml:lang"))
		{	*type = SOAP_TYPE__xml__lang;
			return soap_in__xml__lang(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xmime:contentType"))
		{	*type = SOAP_TYPE__xmime__contentType;
			return soap_in__xmime__contentType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:Security"))
		{	*type = SOAP_TYPE__wsse__Security;
			return soap_in__wsse__Security(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedAttribute"))
		{	*type = SOAP_TYPE__saml2__EncryptedAttribute;
			return soap_in__saml2__EncryptedAttribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Attribute"))
		{	*type = SOAP_TYPE__saml2__Attribute;
			return soap_in__saml2__Attribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AttributeStatement"))
		{	*type = SOAP_TYPE__saml2__AttributeStatement;
			return soap_in__saml2__AttributeStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Evidence"))
		{	*type = SOAP_TYPE__saml2__Evidence;
			return soap_in__saml2__Evidence(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Action"))
		{	*type = SOAP_TYPE__saml2__Action;
			return soap_in__saml2__Action(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthzDecisionStatement"))
		{	*type = SOAP_TYPE__saml2__AuthzDecisionStatement;
			return soap_in__saml2__AuthzDecisionStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContext"))
		{	*type = SOAP_TYPE__saml2__AuthnContext;
			return soap_in__saml2__AuthnContext(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectLocality"))
		{	*type = SOAP_TYPE__saml2__SubjectLocality;
			return soap_in__saml2__SubjectLocality(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnStatement"))
		{	*type = SOAP_TYPE__saml2__AuthnStatement;
			return soap_in__saml2__AuthnStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Statement"))
		{	*type = SOAP_TYPE__saml2__Statement;
			return soap_in__saml2__Statement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedAssertion"))
		{	*type = SOAP_TYPE__saml2__EncryptedAssertion;
			return soap_in__saml2__EncryptedAssertion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Advice"))
		{	*type = SOAP_TYPE__saml2__Advice;
			return soap_in__saml2__Advice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ProxyRestriction"))
		{	*type = SOAP_TYPE__saml2__ProxyRestriction;
			return soap_in__saml2__ProxyRestriction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:OneTimeUse"))
		{	*type = SOAP_TYPE__saml2__OneTimeUse;
			return soap_in__saml2__OneTimeUse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AudienceRestriction"))
		{	*type = SOAP_TYPE__saml2__AudienceRestriction;
			return soap_in__saml2__AudienceRestriction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Condition"))
		{	*type = SOAP_TYPE__saml2__Condition;
			return soap_in__saml2__Condition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Conditions"))
		{	*type = SOAP_TYPE__saml2__Conditions;
			return soap_in__saml2__Conditions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmationData"))
		{	*type = SOAP_TYPE__saml2__SubjectConfirmationData;
			return soap_in__saml2__SubjectConfirmationData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmation"))
		{	*type = SOAP_TYPE__saml2__SubjectConfirmation;
			return soap_in__saml2__SubjectConfirmation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Subject"))
		{	*type = SOAP_TYPE__saml2__Subject;
			return soap_in__saml2__Subject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Assertion"))
		{	*type = SOAP_TYPE__saml2__Assertion;
			return soap_in__saml2__Assertion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Issuer"))
		{	*type = SOAP_TYPE__saml2__Issuer;
			return soap_in__saml2__Issuer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedID"))
		{	*type = SOAP_TYPE__saml2__EncryptedID;
			return soap_in__saml2__EncryptedID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:NameID"))
		{	*type = SOAP_TYPE__saml2__NameID;
			return soap_in__saml2__NameID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:BaseID"))
		{	*type = SOAP_TYPE__saml2__BaseID;
			return soap_in__saml2__BaseID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Attribute"))
		{	*type = SOAP_TYPE__saml1__Attribute;
			return soap_in__saml1__Attribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeDesignator"))
		{	*type = SOAP_TYPE__saml1__AttributeDesignator;
			return soap_in__saml1__AttributeDesignator(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeStatement"))
		{	*type = SOAP_TYPE__saml1__AttributeStatement;
			return soap_in__saml1__AttributeStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Evidence"))
		{	*type = SOAP_TYPE__saml1__Evidence;
			return soap_in__saml1__Evidence(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Action"))
		{	*type = SOAP_TYPE__saml1__Action;
			return soap_in__saml1__Action(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorizationDecisionStatement"))
		{	*type = SOAP_TYPE__saml1__AuthorizationDecisionStatement;
			return soap_in__saml1__AuthorizationDecisionStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorityBinding"))
		{	*type = SOAP_TYPE__saml1__AuthorityBinding;
			return soap_in__saml1__AuthorityBinding(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectLocality"))
		{	*type = SOAP_TYPE__saml1__SubjectLocality;
			return soap_in__saml1__SubjectLocality(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthenticationStatement"))
		{	*type = SOAP_TYPE__saml1__AuthenticationStatement;
			return soap_in__saml1__AuthenticationStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectConfirmation"))
		{	*type = SOAP_TYPE__saml1__SubjectConfirmation;
			return soap_in__saml1__SubjectConfirmation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:NameIdentifier"))
		{	*type = SOAP_TYPE__saml1__NameIdentifier;
			return soap_in__saml1__NameIdentifier(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Subject"))
		{	*type = SOAP_TYPE__saml1__Subject;
			return soap_in__saml1__Subject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectStatement"))
		{	*type = SOAP_TYPE__saml1__SubjectStatement;
			return soap_in__saml1__SubjectStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Statement"))
		{	*type = SOAP_TYPE__saml1__Statement;
			return soap_in__saml1__Statement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Advice"))
		{	*type = SOAP_TYPE__saml1__Advice;
			return soap_in__saml1__Advice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:DoNotCacheCondition"))
		{	*type = SOAP_TYPE__saml1__DoNotCacheCondition;
			return soap_in__saml1__DoNotCacheCondition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AudienceRestrictionCondition"))
		{	*type = SOAP_TYPE__saml1__AudienceRestrictionCondition;
			return soap_in__saml1__AudienceRestrictionCondition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Condition"))
		{	*type = SOAP_TYPE__saml1__Condition;
			return soap_in__saml1__Condition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Conditions"))
		{	*type = SOAP_TYPE__saml1__Conditions;
			return soap_in__saml1__Conditions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Assertion"))
		{	*type = SOAP_TYPE__saml1__Assertion;
			return soap_in__saml1__Assertion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:ReferenceList"))
		{	*type = SOAP_TYPE__xenc__ReferenceList;
			return soap_in__xenc__ReferenceList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:KeyInfo"))
		{	*type = SOAP_TYPE__ds__KeyInfo;
			return soap_in__ds__KeyInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:Transform"))
		{	*type = SOAP_TYPE__ds__Transform;
			return soap_in__ds__Transform(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "c14n:InclusiveNamespaces"))
		{	*type = SOAP_TYPE__c14n__InclusiveNamespaces;
			return soap_in__c14n__InclusiveNamespaces(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:Signature"))
		{	*type = SOAP_TYPE__ds__Signature;
			return soap_in__ds__Signature(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:SecurityTokenReference"))
		{	*type = SOAP_TYPE__wsse__SecurityTokenReference;
			return soap_in__wsse__SecurityTokenReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:KeyIdentifier"))
		{	*type = SOAP_TYPE__wsse__KeyIdentifier;
			return soap_in__wsse__KeyIdentifier(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:Embedded"))
		{	*type = SOAP_TYPE__wsse__Embedded;
			return soap_in__wsse__Embedded(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:Reference"))
		{	*type = SOAP_TYPE__wsse__Reference;
			return soap_in__wsse__Reference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:BinarySecurityToken"))
		{	*type = SOAP_TYPE__wsse__BinarySecurityToken;
			return soap_in__wsse__BinarySecurityToken(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:Password"))
		{	*type = SOAP_TYPE__wsse__Password;
			return soap_in__wsse__Password(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:UsernameToken"))
		{	*type = SOAP_TYPE__wsse__UsernameToken;
			return soap_in__wsse__UsernameToken(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsu:Timestamp"))
		{	*type = SOAP_TYPE__wsu__Timestamp;
			return soap_in__wsu__Timestamp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:ProbeMatches"))
		{	*type = SOAP_TYPE__wsd__ProbeMatches;
			return soap_in__wsd__ProbeMatches(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsd:Probe"))
		{	*type = SOAP_TYPE__wsd__Probe;
			return soap_in__wsd__Probe(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:TerminationTime"))
		{	*type = SOAP_TYPE__wsnt__TerminationTime;
			return soap_in__wsnt__TerminationTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:CurrentTime"))
		{	*type = SOAP_TYPE__wsnt__CurrentTime;
			return soap_in__wsnt__CurrentTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ProducerReference"))
		{	*type = SOAP_TYPE__wsnt__ProducerReference;
			return soap_in__wsnt__ProducerReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:SubscriptionReference"))
		{	*type = SOAP_TYPE__wsnt__SubscriptionReference;
			return soap_in__wsnt__SubscriptionReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:CreationTime"))
		{	*type = SOAP_TYPE__wsnt__CreationTime;
			return soap_in__wsnt__CreationTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsnt:ConsumerReference"))
		{	*type = SOAP_TYPE__wsnt__ConsumerReference;
			return soap_in__wsnt__ConsumerReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ProblemAction"))
		{	*type = SOAP_TYPE__wsa5__ProblemAction;
			return soap_in__wsa5__ProblemAction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:FaultTo"))
		{	*type = SOAP_TYPE__wsa5__FaultTo;
			return soap_in__wsa5__FaultTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:From"))
		{	*type = SOAP_TYPE__wsa5__From;
			return soap_in__wsa5__From(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ReplyTo"))
		{	*type = SOAP_TYPE__wsa5__ReplyTo;
			return soap_in__wsa5__ReplyTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:RelatesTo"))
		{	*type = SOAP_TYPE__wsa5__RelatesTo;
			return soap_in__wsa5__RelatesTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:Metadata"))
		{	*type = SOAP_TYPE__wsa5__Metadata;
			return soap_in__wsa5__Metadata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:ReferenceParameters"))
		{	*type = SOAP_TYPE__wsa5__ReferenceParameters;
			return soap_in__wsa5__ReferenceParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa5:EndpointReference"))
		{	*type = SOAP_TYPE__wsa5__EndpointReference;
			return soap_in__wsa5__EndpointReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthenticatingAuthority"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AuthenticatingAuthority;
			s = soap_in__saml2__AuthenticatingAuthority(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContextDeclRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AuthnContextDeclRef;
			s = soap_in__saml2__AuthnContextDeclRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContextClassRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AuthnContextClassRef;
			s = soap_in__saml2__AuthnContextClassRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:Audience"))
		{	char **s;
			*type = SOAP_TYPE__saml2__Audience;
			s = soap_in__saml2__Audience(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AssertionURIRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AssertionURIRef;
			s = soap_in__saml2__AssertionURIRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AssertionIDRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AssertionIDRef;
			s = soap_in__saml2__AssertionIDRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml1:ConfirmationMethod"))
		{	char **s;
			*type = SOAP_TYPE__saml1__ConfirmationMethod;
			s = soap_in__saml1__ConfirmationMethod(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml1:Audience"))
		{	char **s;
			*type = SOAP_TYPE__saml1__Audience;
			s = soap_in__saml1__Audience(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml1:AssertionIDReference"))
		{	char **s;
			*type = SOAP_TYPE__saml1__AssertionIDReference;
			s = soap_in__saml1__AssertionIDReference(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "ds:SignatureValue"))
		{	char **s;
			*type = SOAP_TYPE__ds__SignatureValue;
			s = soap_in__ds__SignatureValue(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:ProblemIRI"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__ProblemIRI;
			s = soap_in__wsa5__ProblemIRI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:Action"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__Action;
			s = soap_in__wsa5__Action(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:To"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__To;
			s = soap_in__wsa5__To(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa5:MessageID"))
		{	char **s;
			*type = SOAP_TYPE__wsa5__MessageID;
			s = soap_in__wsa5__MessageID(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_tt__IANA_IfTypes:
		return soap_out_tt__IANA_IfTypes(soap, tag, id, (const int *)ptr, "tt:IANA-IfTypes");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__wsd__MetadataVersion:
		return soap_out__wsd__MetadataVersion(soap, "wsd:MetadataVersion", id, (const unsigned int *)ptr, "");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE__wsa5__RetryAfter:
		return soap_out__wsa5__RetryAfter(soap, "wsa5:RetryAfter", id, (const ULONG64 *)ptr, "");
	case SOAP_TYPE_ULONG64:
		return soap_out_ULONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_saml2__DecisionType:
		return soap_out_saml2__DecisionType(soap, tag, id, (const enum saml2__DecisionType *)ptr, "saml2:DecisionType");
	case SOAP_TYPE_saml1__DecisionType:
		return soap_out_saml1__DecisionType(soap, tag, id, (const enum saml1__DecisionType *)ptr, "saml1:DecisionType");
	case SOAP_TYPE_wsc__FaultCodeType:
		return soap_out_wsc__FaultCodeType(soap, tag, id, (const enum wsc__FaultCodeType *)ptr, "wsc:FaultCodeType");
	case SOAP_TYPE_wsse__FaultcodeEnum:
		return soap_out_wsse__FaultcodeEnum(soap, tag, id, (const enum wsse__FaultcodeEnum *)ptr, "wsse:FaultcodeEnum");
	case SOAP_TYPE_wsu__tTimestampFault:
		return soap_out_wsu__tTimestampFault(soap, tag, id, (const enum wsu__tTimestampFault *)ptr, "wsu:tTimestampFault");
	case SOAP_TYPE__wstop__topic:
		return soap_out__wstop__topic(soap, "wstop:topic", id, (const bool *)ptr, "");
	case SOAP_TYPE__wsnt__FixedTopicSet:
		return soap_out__wsnt__FixedTopicSet(soap, "wsnt:FixedTopicSet", id, (const bool *)ptr, "");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__wsa5__IsReferenceParameter:
		return soap_out__wsa5__IsReferenceParameter(soap, tag, id, (const enum _wsa5__IsReferenceParameter *)ptr, "wsa5:IsReferenceParameter");
	case SOAP_TYPE_wsa5__FaultCodesType:
		return soap_out_wsa5__FaultCodesType(soap, tag, id, (const enum wsa5__FaultCodesType *)ptr, "wsa5:FaultCodesType");
	case SOAP_TYPE_wsa5__RelationshipType:
		return soap_out_wsa5__RelationshipType(soap, tag, id, (const enum wsa5__RelationshipType *)ptr, "wsa5:RelationshipType");
	case SOAP_TYPE_wsa__FaultSubcodeValues:
		return soap_out_wsa__FaultSubcodeValues(soap, tag, id, (const wsa__FaultSubcodeValues *)ptr, "wsa:FaultSubcodeValues");
	case SOAP_TYPE_wsa__RelationshipTypeValues:
		return soap_out_wsa__RelationshipTypeValues(soap, tag, id, (const wsa__RelationshipTypeValues *)ptr, "wsa:RelationshipTypeValues");
	case SOAP_TYPE_wsd__FaultCodeType:
		return soap_out_wsd__FaultCodeType(soap, tag, id, (const wsd__FaultCodeType *)ptr, "wsd:FaultCodeType");
	case SOAP_TYPE_wsd__RelationshipType:
		return soap_out_wsd__RelationshipType(soap, tag, id, (const wsd__RelationshipType *)ptr, "wsd:RelationshipType");
	case SOAP_TYPE_tt__Entity:
		return soap_out_tt__Entity(soap, tag, id, (const tt__Entity *)ptr, "tt:Entity");
	case SOAP_TYPE_tt__MoveStatus:
		return soap_out_tt__MoveStatus(soap, tag, id, (const tt__MoveStatus *)ptr, "tt:MoveStatus");
	case SOAP_TYPE_tt__OSDType:
		return soap_out_tt__OSDType(soap, tag, id, (const tt__OSDType *)ptr, "tt:OSDType");
	case SOAP_TYPE_tt__ModeOfOperation:
		return soap_out_tt__ModeOfOperation(soap, tag, id, (const tt__ModeOfOperation *)ptr, "tt:ModeOfOperation");
	case SOAP_TYPE_tt__TrackType:
		return soap_out_tt__TrackType(soap, tag, id, (const tt__TrackType *)ptr, "tt:TrackType");
	case SOAP_TYPE_tt__RecordingStatus:
		return soap_out_tt__RecordingStatus(soap, tag, id, (const tt__RecordingStatus *)ptr, "tt:RecordingStatus");
	case SOAP_TYPE_tt__SearchState:
		return soap_out_tt__SearchState(soap, tag, id, (const tt__SearchState *)ptr, "tt:SearchState");
	case SOAP_TYPE_tt__ReceiverState:
		return soap_out_tt__ReceiverState(soap, tag, id, (const tt__ReceiverState *)ptr, "tt:ReceiverState");
	case SOAP_TYPE_tt__ReceiverMode:
		return soap_out_tt__ReceiverMode(soap, tag, id, (const tt__ReceiverMode *)ptr, "tt:ReceiverMode");
	case SOAP_TYPE_tt__Direction:
		return soap_out_tt__Direction(soap, tag, id, (const tt__Direction *)ptr, "tt:Direction");
	case SOAP_TYPE_tt__PropertyOperation:
		return soap_out_tt__PropertyOperation(soap, tag, id, (const tt__PropertyOperation *)ptr, "tt:PropertyOperation");
	case SOAP_TYPE_tt__DefoggingMode:
		return soap_out_tt__DefoggingMode(soap, tag, id, (const tt__DefoggingMode *)ptr, "tt:DefoggingMode");
	case SOAP_TYPE_tt__ToneCompensationMode:
		return soap_out_tt__ToneCompensationMode(soap, tag, id, (const tt__ToneCompensationMode *)ptr, "tt:ToneCompensationMode");
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType:
		return soap_out_tt__IrCutFilterAutoBoundaryType(soap, tag, id, (const tt__IrCutFilterAutoBoundaryType *)ptr, "tt:IrCutFilterAutoBoundaryType");
	case SOAP_TYPE_tt__ImageStabilizationMode:
		return soap_out_tt__ImageStabilizationMode(soap, tag, id, (const tt__ImageStabilizationMode *)ptr, "tt:ImageStabilizationMode");
	case SOAP_TYPE_tt__IrCutFilterMode:
		return soap_out_tt__IrCutFilterMode(soap, tag, id, (const tt__IrCutFilterMode *)ptr, "tt:IrCutFilterMode");
	case SOAP_TYPE_tt__WhiteBalanceMode:
		return soap_out_tt__WhiteBalanceMode(soap, tag, id, (const tt__WhiteBalanceMode *)ptr, "tt:WhiteBalanceMode");
	case SOAP_TYPE_tt__Enabled:
		return soap_out_tt__Enabled(soap, tag, id, (const tt__Enabled *)ptr, "tt:Enabled");
	case SOAP_TYPE_tt__ExposureMode:
		return soap_out_tt__ExposureMode(soap, tag, id, (const tt__ExposureMode *)ptr, "tt:ExposureMode");
	case SOAP_TYPE_tt__ExposurePriority:
		return soap_out_tt__ExposurePriority(soap, tag, id, (const tt__ExposurePriority *)ptr, "tt:ExposurePriority");
	case SOAP_TYPE_tt__BacklightCompensationMode:
		return soap_out_tt__BacklightCompensationMode(soap, tag, id, (const tt__BacklightCompensationMode *)ptr, "tt:BacklightCompensationMode");
	case SOAP_TYPE_tt__WideDynamicMode:
		return soap_out_tt__WideDynamicMode(soap, tag, id, (const tt__WideDynamicMode *)ptr, "tt:WideDynamicMode");
	case SOAP_TYPE_tt__AutoFocusMode:
		return soap_out_tt__AutoFocusMode(soap, tag, id, (const tt__AutoFocusMode *)ptr, "tt:AutoFocusMode");
	case SOAP_TYPE_tt__PTZPresetTourOperation:
		return soap_out_tt__PTZPresetTourOperation(soap, tag, id, (const tt__PTZPresetTourOperation *)ptr, "tt:PTZPresetTourOperation");
	case SOAP_TYPE_tt__PTZPresetTourDirection:
		return soap_out_tt__PTZPresetTourDirection(soap, tag, id, (const tt__PTZPresetTourDirection *)ptr, "tt:PTZPresetTourDirection");
	case SOAP_TYPE_tt__PTZPresetTourState:
		return soap_out_tt__PTZPresetTourState(soap, tag, id, (const tt__PTZPresetTourState *)ptr, "tt:PTZPresetTourState");
	case SOAP_TYPE_tt__ReverseMode:
		return soap_out_tt__ReverseMode(soap, tag, id, (const tt__ReverseMode *)ptr, "tt:ReverseMode");
	case SOAP_TYPE_tt__EFlipMode:
		return soap_out_tt__EFlipMode(soap, tag, id, (const tt__EFlipMode *)ptr, "tt:EFlipMode");
	case SOAP_TYPE_tt__DigitalIdleState:
		return soap_out_tt__DigitalIdleState(soap, tag, id, (const tt__DigitalIdleState *)ptr, "tt:DigitalIdleState");
	case SOAP_TYPE_tt__RelayMode:
		return soap_out_tt__RelayMode(soap, tag, id, (const tt__RelayMode *)ptr, "tt:RelayMode");
	case SOAP_TYPE_tt__RelayIdleState:
		return soap_out_tt__RelayIdleState(soap, tag, id, (const tt__RelayIdleState *)ptr, "tt:RelayIdleState");
	case SOAP_TYPE_tt__RelayLogicalState:
		return soap_out_tt__RelayLogicalState(soap, tag, id, (const tt__RelayLogicalState *)ptr, "tt:RelayLogicalState");
	case SOAP_TYPE_tt__UserLevel:
		return soap_out_tt__UserLevel(soap, tag, id, (const tt__UserLevel *)ptr, "tt:UserLevel");
	case SOAP_TYPE_tt__SetDateTimeType:
		return soap_out_tt__SetDateTimeType(soap, tag, id, (const tt__SetDateTimeType *)ptr, "tt:SetDateTimeType");
	case SOAP_TYPE_tt__FactoryDefaultType:
		return soap_out_tt__FactoryDefaultType(soap, tag, id, (const tt__FactoryDefaultType *)ptr, "tt:FactoryDefaultType");
	case SOAP_TYPE_tt__SystemLogType:
		return soap_out_tt__SystemLogType(soap, tag, id, (const tt__SystemLogType *)ptr, "tt:SystemLogType");
	case SOAP_TYPE_tt__CapabilityCategory:
		return soap_out_tt__CapabilityCategory(soap, tag, id, (const tt__CapabilityCategory *)ptr, "tt:CapabilityCategory");
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite:
		return soap_out_tt__Dot11AuthAndMangementSuite(soap, tag, id, (const tt__Dot11AuthAndMangementSuite *)ptr, "tt:Dot11AuthAndMangementSuite");
	case SOAP_TYPE_tt__Dot11SignalStrength:
		return soap_out_tt__Dot11SignalStrength(soap, tag, id, (const tt__Dot11SignalStrength *)ptr, "tt:Dot11SignalStrength");
	case SOAP_TYPE_tt__Dot11Cipher:
		return soap_out_tt__Dot11Cipher(soap, tag, id, (const tt__Dot11Cipher *)ptr, "tt:Dot11Cipher");
	case SOAP_TYPE_tt__Dot11SecurityMode:
		return soap_out_tt__Dot11SecurityMode(soap, tag, id, (const tt__Dot11SecurityMode *)ptr, "tt:Dot11SecurityMode");
	case SOAP_TYPE_tt__Dot11StationMode:
		return soap_out_tt__Dot11StationMode(soap, tag, id, (const tt__Dot11StationMode *)ptr, "tt:Dot11StationMode");
	case SOAP_TYPE_tt__DynamicDNSType:
		return soap_out_tt__DynamicDNSType(soap, tag, id, (const tt__DynamicDNSType *)ptr, "tt:DynamicDNSType");
	case SOAP_TYPE_tt__IPAddressFilterType:
		return soap_out_tt__IPAddressFilterType(soap, tag, id, (const tt__IPAddressFilterType *)ptr, "tt:IPAddressFilterType");
	case SOAP_TYPE_tt__IPType:
		return soap_out_tt__IPType(soap, tag, id, (const tt__IPType *)ptr, "tt:IPType");
	case SOAP_TYPE_tt__NetworkHostType:
		return soap_out_tt__NetworkHostType(soap, tag, id, (const tt__NetworkHostType *)ptr, "tt:NetworkHostType");
	case SOAP_TYPE_tt__NetworkProtocolType:
		return soap_out_tt__NetworkProtocolType(soap, tag, id, (const tt__NetworkProtocolType *)ptr, "tt:NetworkProtocolType");
	case SOAP_TYPE_tt__IPv6DHCPConfiguration:
		return soap_out_tt__IPv6DHCPConfiguration(soap, tag, id, (const tt__IPv6DHCPConfiguration *)ptr, "tt:IPv6DHCPConfiguration");
	case SOAP_TYPE_tt__Duplex:
		return soap_out_tt__Duplex(soap, tag, id, (const tt__Duplex *)ptr, "tt:Duplex");
	case SOAP_TYPE_tt__DiscoveryMode:
		return soap_out_tt__DiscoveryMode(soap, tag, id, (const tt__DiscoveryMode *)ptr, "tt:DiscoveryMode");
	case SOAP_TYPE_tt__ScopeDefinition:
		return soap_out_tt__ScopeDefinition(soap, tag, id, (const tt__ScopeDefinition *)ptr, "tt:ScopeDefinition");
	case SOAP_TYPE_tt__TransportProtocol:
		return soap_out_tt__TransportProtocol(soap, tag, id, (const tt__TransportProtocol *)ptr, "tt:TransportProtocol");
	case SOAP_TYPE_tt__StreamType:
		return soap_out_tt__StreamType(soap, tag, id, (const tt__StreamType *)ptr, "tt:StreamType");
	case SOAP_TYPE_tt__MetadataCompressionType:
		return soap_out_tt__MetadataCompressionType(soap, tag, id, (const tt__MetadataCompressionType *)ptr, "tt:MetadataCompressionType");
	case SOAP_TYPE_tt__AudioEncodingMimeNames:
		return soap_out_tt__AudioEncodingMimeNames(soap, tag, id, (const tt__AudioEncodingMimeNames *)ptr, "tt:AudioEncodingMimeNames");
	case SOAP_TYPE_tt__AudioEncoding:
		return soap_out_tt__AudioEncoding(soap, tag, id, (const tt__AudioEncoding *)ptr, "tt:AudioEncoding");
	case SOAP_TYPE_tt__VideoEncodingProfiles:
		return soap_out_tt__VideoEncodingProfiles(soap, tag, id, (const tt__VideoEncodingProfiles *)ptr, "tt:VideoEncodingProfiles");
	case SOAP_TYPE_tt__VideoEncodingMimeNames:
		return soap_out_tt__VideoEncodingMimeNames(soap, tag, id, (const tt__VideoEncodingMimeNames *)ptr, "tt:VideoEncodingMimeNames");
	case SOAP_TYPE_tt__H264Profile:
		return soap_out_tt__H264Profile(soap, tag, id, (const tt__H264Profile *)ptr, "tt:H264Profile");
	case SOAP_TYPE_tt__Mpeg4Profile:
		return soap_out_tt__Mpeg4Profile(soap, tag, id, (const tt__Mpeg4Profile *)ptr, "tt:Mpeg4Profile");
	case SOAP_TYPE_tt__VideoEncoding:
		return soap_out_tt__VideoEncoding(soap, tag, id, (const tt__VideoEncoding *)ptr, "tt:VideoEncoding");
	case SOAP_TYPE_tt__ViewModes:
		return soap_out_tt__ViewModes(soap, tag, id, (const tt__ViewModes *)ptr, "tt:ViewModes");
	case SOAP_TYPE_tt__SceneOrientationOption:
		return soap_out_tt__SceneOrientationOption(soap, tag, id, (const tt__SceneOrientationOption *)ptr, "tt:SceneOrientationOption");
	case SOAP_TYPE_tt__SceneOrientationMode:
		return soap_out_tt__SceneOrientationMode(soap, tag, id, (const tt__SceneOrientationMode *)ptr, "tt:SceneOrientationMode");
	case SOAP_TYPE_tt__RotateMode:
		return soap_out_tt__RotateMode(soap, tag, id, (const tt__RotateMode *)ptr, "tt:RotateMode");
	case SOAP_TYPE_tds__StorageType:
		return soap_out_tds__StorageType(soap, tag, id, (const tds__StorageType *)ptr, "tds:StorageType");
	case SOAP_TYPE_tds__AutoGeoModes:
		return soap_out_tds__AutoGeoModes(soap, tag, id, (const tds__AutoGeoModes *)ptr, "tds:AutoGeoModes");
	case SOAP_TYPE_tns1__dummy:
		return soap_out_tns1__dummy(soap, tag, id, (const std::string *)ptr, "tns1:dummy");
	case SOAP_TYPE_dn__dummy:
		return soap_out_dn__dummy(soap, tag, id, (const std::string *)ptr, "dn:dummy");
	case SOAP_TYPE__wsa__RetryAfter:
		return soap_out__wsa__RetryAfter(soap, "wsa:RetryAfter", id, (const wsa__RetryAfterType *)ptr, "");
	case SOAP_TYPE__wsa__ReplyAfter:
		return soap_out__wsa__ReplyAfter(soap, "wsa:ReplyAfter", id, (const wsa__ReplyAfterType *)ptr, "");
	case SOAP_TYPE__wsa__FaultTo:
		return soap_out__wsa__FaultTo(soap, "wsa:FaultTo", id, (const wsa__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsa__ReplyTo:
		return soap_out__wsa__ReplyTo(soap, "wsa:ReplyTo", id, (const wsa__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsa__From:
		return soap_out__wsa__From(soap, "wsa:From", id, (const wsa__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsa__Action:
		return soap_out__wsa__Action(soap, "wsa:Action", id, (const wsa__AttributedURI *)ptr, "");
	case SOAP_TYPE__wsa__To:
		return soap_out__wsa__To(soap, "wsa:To", id, (const wsa__AttributedURI *)ptr, "");
	case SOAP_TYPE__wsa__RelatesTo:
		return soap_out__wsa__RelatesTo(soap, "wsa:RelatesTo", id, (const wsa__Relationship *)ptr, "");
	case SOAP_TYPE__wsa__MessageID:
		return soap_out__wsa__MessageID(soap, "wsa:MessageID", id, (const wsa__AttributedURI *)ptr, "");
	case SOAP_TYPE__wsa__EndpointReference:
		return soap_out__wsa__EndpointReference(soap, "wsa:EndpointReference", id, (const wsa__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsd__Id:
		return soap_out__wsd__Id(soap, "wsd:Id", id, (const std::string *)ptr, "");
	case SOAP_TYPE__wsd__AppSequence:
		return soap_out__wsd__AppSequence(soap, "wsd:AppSequence", id, (const wsd__AppSequenceType *)ptr, "");
	case SOAP_TYPE__wsd__Sig:
		return soap_out__wsd__Sig(soap, "wsd:Sig", id, (const wsd__SigType *)ptr, "");
	case SOAP_TYPE__wsd__Security:
		return soap_out__wsd__Security(soap, "wsd:Security", id, (const wsd__SecurityType *)ptr, "");
	case SOAP_TYPE__wsd__SupportedMatchingRules:
		return soap_out__wsd__SupportedMatchingRules(soap, "wsd:SupportedMatchingRules", id, (const std::string *)ptr, "");
	case SOAP_TYPE__wsd__XAddrs:
		return soap_out__wsd__XAddrs(soap, "wsd:XAddrs", id, (const std::string *)ptr, "");
	case SOAP_TYPE__wsd__Scopes:
		return soap_out__wsd__Scopes(soap, "wsd:Scopes", id, (const wsd__ScopesType *)ptr, "");
	case SOAP_TYPE__wsd__Types:
		return soap_out__wsd__Types(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE__wsd__ResolveMatches:
		return soap_out__wsd__ResolveMatches(soap, "wsd:ResolveMatches", id, (const wsd__ResolveMatchesType *)ptr, "");
	case SOAP_TYPE__wsd__Resolve:
		return soap_out__wsd__Resolve(soap, "wsd:Resolve", id, (const wsd__ResolveType *)ptr, "");
	case SOAP_TYPE__wsd__Bye:
		return soap_out__wsd__Bye(soap, "wsd:Bye", id, (const wsd__ByeType *)ptr, "");
	case SOAP_TYPE__wsd__Hello:
		return soap_out__wsd__Hello(soap, "wsd:Hello", id, (const wsd__HelloType *)ptr, "");
	case SOAP_TYPE__wsrf__ResourceUnavailableFault:
		return soap_out__wsrf__ResourceUnavailableFault(soap, "wsrf:ResourceUnavailableFault", id, (const wsrf__ResourceUnavailableFaultType *)ptr, "");
	case SOAP_TYPE__wsrf__ResourceUnknownFault:
		return soap_out__wsrf__ResourceUnknownFault(soap, "wsrf:ResourceUnknownFault", id, (const wsrf__ResourceUnknownFaultType *)ptr, "");
	case SOAP_TYPE__tev__Capabilities:
		return soap_out__tev__Capabilities(soap, "tev:Capabilities", id, (const tev__Capabilities *)ptr, "");
	case SOAP_TYPE__wstop__topicNamespaceLocation:
		return soap_out__wstop__topicNamespaceLocation(soap, "wstop:topicNamespaceLocation", id, (const std::string *)ptr, "");
	case SOAP_TYPE__wstop__TopicSet:
		return soap_out__wstop__TopicSet(soap, "wstop:TopicSet", id, (const wstop__TopicSetType *)ptr, "");
	case SOAP_TYPE__wstop__TopicNamespace:
		return soap_out__wstop__TopicNamespace(soap, "wstop:TopicNamespace", id, (const wstop__TopicNamespaceType *)ptr, "");
	case SOAP_TYPE__wsrfbf__BaseFault:
		return soap_out__wsrfbf__BaseFault(soap, "wsrfbf:BaseFault", id, (const wsrfbf__BaseFaultType *)ptr, "");
	case SOAP_TYPE__xop__Include:
		return soap_out__xop__Include(soap, "xop:Include", id, (const xop__Include *)ptr, "");
	case SOAP_TYPE__wsnt__ResumeFailedFault:
		return soap_out__wsnt__ResumeFailedFault(soap, "wsnt:ResumeFailedFault", id, (const wsnt__ResumeFailedFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__PauseFailedFault:
		return soap_out__wsnt__PauseFailedFault(soap, "wsnt:PauseFailedFault", id, (const wsnt__PauseFailedFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault:
		return soap_out__wsnt__UnableToDestroySubscriptionFault(soap, "wsnt:UnableToDestroySubscriptionFault", id, (const wsnt__UnableToDestroySubscriptionFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault:
		return soap_out__wsnt__UnacceptableTerminationTimeFault(soap, "wsnt:UnacceptableTerminationTimeFault", id, (const wsnt__UnacceptableTerminationTimeFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnableToCreatePullPointFault:
		return soap_out__wsnt__UnableToCreatePullPointFault(soap, "wsnt:UnableToCreatePullPointFault", id, (const wsnt__UnableToCreatePullPointFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnableToDestroyPullPointFault:
		return soap_out__wsnt__UnableToDestroyPullPointFault(soap, "wsnt:UnableToDestroyPullPointFault", id, (const wsnt__UnableToDestroyPullPointFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnableToGetMessagesFault:
		return soap_out__wsnt__UnableToGetMessagesFault(soap, "wsnt:UnableToGetMessagesFault", id, (const wsnt__UnableToGetMessagesFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault:
		return soap_out__wsnt__NoCurrentMessageOnTopicFault(soap, "wsnt:NoCurrentMessageOnTopicFault", id, (const wsnt__NoCurrentMessageOnTopicFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault:
		return soap_out__wsnt__UnacceptableInitialTerminationTimeFault(soap, "wsnt:UnacceptableInitialTerminationTimeFault", id, (const wsnt__UnacceptableInitialTerminationTimeFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault:
		return soap_out__wsnt__NotifyMessageNotSupportedFault(soap, "wsnt:NotifyMessageNotSupportedFault", id, (const wsnt__NotifyMessageNotSupportedFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault:
		return soap_out__wsnt__UnsupportedPolicyRequestFault(soap, "wsnt:UnsupportedPolicyRequestFault", id, (const wsnt__UnsupportedPolicyRequestFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault:
		return soap_out__wsnt__UnrecognizedPolicyRequestFault(soap, "wsnt:UnrecognizedPolicyRequestFault", id, (const wsnt__UnrecognizedPolicyRequestFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault:
		return soap_out__wsnt__InvalidMessageContentExpressionFault(soap, "wsnt:InvalidMessageContentExpressionFault", id, (const wsnt__InvalidMessageContentExpressionFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault:
		return soap_out__wsnt__InvalidProducerPropertiesExpressionFault(soap, "wsnt:InvalidProducerPropertiesExpressionFault", id, (const wsnt__InvalidProducerPropertiesExpressionFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault:
		return soap_out__wsnt__MultipleTopicsSpecifiedFault(soap, "wsnt:MultipleTopicsSpecifiedFault", id, (const wsnt__MultipleTopicsSpecifiedFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__TopicNotSupportedFault:
		return soap_out__wsnt__TopicNotSupportedFault(soap, "wsnt:TopicNotSupportedFault", id, (const wsnt__TopicNotSupportedFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__InvalidTopicExpressionFault:
		return soap_out__wsnt__InvalidTopicExpressionFault(soap, "wsnt:InvalidTopicExpressionFault", id, (const wsnt__InvalidTopicExpressionFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault:
		return soap_out__wsnt__TopicExpressionDialectUnknownFault(soap, "wsnt:TopicExpressionDialectUnknownFault", id, (const wsnt__TopicExpressionDialectUnknownFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__InvalidFilterFault:
		return soap_out__wsnt__InvalidFilterFault(soap, "wsnt:InvalidFilterFault", id, (const wsnt__InvalidFilterFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__SubscribeCreationFailedFault:
		return soap_out__wsnt__SubscribeCreationFailedFault(soap, "wsnt:SubscribeCreationFailedFault", id, (const wsnt__SubscribeCreationFailedFaultType *)ptr, "");
	case SOAP_TYPE__wsnt__MessageContent:
		return soap_out__wsnt__MessageContent(soap, "wsnt:MessageContent", id, (const wsnt__QueryExpressionType *)ptr, "");
	case SOAP_TYPE__wsnt__ProducerProperties:
		return soap_out__wsnt__ProducerProperties(soap, "wsnt:ProducerProperties", id, (const wsnt__QueryExpressionType *)ptr, "");
	case SOAP_TYPE__wsnt__NotificationMessage:
		return soap_out__wsnt__NotificationMessage(soap, "wsnt:NotificationMessage", id, (const wsnt__NotificationMessageHolderType *)ptr, "");
	case SOAP_TYPE__wsnt__Topic:
		return soap_out__wsnt__Topic(soap, "wsnt:Topic", id, (const wsnt__TopicExpressionTypeCustom *)ptr, "");
	case SOAP_TYPE__wsnt__SubscriptionPolicy:
		return soap_out__wsnt__SubscriptionPolicy(soap, "wsnt:SubscriptionPolicy", id, (const wsnt__SubscriptionPolicyType *)ptr, "");
	case SOAP_TYPE__wsnt__Filter:
		return soap_out__wsnt__Filter(soap, "wsnt:Filter", id, (const wsnt__FilterType *)ptr, "");
	case SOAP_TYPE__wsnt__TopicExpressionDialect:
		return soap_out__wsnt__TopicExpressionDialect(soap, "wsnt:TopicExpressionDialect", id, (const std::string *)ptr, "");
	case SOAP_TYPE__wsnt__TopicExpression:
		return soap_out__wsnt__TopicExpression(soap, "wsnt:TopicExpression", id, (const wsnt__TopicExpressionTypeCustom *)ptr, "");
	case SOAP_TYPE__tt__Polygon:
		return soap_out__tt__Polygon(soap, "tt:Polygon", id, (const tt__Polygon *)ptr, "");
	case SOAP_TYPE__tt__Polyline:
		return soap_out__tt__Polyline(soap, "tt:Polyline", id, (const tt__Polyline *)ptr, "");
	case SOAP_TYPE__tt__AudioDecoderConfiguration:
		return soap_out__tt__AudioDecoderConfiguration(soap, "tt:AudioDecoderConfiguration", id, (const tt__AudioDecoderConfiguration *)ptr, "");
	case SOAP_TYPE__tt__AudioOutputConfiguration:
		return soap_out__tt__AudioOutputConfiguration(soap, "tt:AudioOutputConfiguration", id, (const tt__AudioOutputConfiguration *)ptr, "");
	case SOAP_TYPE__tt__MetadataConfiguration:
		return soap_out__tt__MetadataConfiguration(soap, "tt:MetadataConfiguration", id, (const tt__MetadataConfiguration *)ptr, "");
	case SOAP_TYPE__tt__PTZConfiguration:
		return soap_out__tt__PTZConfiguration(soap, "tt:PTZConfiguration", id, (const tt__PTZConfiguration *)ptr, "");
	case SOAP_TYPE__tt__VideoAnalyticsConfiguration:
		return soap_out__tt__VideoAnalyticsConfiguration(soap, "tt:VideoAnalyticsConfiguration", id, (const tt__VideoAnalyticsConfiguration *)ptr, "");
	case SOAP_TYPE__tt__AudioEncoderConfiguration:
		return soap_out__tt__AudioEncoderConfiguration(soap, "tt:AudioEncoderConfiguration", id, (const tt__AudioEncoderConfiguration *)ptr, "");
	case SOAP_TYPE__tt__VideoEncoderConfiguration:
		return soap_out__tt__VideoEncoderConfiguration(soap, "tt:VideoEncoderConfiguration", id, (const tt__VideoEncoderConfiguration *)ptr, "");
	case SOAP_TYPE__tt__AudioSourceConfiguration:
		return soap_out__tt__AudioSourceConfiguration(soap, "tt:AudioSourceConfiguration", id, (const tt__AudioSourceConfiguration *)ptr, "");
	case SOAP_TYPE__tt__VideoSourceConfiguration:
		return soap_out__tt__VideoSourceConfiguration(soap, "tt:VideoSourceConfiguration", id, (const tt__VideoSourceConfiguration *)ptr, "");
	case SOAP_TYPE__tds__Capabilities:
		return soap_out__tds__Capabilities(soap, "tds:Capabilities", id, (const tds__DeviceServiceCapabilities *)ptr, "");
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		return ((_wstop__TopicNamespaceType_Topic *)ptr)->soap_out(soap, "wstop:TopicNamespaceType-Topic", id, "");
	case SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy:
		return ((_tev__CreatePullPointSubscription_SubscriptionPolicy *)ptr)->soap_out(soap, "tev:CreatePullPointSubscription-SubscriptionPolicy", id, "");
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		return ((_wsrfbf__BaseFaultType_FaultCause *)ptr)->soap_out(soap, "wsrfbf:BaseFaultType-FaultCause", id, "");
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		return ((_wsrfbf__BaseFaultType_Description *)ptr)->soap_out(soap, "wsrfbf:BaseFaultType-Description", id, "");
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		return ((_wsrfbf__BaseFaultType_ErrorCode *)ptr)->soap_out(soap, "wsrfbf:BaseFaultType-ErrorCode", id, "");
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		return ((_wsnt__Subscribe_SubscriptionPolicy *)ptr)->soap_out(soap, "wsnt:Subscribe-SubscriptionPolicy", id, "");
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		return ((_wsnt__NotificationMessageHolderType_Message *)ptr)->soap_out(soap, "wsnt:NotificationMessageHolderType-Message", id, "");
	case SOAP_TYPE__tt__ConfigDescription_Messages:
		return ((_tt__ConfigDescription_Messages *)ptr)->soap_out(soap, "tt:ConfigDescription-Messages", id, "");
	case SOAP_TYPE__tt__ItemListDescription_ElementItemDescription:
		return ((_tt__ItemListDescription_ElementItemDescription *)ptr)->soap_out(soap, "tt:ItemListDescription-ElementItemDescription", id, "");
	case SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription:
		return ((_tt__ItemListDescription_SimpleItemDescription *)ptr)->soap_out(soap, "tt:ItemListDescription-SimpleItemDescription", id, "");
	case SOAP_TYPE__tt__ItemList_ElementItem:
		return ((_tt__ItemList_ElementItem *)ptr)->soap_out(soap, "tt:ItemList-ElementItem", id, "");
	case SOAP_TYPE__tt__ItemList_SimpleItem:
		return ((_tt__ItemList_SimpleItem *)ptr)->soap_out(soap, "tt:ItemList-SimpleItem", id, "");
	case SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy:
		return ((_tt__EventSubscription_SubscriptionPolicy *)ptr)->soap_out(soap, "tt:EventSubscription-SubscriptionPolicy", id, "");
	case SOAP_TYPE__tds__GetSystemUrisResponse_Extension:
		return ((_tds__GetSystemUrisResponse_Extension *)ptr)->soap_out(soap, "tds:GetSystemUrisResponse-Extension", id, "");
	case SOAP_TYPE__tds__StorageConfigurationData_Extension:
		return ((_tds__StorageConfigurationData_Extension *)ptr)->soap_out(soap, "tds:StorageConfigurationData-Extension", id, "");
	case SOAP_TYPE__tds__UserCredential_Extension:
		return ((_tds__UserCredential_Extension *)ptr)->soap_out(soap, "tds:UserCredential-Extension", id, "");
	case SOAP_TYPE__tds__Service_Capabilities:
		return ((_tds__Service_Capabilities *)ptr)->soap_out(soap, "tds:Service-Capabilities", id, "");
	case SOAP_TYPE_tt__RecordingJobReference__:
		return ((tt__RecordingJobReference__ *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobReference");
	case SOAP_TYPE_tt__RecordingJobReference:
		return soap_out_tt__RecordingJobReference(soap, tag, id, (const std::string *)ptr, "tt:RecordingJobReference");
	case SOAP_TYPE_tt__JobToken__:
		return ((tt__JobToken__ *)ptr)->soap_out(soap, tag, id, "tt:JobToken");
	case SOAP_TYPE_tt__JobToken:
		return soap_out_tt__JobToken(soap, tag, id, (const std::string *)ptr, "tt:JobToken");
	case SOAP_TYPE_tt__TrackReference__:
		return ((tt__TrackReference__ *)ptr)->soap_out(soap, tag, id, "tt:TrackReference");
	case SOAP_TYPE_tt__TrackReference:
		return soap_out_tt__TrackReference(soap, tag, id, (const std::string *)ptr, "tt:TrackReference");
	case SOAP_TYPE_tt__RecordingReference__:
		return ((tt__RecordingReference__ *)ptr)->soap_out(soap, tag, id, "tt:RecordingReference");
	case SOAP_TYPE_tt__RecordingReference:
		return soap_out_tt__RecordingReference(soap, tag, id, (const std::string *)ptr, "tt:RecordingReference");
	case SOAP_TYPE_tt__ReceiverReference__:
		return ((tt__ReceiverReference__ *)ptr)->soap_out(soap, tag, id, "tt:ReceiverReference");
	case SOAP_TYPE_tt__ReceiverReference:
		return soap_out_tt__ReceiverReference(soap, tag, id, (const std::string *)ptr, "tt:ReceiverReference");
	case SOAP_TYPE_wsa__FaultSubcodeValues__:
		return ((wsa__FaultSubcodeValues__ *)ptr)->soap_out(soap, tag, id, "wsa:FaultSubcodeValues");
	case SOAP_TYPE_wsa__RelationshipTypeValues__:
		return ((wsa__RelationshipTypeValues__ *)ptr)->soap_out(soap, tag, id, "wsa:RelationshipTypeValues");
	case SOAP_TYPE_wsd__FaultCodeType__:
		return ((wsd__FaultCodeType__ *)ptr)->soap_out(soap, tag, id, "wsd:FaultCodeType");
	case SOAP_TYPE_wsd__RelationshipType__:
		return ((wsd__RelationshipType__ *)ptr)->soap_out(soap, tag, id, "wsd:RelationshipType");
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		return ((wstop__SimpleTopicExpression__ *)ptr)->soap_out(soap, tag, id, "wstop:SimpleTopicExpression");
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		return soap_out_wstop__SimpleTopicExpression(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		return ((wstop__ConcreteTopicExpression__ *)ptr)->soap_out(soap, tag, id, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		return soap_out_wstop__ConcreteTopicExpression(soap, tag, id, (const std::string *)ptr, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression__:
		return ((wstop__FullTopicExpression__ *)ptr)->soap_out(soap, tag, id, "wstop:FullTopicExpression");
	case SOAP_TYPE_wstop__FullTopicExpression:
		return soap_out_wstop__FullTopicExpression(soap, tag, id, (const std::string *)ptr, "wstop:FullTopicExpression");
	case SOAP_TYPE_tt__Entity__:
		return ((tt__Entity__ *)ptr)->soap_out(soap, tag, id, "tt:Entity");
	case SOAP_TYPE_tt__MoveStatus__:
		return ((tt__MoveStatus__ *)ptr)->soap_out(soap, tag, id, "tt:MoveStatus");
	case SOAP_TYPE_tt__ReferenceToken__:
		return ((tt__ReferenceToken__ *)ptr)->soap_out(soap, tag, id, "tt:ReferenceToken");
	case SOAP_TYPE_tt__ReferenceToken:
		return soap_out_tt__ReferenceToken(soap, tag, id, (const std::string *)ptr, "tt:ReferenceToken");
	case SOAP_TYPE_tt__OSDType__:
		return ((tt__OSDType__ *)ptr)->soap_out(soap, tag, id, "tt:OSDType");
	case SOAP_TYPE_tt__AudioClassType__:
		return ((tt__AudioClassType__ *)ptr)->soap_out(soap, tag, id, "tt:AudioClassType");
	case SOAP_TYPE_tt__AudioClassType:
		return soap_out_tt__AudioClassType(soap, tag, id, (const std::string *)ptr, "tt:AudioClassType");
	case SOAP_TYPE_tt__ModeOfOperation__:
		return ((tt__ModeOfOperation__ *)ptr)->soap_out(soap, tag, id, "tt:ModeOfOperation");
	case SOAP_TYPE_tt__RecordingJobState__:
		return ((tt__RecordingJobState__ *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobState");
	case SOAP_TYPE_tt__RecordingJobState:
		return soap_out_tt__RecordingJobState(soap, tag, id, (const std::string *)ptr, "tt:RecordingJobState");
	case SOAP_TYPE_tt__RecordingJobMode__:
		return ((tt__RecordingJobMode__ *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobMode");
	case SOAP_TYPE_tt__RecordingJobMode:
		return soap_out_tt__RecordingJobMode(soap, tag, id, (const std::string *)ptr, "tt:RecordingJobMode");
	case SOAP_TYPE_tt__TrackType__:
		return ((tt__TrackType__ *)ptr)->soap_out(soap, tag, id, "tt:TrackType");
	case SOAP_TYPE_tt__RecordingStatus__:
		return ((tt__RecordingStatus__ *)ptr)->soap_out(soap, tag, id, "tt:RecordingStatus");
	case SOAP_TYPE_tt__SearchState__:
		return ((tt__SearchState__ *)ptr)->soap_out(soap, tag, id, "tt:SearchState");
	case SOAP_TYPE_tt__XPathExpression__:
		return ((tt__XPathExpression__ *)ptr)->soap_out(soap, tag, id, "tt:XPathExpression");
	case SOAP_TYPE_tt__XPathExpression:
		return soap_out_tt__XPathExpression(soap, tag, id, (const std::string *)ptr, "tt:XPathExpression");
	case SOAP_TYPE_tt__Description__:
		return ((tt__Description__ *)ptr)->soap_out(soap, tag, id, "tt:Description");
	case SOAP_TYPE_tt__Description:
		return soap_out_tt__Description(soap, tag, id, (const std::string *)ptr, "tt:Description");
	case SOAP_TYPE_tt__ReceiverState__:
		return ((tt__ReceiverState__ *)ptr)->soap_out(soap, tag, id, "tt:ReceiverState");
	case SOAP_TYPE_tt__ReceiverMode__:
		return ((tt__ReceiverMode__ *)ptr)->soap_out(soap, tag, id, "tt:ReceiverMode");
	case SOAP_TYPE_tt__Direction__:
		return ((tt__Direction__ *)ptr)->soap_out(soap, tag, id, "tt:Direction");
	case SOAP_TYPE_tt__PropertyOperation__:
		return ((tt__PropertyOperation__ *)ptr)->soap_out(soap, tag, id, "tt:PropertyOperation");
	case SOAP_TYPE_tt__TopicNamespaceLocation__:
		return ((tt__TopicNamespaceLocation__ *)ptr)->soap_out(soap, tag, id, "tt:TopicNamespaceLocation");
	case SOAP_TYPE_tt__TopicNamespaceLocation:
		return soap_out_tt__TopicNamespaceLocation(soap, tag, id, (const std::string *)ptr, "tt:TopicNamespaceLocation");
	case SOAP_TYPE_tt__DefoggingMode__:
		return ((tt__DefoggingMode__ *)ptr)->soap_out(soap, tag, id, "tt:DefoggingMode");
	case SOAP_TYPE_tt__ToneCompensationMode__:
		return ((tt__ToneCompensationMode__ *)ptr)->soap_out(soap, tag, id, "tt:ToneCompensationMode");
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__:
		return ((tt__IrCutFilterAutoBoundaryType__ *)ptr)->soap_out(soap, tag, id, "tt:IrCutFilterAutoBoundaryType");
	case SOAP_TYPE_tt__ImageStabilizationMode__:
		return ((tt__ImageStabilizationMode__ *)ptr)->soap_out(soap, tag, id, "tt:ImageStabilizationMode");
	case SOAP_TYPE_tt__IrCutFilterMode__:
		return ((tt__IrCutFilterMode__ *)ptr)->soap_out(soap, tag, id, "tt:IrCutFilterMode");
	case SOAP_TYPE_tt__WhiteBalanceMode__:
		return ((tt__WhiteBalanceMode__ *)ptr)->soap_out(soap, tag, id, "tt:WhiteBalanceMode");
	case SOAP_TYPE_tt__Enabled__:
		return ((tt__Enabled__ *)ptr)->soap_out(soap, tag, id, "tt:Enabled");
	case SOAP_TYPE_tt__ExposureMode__:
		return ((tt__ExposureMode__ *)ptr)->soap_out(soap, tag, id, "tt:ExposureMode");
	case SOAP_TYPE_tt__ExposurePriority__:
		return ((tt__ExposurePriority__ *)ptr)->soap_out(soap, tag, id, "tt:ExposurePriority");
	case SOAP_TYPE_tt__BacklightCompensationMode__:
		return ((tt__BacklightCompensationMode__ *)ptr)->soap_out(soap, tag, id, "tt:BacklightCompensationMode");
	case SOAP_TYPE_tt__WideDynamicMode__:
		return ((tt__WideDynamicMode__ *)ptr)->soap_out(soap, tag, id, "tt:WideDynamicMode");
	case SOAP_TYPE_tt__AutoFocusMode__:
		return ((tt__AutoFocusMode__ *)ptr)->soap_out(soap, tag, id, "tt:AutoFocusMode");
	case SOAP_TYPE_tt__PTZPresetTourOperation__:
		return ((tt__PTZPresetTourOperation__ *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourOperation");
	case SOAP_TYPE_tt__PTZPresetTourDirection__:
		return ((tt__PTZPresetTourDirection__ *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourDirection");
	case SOAP_TYPE_tt__PTZPresetTourState__:
		return ((tt__PTZPresetTourState__ *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourState");
	case SOAP_TYPE_tt__AuxiliaryData__:
		return ((tt__AuxiliaryData__ *)ptr)->soap_out(soap, tag, id, "tt:AuxiliaryData");
	case SOAP_TYPE_tt__AuxiliaryData:
		return soap_out_tt__AuxiliaryData(soap, tag, id, (const std::string *)ptr, "tt:AuxiliaryData");
	case SOAP_TYPE_tt__ReverseMode__:
		return ((tt__ReverseMode__ *)ptr)->soap_out(soap, tag, id, "tt:ReverseMode");
	case SOAP_TYPE_tt__EFlipMode__:
		return ((tt__EFlipMode__ *)ptr)->soap_out(soap, tag, id, "tt:EFlipMode");
	case SOAP_TYPE_tt__DigitalIdleState__:
		return ((tt__DigitalIdleState__ *)ptr)->soap_out(soap, tag, id, "tt:DigitalIdleState");
	case SOAP_TYPE_tt__RelayMode__:
		return ((tt__RelayMode__ *)ptr)->soap_out(soap, tag, id, "tt:RelayMode");
	case SOAP_TYPE_tt__RelayIdleState__:
		return ((tt__RelayIdleState__ *)ptr)->soap_out(soap, tag, id, "tt:RelayIdleState");
	case SOAP_TYPE_tt__RelayLogicalState__:
		return ((tt__RelayLogicalState__ *)ptr)->soap_out(soap, tag, id, "tt:RelayLogicalState");
	case SOAP_TYPE_tt__UserLevel__:
		return ((tt__UserLevel__ *)ptr)->soap_out(soap, tag, id, "tt:UserLevel");
	case SOAP_TYPE_tt__SetDateTimeType__:
		return ((tt__SetDateTimeType__ *)ptr)->soap_out(soap, tag, id, "tt:SetDateTimeType");
	case SOAP_TYPE_tt__FactoryDefaultType__:
		return ((tt__FactoryDefaultType__ *)ptr)->soap_out(soap, tag, id, "tt:FactoryDefaultType");
	case SOAP_TYPE_tt__SystemLogType__:
		return ((tt__SystemLogType__ *)ptr)->soap_out(soap, tag, id, "tt:SystemLogType");
	case SOAP_TYPE_tt__CapabilityCategory__:
		return ((tt__CapabilityCategory__ *)ptr)->soap_out(soap, tag, id, "tt:CapabilityCategory");
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite__:
		return ((tt__Dot11AuthAndMangementSuite__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11AuthAndMangementSuite");
	case SOAP_TYPE_tt__Dot11SignalStrength__:
		return ((tt__Dot11SignalStrength__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11SignalStrength");
	case SOAP_TYPE_tt__Dot11PSKPassphrase__:
		return ((tt__Dot11PSKPassphrase__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11PSKPassphrase");
	case SOAP_TYPE_tt__Dot11PSKPassphrase:
		return soap_out_tt__Dot11PSKPassphrase(soap, tag, id, (const std::string *)ptr, "tt:Dot11PSKPassphrase");
	case SOAP_TYPE_tt__Dot11PSK__:
		return ((tt__Dot11PSK__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11PSK");
	case SOAP_TYPE_tt__Dot11PSK:
		return soap_out_tt__Dot11PSK(soap, tag, id, (const xsd__hexBinary *)ptr, "tt:Dot11PSK");
	case SOAP_TYPE_tt__Dot11Cipher__:
		return ((tt__Dot11Cipher__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11Cipher");
	case SOAP_TYPE_tt__Dot11SecurityMode__:
		return ((tt__Dot11SecurityMode__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11SecurityMode");
	case SOAP_TYPE_tt__Dot11StationMode__:
		return ((tt__Dot11StationMode__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11StationMode");
	case SOAP_TYPE_tt__Dot11SSIDType__:
		return ((tt__Dot11SSIDType__ *)ptr)->soap_out(soap, tag, id, "tt:Dot11SSIDType");
	case SOAP_TYPE_tt__Dot11SSIDType:
		return soap_out_tt__Dot11SSIDType(soap, tag, id, (const xsd__hexBinary *)ptr, "tt:Dot11SSIDType");
	case SOAP_TYPE_tt__DynamicDNSType__:
		return ((tt__DynamicDNSType__ *)ptr)->soap_out(soap, tag, id, "tt:DynamicDNSType");
	case SOAP_TYPE_tt__IPAddressFilterType__:
		return ((tt__IPAddressFilterType__ *)ptr)->soap_out(soap, tag, id, "tt:IPAddressFilterType");
	case SOAP_TYPE_tt__Domain__:
		return ((tt__Domain__ *)ptr)->soap_out(soap, tag, id, "tt:Domain");
	case SOAP_TYPE_tt__Domain:
		return soap_out_tt__Domain(soap, tag, id, (const std::string *)ptr, "tt:Domain");
	case SOAP_TYPE_tt__DNSName__:
		return ((tt__DNSName__ *)ptr)->soap_out(soap, tag, id, "tt:DNSName");
	case SOAP_TYPE_tt__DNSName:
		return soap_out_tt__DNSName(soap, tag, id, (const std::string *)ptr, "tt:DNSName");
	case SOAP_TYPE_tt__IPType__:
		return ((tt__IPType__ *)ptr)->soap_out(soap, tag, id, "tt:IPType");
	case SOAP_TYPE_tt__HwAddress__:
		return ((tt__HwAddress__ *)ptr)->soap_out(soap, tag, id, "tt:HwAddress");
	case SOAP_TYPE_tt__HwAddress:
		return soap_out_tt__HwAddress(soap, tag, id, (const std::string *)ptr, "tt:HwAddress");
	case SOAP_TYPE_tt__IPv6Address__:
		return ((tt__IPv6Address__ *)ptr)->soap_out(soap, tag, id, "tt:IPv6Address");
	case SOAP_TYPE_tt__IPv6Address:
		return soap_out_tt__IPv6Address(soap, tag, id, (const std::string *)ptr, "tt:IPv6Address");
	case SOAP_TYPE_tt__IPv4Address__:
		return ((tt__IPv4Address__ *)ptr)->soap_out(soap, tag, id, "tt:IPv4Address");
	case SOAP_TYPE_tt__IPv4Address:
		return soap_out_tt__IPv4Address(soap, tag, id, (const std::string *)ptr, "tt:IPv4Address");
	case SOAP_TYPE_tt__NetworkHostType__:
		return ((tt__NetworkHostType__ *)ptr)->soap_out(soap, tag, id, "tt:NetworkHostType");
	case SOAP_TYPE_tt__NetworkProtocolType__:
		return ((tt__NetworkProtocolType__ *)ptr)->soap_out(soap, tag, id, "tt:NetworkProtocolType");
	case SOAP_TYPE_tt__IPv6DHCPConfiguration__:
		return ((tt__IPv6DHCPConfiguration__ *)ptr)->soap_out(soap, tag, id, "tt:IPv6DHCPConfiguration");
	case SOAP_TYPE_tt__IANA_IfTypes__:
		return ((tt__IANA_IfTypes__ *)ptr)->soap_out(soap, tag, id, "tt:IANA-IfTypes");
	case SOAP_TYPE_tt__Duplex__:
		return ((tt__Duplex__ *)ptr)->soap_out(soap, tag, id, "tt:Duplex");
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority__:
		return ((tt__NetworkInterfaceConfigPriority__ *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceConfigPriority");
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority:
		return soap_out_tt__NetworkInterfaceConfigPriority(soap, tag, id, (const std::string *)ptr, "tt:NetworkInterfaceConfigPriority");
	case SOAP_TYPE_tt__DiscoveryMode__:
		return ((tt__DiscoveryMode__ *)ptr)->soap_out(soap, tag, id, "tt:DiscoveryMode");
	case SOAP_TYPE_tt__ScopeDefinition__:
		return ((tt__ScopeDefinition__ *)ptr)->soap_out(soap, tag, id, "tt:ScopeDefinition");
	case SOAP_TYPE_tt__TransportProtocol__:
		return ((tt__TransportProtocol__ *)ptr)->soap_out(soap, tag, id, "tt:TransportProtocol");
	case SOAP_TYPE_tt__StreamType__:
		return ((tt__StreamType__ *)ptr)->soap_out(soap, tag, id, "tt:StreamType");
	case SOAP_TYPE_tt__MetadataCompressionType__:
		return ((tt__MetadataCompressionType__ *)ptr)->soap_out(soap, tag, id, "tt:MetadataCompressionType");
	case SOAP_TYPE_tt__AudioEncodingMimeNames__:
		return ((tt__AudioEncodingMimeNames__ *)ptr)->soap_out(soap, tag, id, "tt:AudioEncodingMimeNames");
	case SOAP_TYPE_tt__AudioEncoding__:
		return ((tt__AudioEncoding__ *)ptr)->soap_out(soap, tag, id, "tt:AudioEncoding");
	case SOAP_TYPE_tt__VideoEncodingProfiles__:
		return ((tt__VideoEncodingProfiles__ *)ptr)->soap_out(soap, tag, id, "tt:VideoEncodingProfiles");
	case SOAP_TYPE_tt__VideoEncodingMimeNames__:
		return ((tt__VideoEncodingMimeNames__ *)ptr)->soap_out(soap, tag, id, "tt:VideoEncodingMimeNames");
	case SOAP_TYPE_tt__H264Profile__:
		return ((tt__H264Profile__ *)ptr)->soap_out(soap, tag, id, "tt:H264Profile");
	case SOAP_TYPE_tt__Mpeg4Profile__:
		return ((tt__Mpeg4Profile__ *)ptr)->soap_out(soap, tag, id, "tt:Mpeg4Profile");
	case SOAP_TYPE_tt__VideoEncoding__:
		return ((tt__VideoEncoding__ *)ptr)->soap_out(soap, tag, id, "tt:VideoEncoding");
	case SOAP_TYPE_tt__ViewModes__:
		return ((tt__ViewModes__ *)ptr)->soap_out(soap, tag, id, "tt:ViewModes");
	case SOAP_TYPE_tt__SceneOrientationOption__:
		return ((tt__SceneOrientationOption__ *)ptr)->soap_out(soap, tag, id, "tt:SceneOrientationOption");
	case SOAP_TYPE_tt__SceneOrientationMode__:
		return ((tt__SceneOrientationMode__ *)ptr)->soap_out(soap, tag, id, "tt:SceneOrientationMode");
	case SOAP_TYPE_tt__RotateMode__:
		return ((tt__RotateMode__ *)ptr)->soap_out(soap, tag, id, "tt:RotateMode");
	case SOAP_TYPE_tt__Name__:
		return ((tt__Name__ *)ptr)->soap_out(soap, tag, id, "tt:Name");
	case SOAP_TYPE_tt__Name:
		return soap_out_tt__Name(soap, tag, id, (const std::string *)ptr, "tt:Name");
	case SOAP_TYPE_tds__StorageType__:
		return ((tds__StorageType__ *)ptr)->soap_out(soap, tag, id, "tds:StorageType");
	case SOAP_TYPE_tds__AutoGeoModes__:
		return ((tds__AutoGeoModes__ *)ptr)->soap_out(soap, tag, id, "tds:AutoGeoModes");
	case SOAP_TYPE_wsd__FaultCodeOpenType:
		return soap_out_wsd__FaultCodeOpenType(soap, tag, id, (const std::string *)ptr, "wsd:FaultCodeOpenType");
	case SOAP_TYPE_wsd__UriListType:
		return soap_out_wsd__UriListType(soap, tag, id, (const std::string *)ptr, "wsd:UriListType");
	case SOAP_TYPE_wsd__QNameListType:
		return soap_out_wsd__QNameListType(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_wsd__OpenRelationshipType:
		return soap_out_wsd__OpenRelationshipType(soap, tag, id, (const std::string *)ptr, "wsd:OpenRelationshipType");
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		return soap_out_wsnt__AbsoluteOrRelativeTimeType(soap, tag, id, (const std::string *)ptr, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_tt__ReferenceTokenList:
		return soap_out_tt__ReferenceTokenList(soap, tag, id, (const std::string *)ptr, "tt:ReferenceTokenList");
	case SOAP_TYPE_tt__StringAttrList:
		return soap_out_tt__StringAttrList(soap, tag, id, (const std::string *)ptr, "tt:StringAttrList");
	case SOAP_TYPE_tt__FloatAttrList:
		return soap_out_tt__FloatAttrList(soap, tag, id, (const std::string *)ptr, "tt:FloatAttrList");
	case SOAP_TYPE_tt__IntAttrList:
		return soap_out_tt__IntAttrList(soap, tag, id, (const std::string *)ptr, "tt:IntAttrList");
	case SOAP_TYPE_tds__EAPMethodTypes:
		return soap_out_tds__EAPMethodTypes(soap, tag, id, (const std::string *)ptr, "tds:EAPMethodTypes");
	case SOAP_TYPE_tmk__VideoSurveillanceSystem:
		return ((tmk__VideoSurveillanceSystem *)ptr)->soap_out(soap, tag, id, "tmk:VideoSurveillanceSystem");
	case SOAP_TYPE_tmk__MetalDetector:
		return ((tmk__MetalDetector *)ptr)->soap_out(soap, tag, id, "tmk:MetalDetector");
	case SOAP_TYPE_tmk__SteamDetector:
		return ((tmk__SteamDetector *)ptr)->soap_out(soap, tag, id, "tmk:SteamDetector");
	case SOAP_TYPE_tmk__RadiationMonitoring:
		return ((tmk__RadiationMonitoring *)ptr)->soap_out(soap, tag, id, "tmk:RadiationMonitoring");
	case SOAP_TYPE_tmk__NeutronProbing:
		return ((tmk__NeutronProbing *)ptr)->soap_out(soap, tag, id, "tmk:NeutronProbing");
	case SOAP_TYPE_tmk__Introscopy:
		return ((tmk__Introscopy *)ptr)->soap_out(soap, tag, id, "tmk:Introscopy");
	case SOAP_TYPE_tmk__GasAnalysis:
		return ((tmk__GasAnalysis *)ptr)->soap_out(soap, tag, id, "tmk:GasAnalysis");
	case SOAP_TYPE_tmk__FireAlarm:
		return ((tmk__FireAlarm *)ptr)->soap_out(soap, tag, id, "tmk:FireAlarm");
	case SOAP_TYPE_tmk__AccessControl:
		return ((tmk__AccessControl *)ptr)->soap_out(soap, tag, id, "tmk:AccessControl");
	case SOAP_TYPE_wsa__AttributedURI:
		return ((wsa__AttributedURI *)ptr)->soap_out(soap, tag, id, "wsa:AttributedURI");
	case SOAP_TYPE_wsa__AttributedQName:
		return ((wsa__AttributedQName *)ptr)->soap_out(soap, tag, id, "wsa:AttributedQName");
	case SOAP_TYPE_wsa__RetryAfterType:
		return ((wsa__RetryAfterType *)ptr)->soap_out(soap, tag, id, "wsa:RetryAfterType");
	case SOAP_TYPE_wsa__ReplyAfterType:
		return ((wsa__ReplyAfterType *)ptr)->soap_out(soap, tag, id, "wsa:ReplyAfterType");
	case SOAP_TYPE_wsa__Relationship:
		return ((wsa__Relationship *)ptr)->soap_out(soap, tag, id, "wsa:Relationship");
	case SOAP_TYPE_wsa__ServiceNameType:
		return ((wsa__ServiceNameType *)ptr)->soap_out(soap, tag, id, "wsa:ServiceNameType");
	case SOAP_TYPE_wsa__ReferenceParametersType:
		return ((wsa__ReferenceParametersType *)ptr)->soap_out(soap, tag, id, "wsa:ReferenceParametersType");
	case SOAP_TYPE_wsa__ReferencePropertiesType:
		return ((wsa__ReferencePropertiesType *)ptr)->soap_out(soap, tag, id, "wsa:ReferencePropertiesType");
	case SOAP_TYPE_wsa__EndpointReferenceType:
		return ((wsa__EndpointReferenceType *)ptr)->soap_out(soap, tag, id, "wsa:EndpointReferenceType");
	case SOAP_TYPE_wsd__AppSequenceType:
		return ((wsd__AppSequenceType *)ptr)->soap_out(soap, tag, id, "wsd:AppSequenceType");
	case SOAP_TYPE_wsd__SigType:
		return ((wsd__SigType *)ptr)->soap_out(soap, tag, id, "wsd:SigType");
	case SOAP_TYPE_wsd__SecurityType:
		return ((wsd__SecurityType *)ptr)->soap_out(soap, tag, id, "wsd:SecurityType");
	case SOAP_TYPE_wsd__ScopesType:
		return ((wsd__ScopesType *)ptr)->soap_out(soap, tag, id, "wsd:ScopesType");
	case SOAP_TYPE_wsd__ResolveMatchType:
		return ((wsd__ResolveMatchType *)ptr)->soap_out(soap, tag, id, "wsd:ResolveMatchType");
	case SOAP_TYPE_wsd__ResolveMatchesType:
		return ((wsd__ResolveMatchesType *)ptr)->soap_out(soap, tag, id, "wsd:ResolveMatchesType");
	case SOAP_TYPE_wsd__ResolveType:
		return ((wsd__ResolveType *)ptr)->soap_out(soap, tag, id, "wsd:ResolveType");
	case SOAP_TYPE_wsd__ProbeMatchType:
		return ((wsd__ProbeMatchType *)ptr)->soap_out(soap, tag, id, "wsd:ProbeMatchType");
	case SOAP_TYPE_wsd__ByeType:
		return ((wsd__ByeType *)ptr)->soap_out(soap, tag, id, "wsd:ByeType");
	case SOAP_TYPE_wsd__HelloType:
		return ((wsd__HelloType *)ptr)->soap_out(soap, tag, id, "wsd:HelloType");
	case SOAP_TYPE_wsrf__ResourceUnavailableFaultType:
		return ((wsrf__ResourceUnavailableFaultType *)ptr)->soap_out(soap, tag, id, "wsrf:ResourceUnavailableFaultType");
	case SOAP_TYPE_wsrf__ResourceUnknownFaultType:
		return ((wsrf__ResourceUnknownFaultType *)ptr)->soap_out(soap, tag, id, "wsrf:ResourceUnknownFaultType");
	case SOAP_TYPE__tev__GetEventPropertiesResponse:
		return ((_tev__GetEventPropertiesResponse *)ptr)->soap_out(soap, "tev:GetEventPropertiesResponse", id, "");
	case SOAP_TYPE__tev__GetEventProperties:
		return ((_tev__GetEventProperties *)ptr)->soap_out(soap, "tev:GetEventProperties", id, "");
	case SOAP_TYPE__tev__SetSynchronizationPointResponse:
		return ((_tev__SetSynchronizationPointResponse *)ptr)->soap_out(soap, "tev:SetSynchronizationPointResponse", id, "");
	case SOAP_TYPE__tev__SetSynchronizationPoint:
		return ((_tev__SetSynchronizationPoint *)ptr)->soap_out(soap, "tev:SetSynchronizationPoint", id, "");
	case SOAP_TYPE__tev__SeekResponse:
		return ((_tev__SeekResponse *)ptr)->soap_out(soap, "tev:SeekResponse", id, "");
	case SOAP_TYPE__tev__Seek:
		return ((_tev__Seek *)ptr)->soap_out(soap, "tev:Seek", id, "");
	case SOAP_TYPE__tev__PullMessagesFaultResponse:
		return ((_tev__PullMessagesFaultResponse *)ptr)->soap_out(soap, "tev:PullMessagesFaultResponse", id, "");
	case SOAP_TYPE__tev__PullMessagesResponse:
		return ((_tev__PullMessagesResponse *)ptr)->soap_out(soap, "tev:PullMessagesResponse", id, "");
	case SOAP_TYPE__tev__PullMessages:
		return ((_tev__PullMessages *)ptr)->soap_out(soap, "tev:PullMessages", id, "");
	case SOAP_TYPE__tev__CreatePullPointSubscriptionResponse:
		return ((_tev__CreatePullPointSubscriptionResponse *)ptr)->soap_out(soap, "tev:CreatePullPointSubscriptionResponse", id, "");
	case SOAP_TYPE__tev__CreatePullPointSubscription:
		return ((_tev__CreatePullPointSubscription *)ptr)->soap_out(soap, "tev:CreatePullPointSubscription", id, "");
	case SOAP_TYPE__tev__GetServiceCapabilitiesResponse:
		return ((_tev__GetServiceCapabilitiesResponse *)ptr)->soap_out(soap, "tev:GetServiceCapabilitiesResponse", id, "");
	case SOAP_TYPE__tev__GetServiceCapabilities:
		return ((_tev__GetServiceCapabilities *)ptr)->soap_out(soap, "tev:GetServiceCapabilities", id, "");
	case SOAP_TYPE_tev__SubscriptionPolicy:
		return ((tev__SubscriptionPolicy *)ptr)->soap_out(soap, tag, id, "tev:SubscriptionPolicy");
	case SOAP_TYPE_tev__Capabilities:
		return ((tev__Capabilities *)ptr)->soap_out(soap, tag, id, "tev:Capabilities");
	case SOAP_TYPE_wstop__TopicSetType:
		return ((wstop__TopicSetType *)ptr)->soap_out(soap, tag, id, "wstop:TopicSetType");
	case SOAP_TYPE_wstop__TopicType:
		return ((wstop__TopicType *)ptr)->soap_out(soap, tag, id, "wstop:TopicType");
	case SOAP_TYPE_wstop__TopicNamespaceType:
		return ((wstop__TopicNamespaceType *)ptr)->soap_out(soap, tag, id, "wstop:TopicNamespaceType");
	case SOAP_TYPE_wstop__QueryExpressionType:
		return ((wstop__QueryExpressionType *)ptr)->soap_out(soap, tag, id, "wstop:QueryExpressionType");
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		return ((wstop__ExtensibleDocumented *)ptr)->soap_out(soap, tag, id, "wstop:ExtensibleDocumented");
	case SOAP_TYPE_wstop__Documentation:
		return ((wstop__Documentation *)ptr)->soap_out(soap, tag, id, "wstop:Documentation");
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		return ((wsrfbf__BaseFaultType *)ptr)->soap_out(soap, tag, id, "wsrfbf:BaseFaultType");
	case SOAP_TYPE_xop__Include:
		return ((xop__Include *)ptr)->soap_out(soap, tag, id, "xop:Include");
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		return ((_wsnt__ResumeSubscriptionResponse *)ptr)->soap_out(soap, "wsnt:ResumeSubscriptionResponse", id, "");
	case SOAP_TYPE__wsnt__ResumeSubscription:
		return ((_wsnt__ResumeSubscription *)ptr)->soap_out(soap, "wsnt:ResumeSubscription", id, "");
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		return ((_wsnt__PauseSubscriptionResponse *)ptr)->soap_out(soap, "wsnt:PauseSubscriptionResponse", id, "");
	case SOAP_TYPE__wsnt__PauseSubscription:
		return ((_wsnt__PauseSubscription *)ptr)->soap_out(soap, "wsnt:PauseSubscription", id, "");
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		return ((_wsnt__UnsubscribeResponse *)ptr)->soap_out(soap, "wsnt:UnsubscribeResponse", id, "");
	case SOAP_TYPE__wsnt__Unsubscribe:
		return ((_wsnt__Unsubscribe *)ptr)->soap_out(soap, "wsnt:Unsubscribe", id, "");
	case SOAP_TYPE__wsnt__RenewResponse:
		return ((_wsnt__RenewResponse *)ptr)->soap_out(soap, "wsnt:RenewResponse", id, "");
	case SOAP_TYPE__wsnt__Renew:
		return ((_wsnt__Renew *)ptr)->soap_out(soap, "wsnt:Renew", id, "");
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		return ((_wsnt__CreatePullPointResponse *)ptr)->soap_out(soap, "wsnt:CreatePullPointResponse", id, "");
	case SOAP_TYPE__wsnt__CreatePullPoint:
		return ((_wsnt__CreatePullPoint *)ptr)->soap_out(soap, "wsnt:CreatePullPoint", id, "");
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		return ((_wsnt__DestroyPullPointResponse *)ptr)->soap_out(soap, "wsnt:DestroyPullPointResponse", id, "");
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		return ((_wsnt__DestroyPullPoint *)ptr)->soap_out(soap, "wsnt:DestroyPullPoint", id, "");
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		return ((_wsnt__GetMessagesResponse *)ptr)->soap_out(soap, "wsnt:GetMessagesResponse", id, "");
	case SOAP_TYPE__wsnt__GetMessages:
		return ((_wsnt__GetMessages *)ptr)->soap_out(soap, "wsnt:GetMessages", id, "");
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		return ((_wsnt__GetCurrentMessageResponse *)ptr)->soap_out(soap, "wsnt:GetCurrentMessageResponse", id, "");
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		return ((_wsnt__GetCurrentMessage *)ptr)->soap_out(soap, "wsnt:GetCurrentMessage", id, "");
	case SOAP_TYPE__wsnt__SubscribeResponse:
		return ((_wsnt__SubscribeResponse *)ptr)->soap_out(soap, "wsnt:SubscribeResponse", id, "");
	case SOAP_TYPE__wsnt__Subscribe:
		return ((_wsnt__Subscribe *)ptr)->soap_out(soap, "wsnt:Subscribe", id, "");
	case SOAP_TYPE__wsnt__UseRaw:
		return ((_wsnt__UseRaw *)ptr)->soap_out(soap, "wsnt:UseRaw", id, "");
	case SOAP_TYPE__wsnt__Notify:
		return ((_wsnt__Notify *)ptr)->soap_out(soap, "wsnt:Notify", id, "");
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		return ((_wsnt__SubscriptionManagerRP *)ptr)->soap_out(soap, "wsnt:SubscriptionManagerRP", id, "");
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		return ((_wsnt__NotificationProducerRP *)ptr)->soap_out(soap, "wsnt:NotificationProducerRP", id, "");
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		return ((wsnt__ResumeFailedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		return ((wsnt__PauseFailedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		return ((wsnt__UnableToDestroySubscriptionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		return ((wsnt__UnacceptableTerminationTimeFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		return ((wsnt__UnableToCreatePullPointFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		return ((wsnt__UnableToDestroyPullPointFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		return ((wsnt__UnableToGetMessagesFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		return ((wsnt__NoCurrentMessageOnTopicFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		return ((wsnt__UnacceptableInitialTerminationTimeFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		return ((wsnt__NotifyMessageNotSupportedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		return ((wsnt__UnsupportedPolicyRequestFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		return ((wsnt__UnrecognizedPolicyRequestFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		return ((wsnt__InvalidMessageContentExpressionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		return ((wsnt__InvalidProducerPropertiesExpressionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		return ((wsnt__MultipleTopicsSpecifiedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		return ((wsnt__TopicNotSupportedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		return ((wsnt__InvalidTopicExpressionFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		return ((wsnt__TopicExpressionDialectUnknownFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		return ((wsnt__InvalidFilterFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		return ((wsnt__SubscribeCreationFailedFaultType *)ptr)->soap_out(soap, tag, id, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		return ((wsnt__NotificationMessageHolderType *)ptr)->soap_out(soap, tag, id, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		return ((wsnt__SubscriptionPolicyType *)ptr)->soap_out(soap, tag, id, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_wsnt__FilterType:
		return ((wsnt__FilterType *)ptr)->soap_out(soap, tag, id, "wsnt:FilterType");
	case SOAP_TYPE_wsnt__TopicExpressionTypeCustom:
		return ((wsnt__TopicExpressionTypeCustom *)ptr)->soap_out(soap, tag, id, "wsnt:TopicExpressionTypeCustom");
	case SOAP_TYPE_wsnt__QueryExpressionType:
		return ((wsnt__QueryExpressionType *)ptr)->soap_out(soap, tag, id, "wsnt:QueryExpressionType");
	case SOAP_TYPE__tt__Message:
		return ((_tt__Message *)ptr)->soap_out(soap, "tt:Message", id, "");
	case SOAP_TYPE_tt__LocationEntity:
		return ((tt__LocationEntity *)ptr)->soap_out(soap, tag, id, "tt:LocationEntity");
	case SOAP_TYPE_tt__LocalOrientation:
		return ((tt__LocalOrientation *)ptr)->soap_out(soap, tag, id, "tt:LocalOrientation");
	case SOAP_TYPE_tt__LocalLocation:
		return ((tt__LocalLocation *)ptr)->soap_out(soap, tag, id, "tt:LocalLocation");
	case SOAP_TYPE_tt__GeoOrientation:
		return ((tt__GeoOrientation *)ptr)->soap_out(soap, tag, id, "tt:GeoOrientation");
	case SOAP_TYPE_tt__GeoLocation:
		return ((tt__GeoLocation *)ptr)->soap_out(soap, tag, id, "tt:GeoLocation");
	case SOAP_TYPE_tt__TransformationExtension:
		return ((tt__TransformationExtension *)ptr)->soap_out(soap, tag, id, "tt:TransformationExtension");
	case SOAP_TYPE_tt__Transformation:
		return ((tt__Transformation *)ptr)->soap_out(soap, tag, id, "tt:Transformation");
	case SOAP_TYPE_tt__ColorCovariance:
		return ((tt__ColorCovariance *)ptr)->soap_out(soap, tag, id, "tt:ColorCovariance");
	case SOAP_TYPE_tt__Color:
		return ((tt__Color *)ptr)->soap_out(soap, tag, id, "tt:Color");
	case SOAP_TYPE_tt__Polygon:
		return ((tt__Polygon *)ptr)->soap_out(soap, tag, id, "tt:Polygon");
	case SOAP_TYPE_tt__Rectangle:
		return ((tt__Rectangle *)ptr)->soap_out(soap, tag, id, "tt:Rectangle");
	case SOAP_TYPE_tt__Vector:
		return ((tt__Vector *)ptr)->soap_out(soap, tag, id, "tt:Vector");
	case SOAP_TYPE_tt__PTZMoveStatus:
		return ((tt__PTZMoveStatus *)ptr)->soap_out(soap, tag, id, "tt:PTZMoveStatus");
	case SOAP_TYPE_tt__PTZStatus:
		return ((tt__PTZStatus *)ptr)->soap_out(soap, tag, id, "tt:PTZStatus");
	case SOAP_TYPE_tt__PTZVector:
		return ((tt__PTZVector *)ptr)->soap_out(soap, tag, id, "tt:PTZVector");
	case SOAP_TYPE_tt__Vector1D:
		return ((tt__Vector1D *)ptr)->soap_out(soap, tag, id, "tt:Vector1D");
	case SOAP_TYPE_tt__Vector2D:
		return ((tt__Vector2D *)ptr)->soap_out(soap, tag, id, "tt:Vector2D");
	case SOAP_TYPE_tt__StorageReferencePathExtension:
		return ((tt__StorageReferencePathExtension *)ptr)->soap_out(soap, tag, id, "tt:StorageReferencePathExtension");
	case SOAP_TYPE_tt__StorageReferencePath:
		return ((tt__StorageReferencePath *)ptr)->soap_out(soap, tag, id, "tt:StorageReferencePath");
	case SOAP_TYPE_tt__ArrayOfFileProgressExtension:
		return ((tt__ArrayOfFileProgressExtension *)ptr)->soap_out(soap, tag, id, "tt:ArrayOfFileProgressExtension");
	case SOAP_TYPE_tt__ArrayOfFileProgress:
		return ((tt__ArrayOfFileProgress *)ptr)->soap_out(soap, tag, id, "tt:ArrayOfFileProgress");
	case SOAP_TYPE_tt__FileProgress:
		return ((tt__FileProgress *)ptr)->soap_out(soap, tag, id, "tt:FileProgress");
	case SOAP_TYPE_tt__OSDConfigurationOptionsExtension:
		return ((tt__OSDConfigurationOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDConfigurationOptionsExtension");
	case SOAP_TYPE_tt__OSDConfigurationOptions:
		return ((tt__OSDConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:OSDConfigurationOptions");
	case SOAP_TYPE_tt__MaximumNumberOfOSDs:
		return ((tt__MaximumNumberOfOSDs *)ptr)->soap_out(soap, tag, id, "tt:MaximumNumberOfOSDs");
	case SOAP_TYPE_tt__OSDConfigurationExtension:
		return ((tt__OSDConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDConfigurationExtension");
	case SOAP_TYPE_tt__OSDConfiguration:
		return ((tt__OSDConfiguration *)ptr)->soap_out(soap, tag, id, "tt:OSDConfiguration");
	case SOAP_TYPE_tt__OSDImgOptionsExtension:
		return ((tt__OSDImgOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDImgOptionsExtension");
	case SOAP_TYPE_tt__OSDImgOptions:
		return ((tt__OSDImgOptions *)ptr)->soap_out(soap, tag, id, "tt:OSDImgOptions");
	case SOAP_TYPE_tt__OSDTextOptionsExtension:
		return ((tt__OSDTextOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDTextOptionsExtension");
	case SOAP_TYPE_tt__OSDTextOptions:
		return ((tt__OSDTextOptions *)ptr)->soap_out(soap, tag, id, "tt:OSDTextOptions");
	case SOAP_TYPE_tt__OSDColorOptionsExtension:
		return ((tt__OSDColorOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDColorOptionsExtension");
	case SOAP_TYPE_tt__OSDColorOptions:
		return ((tt__OSDColorOptions *)ptr)->soap_out(soap, tag, id, "tt:OSDColorOptions");
	case SOAP_TYPE_tt__ColorOptions:
		return ((tt__ColorOptions *)ptr)->soap_out(soap, tag, id, "tt:ColorOptions");
	case SOAP_TYPE_tt__ColorspaceRange:
		return ((tt__ColorspaceRange *)ptr)->soap_out(soap, tag, id, "tt:ColorspaceRange");
	case SOAP_TYPE_tt__OSDImgConfigurationExtension:
		return ((tt__OSDImgConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDImgConfigurationExtension");
	case SOAP_TYPE_tt__OSDImgConfiguration:
		return ((tt__OSDImgConfiguration *)ptr)->soap_out(soap, tag, id, "tt:OSDImgConfiguration");
	case SOAP_TYPE_tt__OSDTextConfigurationExtension:
		return ((tt__OSDTextConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDTextConfigurationExtension");
	case SOAP_TYPE_tt__OSDTextConfiguration:
		return ((tt__OSDTextConfiguration *)ptr)->soap_out(soap, tag, id, "tt:OSDTextConfiguration");
	case SOAP_TYPE_tt__OSDColor:
		return ((tt__OSDColor *)ptr)->soap_out(soap, tag, id, "tt:OSDColor");
	case SOAP_TYPE_tt__OSDPosConfigurationExtension:
		return ((tt__OSDPosConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:OSDPosConfigurationExtension");
	case SOAP_TYPE_tt__OSDPosConfiguration:
		return ((tt__OSDPosConfiguration *)ptr)->soap_out(soap, tag, id, "tt:OSDPosConfiguration");
	case SOAP_TYPE_tt__OSDReference:
		return ((tt__OSDReference *)ptr)->soap_out(soap, tag, id, "tt:OSDReference");
	case SOAP_TYPE_tt__ProfileStatusExtension:
		return ((tt__ProfileStatusExtension *)ptr)->soap_out(soap, tag, id, "tt:ProfileStatusExtension");
	case SOAP_TYPE_tt__ProfileStatus:
		return ((tt__ProfileStatus *)ptr)->soap_out(soap, tag, id, "tt:ProfileStatus");
	case SOAP_TYPE_tt__ActiveConnection:
		return ((tt__ActiveConnection *)ptr)->soap_out(soap, tag, id, "tt:ActiveConnection");
	case SOAP_TYPE_tt__AudioClassDescriptorExtension:
		return ((tt__AudioClassDescriptorExtension *)ptr)->soap_out(soap, tag, id, "tt:AudioClassDescriptorExtension");
	case SOAP_TYPE_tt__AudioClassDescriptor:
		return ((tt__AudioClassDescriptor *)ptr)->soap_out(soap, tag, id, "tt:AudioClassDescriptor");
	case SOAP_TYPE_tt__AudioClassCandidate:
		return ((tt__AudioClassCandidate *)ptr)->soap_out(soap, tag, id, "tt:AudioClassCandidate");
	case SOAP_TYPE_tt__ActionEngineEventPayloadExtension:
		return ((tt__ActionEngineEventPayloadExtension *)ptr)->soap_out(soap, tag, id, "tt:ActionEngineEventPayloadExtension");
	case SOAP_TYPE_tt__ActionEngineEventPayload:
		return ((tt__ActionEngineEventPayload *)ptr)->soap_out(soap, tag, id, "tt:ActionEngineEventPayload");
	case SOAP_TYPE_tt__AnalyticsState:
		return ((tt__AnalyticsState *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsState");
	case SOAP_TYPE_tt__AnalyticsStateInformation:
		return ((tt__AnalyticsStateInformation *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsStateInformation");
	case SOAP_TYPE_tt__AnalyticsEngineControl:
		return ((tt__AnalyticsEngineControl *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsEngineControl");
	case SOAP_TYPE_tt__MetadataInputExtension:
		return ((tt__MetadataInputExtension *)ptr)->soap_out(soap, tag, id, "tt:MetadataInputExtension");
	case SOAP_TYPE_tt__MetadataInput:
		return ((tt__MetadataInput *)ptr)->soap_out(soap, tag, id, "tt:MetadataInput");
	case SOAP_TYPE_tt__SourceIdentificationExtension:
		return ((tt__SourceIdentificationExtension *)ptr)->soap_out(soap, tag, id, "tt:SourceIdentificationExtension");
	case SOAP_TYPE_tt__SourceIdentification:
		return ((tt__SourceIdentification *)ptr)->soap_out(soap, tag, id, "tt:SourceIdentification");
	case SOAP_TYPE_tt__AnalyticsEngineInput:
		return ((tt__AnalyticsEngineInput *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsEngineInput");
	case SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension:
		return ((tt__AnalyticsEngineInputInfoExtension *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsEngineInputInfoExtension");
	case SOAP_TYPE_tt__AnalyticsEngineInputInfo:
		return ((tt__AnalyticsEngineInputInfo *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsEngineInputInfo");
	case SOAP_TYPE_tt__EngineConfiguration:
		return ((tt__EngineConfiguration *)ptr)->soap_out(soap, tag, id, "tt:EngineConfiguration");
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension:
		return ((tt__AnalyticsDeviceEngineConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsDeviceEngineConfigurationExtension");
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration:
		return ((tt__AnalyticsDeviceEngineConfiguration *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsDeviceEngineConfiguration");
	case SOAP_TYPE_tt__AnalyticsEngine:
		return ((tt__AnalyticsEngine *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsEngine");
	case SOAP_TYPE_tt__ReplayConfiguration:
		return ((tt__ReplayConfiguration *)ptr)->soap_out(soap, tag, id, "tt:ReplayConfiguration");
	case SOAP_TYPE_tt__GetRecordingJobsResponseItem:
		return ((tt__GetRecordingJobsResponseItem *)ptr)->soap_out(soap, tag, id, "tt:GetRecordingJobsResponseItem");
	case SOAP_TYPE_tt__RecordingJobStateTrack:
		return ((tt__RecordingJobStateTrack *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobStateTrack");
	case SOAP_TYPE_tt__RecordingJobStateTracks:
		return ((tt__RecordingJobStateTracks *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobStateTracks");
	case SOAP_TYPE_tt__RecordingJobStateSource:
		return ((tt__RecordingJobStateSource *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobStateSource");
	case SOAP_TYPE_tt__RecordingJobStateInformationExtension:
		return ((tt__RecordingJobStateInformationExtension *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobStateInformationExtension");
	case SOAP_TYPE_tt__RecordingJobStateInformation:
		return ((tt__RecordingJobStateInformation *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobStateInformation");
	case SOAP_TYPE_tt__RecordingJobTrack:
		return ((tt__RecordingJobTrack *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobTrack");
	case SOAP_TYPE_tt__RecordingJobSourceExtension:
		return ((tt__RecordingJobSourceExtension *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobSourceExtension");
	case SOAP_TYPE_tt__RecordingJobSource:
		return ((tt__RecordingJobSource *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobSource");
	case SOAP_TYPE_tt__RecordingJobConfigurationExtension:
		return ((tt__RecordingJobConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobConfigurationExtension");
	case SOAP_TYPE_tt__RecordingJobConfiguration:
		return ((tt__RecordingJobConfiguration *)ptr)->soap_out(soap, tag, id, "tt:RecordingJobConfiguration");
	case SOAP_TYPE_tt__GetTracksResponseItem:
		return ((tt__GetTracksResponseItem *)ptr)->soap_out(soap, tag, id, "tt:GetTracksResponseItem");
	case SOAP_TYPE_tt__GetTracksResponseList:
		return ((tt__GetTracksResponseList *)ptr)->soap_out(soap, tag, id, "tt:GetTracksResponseList");
	case SOAP_TYPE_tt__GetRecordingsResponseItem:
		return ((tt__GetRecordingsResponseItem *)ptr)->soap_out(soap, tag, id, "tt:GetRecordingsResponseItem");
	case SOAP_TYPE_tt__TrackConfiguration:
		return ((tt__TrackConfiguration *)ptr)->soap_out(soap, tag, id, "tt:TrackConfiguration");
	case SOAP_TYPE_tt__RecordingConfiguration:
		return ((tt__RecordingConfiguration *)ptr)->soap_out(soap, tag, id, "tt:RecordingConfiguration");
	case SOAP_TYPE_tt__MetadataAttributes:
		return ((tt__MetadataAttributes *)ptr)->soap_out(soap, tag, id, "tt:MetadataAttributes");
	case SOAP_TYPE_tt__AudioAttributes:
		return ((tt__AudioAttributes *)ptr)->soap_out(soap, tag, id, "tt:AudioAttributes");
	case SOAP_TYPE_tt__VideoAttributes:
		return ((tt__VideoAttributes *)ptr)->soap_out(soap, tag, id, "tt:VideoAttributes");
	case SOAP_TYPE_tt__TrackAttributesExtension:
		return ((tt__TrackAttributesExtension *)ptr)->soap_out(soap, tag, id, "tt:TrackAttributesExtension");
	case SOAP_TYPE_tt__TrackAttributes:
		return ((tt__TrackAttributes *)ptr)->soap_out(soap, tag, id, "tt:TrackAttributes");
	case SOAP_TYPE_tt__MediaAttributes:
		return ((tt__MediaAttributes *)ptr)->soap_out(soap, tag, id, "tt:MediaAttributes");
	case SOAP_TYPE_tt__TrackInformation:
		return ((tt__TrackInformation *)ptr)->soap_out(soap, tag, id, "tt:TrackInformation");
	case SOAP_TYPE_tt__RecordingSourceInformation:
		return ((tt__RecordingSourceInformation *)ptr)->soap_out(soap, tag, id, "tt:RecordingSourceInformation");
	case SOAP_TYPE_tt__RecordingInformation:
		return ((tt__RecordingInformation *)ptr)->soap_out(soap, tag, id, "tt:RecordingInformation");
	case SOAP_TYPE_tt__FindMetadataResult:
		return ((tt__FindMetadataResult *)ptr)->soap_out(soap, tag, id, "tt:FindMetadataResult");
	case SOAP_TYPE_tt__FindMetadataResultList:
		return ((tt__FindMetadataResultList *)ptr)->soap_out(soap, tag, id, "tt:FindMetadataResultList");
	case SOAP_TYPE_tt__FindPTZPositionResult:
		return ((tt__FindPTZPositionResult *)ptr)->soap_out(soap, tag, id, "tt:FindPTZPositionResult");
	case SOAP_TYPE_tt__FindPTZPositionResultList:
		return ((tt__FindPTZPositionResultList *)ptr)->soap_out(soap, tag, id, "tt:FindPTZPositionResultList");
	case SOAP_TYPE_tt__FindEventResult:
		return ((tt__FindEventResult *)ptr)->soap_out(soap, tag, id, "tt:FindEventResult");
	case SOAP_TYPE_tt__FindEventResultList:
		return ((tt__FindEventResultList *)ptr)->soap_out(soap, tag, id, "tt:FindEventResultList");
	case SOAP_TYPE_tt__FindRecordingResultList:
		return ((tt__FindRecordingResultList *)ptr)->soap_out(soap, tag, id, "tt:FindRecordingResultList");
	case SOAP_TYPE_tt__MetadataFilter:
		return ((tt__MetadataFilter *)ptr)->soap_out(soap, tag, id, "tt:MetadataFilter");
	case SOAP_TYPE_tt__PTZPositionFilter:
		return ((tt__PTZPositionFilter *)ptr)->soap_out(soap, tag, id, "tt:PTZPositionFilter");
	case SOAP_TYPE_tt__EventFilter:
		return ((tt__EventFilter *)ptr)->soap_out(soap, tag, id, "tt:EventFilter");
	case SOAP_TYPE_tt__SearchScopeExtension:
		return ((tt__SearchScopeExtension *)ptr)->soap_out(soap, tag, id, "tt:SearchScopeExtension");
	case SOAP_TYPE_tt__SearchScope:
		return ((tt__SearchScope *)ptr)->soap_out(soap, tag, id, "tt:SearchScope");
	case SOAP_TYPE_tt__RecordingSummary:
		return ((tt__RecordingSummary *)ptr)->soap_out(soap, tag, id, "tt:RecordingSummary");
	case SOAP_TYPE_tt__DateTimeRange:
		return ((tt__DateTimeRange *)ptr)->soap_out(soap, tag, id, "tt:DateTimeRange");
	case SOAP_TYPE_tt__SourceReference:
		return ((tt__SourceReference *)ptr)->soap_out(soap, tag, id, "tt:SourceReference");
	case SOAP_TYPE_tt__ReceiverStateInformation:
		return ((tt__ReceiverStateInformation *)ptr)->soap_out(soap, tag, id, "tt:ReceiverStateInformation");
	case SOAP_TYPE_tt__ReceiverConfiguration:
		return ((tt__ReceiverConfiguration *)ptr)->soap_out(soap, tag, id, "tt:ReceiverConfiguration");
	case SOAP_TYPE_tt__Receiver:
		return ((tt__Receiver *)ptr)->soap_out(soap, tag, id, "tt:Receiver");
	case SOAP_TYPE_tt__PaneOptionExtension:
		return ((tt__PaneOptionExtension *)ptr)->soap_out(soap, tag, id, "tt:PaneOptionExtension");
	case SOAP_TYPE_tt__PaneLayoutOptions:
		return ((tt__PaneLayoutOptions *)ptr)->soap_out(soap, tag, id, "tt:PaneLayoutOptions");
	case SOAP_TYPE_tt__LayoutOptionsExtension:
		return ((tt__LayoutOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:LayoutOptionsExtension");
	case SOAP_TYPE_tt__LayoutOptions:
		return ((tt__LayoutOptions *)ptr)->soap_out(soap, tag, id, "tt:LayoutOptions");
	case SOAP_TYPE_tt__CodingCapabilities:
		return ((tt__CodingCapabilities *)ptr)->soap_out(soap, tag, id, "tt:CodingCapabilities");
	case SOAP_TYPE_tt__LayoutExtension:
		return ((tt__LayoutExtension *)ptr)->soap_out(soap, tag, id, "tt:LayoutExtension");
	case SOAP_TYPE_tt__Layout:
		return ((tt__Layout *)ptr)->soap_out(soap, tag, id, "tt:Layout");
	case SOAP_TYPE_tt__PaneLayout:
		return ((tt__PaneLayout *)ptr)->soap_out(soap, tag, id, "tt:PaneLayout");
	case SOAP_TYPE_tt__PaneConfiguration:
		return ((tt__PaneConfiguration *)ptr)->soap_out(soap, tag, id, "tt:PaneConfiguration");
	case SOAP_TYPE_tt__CellLayout:
		return ((tt__CellLayout *)ptr)->soap_out(soap, tag, id, "tt:CellLayout");
	case SOAP_TYPE_tt__MotionExpressionConfiguration:
		return ((tt__MotionExpressionConfiguration *)ptr)->soap_out(soap, tag, id, "tt:MotionExpressionConfiguration");
	case SOAP_TYPE_tt__MotionExpression:
		return ((tt__MotionExpression *)ptr)->soap_out(soap, tag, id, "tt:MotionExpression");
	case SOAP_TYPE_tt__PolylineArrayConfiguration:
		return ((tt__PolylineArrayConfiguration *)ptr)->soap_out(soap, tag, id, "tt:PolylineArrayConfiguration");
	case SOAP_TYPE_tt__PolylineArrayExtension:
		return ((tt__PolylineArrayExtension *)ptr)->soap_out(soap, tag, id, "tt:PolylineArrayExtension");
	case SOAP_TYPE_tt__PolylineArray:
		return ((tt__PolylineArray *)ptr)->soap_out(soap, tag, id, "tt:PolylineArray");
	case SOAP_TYPE_tt__PolygonConfiguration:
		return ((tt__PolygonConfiguration *)ptr)->soap_out(soap, tag, id, "tt:PolygonConfiguration");
	case SOAP_TYPE_tt__SupportedAnalyticsModulesExtension:
		return ((tt__SupportedAnalyticsModulesExtension *)ptr)->soap_out(soap, tag, id, "tt:SupportedAnalyticsModulesExtension");
	case SOAP_TYPE_tt__SupportedAnalyticsModules:
		return ((tt__SupportedAnalyticsModules *)ptr)->soap_out(soap, tag, id, "tt:SupportedAnalyticsModules");
	case SOAP_TYPE_tt__SupportedRulesExtension:
		return ((tt__SupportedRulesExtension *)ptr)->soap_out(soap, tag, id, "tt:SupportedRulesExtension");
	case SOAP_TYPE_tt__SupportedRules:
		return ((tt__SupportedRules *)ptr)->soap_out(soap, tag, id, "tt:SupportedRules");
	case SOAP_TYPE_tt__ConfigDescriptionExtension:
		return ((tt__ConfigDescriptionExtension *)ptr)->soap_out(soap, tag, id, "tt:ConfigDescriptionExtension");
	case SOAP_TYPE_tt__ConfigDescription:
		return ((tt__ConfigDescription *)ptr)->soap_out(soap, tag, id, "tt:ConfigDescription");
	case SOAP_TYPE_tt__Config:
		return ((tt__Config *)ptr)->soap_out(soap, tag, id, "tt:Config");
	case SOAP_TYPE_tt__RuleEngineConfigurationExtension:
		return ((tt__RuleEngineConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:RuleEngineConfigurationExtension");
	case SOAP_TYPE_tt__RuleEngineConfiguration:
		return ((tt__RuleEngineConfiguration *)ptr)->soap_out(soap, tag, id, "tt:RuleEngineConfiguration");
	case SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension:
		return ((tt__AnalyticsEngineConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsEngineConfigurationExtension");
	case SOAP_TYPE_tt__AnalyticsEngineConfiguration:
		return ((tt__AnalyticsEngineConfiguration *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsEngineConfiguration");
	case SOAP_TYPE_tt__Polyline:
		return ((tt__Polyline *)ptr)->soap_out(soap, tag, id, "tt:Polyline");
	case SOAP_TYPE_tt__ItemListDescriptionExtension:
		return ((tt__ItemListDescriptionExtension *)ptr)->soap_out(soap, tag, id, "tt:ItemListDescriptionExtension");
	case SOAP_TYPE_tt__ItemListDescription:
		return ((tt__ItemListDescription *)ptr)->soap_out(soap, tag, id, "tt:ItemListDescription");
	case SOAP_TYPE_tt__MessageDescriptionExtension:
		return ((tt__MessageDescriptionExtension *)ptr)->soap_out(soap, tag, id, "tt:MessageDescriptionExtension");
	case SOAP_TYPE_tt__MessageDescription:
		return ((tt__MessageDescription *)ptr)->soap_out(soap, tag, id, "tt:MessageDescription");
	case SOAP_TYPE_tt__ItemListExtension:
		return ((tt__ItemListExtension *)ptr)->soap_out(soap, tag, id, "tt:ItemListExtension");
	case SOAP_TYPE_tt__ItemList:
		return ((tt__ItemList *)ptr)->soap_out(soap, tag, id, "tt:ItemList");
	case SOAP_TYPE_tt__MessageExtension:
		return ((tt__MessageExtension *)ptr)->soap_out(soap, tag, id, "tt:MessageExtension");
	case SOAP_TYPE_tt__NoiseReductionOptions:
		return ((tt__NoiseReductionOptions *)ptr)->soap_out(soap, tag, id, "tt:NoiseReductionOptions");
	case SOAP_TYPE_tt__DefoggingOptions:
		return ((tt__DefoggingOptions *)ptr)->soap_out(soap, tag, id, "tt:DefoggingOptions");
	case SOAP_TYPE_tt__ToneCompensationOptions:
		return ((tt__ToneCompensationOptions *)ptr)->soap_out(soap, tag, id, "tt:ToneCompensationOptions");
	case SOAP_TYPE_tt__FocusOptions20Extension:
		return ((tt__FocusOptions20Extension *)ptr)->soap_out(soap, tag, id, "tt:FocusOptions20Extension");
	case SOAP_TYPE_tt__FocusOptions20:
		return ((tt__FocusOptions20 *)ptr)->soap_out(soap, tag, id, "tt:FocusOptions20");
	case SOAP_TYPE_tt__WhiteBalanceOptions20Extension:
		return ((tt__WhiteBalanceOptions20Extension *)ptr)->soap_out(soap, tag, id, "tt:WhiteBalanceOptions20Extension");
	case SOAP_TYPE_tt__WhiteBalanceOptions20:
		return ((tt__WhiteBalanceOptions20 *)ptr)->soap_out(soap, tag, id, "tt:WhiteBalanceOptions20");
	case SOAP_TYPE_tt__FocusConfiguration20Extension:
		return ((tt__FocusConfiguration20Extension *)ptr)->soap_out(soap, tag, id, "tt:FocusConfiguration20Extension");
	case SOAP_TYPE_tt__FocusConfiguration20:
		return ((tt__FocusConfiguration20 *)ptr)->soap_out(soap, tag, id, "tt:FocusConfiguration20");
	case SOAP_TYPE_tt__WhiteBalance20Extension:
		return ((tt__WhiteBalance20Extension *)ptr)->soap_out(soap, tag, id, "tt:WhiteBalance20Extension");
	case SOAP_TYPE_tt__WhiteBalance20:
		return ((tt__WhiteBalance20 *)ptr)->soap_out(soap, tag, id, "tt:WhiteBalance20");
	case SOAP_TYPE_tt__RelativeFocusOptions20:
		return ((tt__RelativeFocusOptions20 *)ptr)->soap_out(soap, tag, id, "tt:RelativeFocusOptions20");
	case SOAP_TYPE_tt__MoveOptions20:
		return ((tt__MoveOptions20 *)ptr)->soap_out(soap, tag, id, "tt:MoveOptions20");
	case SOAP_TYPE_tt__ExposureOptions20:
		return ((tt__ExposureOptions20 *)ptr)->soap_out(soap, tag, id, "tt:ExposureOptions20");
	case SOAP_TYPE_tt__BacklightCompensationOptions20:
		return ((tt__BacklightCompensationOptions20 *)ptr)->soap_out(soap, tag, id, "tt:BacklightCompensationOptions20");
	case SOAP_TYPE_tt__WideDynamicRangeOptions20:
		return ((tt__WideDynamicRangeOptions20 *)ptr)->soap_out(soap, tag, id, "tt:WideDynamicRangeOptions20");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension:
		return ((tt__IrCutFilterAutoAdjustmentOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:IrCutFilterAutoAdjustmentOptionsExtension");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions:
		return ((tt__IrCutFilterAutoAdjustmentOptions *)ptr)->soap_out(soap, tag, id, "tt:IrCutFilterAutoAdjustmentOptions");
	case SOAP_TYPE_tt__ImageStabilizationOptionsExtension:
		return ((tt__ImageStabilizationOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:ImageStabilizationOptionsExtension");
	case SOAP_TYPE_tt__ImageStabilizationOptions:
		return ((tt__ImageStabilizationOptions *)ptr)->soap_out(soap, tag, id, "tt:ImageStabilizationOptions");
	case SOAP_TYPE_tt__ImagingOptions20Extension4:
		return ((tt__ImagingOptions20Extension4 *)ptr)->soap_out(soap, tag, id, "tt:ImagingOptions20Extension4");
	case SOAP_TYPE_tt__ImagingOptions20Extension3:
		return ((tt__ImagingOptions20Extension3 *)ptr)->soap_out(soap, tag, id, "tt:ImagingOptions20Extension3");
	case SOAP_TYPE_tt__ImagingOptions20Extension2:
		return ((tt__ImagingOptions20Extension2 *)ptr)->soap_out(soap, tag, id, "tt:ImagingOptions20Extension2");
	case SOAP_TYPE_tt__ImagingOptions20Extension:
		return ((tt__ImagingOptions20Extension *)ptr)->soap_out(soap, tag, id, "tt:ImagingOptions20Extension");
	case SOAP_TYPE_tt__ImagingOptions20:
		return ((tt__ImagingOptions20 *)ptr)->soap_out(soap, tag, id, "tt:ImagingOptions20");
	case SOAP_TYPE_tt__NoiseReduction:
		return ((tt__NoiseReduction *)ptr)->soap_out(soap, tag, id, "tt:NoiseReduction");
	case SOAP_TYPE_tt__DefoggingExtension:
		return ((tt__DefoggingExtension *)ptr)->soap_out(soap, tag, id, "tt:DefoggingExtension");
	case SOAP_TYPE_tt__Defogging:
		return ((tt__Defogging *)ptr)->soap_out(soap, tag, id, "tt:Defogging");
	case SOAP_TYPE_tt__ToneCompensationExtension:
		return ((tt__ToneCompensationExtension *)ptr)->soap_out(soap, tag, id, "tt:ToneCompensationExtension");
	case SOAP_TYPE_tt__ToneCompensation:
		return ((tt__ToneCompensation *)ptr)->soap_out(soap, tag, id, "tt:ToneCompensation");
	case SOAP_TYPE_tt__Exposure20:
		return ((tt__Exposure20 *)ptr)->soap_out(soap, tag, id, "tt:Exposure20");
	case SOAP_TYPE_tt__BacklightCompensation20:
		return ((tt__BacklightCompensation20 *)ptr)->soap_out(soap, tag, id, "tt:BacklightCompensation20");
	case SOAP_TYPE_tt__WideDynamicRange20:
		return ((tt__WideDynamicRange20 *)ptr)->soap_out(soap, tag, id, "tt:WideDynamicRange20");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension:
		return ((tt__IrCutFilterAutoAdjustmentExtension *)ptr)->soap_out(soap, tag, id, "tt:IrCutFilterAutoAdjustmentExtension");
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustment:
		return ((tt__IrCutFilterAutoAdjustment *)ptr)->soap_out(soap, tag, id, "tt:IrCutFilterAutoAdjustment");
	case SOAP_TYPE_tt__ImageStabilizationExtension:
		return ((tt__ImageStabilizationExtension *)ptr)->soap_out(soap, tag, id, "tt:ImageStabilizationExtension");
	case SOAP_TYPE_tt__ImageStabilization:
		return ((tt__ImageStabilization *)ptr)->soap_out(soap, tag, id, "tt:ImageStabilization");
	case SOAP_TYPE_tt__ImagingSettingsExtension204:
		return ((tt__ImagingSettingsExtension204 *)ptr)->soap_out(soap, tag, id, "tt:ImagingSettingsExtension204");
	case SOAP_TYPE_tt__ImagingSettingsExtension203:
		return ((tt__ImagingSettingsExtension203 *)ptr)->soap_out(soap, tag, id, "tt:ImagingSettingsExtension203");
	case SOAP_TYPE_tt__ImagingSettingsExtension202:
		return ((tt__ImagingSettingsExtension202 *)ptr)->soap_out(soap, tag, id, "tt:ImagingSettingsExtension202");
	case SOAP_TYPE_tt__ImagingSettingsExtension20:
		return ((tt__ImagingSettingsExtension20 *)ptr)->soap_out(soap, tag, id, "tt:ImagingSettingsExtension20");
	case SOAP_TYPE_tt__ImagingSettings20:
		return ((tt__ImagingSettings20 *)ptr)->soap_out(soap, tag, id, "tt:ImagingSettings20");
	case SOAP_TYPE_tt__FocusStatus20Extension:
		return ((tt__FocusStatus20Extension *)ptr)->soap_out(soap, tag, id, "tt:FocusStatus20Extension");
	case SOAP_TYPE_tt__FocusStatus20:
		return ((tt__FocusStatus20 *)ptr)->soap_out(soap, tag, id, "tt:FocusStatus20");
	case SOAP_TYPE_tt__ImagingStatus20Extension:
		return ((tt__ImagingStatus20Extension *)ptr)->soap_out(soap, tag, id, "tt:ImagingStatus20Extension");
	case SOAP_TYPE_tt__ImagingStatus20:
		return ((tt__ImagingStatus20 *)ptr)->soap_out(soap, tag, id, "tt:ImagingStatus20");
	case SOAP_TYPE_tt__WhiteBalance:
		return ((tt__WhiteBalance *)ptr)->soap_out(soap, tag, id, "tt:WhiteBalance");
	case SOAP_TYPE_tt__ContinuousFocusOptions:
		return ((tt__ContinuousFocusOptions *)ptr)->soap_out(soap, tag, id, "tt:ContinuousFocusOptions");
	case SOAP_TYPE_tt__RelativeFocusOptions:
		return ((tt__RelativeFocusOptions *)ptr)->soap_out(soap, tag, id, "tt:RelativeFocusOptions");
	case SOAP_TYPE_tt__AbsoluteFocusOptions:
		return ((tt__AbsoluteFocusOptions *)ptr)->soap_out(soap, tag, id, "tt:AbsoluteFocusOptions");
	case SOAP_TYPE_tt__MoveOptions:
		return ((tt__MoveOptions *)ptr)->soap_out(soap, tag, id, "tt:MoveOptions");
	case SOAP_TYPE_tt__ContinuousFocus:
		return ((tt__ContinuousFocus *)ptr)->soap_out(soap, tag, id, "tt:ContinuousFocus");
	case SOAP_TYPE_tt__RelativeFocus:
		return ((tt__RelativeFocus *)ptr)->soap_out(soap, tag, id, "tt:RelativeFocus");
	case SOAP_TYPE_tt__AbsoluteFocus:
		return ((tt__AbsoluteFocus *)ptr)->soap_out(soap, tag, id, "tt:AbsoluteFocus");
	case SOAP_TYPE_tt__FocusMove:
		return ((tt__FocusMove *)ptr)->soap_out(soap, tag, id, "tt:FocusMove");
	case SOAP_TYPE_tt__WhiteBalanceOptions:
		return ((tt__WhiteBalanceOptions *)ptr)->soap_out(soap, tag, id, "tt:WhiteBalanceOptions");
	case SOAP_TYPE_tt__ExposureOptions:
		return ((tt__ExposureOptions *)ptr)->soap_out(soap, tag, id, "tt:ExposureOptions");
	case SOAP_TYPE_tt__FocusOptions:
		return ((tt__FocusOptions *)ptr)->soap_out(soap, tag, id, "tt:FocusOptions");
	case SOAP_TYPE_tt__BacklightCompensationOptions:
		return ((tt__BacklightCompensationOptions *)ptr)->soap_out(soap, tag, id, "tt:BacklightCompensationOptions");
	case SOAP_TYPE_tt__WideDynamicRangeOptions:
		return ((tt__WideDynamicRangeOptions *)ptr)->soap_out(soap, tag, id, "tt:WideDynamicRangeOptions");
	case SOAP_TYPE_tt__ImagingOptions:
		return ((tt__ImagingOptions *)ptr)->soap_out(soap, tag, id, "tt:ImagingOptions");
	case SOAP_TYPE_tt__BacklightCompensation:
		return ((tt__BacklightCompensation *)ptr)->soap_out(soap, tag, id, "tt:BacklightCompensation");
	case SOAP_TYPE_tt__WideDynamicRange:
		return ((tt__WideDynamicRange *)ptr)->soap_out(soap, tag, id, "tt:WideDynamicRange");
	case SOAP_TYPE_tt__Exposure:
		return ((tt__Exposure *)ptr)->soap_out(soap, tag, id, "tt:Exposure");
	case SOAP_TYPE_tt__ImagingSettingsExtension:
		return ((tt__ImagingSettingsExtension *)ptr)->soap_out(soap, tag, id, "tt:ImagingSettingsExtension");
	case SOAP_TYPE_tt__ImagingSettings:
		return ((tt__ImagingSettings *)ptr)->soap_out(soap, tag, id, "tt:ImagingSettings");
	case SOAP_TYPE_tt__FocusConfiguration:
		return ((tt__FocusConfiguration *)ptr)->soap_out(soap, tag, id, "tt:FocusConfiguration");
	case SOAP_TYPE_tt__FocusStatus:
		return ((tt__FocusStatus *)ptr)->soap_out(soap, tag, id, "tt:FocusStatus");
	case SOAP_TYPE_tt__ImagingStatus:
		return ((tt__ImagingStatus *)ptr)->soap_out(soap, tag, id, "tt:ImagingStatus");
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension:
		return ((tt__PTZPresetTourStartingConditionOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourStartingConditionOptionsExtension");
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions:
		return ((tt__PTZPresetTourStartingConditionOptions *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourStartingConditionOptions");
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension:
		return ((tt__PTZPresetTourPresetDetailOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourPresetDetailOptionsExtension");
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions:
		return ((tt__PTZPresetTourPresetDetailOptions *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourPresetDetailOptions");
	case SOAP_TYPE_tt__PTZPresetTourSpotOptions:
		return ((tt__PTZPresetTourSpotOptions *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourSpotOptions");
	case SOAP_TYPE_tt__PTZPresetTourOptions:
		return ((tt__PTZPresetTourOptions *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourOptions");
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension:
		return ((tt__PTZPresetTourStartingConditionExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourStartingConditionExtension");
	case SOAP_TYPE_tt__PTZPresetTourStartingCondition:
		return ((tt__PTZPresetTourStartingCondition *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourStartingCondition");
	case SOAP_TYPE_tt__PTZPresetTourStatusExtension:
		return ((tt__PTZPresetTourStatusExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourStatusExtension");
	case SOAP_TYPE_tt__PTZPresetTourStatus:
		return ((tt__PTZPresetTourStatus *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourStatus");
	case SOAP_TYPE_tt__PTZPresetTourTypeExtension:
		return ((tt__PTZPresetTourTypeExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourTypeExtension");
	case SOAP_TYPE_tt__PTZPresetTourPresetDetail:
		return ((tt__PTZPresetTourPresetDetail *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourPresetDetail");
	case SOAP_TYPE_tt__PTZPresetTourSpotExtension:
		return ((tt__PTZPresetTourSpotExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourSpotExtension");
	case SOAP_TYPE_tt__PTZPresetTourSpot:
		return ((tt__PTZPresetTourSpot *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourSpot");
	case SOAP_TYPE_tt__PTZPresetTourExtension:
		return ((tt__PTZPresetTourExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourExtension");
	case SOAP_TYPE_tt__PresetTour:
		return ((tt__PresetTour *)ptr)->soap_out(soap, tag, id, "tt:PresetTour");
	case SOAP_TYPE_tt__PTZPreset:
		return ((tt__PTZPreset *)ptr)->soap_out(soap, tag, id, "tt:PTZPreset");
	case SOAP_TYPE_tt__PTZSpeed:
		return ((tt__PTZSpeed *)ptr)->soap_out(soap, tag, id, "tt:PTZSpeed");
	case SOAP_TYPE_tt__Space1DDescription:
		return ((tt__Space1DDescription *)ptr)->soap_out(soap, tag, id, "tt:Space1DDescription");
	case SOAP_TYPE_tt__Space2DDescription:
		return ((tt__Space2DDescription *)ptr)->soap_out(soap, tag, id, "tt:Space2DDescription");
	case SOAP_TYPE_tt__PTZSpacesExtension:
		return ((tt__PTZSpacesExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZSpacesExtension");
	case SOAP_TYPE_tt__PTZSpaces:
		return ((tt__PTZSpaces *)ptr)->soap_out(soap, tag, id, "tt:PTZSpaces");
	case SOAP_TYPE_tt__ZoomLimits:
		return ((tt__ZoomLimits *)ptr)->soap_out(soap, tag, id, "tt:ZoomLimits");
	case SOAP_TYPE_tt__PanTiltLimits:
		return ((tt__PanTiltLimits *)ptr)->soap_out(soap, tag, id, "tt:PanTiltLimits");
	case SOAP_TYPE_tt__ReverseOptionsExtension:
		return ((tt__ReverseOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:ReverseOptionsExtension");
	case SOAP_TYPE_tt__ReverseOptions:
		return ((tt__ReverseOptions *)ptr)->soap_out(soap, tag, id, "tt:ReverseOptions");
	case SOAP_TYPE_tt__EFlipOptionsExtension:
		return ((tt__EFlipOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:EFlipOptionsExtension");
	case SOAP_TYPE_tt__EFlipOptions:
		return ((tt__EFlipOptions *)ptr)->soap_out(soap, tag, id, "tt:EFlipOptions");
	case SOAP_TYPE_tt__PTControlDirectionOptionsExtension:
		return ((tt__PTControlDirectionOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:PTControlDirectionOptionsExtension");
	case SOAP_TYPE_tt__PTControlDirectionOptions:
		return ((tt__PTControlDirectionOptions *)ptr)->soap_out(soap, tag, id, "tt:PTControlDirectionOptions");
	case SOAP_TYPE_tt__PTZConfigurationOptions2:
		return ((tt__PTZConfigurationOptions2 *)ptr)->soap_out(soap, tag, id, "tt:PTZConfigurationOptions2");
	case SOAP_TYPE_tt__PTZConfigurationOptions:
		return ((tt__PTZConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:PTZConfigurationOptions");
	case SOAP_TYPE_tt__Reverse:
		return ((tt__Reverse *)ptr)->soap_out(soap, tag, id, "tt:Reverse");
	case SOAP_TYPE_tt__EFlip:
		return ((tt__EFlip *)ptr)->soap_out(soap, tag, id, "tt:EFlip");
	case SOAP_TYPE_tt__PTControlDirectionExtension:
		return ((tt__PTControlDirectionExtension *)ptr)->soap_out(soap, tag, id, "tt:PTControlDirectionExtension");
	case SOAP_TYPE_tt__PTControlDirection:
		return ((tt__PTControlDirection *)ptr)->soap_out(soap, tag, id, "tt:PTControlDirection");
	case SOAP_TYPE_tt__PTZConfigurationExtension2:
		return ((tt__PTZConfigurationExtension2 *)ptr)->soap_out(soap, tag, id, "tt:PTZConfigurationExtension2");
	case SOAP_TYPE_tt__PTZConfigurationExtension:
		return ((tt__PTZConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZConfigurationExtension");
	case SOAP_TYPE_tt__PTZConfiguration:
		return ((tt__PTZConfiguration *)ptr)->soap_out(soap, tag, id, "tt:PTZConfiguration");
	case SOAP_TYPE_tt__PTZPresetTourSupportedExtension:
		return ((tt__PTZPresetTourSupportedExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourSupportedExtension");
	case SOAP_TYPE_tt__PTZPresetTourSupported:
		return ((tt__PTZPresetTourSupported *)ptr)->soap_out(soap, tag, id, "tt:PTZPresetTourSupported");
	case SOAP_TYPE_tt__PTZNodeExtension2:
		return ((tt__PTZNodeExtension2 *)ptr)->soap_out(soap, tag, id, "tt:PTZNodeExtension2");
	case SOAP_TYPE_tt__PTZNodeExtension:
		return ((tt__PTZNodeExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZNodeExtension");
	case SOAP_TYPE_tt__PTZNode:
		return ((tt__PTZNode *)ptr)->soap_out(soap, tag, id, "tt:PTZNode");
	case SOAP_TYPE_tt__DigitalInput:
		return ((tt__DigitalInput *)ptr)->soap_out(soap, tag, id, "tt:DigitalInput");
	case SOAP_TYPE_tt__RelayOutput:
		return ((tt__RelayOutput *)ptr)->soap_out(soap, tag, id, "tt:RelayOutput");
	case SOAP_TYPE_tt__RelayOutputSettings:
		return ((tt__RelayOutputSettings *)ptr)->soap_out(soap, tag, id, "tt:RelayOutputSettings");
	case SOAP_TYPE_tt__GenericEapPwdConfigurationExtension:
		return ((tt__GenericEapPwdConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:GenericEapPwdConfigurationExtension");
	case SOAP_TYPE_tt__TLSConfiguration:
		return ((tt__TLSConfiguration *)ptr)->soap_out(soap, tag, id, "tt:TLSConfiguration");
	case SOAP_TYPE_tt__EapMethodExtension:
		return ((tt__EapMethodExtension *)ptr)->soap_out(soap, tag, id, "tt:EapMethodExtension");
	case SOAP_TYPE_tt__EAPMethodConfiguration:
		return ((tt__EAPMethodConfiguration *)ptr)->soap_out(soap, tag, id, "tt:EAPMethodConfiguration");
	case SOAP_TYPE_tt__Dot1XConfigurationExtension:
		return ((tt__Dot1XConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:Dot1XConfigurationExtension");
	case SOAP_TYPE_tt__Dot1XConfiguration:
		return ((tt__Dot1XConfiguration *)ptr)->soap_out(soap, tag, id, "tt:Dot1XConfiguration");
	case SOAP_TYPE_tt__CertificateInformationExtension:
		return ((tt__CertificateInformationExtension *)ptr)->soap_out(soap, tag, id, "tt:CertificateInformationExtension");
	case SOAP_TYPE_tt__CertificateUsage:
		return ((tt__CertificateUsage *)ptr)->soap_out(soap, tag, id, "tt:CertificateUsage");
	case SOAP_TYPE_tt__CertificateInformation:
		return ((tt__CertificateInformation *)ptr)->soap_out(soap, tag, id, "tt:CertificateInformation");
	case SOAP_TYPE_tt__CertificateWithPrivateKey:
		return ((tt__CertificateWithPrivateKey *)ptr)->soap_out(soap, tag, id, "tt:CertificateWithPrivateKey");
	case SOAP_TYPE_tt__CertificateStatus:
		return ((tt__CertificateStatus *)ptr)->soap_out(soap, tag, id, "tt:CertificateStatus");
	case SOAP_TYPE_tt__Certificate:
		return ((tt__Certificate *)ptr)->soap_out(soap, tag, id, "tt:Certificate");
	case SOAP_TYPE_tt__CertificateGenerationParametersExtension:
		return ((tt__CertificateGenerationParametersExtension *)ptr)->soap_out(soap, tag, id, "tt:CertificateGenerationParametersExtension");
	case SOAP_TYPE_tt__CertificateGenerationParameters:
		return ((tt__CertificateGenerationParameters *)ptr)->soap_out(soap, tag, id, "tt:CertificateGenerationParameters");
	case SOAP_TYPE_tt__UserExtension:
		return ((tt__UserExtension *)ptr)->soap_out(soap, tag, id, "tt:UserExtension");
	case SOAP_TYPE_tt__User:
		return ((tt__User *)ptr)->soap_out(soap, tag, id, "tt:User");
	case SOAP_TYPE_tt__RemoteUser:
		return ((tt__RemoteUser *)ptr)->soap_out(soap, tag, id, "tt:RemoteUser");
	case SOAP_TYPE_tt__TimeZone:
		return ((tt__TimeZone *)ptr)->soap_out(soap, tag, id, "tt:TimeZone");
	case SOAP_TYPE_tt__Time:
		return ((tt__Time *)ptr)->soap_out(soap, tag, id, "tt:Time");
	case SOAP_TYPE_tt__Date:
		return ((tt__Date *)ptr)->soap_out(soap, tag, id, "tt:Date");
	case SOAP_TYPE_tt__DateTime:
		return ((tt__DateTime *)ptr)->soap_out(soap, tag, id, "tt:DateTime");
	case SOAP_TYPE_tt__SystemDateTimeExtension:
		return ((tt__SystemDateTimeExtension *)ptr)->soap_out(soap, tag, id, "tt:SystemDateTimeExtension");
	case SOAP_TYPE_tt__SystemDateTime:
		return ((tt__SystemDateTime *)ptr)->soap_out(soap, tag, id, "tt:SystemDateTime");
	case SOAP_TYPE_tt__SystemLogUri:
		return ((tt__SystemLogUri *)ptr)->soap_out(soap, tag, id, "tt:SystemLogUri");
	case SOAP_TYPE_tt__SystemLogUriList:
		return ((tt__SystemLogUriList *)ptr)->soap_out(soap, tag, id, "tt:SystemLogUriList");
	case SOAP_TYPE_tt__BackupFile:
		return ((tt__BackupFile *)ptr)->soap_out(soap, tag, id, "tt:BackupFile");
	case SOAP_TYPE_tt__AttachmentData:
		return ((tt__AttachmentData *)ptr)->soap_out(soap, tag, id, "tt:AttachmentData");
	case SOAP_TYPE_tt__BinaryData:
		return ((tt__BinaryData *)ptr)->soap_out(soap, tag, id, "tt:BinaryData");
	case SOAP_TYPE_tt__SupportInformation:
		return ((tt__SupportInformation *)ptr)->soap_out(soap, tag, id, "tt:SupportInformation");
	case SOAP_TYPE_tt__SystemLog:
		return ((tt__SystemLog *)ptr)->soap_out(soap, tag, id, "tt:SystemLog");
	case SOAP_TYPE_tt__AnalyticsDeviceExtension:
		return ((tt__AnalyticsDeviceExtension *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsDeviceExtension");
	case SOAP_TYPE_tt__AnalyticsDeviceCapabilities:
		return ((tt__AnalyticsDeviceCapabilities *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsDeviceCapabilities");
	case SOAP_TYPE_tt__ReceiverCapabilities:
		return ((tt__ReceiverCapabilities *)ptr)->soap_out(soap, tag, id, "tt:ReceiverCapabilities");
	case SOAP_TYPE_tt__ReplayCapabilities:
		return ((tt__ReplayCapabilities *)ptr)->soap_out(soap, tag, id, "tt:ReplayCapabilities");
	case SOAP_TYPE_tt__SearchCapabilities:
		return ((tt__SearchCapabilities *)ptr)->soap_out(soap, tag, id, "tt:SearchCapabilities");
	case SOAP_TYPE_tt__RecordingCapabilities:
		return ((tt__RecordingCapabilities *)ptr)->soap_out(soap, tag, id, "tt:RecordingCapabilities");
	case SOAP_TYPE_tt__DisplayCapabilities:
		return ((tt__DisplayCapabilities *)ptr)->soap_out(soap, tag, id, "tt:DisplayCapabilities");
	case SOAP_TYPE_tt__DeviceIOCapabilities:
		return ((tt__DeviceIOCapabilities *)ptr)->soap_out(soap, tag, id, "tt:DeviceIOCapabilities");
	case SOAP_TYPE_tt__PTZCapabilities:
		return ((tt__PTZCapabilities *)ptr)->soap_out(soap, tag, id, "tt:PTZCapabilities");
	case SOAP_TYPE_tt__ImagingCapabilities:
		return ((tt__ImagingCapabilities *)ptr)->soap_out(soap, tag, id, "tt:ImagingCapabilities");
	case SOAP_TYPE_tt__OnvifVersion:
		return ((tt__OnvifVersion *)ptr)->soap_out(soap, tag, id, "tt:OnvifVersion");
	case SOAP_TYPE_tt__SystemCapabilitiesExtension2:
		return ((tt__SystemCapabilitiesExtension2 *)ptr)->soap_out(soap, tag, id, "tt:SystemCapabilitiesExtension2");
	case SOAP_TYPE_tt__SystemCapabilitiesExtension:
		return ((tt__SystemCapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:SystemCapabilitiesExtension");
	case SOAP_TYPE_tt__SystemCapabilities:
		return ((tt__SystemCapabilities *)ptr)->soap_out(soap, tag, id, "tt:SystemCapabilities");
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension2:
		return ((tt__SecurityCapabilitiesExtension2 *)ptr)->soap_out(soap, tag, id, "tt:SecurityCapabilitiesExtension2");
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension:
		return ((tt__SecurityCapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:SecurityCapabilitiesExtension");
	case SOAP_TYPE_tt__SecurityCapabilities:
		return ((tt__SecurityCapabilities *)ptr)->soap_out(soap, tag, id, "tt:SecurityCapabilities");
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension2:
		return ((tt__NetworkCapabilitiesExtension2 *)ptr)->soap_out(soap, tag, id, "tt:NetworkCapabilitiesExtension2");
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension:
		return ((tt__NetworkCapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:NetworkCapabilitiesExtension");
	case SOAP_TYPE_tt__NetworkCapabilities:
		return ((tt__NetworkCapabilities *)ptr)->soap_out(soap, tag, id, "tt:NetworkCapabilities");
	case SOAP_TYPE_tt__ProfileCapabilities:
		return ((tt__ProfileCapabilities *)ptr)->soap_out(soap, tag, id, "tt:ProfileCapabilities");
	case SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension:
		return ((tt__RealTimeStreamingCapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:RealTimeStreamingCapabilitiesExtension");
	case SOAP_TYPE_tt__RealTimeStreamingCapabilities:
		return ((tt__RealTimeStreamingCapabilities *)ptr)->soap_out(soap, tag, id, "tt:RealTimeStreamingCapabilities");
	case SOAP_TYPE_tt__MediaCapabilitiesExtension:
		return ((tt__MediaCapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:MediaCapabilitiesExtension");
	case SOAP_TYPE_tt__MediaCapabilities:
		return ((tt__MediaCapabilities *)ptr)->soap_out(soap, tag, id, "tt:MediaCapabilities");
	case SOAP_TYPE_tt__IOCapabilitiesExtension2:
		return ((tt__IOCapabilitiesExtension2 *)ptr)->soap_out(soap, tag, id, "tt:IOCapabilitiesExtension2");
	case SOAP_TYPE_tt__IOCapabilitiesExtension:
		return ((tt__IOCapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:IOCapabilitiesExtension");
	case SOAP_TYPE_tt__IOCapabilities:
		return ((tt__IOCapabilities *)ptr)->soap_out(soap, tag, id, "tt:IOCapabilities");
	case SOAP_TYPE_tt__EventCapabilities:
		return ((tt__EventCapabilities *)ptr)->soap_out(soap, tag, id, "tt:EventCapabilities");
	case SOAP_TYPE_tt__DeviceCapabilitiesExtension:
		return ((tt__DeviceCapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:DeviceCapabilitiesExtension");
	case SOAP_TYPE_tt__DeviceCapabilities:
		return ((tt__DeviceCapabilities *)ptr)->soap_out(soap, tag, id, "tt:DeviceCapabilities");
	case SOAP_TYPE_tt__AnalyticsCapabilities:
		return ((tt__AnalyticsCapabilities *)ptr)->soap_out(soap, tag, id, "tt:AnalyticsCapabilities");
	case SOAP_TYPE_tt__CapabilitiesExtension2:
		return ((tt__CapabilitiesExtension2 *)ptr)->soap_out(soap, tag, id, "tt:CapabilitiesExtension2");
	case SOAP_TYPE_tt__CapabilitiesExtension:
		return ((tt__CapabilitiesExtension *)ptr)->soap_out(soap, tag, id, "tt:CapabilitiesExtension");
	case SOAP_TYPE_tt__Capabilities:
		return ((tt__Capabilities *)ptr)->soap_out(soap, tag, id, "tt:Capabilities");
	case SOAP_TYPE_tt__Dot11AvailableNetworksExtension:
		return ((tt__Dot11AvailableNetworksExtension *)ptr)->soap_out(soap, tag, id, "tt:Dot11AvailableNetworksExtension");
	case SOAP_TYPE_tt__Dot11AvailableNetworks:
		return ((tt__Dot11AvailableNetworks *)ptr)->soap_out(soap, tag, id, "tt:Dot11AvailableNetworks");
	case SOAP_TYPE_tt__Dot11Status:
		return ((tt__Dot11Status *)ptr)->soap_out(soap, tag, id, "tt:Dot11Status");
	case SOAP_TYPE_tt__Dot11Capabilities:
		return ((tt__Dot11Capabilities *)ptr)->soap_out(soap, tag, id, "tt:Dot11Capabilities");
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2:
		return ((tt__NetworkInterfaceSetConfigurationExtension2 *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceSetConfigurationExtension2");
	case SOAP_TYPE_tt__Dot11PSKSetExtension:
		return ((tt__Dot11PSKSetExtension *)ptr)->soap_out(soap, tag, id, "tt:Dot11PSKSetExtension");
	case SOAP_TYPE_tt__Dot11PSKSet:
		return ((tt__Dot11PSKSet *)ptr)->soap_out(soap, tag, id, "tt:Dot11PSKSet");
	case SOAP_TYPE_tt__Dot11SecurityConfigurationExtension:
		return ((tt__Dot11SecurityConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:Dot11SecurityConfigurationExtension");
	case SOAP_TYPE_tt__Dot11SecurityConfiguration:
		return ((tt__Dot11SecurityConfiguration *)ptr)->soap_out(soap, tag, id, "tt:Dot11SecurityConfiguration");
	case SOAP_TYPE_tt__Dot11Configuration:
		return ((tt__Dot11Configuration *)ptr)->soap_out(soap, tag, id, "tt:Dot11Configuration");
	case SOAP_TYPE_tt__IPAddressFilterExtension:
		return ((tt__IPAddressFilterExtension *)ptr)->soap_out(soap, tag, id, "tt:IPAddressFilterExtension");
	case SOAP_TYPE_tt__IPAddressFilter:
		return ((tt__IPAddressFilter *)ptr)->soap_out(soap, tag, id, "tt:IPAddressFilter");
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension2:
		return ((tt__NetworkZeroConfigurationExtension2 *)ptr)->soap_out(soap, tag, id, "tt:NetworkZeroConfigurationExtension2");
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension:
		return ((tt__NetworkZeroConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:NetworkZeroConfigurationExtension");
	case SOAP_TYPE_tt__NetworkZeroConfiguration:
		return ((tt__NetworkZeroConfiguration *)ptr)->soap_out(soap, tag, id, "tt:NetworkZeroConfiguration");
	case SOAP_TYPE_tt__NetworkGateway:
		return ((tt__NetworkGateway *)ptr)->soap_out(soap, tag, id, "tt:NetworkGateway");
	case SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration:
		return ((tt__IPv4NetworkInterfaceSetConfiguration *)ptr)->soap_out(soap, tag, id, "tt:IPv4NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration:
		return ((tt__IPv6NetworkInterfaceSetConfiguration *)ptr)->soap_out(soap, tag, id, "tt:IPv6NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension:
		return ((tt__NetworkInterfaceSetConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceSetConfigurationExtension");
	case SOAP_TYPE_tt__NetworkInterfaceSetConfiguration:
		return ((tt__NetworkInterfaceSetConfiguration *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_tt__DynamicDNSInformationExtension:
		return ((tt__DynamicDNSInformationExtension *)ptr)->soap_out(soap, tag, id, "tt:DynamicDNSInformationExtension");
	case SOAP_TYPE_tt__DynamicDNSInformation:
		return ((tt__DynamicDNSInformation *)ptr)->soap_out(soap, tag, id, "tt:DynamicDNSInformation");
	case SOAP_TYPE_tt__NTPInformationExtension:
		return ((tt__NTPInformationExtension *)ptr)->soap_out(soap, tag, id, "tt:NTPInformationExtension");
	case SOAP_TYPE_tt__NTPInformation:
		return ((tt__NTPInformation *)ptr)->soap_out(soap, tag, id, "tt:NTPInformation");
	case SOAP_TYPE_tt__DNSInformationExtension:
		return ((tt__DNSInformationExtension *)ptr)->soap_out(soap, tag, id, "tt:DNSInformationExtension");
	case SOAP_TYPE_tt__DNSInformation:
		return ((tt__DNSInformation *)ptr)->soap_out(soap, tag, id, "tt:DNSInformation");
	case SOAP_TYPE_tt__HostnameInformationExtension:
		return ((tt__HostnameInformationExtension *)ptr)->soap_out(soap, tag, id, "tt:HostnameInformationExtension");
	case SOAP_TYPE_tt__HostnameInformation:
		return ((tt__HostnameInformation *)ptr)->soap_out(soap, tag, id, "tt:HostnameInformation");
	case SOAP_TYPE_tt__PrefixedIPv6Address:
		return ((tt__PrefixedIPv6Address *)ptr)->soap_out(soap, tag, id, "tt:PrefixedIPv6Address");
	case SOAP_TYPE_tt__PrefixedIPv4Address:
		return ((tt__PrefixedIPv4Address *)ptr)->soap_out(soap, tag, id, "tt:PrefixedIPv4Address");
	case SOAP_TYPE_tt__IPAddress:
		return ((tt__IPAddress *)ptr)->soap_out(soap, tag, id, "tt:IPAddress");
	case SOAP_TYPE_tt__NetworkHostExtension:
		return ((tt__NetworkHostExtension *)ptr)->soap_out(soap, tag, id, "tt:NetworkHostExtension");
	case SOAP_TYPE_tt__NetworkHost:
		return ((tt__NetworkHost *)ptr)->soap_out(soap, tag, id, "tt:NetworkHost");
	case SOAP_TYPE_tt__NetworkProtocolExtension:
		return ((tt__NetworkProtocolExtension *)ptr)->soap_out(soap, tag, id, "tt:NetworkProtocolExtension");
	case SOAP_TYPE_tt__NetworkProtocol:
		return ((tt__NetworkProtocol *)ptr)->soap_out(soap, tag, id, "tt:NetworkProtocol");
	case SOAP_TYPE_tt__IPv6ConfigurationExtension:
		return ((tt__IPv6ConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:IPv6ConfigurationExtension");
	case SOAP_TYPE_tt__IPv6Configuration:
		return ((tt__IPv6Configuration *)ptr)->soap_out(soap, tag, id, "tt:IPv6Configuration");
	case SOAP_TYPE_tt__IPv4Configuration:
		return ((tt__IPv4Configuration *)ptr)->soap_out(soap, tag, id, "tt:IPv4Configuration");
	case SOAP_TYPE_tt__IPv4NetworkInterface:
		return ((tt__IPv4NetworkInterface *)ptr)->soap_out(soap, tag, id, "tt:IPv4NetworkInterface");
	case SOAP_TYPE_tt__IPv6NetworkInterface:
		return ((tt__IPv6NetworkInterface *)ptr)->soap_out(soap, tag, id, "tt:IPv6NetworkInterface");
	case SOAP_TYPE_tt__NetworkInterfaceInfo:
		return ((tt__NetworkInterfaceInfo *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceInfo");
	case SOAP_TYPE_tt__NetworkInterfaceConnectionSetting:
		return ((tt__NetworkInterfaceConnectionSetting *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceConnectionSetting");
	case SOAP_TYPE_tt__NetworkInterfaceLink:
		return ((tt__NetworkInterfaceLink *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceLink");
	case SOAP_TYPE_tt__NetworkInterfaceExtension2:
		return ((tt__NetworkInterfaceExtension2 *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceExtension2");
	case SOAP_TYPE_tt__Dot3Configuration:
		return ((tt__Dot3Configuration *)ptr)->soap_out(soap, tag, id, "tt:Dot3Configuration");
	case SOAP_TYPE_tt__NetworkInterfaceExtension:
		return ((tt__NetworkInterfaceExtension *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterfaceExtension");
	case SOAP_TYPE_tt__NetworkInterface:
		return ((tt__NetworkInterface *)ptr)->soap_out(soap, tag, id, "tt:NetworkInterface");
	case SOAP_TYPE_tt__Scope:
		return ((tt__Scope *)ptr)->soap_out(soap, tag, id, "tt:Scope");
	case SOAP_TYPE_tt__MediaUri:
		return ((tt__MediaUri *)ptr)->soap_out(soap, tag, id, "tt:MediaUri");
	case SOAP_TYPE_tt__Transport:
		return ((tt__Transport *)ptr)->soap_out(soap, tag, id, "tt:Transport");
	case SOAP_TYPE_tt__StreamSetup:
		return ((tt__StreamSetup *)ptr)->soap_out(soap, tag, id, "tt:StreamSetup");
	case SOAP_TYPE_tt__MulticastConfiguration:
		return ((tt__MulticastConfiguration *)ptr)->soap_out(soap, tag, id, "tt:MulticastConfiguration");
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension:
		return ((tt__AudioDecoderConfigurationOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:AudioDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_tt__G726DecOptions:
		return ((tt__G726DecOptions *)ptr)->soap_out(soap, tag, id, "tt:G726DecOptions");
	case SOAP_TYPE_tt__AACDecOptions:
		return ((tt__AACDecOptions *)ptr)->soap_out(soap, tag, id, "tt:AACDecOptions");
	case SOAP_TYPE_tt__G711DecOptions:
		return ((tt__G711DecOptions *)ptr)->soap_out(soap, tag, id, "tt:G711DecOptions");
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptions:
		return ((tt__AudioDecoderConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:AudioDecoderConfigurationOptions");
	case SOAP_TYPE_tt__AudioDecoderConfiguration:
		return ((tt__AudioDecoderConfiguration *)ptr)->soap_out(soap, tag, id, "tt:AudioDecoderConfiguration");
	case SOAP_TYPE_tt__AudioOutputConfigurationOptions:
		return ((tt__AudioOutputConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:AudioOutputConfigurationOptions");
	case SOAP_TYPE_tt__AudioOutputConfiguration:
		return ((tt__AudioOutputConfiguration *)ptr)->soap_out(soap, tag, id, "tt:AudioOutputConfiguration");
	case SOAP_TYPE_tt__AudioOutput:
		return ((tt__AudioOutput *)ptr)->soap_out(soap, tag, id, "tt:AudioOutput");
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension:
		return ((tt__VideoDecoderConfigurationOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:VideoDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_tt__Mpeg4DecOptions:
		return ((tt__Mpeg4DecOptions *)ptr)->soap_out(soap, tag, id, "tt:Mpeg4DecOptions");
	case SOAP_TYPE_tt__JpegDecOptions:
		return ((tt__JpegDecOptions *)ptr)->soap_out(soap, tag, id, "tt:JpegDecOptions");
	case SOAP_TYPE_tt__H264DecOptions:
		return ((tt__H264DecOptions *)ptr)->soap_out(soap, tag, id, "tt:H264DecOptions");
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptions:
		return ((tt__VideoDecoderConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:VideoDecoderConfigurationOptions");
	case SOAP_TYPE_tt__VideoOutputConfigurationOptions:
		return ((tt__VideoOutputConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:VideoOutputConfigurationOptions");
	case SOAP_TYPE_tt__VideoOutputConfiguration:
		return ((tt__VideoOutputConfiguration *)ptr)->soap_out(soap, tag, id, "tt:VideoOutputConfiguration");
	case SOAP_TYPE_tt__VideoOutputExtension:
		return ((tt__VideoOutputExtension *)ptr)->soap_out(soap, tag, id, "tt:VideoOutputExtension");
	case SOAP_TYPE_tt__VideoOutput:
		return ((tt__VideoOutput *)ptr)->soap_out(soap, tag, id, "tt:VideoOutput");
	case SOAP_TYPE_tt__PTZStatusFilterOptionsExtension:
		return ((tt__PTZStatusFilterOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:PTZStatusFilterOptionsExtension");
	case SOAP_TYPE_tt__PTZStatusFilterOptions:
		return ((tt__PTZStatusFilterOptions *)ptr)->soap_out(soap, tag, id, "tt:PTZStatusFilterOptions");
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2:
		return ((tt__MetadataConfigurationOptionsExtension2 *)ptr)->soap_out(soap, tag, id, "tt:MetadataConfigurationOptionsExtension2");
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension:
		return ((tt__MetadataConfigurationOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:MetadataConfigurationOptionsExtension");
	case SOAP_TYPE_tt__MetadataConfigurationOptions:
		return ((tt__MetadataConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:MetadataConfigurationOptions");
	case SOAP_TYPE_tt__EventSubscription:
		return ((tt__EventSubscription *)ptr)->soap_out(soap, tag, id, "tt:EventSubscription");
	case SOAP_TYPE_tt__PTZFilter:
		return ((tt__PTZFilter *)ptr)->soap_out(soap, tag, id, "tt:PTZFilter");
	case SOAP_TYPE_tt__MetadataConfigurationExtension:
		return ((tt__MetadataConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:MetadataConfigurationExtension");
	case SOAP_TYPE_tt__MetadataConfiguration:
		return ((tt__MetadataConfiguration *)ptr)->soap_out(soap, tag, id, "tt:MetadataConfiguration");
	case SOAP_TYPE_tt__VideoAnalyticsConfiguration:
		return ((tt__VideoAnalyticsConfiguration *)ptr)->soap_out(soap, tag, id, "tt:VideoAnalyticsConfiguration");
	case SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions:
		return ((tt__AudioEncoder2ConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:AudioEncoder2ConfigurationOptions");
	case SOAP_TYPE_tt__AudioEncoder2Configuration:
		return ((tt__AudioEncoder2Configuration *)ptr)->soap_out(soap, tag, id, "tt:AudioEncoder2Configuration");
	case SOAP_TYPE_tt__AudioEncoderConfigurationOption:
		return ((tt__AudioEncoderConfigurationOption *)ptr)->soap_out(soap, tag, id, "tt:AudioEncoderConfigurationOption");
	case SOAP_TYPE_tt__AudioEncoderConfigurationOptions:
		return ((tt__AudioEncoderConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:AudioEncoderConfigurationOptions");
	case SOAP_TYPE_tt__AudioEncoderConfiguration:
		return ((tt__AudioEncoderConfiguration *)ptr)->soap_out(soap, tag, id, "tt:AudioEncoderConfiguration");
	case SOAP_TYPE_tt__AudioSourceOptionsExtension:
		return ((tt__AudioSourceOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:AudioSourceOptionsExtension");
	case SOAP_TYPE_tt__AudioSourceConfigurationOptions:
		return ((tt__AudioSourceConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:AudioSourceConfigurationOptions");
	case SOAP_TYPE_tt__AudioSourceConfiguration:
		return ((tt__AudioSourceConfiguration *)ptr)->soap_out(soap, tag, id, "tt:AudioSourceConfiguration");
	case SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions:
		return ((tt__VideoEncoder2ConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:VideoEncoder2ConfigurationOptions");
	case SOAP_TYPE_tt__VideoRateControl2:
		return ((tt__VideoRateControl2 *)ptr)->soap_out(soap, tag, id, "tt:VideoRateControl2");
	case SOAP_TYPE_tt__VideoResolution2:
		return ((tt__VideoResolution2 *)ptr)->soap_out(soap, tag, id, "tt:VideoResolution2");
	case SOAP_TYPE_tt__VideoEncoder2Configuration:
		return ((tt__VideoEncoder2Configuration *)ptr)->soap_out(soap, tag, id, "tt:VideoEncoder2Configuration");
	case SOAP_TYPE_tt__H264Options2:
		return ((tt__H264Options2 *)ptr)->soap_out(soap, tag, id, "tt:H264Options2");
	case SOAP_TYPE_tt__H264Options:
		return ((tt__H264Options *)ptr)->soap_out(soap, tag, id, "tt:H264Options");
	case SOAP_TYPE_tt__Mpeg4Options2:
		return ((tt__Mpeg4Options2 *)ptr)->soap_out(soap, tag, id, "tt:Mpeg4Options2");
	case SOAP_TYPE_tt__Mpeg4Options:
		return ((tt__Mpeg4Options *)ptr)->soap_out(soap, tag, id, "tt:Mpeg4Options");
	case SOAP_TYPE_tt__JpegOptions2:
		return ((tt__JpegOptions2 *)ptr)->soap_out(soap, tag, id, "tt:JpegOptions2");
	case SOAP_TYPE_tt__JpegOptions:
		return ((tt__JpegOptions *)ptr)->soap_out(soap, tag, id, "tt:JpegOptions");
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension2:
		return ((tt__VideoEncoderOptionsExtension2 *)ptr)->soap_out(soap, tag, id, "tt:VideoEncoderOptionsExtension2");
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension:
		return ((tt__VideoEncoderOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:VideoEncoderOptionsExtension");
	case SOAP_TYPE_tt__VideoEncoderConfigurationOptions:
		return ((tt__VideoEncoderConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:VideoEncoderConfigurationOptions");
	case SOAP_TYPE_tt__H264Configuration:
		return ((tt__H264Configuration *)ptr)->soap_out(soap, tag, id, "tt:H264Configuration");
	case SOAP_TYPE_tt__Mpeg4Configuration:
		return ((tt__Mpeg4Configuration *)ptr)->soap_out(soap, tag, id, "tt:Mpeg4Configuration");
	case SOAP_TYPE_tt__VideoRateControl:
		return ((tt__VideoRateControl *)ptr)->soap_out(soap, tag, id, "tt:VideoRateControl");
	case SOAP_TYPE_tt__VideoResolution:
		return ((tt__VideoResolution *)ptr)->soap_out(soap, tag, id, "tt:VideoResolution");
	case SOAP_TYPE_tt__VideoEncoderConfiguration:
		return ((tt__VideoEncoderConfiguration *)ptr)->soap_out(soap, tag, id, "tt:VideoEncoderConfiguration");
	case SOAP_TYPE_tt__SceneOrientation:
		return ((tt__SceneOrientation *)ptr)->soap_out(soap, tag, id, "tt:SceneOrientation");
	case SOAP_TYPE_tt__RotateOptionsExtension:
		return ((tt__RotateOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:RotateOptionsExtension");
	case SOAP_TYPE_tt__RotateOptions:
		return ((tt__RotateOptions *)ptr)->soap_out(soap, tag, id, "tt:RotateOptions");
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2:
		return ((tt__VideoSourceConfigurationOptionsExtension2 *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceConfigurationOptionsExtension2");
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension:
		return ((tt__VideoSourceConfigurationOptionsExtension *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceConfigurationOptionsExtension");
	case SOAP_TYPE_tt__VideoSourceConfigurationOptions:
		return ((tt__VideoSourceConfigurationOptions *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceConfigurationOptions");
	case SOAP_TYPE_tt__LensDescription:
		return ((tt__LensDescription *)ptr)->soap_out(soap, tag, id, "tt:LensDescription");
	case SOAP_TYPE_tt__LensOffset:
		return ((tt__LensOffset *)ptr)->soap_out(soap, tag, id, "tt:LensOffset");
	case SOAP_TYPE_tt__LensProjection:
		return ((tt__LensProjection *)ptr)->soap_out(soap, tag, id, "tt:LensProjection");
	case SOAP_TYPE_tt__RotateExtension:
		return ((tt__RotateExtension *)ptr)->soap_out(soap, tag, id, "tt:RotateExtension");
	case SOAP_TYPE_tt__Rotate:
		return ((tt__Rotate *)ptr)->soap_out(soap, tag, id, "tt:Rotate");
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension2:
		return ((tt__VideoSourceConfigurationExtension2 *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceConfigurationExtension2");
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension:
		return ((tt__VideoSourceConfigurationExtension *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceConfigurationExtension");
	case SOAP_TYPE_tt__VideoSourceConfiguration:
		return ((tt__VideoSourceConfiguration *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceConfiguration");
	case SOAP_TYPE_tt__ConfigurationEntity:
		return ((tt__ConfigurationEntity *)ptr)->soap_out(soap, tag, id, "tt:ConfigurationEntity");
	case SOAP_TYPE_tt__ProfileExtension2:
		return ((tt__ProfileExtension2 *)ptr)->soap_out(soap, tag, id, "tt:ProfileExtension2");
	case SOAP_TYPE_tt__ProfileExtension:
		return ((tt__ProfileExtension *)ptr)->soap_out(soap, tag, id, "tt:ProfileExtension");
	case SOAP_TYPE_tt__Profile:
		return ((tt__Profile *)ptr)->soap_out(soap, tag, id, "tt:Profile");
	case SOAP_TYPE_tt__AudioSource:
		return ((tt__AudioSource *)ptr)->soap_out(soap, tag, id, "tt:AudioSource");
	case SOAP_TYPE_tt__VideoSourceExtension2:
		return ((tt__VideoSourceExtension2 *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceExtension2");
	case SOAP_TYPE_tt__VideoSourceExtension:
		return ((tt__VideoSourceExtension *)ptr)->soap_out(soap, tag, id, "tt:VideoSourceExtension");
	case SOAP_TYPE_tt__VideoSource:
		return ((tt__VideoSource *)ptr)->soap_out(soap, tag, id, "tt:VideoSource");
	case SOAP_TYPE_tt__AnyHolder:
		return ((tt__AnyHolder *)ptr)->soap_out(soap, tag, id, "tt:AnyHolder");
	case SOAP_TYPE_tt__FloatList:
		return ((tt__FloatList *)ptr)->soap_out(soap, tag, id, "tt:FloatList");
	case SOAP_TYPE_tt__IntList:
		return ((tt__IntList *)ptr)->soap_out(soap, tag, id, "tt:IntList");
	case SOAP_TYPE_tt__DurationRange:
		return ((tt__DurationRange *)ptr)->soap_out(soap, tag, id, "tt:DurationRange");
	case SOAP_TYPE_tt__FloatRange:
		return ((tt__FloatRange *)ptr)->soap_out(soap, tag, id, "tt:FloatRange");
	case SOAP_TYPE_tt__IntRange:
		return ((tt__IntRange *)ptr)->soap_out(soap, tag, id, "tt:IntRange");
	case SOAP_TYPE_tt__IntRectangleRange:
		return ((tt__IntRectangleRange *)ptr)->soap_out(soap, tag, id, "tt:IntRectangleRange");
	case SOAP_TYPE_tt__IntRectangle:
		return ((tt__IntRectangle *)ptr)->soap_out(soap, tag, id, "tt:IntRectangle");
	case SOAP_TYPE_tt__DeviceEntity:
		return ((tt__DeviceEntity *)ptr)->soap_out(soap, tag, id, "tt:DeviceEntity");
	case SOAP_TYPE__tds__DeleteGeoLocationResponse:
		return ((_tds__DeleteGeoLocationResponse *)ptr)->soap_out(soap, "tds:DeleteGeoLocationResponse", id, "");
	case SOAP_TYPE__tds__DeleteGeoLocation:
		return ((_tds__DeleteGeoLocation *)ptr)->soap_out(soap, "tds:DeleteGeoLocation", id, "");
	case SOAP_TYPE__tds__SetGeoLocationResponse:
		return ((_tds__SetGeoLocationResponse *)ptr)->soap_out(soap, "tds:SetGeoLocationResponse", id, "");
	case SOAP_TYPE__tds__SetGeoLocation:
		return ((_tds__SetGeoLocation *)ptr)->soap_out(soap, "tds:SetGeoLocation", id, "");
	case SOAP_TYPE__tds__GetGeoLocationResponse:
		return ((_tds__GetGeoLocationResponse *)ptr)->soap_out(soap, "tds:GetGeoLocationResponse", id, "");
	case SOAP_TYPE__tds__GetGeoLocation:
		return ((_tds__GetGeoLocation *)ptr)->soap_out(soap, "tds:GetGeoLocation", id, "");
	case SOAP_TYPE__tds__DeleteStorageConfigurationResponse:
		return ((_tds__DeleteStorageConfigurationResponse *)ptr)->soap_out(soap, "tds:DeleteStorageConfigurationResponse", id, "");
	case SOAP_TYPE__tds__DeleteStorageConfiguration:
		return ((_tds__DeleteStorageConfiguration *)ptr)->soap_out(soap, "tds:DeleteStorageConfiguration", id, "");
	case SOAP_TYPE__tds__SetStorageConfigurationResponse:
		return ((_tds__SetStorageConfigurationResponse *)ptr)->soap_out(soap, "tds:SetStorageConfigurationResponse", id, "");
	case SOAP_TYPE__tds__SetStorageConfiguration:
		return ((_tds__SetStorageConfiguration *)ptr)->soap_out(soap, "tds:SetStorageConfiguration", id, "");
	case SOAP_TYPE__tds__GetStorageConfigurationResponse:
		return ((_tds__GetStorageConfigurationResponse *)ptr)->soap_out(soap, "tds:GetStorageConfigurationResponse", id, "");
	case SOAP_TYPE__tds__GetStorageConfiguration:
		return ((_tds__GetStorageConfiguration *)ptr)->soap_out(soap, "tds:GetStorageConfiguration", id, "");
	case SOAP_TYPE__tds__CreateStorageConfigurationResponse:
		return ((_tds__CreateStorageConfigurationResponse *)ptr)->soap_out(soap, "tds:CreateStorageConfigurationResponse", id, "");
	case SOAP_TYPE__tds__CreateStorageConfiguration:
		return ((_tds__CreateStorageConfiguration *)ptr)->soap_out(soap, "tds:CreateStorageConfiguration", id, "");
	case SOAP_TYPE__tds__GetStorageConfigurationsResponse:
		return ((_tds__GetStorageConfigurationsResponse *)ptr)->soap_out(soap, "tds:GetStorageConfigurationsResponse", id, "");
	case SOAP_TYPE__tds__GetStorageConfigurations:
		return ((_tds__GetStorageConfigurations *)ptr)->soap_out(soap, "tds:GetStorageConfigurations", id, "");
	case SOAP_TYPE__tds__StartSystemRestoreResponse:
		return ((_tds__StartSystemRestoreResponse *)ptr)->soap_out(soap, "tds:StartSystemRestoreResponse", id, "");
	case SOAP_TYPE__tds__StartSystemRestore:
		return ((_tds__StartSystemRestore *)ptr)->soap_out(soap, "tds:StartSystemRestore", id, "");
	case SOAP_TYPE__tds__StartFirmwareUpgradeResponse:
		return ((_tds__StartFirmwareUpgradeResponse *)ptr)->soap_out(soap, "tds:StartFirmwareUpgradeResponse", id, "");
	case SOAP_TYPE__tds__StartFirmwareUpgrade:
		return ((_tds__StartFirmwareUpgrade *)ptr)->soap_out(soap, "tds:StartFirmwareUpgrade", id, "");
	case SOAP_TYPE__tds__GetSystemUrisResponse:
		return ((_tds__GetSystemUrisResponse *)ptr)->soap_out(soap, "tds:GetSystemUrisResponse", id, "");
	case SOAP_TYPE__tds__GetSystemUris:
		return ((_tds__GetSystemUris *)ptr)->soap_out(soap, "tds:GetSystemUris", id, "");
	case SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse:
		return ((_tds__ScanAvailableDot11NetworksResponse *)ptr)->soap_out(soap, "tds:ScanAvailableDot11NetworksResponse", id, "");
	case SOAP_TYPE__tds__ScanAvailableDot11Networks:
		return ((_tds__ScanAvailableDot11Networks *)ptr)->soap_out(soap, "tds:ScanAvailableDot11Networks", id, "");
	case SOAP_TYPE__tds__GetDot11StatusResponse:
		return ((_tds__GetDot11StatusResponse *)ptr)->soap_out(soap, "tds:GetDot11StatusResponse", id, "");
	case SOAP_TYPE__tds__GetDot11Status:
		return ((_tds__GetDot11Status *)ptr)->soap_out(soap, "tds:GetDot11Status", id, "");
	case SOAP_TYPE__tds__GetDot11CapabilitiesResponse:
		return ((_tds__GetDot11CapabilitiesResponse *)ptr)->soap_out(soap, "tds:GetDot11CapabilitiesResponse", id, "");
	case SOAP_TYPE__tds__GetDot11Capabilities:
		return ((_tds__GetDot11Capabilities *)ptr)->soap_out(soap, "tds:GetDot11Capabilities", id, "");
	case SOAP_TYPE__tds__SendAuxiliaryCommandResponse:
		return ((_tds__SendAuxiliaryCommandResponse *)ptr)->soap_out(soap, "tds:SendAuxiliaryCommandResponse", id, "");
	case SOAP_TYPE__tds__SendAuxiliaryCommand:
		return ((_tds__SendAuxiliaryCommand *)ptr)->soap_out(soap, "tds:SendAuxiliaryCommand", id, "");
	case SOAP_TYPE__tds__SetRelayOutputStateResponse:
		return ((_tds__SetRelayOutputStateResponse *)ptr)->soap_out(soap, "tds:SetRelayOutputStateResponse", id, "");
	case SOAP_TYPE__tds__SetRelayOutputState:
		return ((_tds__SetRelayOutputState *)ptr)->soap_out(soap, "tds:SetRelayOutputState", id, "");
	case SOAP_TYPE__tds__SetRelayOutputSettingsResponse:
		return ((_tds__SetRelayOutputSettingsResponse *)ptr)->soap_out(soap, "tds:SetRelayOutputSettingsResponse", id, "");
	case SOAP_TYPE__tds__SetRelayOutputSettings:
		return ((_tds__SetRelayOutputSettings *)ptr)->soap_out(soap, "tds:SetRelayOutputSettings", id, "");
	case SOAP_TYPE__tds__GetRelayOutputsResponse:
		return ((_tds__GetRelayOutputsResponse *)ptr)->soap_out(soap, "tds:GetRelayOutputsResponse", id, "");
	case SOAP_TYPE__tds__GetRelayOutputs:
		return ((_tds__GetRelayOutputs *)ptr)->soap_out(soap, "tds:GetRelayOutputs", id, "");
	case SOAP_TYPE__tds__DeleteDot1XConfigurationResponse:
		return ((_tds__DeleteDot1XConfigurationResponse *)ptr)->soap_out(soap, "tds:DeleteDot1XConfigurationResponse", id, "");
	case SOAP_TYPE__tds__DeleteDot1XConfiguration:
		return ((_tds__DeleteDot1XConfiguration *)ptr)->soap_out(soap, "tds:DeleteDot1XConfiguration", id, "");
	case SOAP_TYPE__tds__GetDot1XConfigurationsResponse:
		return ((_tds__GetDot1XConfigurationsResponse *)ptr)->soap_out(soap, "tds:GetDot1XConfigurationsResponse", id, "");
	case SOAP_TYPE__tds__GetDot1XConfigurations:
		return ((_tds__GetDot1XConfigurations *)ptr)->soap_out(soap, "tds:GetDot1XConfigurations", id, "");
	case SOAP_TYPE__tds__GetDot1XConfigurationResponse:
		return ((_tds__GetDot1XConfigurationResponse *)ptr)->soap_out(soap, "tds:GetDot1XConfigurationResponse", id, "");
	case SOAP_TYPE__tds__GetDot1XConfiguration:
		return ((_tds__GetDot1XConfiguration *)ptr)->soap_out(soap, "tds:GetDot1XConfiguration", id, "");
	case SOAP_TYPE__tds__SetDot1XConfigurationResponse:
		return ((_tds__SetDot1XConfigurationResponse *)ptr)->soap_out(soap, "tds:SetDot1XConfigurationResponse", id, "");
	case SOAP_TYPE__tds__SetDot1XConfiguration:
		return ((_tds__SetDot1XConfiguration *)ptr)->soap_out(soap, "tds:SetDot1XConfiguration", id, "");
	case SOAP_TYPE__tds__CreateDot1XConfigurationResponse:
		return ((_tds__CreateDot1XConfigurationResponse *)ptr)->soap_out(soap, "tds:CreateDot1XConfigurationResponse", id, "");
	case SOAP_TYPE__tds__CreateDot1XConfiguration:
		return ((_tds__CreateDot1XConfiguration *)ptr)->soap_out(soap, "tds:CreateDot1XConfiguration", id, "");
	case SOAP_TYPE__tds__LoadCACertificatesResponse:
		return ((_tds__LoadCACertificatesResponse *)ptr)->soap_out(soap, "tds:LoadCACertificatesResponse", id, "");
	case SOAP_TYPE__tds__LoadCACertificates:
		return ((_tds__LoadCACertificates *)ptr)->soap_out(soap, "tds:LoadCACertificates", id, "");
	case SOAP_TYPE__tds__GetCertificateInformationResponse:
		return ((_tds__GetCertificateInformationResponse *)ptr)->soap_out(soap, "tds:GetCertificateInformationResponse", id, "");
	case SOAP_TYPE__tds__GetCertificateInformation:
		return ((_tds__GetCertificateInformation *)ptr)->soap_out(soap, "tds:GetCertificateInformation", id, "");
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse:
		return ((_tds__LoadCertificateWithPrivateKeyResponse *)ptr)->soap_out(soap, "tds:LoadCertificateWithPrivateKeyResponse", id, "");
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKey:
		return ((_tds__LoadCertificateWithPrivateKey *)ptr)->soap_out(soap, "tds:LoadCertificateWithPrivateKey", id, "");
	case SOAP_TYPE__tds__GetCACertificatesResponse:
		return ((_tds__GetCACertificatesResponse *)ptr)->soap_out(soap, "tds:GetCACertificatesResponse", id, "");
	case SOAP_TYPE__tds__GetCACertificates:
		return ((_tds__GetCACertificates *)ptr)->soap_out(soap, "tds:GetCACertificates", id, "");
	case SOAP_TYPE__tds__SetClientCertificateModeResponse:
		return ((_tds__SetClientCertificateModeResponse *)ptr)->soap_out(soap, "tds:SetClientCertificateModeResponse", id, "");
	case SOAP_TYPE__tds__SetClientCertificateMode:
		return ((_tds__SetClientCertificateMode *)ptr)->soap_out(soap, "tds:SetClientCertificateMode", id, "");
	case SOAP_TYPE__tds__GetClientCertificateModeResponse:
		return ((_tds__GetClientCertificateModeResponse *)ptr)->soap_out(soap, "tds:GetClientCertificateModeResponse", id, "");
	case SOAP_TYPE__tds__GetClientCertificateMode:
		return ((_tds__GetClientCertificateMode *)ptr)->soap_out(soap, "tds:GetClientCertificateMode", id, "");
	case SOAP_TYPE__tds__LoadCertificatesResponse:
		return ((_tds__LoadCertificatesResponse *)ptr)->soap_out(soap, "tds:LoadCertificatesResponse", id, "");
	case SOAP_TYPE__tds__LoadCertificates:
		return ((_tds__LoadCertificates *)ptr)->soap_out(soap, "tds:LoadCertificates", id, "");
	case SOAP_TYPE__tds__GetPkcs10RequestResponse:
		return ((_tds__GetPkcs10RequestResponse *)ptr)->soap_out(soap, "tds:GetPkcs10RequestResponse", id, "");
	case SOAP_TYPE__tds__GetPkcs10Request:
		return ((_tds__GetPkcs10Request *)ptr)->soap_out(soap, "tds:GetPkcs10Request", id, "");
	case SOAP_TYPE__tds__DeleteCertificatesResponse:
		return ((_tds__DeleteCertificatesResponse *)ptr)->soap_out(soap, "tds:DeleteCertificatesResponse", id, "");
	case SOAP_TYPE__tds__DeleteCertificates:
		return ((_tds__DeleteCertificates *)ptr)->soap_out(soap, "tds:DeleteCertificates", id, "");
	case SOAP_TYPE__tds__SetCertificatesStatusResponse:
		return ((_tds__SetCertificatesStatusResponse *)ptr)->soap_out(soap, "tds:SetCertificatesStatusResponse", id, "");
	case SOAP_TYPE__tds__SetCertificatesStatus:
		return ((_tds__SetCertificatesStatus *)ptr)->soap_out(soap, "tds:SetCertificatesStatus", id, "");
	case SOAP_TYPE__tds__GetCertificatesStatusResponse:
		return ((_tds__GetCertificatesStatusResponse *)ptr)->soap_out(soap, "tds:GetCertificatesStatusResponse", id, "");
	case SOAP_TYPE__tds__GetCertificatesStatus:
		return ((_tds__GetCertificatesStatus *)ptr)->soap_out(soap, "tds:GetCertificatesStatus", id, "");
	case SOAP_TYPE__tds__GetCertificatesResponse:
		return ((_tds__GetCertificatesResponse *)ptr)->soap_out(soap, "tds:GetCertificatesResponse", id, "");
	case SOAP_TYPE__tds__GetCertificates:
		return ((_tds__GetCertificates *)ptr)->soap_out(soap, "tds:GetCertificates", id, "");
	case SOAP_TYPE__tds__CreateCertificateResponse:
		return ((_tds__CreateCertificateResponse *)ptr)->soap_out(soap, "tds:CreateCertificateResponse", id, "");
	case SOAP_TYPE__tds__CreateCertificate:
		return ((_tds__CreateCertificate *)ptr)->soap_out(soap, "tds:CreateCertificate", id, "");
	case SOAP_TYPE__tds__SetAccessPolicyResponse:
		return ((_tds__SetAccessPolicyResponse *)ptr)->soap_out(soap, "tds:SetAccessPolicyResponse", id, "");
	case SOAP_TYPE__tds__SetAccessPolicy:
		return ((_tds__SetAccessPolicy *)ptr)->soap_out(soap, "tds:SetAccessPolicy", id, "");
	case SOAP_TYPE__tds__GetAccessPolicyResponse:
		return ((_tds__GetAccessPolicyResponse *)ptr)->soap_out(soap, "tds:GetAccessPolicyResponse", id, "");
	case SOAP_TYPE__tds__GetAccessPolicy:
		return ((_tds__GetAccessPolicy *)ptr)->soap_out(soap, "tds:GetAccessPolicy", id, "");
	case SOAP_TYPE__tds__RemoveIPAddressFilterResponse:
		return ((_tds__RemoveIPAddressFilterResponse *)ptr)->soap_out(soap, "tds:RemoveIPAddressFilterResponse", id, "");
	case SOAP_TYPE__tds__RemoveIPAddressFilter:
		return ((_tds__RemoveIPAddressFilter *)ptr)->soap_out(soap, "tds:RemoveIPAddressFilter", id, "");
	case SOAP_TYPE__tds__AddIPAddressFilterResponse:
		return ((_tds__AddIPAddressFilterResponse *)ptr)->soap_out(soap, "tds:AddIPAddressFilterResponse", id, "");
	case SOAP_TYPE__tds__AddIPAddressFilter:
		return ((_tds__AddIPAddressFilter *)ptr)->soap_out(soap, "tds:AddIPAddressFilter", id, "");
	case SOAP_TYPE__tds__SetIPAddressFilterResponse:
		return ((_tds__SetIPAddressFilterResponse *)ptr)->soap_out(soap, "tds:SetIPAddressFilterResponse", id, "");
	case SOAP_TYPE__tds__SetIPAddressFilter:
		return ((_tds__SetIPAddressFilter *)ptr)->soap_out(soap, "tds:SetIPAddressFilter", id, "");
	case SOAP_TYPE__tds__GetIPAddressFilterResponse:
		return ((_tds__GetIPAddressFilterResponse *)ptr)->soap_out(soap, "tds:GetIPAddressFilterResponse", id, "");
	case SOAP_TYPE__tds__GetIPAddressFilter:
		return ((_tds__GetIPAddressFilter *)ptr)->soap_out(soap, "tds:GetIPAddressFilter", id, "");
	case SOAP_TYPE__tds__SetZeroConfigurationResponse:
		return ((_tds__SetZeroConfigurationResponse *)ptr)->soap_out(soap, "tds:SetZeroConfigurationResponse", id, "");
	case SOAP_TYPE__tds__SetZeroConfiguration:
		return ((_tds__SetZeroConfiguration *)ptr)->soap_out(soap, "tds:SetZeroConfiguration", id, "");
	case SOAP_TYPE__tds__GetZeroConfigurationResponse:
		return ((_tds__GetZeroConfigurationResponse *)ptr)->soap_out(soap, "tds:GetZeroConfigurationResponse", id, "");
	case SOAP_TYPE__tds__GetZeroConfiguration:
		return ((_tds__GetZeroConfiguration *)ptr)->soap_out(soap, "tds:GetZeroConfiguration", id, "");
	case SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse:
		return ((_tds__SetNetworkDefaultGatewayResponse *)ptr)->soap_out(soap, "tds:SetNetworkDefaultGatewayResponse", id, "");
	case SOAP_TYPE__tds__SetNetworkDefaultGateway:
		return ((_tds__SetNetworkDefaultGateway *)ptr)->soap_out(soap, "tds:SetNetworkDefaultGateway", id, "");
	case SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse:
		return ((_tds__GetNetworkDefaultGatewayResponse *)ptr)->soap_out(soap, "tds:GetNetworkDefaultGatewayResponse", id, "");
	case SOAP_TYPE__tds__GetNetworkDefaultGateway:
		return ((_tds__GetNetworkDefaultGateway *)ptr)->soap_out(soap, "tds:GetNetworkDefaultGateway", id, "");
	case SOAP_TYPE__tds__SetNetworkProtocolsResponse:
		return ((_tds__SetNetworkProtocolsResponse *)ptr)->soap_out(soap, "tds:SetNetworkProtocolsResponse", id, "");
	case SOAP_TYPE__tds__SetNetworkProtocols:
		return ((_tds__SetNetworkProtocols *)ptr)->soap_out(soap, "tds:SetNetworkProtocols", id, "");
	case SOAP_TYPE__tds__GetNetworkProtocolsResponse:
		return ((_tds__GetNetworkProtocolsResponse *)ptr)->soap_out(soap, "tds:GetNetworkProtocolsResponse", id, "");
	case SOAP_TYPE__tds__GetNetworkProtocols:
		return ((_tds__GetNetworkProtocols *)ptr)->soap_out(soap, "tds:GetNetworkProtocols", id, "");
	case SOAP_TYPE__tds__SetNetworkInterfacesResponse:
		return ((_tds__SetNetworkInterfacesResponse *)ptr)->soap_out(soap, "tds:SetNetworkInterfacesResponse", id, "");
	case SOAP_TYPE__tds__SetNetworkInterfaces:
		return ((_tds__SetNetworkInterfaces *)ptr)->soap_out(soap, "tds:SetNetworkInterfaces", id, "");
	case SOAP_TYPE__tds__GetNetworkInterfacesResponse:
		return ((_tds__GetNetworkInterfacesResponse *)ptr)->soap_out(soap, "tds:GetNetworkInterfacesResponse", id, "");
	case SOAP_TYPE__tds__GetNetworkInterfaces:
		return ((_tds__GetNetworkInterfaces *)ptr)->soap_out(soap, "tds:GetNetworkInterfaces", id, "");
	case SOAP_TYPE__tds__SetDynamicDNSResponse:
		return ((_tds__SetDynamicDNSResponse *)ptr)->soap_out(soap, "tds:SetDynamicDNSResponse", id, "");
	case SOAP_TYPE__tds__SetDynamicDNS:
		return ((_tds__SetDynamicDNS *)ptr)->soap_out(soap, "tds:SetDynamicDNS", id, "");
	case SOAP_TYPE__tds__GetDynamicDNSResponse:
		return ((_tds__GetDynamicDNSResponse *)ptr)->soap_out(soap, "tds:GetDynamicDNSResponse", id, "");
	case SOAP_TYPE__tds__GetDynamicDNS:
		return ((_tds__GetDynamicDNS *)ptr)->soap_out(soap, "tds:GetDynamicDNS", id, "");
	case SOAP_TYPE__tds__SetNTPResponse:
		return ((_tds__SetNTPResponse *)ptr)->soap_out(soap, "tds:SetNTPResponse", id, "");
	case SOAP_TYPE__tds__SetNTP:
		return ((_tds__SetNTP *)ptr)->soap_out(soap, "tds:SetNTP", id, "");
	case SOAP_TYPE__tds__GetNTPResponse:
		return ((_tds__GetNTPResponse *)ptr)->soap_out(soap, "tds:GetNTPResponse", id, "");
	case SOAP_TYPE__tds__GetNTP:
		return ((_tds__GetNTP *)ptr)->soap_out(soap, "tds:GetNTP", id, "");
	case SOAP_TYPE__tds__SetDNSResponse:
		return ((_tds__SetDNSResponse *)ptr)->soap_out(soap, "tds:SetDNSResponse", id, "");
	case SOAP_TYPE__tds__SetDNS:
		return ((_tds__SetDNS *)ptr)->soap_out(soap, "tds:SetDNS", id, "");
	case SOAP_TYPE__tds__GetDNSResponse:
		return ((_tds__GetDNSResponse *)ptr)->soap_out(soap, "tds:GetDNSResponse", id, "");
	case SOAP_TYPE__tds__GetDNS:
		return ((_tds__GetDNS *)ptr)->soap_out(soap, "tds:GetDNS", id, "");
	case SOAP_TYPE__tds__SetHostnameFromDHCPResponse:
		return ((_tds__SetHostnameFromDHCPResponse *)ptr)->soap_out(soap, "tds:SetHostnameFromDHCPResponse", id, "");
	case SOAP_TYPE__tds__SetHostnameFromDHCP:
		return ((_tds__SetHostnameFromDHCP *)ptr)->soap_out(soap, "tds:SetHostnameFromDHCP", id, "");
	case SOAP_TYPE__tds__SetHostnameResponse:
		return ((_tds__SetHostnameResponse *)ptr)->soap_out(soap, "tds:SetHostnameResponse", id, "");
	case SOAP_TYPE__tds__SetHostname:
		return ((_tds__SetHostname *)ptr)->soap_out(soap, "tds:SetHostname", id, "");
	case SOAP_TYPE__tds__GetHostnameResponse:
		return ((_tds__GetHostnameResponse *)ptr)->soap_out(soap, "tds:GetHostnameResponse", id, "");
	case SOAP_TYPE__tds__GetHostname:
		return ((_tds__GetHostname *)ptr)->soap_out(soap, "tds:GetHostname", id, "");
	case SOAP_TYPE__tds__GetCapabilitiesResponse:
		return ((_tds__GetCapabilitiesResponse *)ptr)->soap_out(soap, "tds:GetCapabilitiesResponse", id, "");
	case SOAP_TYPE__tds__GetCapabilities:
		return ((_tds__GetCapabilities *)ptr)->soap_out(soap, "tds:GetCapabilities", id, "");
	case SOAP_TYPE__tds__GetWsdlUrlResponse:
		return ((_tds__GetWsdlUrlResponse *)ptr)->soap_out(soap, "tds:GetWsdlUrlResponse", id, "");
	case SOAP_TYPE__tds__GetWsdlUrl:
		return ((_tds__GetWsdlUrl *)ptr)->soap_out(soap, "tds:GetWsdlUrl", id, "");
	case SOAP_TYPE__tds__SetUserResponse:
		return ((_tds__SetUserResponse *)ptr)->soap_out(soap, "tds:SetUserResponse", id, "");
	case SOAP_TYPE__tds__SetUser:
		return ((_tds__SetUser *)ptr)->soap_out(soap, "tds:SetUser", id, "");
	case SOAP_TYPE__tds__DeleteUsersResponse:
		return ((_tds__DeleteUsersResponse *)ptr)->soap_out(soap, "tds:DeleteUsersResponse", id, "");
	case SOAP_TYPE__tds__DeleteUsers:
		return ((_tds__DeleteUsers *)ptr)->soap_out(soap, "tds:DeleteUsers", id, "");
	case SOAP_TYPE__tds__CreateUsersResponse:
		return ((_tds__CreateUsersResponse *)ptr)->soap_out(soap, "tds:CreateUsersResponse", id, "");
	case SOAP_TYPE__tds__CreateUsers:
		return ((_tds__CreateUsers *)ptr)->soap_out(soap, "tds:CreateUsers", id, "");
	case SOAP_TYPE__tds__GetUsersResponse:
		return ((_tds__GetUsersResponse *)ptr)->soap_out(soap, "tds:GetUsersResponse", id, "");
	case SOAP_TYPE__tds__GetUsers:
		return ((_tds__GetUsers *)ptr)->soap_out(soap, "tds:GetUsers", id, "");
	case SOAP_TYPE__tds__SetRemoteUserResponse:
		return ((_tds__SetRemoteUserResponse *)ptr)->soap_out(soap, "tds:SetRemoteUserResponse", id, "");
	case SOAP_TYPE__tds__SetRemoteUser:
		return ((_tds__SetRemoteUser *)ptr)->soap_out(soap, "tds:SetRemoteUser", id, "");
	case SOAP_TYPE__tds__GetRemoteUserResponse:
		return ((_tds__GetRemoteUserResponse *)ptr)->soap_out(soap, "tds:GetRemoteUserResponse", id, "");
	case SOAP_TYPE__tds__GetRemoteUser:
		return ((_tds__GetRemoteUser *)ptr)->soap_out(soap, "tds:GetRemoteUser", id, "");
	case SOAP_TYPE__tds__GetEndpointReferenceResponse:
		return ((_tds__GetEndpointReferenceResponse *)ptr)->soap_out(soap, "tds:GetEndpointReferenceResponse", id, "");
	case SOAP_TYPE__tds__GetEndpointReference:
		return ((_tds__GetEndpointReference *)ptr)->soap_out(soap, "tds:GetEndpointReference", id, "");
	case SOAP_TYPE__tds__SetDPAddressesResponse:
		return ((_tds__SetDPAddressesResponse *)ptr)->soap_out(soap, "tds:SetDPAddressesResponse", id, "");
	case SOAP_TYPE__tds__SetDPAddresses:
		return ((_tds__SetDPAddresses *)ptr)->soap_out(soap, "tds:SetDPAddresses", id, "");
	case SOAP_TYPE__tds__GetDPAddressesResponse:
		return ((_tds__GetDPAddressesResponse *)ptr)->soap_out(soap, "tds:GetDPAddressesResponse", id, "");
	case SOAP_TYPE__tds__GetDPAddresses:
		return ((_tds__GetDPAddresses *)ptr)->soap_out(soap, "tds:GetDPAddresses", id, "");
	case SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse:
		return ((_tds__SetRemoteDiscoveryModeResponse *)ptr)->soap_out(soap, "tds:SetRemoteDiscoveryModeResponse", id, "");
	case SOAP_TYPE__tds__SetRemoteDiscoveryMode:
		return ((_tds__SetRemoteDiscoveryMode *)ptr)->soap_out(soap, "tds:SetRemoteDiscoveryMode", id, "");
	case SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse:
		return ((_tds__GetRemoteDiscoveryModeResponse *)ptr)->soap_out(soap, "tds:GetRemoteDiscoveryModeResponse", id, "");
	case SOAP_TYPE__tds__GetRemoteDiscoveryMode:
		return ((_tds__GetRemoteDiscoveryMode *)ptr)->soap_out(soap, "tds:GetRemoteDiscoveryMode", id, "");
	case SOAP_TYPE__tds__SetDiscoveryModeResponse:
		return ((_tds__SetDiscoveryModeResponse *)ptr)->soap_out(soap, "tds:SetDiscoveryModeResponse", id, "");
	case SOAP_TYPE__tds__SetDiscoveryMode:
		return ((_tds__SetDiscoveryMode *)ptr)->soap_out(soap, "tds:SetDiscoveryMode", id, "");
	case SOAP_TYPE__tds__GetDiscoveryModeResponse:
		return ((_tds__GetDiscoveryModeResponse *)ptr)->soap_out(soap, "tds:GetDiscoveryModeResponse", id, "");
	case SOAP_TYPE__tds__GetDiscoveryMode:
		return ((_tds__GetDiscoveryMode *)ptr)->soap_out(soap, "tds:GetDiscoveryMode", id, "");
	case SOAP_TYPE__tds__RemoveScopesResponse:
		return ((_tds__RemoveScopesResponse *)ptr)->soap_out(soap, "tds:RemoveScopesResponse", id, "");
	case SOAP_TYPE__tds__RemoveScopes:
		return ((_tds__RemoveScopes *)ptr)->soap_out(soap, "tds:RemoveScopes", id, "");
	case SOAP_TYPE__tds__AddScopesResponse:
		return ((_tds__AddScopesResponse *)ptr)->soap_out(soap, "tds:AddScopesResponse", id, "");
	case SOAP_TYPE__tds__AddScopes:
		return ((_tds__AddScopes *)ptr)->soap_out(soap, "tds:AddScopes", id, "");
	case SOAP_TYPE__tds__SetScopesResponse:
		return ((_tds__SetScopesResponse *)ptr)->soap_out(soap, "tds:SetScopesResponse", id, "");
	case SOAP_TYPE__tds__SetScopes:
		return ((_tds__SetScopes *)ptr)->soap_out(soap, "tds:SetScopes", id, "");
	case SOAP_TYPE__tds__GetScopesResponse:
		return ((_tds__GetScopesResponse *)ptr)->soap_out(soap, "tds:GetScopesResponse", id, "");
	case SOAP_TYPE__tds__GetScopes:
		return ((_tds__GetScopes *)ptr)->soap_out(soap, "tds:GetScopes", id, "");
	case SOAP_TYPE__tds__GetSystemLogResponse:
		return ((_tds__GetSystemLogResponse *)ptr)->soap_out(soap, "tds:GetSystemLogResponse", id, "");
	case SOAP_TYPE__tds__GetSystemLog:
		return ((_tds__GetSystemLog *)ptr)->soap_out(soap, "tds:GetSystemLog", id, "");
	case SOAP_TYPE__tds__GetSystemSupportInformationResponse:
		return ((_tds__GetSystemSupportInformationResponse *)ptr)->soap_out(soap, "tds:GetSystemSupportInformationResponse", id, "");
	case SOAP_TYPE__tds__GetSystemSupportInformation:
		return ((_tds__GetSystemSupportInformation *)ptr)->soap_out(soap, "tds:GetSystemSupportInformation", id, "");
	case SOAP_TYPE__tds__GetSystemBackupResponse:
		return ((_tds__GetSystemBackupResponse *)ptr)->soap_out(soap, "tds:GetSystemBackupResponse", id, "");
	case SOAP_TYPE__tds__GetSystemBackup:
		return ((_tds__GetSystemBackup *)ptr)->soap_out(soap, "tds:GetSystemBackup", id, "");
	case SOAP_TYPE__tds__RestoreSystemResponse:
		return ((_tds__RestoreSystemResponse *)ptr)->soap_out(soap, "tds:RestoreSystemResponse", id, "");
	case SOAP_TYPE__tds__RestoreSystem:
		return ((_tds__RestoreSystem *)ptr)->soap_out(soap, "tds:RestoreSystem", id, "");
	case SOAP_TYPE__tds__SystemRebootResponse:
		return ((_tds__SystemRebootResponse *)ptr)->soap_out(soap, "tds:SystemRebootResponse", id, "");
	case SOAP_TYPE__tds__SystemReboot:
		return ((_tds__SystemReboot *)ptr)->soap_out(soap, "tds:SystemReboot", id, "");
	case SOAP_TYPE__tds__UpgradeSystemFirmwareResponse:
		return ((_tds__UpgradeSystemFirmwareResponse *)ptr)->soap_out(soap, "tds:UpgradeSystemFirmwareResponse", id, "");
	case SOAP_TYPE__tds__UpgradeSystemFirmware:
		return ((_tds__UpgradeSystemFirmware *)ptr)->soap_out(soap, "tds:UpgradeSystemFirmware", id, "");
	case SOAP_TYPE__tds__SetSystemFactoryDefaultResponse:
		return ((_tds__SetSystemFactoryDefaultResponse *)ptr)->soap_out(soap, "tds:SetSystemFactoryDefaultResponse", id, "");
	case SOAP_TYPE__tds__SetSystemFactoryDefault:
		return ((_tds__SetSystemFactoryDefault *)ptr)->soap_out(soap, "tds:SetSystemFactoryDefault", id, "");
	case SOAP_TYPE__tds__GetSystemDateAndTimeResponse:
		return ((_tds__GetSystemDateAndTimeResponse *)ptr)->soap_out(soap, "tds:GetSystemDateAndTimeResponse", id, "");
	case SOAP_TYPE__tds__GetSystemDateAndTime:
		return ((_tds__GetSystemDateAndTime *)ptr)->soap_out(soap, "tds:GetSystemDateAndTime", id, "");
	case SOAP_TYPE__tds__SetSystemDateAndTimeResponse:
		return ((_tds__SetSystemDateAndTimeResponse *)ptr)->soap_out(soap, "tds:SetSystemDateAndTimeResponse", id, "");
	case SOAP_TYPE__tds__SetSystemDateAndTime:
		return ((_tds__SetSystemDateAndTime *)ptr)->soap_out(soap, "tds:SetSystemDateAndTime", id, "");
	case SOAP_TYPE__tds__GetDeviceInformationResponse:
		return ((_tds__GetDeviceInformationResponse *)ptr)->soap_out(soap, "tds:GetDeviceInformationResponse", id, "");
	case SOAP_TYPE__tds__GetDeviceInformation:
		return ((_tds__GetDeviceInformation *)ptr)->soap_out(soap, "tds:GetDeviceInformation", id, "");
	case SOAP_TYPE__tds__GetServiceCapabilitiesResponse:
		return ((_tds__GetServiceCapabilitiesResponse *)ptr)->soap_out(soap, "tds:GetServiceCapabilitiesResponse", id, "");
	case SOAP_TYPE__tds__GetServiceCapabilities:
		return ((_tds__GetServiceCapabilities *)ptr)->soap_out(soap, "tds:GetServiceCapabilities", id, "");
	case SOAP_TYPE__tds__GetServicesResponse:
		return ((_tds__GetServicesResponse *)ptr)->soap_out(soap, "tds:GetServicesResponse", id, "");
	case SOAP_TYPE__tds__GetServices:
		return ((_tds__GetServices *)ptr)->soap_out(soap, "tds:GetServices", id, "");
	case SOAP_TYPE_tds__StorageConfiguration:
		return ((tds__StorageConfiguration *)ptr)->soap_out(soap, tag, id, "tds:StorageConfiguration");
	case SOAP_TYPE_tds__StorageConfigurationData:
		return ((tds__StorageConfigurationData *)ptr)->soap_out(soap, tag, id, "tds:StorageConfigurationData");
	case SOAP_TYPE_tds__UserCredential:
		return ((tds__UserCredential *)ptr)->soap_out(soap, tag, id, "tds:UserCredential");
	case SOAP_TYPE_tds__MiscCapabilities:
		return ((tds__MiscCapabilities *)ptr)->soap_out(soap, tag, id, "tds:MiscCapabilities");
	case SOAP_TYPE_tds__SystemCapabilities:
		return ((tds__SystemCapabilities *)ptr)->soap_out(soap, tag, id, "tds:SystemCapabilities");
	case SOAP_TYPE_tds__SecurityCapabilities:
		return ((tds__SecurityCapabilities *)ptr)->soap_out(soap, tag, id, "tds:SecurityCapabilities");
	case SOAP_TYPE_tds__NetworkCapabilities:
		return ((tds__NetworkCapabilities *)ptr)->soap_out(soap, tag, id, "tds:NetworkCapabilities");
	case SOAP_TYPE_tds__DeviceServiceCapabilities:
		return ((tds__DeviceServiceCapabilities *)ptr)->soap_out(soap, tag, id, "tds:DeviceServiceCapabilities");
	case SOAP_TYPE_tds__Service:
		return ((tds__Service *)ptr)->soap_out(soap, tag, id, "tds:Service");
	case SOAP_TYPE__xml__lang:
		return soap_out__xml__lang(soap, "xml:lang", id, (const std::string *)ptr, "");
	case SOAP_TYPE__xmime__contentType:
		return soap_out__xmime__contentType(soap, "xmime:contentType", id, (const std::string *)ptr, "");
	case SOAP_TYPE_xsd__unsignedInt_:
		return ((xsd__unsignedInt_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__token__:
		return ((xsd__token__ *)ptr)->soap_out(soap, tag, id, "xsd:token");
	case SOAP_TYPE_xsd__token:
		return soap_out_xsd__token(soap, tag, id, (const std::string *)ptr, "xsd:token");
	case SOAP_TYPE_xsd__string_:
		return ((xsd__string_ *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__nonNegativeInteger__:
		return ((xsd__nonNegativeInteger__ *)ptr)->soap_out(soap, tag, id, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_out_xsd__nonNegativeInteger(soap, tag, id, (const std::string *)ptr, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__integer__:
		return ((xsd__integer__ *)ptr)->soap_out(soap, tag, id, "xsd:integer");
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_xsd__int_:
		return ((xsd__int_ *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__hexBinary__:
		return ((xsd__hexBinary__ *)ptr)->soap_out(soap, tag, id, "xsd:hexBinary");
	case SOAP_TYPE_xsd__float_:
		return ((xsd__float_ *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_xsd__duration__:
		return ((xsd__duration__ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__double_:
		return ((xsd__double_ *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_xsd__dateTime__:
		return ((xsd__dateTime__ *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__boolean_:
		return ((xsd__boolean_ *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary__:
		return ((xsd__base64Binary__ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI__:
		return ((xsd__anyURI__ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__anySimpleType__:
		return ((xsd__anySimpleType__ *)ptr)->soap_out(soap, tag, id, "xsd:anySimpleType");
	case SOAP_TYPE_xsd__anySimpleType:
		return soap_out_xsd__anySimpleType(soap, tag, id, (const std::string *)ptr, "xsd:anySimpleType");
	case SOAP_TYPE_xsd__QName__:
		return ((xsd__QName__ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__NCName__:
		return ((xsd__NCName__ *)ptr)->soap_out(soap, tag, id, "xsd:NCName");
	case SOAP_TYPE_xsd__NCName:
		return soap_out_xsd__NCName(soap, tag, id, (const std::string *)ptr, "xsd:NCName");
	case SOAP_TYPE_xsd__IDREFS__:
		return ((xsd__IDREFS__ *)ptr)->soap_out(soap, tag, id, "xsd:IDREFS");
	case SOAP_TYPE_xsd__IDREFS:
		return soap_out_xsd__IDREFS(soap, tag, id, (const std::string *)ptr, "xsd:IDREFS");
	case SOAP_TYPE_xsd__ID__:
		return ((xsd__ID__ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::string *)ptr, "xsd:ID");
	case SOAP_TYPE_SOAP_ENV__Envelope:
		return soap_out_SOAP_ENV__Envelope(soap, tag, id, (const std::string *)ptr, "SOAP-ENV:Envelope");
	case SOAP_TYPE_xsd__hexBinary:
		return ((xsd__hexBinary *)ptr)->soap_out(soap, tag, id, "xsd:hexBinary");
	case SOAP_TYPE_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::chrono::nanoseconds *)ptr, "xsd:duration");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__wsse__Security:
		return soap_out__wsse__Security(soap, "wsse:Security", id, (const struct _wsse__Security *)ptr, "");
	case SOAP_TYPE__saml2__EncryptedAttribute:
		return soap_out__saml2__EncryptedAttribute(soap, "saml2:EncryptedAttribute", id, (const struct saml2__EncryptedElementType *)ptr, "");
	case SOAP_TYPE__saml2__Attribute:
		return soap_out__saml2__Attribute(soap, "saml2:Attribute", id, (const struct saml2__AttributeType *)ptr, "");
	case SOAP_TYPE__saml2__AttributeStatement:
		return soap_out__saml2__AttributeStatement(soap, "saml2:AttributeStatement", id, (const struct saml2__AttributeStatementType *)ptr, "");
	case SOAP_TYPE__saml2__Evidence:
		return soap_out__saml2__Evidence(soap, "saml2:Evidence", id, (const struct saml2__EvidenceType *)ptr, "");
	case SOAP_TYPE__saml2__Action:
		return soap_out__saml2__Action(soap, "saml2:Action", id, (const struct saml2__ActionType *)ptr, "");
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		return soap_out__saml2__AuthzDecisionStatement(soap, "saml2:AuthzDecisionStatement", id, (const struct saml2__AuthzDecisionStatementType *)ptr, "");
	case SOAP_TYPE__saml2__AuthnContext:
		return soap_out__saml2__AuthnContext(soap, "saml2:AuthnContext", id, (const struct saml2__AuthnContextType *)ptr, "");
	case SOAP_TYPE__saml2__SubjectLocality:
		return soap_out__saml2__SubjectLocality(soap, "saml2:SubjectLocality", id, (const struct saml2__SubjectLocalityType *)ptr, "");
	case SOAP_TYPE__saml2__AuthnStatement:
		return soap_out__saml2__AuthnStatement(soap, "saml2:AuthnStatement", id, (const struct saml2__AuthnStatementType *)ptr, "");
	case SOAP_TYPE__saml2__Statement:
		return soap_out__saml2__Statement(soap, "saml2:Statement", id, (const struct saml2__StatementAbstractType *)ptr, "");
	case SOAP_TYPE__saml2__EncryptedAssertion:
		return soap_out__saml2__EncryptedAssertion(soap, "saml2:EncryptedAssertion", id, (const struct saml2__EncryptedElementType *)ptr, "");
	case SOAP_TYPE__saml2__Advice:
		return soap_out__saml2__Advice(soap, "saml2:Advice", id, (const struct saml2__AdviceType *)ptr, "");
	case SOAP_TYPE__saml2__ProxyRestriction:
		return soap_out__saml2__ProxyRestriction(soap, "saml2:ProxyRestriction", id, (const struct saml2__ProxyRestrictionType *)ptr, "");
	case SOAP_TYPE__saml2__OneTimeUse:
		return soap_out__saml2__OneTimeUse(soap, "saml2:OneTimeUse", id, (const struct saml2__OneTimeUseType *)ptr, "");
	case SOAP_TYPE__saml2__AudienceRestriction:
		return soap_out__saml2__AudienceRestriction(soap, "saml2:AudienceRestriction", id, (const struct saml2__AudienceRestrictionType *)ptr, "");
	case SOAP_TYPE__saml2__Condition:
		return soap_out__saml2__Condition(soap, "saml2:Condition", id, (const struct saml2__ConditionAbstractType *)ptr, "");
	case SOAP_TYPE__saml2__Conditions:
		return soap_out__saml2__Conditions(soap, "saml2:Conditions", id, (const struct saml2__ConditionsType *)ptr, "");
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		return soap_out__saml2__SubjectConfirmationData(soap, "saml2:SubjectConfirmationData", id, (const struct saml2__SubjectConfirmationDataType *)ptr, "");
	case SOAP_TYPE__saml2__SubjectConfirmation:
		return soap_out__saml2__SubjectConfirmation(soap, "saml2:SubjectConfirmation", id, (const struct saml2__SubjectConfirmationType *)ptr, "");
	case SOAP_TYPE__saml2__Subject:
		return soap_out__saml2__Subject(soap, "saml2:Subject", id, (const struct saml2__SubjectType *)ptr, "");
	case SOAP_TYPE__saml2__Assertion:
		return soap_out__saml2__Assertion(soap, "saml2:Assertion", id, (const struct saml2__AssertionType *)ptr, "");
	case SOAP_TYPE__saml2__Issuer:
		return soap_out__saml2__Issuer(soap, "saml2:Issuer", id, (const struct saml2__NameIDType *)ptr, "");
	case SOAP_TYPE__saml2__EncryptedID:
		return soap_out__saml2__EncryptedID(soap, "saml2:EncryptedID", id, (const struct saml2__EncryptedElementType *)ptr, "");
	case SOAP_TYPE__saml2__NameID:
		return soap_out__saml2__NameID(soap, "saml2:NameID", id, (const struct saml2__NameIDType *)ptr, "");
	case SOAP_TYPE__saml2__BaseID:
		return soap_out__saml2__BaseID(soap, "saml2:BaseID", id, (const struct saml2__BaseIDAbstractType *)ptr, "");
	case SOAP_TYPE_saml2__AttributeType:
		return soap_out_saml2__AttributeType(soap, tag, id, (const struct saml2__AttributeType *)ptr, "saml2:AttributeType");
	case SOAP_TYPE_saml2__AttributeStatementType:
		return soap_out_saml2__AttributeStatementType(soap, tag, id, (const struct saml2__AttributeStatementType *)ptr, "saml2:AttributeStatementType");
	case SOAP_TYPE_saml2__EvidenceType:
		return soap_out_saml2__EvidenceType(soap, tag, id, (const struct saml2__EvidenceType *)ptr, "saml2:EvidenceType");
	case SOAP_TYPE_saml2__ActionType:
		return soap_out_saml2__ActionType(soap, tag, id, (const struct saml2__ActionType *)ptr, "saml2:ActionType");
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		return soap_out_saml2__AuthzDecisionStatementType(soap, tag, id, (const struct saml2__AuthzDecisionStatementType *)ptr, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_saml2__AuthnContextType:
		return soap_out_saml2__AuthnContextType(soap, tag, id, (const struct saml2__AuthnContextType *)ptr, "saml2:AuthnContextType");
	case SOAP_TYPE_saml2__SubjectLocalityType:
		return soap_out_saml2__SubjectLocalityType(soap, tag, id, (const struct saml2__SubjectLocalityType *)ptr, "saml2:SubjectLocalityType");
	case SOAP_TYPE_saml2__AuthnStatementType:
		return soap_out_saml2__AuthnStatementType(soap, tag, id, (const struct saml2__AuthnStatementType *)ptr, "saml2:AuthnStatementType");
	case SOAP_TYPE_saml2__StatementAbstractType:
		return soap_out_saml2__StatementAbstractType(soap, tag, id, (const struct saml2__StatementAbstractType *)ptr, "saml2:StatementAbstractType");
	case SOAP_TYPE_saml2__AdviceType:
		return soap_out_saml2__AdviceType(soap, tag, id, (const struct saml2__AdviceType *)ptr, "saml2:AdviceType");
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		return soap_out_saml2__ProxyRestrictionType(soap, tag, id, (const struct saml2__ProxyRestrictionType *)ptr, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_saml2__OneTimeUseType:
		return soap_out_saml2__OneTimeUseType(soap, tag, id, (const struct saml2__OneTimeUseType *)ptr, "saml2:OneTimeUseType");
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		return soap_out_saml2__AudienceRestrictionType(soap, tag, id, (const struct saml2__AudienceRestrictionType *)ptr, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_saml2__ConditionAbstractType:
		return soap_out_saml2__ConditionAbstractType(soap, tag, id, (const struct saml2__ConditionAbstractType *)ptr, "saml2:ConditionAbstractType");
	case SOAP_TYPE_saml2__ConditionsType:
		return soap_out_saml2__ConditionsType(soap, tag, id, (const struct saml2__ConditionsType *)ptr, "saml2:ConditionsType");
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		return soap_out_saml2__KeyInfoConfirmationDataType(soap, tag, id, (const struct saml2__KeyInfoConfirmationDataType *)ptr, "saml2:KeyInfoConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		return soap_out_saml2__SubjectConfirmationDataType(soap, tag, id, (const struct saml2__SubjectConfirmationDataType *)ptr, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		return soap_out_saml2__SubjectConfirmationType(soap, tag, id, (const struct saml2__SubjectConfirmationType *)ptr, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_saml2__SubjectType:
		return soap_out_saml2__SubjectType(soap, tag, id, (const struct saml2__SubjectType *)ptr, "saml2:SubjectType");
	case SOAP_TYPE_saml2__AssertionType:
		return soap_out_saml2__AssertionType(soap, tag, id, (const struct saml2__AssertionType *)ptr, "saml2:AssertionType");
	case SOAP_TYPE_saml2__EncryptedElementType:
		return soap_out_saml2__EncryptedElementType(soap, tag, id, (const struct saml2__EncryptedElementType *)ptr, "saml2:EncryptedElementType");
	case SOAP_TYPE_saml2__NameIDType:
		return soap_out_saml2__NameIDType(soap, tag, id, (const struct saml2__NameIDType *)ptr, "saml2:NameIDType");
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		return soap_out_saml2__BaseIDAbstractType(soap, tag, id, (const struct saml2__BaseIDAbstractType *)ptr, "saml2:BaseIDAbstractType");
	case SOAP_TYPE__saml1__Attribute:
		return soap_out__saml1__Attribute(soap, "saml1:Attribute", id, (const struct saml1__AttributeType *)ptr, "");
	case SOAP_TYPE__saml1__AttributeDesignator:
		return soap_out__saml1__AttributeDesignator(soap, "saml1:AttributeDesignator", id, (const struct saml1__AttributeDesignatorType *)ptr, "");
	case SOAP_TYPE__saml1__AttributeStatement:
		return soap_out__saml1__AttributeStatement(soap, "saml1:AttributeStatement", id, (const struct saml1__AttributeStatementType *)ptr, "");
	case SOAP_TYPE__saml1__Evidence:
		return soap_out__saml1__Evidence(soap, "saml1:Evidence", id, (const struct saml1__EvidenceType *)ptr, "");
	case SOAP_TYPE__saml1__Action:
		return soap_out__saml1__Action(soap, "saml1:Action", id, (const struct saml1__ActionType *)ptr, "");
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		return soap_out__saml1__AuthorizationDecisionStatement(soap, "saml1:AuthorizationDecisionStatement", id, (const struct saml1__AuthorizationDecisionStatementType *)ptr, "");
	case SOAP_TYPE__saml1__AuthorityBinding:
		return soap_out__saml1__AuthorityBinding(soap, "saml1:AuthorityBinding", id, (const struct saml1__AuthorityBindingType *)ptr, "");
	case SOAP_TYPE__saml1__SubjectLocality:
		return soap_out__saml1__SubjectLocality(soap, "saml1:SubjectLocality", id, (const struct saml1__SubjectLocalityType *)ptr, "");
	case SOAP_TYPE__saml1__AuthenticationStatement:
		return soap_out__saml1__AuthenticationStatement(soap, "saml1:AuthenticationStatement", id, (const struct saml1__AuthenticationStatementType *)ptr, "");
	case SOAP_TYPE__saml1__SubjectConfirmation:
		return soap_out__saml1__SubjectConfirmation(soap, "saml1:SubjectConfirmation", id, (const struct saml1__SubjectConfirmationType *)ptr, "");
	case SOAP_TYPE__saml1__NameIdentifier:
		return soap_out__saml1__NameIdentifier(soap, "saml1:NameIdentifier", id, (const struct saml1__NameIdentifierType *)ptr, "");
	case SOAP_TYPE__saml1__Subject:
		return soap_out__saml1__Subject(soap, "saml1:Subject", id, (const struct saml1__SubjectType *)ptr, "");
	case SOAP_TYPE__saml1__SubjectStatement:
		return soap_out__saml1__SubjectStatement(soap, "saml1:SubjectStatement", id, (const struct saml1__SubjectStatementAbstractType *)ptr, "");
	case SOAP_TYPE__saml1__Statement:
		return soap_out__saml1__Statement(soap, "saml1:Statement", id, (const struct saml1__StatementAbstractType *)ptr, "");
	case SOAP_TYPE__saml1__Advice:
		return soap_out__saml1__Advice(soap, "saml1:Advice", id, (const struct saml1__AdviceType *)ptr, "");
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		return soap_out__saml1__DoNotCacheCondition(soap, "saml1:DoNotCacheCondition", id, (const struct saml1__DoNotCacheConditionType *)ptr, "");
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		return soap_out__saml1__AudienceRestrictionCondition(soap, "saml1:AudienceRestrictionCondition", id, (const struct saml1__AudienceRestrictionConditionType *)ptr, "");
	case SOAP_TYPE__saml1__Condition:
		return soap_out__saml1__Condition(soap, "saml1:Condition", id, (const struct saml1__ConditionAbstractType *)ptr, "");
	case SOAP_TYPE__saml1__Conditions:
		return soap_out__saml1__Conditions(soap, "saml1:Conditions", id, (const struct saml1__ConditionsType *)ptr, "");
	case SOAP_TYPE__saml1__Assertion:
		return soap_out__saml1__Assertion(soap, "saml1:Assertion", id, (const struct saml1__AssertionType *)ptr, "");
	case SOAP_TYPE_saml1__AttributeType:
		return soap_out_saml1__AttributeType(soap, tag, id, (const struct saml1__AttributeType *)ptr, "saml1:AttributeType");
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		return soap_out_saml1__AttributeDesignatorType(soap, tag, id, (const struct saml1__AttributeDesignatorType *)ptr, "saml1:AttributeDesignatorType");
	case SOAP_TYPE_saml1__AttributeStatementType:
		return soap_out_saml1__AttributeStatementType(soap, tag, id, (const struct saml1__AttributeStatementType *)ptr, "saml1:AttributeStatementType");
	case SOAP_TYPE_saml1__EvidenceType:
		return soap_out_saml1__EvidenceType(soap, tag, id, (const struct saml1__EvidenceType *)ptr, "saml1:EvidenceType");
	case SOAP_TYPE_saml1__ActionType:
		return soap_out_saml1__ActionType(soap, tag, id, (const struct saml1__ActionType *)ptr, "saml1:ActionType");
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		return soap_out_saml1__AuthorizationDecisionStatementType(soap, tag, id, (const struct saml1__AuthorizationDecisionStatementType *)ptr, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_saml1__AuthorityBindingType:
		return soap_out_saml1__AuthorityBindingType(soap, tag, id, (const struct saml1__AuthorityBindingType *)ptr, "saml1:AuthorityBindingType");
	case SOAP_TYPE_saml1__SubjectLocalityType:
		return soap_out_saml1__SubjectLocalityType(soap, tag, id, (const struct saml1__SubjectLocalityType *)ptr, "saml1:SubjectLocalityType");
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		return soap_out_saml1__AuthenticationStatementType(soap, tag, id, (const struct saml1__AuthenticationStatementType *)ptr, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		return soap_out_saml1__SubjectConfirmationType(soap, tag, id, (const struct saml1__SubjectConfirmationType *)ptr, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_saml1__NameIdentifierType:
		return soap_out_saml1__NameIdentifierType(soap, tag, id, (const struct saml1__NameIdentifierType *)ptr, "saml1:NameIdentifierType");
	case SOAP_TYPE_saml1__SubjectType:
		return soap_out_saml1__SubjectType(soap, tag, id, (const struct saml1__SubjectType *)ptr, "saml1:SubjectType");
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		return soap_out_saml1__SubjectStatementAbstractType(soap, tag, id, (const struct saml1__SubjectStatementAbstractType *)ptr, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_saml1__StatementAbstractType:
		return soap_out_saml1__StatementAbstractType(soap, tag, id, (const struct saml1__StatementAbstractType *)ptr, "saml1:StatementAbstractType");
	case SOAP_TYPE_saml1__AdviceType:
		return soap_out_saml1__AdviceType(soap, tag, id, (const struct saml1__AdviceType *)ptr, "saml1:AdviceType");
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		return soap_out_saml1__DoNotCacheConditionType(soap, tag, id, (const struct saml1__DoNotCacheConditionType *)ptr, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		return soap_out_saml1__AudienceRestrictionConditionType(soap, tag, id, (const struct saml1__AudienceRestrictionConditionType *)ptr, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_saml1__ConditionAbstractType:
		return soap_out_saml1__ConditionAbstractType(soap, tag, id, (const struct saml1__ConditionAbstractType *)ptr, "saml1:ConditionAbstractType");
	case SOAP_TYPE_saml1__ConditionsType:
		return soap_out_saml1__ConditionsType(soap, tag, id, (const struct saml1__ConditionsType *)ptr, "saml1:ConditionsType");
	case SOAP_TYPE_saml1__AssertionType:
		return soap_out_saml1__AssertionType(soap, tag, id, (const struct saml1__AssertionType *)ptr, "saml1:AssertionType");
	case SOAP_TYPE_wsc__PropertiesType:
		return soap_out_wsc__PropertiesType(soap, tag, id, (const struct wsc__PropertiesType *)ptr, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		return soap_out_wsc__DerivedKeyTokenType(soap, tag, id, (const struct wsc__DerivedKeyTokenType *)ptr, "wsc:DerivedKeyTokenType");
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		return soap_out_wsc__SecurityContextTokenType(soap, tag, id, (const struct wsc__SecurityContextTokenType *)ptr, "wsc:SecurityContextTokenType");
	case SOAP_TYPE__xenc__ReferenceList:
		return soap_out__xenc__ReferenceList(soap, "xenc:ReferenceList", id, (const struct _xenc__ReferenceList *)ptr, "");
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		return soap_out_xenc__EncryptionPropertyType(soap, tag, id, (const struct xenc__EncryptionPropertyType *)ptr, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		return soap_out_xenc__EncryptionPropertiesType(soap, tag, id, (const struct xenc__EncryptionPropertiesType *)ptr, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_xenc__ReferenceType:
		return soap_out_xenc__ReferenceType(soap, tag, id, (const struct xenc__ReferenceType *)ptr, "xenc:ReferenceType");
	case SOAP_TYPE_xenc__AgreementMethodType:
		return soap_out_xenc__AgreementMethodType(soap, tag, id, (const struct xenc__AgreementMethodType *)ptr, "xenc:AgreementMethodType");
	case SOAP_TYPE_xenc__EncryptedKeyType:
		return soap_out_xenc__EncryptedKeyType(soap, tag, id, (const struct xenc__EncryptedKeyType *)ptr, "xenc:EncryptedKeyType");
	case SOAP_TYPE_xenc__EncryptedDataType:
		return soap_out_xenc__EncryptedDataType(soap, tag, id, (const struct xenc__EncryptedDataType *)ptr, "xenc:EncryptedDataType");
	case SOAP_TYPE_xenc__TransformsType:
		return soap_out_xenc__TransformsType(soap, tag, id, (const struct xenc__TransformsType *)ptr, "xenc:TransformsType");
	case SOAP_TYPE_xenc__CipherReferenceType:
		return soap_out_xenc__CipherReferenceType(soap, tag, id, (const struct xenc__CipherReferenceType *)ptr, "xenc:CipherReferenceType");
	case SOAP_TYPE_xenc__CipherDataType:
		return soap_out_xenc__CipherDataType(soap, tag, id, (const struct xenc__CipherDataType *)ptr, "xenc:CipherDataType");
	case SOAP_TYPE_xenc__EncryptionMethodType:
		return soap_out_xenc__EncryptionMethodType(soap, tag, id, (const struct xenc__EncryptionMethodType *)ptr, "xenc:EncryptionMethodType");
	case SOAP_TYPE_xenc__EncryptedType:
		return soap_out_xenc__EncryptedType(soap, tag, id, (const struct xenc__EncryptedType *)ptr, "xenc:EncryptedType");
	case SOAP_TYPE_ds__RSAKeyValueType:
		return soap_out_ds__RSAKeyValueType(soap, tag, id, (const struct ds__RSAKeyValueType *)ptr, "ds:RSAKeyValueType");
	case SOAP_TYPE_ds__DSAKeyValueType:
		return soap_out_ds__DSAKeyValueType(soap, tag, id, (const struct ds__DSAKeyValueType *)ptr, "ds:DSAKeyValueType");
	case SOAP_TYPE_ds__X509IssuerSerialType:
		return soap_out_ds__X509IssuerSerialType(soap, tag, id, (const struct ds__X509IssuerSerialType *)ptr, "ds:X509IssuerSerialType");
	case SOAP_TYPE__ds__KeyInfo:
		return soap_out__ds__KeyInfo(soap, "ds:KeyInfo", id, (const struct ds__KeyInfoType *)ptr, "");
	case SOAP_TYPE_ds__RetrievalMethodType:
		return soap_out_ds__RetrievalMethodType(soap, tag, id, (const struct ds__RetrievalMethodType *)ptr, "ds:RetrievalMethodType");
	case SOAP_TYPE_ds__KeyValueType:
		return soap_out_ds__KeyValueType(soap, tag, id, (const struct ds__KeyValueType *)ptr, "ds:KeyValueType");
	case SOAP_TYPE_ds__DigestMethodType:
		return soap_out_ds__DigestMethodType(soap, tag, id, (const struct ds__DigestMethodType *)ptr, "ds:DigestMethodType");
	case SOAP_TYPE__ds__Transform:
		return soap_out__ds__Transform(soap, "ds:Transform", id, (const struct ds__TransformType *)ptr, "");
	case SOAP_TYPE_ds__TransformType:
		return soap_out_ds__TransformType(soap, tag, id, (const struct ds__TransformType *)ptr, "ds:TransformType");
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		return soap_out__c14n__InclusiveNamespaces(soap, "c14n:InclusiveNamespaces", id, (const struct _c14n__InclusiveNamespaces *)ptr, "");
	case SOAP_TYPE_ds__TransformsType:
		return soap_out_ds__TransformsType(soap, tag, id, (const struct ds__TransformsType *)ptr, "ds:TransformsType");
	case SOAP_TYPE_ds__ReferenceType:
		return soap_out_ds__ReferenceType(soap, tag, id, (const struct ds__ReferenceType *)ptr, "ds:ReferenceType");
	case SOAP_TYPE_ds__SignatureMethodType:
		return soap_out_ds__SignatureMethodType(soap, tag, id, (const struct ds__SignatureMethodType *)ptr, "ds:SignatureMethodType");
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		return soap_out_ds__CanonicalizationMethodType(soap, tag, id, (const struct ds__CanonicalizationMethodType *)ptr, "ds:CanonicalizationMethodType");
	case SOAP_TYPE__ds__Signature:
		return soap_out__ds__Signature(soap, "ds:Signature", id, (const struct ds__SignatureType *)ptr, "");
	case SOAP_TYPE_ds__KeyInfoType:
		return soap_out_ds__KeyInfoType(soap, tag, id, (const struct ds__KeyInfoType *)ptr, "ds:KeyInfoType");
	case SOAP_TYPE_ds__SignedInfoType:
		return soap_out_ds__SignedInfoType(soap, tag, id, (const struct ds__SignedInfoType *)ptr, "ds:SignedInfoType");
	case SOAP_TYPE_ds__SignatureType:
		return soap_out_ds__SignatureType(soap, tag, id, (const struct ds__SignatureType *)ptr, "ds:SignatureType");
	case SOAP_TYPE_ds__X509DataType:
		return soap_out_ds__X509DataType(soap, tag, id, (const struct ds__X509DataType *)ptr, "ds:X509DataType");
	case SOAP_TYPE__wsse__SecurityTokenReference:
		return soap_out__wsse__SecurityTokenReference(soap, "wsse:SecurityTokenReference", id, (const struct _wsse__SecurityTokenReference *)ptr, "");
	case SOAP_TYPE__wsse__KeyIdentifier:
		return soap_out__wsse__KeyIdentifier(soap, "wsse:KeyIdentifier", id, (const struct _wsse__KeyIdentifier *)ptr, "");
	case SOAP_TYPE__wsse__Embedded:
		return soap_out__wsse__Embedded(soap, "wsse:Embedded", id, (const struct _wsse__Embedded *)ptr, "");
	case SOAP_TYPE__wsse__Reference:
		return soap_out__wsse__Reference(soap, "wsse:Reference", id, (const struct _wsse__Reference *)ptr, "");
	case SOAP_TYPE__wsse__BinarySecurityToken:
		return soap_out__wsse__BinarySecurityToken(soap, "wsse:BinarySecurityToken", id, (const struct _wsse__BinarySecurityToken *)ptr, "");
	case SOAP_TYPE__wsse__Password:
		return soap_out__wsse__Password(soap, "wsse:Password", id, (const struct _wsse__Password *)ptr, "");
	case SOAP_TYPE__wsse__UsernameToken:
		return soap_out__wsse__UsernameToken(soap, "wsse:UsernameToken", id, (const struct _wsse__UsernameToken *)ptr, "");
	case SOAP_TYPE_wsse__EncodedString:
		return soap_out_wsse__EncodedString(soap, tag, id, (const struct wsse__EncodedString *)ptr, "wsse:EncodedString");
	case SOAP_TYPE__wsu__Timestamp:
		return soap_out__wsu__Timestamp(soap, "wsu:Timestamp", id, (const struct _wsu__Timestamp *)ptr, "");
	case SOAP_TYPE__wsd__ProbeMatches:
		return soap_out__wsd__ProbeMatches(soap, "wsd:ProbeMatches", id, (const struct wsd__ProbeMatchesType *)ptr, "");
	case SOAP_TYPE__wsd__Probe:
		return soap_out__wsd__Probe(soap, "wsd:Probe", id, (const struct wsd__ProbeType *)ptr, "");
	case SOAP_TYPE__wsnt__TerminationTime:
		return soap_out__wsnt__TerminationTime(soap, "wsnt:TerminationTime", id, (const struct timeval *)ptr, "");
	case SOAP_TYPE__wsnt__CurrentTime:
		return soap_out__wsnt__CurrentTime(soap, "wsnt:CurrentTime", id, (const struct timeval *)ptr, "");
	case SOAP_TYPE__wsnt__ProducerReference:
		return soap_out__wsnt__ProducerReference(soap, "wsnt:ProducerReference", id, (const struct wsa5__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsnt__SubscriptionReference:
		return soap_out__wsnt__SubscriptionReference(soap, "wsnt:SubscriptionReference", id, (const struct wsa5__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsnt__CreationTime:
		return soap_out__wsnt__CreationTime(soap, "wsnt:CreationTime", id, (const struct timeval *)ptr, "");
	case SOAP_TYPE__wsnt__ConsumerReference:
		return soap_out__wsnt__ConsumerReference(soap, "wsnt:ConsumerReference", id, (const struct wsa5__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE_xsd__dateTime:
		return soap_out_xsd__dateTime(soap, tag, id, (const struct timeval *)ptr, "xsd:dateTime");
	case SOAP_TYPE_timeval:
		return soap_out_timeval(soap, tag, id, (const struct timeval *)ptr, "timeval");
	case SOAP_TYPE_chan__ChannelInstanceType:
		return soap_out_chan__ChannelInstanceType(soap, tag, id, (const struct chan__ChannelInstanceType *)ptr, "chan:ChannelInstanceType");
	case SOAP_TYPE__wsa5__ProblemAction:
		return soap_out__wsa5__ProblemAction(soap, "wsa5:ProblemAction", id, (const struct wsa5__ProblemActionType *)ptr, "");
	case SOAP_TYPE__wsa5__FaultTo:
		return soap_out__wsa5__FaultTo(soap, "wsa5:FaultTo", id, (const struct wsa5__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsa5__From:
		return soap_out__wsa5__From(soap, "wsa5:From", id, (const struct wsa5__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsa5__ReplyTo:
		return soap_out__wsa5__ReplyTo(soap, "wsa5:ReplyTo", id, (const struct wsa5__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE__wsa5__RelatesTo:
		return soap_out__wsa5__RelatesTo(soap, "wsa5:RelatesTo", id, (const struct wsa5__RelatesToType *)ptr, "");
	case SOAP_TYPE__wsa5__Metadata:
		return soap_out__wsa5__Metadata(soap, "wsa5:Metadata", id, (const struct wsa5__MetadataType *)ptr, "");
	case SOAP_TYPE__wsa5__ReferenceParameters:
		return soap_out__wsa5__ReferenceParameters(soap, "wsa5:ReferenceParameters", id, (const struct wsa5__ReferenceParametersType *)ptr, "");
	case SOAP_TYPE__wsa5__EndpointReference:
		return soap_out__wsa5__EndpointReference(soap, "wsa5:EndpointReference", id, (const struct wsa5__EndpointReferenceType *)ptr, "");
	case SOAP_TYPE_wsa5__ProblemActionType:
		return soap_out_wsa5__ProblemActionType(soap, tag, id, (const struct wsa5__ProblemActionType *)ptr, "wsa5:ProblemActionType");
	case SOAP_TYPE_wsa5__RelatesToType:
		return soap_out_wsa5__RelatesToType(soap, tag, id, (const struct wsa5__RelatesToType *)ptr, "wsa5:RelatesToType");
	case SOAP_TYPE_wsa5__MetadataType:
		return soap_out_wsa5__MetadataType(soap, tag, id, (const struct wsa5__MetadataType *)ptr, "wsa5:MetadataType");
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		return soap_out_wsa5__ReferenceParametersType(soap, tag, id, (const struct wsa5__ReferenceParametersType *)ptr, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		return soap_out_wsa5__EndpointReferenceType(soap, tag, id, (const struct wsa5__EndpointReferenceType *)ptr, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_xsd__anyAttribute:
		return soap_out_xsd__anyAttribute(soap, tag, id, (const struct soap_dom_attribute *)ptr, "xsd:anyAttribute");
	case SOAP_TYPE_xsd__anyType:
		return soap_out_xsd__anyType(soap, tag, id, (const struct soap_dom_element *)ptr, "xsd:anyType");
	case SOAP_TYPE_wsd__ProbeMatchesType:
		return soap_out_wsd__ProbeMatchesType(soap, tag, id, (const struct wsd__ProbeMatchesType *)ptr, "wsd:ProbeMatchesType");
	case SOAP_TYPE_wsd__ProbeType:
		return soap_out_wsd__ProbeType(soap, tag, id, (const struct wsd__ProbeType *)ptr, "wsd:ProbeType");
	case SOAP_TYPE_PointerTo_wsse__Security:
		return soap_out_PointerTo_wsse__Security(soap, tag, id, (struct _wsse__Security *const*)ptr, "wsse:Security");
	case SOAP_TYPE_PointerTods__SignatureType:
		return soap_out_PointerTods__SignatureType(soap, tag, id, (struct ds__SignatureType *const*)ptr, "ds:SignatureType");
	case SOAP_TYPE_PointerTowsc__SecurityContextTokenType:
		return soap_out_PointerTowsc__SecurityContextTokenType(soap, tag, id, (struct wsc__SecurityContextTokenType *const*)ptr, "wsc:SecurityContextTokenType");
	case SOAP_TYPE_PointerTo_wsse__BinarySecurityToken:
		return soap_out_PointerTo_wsse__BinarySecurityToken(soap, tag, id, (struct _wsse__BinarySecurityToken *const*)ptr, "wsse:BinarySecurityToken");
	case SOAP_TYPE_PointerTo_wsse__UsernameToken:
		return soap_out_PointerTo_wsse__UsernameToken(soap, tag, id, (struct _wsse__UsernameToken *const*)ptr, "wsse:UsernameToken");
	case SOAP_TYPE_PointerTo_wsu__Timestamp:
		return soap_out_PointerTo_wsu__Timestamp(soap, tag, id, (struct _wsu__Timestamp *const*)ptr, "wsu:Timestamp");
	case SOAP_TYPE__saml2__AuthenticatingAuthority:
		return soap_out_string(soap, "saml2:AuthenticatingAuthority", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AuthnContextDeclRef:
		return soap_out_string(soap, "saml2:AuthnContextDeclRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AuthnContextClassRef:
		return soap_out_string(soap, "saml2:AuthnContextClassRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__Audience:
		return soap_out_string(soap, "saml2:Audience", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AssertionURIRef:
		return soap_out_string(soap, "saml2:AssertionURIRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AssertionIDRef:
		return soap_out_string(soap, "saml2:AssertionIDRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerToPointerTo_ds__KeyInfo:
		return soap_out_PointerToPointerTo_ds__KeyInfo(soap, tag, id, (struct ds__KeyInfoType **const*)ptr, "ds:KeyInfo");
	case SOAP_TYPE_PointerTosaml2__AttributeType:
		return soap_out_PointerTosaml2__AttributeType(soap, tag, id, (struct saml2__AttributeType *const*)ptr, "saml2:AttributeType");
	case SOAP_TYPE_PointerTosaml2__EvidenceType:
		return soap_out_PointerTosaml2__EvidenceType(soap, tag, id, (struct saml2__EvidenceType *const*)ptr, "saml2:EvidenceType");
	case SOAP_TYPE_PointerTosaml2__ActionType:
		return soap_out_PointerTosaml2__ActionType(soap, tag, id, (struct saml2__ActionType *const*)ptr, "saml2:ActionType");
	case SOAP_TYPE_PointerTosaml2__AuthnContextType:
		return soap_out_PointerTosaml2__AuthnContextType(soap, tag, id, (struct saml2__AuthnContextType *const*)ptr, "saml2:AuthnContextType");
	case SOAP_TYPE_PointerTosaml2__SubjectLocalityType:
		return soap_out_PointerTosaml2__SubjectLocalityType(soap, tag, id, (struct saml2__SubjectLocalityType *const*)ptr, "saml2:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml2__AssertionType:
		return soap_out_PointerTosaml2__AssertionType(soap, tag, id, (struct saml2__AssertionType *const*)ptr, "saml2:AssertionType");
	case SOAP_TYPE_PointerTosaml2__ProxyRestrictionType:
		return soap_out_PointerTosaml2__ProxyRestrictionType(soap, tag, id, (struct saml2__ProxyRestrictionType *const*)ptr, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_PointerTosaml2__OneTimeUseType:
		return soap_out_PointerTosaml2__OneTimeUseType(soap, tag, id, (struct saml2__OneTimeUseType *const*)ptr, "saml2:OneTimeUseType");
	case SOAP_TYPE_PointerTosaml2__AudienceRestrictionType:
		return soap_out_PointerTosaml2__AudienceRestrictionType(soap, tag, id, (struct saml2__AudienceRestrictionType *const*)ptr, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_PointerTosaml2__ConditionAbstractType:
		return soap_out_PointerTosaml2__ConditionAbstractType(soap, tag, id, (struct saml2__ConditionAbstractType *const*)ptr, "saml2:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType:
		return soap_out_PointerTosaml2__SubjectConfirmationDataType(soap, tag, id, (struct saml2__SubjectConfirmationDataType *const*)ptr, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationType:
		return soap_out_PointerTosaml2__SubjectConfirmationType(soap, tag, id, (struct saml2__SubjectConfirmationType *const*)ptr, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml2__EncryptedElementType:
		return soap_out_PointerTosaml2__EncryptedElementType(soap, tag, id, (struct saml2__EncryptedElementType *const*)ptr, "saml2:EncryptedElementType");
	case SOAP_TYPE_PointerTosaml2__BaseIDAbstractType:
		return soap_out_PointerTosaml2__BaseIDAbstractType(soap, tag, id, (struct saml2__BaseIDAbstractType *const*)ptr, "saml2:BaseIDAbstractType");
	case SOAP_TYPE_PointerTosaml2__AttributeStatementType:
		return soap_out_PointerTosaml2__AttributeStatementType(soap, tag, id, (struct saml2__AttributeStatementType *const*)ptr, "saml2:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType:
		return soap_out_PointerTosaml2__AuthzDecisionStatementType(soap, tag, id, (struct saml2__AuthzDecisionStatementType *const*)ptr, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthnStatementType:
		return soap_out_PointerTosaml2__AuthnStatementType(soap, tag, id, (struct saml2__AuthnStatementType *const*)ptr, "saml2:AuthnStatementType");
	case SOAP_TYPE_PointerTosaml2__StatementAbstractType:
		return soap_out_PointerTosaml2__StatementAbstractType(soap, tag, id, (struct saml2__StatementAbstractType *const*)ptr, "saml2:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml2__AdviceType:
		return soap_out_PointerTosaml2__AdviceType(soap, tag, id, (struct saml2__AdviceType *const*)ptr, "saml2:AdviceType");
	case SOAP_TYPE_PointerTosaml2__ConditionsType:
		return soap_out_PointerTosaml2__ConditionsType(soap, tag, id, (struct saml2__ConditionsType *const*)ptr, "saml2:ConditionsType");
	case SOAP_TYPE_PointerTosaml2__SubjectType:
		return soap_out_PointerTosaml2__SubjectType(soap, tag, id, (struct saml2__SubjectType *const*)ptr, "saml2:SubjectType");
	case SOAP_TYPE_PointerTosaml2__NameIDType:
		return soap_out_PointerTosaml2__NameIDType(soap, tag, id, (struct saml2__NameIDType *const*)ptr, "saml2:NameIDType");
	case SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType:
		return soap_out_PointerToPointerToxenc__EncryptedKeyType(soap, tag, id, (struct xenc__EncryptedKeyType **const*)ptr, "xenc:EncryptedKeyType");
	case SOAP_TYPE_PointerToxenc__EncryptedKeyType:
		return soap_out_PointerToxenc__EncryptedKeyType(soap, tag, id, (struct xenc__EncryptedKeyType *const*)ptr, "xenc:EncryptedKeyType");
	case SOAP_TYPE__saml1__ConfirmationMethod:
		return soap_out_string(soap, "saml1:ConfirmationMethod", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml1__Audience:
		return soap_out_string(soap, "saml1:Audience", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml1__AssertionIDReference:
		return soap_out_string(soap, "saml1:AssertionIDReference", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerTosaml1__AttributeType:
		return soap_out_PointerTosaml1__AttributeType(soap, tag, id, (struct saml1__AttributeType *const*)ptr, "saml1:AttributeType");
	case SOAP_TYPE_PointerTosaml1__EvidenceType:
		return soap_out_PointerTosaml1__EvidenceType(soap, tag, id, (struct saml1__EvidenceType *const*)ptr, "saml1:EvidenceType");
	case SOAP_TYPE_PointerTosaml1__ActionType:
		return soap_out_PointerTosaml1__ActionType(soap, tag, id, (struct saml1__ActionType *const*)ptr, "saml1:ActionType");
	case SOAP_TYPE_PointerTosaml1__AuthorityBindingType:
		return soap_out_PointerTosaml1__AuthorityBindingType(soap, tag, id, (struct saml1__AuthorityBindingType *const*)ptr, "saml1:AuthorityBindingType");
	case SOAP_TYPE_PointerTosaml1__SubjectLocalityType:
		return soap_out_PointerTosaml1__SubjectLocalityType(soap, tag, id, (struct saml1__SubjectLocalityType *const*)ptr, "saml1:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml1__SubjectType:
		return soap_out_PointerTosaml1__SubjectType(soap, tag, id, (struct saml1__SubjectType *const*)ptr, "saml1:SubjectType");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTosaml1__SubjectConfirmationType:
		return soap_out_PointerTosaml1__SubjectConfirmationType(soap, tag, id, (struct saml1__SubjectConfirmationType *const*)ptr, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml1__NameIdentifierType:
		return soap_out_PointerTosaml1__NameIdentifierType(soap, tag, id, (struct saml1__NameIdentifierType *const*)ptr, "saml1:NameIdentifierType");
	case SOAP_TYPE_PointerTosaml1__AssertionType:
		return soap_out_PointerTosaml1__AssertionType(soap, tag, id, (struct saml1__AssertionType *const*)ptr, "saml1:AssertionType");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTosaml1__ConditionAbstractType:
		return soap_out_PointerTosaml1__ConditionAbstractType(soap, tag, id, (struct saml1__ConditionAbstractType *const*)ptr, "saml1:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType:
		return soap_out_PointerTosaml1__DoNotCacheConditionType(soap, tag, id, (struct saml1__DoNotCacheConditionType *const*)ptr, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType:
		return soap_out_PointerTosaml1__AudienceRestrictionConditionType(soap, tag, id, (struct saml1__AudienceRestrictionConditionType *const*)ptr, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_PointerTo_ds__Signature:
		return soap_out_PointerTo_ds__Signature(soap, tag, id, (struct ds__SignatureType *const*)ptr, "ds:Signature");
	case SOAP_TYPE_PointerTosaml1__AttributeStatementType:
		return soap_out_PointerTosaml1__AttributeStatementType(soap, tag, id, (struct saml1__AttributeStatementType *const*)ptr, "saml1:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType:
		return soap_out_PointerTosaml1__AuthorizationDecisionStatementType(soap, tag, id, (struct saml1__AuthorizationDecisionStatementType *const*)ptr, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthenticationStatementType:
		return soap_out_PointerTosaml1__AuthenticationStatementType(soap, tag, id, (struct saml1__AuthenticationStatementType *const*)ptr, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType:
		return soap_out_PointerTosaml1__SubjectStatementAbstractType(soap, tag, id, (struct saml1__SubjectStatementAbstractType *const*)ptr, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__StatementAbstractType:
		return soap_out_PointerTosaml1__StatementAbstractType(soap, tag, id, (struct saml1__StatementAbstractType *const*)ptr, "saml1:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__AdviceType:
		return soap_out_PointerTosaml1__AdviceType(soap, tag, id, (struct saml1__AdviceType *const*)ptr, "saml1:AdviceType");
	case SOAP_TYPE_PointerTosaml1__ConditionsType:
		return soap_out_PointerTosaml1__ConditionsType(soap, tag, id, (struct saml1__ConditionsType *const*)ptr, "saml1:ConditionsType");
	case SOAP_TYPE_PointerToULONG64:
		return soap_out_PointerToULONG64(soap, tag, id, (ULONG64 *const*)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_PointerTowsc__PropertiesType:
		return soap_out_PointerTowsc__PropertiesType(soap, tag, id, (struct wsc__PropertiesType *const*)ptr, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__FaultCodeOpenEnumType:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "wsc:FaultCodeOpenEnumType");
	case SOAP_TYPE_PointerTo_xenc__ReferenceList:
		return soap_out_PointerTo_xenc__ReferenceList(soap, tag, id, (struct _xenc__ReferenceList *const*)ptr, "xenc:ReferenceList");
	case SOAP_TYPE_PointerToxenc__ReferenceType:
		return soap_out_PointerToxenc__ReferenceType(soap, tag, id, (struct xenc__ReferenceType *const*)ptr, "xenc:ReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertyType:
		return soap_out_PointerToxenc__EncryptionPropertyType(soap, tag, id, (struct xenc__EncryptionPropertyType *const*)ptr, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_PointerToxenc__TransformsType:
		return soap_out_PointerToxenc__TransformsType(soap, tag, id, (struct xenc__TransformsType *const*)ptr, "xenc:TransformsType");
	case SOAP_TYPE_PointerToxenc__CipherReferenceType:
		return soap_out_PointerToxenc__CipherReferenceType(soap, tag, id, (struct xenc__CipherReferenceType *const*)ptr, "xenc:CipherReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertiesType:
		return soap_out_PointerToxenc__EncryptionPropertiesType(soap, tag, id, (struct xenc__EncryptionPropertiesType *const*)ptr, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_PointerToxenc__CipherDataType:
		return soap_out_PointerToxenc__CipherDataType(soap, tag, id, (struct xenc__CipherDataType *const*)ptr, "xenc:CipherDataType");
	case SOAP_TYPE_PointerTo_ds__KeyInfo:
		return soap_out_PointerTo_ds__KeyInfo(soap, tag, id, (struct ds__KeyInfoType *const*)ptr, "ds:KeyInfo");
	case SOAP_TYPE_PointerToxenc__EncryptionMethodType:
		return soap_out_PointerToxenc__EncryptionMethodType(soap, tag, id, (struct xenc__EncryptionMethodType *const*)ptr, "xenc:EncryptionMethodType");
	case SOAP_TYPE_PointerTods__X509IssuerSerialType:
		return soap_out_PointerTods__X509IssuerSerialType(soap, tag, id, (struct ds__X509IssuerSerialType *const*)ptr, "ds:X509IssuerSerialType");
	case SOAP_TYPE_PointerTods__RSAKeyValueType:
		return soap_out_PointerTods__RSAKeyValueType(soap, tag, id, (struct ds__RSAKeyValueType *const*)ptr, "ds:RSAKeyValueType");
	case SOAP_TYPE_PointerTods__DSAKeyValueType:
		return soap_out_PointerTods__DSAKeyValueType(soap, tag, id, (struct ds__DSAKeyValueType *const*)ptr, "ds:DSAKeyValueType");
	case SOAP_TYPE_PointerTods__TransformType:
		return soap_out_PointerTods__TransformType(soap, tag, id, (struct ds__TransformType *const*)ptr, "ds:TransformType");
	case SOAP_TYPE_PointerTods__DigestMethodType:
		return soap_out_PointerTods__DigestMethodType(soap, tag, id, (struct ds__DigestMethodType *const*)ptr, "ds:DigestMethodType");
	case SOAP_TYPE_PointerTods__TransformsType:
		return soap_out_PointerTods__TransformsType(soap, tag, id, (struct ds__TransformsType *const*)ptr, "ds:TransformsType");
	case SOAP_TYPE_PointerToPointerTods__ReferenceType:
		return soap_out_PointerToPointerTods__ReferenceType(soap, tag, id, (struct ds__ReferenceType **const*)ptr, "ds:ReferenceType");
	case SOAP_TYPE_PointerTods__ReferenceType:
		return soap_out_PointerTods__ReferenceType(soap, tag, id, (struct ds__ReferenceType *const*)ptr, "ds:ReferenceType");
	case SOAP_TYPE_PointerTods__SignatureMethodType:
		return soap_out_PointerTods__SignatureMethodType(soap, tag, id, (struct ds__SignatureMethodType *const*)ptr, "ds:SignatureMethodType");
	case SOAP_TYPE_PointerTods__CanonicalizationMethodType:
		return soap_out_PointerTods__CanonicalizationMethodType(soap, tag, id, (struct ds__CanonicalizationMethodType *const*)ptr, "ds:CanonicalizationMethodType");
	case SOAP_TYPE_PointerTo_wsse__SecurityTokenReference:
		return soap_out_PointerTo_wsse__SecurityTokenReference(soap, tag, id, (struct _wsse__SecurityTokenReference *const*)ptr, "wsse:SecurityTokenReference");
	case SOAP_TYPE_PointerTods__RetrievalMethodType:
		return soap_out_PointerTods__RetrievalMethodType(soap, tag, id, (struct ds__RetrievalMethodType *const*)ptr, "ds:RetrievalMethodType");
	case SOAP_TYPE_PointerTods__KeyValueType:
		return soap_out_PointerTods__KeyValueType(soap, tag, id, (struct ds__KeyValueType *const*)ptr, "ds:KeyValueType");
	case SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces:
		return soap_out_PointerTo_c14n__InclusiveNamespaces(soap, tag, id, (struct _c14n__InclusiveNamespaces *const*)ptr, "c14n:InclusiveNamespaces");
	case SOAP_TYPE_PointerTods__KeyInfoType:
		return soap_out_PointerTods__KeyInfoType(soap, tag, id, (struct ds__KeyInfoType *const*)ptr, "ds:KeyInfoType");
	case SOAP_TYPE_PointerTods__SignedInfoType:
		return soap_out_PointerTods__SignedInfoType(soap, tag, id, (struct ds__SignedInfoType *const*)ptr, "ds:SignedInfoType");
	case SOAP_TYPE__ds__SignatureValue:
		return soap_out_string(soap, "ds:SignatureValue", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerTods__X509DataType:
		return soap_out_PointerTods__X509DataType(soap, tag, id, (struct ds__X509DataType *const*)ptr, "ds:X509DataType");
	case SOAP_TYPE_PointerTo_wsse__Embedded:
		return soap_out_PointerTo_wsse__Embedded(soap, tag, id, (struct _wsse__Embedded *const*)ptr, "wsse:Embedded");
	case SOAP_TYPE_PointerTo_wsse__KeyIdentifier:
		return soap_out_PointerTo_wsse__KeyIdentifier(soap, tag, id, (struct _wsse__KeyIdentifier *const*)ptr, "wsse:KeyIdentifier");
	case SOAP_TYPE_PointerTo_wsse__Reference:
		return soap_out_PointerTo_wsse__Reference(soap, tag, id, (struct _wsse__Reference *const*)ptr, "wsse:Reference");
	case SOAP_TYPE_PointerTowsse__EncodedString:
		return soap_out_PointerTowsse__EncodedString(soap, tag, id, (struct wsse__EncodedString *const*)ptr, "wsse:EncodedString");
	case SOAP_TYPE_PointerTo_wsse__Password:
		return soap_out_PointerTo_wsse__Password(soap, tag, id, (struct _wsse__Password *const*)ptr, "wsse:Password");
	case SOAP_TYPE_PointerTowsd__AppSequenceType:
		return soap_out_PointerTowsd__AppSequenceType(soap, tag, id, (wsd__AppSequenceType *const*)ptr, "wsd:AppSequenceType");
	case SOAP_TYPE_PointerTowsa__Relationship:
		return soap_out_PointerTowsa__Relationship(soap, tag, id, (wsa__Relationship *const*)ptr, "wsa:Relationship");
	case SOAP_TYPE_PointerTo_wsnt__ResumeSubscription:
		return soap_out_PointerTo_wsnt__ResumeSubscription(soap, tag, id, (_wsnt__ResumeSubscription *const*)ptr, "wsnt:ResumeSubscription");
	case SOAP_TYPE_PointerTo_wsnt__PauseSubscription:
		return soap_out_PointerTo_wsnt__PauseSubscription(soap, tag, id, (_wsnt__PauseSubscription *const*)ptr, "wsnt:PauseSubscription");
	case SOAP_TYPE_PointerTo_wsnt__Renew:
		return soap_out_PointerTo_wsnt__Renew(soap, tag, id, (_wsnt__Renew *const*)ptr, "wsnt:Renew");
	case SOAP_TYPE_PointerTo_wsnt__Unsubscribe:
		return soap_out_PointerTo_wsnt__Unsubscribe(soap, tag, id, (_wsnt__Unsubscribe *const*)ptr, "wsnt:Unsubscribe");
	case SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint:
		return soap_out_PointerTo_tev__SetSynchronizationPoint(soap, tag, id, (_tev__SetSynchronizationPoint *const*)ptr, "tev:SetSynchronizationPoint");
	case SOAP_TYPE_PointerTo_tev__Seek:
		return soap_out_PointerTo_tev__Seek(soap, tag, id, (_tev__Seek *const*)ptr, "tev:Seek");
	case SOAP_TYPE_PointerTo_tev__PullMessages:
		return soap_out_PointerTo_tev__PullMessages(soap, tag, id, (_tev__PullMessages *const*)ptr, "tev:PullMessages");
	case SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint:
		return soap_out_PointerTo_wsnt__DestroyPullPoint(soap, tag, id, (_wsnt__DestroyPullPoint *const*)ptr, "wsnt:DestroyPullPoint");
	case SOAP_TYPE_PointerTo_wsnt__GetMessages:
		return soap_out_PointerTo_wsnt__GetMessages(soap, tag, id, (_wsnt__GetMessages *const*)ptr, "wsnt:GetMessages");
	case SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage:
		return soap_out_PointerTo_wsnt__GetCurrentMessage(soap, tag, id, (_wsnt__GetCurrentMessage *const*)ptr, "wsnt:GetCurrentMessage");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe:
		return soap_out_PointerTo_wsnt__Subscribe(soap, tag, id, (_wsnt__Subscribe *const*)ptr, "wsnt:Subscribe");
	case SOAP_TYPE_PointerTo_wsnt__Notify:
		return soap_out_PointerTo_wsnt__Notify(soap, tag, id, (_wsnt__Notify *const*)ptr, "wsnt:Notify");
	case SOAP_TYPE_PointerTo_tev__GetEventProperties:
		return soap_out_PointerTo_tev__GetEventProperties(soap, tag, id, (_tev__GetEventProperties *const*)ptr, "tev:GetEventProperties");
	case SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription:
		return soap_out_PointerTo_tev__CreatePullPointSubscription(soap, tag, id, (_tev__CreatePullPointSubscription *const*)ptr, "tev:CreatePullPointSubscription");
	case SOAP_TYPE_PointerTo_tev__GetServiceCapabilities:
		return soap_out_PointerTo_tev__GetServiceCapabilities(soap, tag, id, (_tev__GetServiceCapabilities *const*)ptr, "tev:GetServiceCapabilities");
	case SOAP_TYPE_PointerTo_wsnt__CreatePullPoint:
		return soap_out_PointerTo_wsnt__CreatePullPoint(soap, tag, id, (_wsnt__CreatePullPoint *const*)ptr, "wsnt:CreatePullPoint");
	case SOAP_TYPE_PointerTo_tds__DeleteGeoLocation:
		return soap_out_PointerTo_tds__DeleteGeoLocation(soap, tag, id, (_tds__DeleteGeoLocation *const*)ptr, "tds:DeleteGeoLocation");
	case SOAP_TYPE_PointerTo_tds__SetGeoLocation:
		return soap_out_PointerTo_tds__SetGeoLocation(soap, tag, id, (_tds__SetGeoLocation *const*)ptr, "tds:SetGeoLocation");
	case SOAP_TYPE_PointerTo_tds__GetGeoLocation:
		return soap_out_PointerTo_tds__GetGeoLocation(soap, tag, id, (_tds__GetGeoLocation *const*)ptr, "tds:GetGeoLocation");
	case SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration:
		return soap_out_PointerTo_tds__DeleteStorageConfiguration(soap, tag, id, (_tds__DeleteStorageConfiguration *const*)ptr, "tds:DeleteStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__SetStorageConfiguration:
		return soap_out_PointerTo_tds__SetStorageConfiguration(soap, tag, id, (_tds__SetStorageConfiguration *const*)ptr, "tds:SetStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetStorageConfiguration:
		return soap_out_PointerTo_tds__GetStorageConfiguration(soap, tag, id, (_tds__GetStorageConfiguration *const*)ptr, "tds:GetStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration:
		return soap_out_PointerTo_tds__CreateStorageConfiguration(soap, tag, id, (_tds__CreateStorageConfiguration *const*)ptr, "tds:CreateStorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetStorageConfigurations:
		return soap_out_PointerTo_tds__GetStorageConfigurations(soap, tag, id, (_tds__GetStorageConfigurations *const*)ptr, "tds:GetStorageConfigurations");
	case SOAP_TYPE_PointerTo_tds__StartSystemRestore:
		return soap_out_PointerTo_tds__StartSystemRestore(soap, tag, id, (_tds__StartSystemRestore *const*)ptr, "tds:StartSystemRestore");
	case SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade:
		return soap_out_PointerTo_tds__StartFirmwareUpgrade(soap, tag, id, (_tds__StartFirmwareUpgrade *const*)ptr, "tds:StartFirmwareUpgrade");
	case SOAP_TYPE_PointerTo_tds__GetSystemUris:
		return soap_out_PointerTo_tds__GetSystemUris(soap, tag, id, (_tds__GetSystemUris *const*)ptr, "tds:GetSystemUris");
	case SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks:
		return soap_out_PointerTo_tds__ScanAvailableDot11Networks(soap, tag, id, (_tds__ScanAvailableDot11Networks *const*)ptr, "tds:ScanAvailableDot11Networks");
	case SOAP_TYPE_PointerTo_tds__GetDot11Status:
		return soap_out_PointerTo_tds__GetDot11Status(soap, tag, id, (_tds__GetDot11Status *const*)ptr, "tds:GetDot11Status");
	case SOAP_TYPE_PointerTo_tds__GetDot11Capabilities:
		return soap_out_PointerTo_tds__GetDot11Capabilities(soap, tag, id, (_tds__GetDot11Capabilities *const*)ptr, "tds:GetDot11Capabilities");
	case SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration:
		return soap_out_PointerTo_tds__DeleteDot1XConfiguration(soap, tag, id, (_tds__DeleteDot1XConfiguration *const*)ptr, "tds:DeleteDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations:
		return soap_out_PointerTo_tds__GetDot1XConfigurations(soap, tag, id, (_tds__GetDot1XConfigurations *const*)ptr, "tds:GetDot1XConfigurations");
	case SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration:
		return soap_out_PointerTo_tds__GetDot1XConfiguration(soap, tag, id, (_tds__GetDot1XConfiguration *const*)ptr, "tds:GetDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration:
		return soap_out_PointerTo_tds__SetDot1XConfiguration(soap, tag, id, (_tds__SetDot1XConfiguration *const*)ptr, "tds:SetDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration:
		return soap_out_PointerTo_tds__CreateDot1XConfiguration(soap, tag, id, (_tds__CreateDot1XConfiguration *const*)ptr, "tds:CreateDot1XConfiguration");
	case SOAP_TYPE_PointerTo_tds__LoadCACertificates:
		return soap_out_PointerTo_tds__LoadCACertificates(soap, tag, id, (_tds__LoadCACertificates *const*)ptr, "tds:LoadCACertificates");
	case SOAP_TYPE_PointerTo_tds__GetCertificateInformation:
		return soap_out_PointerTo_tds__GetCertificateInformation(soap, tag, id, (_tds__GetCertificateInformation *const*)ptr, "tds:GetCertificateInformation");
	case SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey:
		return soap_out_PointerTo_tds__LoadCertificateWithPrivateKey(soap, tag, id, (_tds__LoadCertificateWithPrivateKey *const*)ptr, "tds:LoadCertificateWithPrivateKey");
	case SOAP_TYPE_PointerTo_tds__GetCACertificates:
		return soap_out_PointerTo_tds__GetCACertificates(soap, tag, id, (_tds__GetCACertificates *const*)ptr, "tds:GetCACertificates");
	case SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand:
		return soap_out_PointerTo_tds__SendAuxiliaryCommand(soap, tag, id, (_tds__SendAuxiliaryCommand *const*)ptr, "tds:SendAuxiliaryCommand");
	case SOAP_TYPE_PointerTo_tds__SetRelayOutputState:
		return soap_out_PointerTo_tds__SetRelayOutputState(soap, tag, id, (_tds__SetRelayOutputState *const*)ptr, "tds:SetRelayOutputState");
	case SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings:
		return soap_out_PointerTo_tds__SetRelayOutputSettings(soap, tag, id, (_tds__SetRelayOutputSettings *const*)ptr, "tds:SetRelayOutputSettings");
	case SOAP_TYPE_PointerTo_tds__GetRelayOutputs:
		return soap_out_PointerTo_tds__GetRelayOutputs(soap, tag, id, (_tds__GetRelayOutputs *const*)ptr, "tds:GetRelayOutputs");
	case SOAP_TYPE_PointerTo_tds__SetClientCertificateMode:
		return soap_out_PointerTo_tds__SetClientCertificateMode(soap, tag, id, (_tds__SetClientCertificateMode *const*)ptr, "tds:SetClientCertificateMode");
	case SOAP_TYPE_PointerTo_tds__GetClientCertificateMode:
		return soap_out_PointerTo_tds__GetClientCertificateMode(soap, tag, id, (_tds__GetClientCertificateMode *const*)ptr, "tds:GetClientCertificateMode");
	case SOAP_TYPE_PointerTo_tds__LoadCertificates:
		return soap_out_PointerTo_tds__LoadCertificates(soap, tag, id, (_tds__LoadCertificates *const*)ptr, "tds:LoadCertificates");
	case SOAP_TYPE_PointerTo_tds__GetPkcs10Request:
		return soap_out_PointerTo_tds__GetPkcs10Request(soap, tag, id, (_tds__GetPkcs10Request *const*)ptr, "tds:GetPkcs10Request");
	case SOAP_TYPE_PointerTo_tds__DeleteCertificates:
		return soap_out_PointerTo_tds__DeleteCertificates(soap, tag, id, (_tds__DeleteCertificates *const*)ptr, "tds:DeleteCertificates");
	case SOAP_TYPE_PointerTo_tds__SetCertificatesStatus:
		return soap_out_PointerTo_tds__SetCertificatesStatus(soap, tag, id, (_tds__SetCertificatesStatus *const*)ptr, "tds:SetCertificatesStatus");
	case SOAP_TYPE_PointerTo_tds__GetCertificatesStatus:
		return soap_out_PointerTo_tds__GetCertificatesStatus(soap, tag, id, (_tds__GetCertificatesStatus *const*)ptr, "tds:GetCertificatesStatus");
	case SOAP_TYPE_PointerTo_tds__GetCertificates:
		return soap_out_PointerTo_tds__GetCertificates(soap, tag, id, (_tds__GetCertificates *const*)ptr, "tds:GetCertificates");
	case SOAP_TYPE_PointerTo_tds__CreateCertificate:
		return soap_out_PointerTo_tds__CreateCertificate(soap, tag, id, (_tds__CreateCertificate *const*)ptr, "tds:CreateCertificate");
	case SOAP_TYPE_PointerTo_tds__SetAccessPolicy:
		return soap_out_PointerTo_tds__SetAccessPolicy(soap, tag, id, (_tds__SetAccessPolicy *const*)ptr, "tds:SetAccessPolicy");
	case SOAP_TYPE_PointerTo_tds__GetAccessPolicy:
		return soap_out_PointerTo_tds__GetAccessPolicy(soap, tag, id, (_tds__GetAccessPolicy *const*)ptr, "tds:GetAccessPolicy");
	case SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter:
		return soap_out_PointerTo_tds__RemoveIPAddressFilter(soap, tag, id, (_tds__RemoveIPAddressFilter *const*)ptr, "tds:RemoveIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__AddIPAddressFilter:
		return soap_out_PointerTo_tds__AddIPAddressFilter(soap, tag, id, (_tds__AddIPAddressFilter *const*)ptr, "tds:AddIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__SetIPAddressFilter:
		return soap_out_PointerTo_tds__SetIPAddressFilter(soap, tag, id, (_tds__SetIPAddressFilter *const*)ptr, "tds:SetIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__GetIPAddressFilter:
		return soap_out_PointerTo_tds__GetIPAddressFilter(soap, tag, id, (_tds__GetIPAddressFilter *const*)ptr, "tds:GetIPAddressFilter");
	case SOAP_TYPE_PointerTo_tds__SetZeroConfiguration:
		return soap_out_PointerTo_tds__SetZeroConfiguration(soap, tag, id, (_tds__SetZeroConfiguration *const*)ptr, "tds:SetZeroConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetZeroConfiguration:
		return soap_out_PointerTo_tds__GetZeroConfiguration(soap, tag, id, (_tds__GetZeroConfiguration *const*)ptr, "tds:GetZeroConfiguration");
	case SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway:
		return soap_out_PointerTo_tds__SetNetworkDefaultGateway(soap, tag, id, (_tds__SetNetworkDefaultGateway *const*)ptr, "tds:SetNetworkDefaultGateway");
	case SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway:
		return soap_out_PointerTo_tds__GetNetworkDefaultGateway(soap, tag, id, (_tds__GetNetworkDefaultGateway *const*)ptr, "tds:GetNetworkDefaultGateway");
	case SOAP_TYPE_PointerTo_tds__SetNetworkProtocols:
		return soap_out_PointerTo_tds__SetNetworkProtocols(soap, tag, id, (_tds__SetNetworkProtocols *const*)ptr, "tds:SetNetworkProtocols");
	case SOAP_TYPE_PointerTo_tds__GetNetworkProtocols:
		return soap_out_PointerTo_tds__GetNetworkProtocols(soap, tag, id, (_tds__GetNetworkProtocols *const*)ptr, "tds:GetNetworkProtocols");
	case SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces:
		return soap_out_PointerTo_tds__SetNetworkInterfaces(soap, tag, id, (_tds__SetNetworkInterfaces *const*)ptr, "tds:SetNetworkInterfaces");
	case SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces:
		return soap_out_PointerTo_tds__GetNetworkInterfaces(soap, tag, id, (_tds__GetNetworkInterfaces *const*)ptr, "tds:GetNetworkInterfaces");
	case SOAP_TYPE_PointerTo_tds__SetDynamicDNS:
		return soap_out_PointerTo_tds__SetDynamicDNS(soap, tag, id, (_tds__SetDynamicDNS *const*)ptr, "tds:SetDynamicDNS");
	case SOAP_TYPE_PointerTo_tds__GetDynamicDNS:
		return soap_out_PointerTo_tds__GetDynamicDNS(soap, tag, id, (_tds__GetDynamicDNS *const*)ptr, "tds:GetDynamicDNS");
	case SOAP_TYPE_PointerTo_tds__SetNTP:
		return soap_out_PointerTo_tds__SetNTP(soap, tag, id, (_tds__SetNTP *const*)ptr, "tds:SetNTP");
	case SOAP_TYPE_PointerTo_tds__GetNTP:
		return soap_out_PointerTo_tds__GetNTP(soap, tag, id, (_tds__GetNTP *const*)ptr, "tds:GetNTP");
	case SOAP_TYPE_PointerTo_tds__SetDNS:
		return soap_out_PointerTo_tds__SetDNS(soap, tag, id, (_tds__SetDNS *const*)ptr, "tds:SetDNS");
	case SOAP_TYPE_PointerTo_tds__GetDNS:
		return soap_out_PointerTo_tds__GetDNS(soap, tag, id, (_tds__GetDNS *const*)ptr, "tds:GetDNS");
	case SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP:
		return soap_out_PointerTo_tds__SetHostnameFromDHCP(soap, tag, id, (_tds__SetHostnameFromDHCP *const*)ptr, "tds:SetHostnameFromDHCP");
	case SOAP_TYPE_PointerTo_tds__SetHostname:
		return soap_out_PointerTo_tds__SetHostname(soap, tag, id, (_tds__SetHostname *const*)ptr, "tds:SetHostname");
	case SOAP_TYPE_PointerTo_tds__GetHostname:
		return soap_out_PointerTo_tds__GetHostname(soap, tag, id, (_tds__GetHostname *const*)ptr, "tds:GetHostname");
	case SOAP_TYPE_PointerTo_tds__SetDPAddresses:
		return soap_out_PointerTo_tds__SetDPAddresses(soap, tag, id, (_tds__SetDPAddresses *const*)ptr, "tds:SetDPAddresses");
	case SOAP_TYPE_PointerTo_tds__GetCapabilities:
		return soap_out_PointerTo_tds__GetCapabilities(soap, tag, id, (_tds__GetCapabilities *const*)ptr, "tds:GetCapabilities");
	case SOAP_TYPE_PointerTo_tds__GetWsdlUrl:
		return soap_out_PointerTo_tds__GetWsdlUrl(soap, tag, id, (_tds__GetWsdlUrl *const*)ptr, "tds:GetWsdlUrl");
	case SOAP_TYPE_PointerTo_tds__SetUser:
		return soap_out_PointerTo_tds__SetUser(soap, tag, id, (_tds__SetUser *const*)ptr, "tds:SetUser");
	case SOAP_TYPE_PointerTo_tds__DeleteUsers:
		return soap_out_PointerTo_tds__DeleteUsers(soap, tag, id, (_tds__DeleteUsers *const*)ptr, "tds:DeleteUsers");
	case SOAP_TYPE_PointerTo_tds__CreateUsers:
		return soap_out_PointerTo_tds__CreateUsers(soap, tag, id, (_tds__CreateUsers *const*)ptr, "tds:CreateUsers");
	case SOAP_TYPE_PointerTo_tds__GetUsers:
		return soap_out_PointerTo_tds__GetUsers(soap, tag, id, (_tds__GetUsers *const*)ptr, "tds:GetUsers");
	case SOAP_TYPE_PointerTo_tds__SetRemoteUser:
		return soap_out_PointerTo_tds__SetRemoteUser(soap, tag, id, (_tds__SetRemoteUser *const*)ptr, "tds:SetRemoteUser");
	case SOAP_TYPE_PointerTo_tds__GetRemoteUser:
		return soap_out_PointerTo_tds__GetRemoteUser(soap, tag, id, (_tds__GetRemoteUser *const*)ptr, "tds:GetRemoteUser");
	case SOAP_TYPE_PointerTo_tds__GetEndpointReference:
		return soap_out_PointerTo_tds__GetEndpointReference(soap, tag, id, (_tds__GetEndpointReference *const*)ptr, "tds:GetEndpointReference");
	case SOAP_TYPE_PointerTo_tds__GetDPAddresses:
		return soap_out_PointerTo_tds__GetDPAddresses(soap, tag, id, (_tds__GetDPAddresses *const*)ptr, "tds:GetDPAddresses");
	case SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode:
		return soap_out_PointerTo_tds__SetRemoteDiscoveryMode(soap, tag, id, (_tds__SetRemoteDiscoveryMode *const*)ptr, "tds:SetRemoteDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode:
		return soap_out_PointerTo_tds__GetRemoteDiscoveryMode(soap, tag, id, (_tds__GetRemoteDiscoveryMode *const*)ptr, "tds:GetRemoteDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__SetDiscoveryMode:
		return soap_out_PointerTo_tds__SetDiscoveryMode(soap, tag, id, (_tds__SetDiscoveryMode *const*)ptr, "tds:SetDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__GetDiscoveryMode:
		return soap_out_PointerTo_tds__GetDiscoveryMode(soap, tag, id, (_tds__GetDiscoveryMode *const*)ptr, "tds:GetDiscoveryMode");
	case SOAP_TYPE_PointerTo_tds__RemoveScopes:
		return soap_out_PointerTo_tds__RemoveScopes(soap, tag, id, (_tds__RemoveScopes *const*)ptr, "tds:RemoveScopes");
	case SOAP_TYPE_PointerTo_tds__AddScopes:
		return soap_out_PointerTo_tds__AddScopes(soap, tag, id, (_tds__AddScopes *const*)ptr, "tds:AddScopes");
	case SOAP_TYPE_PointerTo_tds__SetScopes:
		return soap_out_PointerTo_tds__SetScopes(soap, tag, id, (_tds__SetScopes *const*)ptr, "tds:SetScopes");
	case SOAP_TYPE_PointerTo_tds__GetScopes:
		return soap_out_PointerTo_tds__GetScopes(soap, tag, id, (_tds__GetScopes *const*)ptr, "tds:GetScopes");
	case SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation:
		return soap_out_PointerTo_tds__GetSystemSupportInformation(soap, tag, id, (_tds__GetSystemSupportInformation *const*)ptr, "tds:GetSystemSupportInformation");
	case SOAP_TYPE_PointerTo_tds__GetSystemLog:
		return soap_out_PointerTo_tds__GetSystemLog(soap, tag, id, (_tds__GetSystemLog *const*)ptr, "tds:GetSystemLog");
	case SOAP_TYPE_PointerTo_tds__GetSystemBackup:
		return soap_out_PointerTo_tds__GetSystemBackup(soap, tag, id, (_tds__GetSystemBackup *const*)ptr, "tds:GetSystemBackup");
	case SOAP_TYPE_PointerTo_tds__RestoreSystem:
		return soap_out_PointerTo_tds__RestoreSystem(soap, tag, id, (_tds__RestoreSystem *const*)ptr, "tds:RestoreSystem");
	case SOAP_TYPE_PointerTo_tds__SystemReboot:
		return soap_out_PointerTo_tds__SystemReboot(soap, tag, id, (_tds__SystemReboot *const*)ptr, "tds:SystemReboot");
	case SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware:
		return soap_out_PointerTo_tds__UpgradeSystemFirmware(soap, tag, id, (_tds__UpgradeSystemFirmware *const*)ptr, "tds:UpgradeSystemFirmware");
	case SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault:
		return soap_out_PointerTo_tds__SetSystemFactoryDefault(soap, tag, id, (_tds__SetSystemFactoryDefault *const*)ptr, "tds:SetSystemFactoryDefault");
	case SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime:
		return soap_out_PointerTo_tds__GetSystemDateAndTime(soap, tag, id, (_tds__GetSystemDateAndTime *const*)ptr, "tds:GetSystemDateAndTime");
	case SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime:
		return soap_out_PointerTo_tds__SetSystemDateAndTime(soap, tag, id, (_tds__SetSystemDateAndTime *const*)ptr, "tds:SetSystemDateAndTime");
	case SOAP_TYPE_PointerTo_tds__GetDeviceInformation:
		return soap_out_PointerTo_tds__GetDeviceInformation(soap, tag, id, (_tds__GetDeviceInformation *const*)ptr, "tds:GetDeviceInformation");
	case SOAP_TYPE_PointerTo_tds__GetServiceCapabilities:
		return soap_out_PointerTo_tds__GetServiceCapabilities(soap, tag, id, (_tds__GetServiceCapabilities *const*)ptr, "tds:GetServiceCapabilities");
	case SOAP_TYPE_PointerTo_tds__GetServices:
		return soap_out_PointerTo_tds__GetServices(soap, tag, id, (_tds__GetServices *const*)ptr, "tds:GetServices");
	case SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType:
		return soap_out_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, tag, id, (wsnt__UnacceptableTerminationTimeFaultType *const*)ptr, "wsnt:UnacceptableTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType:
		return soap_out_PointerTowsnt__ResumeFailedFaultType(soap, tag, id, (wsnt__ResumeFailedFaultType *const*)ptr, "wsnt:ResumeFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__PauseFailedFaultType:
		return soap_out_PointerTowsnt__PauseFailedFaultType(soap, tag, id, (wsnt__PauseFailedFaultType *const*)ptr, "wsnt:PauseFailedFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType:
		return soap_out_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, tag, id, (wsnt__UnableToDestroySubscriptionFaultType *const*)ptr, "wsnt:UnableToDestroySubscriptionFaultType");
	case SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse:
		return soap_out_PointerTo_tev__PullMessagesFaultResponse(soap, tag, id, (_tev__PullMessagesFaultResponse *const*)ptr, "tev:PullMessagesFaultResponse");
	case SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType:
		return soap_out_PointerTowsnt__UnableToGetMessagesFaultType(soap, tag, id, (wsnt__UnableToGetMessagesFaultType *const*)ptr, "wsnt:UnableToGetMessagesFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType:
		return soap_out_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, tag, id, (wsnt__UnableToDestroyPullPointFaultType *const*)ptr, "wsnt:UnableToDestroyPullPointFaultType");
	case SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType:
		return soap_out_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, tag, id, (wsnt__NoCurrentMessageOnTopicFaultType *const*)ptr, "wsnt:NoCurrentMessageOnTopicFaultType");
	case SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType:
		return soap_out_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, tag, id, (wsnt__MultipleTopicsSpecifiedFaultType *const*)ptr, "wsnt:MultipleTopicsSpecifiedFaultType");
	case SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType:
		return soap_out_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, tag, id, (wsnt__UnsupportedPolicyRequestFaultType *const*)ptr, "wsnt:UnsupportedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType:
		return soap_out_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, tag, id, (wsnt__UnrecognizedPolicyRequestFaultType *const*)ptr, "wsnt:UnrecognizedPolicyRequestFaultType");
	case SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType:
		return soap_out_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, tag, id, (wsnt__UnacceptableInitialTerminationTimeFaultType *const*)ptr, "wsnt:UnacceptableInitialTerminationTimeFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType:
		return soap_out_PointerTowsnt__TopicNotSupportedFaultType(soap, tag, id, (wsnt__TopicNotSupportedFaultType *const*)ptr, "wsnt:TopicNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType:
		return soap_out_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, tag, id, (wsnt__TopicExpressionDialectUnknownFaultType *const*)ptr, "wsnt:TopicExpressionDialectUnknownFaultType");
	case SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType:
		return soap_out_PointerTowsnt__SubscribeCreationFailedFaultType(soap, tag, id, (wsnt__SubscribeCreationFailedFaultType *const*)ptr, "wsnt:SubscribeCreationFailedFaultType");
	case SOAP_TYPE_PointerTowsrf__ResourceUnknownFaultType:
		return soap_out_PointerTowsrf__ResourceUnknownFaultType(soap, tag, id, (wsrf__ResourceUnknownFaultType *const*)ptr, "wsrf:ResourceUnknownFaultType");
	case SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType:
		return soap_out_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, tag, id, (wsnt__NotifyMessageNotSupportedFaultType *const*)ptr, "wsnt:NotifyMessageNotSupportedFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType:
		return soap_out_PointerTowsnt__InvalidTopicExpressionFaultType(soap, tag, id, (wsnt__InvalidTopicExpressionFaultType *const*)ptr, "wsnt:InvalidTopicExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType:
		return soap_out_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, tag, id, (wsnt__InvalidProducerPropertiesExpressionFaultType *const*)ptr, "wsnt:InvalidProducerPropertiesExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType:
		return soap_out_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, tag, id, (wsnt__InvalidMessageContentExpressionFaultType *const*)ptr, "wsnt:InvalidMessageContentExpressionFaultType");
	case SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType:
		return soap_out_PointerTowsnt__InvalidFilterFaultType(soap, tag, id, (wsnt__InvalidFilterFaultType *const*)ptr, "wsnt:InvalidFilterFaultType");
	case SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType:
		return soap_out_PointerTowsnt__UnableToCreatePullPointFaultType(soap, tag, id, (wsnt__UnableToCreatePullPointFaultType *const*)ptr, "wsnt:UnableToCreatePullPointFaultType");
	case SOAP_TYPE_PointerToxsd__NCName:
		return soap_out_PointerToxsd__NCName(soap, tag, id, (std::string *const*)ptr, "xsd:NCName");
	case SOAP_TYPE_PointerTowstop__ConcreteTopicExpression:
		return soap_out_PointerTowstop__ConcreteTopicExpression(soap, tag, id, (std::string *const*)ptr, "wstop:ConcreteTopicExpression");
	case SOAP_TYPE_PointerToxsd__QName:
		return soap_out_PointerToxsd__QName(soap, tag, id, (std::string *const*)ptr, "xsd:QName");
	case SOAP_TYPE_PointerTowstop__TopicType:
		return soap_out_PointerTowstop__TopicType(soap, tag, id, (wstop__TopicType *const*)ptr, "wstop:TopicType");
	case SOAP_TYPE_PointerTowstop__QueryExpressionType:
		return soap_out_PointerTowstop__QueryExpressionType(soap, tag, id, (wstop__QueryExpressionType *const*)ptr, "wstop:QueryExpressionType");
	case SOAP_TYPE_PointerTott__OSDConfigurationExtension:
		return soap_out_PointerTott__OSDConfigurationExtension(soap, tag, id, (tt__OSDConfigurationExtension *const*)ptr, "tt:OSDConfigurationExtension");
	case SOAP_TYPE_PointerTott__OSDImgConfiguration:
		return soap_out_PointerTott__OSDImgConfiguration(soap, tag, id, (tt__OSDImgConfiguration *const*)ptr, "tt:OSDImgConfiguration");
	case SOAP_TYPE_PointerTott__OSDTextConfiguration:
		return soap_out_PointerTott__OSDTextConfiguration(soap, tag, id, (tt__OSDTextConfiguration *const*)ptr, "tt:OSDTextConfiguration");
	case SOAP_TYPE_PointerTott__OSDPosConfiguration:
		return soap_out_PointerTott__OSDPosConfiguration(soap, tag, id, (tt__OSDPosConfiguration *const*)ptr, "tt:OSDPosConfiguration");
	case SOAP_TYPE_PointerTott__OSDReference:
		return soap_out_PointerTott__OSDReference(soap, tag, id, (tt__OSDReference *const*)ptr, "tt:OSDReference");
	case SOAP_TYPE_PointerTott__MetadataInput:
		return soap_out_PointerTott__MetadataInput(soap, tag, id, (tt__MetadataInput *const*)ptr, "tt:MetadataInput");
	case SOAP_TYPE_PointerTott__SourceIdentification:
		return soap_out_PointerTott__SourceIdentification(soap, tag, id, (tt__SourceIdentification *const*)ptr, "tt:SourceIdentification");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration:
		return soap_out_PointerTott__AnalyticsDeviceEngineConfiguration(soap, tag, id, (tt__AnalyticsDeviceEngineConfiguration *const*)ptr, "tt:AnalyticsDeviceEngineConfiguration");
	case SOAP_TYPE_PointerTott__PTZConfigurationExtension:
		return soap_out_PointerTott__PTZConfigurationExtension(soap, tag, id, (tt__PTZConfigurationExtension *const*)ptr, "tt:PTZConfigurationExtension");
	case SOAP_TYPE_PointerTott__ZoomLimits:
		return soap_out_PointerTott__ZoomLimits(soap, tag, id, (tt__ZoomLimits *const*)ptr, "tt:ZoomLimits");
	case SOAP_TYPE_PointerTott__PanTiltLimits:
		return soap_out_PointerTott__PanTiltLimits(soap, tag, id, (tt__PanTiltLimits *const*)ptr, "tt:PanTiltLimits");
	case SOAP_TYPE_PointerTott__PTZNodeExtension:
		return soap_out_PointerTott__PTZNodeExtension(soap, tag, id, (tt__PTZNodeExtension *const*)ptr, "tt:PTZNodeExtension");
	case SOAP_TYPE_PointerTott__DigitalIdleState:
		return soap_out_PointerTott__DigitalIdleState(soap, tag, id, (tt__DigitalIdleState *const*)ptr, "tt:DigitalIdleState");
	case SOAP_TYPE_PointerTott__NetworkInterfaceExtension:
		return soap_out_PointerTott__NetworkInterfaceExtension(soap, tag, id, (tt__NetworkInterfaceExtension *const*)ptr, "tt:NetworkInterfaceExtension");
	case SOAP_TYPE_PointerTott__IPv6NetworkInterface:
		return soap_out_PointerTott__IPv6NetworkInterface(soap, tag, id, (tt__IPv6NetworkInterface *const*)ptr, "tt:IPv6NetworkInterface");
	case SOAP_TYPE_PointerTott__IPv4NetworkInterface:
		return soap_out_PointerTott__IPv4NetworkInterface(soap, tag, id, (tt__IPv4NetworkInterface *const*)ptr, "tt:IPv4NetworkInterface");
	case SOAP_TYPE_PointerTott__NetworkInterfaceLink:
		return soap_out_PointerTott__NetworkInterfaceLink(soap, tag, id, (tt__NetworkInterfaceLink *const*)ptr, "tt:NetworkInterfaceLink");
	case SOAP_TYPE_PointerTott__NetworkInterfaceInfo:
		return soap_out_PointerTott__NetworkInterfaceInfo(soap, tag, id, (tt__NetworkInterfaceInfo *const*)ptr, "tt:NetworkInterfaceInfo");
	case SOAP_TYPE_PointerTott__VideoOutputExtension:
		return soap_out_PointerTott__VideoOutputExtension(soap, tag, id, (tt__VideoOutputExtension *const*)ptr, "tt:VideoOutputExtension");
	case SOAP_TYPE_PointerTott__Layout:
		return soap_out_PointerTott__Layout(soap, tag, id, (tt__Layout *const*)ptr, "tt:Layout");
	case SOAP_TYPE_PointerTott__MetadataConfigurationExtension:
		return soap_out_PointerTott__MetadataConfigurationExtension(soap, tag, id, (tt__MetadataConfigurationExtension *const*)ptr, "tt:MetadataConfigurationExtension");
	case SOAP_TYPE_PointerTott__EventSubscription:
		return soap_out_PointerTott__EventSubscription(soap, tag, id, (tt__EventSubscription *const*)ptr, "tt:EventSubscription");
	case SOAP_TYPE_PointerTott__PTZFilter:
		return soap_out_PointerTott__PTZFilter(soap, tag, id, (tt__PTZFilter *const*)ptr, "tt:PTZFilter");
	case SOAP_TYPE_PointerTott__RuleEngineConfiguration:
		return soap_out_PointerTott__RuleEngineConfiguration(soap, tag, id, (tt__RuleEngineConfiguration *const*)ptr, "tt:RuleEngineConfiguration");
	case SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration:
		return soap_out_PointerTott__AnalyticsEngineConfiguration(soap, tag, id, (tt__AnalyticsEngineConfiguration *const*)ptr, "tt:AnalyticsEngineConfiguration");
	case SOAP_TYPE_PointerTott__VideoRateControl2:
		return soap_out_PointerTott__VideoRateControl2(soap, tag, id, (tt__VideoRateControl2 *const*)ptr, "tt:VideoRateControl2");
	case SOAP_TYPE_PointerTott__MulticastConfiguration:
		return soap_out_PointerTott__MulticastConfiguration(soap, tag, id, (tt__MulticastConfiguration *const*)ptr, "tt:MulticastConfiguration");
	case SOAP_TYPE_PointerTott__H264Configuration:
		return soap_out_PointerTott__H264Configuration(soap, tag, id, (tt__H264Configuration *const*)ptr, "tt:H264Configuration");
	case SOAP_TYPE_PointerTott__Mpeg4Configuration:
		return soap_out_PointerTott__Mpeg4Configuration(soap, tag, id, (tt__Mpeg4Configuration *const*)ptr, "tt:Mpeg4Configuration");
	case SOAP_TYPE_PointerTott__VideoRateControl:
		return soap_out_PointerTott__VideoRateControl(soap, tag, id, (tt__VideoRateControl *const*)ptr, "tt:VideoRateControl");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension:
		return soap_out_PointerTott__VideoSourceConfigurationExtension(soap, tag, id, (tt__VideoSourceConfigurationExtension *const*)ptr, "tt:VideoSourceConfigurationExtension");
	case SOAP_TYPE_PointerTott__IntRectangle:
		return soap_out_PointerTott__IntRectangle(soap, tag, id, (tt__IntRectangle *const*)ptr, "tt:IntRectangle");
	case SOAP_TYPE_PointerTott__VideoSourceExtension:
		return soap_out_PointerTott__VideoSourceExtension(soap, tag, id, (tt__VideoSourceExtension *const*)ptr, "tt:VideoSourceExtension");
	case SOAP_TYPE_PointerTott__ImagingSettings:
		return soap_out_PointerTott__ImagingSettings(soap, tag, id, (tt__ImagingSettings *const*)ptr, "tt:ImagingSettings");
	case SOAP_TYPE_PointerTott__MessageDescription:
		return soap_out_PointerTott__MessageDescription(soap, tag, id, (tt__MessageDescription *const*)ptr, "tt:MessageDescription");
	case SOAP_TYPE_PointerTowsa__ServiceNameType:
		return soap_out_PointerTowsa__ServiceNameType(soap, tag, id, (wsa__ServiceNameType *const*)ptr, "wsa:ServiceNameType");
	case SOAP_TYPE_PointerTowsa__AttributedQName:
		return soap_out_PointerTowsa__AttributedQName(soap, tag, id, (wsa__AttributedQName *const*)ptr, "wsa:AttributedQName");
	case SOAP_TYPE_PointerTowsa__ReferenceParametersType:
		return soap_out_PointerTowsa__ReferenceParametersType(soap, tag, id, (wsa__ReferenceParametersType *const*)ptr, "wsa:ReferenceParametersType");
	case SOAP_TYPE_PointerTowsa__ReferencePropertiesType:
		return soap_out_PointerTowsa__ReferencePropertiesType(soap, tag, id, (wsa__ReferencePropertiesType *const*)ptr, "wsa:ReferencePropertiesType");
	case SOAP_TYPE_PointerTowsa__AttributedURI:
		return soap_out_PointerTowsa__AttributedURI(soap, tag, id, (wsa__AttributedURI *const*)ptr, "wsa:AttributedURI");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTowsd__SigType:
		return soap_out_PointerTowsd__SigType(soap, tag, id, (wsd__SigType *const*)ptr, "wsd:SigType");
	case SOAP_TYPE_PointerTowsd__ResolveMatchType:
		return soap_out_PointerTowsd__ResolveMatchType(soap, tag, id, (wsd__ResolveMatchType *const*)ptr, "wsd:ResolveMatchType");
	case SOAP_TYPE_PointerTowsd__ProbeMatchType:
		return soap_out_PointerTowsd__ProbeMatchType(soap, tag, id, (wsd__ProbeMatchType *const*)ptr, "wsd:ProbeMatchType");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_out_PointerTounsignedInt(soap, tag, id, (unsigned int *const*)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_PointerTowsd__UriListType:
		return soap_out_PointerTowsd__UriListType(soap, tag, id, (std::string *const*)ptr, "wsd:UriListType");
	case SOAP_TYPE_PointerTowsd__ScopesType:
		return soap_out_PointerTowsd__ScopesType(soap, tag, id, (wsd__ScopesType *const*)ptr, "wsd:ScopesType");
	case SOAP_TYPE_PointerTowsd__QNameListType:
		return soap_out_PointerTowsd__QNameListType(soap, tag, id, (std::string *const*)ptr, "xsd:QName");
	case SOAP_TYPE_PointerTowsa__EndpointReferenceType:
		return soap_out_PointerTowsa__EndpointReferenceType(soap, tag, id, (wsa__EndpointReferenceType *const*)ptr, "wsa:EndpointReferenceType");
	case SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy:
		return soap_out_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, id, (_tev__CreatePullPointSubscription_SubscriptionPolicy *const*)ptr, "tev:CreatePullPointSubscription-SubscriptionPolicy");
	case SOAP_TYPE_PointerTotev__Capabilities:
		return soap_out_PointerTotev__Capabilities(soap, tag, id, (tev__Capabilities *const*)ptr, "tev:Capabilities");
	case SOAP_TYPE_PointerTowstop__Documentation:
		return soap_out_PointerTowstop__Documentation(soap, tag, id, (wstop__Documentation *const*)ptr, "wstop:Documentation");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause:
		return soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, tag, id, (_wsrfbf__BaseFaultType_FaultCause *const*)ptr, "wsrfbf:BaseFaultType-FaultCause");
	case SOAP_TYPE_PointerTo_xml__lang:
		return soap_out_PointerTo_xml__lang(soap, tag, id, (std::string *const*)ptr, "xml:lang");
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode:
		return soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, tag, id, (_wsrfbf__BaseFaultType_ErrorCode *const*)ptr, "wsrfbf:BaseFaultType-ErrorCode");
	case SOAP_TYPE_PointerToxsd__nonNegativeInteger:
		return soap_out_PointerToxsd__nonNegativeInteger(soap, tag, id, (std::string *const*)ptr, "xsd:nonNegativeInteger");
	case SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy:
		return soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, tag, id, (_wsnt__Subscribe_SubscriptionPolicy *const*)ptr, "wsnt:Subscribe-SubscriptionPolicy");
	case SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType:
		return soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, tag, id, (std::string *const*)ptr, "wsnt:AbsoluteOrRelativeTimeType");
	case SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType:
		return soap_out_PointerTowsnt__SubscriptionPolicyType(soap, tag, id, (wsnt__SubscriptionPolicyType *const*)ptr, "wsnt:SubscriptionPolicyType");
	case SOAP_TYPE_PointerTowstop__TopicSetType:
		return soap_out_PointerTowstop__TopicSetType(soap, tag, id, (wstop__TopicSetType *const*)ptr, "wstop:TopicSetType");
	case SOAP_TYPE_PointerTowsnt__TopicExpressionTypeCustom:
		return soap_out_PointerTowsnt__TopicExpressionTypeCustom(soap, tag, id, (wsnt__TopicExpressionTypeCustom *const*)ptr, "wsnt:TopicExpressionTypeCustom");
	case SOAP_TYPE_PointerTowsa5__EndpointReferenceType:
		return soap_out_PointerTowsa5__EndpointReferenceType(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:EndpointReferenceType");
	case SOAP_TYPE_PointerTott__PropertyOperation:
		return soap_out_PointerTott__PropertyOperation(soap, tag, id, (tt__PropertyOperation *const*)ptr, "tt:PropertyOperation");
	case SOAP_TYPE_PointerTott__MessageExtension:
		return soap_out_PointerTott__MessageExtension(soap, tag, id, (tt__MessageExtension *const*)ptr, "tt:MessageExtension");
	case SOAP_TYPE_PointerTott__LocalOrientation:
		return soap_out_PointerTott__LocalOrientation(soap, tag, id, (tt__LocalOrientation *const*)ptr, "tt:LocalOrientation");
	case SOAP_TYPE_PointerTott__LocalLocation:
		return soap_out_PointerTott__LocalLocation(soap, tag, id, (tt__LocalLocation *const*)ptr, "tt:LocalLocation");
	case SOAP_TYPE_PointerTott__GeoOrientation:
		return soap_out_PointerTott__GeoOrientation(soap, tag, id, (tt__GeoOrientation *const*)ptr, "tt:GeoOrientation");
	case SOAP_TYPE_PointerTott__GeoLocation:
		return soap_out_PointerTott__GeoLocation(soap, tag, id, (tt__GeoLocation *const*)ptr, "tt:GeoLocation");
	case SOAP_TYPE_PointerTodouble:
		return soap_out_PointerTodouble(soap, tag, id, (double *const*)ptr, "xsd:double");
	case SOAP_TYPE_PointerTott__TransformationExtension:
		return soap_out_PointerTott__TransformationExtension(soap, tag, id, (tt__TransformationExtension *const*)ptr, "tt:TransformationExtension");
	case SOAP_TYPE_PointerTott__MoveStatus:
		return soap_out_PointerTott__MoveStatus(soap, tag, id, (tt__MoveStatus *const*)ptr, "tt:MoveStatus");
	case SOAP_TYPE_PointerTott__PTZMoveStatus:
		return soap_out_PointerTott__PTZMoveStatus(soap, tag, id, (tt__PTZMoveStatus *const*)ptr, "tt:PTZMoveStatus");
	case SOAP_TYPE_PointerTott__StorageReferencePathExtension:
		return soap_out_PointerTott__StorageReferencePathExtension(soap, tag, id, (tt__StorageReferencePathExtension *const*)ptr, "tt:StorageReferencePathExtension");
	case SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension:
		return soap_out_PointerTott__ArrayOfFileProgressExtension(soap, tag, id, (tt__ArrayOfFileProgressExtension *const*)ptr, "tt:ArrayOfFileProgressExtension");
	case SOAP_TYPE_PointerTott__FileProgress:
		return soap_out_PointerTott__FileProgress(soap, tag, id, (tt__FileProgress *const*)ptr, "tt:FileProgress");
	case SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension:
		return soap_out_PointerTott__OSDConfigurationOptionsExtension(soap, tag, id, (tt__OSDConfigurationOptionsExtension *const*)ptr, "tt:OSDConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__OSDImgOptions:
		return soap_out_PointerTott__OSDImgOptions(soap, tag, id, (tt__OSDImgOptions *const*)ptr, "tt:OSDImgOptions");
	case SOAP_TYPE_PointerTott__OSDTextOptions:
		return soap_out_PointerTott__OSDTextOptions(soap, tag, id, (tt__OSDTextOptions *const*)ptr, "tt:OSDTextOptions");
	case SOAP_TYPE_PointerTott__MaximumNumberOfOSDs:
		return soap_out_PointerTott__MaximumNumberOfOSDs(soap, tag, id, (tt__MaximumNumberOfOSDs *const*)ptr, "tt:MaximumNumberOfOSDs");
	case SOAP_TYPE_PointerTott__OSDImgOptionsExtension:
		return soap_out_PointerTott__OSDImgOptionsExtension(soap, tag, id, (tt__OSDImgOptionsExtension *const*)ptr, "tt:OSDImgOptionsExtension");
	case SOAP_TYPE_PointerTott__OSDTextOptionsExtension:
		return soap_out_PointerTott__OSDTextOptionsExtension(soap, tag, id, (tt__OSDTextOptionsExtension *const*)ptr, "tt:OSDTextOptionsExtension");
	case SOAP_TYPE_PointerTott__OSDColorOptions:
		return soap_out_PointerTott__OSDColorOptions(soap, tag, id, (tt__OSDColorOptions *const*)ptr, "tt:OSDColorOptions");
	case SOAP_TYPE_PointerTott__OSDColorOptionsExtension:
		return soap_out_PointerTott__OSDColorOptionsExtension(soap, tag, id, (tt__OSDColorOptionsExtension *const*)ptr, "tt:OSDColorOptionsExtension");
	case SOAP_TYPE_PointerTott__ColorOptions:
		return soap_out_PointerTott__ColorOptions(soap, tag, id, (tt__ColorOptions *const*)ptr, "tt:ColorOptions");
	case SOAP_TYPE_PointerTott__ColorspaceRange:
		return soap_out_PointerTott__ColorspaceRange(soap, tag, id, (tt__ColorspaceRange *const*)ptr, "tt:ColorspaceRange");
	case SOAP_TYPE_PointerTott__OSDImgConfigurationExtension:
		return soap_out_PointerTott__OSDImgConfigurationExtension(soap, tag, id, (tt__OSDImgConfigurationExtension *const*)ptr, "tt:OSDImgConfigurationExtension");
	case SOAP_TYPE_PointerTott__OSDTextConfigurationExtension:
		return soap_out_PointerTott__OSDTextConfigurationExtension(soap, tag, id, (tt__OSDTextConfigurationExtension *const*)ptr, "tt:OSDTextConfigurationExtension");
	case SOAP_TYPE_PointerTott__OSDColor:
		return soap_out_PointerTott__OSDColor(soap, tag, id, (tt__OSDColor *const*)ptr, "tt:OSDColor");
	case SOAP_TYPE_PointerTott__Color:
		return soap_out_PointerTott__Color(soap, tag, id, (tt__Color *const*)ptr, "tt:Color");
	case SOAP_TYPE_PointerTott__OSDPosConfigurationExtension:
		return soap_out_PointerTott__OSDPosConfigurationExtension(soap, tag, id, (tt__OSDPosConfigurationExtension *const*)ptr, "tt:OSDPosConfigurationExtension");
	case SOAP_TYPE_PointerTott__ProfileStatusExtension:
		return soap_out_PointerTott__ProfileStatusExtension(soap, tag, id, (tt__ProfileStatusExtension *const*)ptr, "tt:ProfileStatusExtension");
	case SOAP_TYPE_PointerTott__ActiveConnection:
		return soap_out_PointerTott__ActiveConnection(soap, tag, id, (tt__ActiveConnection *const*)ptr, "tt:ActiveConnection");
	case SOAP_TYPE_PointerTott__AudioClassDescriptorExtension:
		return soap_out_PointerTott__AudioClassDescriptorExtension(soap, tag, id, (tt__AudioClassDescriptorExtension *const*)ptr, "tt:AudioClassDescriptorExtension");
	case SOAP_TYPE_PointerTott__AudioClassCandidate:
		return soap_out_PointerTott__AudioClassCandidate(soap, tag, id, (tt__AudioClassCandidate *const*)ptr, "tt:AudioClassCandidate");
	case SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension:
		return soap_out_PointerTott__ActionEngineEventPayloadExtension(soap, tag, id, (tt__ActionEngineEventPayloadExtension *const*)ptr, "tt:ActionEngineEventPayloadExtension");
	case SOAP_TYPE_PointerToSOAP_ENV__Envelope:
		return soap_out_PointerToSOAP_ENV__Envelope(soap, tag, id, (std::string *const*)ptr, "SOAP-ENV:Envelope");
	case SOAP_TYPE_PointerTott__AnalyticsState:
		return soap_out_PointerTott__AnalyticsState(soap, tag, id, (tt__AnalyticsState *const*)ptr, "tt:AnalyticsState");
	case SOAP_TYPE_PointerTott__MetadataInputExtension:
		return soap_out_PointerTott__MetadataInputExtension(soap, tag, id, (tt__MetadataInputExtension *const*)ptr, "tt:MetadataInputExtension");
	case SOAP_TYPE_PointerTott__SourceIdentificationExtension:
		return soap_out_PointerTott__SourceIdentificationExtension(soap, tag, id, (tt__SourceIdentificationExtension *const*)ptr, "tt:SourceIdentificationExtension");
	case SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension:
		return soap_out_PointerTott__AnalyticsEngineInputInfoExtension(soap, tag, id, (tt__AnalyticsEngineInputInfoExtension *const*)ptr, "tt:AnalyticsEngineInputInfoExtension");
	case SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo:
		return soap_out_PointerTott__AnalyticsEngineInputInfo(soap, tag, id, (tt__AnalyticsEngineInputInfo *const*)ptr, "tt:AnalyticsEngineInputInfo");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension:
		return soap_out_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, tag, id, (tt__AnalyticsDeviceEngineConfigurationExtension *const*)ptr, "tt:AnalyticsDeviceEngineConfigurationExtension");
	case SOAP_TYPE_PointerTott__EngineConfiguration:
		return soap_out_PointerTott__EngineConfiguration(soap, tag, id, (tt__EngineConfiguration *const*)ptr, "tt:EngineConfiguration");
	case SOAP_TYPE_PointerTott__RecordingJobConfiguration:
		return soap_out_PointerTott__RecordingJobConfiguration(soap, tag, id, (tt__RecordingJobConfiguration *const*)ptr, "tt:RecordingJobConfiguration");
	case SOAP_TYPE_PointerTott__RecordingJobStateTrack:
		return soap_out_PointerTott__RecordingJobStateTrack(soap, tag, id, (tt__RecordingJobStateTrack *const*)ptr, "tt:RecordingJobStateTrack");
	case SOAP_TYPE_PointerTott__RecordingJobStateTracks:
		return soap_out_PointerTott__RecordingJobStateTracks(soap, tag, id, (tt__RecordingJobStateTracks *const*)ptr, "tt:RecordingJobStateTracks");
	case SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension:
		return soap_out_PointerTott__RecordingJobStateInformationExtension(soap, tag, id, (tt__RecordingJobStateInformationExtension *const*)ptr, "tt:RecordingJobStateInformationExtension");
	case SOAP_TYPE_PointerTott__RecordingJobStateSource:
		return soap_out_PointerTott__RecordingJobStateSource(soap, tag, id, (tt__RecordingJobStateSource *const*)ptr, "tt:RecordingJobStateSource");
	case SOAP_TYPE_PointerTott__RecordingJobSourceExtension:
		return soap_out_PointerTott__RecordingJobSourceExtension(soap, tag, id, (tt__RecordingJobSourceExtension *const*)ptr, "tt:RecordingJobSourceExtension");
	case SOAP_TYPE_PointerTott__RecordingJobTrack:
		return soap_out_PointerTott__RecordingJobTrack(soap, tag, id, (tt__RecordingJobTrack *const*)ptr, "tt:RecordingJobTrack");
	case SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension:
		return soap_out_PointerTott__RecordingJobConfigurationExtension(soap, tag, id, (tt__RecordingJobConfigurationExtension *const*)ptr, "tt:RecordingJobConfigurationExtension");
	case SOAP_TYPE_PointerTott__RecordingJobSource:
		return soap_out_PointerTott__RecordingJobSource(soap, tag, id, (tt__RecordingJobSource *const*)ptr, "tt:RecordingJobSource");
	case SOAP_TYPE_PointerTott__TrackConfiguration:
		return soap_out_PointerTott__TrackConfiguration(soap, tag, id, (tt__TrackConfiguration *const*)ptr, "tt:TrackConfiguration");
	case SOAP_TYPE_PointerTott__GetTracksResponseItem:
		return soap_out_PointerTott__GetTracksResponseItem(soap, tag, id, (tt__GetTracksResponseItem *const*)ptr, "tt:GetTracksResponseItem");
	case SOAP_TYPE_PointerTott__GetTracksResponseList:
		return soap_out_PointerTott__GetTracksResponseList(soap, tag, id, (tt__GetTracksResponseList *const*)ptr, "tt:GetTracksResponseList");
	case SOAP_TYPE_PointerTott__RecordingConfiguration:
		return soap_out_PointerTott__RecordingConfiguration(soap, tag, id, (tt__RecordingConfiguration *const*)ptr, "tt:RecordingConfiguration");
	case SOAP_TYPE_PointerTott__TrackAttributesExtension:
		return soap_out_PointerTott__TrackAttributesExtension(soap, tag, id, (tt__TrackAttributesExtension *const*)ptr, "tt:TrackAttributesExtension");
	case SOAP_TYPE_PointerTott__MetadataAttributes:
		return soap_out_PointerTott__MetadataAttributes(soap, tag, id, (tt__MetadataAttributes *const*)ptr, "tt:MetadataAttributes");
	case SOAP_TYPE_PointerTott__AudioAttributes:
		return soap_out_PointerTott__AudioAttributes(soap, tag, id, (tt__AudioAttributes *const*)ptr, "tt:AudioAttributes");
	case SOAP_TYPE_PointerTott__VideoAttributes:
		return soap_out_PointerTott__VideoAttributes(soap, tag, id, (tt__VideoAttributes *const*)ptr, "tt:VideoAttributes");
	case SOAP_TYPE_PointerTott__TrackAttributes:
		return soap_out_PointerTott__TrackAttributes(soap, tag, id, (tt__TrackAttributes *const*)ptr, "tt:TrackAttributes");
	case SOAP_TYPE_PointerTott__TrackInformation:
		return soap_out_PointerTott__TrackInformation(soap, tag, id, (tt__TrackInformation *const*)ptr, "tt:TrackInformation");
	case SOAP_TYPE_PointerTott__RecordingSourceInformation:
		return soap_out_PointerTott__RecordingSourceInformation(soap, tag, id, (tt__RecordingSourceInformation *const*)ptr, "tt:RecordingSourceInformation");
	case SOAP_TYPE_PointerTott__FindMetadataResult:
		return soap_out_PointerTott__FindMetadataResult(soap, tag, id, (tt__FindMetadataResult *const*)ptr, "tt:FindMetadataResult");
	case SOAP_TYPE_PointerTott__FindPTZPositionResult:
		return soap_out_PointerTott__FindPTZPositionResult(soap, tag, id, (tt__FindPTZPositionResult *const*)ptr, "tt:FindPTZPositionResult");
	case SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType:
		return soap_out_PointerTowsnt__NotificationMessageHolderType(soap, tag, id, (wsnt__NotificationMessageHolderType *const*)ptr, "wsnt:NotificationMessageHolderType");
	case SOAP_TYPE_PointerTott__FindEventResult:
		return soap_out_PointerTott__FindEventResult(soap, tag, id, (tt__FindEventResult *const*)ptr, "tt:FindEventResult");
	case SOAP_TYPE_PointerTott__RecordingInformation:
		return soap_out_PointerTott__RecordingInformation(soap, tag, id, (tt__RecordingInformation *const*)ptr, "tt:RecordingInformation");
	case SOAP_TYPE_PointerTott__SearchScopeExtension:
		return soap_out_PointerTott__SearchScopeExtension(soap, tag, id, (tt__SearchScopeExtension *const*)ptr, "tt:SearchScopeExtension");
	case SOAP_TYPE_PointerTott__XPathExpression:
		return soap_out_PointerTott__XPathExpression(soap, tag, id, (std::string *const*)ptr, "tt:XPathExpression");
	case SOAP_TYPE_PointerTott__SourceReference:
		return soap_out_PointerTott__SourceReference(soap, tag, id, (tt__SourceReference *const*)ptr, "tt:SourceReference");
	case SOAP_TYPE_PointerTott__StreamSetup:
		return soap_out_PointerTott__StreamSetup(soap, tag, id, (tt__StreamSetup *const*)ptr, "tt:StreamSetup");
	case SOAP_TYPE_PointerTott__ReceiverConfiguration:
		return soap_out_PointerTott__ReceiverConfiguration(soap, tag, id, (tt__ReceiverConfiguration *const*)ptr, "tt:ReceiverConfiguration");
	case SOAP_TYPE_PointerTott__PaneOptionExtension:
		return soap_out_PointerTott__PaneOptionExtension(soap, tag, id, (tt__PaneOptionExtension *const*)ptr, "tt:PaneOptionExtension");
	case SOAP_TYPE_PointerTott__LayoutOptionsExtension:
		return soap_out_PointerTott__LayoutOptionsExtension(soap, tag, id, (tt__LayoutOptionsExtension *const*)ptr, "tt:LayoutOptionsExtension");
	case SOAP_TYPE_PointerTott__PaneLayoutOptions:
		return soap_out_PointerTott__PaneLayoutOptions(soap, tag, id, (tt__PaneLayoutOptions *const*)ptr, "tt:PaneLayoutOptions");
	case SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions:
		return soap_out_PointerTott__VideoDecoderConfigurationOptions(soap, tag, id, (tt__VideoDecoderConfigurationOptions *const*)ptr, "tt:VideoDecoderConfigurationOptions");
	case SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions:
		return soap_out_PointerTott__AudioDecoderConfigurationOptions(soap, tag, id, (tt__AudioDecoderConfigurationOptions *const*)ptr, "tt:AudioDecoderConfigurationOptions");
	case SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions:
		return soap_out_PointerTott__AudioEncoderConfigurationOptions(soap, tag, id, (tt__AudioEncoderConfigurationOptions *const*)ptr, "tt:AudioEncoderConfigurationOptions");
	case SOAP_TYPE_PointerTott__LayoutExtension:
		return soap_out_PointerTott__LayoutExtension(soap, tag, id, (tt__LayoutExtension *const*)ptr, "tt:LayoutExtension");
	case SOAP_TYPE_PointerTott__PaneLayout:
		return soap_out_PointerTott__PaneLayout(soap, tag, id, (tt__PaneLayout *const*)ptr, "tt:PaneLayout");
	case SOAP_TYPE_PointerTott__Transformation:
		return soap_out_PointerTott__Transformation(soap, tag, id, (tt__Transformation *const*)ptr, "tt:Transformation");
	case SOAP_TYPE_PointerTott__MotionExpression:
		return soap_out_PointerTott__MotionExpression(soap, tag, id, (tt__MotionExpression *const*)ptr, "tt:MotionExpression");
	case SOAP_TYPE_PointerTott__PolylineArray:
		return soap_out_PointerTott__PolylineArray(soap, tag, id, (tt__PolylineArray *const*)ptr, "tt:PolylineArray");
	case SOAP_TYPE_PointerTott__PolylineArrayExtension:
		return soap_out_PointerTott__PolylineArrayExtension(soap, tag, id, (tt__PolylineArrayExtension *const*)ptr, "tt:PolylineArrayExtension");
	case SOAP_TYPE_PointerTott__Polyline:
		return soap_out_PointerTott__Polyline(soap, tag, id, (tt__Polyline *const*)ptr, "tt:Polyline");
	case SOAP_TYPE_PointerTott__Polygon:
		return soap_out_PointerTott__Polygon(soap, tag, id, (tt__Polygon *const*)ptr, "tt:Polygon");
	case SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension:
		return soap_out_PointerTott__SupportedAnalyticsModulesExtension(soap, tag, id, (tt__SupportedAnalyticsModulesExtension *const*)ptr, "tt:SupportedAnalyticsModulesExtension");
	case SOAP_TYPE_PointerTott__SupportedRulesExtension:
		return soap_out_PointerTott__SupportedRulesExtension(soap, tag, id, (tt__SupportedRulesExtension *const*)ptr, "tt:SupportedRulesExtension");
	case SOAP_TYPE_PointerTott__ConfigDescription:
		return soap_out_PointerTott__ConfigDescription(soap, tag, id, (tt__ConfigDescription *const*)ptr, "tt:ConfigDescription");
	case SOAP_TYPE_PointerToxsd__integer:
		return soap_out_PointerToxsd__integer(soap, tag, id, (std::string *const*)ptr, "xsd:integer");
	case SOAP_TYPE_PointerTott__ConfigDescriptionExtension:
		return soap_out_PointerTott__ConfigDescriptionExtension(soap, tag, id, (tt__ConfigDescriptionExtension *const*)ptr, "tt:ConfigDescriptionExtension");
	case SOAP_TYPE_PointerTott__ItemList:
		return soap_out_PointerTott__ItemList(soap, tag, id, (tt__ItemList *const*)ptr, "tt:ItemList");
	case SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension:
		return soap_out_PointerTott__RuleEngineConfigurationExtension(soap, tag, id, (tt__RuleEngineConfigurationExtension *const*)ptr, "tt:RuleEngineConfigurationExtension");
	case SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension:
		return soap_out_PointerTott__AnalyticsEngineConfigurationExtension(soap, tag, id, (tt__AnalyticsEngineConfigurationExtension *const*)ptr, "tt:AnalyticsEngineConfigurationExtension");
	case SOAP_TYPE_PointerTott__Config:
		return soap_out_PointerTott__Config(soap, tag, id, (tt__Config *const*)ptr, "tt:Config");
	case SOAP_TYPE_PointerTott__Vector:
		return soap_out_PointerTott__Vector(soap, tag, id, (tt__Vector *const*)ptr, "tt:Vector");
	case SOAP_TYPE_PointerTott__ItemListDescriptionExtension:
		return soap_out_PointerTott__ItemListDescriptionExtension(soap, tag, id, (tt__ItemListDescriptionExtension *const*)ptr, "tt:ItemListDescriptionExtension");
	case SOAP_TYPE_PointerTott__MessageDescriptionExtension:
		return soap_out_PointerTott__MessageDescriptionExtension(soap, tag, id, (tt__MessageDescriptionExtension *const*)ptr, "tt:MessageDescriptionExtension");
	case SOAP_TYPE_PointerTott__ItemListDescription:
		return soap_out_PointerTott__ItemListDescription(soap, tag, id, (tt__ItemListDescription *const*)ptr, "tt:ItemListDescription");
	case SOAP_TYPE_PointerTott__ItemListExtension:
		return soap_out_PointerTott__ItemListExtension(soap, tag, id, (tt__ItemListExtension *const*)ptr, "tt:ItemListExtension");
	case SOAP_TYPE_PointerTott__FocusOptions20Extension:
		return soap_out_PointerTott__FocusOptions20Extension(soap, tag, id, (tt__FocusOptions20Extension *const*)ptr, "tt:FocusOptions20Extension");
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension:
		return soap_out_PointerTott__WhiteBalanceOptions20Extension(soap, tag, id, (tt__WhiteBalanceOptions20Extension *const*)ptr, "tt:WhiteBalanceOptions20Extension");
	case SOAP_TYPE_PointerTott__FocusConfiguration20Extension:
		return soap_out_PointerTott__FocusConfiguration20Extension(soap, tag, id, (tt__FocusConfiguration20Extension *const*)ptr, "tt:FocusConfiguration20Extension");
	case SOAP_TYPE_PointerTott__WhiteBalance20Extension:
		return soap_out_PointerTott__WhiteBalance20Extension(soap, tag, id, (tt__WhiteBalance20Extension *const*)ptr, "tt:WhiteBalance20Extension");
	case SOAP_TYPE_PointerTott__RelativeFocusOptions20:
		return soap_out_PointerTott__RelativeFocusOptions20(soap, tag, id, (tt__RelativeFocusOptions20 *const*)ptr, "tt:RelativeFocusOptions20");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension:
		return soap_out_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, tag, id, (tt__IrCutFilterAutoAdjustmentOptionsExtension *const*)ptr, "tt:IrCutFilterAutoAdjustmentOptionsExtension");
	case SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension:
		return soap_out_PointerTott__ImageStabilizationOptionsExtension(soap, tag, id, (tt__ImageStabilizationOptionsExtension *const*)ptr, "tt:ImageStabilizationOptionsExtension");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension4:
		return soap_out_PointerTott__ImagingOptions20Extension4(soap, tag, id, (tt__ImagingOptions20Extension4 *const*)ptr, "tt:ImagingOptions20Extension4");
	case SOAP_TYPE_PointerTott__NoiseReductionOptions:
		return soap_out_PointerTott__NoiseReductionOptions(soap, tag, id, (tt__NoiseReductionOptions *const*)ptr, "tt:NoiseReductionOptions");
	case SOAP_TYPE_PointerTott__DefoggingOptions:
		return soap_out_PointerTott__DefoggingOptions(soap, tag, id, (tt__DefoggingOptions *const*)ptr, "tt:DefoggingOptions");
	case SOAP_TYPE_PointerTott__ToneCompensationOptions:
		return soap_out_PointerTott__ToneCompensationOptions(soap, tag, id, (tt__ToneCompensationOptions *const*)ptr, "tt:ToneCompensationOptions");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension3:
		return soap_out_PointerTott__ImagingOptions20Extension3(soap, tag, id, (tt__ImagingOptions20Extension3 *const*)ptr, "tt:ImagingOptions20Extension3");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions:
		return soap_out_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, tag, id, (tt__IrCutFilterAutoAdjustmentOptions *const*)ptr, "tt:IrCutFilterAutoAdjustmentOptions");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension2:
		return soap_out_PointerTott__ImagingOptions20Extension2(soap, tag, id, (tt__ImagingOptions20Extension2 *const*)ptr, "tt:ImagingOptions20Extension2");
	case SOAP_TYPE_PointerTott__ImageStabilizationOptions:
		return soap_out_PointerTott__ImageStabilizationOptions(soap, tag, id, (tt__ImageStabilizationOptions *const*)ptr, "tt:ImageStabilizationOptions");
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension:
		return soap_out_PointerTott__ImagingOptions20Extension(soap, tag, id, (tt__ImagingOptions20Extension *const*)ptr, "tt:ImagingOptions20Extension");
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions20:
		return soap_out_PointerTott__WhiteBalanceOptions20(soap, tag, id, (tt__WhiteBalanceOptions20 *const*)ptr, "tt:WhiteBalanceOptions20");
	case SOAP_TYPE_PointerTott__WideDynamicRangeOptions20:
		return soap_out_PointerTott__WideDynamicRangeOptions20(soap, tag, id, (tt__WideDynamicRangeOptions20 *const*)ptr, "tt:WideDynamicRangeOptions20");
	case SOAP_TYPE_PointerTott__FocusOptions20:
		return soap_out_PointerTott__FocusOptions20(soap, tag, id, (tt__FocusOptions20 *const*)ptr, "tt:FocusOptions20");
	case SOAP_TYPE_PointerTott__ExposureOptions20:
		return soap_out_PointerTott__ExposureOptions20(soap, tag, id, (tt__ExposureOptions20 *const*)ptr, "tt:ExposureOptions20");
	case SOAP_TYPE_PointerTott__BacklightCompensationOptions20:
		return soap_out_PointerTott__BacklightCompensationOptions20(soap, tag, id, (tt__BacklightCompensationOptions20 *const*)ptr, "tt:BacklightCompensationOptions20");
	case SOAP_TYPE_PointerTott__DefoggingExtension:
		return soap_out_PointerTott__DefoggingExtension(soap, tag, id, (tt__DefoggingExtension *const*)ptr, "tt:DefoggingExtension");
	case SOAP_TYPE_PointerTott__ToneCompensationExtension:
		return soap_out_PointerTott__ToneCompensationExtension(soap, tag, id, (tt__ToneCompensationExtension *const*)ptr, "tt:ToneCompensationExtension");
	case SOAP_TYPE_PointerTott__ExposurePriority:
		return soap_out_PointerTott__ExposurePriority(soap, tag, id, (tt__ExposurePriority *const*)ptr, "tt:ExposurePriority");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension:
		return soap_out_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, tag, id, (tt__IrCutFilterAutoAdjustmentExtension *const*)ptr, "tt:IrCutFilterAutoAdjustmentExtension");
	case SOAP_TYPE_PointerTott__ImageStabilizationExtension:
		return soap_out_PointerTott__ImageStabilizationExtension(soap, tag, id, (tt__ImageStabilizationExtension *const*)ptr, "tt:ImageStabilizationExtension");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension204:
		return soap_out_PointerTott__ImagingSettingsExtension204(soap, tag, id, (tt__ImagingSettingsExtension204 *const*)ptr, "tt:ImagingSettingsExtension204");
	case SOAP_TYPE_PointerTott__NoiseReduction:
		return soap_out_PointerTott__NoiseReduction(soap, tag, id, (tt__NoiseReduction *const*)ptr, "tt:NoiseReduction");
	case SOAP_TYPE_PointerTott__Defogging:
		return soap_out_PointerTott__Defogging(soap, tag, id, (tt__Defogging *const*)ptr, "tt:Defogging");
	case SOAP_TYPE_PointerTott__ToneCompensation:
		return soap_out_PointerTott__ToneCompensation(soap, tag, id, (tt__ToneCompensation *const*)ptr, "tt:ToneCompensation");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension203:
		return soap_out_PointerTott__ImagingSettingsExtension203(soap, tag, id, (tt__ImagingSettingsExtension203 *const*)ptr, "tt:ImagingSettingsExtension203");
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment:
		return soap_out_PointerTott__IrCutFilterAutoAdjustment(soap, tag, id, (tt__IrCutFilterAutoAdjustment *const*)ptr, "tt:IrCutFilterAutoAdjustment");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension202:
		return soap_out_PointerTott__ImagingSettingsExtension202(soap, tag, id, (tt__ImagingSettingsExtension202 *const*)ptr, "tt:ImagingSettingsExtension202");
	case SOAP_TYPE_PointerTott__ImageStabilization:
		return soap_out_PointerTott__ImageStabilization(soap, tag, id, (tt__ImageStabilization *const*)ptr, "tt:ImageStabilization");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension20:
		return soap_out_PointerTott__ImagingSettingsExtension20(soap, tag, id, (tt__ImagingSettingsExtension20 *const*)ptr, "tt:ImagingSettingsExtension20");
	case SOAP_TYPE_PointerTott__WhiteBalance20:
		return soap_out_PointerTott__WhiteBalance20(soap, tag, id, (tt__WhiteBalance20 *const*)ptr, "tt:WhiteBalance20");
	case SOAP_TYPE_PointerTott__WideDynamicRange20:
		return soap_out_PointerTott__WideDynamicRange20(soap, tag, id, (tt__WideDynamicRange20 *const*)ptr, "tt:WideDynamicRange20");
	case SOAP_TYPE_PointerTott__FocusConfiguration20:
		return soap_out_PointerTott__FocusConfiguration20(soap, tag, id, (tt__FocusConfiguration20 *const*)ptr, "tt:FocusConfiguration20");
	case SOAP_TYPE_PointerTott__Exposure20:
		return soap_out_PointerTott__Exposure20(soap, tag, id, (tt__Exposure20 *const*)ptr, "tt:Exposure20");
	case SOAP_TYPE_PointerTott__BacklightCompensation20:
		return soap_out_PointerTott__BacklightCompensation20(soap, tag, id, (tt__BacklightCompensation20 *const*)ptr, "tt:BacklightCompensation20");
	case SOAP_TYPE_PointerTott__FocusStatus20Extension:
		return soap_out_PointerTott__FocusStatus20Extension(soap, tag, id, (tt__FocusStatus20Extension *const*)ptr, "tt:FocusStatus20Extension");
	case SOAP_TYPE_PointerTott__ImagingStatus20Extension:
		return soap_out_PointerTott__ImagingStatus20Extension(soap, tag, id, (tt__ImagingStatus20Extension *const*)ptr, "tt:ImagingStatus20Extension");
	case SOAP_TYPE_PointerTott__FocusStatus20:
		return soap_out_PointerTott__FocusStatus20(soap, tag, id, (tt__FocusStatus20 *const*)ptr, "tt:FocusStatus20");
	case SOAP_TYPE_PointerTott__ContinuousFocusOptions:
		return soap_out_PointerTott__ContinuousFocusOptions(soap, tag, id, (tt__ContinuousFocusOptions *const*)ptr, "tt:ContinuousFocusOptions");
	case SOAP_TYPE_PointerTott__RelativeFocusOptions:
		return soap_out_PointerTott__RelativeFocusOptions(soap, tag, id, (tt__RelativeFocusOptions *const*)ptr, "tt:RelativeFocusOptions");
	case SOAP_TYPE_PointerTott__AbsoluteFocusOptions:
		return soap_out_PointerTott__AbsoluteFocusOptions(soap, tag, id, (tt__AbsoluteFocusOptions *const*)ptr, "tt:AbsoluteFocusOptions");
	case SOAP_TYPE_PointerTott__ContinuousFocus:
		return soap_out_PointerTott__ContinuousFocus(soap, tag, id, (tt__ContinuousFocus *const*)ptr, "tt:ContinuousFocus");
	case SOAP_TYPE_PointerTott__RelativeFocus:
		return soap_out_PointerTott__RelativeFocus(soap, tag, id, (tt__RelativeFocus *const*)ptr, "tt:RelativeFocus");
	case SOAP_TYPE_PointerTott__AbsoluteFocus:
		return soap_out_PointerTott__AbsoluteFocus(soap, tag, id, (tt__AbsoluteFocus *const*)ptr, "tt:AbsoluteFocus");
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions:
		return soap_out_PointerTott__WhiteBalanceOptions(soap, tag, id, (tt__WhiteBalanceOptions *const*)ptr, "tt:WhiteBalanceOptions");
	case SOAP_TYPE_PointerTott__WideDynamicRangeOptions:
		return soap_out_PointerTott__WideDynamicRangeOptions(soap, tag, id, (tt__WideDynamicRangeOptions *const*)ptr, "tt:WideDynamicRangeOptions");
	case SOAP_TYPE_PointerTott__FocusOptions:
		return soap_out_PointerTott__FocusOptions(soap, tag, id, (tt__FocusOptions *const*)ptr, "tt:FocusOptions");
	case SOAP_TYPE_PointerTott__ExposureOptions:
		return soap_out_PointerTott__ExposureOptions(soap, tag, id, (tt__ExposureOptions *const*)ptr, "tt:ExposureOptions");
	case SOAP_TYPE_PointerTott__BacklightCompensationOptions:
		return soap_out_PointerTott__BacklightCompensationOptions(soap, tag, id, (tt__BacklightCompensationOptions *const*)ptr, "tt:BacklightCompensationOptions");
	case SOAP_TYPE_PointerTott__Rectangle:
		return soap_out_PointerTott__Rectangle(soap, tag, id, (tt__Rectangle *const*)ptr, "tt:Rectangle");
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension:
		return soap_out_PointerTott__ImagingSettingsExtension(soap, tag, id, (tt__ImagingSettingsExtension *const*)ptr, "tt:ImagingSettingsExtension");
	case SOAP_TYPE_PointerTott__WhiteBalance:
		return soap_out_PointerTott__WhiteBalance(soap, tag, id, (tt__WhiteBalance *const*)ptr, "tt:WhiteBalance");
	case SOAP_TYPE_PointerTott__WideDynamicRange:
		return soap_out_PointerTott__WideDynamicRange(soap, tag, id, (tt__WideDynamicRange *const*)ptr, "tt:WideDynamicRange");
	case SOAP_TYPE_PointerTott__IrCutFilterMode:
		return soap_out_PointerTott__IrCutFilterMode(soap, tag, id, (tt__IrCutFilterMode *const*)ptr, "tt:IrCutFilterMode");
	case SOAP_TYPE_PointerTott__FocusConfiguration:
		return soap_out_PointerTott__FocusConfiguration(soap, tag, id, (tt__FocusConfiguration *const*)ptr, "tt:FocusConfiguration");
	case SOAP_TYPE_PointerTott__Exposure:
		return soap_out_PointerTott__Exposure(soap, tag, id, (tt__Exposure *const*)ptr, "tt:Exposure");
	case SOAP_TYPE_PointerTott__BacklightCompensation:
		return soap_out_PointerTott__BacklightCompensation(soap, tag, id, (tt__BacklightCompensation *const*)ptr, "tt:BacklightCompensation");
	case SOAP_TYPE_PointerTott__FocusStatus:
		return soap_out_PointerTott__FocusStatus(soap, tag, id, (tt__FocusStatus *const*)ptr, "tt:FocusStatus");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension:
		return soap_out_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, tag, id, (tt__PTZPresetTourStartingConditionOptionsExtension *const*)ptr, "tt:PTZPresetTourStartingConditionOptionsExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension:
		return soap_out_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, tag, id, (tt__PTZPresetTourPresetDetailOptionsExtension *const*)ptr, "tt:PTZPresetTourPresetDetailOptionsExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions:
		return soap_out_PointerTott__PTZPresetTourPresetDetailOptions(soap, tag, id, (tt__PTZPresetTourPresetDetailOptions *const*)ptr, "tt:PTZPresetTourPresetDetailOptions");
	case SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions:
		return soap_out_PointerTott__PTZPresetTourSpotOptions(soap, tag, id, (tt__PTZPresetTourSpotOptions *const*)ptr, "tt:PTZPresetTourSpotOptions");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions:
		return soap_out_PointerTott__PTZPresetTourStartingConditionOptions(soap, tag, id, (tt__PTZPresetTourStartingConditionOptions *const*)ptr, "tt:PTZPresetTourStartingConditionOptions");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension:
		return soap_out_PointerTott__PTZPresetTourStartingConditionExtension(soap, tag, id, (tt__PTZPresetTourStartingConditionExtension *const*)ptr, "tt:PTZPresetTourStartingConditionExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourDirection:
		return soap_out_PointerTott__PTZPresetTourDirection(soap, tag, id, (tt__PTZPresetTourDirection *const*)ptr, "tt:PTZPresetTourDirection");
	case SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension:
		return soap_out_PointerTott__PTZPresetTourStatusExtension(soap, tag, id, (tt__PTZPresetTourStatusExtension *const*)ptr, "tt:PTZPresetTourStatusExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension:
		return soap_out_PointerTott__PTZPresetTourTypeExtension(soap, tag, id, (tt__PTZPresetTourTypeExtension *const*)ptr, "tt:PTZPresetTourTypeExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension:
		return soap_out_PointerTott__PTZPresetTourSpotExtension(soap, tag, id, (tt__PTZPresetTourSpotExtension *const*)ptr, "tt:PTZPresetTourSpotExtension");
	case SOAP_TYPE_PointerTott__PTZSpeed:
		return soap_out_PointerTott__PTZSpeed(soap, tag, id, (tt__PTZSpeed *const*)ptr, "tt:PTZSpeed");
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail:
		return soap_out_PointerTott__PTZPresetTourPresetDetail(soap, tag, id, (tt__PTZPresetTourPresetDetail *const*)ptr, "tt:PTZPresetTourPresetDetail");
	case SOAP_TYPE_PointerTott__PTZPresetTourExtension:
		return soap_out_PointerTott__PTZPresetTourExtension(soap, tag, id, (tt__PTZPresetTourExtension *const*)ptr, "tt:PTZPresetTourExtension");
	case SOAP_TYPE_PointerTott__PTZPresetTourSpot:
		return soap_out_PointerTott__PTZPresetTourSpot(soap, tag, id, (tt__PTZPresetTourSpot *const*)ptr, "tt:PTZPresetTourSpot");
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition:
		return soap_out_PointerTott__PTZPresetTourStartingCondition(soap, tag, id, (tt__PTZPresetTourStartingCondition *const*)ptr, "tt:PTZPresetTourStartingCondition");
	case SOAP_TYPE_PointerTott__PTZPresetTourStatus:
		return soap_out_PointerTott__PTZPresetTourStatus(soap, tag, id, (tt__PTZPresetTourStatus *const*)ptr, "tt:PTZPresetTourStatus");
	case SOAP_TYPE_PointerTott__PTZVector:
		return soap_out_PointerTott__PTZVector(soap, tag, id, (tt__PTZVector *const*)ptr, "tt:PTZVector");
	case SOAP_TYPE_PointerTott__Name:
		return soap_out_PointerTott__Name(soap, tag, id, (std::string *const*)ptr, "tt:Name");
	case SOAP_TYPE_PointerTott__Vector1D:
		return soap_out_PointerTott__Vector1D(soap, tag, id, (tt__Vector1D *const*)ptr, "tt:Vector1D");
	case SOAP_TYPE_PointerTott__Vector2D:
		return soap_out_PointerTott__Vector2D(soap, tag, id, (tt__Vector2D *const*)ptr, "tt:Vector2D");
	case SOAP_TYPE_PointerTott__PTZSpacesExtension:
		return soap_out_PointerTott__PTZSpacesExtension(soap, tag, id, (tt__PTZSpacesExtension *const*)ptr, "tt:PTZSpacesExtension");
	case SOAP_TYPE_PointerTott__Space1DDescription:
		return soap_out_PointerTott__Space1DDescription(soap, tag, id, (tt__Space1DDescription *const*)ptr, "tt:Space1DDescription");
	case SOAP_TYPE_PointerTott__Space2DDescription:
		return soap_out_PointerTott__Space2DDescription(soap, tag, id, (tt__Space2DDescription *const*)ptr, "tt:Space2DDescription");
	case SOAP_TYPE_PointerTott__ReverseOptionsExtension:
		return soap_out_PointerTott__ReverseOptionsExtension(soap, tag, id, (tt__ReverseOptionsExtension *const*)ptr, "tt:ReverseOptionsExtension");
	case SOAP_TYPE_PointerTott__EFlipOptionsExtension:
		return soap_out_PointerTott__EFlipOptionsExtension(soap, tag, id, (tt__EFlipOptionsExtension *const*)ptr, "tt:EFlipOptionsExtension");
	case SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension:
		return soap_out_PointerTott__PTControlDirectionOptionsExtension(soap, tag, id, (tt__PTControlDirectionOptionsExtension *const*)ptr, "tt:PTControlDirectionOptionsExtension");
	case SOAP_TYPE_PointerTott__ReverseOptions:
		return soap_out_PointerTott__ReverseOptions(soap, tag, id, (tt__ReverseOptions *const*)ptr, "tt:ReverseOptions");
	case SOAP_TYPE_PointerTott__EFlipOptions:
		return soap_out_PointerTott__EFlipOptions(soap, tag, id, (tt__EFlipOptions *const*)ptr, "tt:EFlipOptions");
	case SOAP_TYPE_PointerTott__PTZConfigurationOptions2:
		return soap_out_PointerTott__PTZConfigurationOptions2(soap, tag, id, (tt__PTZConfigurationOptions2 *const*)ptr, "tt:PTZConfigurationOptions2");
	case SOAP_TYPE_PointerTott__PTControlDirectionOptions:
		return soap_out_PointerTott__PTControlDirectionOptions(soap, tag, id, (tt__PTControlDirectionOptions *const*)ptr, "tt:PTControlDirectionOptions");
	case SOAP_TYPE_PointerTott__DurationRange:
		return soap_out_PointerTott__DurationRange(soap, tag, id, (tt__DurationRange *const*)ptr, "tt:DurationRange");
	case SOAP_TYPE_PointerTott__PTZSpaces:
		return soap_out_PointerTott__PTZSpaces(soap, tag, id, (tt__PTZSpaces *const*)ptr, "tt:PTZSpaces");
	case SOAP_TYPE_PointerTott__PTControlDirectionExtension:
		return soap_out_PointerTott__PTControlDirectionExtension(soap, tag, id, (tt__PTControlDirectionExtension *const*)ptr, "tt:PTControlDirectionExtension");
	case SOAP_TYPE_PointerTott__Reverse:
		return soap_out_PointerTott__Reverse(soap, tag, id, (tt__Reverse *const*)ptr, "tt:Reverse");
	case SOAP_TYPE_PointerTott__EFlip:
		return soap_out_PointerTott__EFlip(soap, tag, id, (tt__EFlip *const*)ptr, "tt:EFlip");
	case SOAP_TYPE_PointerTott__PTZConfigurationExtension2:
		return soap_out_PointerTott__PTZConfigurationExtension2(soap, tag, id, (tt__PTZConfigurationExtension2 *const*)ptr, "tt:PTZConfigurationExtension2");
	case SOAP_TYPE_PointerTott__PTControlDirection:
		return soap_out_PointerTott__PTControlDirection(soap, tag, id, (tt__PTControlDirection *const*)ptr, "tt:PTControlDirection");
	case SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension:
		return soap_out_PointerTott__PTZPresetTourSupportedExtension(soap, tag, id, (tt__PTZPresetTourSupportedExtension *const*)ptr, "tt:PTZPresetTourSupportedExtension");
	case SOAP_TYPE_PointerTott__PTZNodeExtension2:
		return soap_out_PointerTott__PTZNodeExtension2(soap, tag, id, (tt__PTZNodeExtension2 *const*)ptr, "tt:PTZNodeExtension2");
	case SOAP_TYPE_PointerTott__PTZPresetTourSupported:
		return soap_out_PointerTott__PTZPresetTourSupported(soap, tag, id, (tt__PTZPresetTourSupported *const*)ptr, "tt:PTZPresetTourSupported");
	case SOAP_TYPE_PointerTott__EapMethodExtension:
		return soap_out_PointerTott__EapMethodExtension(soap, tag, id, (tt__EapMethodExtension *const*)ptr, "tt:EapMethodExtension");
	case SOAP_TYPE_PointerTott__TLSConfiguration:
		return soap_out_PointerTott__TLSConfiguration(soap, tag, id, (tt__TLSConfiguration *const*)ptr, "tt:TLSConfiguration");
	case SOAP_TYPE_PointerTott__Dot1XConfigurationExtension:
		return soap_out_PointerTott__Dot1XConfigurationExtension(soap, tag, id, (tt__Dot1XConfigurationExtension *const*)ptr, "tt:Dot1XConfigurationExtension");
	case SOAP_TYPE_PointerTott__EAPMethodConfiguration:
		return soap_out_PointerTott__EAPMethodConfiguration(soap, tag, id, (tt__EAPMethodConfiguration *const*)ptr, "tt:EAPMethodConfiguration");
	case SOAP_TYPE_PointerTott__CertificateInformationExtension:
		return soap_out_PointerTott__CertificateInformationExtension(soap, tag, id, (tt__CertificateInformationExtension *const*)ptr, "tt:CertificateInformationExtension");
	case SOAP_TYPE_PointerTott__DateTimeRange:
		return soap_out_PointerTott__DateTimeRange(soap, tag, id, (tt__DateTimeRange *const*)ptr, "tt:DateTimeRange");
	case SOAP_TYPE_PointerTott__CertificateUsage:
		return soap_out_PointerTott__CertificateUsage(soap, tag, id, (tt__CertificateUsage *const*)ptr, "tt:CertificateUsage");
	case SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension:
		return soap_out_PointerTott__CertificateGenerationParametersExtension(soap, tag, id, (tt__CertificateGenerationParametersExtension *const*)ptr, "tt:CertificateGenerationParametersExtension");
	case SOAP_TYPE_PointerTott__UserExtension:
		return soap_out_PointerTott__UserExtension(soap, tag, id, (tt__UserExtension *const*)ptr, "tt:UserExtension");
	case SOAP_TYPE_PointerTott__Date:
		return soap_out_PointerTott__Date(soap, tag, id, (tt__Date *const*)ptr, "tt:Date");
	case SOAP_TYPE_PointerTott__Time:
		return soap_out_PointerTott__Time(soap, tag, id, (tt__Time *const*)ptr, "tt:Time");
	case SOAP_TYPE_PointerTott__SystemDateTimeExtension:
		return soap_out_PointerTott__SystemDateTimeExtension(soap, tag, id, (tt__SystemDateTimeExtension *const*)ptr, "tt:SystemDateTimeExtension");
	case SOAP_TYPE_PointerTott__SystemLogUri:
		return soap_out_PointerTott__SystemLogUri(soap, tag, id, (tt__SystemLogUri *const*)ptr, "tt:SystemLogUri");
	case SOAP_TYPE_PointerToxop__Include:
		return soap_out_PointerToxop__Include(soap, tag, id, (xop__Include *const*)ptr, "xop:Include");
	case SOAP_TYPE_PointerTo_xmime__contentType:
		return soap_out_PointerTo_xmime__contentType(soap, tag, id, (std::string *const*)ptr, "xmime:contentType");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceExtension:
		return soap_out_PointerTott__AnalyticsDeviceExtension(soap, tag, id, (tt__AnalyticsDeviceExtension *const*)ptr, "tt:AnalyticsDeviceExtension");
	case SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2:
		return soap_out_PointerTott__SystemCapabilitiesExtension2(soap, tag, id, (tt__SystemCapabilitiesExtension2 *const*)ptr, "tt:SystemCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__SystemCapabilitiesExtension:
		return soap_out_PointerTott__SystemCapabilitiesExtension(soap, tag, id, (tt__SystemCapabilitiesExtension *const*)ptr, "tt:SystemCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2:
		return soap_out_PointerTott__SecurityCapabilitiesExtension2(soap, tag, id, (tt__SecurityCapabilitiesExtension2 *const*)ptr, "tt:SecurityCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension:
		return soap_out_PointerTott__SecurityCapabilitiesExtension(soap, tag, id, (tt__SecurityCapabilitiesExtension *const*)ptr, "tt:SecurityCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2:
		return soap_out_PointerTott__NetworkCapabilitiesExtension2(soap, tag, id, (tt__NetworkCapabilitiesExtension2 *const*)ptr, "tt:NetworkCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension:
		return soap_out_PointerTott__NetworkCapabilitiesExtension(soap, tag, id, (tt__NetworkCapabilitiesExtension *const*)ptr, "tt:NetworkCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension:
		return soap_out_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, tag, id, (tt__RealTimeStreamingCapabilitiesExtension *const*)ptr, "tt:RealTimeStreamingCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__ProfileCapabilities:
		return soap_out_PointerTott__ProfileCapabilities(soap, tag, id, (tt__ProfileCapabilities *const*)ptr, "tt:ProfileCapabilities");
	case SOAP_TYPE_PointerTott__MediaCapabilitiesExtension:
		return soap_out_PointerTott__MediaCapabilitiesExtension(soap, tag, id, (tt__MediaCapabilitiesExtension *const*)ptr, "tt:MediaCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities:
		return soap_out_PointerTott__RealTimeStreamingCapabilities(soap, tag, id, (tt__RealTimeStreamingCapabilities *const*)ptr, "tt:RealTimeStreamingCapabilities");
	case SOAP_TYPE_PointerTott__IOCapabilitiesExtension2:
		return soap_out_PointerTott__IOCapabilitiesExtension2(soap, tag, id, (tt__IOCapabilitiesExtension2 *const*)ptr, "tt:IOCapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__IOCapabilitiesExtension:
		return soap_out_PointerTott__IOCapabilitiesExtension(soap, tag, id, (tt__IOCapabilitiesExtension *const*)ptr, "tt:IOCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension:
		return soap_out_PointerTott__DeviceCapabilitiesExtension(soap, tag, id, (tt__DeviceCapabilitiesExtension *const*)ptr, "tt:DeviceCapabilitiesExtension");
	case SOAP_TYPE_PointerTott__SecurityCapabilities:
		return soap_out_PointerTott__SecurityCapabilities(soap, tag, id, (tt__SecurityCapabilities *const*)ptr, "tt:SecurityCapabilities");
	case SOAP_TYPE_PointerTott__IOCapabilities:
		return soap_out_PointerTott__IOCapabilities(soap, tag, id, (tt__IOCapabilities *const*)ptr, "tt:IOCapabilities");
	case SOAP_TYPE_PointerTott__SystemCapabilities:
		return soap_out_PointerTott__SystemCapabilities(soap, tag, id, (tt__SystemCapabilities *const*)ptr, "tt:SystemCapabilities");
	case SOAP_TYPE_PointerTott__NetworkCapabilities:
		return soap_out_PointerTott__NetworkCapabilities(soap, tag, id, (tt__NetworkCapabilities *const*)ptr, "tt:NetworkCapabilities");
	case SOAP_TYPE_PointerTott__CapabilitiesExtension2:
		return soap_out_PointerTott__CapabilitiesExtension2(soap, tag, id, (tt__CapabilitiesExtension2 *const*)ptr, "tt:CapabilitiesExtension2");
	case SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities:
		return soap_out_PointerTott__AnalyticsDeviceCapabilities(soap, tag, id, (tt__AnalyticsDeviceCapabilities *const*)ptr, "tt:AnalyticsDeviceCapabilities");
	case SOAP_TYPE_PointerTott__ReceiverCapabilities:
		return soap_out_PointerTott__ReceiverCapabilities(soap, tag, id, (tt__ReceiverCapabilities *const*)ptr, "tt:ReceiverCapabilities");
	case SOAP_TYPE_PointerTott__ReplayCapabilities:
		return soap_out_PointerTott__ReplayCapabilities(soap, tag, id, (tt__ReplayCapabilities *const*)ptr, "tt:ReplayCapabilities");
	case SOAP_TYPE_PointerTott__SearchCapabilities:
		return soap_out_PointerTott__SearchCapabilities(soap, tag, id, (tt__SearchCapabilities *const*)ptr, "tt:SearchCapabilities");
	case SOAP_TYPE_PointerTott__RecordingCapabilities:
		return soap_out_PointerTott__RecordingCapabilities(soap, tag, id, (tt__RecordingCapabilities *const*)ptr, "tt:RecordingCapabilities");
	case SOAP_TYPE_PointerTott__DisplayCapabilities:
		return soap_out_PointerTott__DisplayCapabilities(soap, tag, id, (tt__DisplayCapabilities *const*)ptr, "tt:DisplayCapabilities");
	case SOAP_TYPE_PointerTott__DeviceIOCapabilities:
		return soap_out_PointerTott__DeviceIOCapabilities(soap, tag, id, (tt__DeviceIOCapabilities *const*)ptr, "tt:DeviceIOCapabilities");
	case SOAP_TYPE_PointerTott__CapabilitiesExtension:
		return soap_out_PointerTott__CapabilitiesExtension(soap, tag, id, (tt__CapabilitiesExtension *const*)ptr, "tt:CapabilitiesExtension");
	case SOAP_TYPE_PointerTott__PTZCapabilities:
		return soap_out_PointerTott__PTZCapabilities(soap, tag, id, (tt__PTZCapabilities *const*)ptr, "tt:PTZCapabilities");
	case SOAP_TYPE_PointerTott__MediaCapabilities:
		return soap_out_PointerTott__MediaCapabilities(soap, tag, id, (tt__MediaCapabilities *const*)ptr, "tt:MediaCapabilities");
	case SOAP_TYPE_PointerTott__ImagingCapabilities:
		return soap_out_PointerTott__ImagingCapabilities(soap, tag, id, (tt__ImagingCapabilities *const*)ptr, "tt:ImagingCapabilities");
	case SOAP_TYPE_PointerTott__EventCapabilities:
		return soap_out_PointerTott__EventCapabilities(soap, tag, id, (tt__EventCapabilities *const*)ptr, "tt:EventCapabilities");
	case SOAP_TYPE_PointerTott__DeviceCapabilities:
		return soap_out_PointerTott__DeviceCapabilities(soap, tag, id, (tt__DeviceCapabilities *const*)ptr, "tt:DeviceCapabilities");
	case SOAP_TYPE_PointerTott__AnalyticsCapabilities:
		return soap_out_PointerTott__AnalyticsCapabilities(soap, tag, id, (tt__AnalyticsCapabilities *const*)ptr, "tt:AnalyticsCapabilities");
	case SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension:
		return soap_out_PointerTott__Dot11AvailableNetworksExtension(soap, tag, id, (tt__Dot11AvailableNetworksExtension *const*)ptr, "tt:Dot11AvailableNetworksExtension");
	case SOAP_TYPE_PointerTott__Dot11SignalStrength:
		return soap_out_PointerTott__Dot11SignalStrength(soap, tag, id, (tt__Dot11SignalStrength *const*)ptr, "tt:Dot11SignalStrength");
	case SOAP_TYPE_PointerTott__Dot11PSKSetExtension:
		return soap_out_PointerTott__Dot11PSKSetExtension(soap, tag, id, (tt__Dot11PSKSetExtension *const*)ptr, "tt:Dot11PSKSetExtension");
	case SOAP_TYPE_PointerTott__Dot11PSKPassphrase:
		return soap_out_PointerTott__Dot11PSKPassphrase(soap, tag, id, (std::string *const*)ptr, "tt:Dot11PSKPassphrase");
	case SOAP_TYPE_PointerTott__Dot11PSK:
		return soap_out_PointerTott__Dot11PSK(soap, tag, id, (xsd__hexBinary *const*)ptr, "tt:Dot11PSK");
	case SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension:
		return soap_out_PointerTott__Dot11SecurityConfigurationExtension(soap, tag, id, (tt__Dot11SecurityConfigurationExtension *const*)ptr, "tt:Dot11SecurityConfigurationExtension");
	case SOAP_TYPE_PointerTott__ReferenceToken:
		return soap_out_PointerTott__ReferenceToken(soap, tag, id, (std::string *const*)ptr, "tt:ReferenceToken");
	case SOAP_TYPE_PointerTott__Dot11PSKSet:
		return soap_out_PointerTott__Dot11PSKSet(soap, tag, id, (tt__Dot11PSKSet *const*)ptr, "tt:Dot11PSKSet");
	case SOAP_TYPE_PointerTott__Dot11Cipher:
		return soap_out_PointerTott__Dot11Cipher(soap, tag, id, (tt__Dot11Cipher *const*)ptr, "tt:Dot11Cipher");
	case SOAP_TYPE_PointerTott__Dot11SecurityConfiguration:
		return soap_out_PointerTott__Dot11SecurityConfiguration(soap, tag, id, (tt__Dot11SecurityConfiguration *const*)ptr, "tt:Dot11SecurityConfiguration");
	case SOAP_TYPE_PointerTott__IPAddressFilterExtension:
		return soap_out_PointerTott__IPAddressFilterExtension(soap, tag, id, (tt__IPAddressFilterExtension *const*)ptr, "tt:IPAddressFilterExtension");
	case SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2:
		return soap_out_PointerTott__NetworkZeroConfigurationExtension2(soap, tag, id, (tt__NetworkZeroConfigurationExtension2 *const*)ptr, "tt:NetworkZeroConfigurationExtension2");
	case SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension:
		return soap_out_PointerTott__NetworkZeroConfigurationExtension(soap, tag, id, (tt__NetworkZeroConfigurationExtension *const*)ptr, "tt:NetworkZeroConfigurationExtension");
	case SOAP_TYPE_PointerTott__IPv6DHCPConfiguration:
		return soap_out_PointerTott__IPv6DHCPConfiguration(soap, tag, id, (tt__IPv6DHCPConfiguration *const*)ptr, "tt:IPv6DHCPConfiguration");
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2:
		return soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, tag, id, (tt__NetworkInterfaceSetConfigurationExtension2 *const*)ptr, "tt:NetworkInterfaceSetConfigurationExtension2");
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension:
		return soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, tag, id, (tt__NetworkInterfaceSetConfigurationExtension *const*)ptr, "tt:NetworkInterfaceSetConfigurationExtension");
	case SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration:
		return soap_out_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, tag, id, (tt__IPv6NetworkInterfaceSetConfiguration *const*)ptr, "tt:IPv6NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration:
		return soap_out_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, tag, id, (tt__IPv4NetworkInterfaceSetConfiguration *const*)ptr, "tt:IPv4NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_PointerTott__DynamicDNSInformationExtension:
		return soap_out_PointerTott__DynamicDNSInformationExtension(soap, tag, id, (tt__DynamicDNSInformationExtension *const*)ptr, "tt:DynamicDNSInformationExtension");
	case SOAP_TYPE_PointerTott__NTPInformationExtension:
		return soap_out_PointerTott__NTPInformationExtension(soap, tag, id, (tt__NTPInformationExtension *const*)ptr, "tt:NTPInformationExtension");
	case SOAP_TYPE_PointerTott__DNSInformationExtension:
		return soap_out_PointerTott__DNSInformationExtension(soap, tag, id, (tt__DNSInformationExtension *const*)ptr, "tt:DNSInformationExtension");
	case SOAP_TYPE_PointerTott__HostnameInformationExtension:
		return soap_out_PointerTott__HostnameInformationExtension(soap, tag, id, (tt__HostnameInformationExtension *const*)ptr, "tt:HostnameInformationExtension");
	case SOAP_TYPE_PointerTott__NetworkHostExtension:
		return soap_out_PointerTott__NetworkHostExtension(soap, tag, id, (tt__NetworkHostExtension *const*)ptr, "tt:NetworkHostExtension");
	case SOAP_TYPE_PointerTott__IPv6Address:
		return soap_out_PointerTott__IPv6Address(soap, tag, id, (std::string *const*)ptr, "tt:IPv6Address");
	case SOAP_TYPE_PointerTott__IPv4Address:
		return soap_out_PointerTott__IPv4Address(soap, tag, id, (std::string *const*)ptr, "tt:IPv4Address");
	case SOAP_TYPE_PointerTott__NetworkProtocolExtension:
		return soap_out_PointerTott__NetworkProtocolExtension(soap, tag, id, (tt__NetworkProtocolExtension *const*)ptr, "tt:NetworkProtocolExtension");
	case SOAP_TYPE_PointerTott__IPv6ConfigurationExtension:
		return soap_out_PointerTott__IPv6ConfigurationExtension(soap, tag, id, (tt__IPv6ConfigurationExtension *const*)ptr, "tt:IPv6ConfigurationExtension");
	case SOAP_TYPE_PointerTott__PrefixedIPv6Address:
		return soap_out_PointerTott__PrefixedIPv6Address(soap, tag, id, (tt__PrefixedIPv6Address *const*)ptr, "tt:PrefixedIPv6Address");
	case SOAP_TYPE_PointerTott__PrefixedIPv4Address:
		return soap_out_PointerTott__PrefixedIPv4Address(soap, tag, id, (tt__PrefixedIPv4Address *const*)ptr, "tt:PrefixedIPv4Address");
	case SOAP_TYPE_PointerTott__IPv4Configuration:
		return soap_out_PointerTott__IPv4Configuration(soap, tag, id, (tt__IPv4Configuration *const*)ptr, "tt:IPv4Configuration");
	case SOAP_TYPE_PointerTott__IPv6Configuration:
		return soap_out_PointerTott__IPv6Configuration(soap, tag, id, (tt__IPv6Configuration *const*)ptr, "tt:IPv6Configuration");
	case SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting:
		return soap_out_PointerTott__NetworkInterfaceConnectionSetting(soap, tag, id, (tt__NetworkInterfaceConnectionSetting *const*)ptr, "tt:NetworkInterfaceConnectionSetting");
	case SOAP_TYPE_PointerTott__NetworkInterfaceExtension2:
		return soap_out_PointerTott__NetworkInterfaceExtension2(soap, tag, id, (tt__NetworkInterfaceExtension2 *const*)ptr, "tt:NetworkInterfaceExtension2");
	case SOAP_TYPE_PointerTott__Dot11Configuration:
		return soap_out_PointerTott__Dot11Configuration(soap, tag, id, (tt__Dot11Configuration *const*)ptr, "tt:Dot11Configuration");
	case SOAP_TYPE_PointerTott__Dot3Configuration:
		return soap_out_PointerTott__Dot3Configuration(soap, tag, id, (tt__Dot3Configuration *const*)ptr, "tt:Dot3Configuration");
	case SOAP_TYPE_PointerTott__Transport:
		return soap_out_PointerTott__Transport(soap, tag, id, (tt__Transport *const*)ptr, "tt:Transport");
	case SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension:
		return soap_out_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, tag, id, (tt__AudioDecoderConfigurationOptionsExtension *const*)ptr, "tt:AudioDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__G726DecOptions:
		return soap_out_PointerTott__G726DecOptions(soap, tag, id, (tt__G726DecOptions *const*)ptr, "tt:G726DecOptions");
	case SOAP_TYPE_PointerTott__G711DecOptions:
		return soap_out_PointerTott__G711DecOptions(soap, tag, id, (tt__G711DecOptions *const*)ptr, "tt:G711DecOptions");
	case SOAP_TYPE_PointerTott__AACDecOptions:
		return soap_out_PointerTott__AACDecOptions(soap, tag, id, (tt__AACDecOptions *const*)ptr, "tt:AACDecOptions");
	case SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension:
		return soap_out_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, tag, id, (tt__VideoDecoderConfigurationOptionsExtension *const*)ptr, "tt:VideoDecoderConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__Mpeg4DecOptions:
		return soap_out_PointerTott__Mpeg4DecOptions(soap, tag, id, (tt__Mpeg4DecOptions *const*)ptr, "tt:Mpeg4DecOptions");
	case SOAP_TYPE_PointerTott__H264DecOptions:
		return soap_out_PointerTott__H264DecOptions(soap, tag, id, (tt__H264DecOptions *const*)ptr, "tt:H264DecOptions");
	case SOAP_TYPE_PointerTott__JpegDecOptions:
		return soap_out_PointerTott__JpegDecOptions(soap, tag, id, (tt__JpegDecOptions *const*)ptr, "tt:JpegDecOptions");
	case SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension:
		return soap_out_PointerTott__PTZStatusFilterOptionsExtension(soap, tag, id, (tt__PTZStatusFilterOptionsExtension *const*)ptr, "tt:PTZStatusFilterOptionsExtension");
	case SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2:
		return soap_out_PointerTott__MetadataConfigurationOptionsExtension2(soap, tag, id, (tt__MetadataConfigurationOptionsExtension2 *const*)ptr, "tt:MetadataConfigurationOptionsExtension2");
	case SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension:
		return soap_out_PointerTott__MetadataConfigurationOptionsExtension(soap, tag, id, (tt__MetadataConfigurationOptionsExtension *const*)ptr, "tt:MetadataConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__PTZStatusFilterOptions:
		return soap_out_PointerTott__PTZStatusFilterOptions(soap, tag, id, (tt__PTZStatusFilterOptions *const*)ptr, "tt:PTZStatusFilterOptions");
	case SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy:
		return soap_out_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, tag, id, (_tt__EventSubscription_SubscriptionPolicy *const*)ptr, "tt:EventSubscription-SubscriptionPolicy");
	case SOAP_TYPE_PointerTowsnt__FilterType:
		return soap_out_PointerTowsnt__FilterType(soap, tag, id, (wsnt__FilterType *const*)ptr, "wsnt:FilterType");
	case SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption:
		return soap_out_PointerTott__AudioEncoderConfigurationOption(soap, tag, id, (tt__AudioEncoderConfigurationOption *const*)ptr, "tt:AudioEncoderConfigurationOption");
	case SOAP_TYPE_PointerTott__AudioSourceOptionsExtension:
		return soap_out_PointerTott__AudioSourceOptionsExtension(soap, tag, id, (tt__AudioSourceOptionsExtension *const*)ptr, "tt:AudioSourceOptionsExtension");
	case SOAP_TYPE_PointerTott__FloatAttrList:
		return soap_out_PointerTott__FloatAttrList(soap, tag, id, (std::string *const*)ptr, "tt:FloatAttrList");
	case SOAP_TYPE_PointerTott__IntAttrList:
		return soap_out_PointerTott__IntAttrList(soap, tag, id, (std::string *const*)ptr, "tt:IntAttrList");
	case SOAP_TYPE_PointerTott__VideoResolution2:
		return soap_out_PointerTott__VideoResolution2(soap, tag, id, (tt__VideoResolution2 *const*)ptr, "tt:VideoResolution2");
	case SOAP_TYPE_PointerTott__FloatRange:
		return soap_out_PointerTott__FloatRange(soap, tag, id, (tt__FloatRange *const*)ptr, "tt:FloatRange");
	case SOAP_TYPE_PointerTott__VideoResolution:
		return soap_out_PointerTott__VideoResolution(soap, tag, id, (tt__VideoResolution *const*)ptr, "tt:VideoResolution");
	case SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2:
		return soap_out_PointerTott__VideoEncoderOptionsExtension2(soap, tag, id, (tt__VideoEncoderOptionsExtension2 *const*)ptr, "tt:VideoEncoderOptionsExtension2");
	case SOAP_TYPE_PointerTott__H264Options2:
		return soap_out_PointerTott__H264Options2(soap, tag, id, (tt__H264Options2 *const*)ptr, "tt:H264Options2");
	case SOAP_TYPE_PointerTott__Mpeg4Options2:
		return soap_out_PointerTott__Mpeg4Options2(soap, tag, id, (tt__Mpeg4Options2 *const*)ptr, "tt:Mpeg4Options2");
	case SOAP_TYPE_PointerTott__JpegOptions2:
		return soap_out_PointerTott__JpegOptions2(soap, tag, id, (tt__JpegOptions2 *const*)ptr, "tt:JpegOptions2");
	case SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension:
		return soap_out_PointerTott__VideoEncoderOptionsExtension(soap, tag, id, (tt__VideoEncoderOptionsExtension *const*)ptr, "tt:VideoEncoderOptionsExtension");
	case SOAP_TYPE_PointerTott__H264Options:
		return soap_out_PointerTott__H264Options(soap, tag, id, (tt__H264Options *const*)ptr, "tt:H264Options");
	case SOAP_TYPE_PointerTott__Mpeg4Options:
		return soap_out_PointerTott__Mpeg4Options(soap, tag, id, (tt__Mpeg4Options *const*)ptr, "tt:Mpeg4Options");
	case SOAP_TYPE_PointerTott__JpegOptions:
		return soap_out_PointerTott__JpegOptions(soap, tag, id, (tt__JpegOptions *const*)ptr, "tt:JpegOptions");
	case SOAP_TYPE_PointerTott__RotateOptionsExtension:
		return soap_out_PointerTott__RotateOptionsExtension(soap, tag, id, (tt__RotateOptionsExtension *const*)ptr, "tt:RotateOptionsExtension");
	case SOAP_TYPE_PointerTott__IntList:
		return soap_out_PointerTott__IntList(soap, tag, id, (tt__IntList *const*)ptr, "tt:IntList");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2:
		return soap_out_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, tag, id, (tt__VideoSourceConfigurationOptionsExtension2 *const*)ptr, "tt:VideoSourceConfigurationOptionsExtension2");
	case SOAP_TYPE_PointerTott__RotateOptions:
		return soap_out_PointerTott__RotateOptions(soap, tag, id, (tt__RotateOptions *const*)ptr, "tt:RotateOptions");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension:
		return soap_out_PointerTott__VideoSourceConfigurationOptionsExtension(soap, tag, id, (tt__VideoSourceConfigurationOptionsExtension *const*)ptr, "tt:VideoSourceConfigurationOptionsExtension");
	case SOAP_TYPE_PointerTott__IntRectangleRange:
		return soap_out_PointerTott__IntRectangleRange(soap, tag, id, (tt__IntRectangleRange *const*)ptr, "tt:IntRectangleRange");
	case SOAP_TYPE_PointerTott__LensProjection:
		return soap_out_PointerTott__LensProjection(soap, tag, id, (tt__LensProjection *const*)ptr, "tt:LensProjection");
	case SOAP_TYPE_PointerTott__LensOffset:
		return soap_out_PointerTott__LensOffset(soap, tag, id, (tt__LensOffset *const*)ptr, "tt:LensOffset");
	case SOAP_TYPE_PointerTofloat:
		return soap_out_PointerTofloat(soap, tag, id, (float *const*)ptr, "xsd:float");
	case SOAP_TYPE_PointerTott__RotateExtension:
		return soap_out_PointerTott__RotateExtension(soap, tag, id, (tt__RotateExtension *const*)ptr, "tt:RotateExtension");
	case SOAP_TYPE_PointerTott__SceneOrientation:
		return soap_out_PointerTott__SceneOrientation(soap, tag, id, (tt__SceneOrientation *const*)ptr, "tt:SceneOrientation");
	case SOAP_TYPE_PointerTott__LensDescription:
		return soap_out_PointerTott__LensDescription(soap, tag, id, (tt__LensDescription *const*)ptr, "tt:LensDescription");
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2:
		return soap_out_PointerTott__VideoSourceConfigurationExtension2(soap, tag, id, (tt__VideoSourceConfigurationExtension2 *const*)ptr, "tt:VideoSourceConfigurationExtension2");
	case SOAP_TYPE_PointerTott__Rotate:
		return soap_out_PointerTott__Rotate(soap, tag, id, (tt__Rotate *const*)ptr, "tt:Rotate");
	case SOAP_TYPE_PointerTott__ProfileExtension2:
		return soap_out_PointerTott__ProfileExtension2(soap, tag, id, (tt__ProfileExtension2 *const*)ptr, "tt:ProfileExtension2");
	case SOAP_TYPE_PointerTott__AudioDecoderConfiguration:
		return soap_out_PointerTott__AudioDecoderConfiguration(soap, tag, id, (tt__AudioDecoderConfiguration *const*)ptr, "tt:AudioDecoderConfiguration");
	case SOAP_TYPE_PointerTott__AudioOutputConfiguration:
		return soap_out_PointerTott__AudioOutputConfiguration(soap, tag, id, (tt__AudioOutputConfiguration *const*)ptr, "tt:AudioOutputConfiguration");
	case SOAP_TYPE_PointerTott__ProfileExtension:
		return soap_out_PointerTott__ProfileExtension(soap, tag, id, (tt__ProfileExtension *const*)ptr, "tt:ProfileExtension");
	case SOAP_TYPE_PointerTott__MetadataConfiguration:
		return soap_out_PointerTott__MetadataConfiguration(soap, tag, id, (tt__MetadataConfiguration *const*)ptr, "tt:MetadataConfiguration");
	case SOAP_TYPE_PointerTott__PTZConfiguration:
		return soap_out_PointerTott__PTZConfiguration(soap, tag, id, (tt__PTZConfiguration *const*)ptr, "tt:PTZConfiguration");
	case SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration:
		return soap_out_PointerTott__VideoAnalyticsConfiguration(soap, tag, id, (tt__VideoAnalyticsConfiguration *const*)ptr, "tt:VideoAnalyticsConfiguration");
	case SOAP_TYPE_PointerTott__AudioEncoderConfiguration:
		return soap_out_PointerTott__AudioEncoderConfiguration(soap, tag, id, (tt__AudioEncoderConfiguration *const*)ptr, "tt:AudioEncoderConfiguration");
	case SOAP_TYPE_PointerTott__VideoEncoderConfiguration:
		return soap_out_PointerTott__VideoEncoderConfiguration(soap, tag, id, (tt__VideoEncoderConfiguration *const*)ptr, "tt:VideoEncoderConfiguration");
	case SOAP_TYPE_PointerTott__AudioSourceConfiguration:
		return soap_out_PointerTott__AudioSourceConfiguration(soap, tag, id, (tt__AudioSourceConfiguration *const*)ptr, "tt:AudioSourceConfiguration");
	case SOAP_TYPE_PointerTott__VideoSourceConfiguration:
		return soap_out_PointerTott__VideoSourceConfiguration(soap, tag, id, (tt__VideoSourceConfiguration *const*)ptr, "tt:VideoSourceConfiguration");
	case SOAP_TYPE_PointerTott__VideoSourceExtension2:
		return soap_out_PointerTott__VideoSourceExtension2(soap, tag, id, (tt__VideoSourceExtension2 *const*)ptr, "tt:VideoSourceExtension2");
	case SOAP_TYPE_PointerTott__ImagingSettings20:
		return soap_out_PointerTott__ImagingSettings20(soap, tag, id, (tt__ImagingSettings20 *const*)ptr, "tt:ImagingSettings20");
	case SOAP_TYPE_PointerTott__IntRange:
		return soap_out_PointerTott__IntRange(soap, tag, id, (tt__IntRange *const*)ptr, "tt:IntRange");
	case SOAP_TYPE_PointerTott__LocationEntity:
		return soap_out_PointerTott__LocationEntity(soap, tag, id, (tt__LocationEntity *const*)ptr, "tt:LocationEntity");
	case SOAP_TYPE_PointerTotds__StorageConfigurationData:
		return soap_out_PointerTotds__StorageConfigurationData(soap, tag, id, (tds__StorageConfigurationData *const*)ptr, "tds:StorageConfigurationData");
	case SOAP_TYPE_PointerTotds__StorageConfiguration:
		return soap_out_PointerTotds__StorageConfiguration(soap, tag, id, (tds__StorageConfiguration *const*)ptr, "tds:StorageConfiguration");
	case SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension:
		return soap_out_PointerTo_tds__GetSystemUrisResponse_Extension(soap, tag, id, (_tds__GetSystemUrisResponse_Extension *const*)ptr, "tds:GetSystemUrisResponse-Extension");
	case SOAP_TYPE_PointerTott__SystemLogUriList:
		return soap_out_PointerTott__SystemLogUriList(soap, tag, id, (tt__SystemLogUriList *const*)ptr, "tt:SystemLogUriList");
	case SOAP_TYPE_PointerTott__Dot11AvailableNetworks:
		return soap_out_PointerTott__Dot11AvailableNetworks(soap, tag, id, (tt__Dot11AvailableNetworks *const*)ptr, "tt:Dot11AvailableNetworks");
	case SOAP_TYPE_PointerTott__Dot11Status:
		return soap_out_PointerTott__Dot11Status(soap, tag, id, (tt__Dot11Status *const*)ptr, "tt:Dot11Status");
	case SOAP_TYPE_PointerTott__Dot11Capabilities:
		return soap_out_PointerTott__Dot11Capabilities(soap, tag, id, (tt__Dot11Capabilities *const*)ptr, "tt:Dot11Capabilities");
	case SOAP_TYPE_PointerTott__AuxiliaryData:
		return soap_out_PointerTott__AuxiliaryData(soap, tag, id, (std::string *const*)ptr, "tt:AuxiliaryData");
	case SOAP_TYPE_PointerTott__RelayOutputSettings:
		return soap_out_PointerTott__RelayOutputSettings(soap, tag, id, (tt__RelayOutputSettings *const*)ptr, "tt:RelayOutputSettings");
	case SOAP_TYPE_PointerTott__RelayOutput:
		return soap_out_PointerTott__RelayOutput(soap, tag, id, (tt__RelayOutput *const*)ptr, "tt:RelayOutput");
	case SOAP_TYPE_PointerTott__Dot1XConfiguration:
		return soap_out_PointerTott__Dot1XConfiguration(soap, tag, id, (tt__Dot1XConfiguration *const*)ptr, "tt:Dot1XConfiguration");
	case SOAP_TYPE_PointerTott__CertificateInformation:
		return soap_out_PointerTott__CertificateInformation(soap, tag, id, (tt__CertificateInformation *const*)ptr, "tt:CertificateInformation");
	case SOAP_TYPE_PointerTott__CertificateWithPrivateKey:
		return soap_out_PointerTott__CertificateWithPrivateKey(soap, tag, id, (tt__CertificateWithPrivateKey *const*)ptr, "tt:CertificateWithPrivateKey");
	case SOAP_TYPE_PointerTott__CertificateStatus:
		return soap_out_PointerTott__CertificateStatus(soap, tag, id, (tt__CertificateStatus *const*)ptr, "tt:CertificateStatus");
	case SOAP_TYPE_PointerTott__Certificate:
		return soap_out_PointerTott__Certificate(soap, tag, id, (tt__Certificate *const*)ptr, "tt:Certificate");
	case SOAP_TYPE_PointerToxsd__dateTime:
		return soap_out_PointerToxsd__dateTime(soap, tag, id, (struct timeval *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerToxsd__token:
		return soap_out_PointerToxsd__token(soap, tag, id, (std::string *const*)ptr, "xsd:token");
	case SOAP_TYPE_PointerTott__BinaryData:
		return soap_out_PointerTott__BinaryData(soap, tag, id, (tt__BinaryData *const*)ptr, "tt:BinaryData");
	case SOAP_TYPE_PointerTott__IPAddressFilter:
		return soap_out_PointerTott__IPAddressFilter(soap, tag, id, (tt__IPAddressFilter *const*)ptr, "tt:IPAddressFilter");
	case SOAP_TYPE_PointerTott__NetworkZeroConfiguration:
		return soap_out_PointerTott__NetworkZeroConfiguration(soap, tag, id, (tt__NetworkZeroConfiguration *const*)ptr, "tt:NetworkZeroConfiguration");
	case SOAP_TYPE_PointerTott__NetworkGateway:
		return soap_out_PointerTott__NetworkGateway(soap, tag, id, (tt__NetworkGateway *const*)ptr, "tt:NetworkGateway");
	case SOAP_TYPE_PointerTott__NetworkProtocol:
		return soap_out_PointerTott__NetworkProtocol(soap, tag, id, (tt__NetworkProtocol *const*)ptr, "tt:NetworkProtocol");
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration:
		return soap_out_PointerTott__NetworkInterfaceSetConfiguration(soap, tag, id, (tt__NetworkInterfaceSetConfiguration *const*)ptr, "tt:NetworkInterfaceSetConfiguration");
	case SOAP_TYPE_PointerTott__NetworkInterface:
		return soap_out_PointerTott__NetworkInterface(soap, tag, id, (tt__NetworkInterface *const*)ptr, "tt:NetworkInterface");
	case SOAP_TYPE_PointerToxsd__duration:
		return soap_out_PointerToxsd__duration(soap, tag, id, (std::chrono::nanoseconds *const*)ptr, "xsd:duration");
	case SOAP_TYPE_PointerTott__DNSName:
		return soap_out_PointerTott__DNSName(soap, tag, id, (std::string *const*)ptr, "tt:DNSName");
	case SOAP_TYPE_PointerTott__DynamicDNSInformation:
		return soap_out_PointerTott__DynamicDNSInformation(soap, tag, id, (tt__DynamicDNSInformation *const*)ptr, "tt:DynamicDNSInformation");
	case SOAP_TYPE_PointerTott__NTPInformation:
		return soap_out_PointerTott__NTPInformation(soap, tag, id, (tt__NTPInformation *const*)ptr, "tt:NTPInformation");
	case SOAP_TYPE_PointerTott__IPAddress:
		return soap_out_PointerTott__IPAddress(soap, tag, id, (tt__IPAddress *const*)ptr, "tt:IPAddress");
	case SOAP_TYPE_PointerTott__DNSInformation:
		return soap_out_PointerTott__DNSInformation(soap, tag, id, (tt__DNSInformation *const*)ptr, "tt:DNSInformation");
	case SOAP_TYPE_PointerTott__HostnameInformation:
		return soap_out_PointerTott__HostnameInformation(soap, tag, id, (tt__HostnameInformation *const*)ptr, "tt:HostnameInformation");
	case SOAP_TYPE_PointerTott__Capabilities:
		return soap_out_PointerTott__Capabilities(soap, tag, id, (tt__Capabilities *const*)ptr, "tt:Capabilities");
	case SOAP_TYPE_PointerTott__User:
		return soap_out_PointerTott__User(soap, tag, id, (tt__User *const*)ptr, "tt:User");
	case SOAP_TYPE_PointerTott__RemoteUser:
		return soap_out_PointerTott__RemoteUser(soap, tag, id, (tt__RemoteUser *const*)ptr, "tt:RemoteUser");
	case SOAP_TYPE_PointerTott__NetworkHost:
		return soap_out_PointerTott__NetworkHost(soap, tag, id, (tt__NetworkHost *const*)ptr, "tt:NetworkHost");
	case SOAP_TYPE_PointerTott__Scope:
		return soap_out_PointerTott__Scope(soap, tag, id, (tt__Scope *const*)ptr, "tt:Scope");
	case SOAP_TYPE_PointerTott__SystemLog:
		return soap_out_PointerTott__SystemLog(soap, tag, id, (tt__SystemLog *const*)ptr, "tt:SystemLog");
	case SOAP_TYPE_PointerTott__SupportInformation:
		return soap_out_PointerTott__SupportInformation(soap, tag, id, (tt__SupportInformation *const*)ptr, "tt:SupportInformation");
	case SOAP_TYPE_PointerTott__BackupFile:
		return soap_out_PointerTott__BackupFile(soap, tag, id, (tt__BackupFile *const*)ptr, "tt:BackupFile");
	case SOAP_TYPE_PointerTott__AttachmentData:
		return soap_out_PointerTott__AttachmentData(soap, tag, id, (tt__AttachmentData *const*)ptr, "tt:AttachmentData");
	case SOAP_TYPE_PointerTott__SystemDateTime:
		return soap_out_PointerTott__SystemDateTime(soap, tag, id, (tt__SystemDateTime *const*)ptr, "tt:SystemDateTime");
	case SOAP_TYPE_PointerTott__DateTime:
		return soap_out_PointerTott__DateTime(soap, tag, id, (tt__DateTime *const*)ptr, "tt:DateTime");
	case SOAP_TYPE_PointerTott__TimeZone:
		return soap_out_PointerTott__TimeZone(soap, tag, id, (tt__TimeZone *const*)ptr, "tt:TimeZone");
	case SOAP_TYPE_PointerTotds__DeviceServiceCapabilities:
		return soap_out_PointerTotds__DeviceServiceCapabilities(soap, tag, id, (tds__DeviceServiceCapabilities *const*)ptr, "tds:DeviceServiceCapabilities");
	case SOAP_TYPE_PointerTotds__Service:
		return soap_out_PointerTotds__Service(soap, tag, id, (tds__Service *const*)ptr, "tds:Service");
	case SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension:
		return soap_out_PointerTo_tds__StorageConfigurationData_Extension(soap, tag, id, (_tds__StorageConfigurationData_Extension *const*)ptr, "tds:StorageConfigurationData-Extension");
	case SOAP_TYPE_PointerTotds__UserCredential:
		return soap_out_PointerTotds__UserCredential(soap, tag, id, (tds__UserCredential *const*)ptr, "tds:UserCredential");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_out_PointerToxsd__anyURI(soap, tag, id, (std::string *const*)ptr, "xsd:anyURI");
	case SOAP_TYPE_PointerTo_tds__UserCredential_Extension:
		return soap_out_PointerTo_tds__UserCredential_Extension(soap, tag, id, (_tds__UserCredential_Extension *const*)ptr, "tds:UserCredential-Extension");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTott__StringAttrList:
		return soap_out_PointerTott__StringAttrList(soap, tag, id, (std::string *const*)ptr, "tt:StringAttrList");
	case SOAP_TYPE_PointerTotds__EAPMethodTypes:
		return soap_out_PointerTotds__EAPMethodTypes(soap, tag, id, (std::string *const*)ptr, "tds:EAPMethodTypes");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerTotds__MiscCapabilities:
		return soap_out_PointerTotds__MiscCapabilities(soap, tag, id, (tds__MiscCapabilities *const*)ptr, "tds:MiscCapabilities");
	case SOAP_TYPE_PointerTotds__SystemCapabilities:
		return soap_out_PointerTotds__SystemCapabilities(soap, tag, id, (tds__SystemCapabilities *const*)ptr, "tds:SystemCapabilities");
	case SOAP_TYPE_PointerTotds__SecurityCapabilities:
		return soap_out_PointerTotds__SecurityCapabilities(soap, tag, id, (tds__SecurityCapabilities *const*)ptr, "tds:SecurityCapabilities");
	case SOAP_TYPE_PointerTotds__NetworkCapabilities:
		return soap_out_PointerTotds__NetworkCapabilities(soap, tag, id, (tds__NetworkCapabilities *const*)ptr, "tds:NetworkCapabilities");
	case SOAP_TYPE_PointerTott__OnvifVersion:
		return soap_out_PointerTott__OnvifVersion(soap, tag, id, (tt__OnvifVersion *const*)ptr, "tt:OnvifVersion");
	case SOAP_TYPE_PointerTo_tds__Service_Capabilities:
		return soap_out_PointerTo_tds__Service_Capabilities(soap, tag, id, (_tds__Service_Capabilities *const*)ptr, "tds:Service-Capabilities");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTochan__ChannelInstanceType:
		return soap_out_PointerTochan__ChannelInstanceType(soap, tag, id, (struct chan__ChannelInstanceType *const*)ptr, "chan:ChannelInstanceType");
	case SOAP_TYPE_PointerTo_wsa5__FaultTo:
		return soap_out_PointerTo_wsa5__FaultTo(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:FaultTo");
	case SOAP_TYPE_PointerTo_wsa5__ReplyTo:
		return soap_out_PointerTo_wsa5__ReplyTo(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:ReplyTo");
	case SOAP_TYPE_PointerTo_wsa5__From:
		return soap_out_PointerTo_wsa5__From(soap, tag, id, (struct wsa5__EndpointReferenceType *const*)ptr, "wsa5:From");
	case SOAP_TYPE_PointerTo_wsa5__RelatesTo:
		return soap_out_PointerTo_wsa5__RelatesTo(soap, tag, id, (struct wsa5__RelatesToType *const*)ptr, "wsa5:RelatesTo");
	case SOAP_TYPE__wsa5__ProblemIRI:
		return soap_out_string(soap, "wsa5:ProblemIRI", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__wsa5__ProblemHeaderQName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE__wsa5__Action:
		return soap_out_string(soap, "wsa5:Action", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__wsa5__To:
		return soap_out_string(soap, "wsa5:To", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__wsa5__MessageID:
		return soap_out_string(soap, "wsa5:MessageID", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTowsa5__MetadataType:
		return soap_out_PointerTowsa5__MetadataType(soap, tag, id, (struct wsa5__MetadataType *const*)ptr, "wsa5:MetadataType");
	case SOAP_TYPE_PointerTowsa5__ReferenceParametersType:
		return soap_out_PointerTowsa5__ReferenceParametersType(soap, tag, id, (struct wsa5__ReferenceParametersType *const*)ptr, "wsa5:ReferenceParametersType");
	case SOAP_TYPE_wsa5__FaultCodesOpenEnumType:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "wsa5:FaultCodesOpenEnumType");
	case SOAP_TYPE_wsa5__RelationshipTypeOpenEnum:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "wsa5:RelationshipTypeOpenEnum");
	case SOAP_TYPE_PointerTowsd__ProbeMatchesType:
		return soap_out_PointerTowsd__ProbeMatchesType(soap, tag, id, (struct wsd__ProbeMatchesType *const*)ptr, "wsd:ProbeMatchesType");
	case SOAP_TYPE_PointerTowsd__ProbeType:
		return soap_out_PointerTowsd__ProbeType(soap, tag, id, (struct wsd__ProbeType *const*)ptr, "wsd:ProbeType");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in gSoap\\soapC_001.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_tns1__dummy:
		soap_serialize_tns1__dummy(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_dn__dummy:
		soap_serialize_dn__dummy(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wsa__RetryAfter:
		soap_serialize__wsa__RetryAfter(soap, (const wsa__RetryAfterType *)ptr);
		break;
	case SOAP_TYPE__wsa__ReplyAfter:
		soap_serialize__wsa__ReplyAfter(soap, (const wsa__ReplyAfterType *)ptr);
		break;
	case SOAP_TYPE__wsa__FaultTo:
		soap_serialize__wsa__FaultTo(soap, (const wsa__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa__ReplyTo:
		soap_serialize__wsa__ReplyTo(soap, (const wsa__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa__From:
		soap_serialize__wsa__From(soap, (const wsa__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa__Action:
		soap_serialize__wsa__Action(soap, (const wsa__AttributedURI *)ptr);
		break;
	case SOAP_TYPE__wsa__To:
		soap_serialize__wsa__To(soap, (const wsa__AttributedURI *)ptr);
		break;
	case SOAP_TYPE__wsa__RelatesTo:
		soap_serialize__wsa__RelatesTo(soap, (const wsa__Relationship *)ptr);
		break;
	case SOAP_TYPE__wsa__MessageID:
		soap_serialize__wsa__MessageID(soap, (const wsa__AttributedURI *)ptr);
		break;
	case SOAP_TYPE__wsa__EndpointReference:
		soap_serialize__wsa__EndpointReference(soap, (const wsa__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsd__Id:
		soap_serialize__wsd__Id(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wsd__AppSequence:
		soap_serialize__wsd__AppSequence(soap, (const wsd__AppSequenceType *)ptr);
		break;
	case SOAP_TYPE__wsd__Sig:
		soap_serialize__wsd__Sig(soap, (const wsd__SigType *)ptr);
		break;
	case SOAP_TYPE__wsd__Security:
		soap_serialize__wsd__Security(soap, (const wsd__SecurityType *)ptr);
		break;
	case SOAP_TYPE__wsd__SupportedMatchingRules:
		soap_serialize__wsd__SupportedMatchingRules(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wsd__XAddrs:
		soap_serialize__wsd__XAddrs(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wsd__Scopes:
		soap_serialize__wsd__Scopes(soap, (const wsd__ScopesType *)ptr);
		break;
	case SOAP_TYPE__wsd__Types:
		soap_serialize__wsd__Types(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wsd__ResolveMatches:
		soap_serialize__wsd__ResolveMatches(soap, (const wsd__ResolveMatchesType *)ptr);
		break;
	case SOAP_TYPE__wsd__Resolve:
		soap_serialize__wsd__Resolve(soap, (const wsd__ResolveType *)ptr);
		break;
	case SOAP_TYPE__wsd__Bye:
		soap_serialize__wsd__Bye(soap, (const wsd__ByeType *)ptr);
		break;
	case SOAP_TYPE__wsd__Hello:
		soap_serialize__wsd__Hello(soap, (const wsd__HelloType *)ptr);
		break;
	case SOAP_TYPE__wsrf__ResourceUnavailableFault:
		soap_serialize__wsrf__ResourceUnavailableFault(soap, (const wsrf__ResourceUnavailableFaultType *)ptr);
		break;
	case SOAP_TYPE__wsrf__ResourceUnknownFault:
		soap_serialize__wsrf__ResourceUnknownFault(soap, (const wsrf__ResourceUnknownFaultType *)ptr);
		break;
	case SOAP_TYPE__tev__Capabilities:
		soap_serialize__tev__Capabilities(soap, (const tev__Capabilities *)ptr);
		break;
	case SOAP_TYPE__wstop__topicNamespaceLocation:
		soap_serialize__wstop__topicNamespaceLocation(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wstop__TopicSet:
		soap_serialize__wstop__TopicSet(soap, (const wstop__TopicSetType *)ptr);
		break;
	case SOAP_TYPE__wstop__TopicNamespace:
		soap_serialize__wstop__TopicNamespace(soap, (const wstop__TopicNamespaceType *)ptr);
		break;
	case SOAP_TYPE__wsrfbf__BaseFault:
		soap_serialize__wsrfbf__BaseFault(soap, (const wsrfbf__BaseFaultType *)ptr);
		break;
	case SOAP_TYPE__xop__Include:
		soap_serialize__xop__Include(soap, (const xop__Include *)ptr);
		break;
	case SOAP_TYPE__wsnt__ResumeFailedFault:
		soap_serialize__wsnt__ResumeFailedFault(soap, (const wsnt__ResumeFailedFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__PauseFailedFault:
		soap_serialize__wsnt__PauseFailedFault(soap, (const wsnt__PauseFailedFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault:
		soap_serialize__wsnt__UnableToDestroySubscriptionFault(soap, (const wsnt__UnableToDestroySubscriptionFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault:
		soap_serialize__wsnt__UnacceptableTerminationTimeFault(soap, (const wsnt__UnacceptableTerminationTimeFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnableToCreatePullPointFault:
		soap_serialize__wsnt__UnableToCreatePullPointFault(soap, (const wsnt__UnableToCreatePullPointFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnableToDestroyPullPointFault:
		soap_serialize__wsnt__UnableToDestroyPullPointFault(soap, (const wsnt__UnableToDestroyPullPointFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnableToGetMessagesFault:
		soap_serialize__wsnt__UnableToGetMessagesFault(soap, (const wsnt__UnableToGetMessagesFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault:
		soap_serialize__wsnt__NoCurrentMessageOnTopicFault(soap, (const wsnt__NoCurrentMessageOnTopicFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault:
		soap_serialize__wsnt__UnacceptableInitialTerminationTimeFault(soap, (const wsnt__UnacceptableInitialTerminationTimeFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault:
		soap_serialize__wsnt__NotifyMessageNotSupportedFault(soap, (const wsnt__NotifyMessageNotSupportedFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault:
		soap_serialize__wsnt__UnsupportedPolicyRequestFault(soap, (const wsnt__UnsupportedPolicyRequestFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault:
		soap_serialize__wsnt__UnrecognizedPolicyRequestFault(soap, (const wsnt__UnrecognizedPolicyRequestFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault:
		soap_serialize__wsnt__InvalidMessageContentExpressionFault(soap, (const wsnt__InvalidMessageContentExpressionFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault:
		soap_serialize__wsnt__InvalidProducerPropertiesExpressionFault(soap, (const wsnt__InvalidProducerPropertiesExpressionFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault:
		soap_serialize__wsnt__MultipleTopicsSpecifiedFault(soap, (const wsnt__MultipleTopicsSpecifiedFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__TopicNotSupportedFault:
		soap_serialize__wsnt__TopicNotSupportedFault(soap, (const wsnt__TopicNotSupportedFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__InvalidTopicExpressionFault:
		soap_serialize__wsnt__InvalidTopicExpressionFault(soap, (const wsnt__InvalidTopicExpressionFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault:
		soap_serialize__wsnt__TopicExpressionDialectUnknownFault(soap, (const wsnt__TopicExpressionDialectUnknownFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__InvalidFilterFault:
		soap_serialize__wsnt__InvalidFilterFault(soap, (const wsnt__InvalidFilterFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__SubscribeCreationFailedFault:
		soap_serialize__wsnt__SubscribeCreationFailedFault(soap, (const wsnt__SubscribeCreationFailedFaultType *)ptr);
		break;
	case SOAP_TYPE__wsnt__MessageContent:
		soap_serialize__wsnt__MessageContent(soap, (const wsnt__QueryExpressionType *)ptr);
		break;
	case SOAP_TYPE__wsnt__ProducerProperties:
		soap_serialize__wsnt__ProducerProperties(soap, (const wsnt__QueryExpressionType *)ptr);
		break;
	case SOAP_TYPE__wsnt__NotificationMessage:
		soap_serialize__wsnt__NotificationMessage(soap, (const wsnt__NotificationMessageHolderType *)ptr);
		break;
	case SOAP_TYPE__wsnt__Topic:
		soap_serialize__wsnt__Topic(soap, (const wsnt__TopicExpressionTypeCustom *)ptr);
		break;
	case SOAP_TYPE__wsnt__SubscriptionPolicy:
		soap_serialize__wsnt__SubscriptionPolicy(soap, (const wsnt__SubscriptionPolicyType *)ptr);
		break;
	case SOAP_TYPE__wsnt__Filter:
		soap_serialize__wsnt__Filter(soap, (const wsnt__FilterType *)ptr);
		break;
	case SOAP_TYPE__wsnt__TopicExpressionDialect:
		soap_serialize__wsnt__TopicExpressionDialect(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wsnt__TopicExpression:
		soap_serialize__wsnt__TopicExpression(soap, (const wsnt__TopicExpressionTypeCustom *)ptr);
		break;
	case SOAP_TYPE__tt__Polygon:
		soap_serialize__tt__Polygon(soap, (const tt__Polygon *)ptr);
		break;
	case SOAP_TYPE__tt__Polyline:
		soap_serialize__tt__Polyline(soap, (const tt__Polyline *)ptr);
		break;
	case SOAP_TYPE__tt__AudioDecoderConfiguration:
		soap_serialize__tt__AudioDecoderConfiguration(soap, (const tt__AudioDecoderConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__AudioOutputConfiguration:
		soap_serialize__tt__AudioOutputConfiguration(soap, (const tt__AudioOutputConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__MetadataConfiguration:
		soap_serialize__tt__MetadataConfiguration(soap, (const tt__MetadataConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__PTZConfiguration:
		soap_serialize__tt__PTZConfiguration(soap, (const tt__PTZConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__VideoAnalyticsConfiguration:
		soap_serialize__tt__VideoAnalyticsConfiguration(soap, (const tt__VideoAnalyticsConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__AudioEncoderConfiguration:
		soap_serialize__tt__AudioEncoderConfiguration(soap, (const tt__AudioEncoderConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__VideoEncoderConfiguration:
		soap_serialize__tt__VideoEncoderConfiguration(soap, (const tt__VideoEncoderConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__AudioSourceConfiguration:
		soap_serialize__tt__AudioSourceConfiguration(soap, (const tt__AudioSourceConfiguration *)ptr);
		break;
	case SOAP_TYPE__tt__VideoSourceConfiguration:
		soap_serialize__tt__VideoSourceConfiguration(soap, (const tt__VideoSourceConfiguration *)ptr);
		break;
	case SOAP_TYPE__tds__Capabilities:
		soap_serialize__tds__Capabilities(soap, (const tds__DeviceServiceCapabilities *)ptr);
		break;
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		((_wstop__TopicNamespaceType_Topic *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy:
		((_tev__CreatePullPointSubscription_SubscriptionPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		((_wsrfbf__BaseFaultType_FaultCause *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		((_wsrfbf__BaseFaultType_Description *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		((_wsrfbf__BaseFaultType_ErrorCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		((_wsnt__Subscribe_SubscriptionPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		((_wsnt__NotificationMessageHolderType_Message *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tt__ConfigDescription_Messages:
		((_tt__ConfigDescription_Messages *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tt__ItemListDescription_ElementItemDescription:
		((_tt__ItemListDescription_ElementItemDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription:
		((_tt__ItemListDescription_SimpleItemDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tt__ItemList_ElementItem:
		((_tt__ItemList_ElementItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tt__ItemList_SimpleItem:
		((_tt__ItemList_SimpleItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy:
		((_tt__EventSubscription_SubscriptionPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemUrisResponse_Extension:
		((_tds__GetSystemUrisResponse_Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__StorageConfigurationData_Extension:
		((_tds__StorageConfigurationData_Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__UserCredential_Extension:
		((_tds__UserCredential_Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__Service_Capabilities:
		((_tds__Service_Capabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobReference__:
		((tt__RecordingJobReference__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobReference:
		soap_serialize_tt__RecordingJobReference(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__JobToken__:
		((tt__JobToken__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__JobToken:
		soap_serialize_tt__JobToken(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__TrackReference__:
		((tt__TrackReference__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TrackReference:
		soap_serialize_tt__TrackReference(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__RecordingReference__:
		((tt__RecordingReference__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingReference:
		soap_serialize_tt__RecordingReference(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__ReceiverReference__:
		((tt__ReceiverReference__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReceiverReference:
		soap_serialize_tt__ReceiverReference(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wsa__FaultSubcodeValues__:
		((wsa__FaultSubcodeValues__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__RelationshipTypeValues__:
		((wsa__RelationshipTypeValues__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__FaultCodeType__:
		((wsd__FaultCodeType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__RelationshipType__:
		((wsd__RelationshipType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		((wstop__SimpleTopicExpression__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		soap_serialize_wstop__SimpleTopicExpression(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		((wstop__ConcreteTopicExpression__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		soap_serialize_wstop__ConcreteTopicExpression(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wstop__FullTopicExpression__:
		((wstop__FullTopicExpression__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__FullTopicExpression:
		soap_serialize_wstop__FullTopicExpression(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__Entity__:
		((tt__Entity__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MoveStatus__:
		((tt__MoveStatus__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReferenceToken__:
		((tt__ReferenceToken__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReferenceToken:
		soap_serialize_tt__ReferenceToken(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__OSDType__:
		((tt__OSDType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioClassType__:
		((tt__AudioClassType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioClassType:
		soap_serialize_tt__AudioClassType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__ModeOfOperation__:
		((tt__ModeOfOperation__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobState__:
		((tt__RecordingJobState__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobState:
		soap_serialize_tt__RecordingJobState(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__RecordingJobMode__:
		((tt__RecordingJobMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobMode:
		soap_serialize_tt__RecordingJobMode(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__TrackType__:
		((tt__TrackType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingStatus__:
		((tt__RecordingStatus__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SearchState__:
		((tt__SearchState__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__XPathExpression__:
		((tt__XPathExpression__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__XPathExpression:
		soap_serialize_tt__XPathExpression(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__Description__:
		((tt__Description__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Description:
		soap_serialize_tt__Description(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__ReceiverState__:
		((tt__ReceiverState__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReceiverMode__:
		((tt__ReceiverMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Direction__:
		((tt__Direction__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PropertyOperation__:
		((tt__PropertyOperation__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TopicNamespaceLocation__:
		((tt__TopicNamespaceLocation__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TopicNamespaceLocation:
		soap_serialize_tt__TopicNamespaceLocation(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__DefoggingMode__:
		((tt__DefoggingMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ToneCompensationMode__:
		((tt__ToneCompensationMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__:
		((tt__IrCutFilterAutoBoundaryType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImageStabilizationMode__:
		((tt__ImageStabilizationMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IrCutFilterMode__:
		((tt__IrCutFilterMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WhiteBalanceMode__:
		((tt__WhiteBalanceMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Enabled__:
		((tt__Enabled__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ExposureMode__:
		((tt__ExposureMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ExposurePriority__:
		((tt__ExposurePriority__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__BacklightCompensationMode__:
		((tt__BacklightCompensationMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WideDynamicMode__:
		((tt__WideDynamicMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AutoFocusMode__:
		((tt__AutoFocusMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourOperation__:
		((tt__PTZPresetTourOperation__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourDirection__:
		((tt__PTZPresetTourDirection__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourState__:
		((tt__PTZPresetTourState__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AuxiliaryData__:
		((tt__AuxiliaryData__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AuxiliaryData:
		soap_serialize_tt__AuxiliaryData(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__ReverseMode__:
		((tt__ReverseMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EFlipMode__:
		((tt__EFlipMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DigitalIdleState__:
		((tt__DigitalIdleState__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelayMode__:
		((tt__RelayMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelayIdleState__:
		((tt__RelayIdleState__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelayLogicalState__:
		((tt__RelayLogicalState__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__UserLevel__:
		((tt__UserLevel__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SetDateTimeType__:
		((tt__SetDateTimeType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FactoryDefaultType__:
		((tt__FactoryDefaultType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemLogType__:
		((tt__SystemLogType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CapabilityCategory__:
		((tt__CapabilityCategory__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite__:
		((tt__Dot11AuthAndMangementSuite__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11SignalStrength__:
		((tt__Dot11SignalStrength__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11PSKPassphrase__:
		((tt__Dot11PSKPassphrase__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11PSKPassphrase:
		soap_serialize_tt__Dot11PSKPassphrase(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__Dot11PSK__:
		((tt__Dot11PSK__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11PSK:
		soap_serialize_tt__Dot11PSK(soap, (const xsd__hexBinary *)ptr);
		break;
	case SOAP_TYPE_tt__Dot11Cipher__:
		((tt__Dot11Cipher__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11SecurityMode__:
		((tt__Dot11SecurityMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11StationMode__:
		((tt__Dot11StationMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11SSIDType__:
		((tt__Dot11SSIDType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11SSIDType:
		soap_serialize_tt__Dot11SSIDType(soap, (const xsd__hexBinary *)ptr);
		break;
	case SOAP_TYPE_tt__DynamicDNSType__:
		((tt__DynamicDNSType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPAddressFilterType__:
		((tt__IPAddressFilterType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Domain__:
		((tt__Domain__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Domain:
		soap_serialize_tt__Domain(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__DNSName__:
		((tt__DNSName__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DNSName:
		soap_serialize_tt__DNSName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__IPType__:
		((tt__IPType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__HwAddress__:
		((tt__HwAddress__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__HwAddress:
		soap_serialize_tt__HwAddress(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__IPv6Address__:
		((tt__IPv6Address__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv6Address:
		soap_serialize_tt__IPv6Address(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__IPv4Address__:
		((tt__IPv4Address__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv4Address:
		soap_serialize_tt__IPv4Address(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__NetworkHostType__:
		((tt__NetworkHostType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkProtocolType__:
		((tt__NetworkProtocolType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv6DHCPConfiguration__:
		((tt__IPv6DHCPConfiguration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IANA_IfTypes__:
		((tt__IANA_IfTypes__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Duplex__:
		((tt__Duplex__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority__:
		((tt__NetworkInterfaceConfigPriority__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority:
		soap_serialize_tt__NetworkInterfaceConfigPriority(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__DiscoveryMode__:
		((tt__DiscoveryMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ScopeDefinition__:
		((tt__ScopeDefinition__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TransportProtocol__:
		((tt__TransportProtocol__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__StreamType__:
		((tt__StreamType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataCompressionType__:
		((tt__MetadataCompressionType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioEncodingMimeNames__:
		((tt__AudioEncodingMimeNames__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioEncoding__:
		((tt__AudioEncoding__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncodingProfiles__:
		((tt__VideoEncodingProfiles__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncodingMimeNames__:
		((tt__VideoEncodingMimeNames__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__H264Profile__:
		((tt__H264Profile__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Mpeg4Profile__:
		((tt__Mpeg4Profile__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncoding__:
		((tt__VideoEncoding__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ViewModes__:
		((tt__ViewModes__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SceneOrientationOption__:
		((tt__SceneOrientationOption__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SceneOrientationMode__:
		((tt__SceneOrientationMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RotateMode__:
		((tt__RotateMode__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Name__:
		((tt__Name__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Name:
		soap_serialize_tt__Name(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tds__StorageType__:
		((tds__StorageType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__AutoGeoModes__:
		((tds__AutoGeoModes__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__FaultCodeOpenType:
		soap_serialize_wsd__FaultCodeOpenType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wsd__UriListType:
		soap_serialize_wsd__UriListType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wsd__QNameListType:
		soap_serialize_wsd__QNameListType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wsd__OpenRelationshipType:
		soap_serialize_wsd__OpenRelationshipType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		soap_serialize_wsnt__AbsoluteOrRelativeTimeType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__ReferenceTokenList:
		soap_serialize_tt__ReferenceTokenList(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__StringAttrList:
		soap_serialize_tt__StringAttrList(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__FloatAttrList:
		soap_serialize_tt__FloatAttrList(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tt__IntAttrList:
		soap_serialize_tt__IntAttrList(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tds__EAPMethodTypes:
		soap_serialize_tds__EAPMethodTypes(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tmk__VideoSurveillanceSystem:
		((tmk__VideoSurveillanceSystem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__MetalDetector:
		((tmk__MetalDetector *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__SteamDetector:
		((tmk__SteamDetector *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__RadiationMonitoring:
		((tmk__RadiationMonitoring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__NeutronProbing:
		((tmk__NeutronProbing *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__Introscopy:
		((tmk__Introscopy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__GasAnalysis:
		((tmk__GasAnalysis *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__FireAlarm:
		((tmk__FireAlarm *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tmk__AccessControl:
		((tmk__AccessControl *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__AttributedURI:
		((wsa__AttributedURI *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__AttributedQName:
		((wsa__AttributedQName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__RetryAfterType:
		((wsa__RetryAfterType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__ReplyAfterType:
		((wsa__ReplyAfterType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__Relationship:
		((wsa__Relationship *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__ServiceNameType:
		((wsa__ServiceNameType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__ReferenceParametersType:
		((wsa__ReferenceParametersType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__ReferencePropertiesType:
		((wsa__ReferencePropertiesType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsa__EndpointReferenceType:
		((wsa__EndpointReferenceType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__AppSequenceType:
		((wsd__AppSequenceType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__SigType:
		((wsd__SigType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__SecurityType:
		((wsd__SecurityType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__ScopesType:
		((wsd__ScopesType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__ResolveMatchType:
		((wsd__ResolveMatchType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__ResolveMatchesType:
		((wsd__ResolveMatchesType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__ResolveType:
		((wsd__ResolveType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__ProbeMatchType:
		((wsd__ProbeMatchType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__ByeType:
		((wsd__ByeType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsd__HelloType:
		((wsd__HelloType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsrf__ResourceUnavailableFaultType:
		((wsrf__ResourceUnavailableFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsrf__ResourceUnknownFaultType:
		((wsrf__ResourceUnknownFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__GetEventPropertiesResponse:
		((_tev__GetEventPropertiesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__GetEventProperties:
		((_tev__GetEventProperties *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__SetSynchronizationPointResponse:
		((_tev__SetSynchronizationPointResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__SetSynchronizationPoint:
		((_tev__SetSynchronizationPoint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__SeekResponse:
		((_tev__SeekResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__Seek:
		((_tev__Seek *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__PullMessagesFaultResponse:
		((_tev__PullMessagesFaultResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__PullMessagesResponse:
		((_tev__PullMessagesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__PullMessages:
		((_tev__PullMessages *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscriptionResponse:
		((_tev__CreatePullPointSubscriptionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscription:
		((_tev__CreatePullPointSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__GetServiceCapabilitiesResponse:
		((_tev__GetServiceCapabilitiesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tev__GetServiceCapabilities:
		((_tev__GetServiceCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tev__SubscriptionPolicy:
		((tev__SubscriptionPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tev__Capabilities:
		((tev__Capabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__TopicSetType:
		((wstop__TopicSetType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__TopicType:
		((wstop__TopicType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__TopicNamespaceType:
		((wstop__TopicNamespaceType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__QueryExpressionType:
		((wstop__QueryExpressionType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		((wstop__ExtensibleDocumented *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wstop__Documentation:
		((wstop__Documentation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		((wsrfbf__BaseFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xop__Include:
		((xop__Include *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		((_wsnt__ResumeSubscriptionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__ResumeSubscription:
		((_wsnt__ResumeSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		((_wsnt__PauseSubscriptionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__PauseSubscription:
		((_wsnt__PauseSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		((_wsnt__UnsubscribeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Unsubscribe:
		((_wsnt__Unsubscribe *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__RenewResponse:
		((_wsnt__RenewResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Renew:
		((_wsnt__Renew *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		((_wsnt__CreatePullPointResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__CreatePullPoint:
		((_wsnt__CreatePullPoint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		((_wsnt__DestroyPullPointResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		((_wsnt__DestroyPullPoint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		((_wsnt__GetMessagesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetMessages:
		((_wsnt__GetMessages *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		((_wsnt__GetCurrentMessageResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		((_wsnt__GetCurrentMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__SubscribeResponse:
		((_wsnt__SubscribeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Subscribe:
		((_wsnt__Subscribe *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__UseRaw:
		((_wsnt__UseRaw *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__Notify:
		((_wsnt__Notify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		((_wsnt__SubscriptionManagerRP *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		((_wsnt__NotificationProducerRP *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		((wsnt__ResumeFailedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		((wsnt__PauseFailedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		((wsnt__UnableToDestroySubscriptionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		((wsnt__UnacceptableTerminationTimeFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		((wsnt__UnableToCreatePullPointFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		((wsnt__UnableToDestroyPullPointFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		((wsnt__UnableToGetMessagesFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		((wsnt__NoCurrentMessageOnTopicFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		((wsnt__UnacceptableInitialTerminationTimeFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		((wsnt__NotifyMessageNotSupportedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		((wsnt__UnsupportedPolicyRequestFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		((wsnt__UnrecognizedPolicyRequestFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		((wsnt__InvalidMessageContentExpressionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		((wsnt__InvalidProducerPropertiesExpressionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		((wsnt__MultipleTopicsSpecifiedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		((wsnt__TopicNotSupportedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		((wsnt__InvalidTopicExpressionFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		((wsnt__TopicExpressionDialectUnknownFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		((wsnt__InvalidFilterFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		((wsnt__SubscribeCreationFailedFaultType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		((wsnt__NotificationMessageHolderType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		((wsnt__SubscriptionPolicyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__FilterType:
		((wsnt__FilterType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__TopicExpressionTypeCustom:
		((wsnt__TopicExpressionTypeCustom *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsnt__QueryExpressionType:
		((wsnt__QueryExpressionType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tt__Message:
		((_tt__Message *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LocationEntity:
		((tt__LocationEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LocalOrientation:
		((tt__LocalOrientation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LocalLocation:
		((tt__LocalLocation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__GeoOrientation:
		((tt__GeoOrientation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__GeoLocation:
		((tt__GeoLocation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TransformationExtension:
		((tt__TransformationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Transformation:
		((tt__Transformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ColorCovariance:
		((tt__ColorCovariance *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Color:
		((tt__Color *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Polygon:
		((tt__Polygon *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Rectangle:
		((tt__Rectangle *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Vector:
		((tt__Vector *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZMoveStatus:
		((tt__PTZMoveStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZStatus:
		((tt__PTZStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZVector:
		((tt__PTZVector *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Vector1D:
		((tt__Vector1D *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Vector2D:
		((tt__Vector2D *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__StorageReferencePathExtension:
		((tt__StorageReferencePathExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__StorageReferencePath:
		((tt__StorageReferencePath *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ArrayOfFileProgressExtension:
		((tt__ArrayOfFileProgressExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ArrayOfFileProgress:
		((tt__ArrayOfFileProgress *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FileProgress:
		((tt__FileProgress *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDConfigurationOptionsExtension:
		((tt__OSDConfigurationOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDConfigurationOptions:
		((tt__OSDConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MaximumNumberOfOSDs:
		((tt__MaximumNumberOfOSDs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDConfigurationExtension:
		((tt__OSDConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDConfiguration:
		((tt__OSDConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDImgOptionsExtension:
		((tt__OSDImgOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDImgOptions:
		((tt__OSDImgOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDTextOptionsExtension:
		((tt__OSDTextOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDTextOptions:
		((tt__OSDTextOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDColorOptionsExtension:
		((tt__OSDColorOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDColorOptions:
		((tt__OSDColorOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ColorOptions:
		((tt__ColorOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ColorspaceRange:
		((tt__ColorspaceRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDImgConfigurationExtension:
		((tt__OSDImgConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDImgConfiguration:
		((tt__OSDImgConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDTextConfigurationExtension:
		((tt__OSDTextConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDTextConfiguration:
		((tt__OSDTextConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDColor:
		((tt__OSDColor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDPosConfigurationExtension:
		((tt__OSDPosConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDPosConfiguration:
		((tt__OSDPosConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OSDReference:
		((tt__OSDReference *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ProfileStatusExtension:
		((tt__ProfileStatusExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ProfileStatus:
		((tt__ProfileStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ActiveConnection:
		((tt__ActiveConnection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioClassDescriptorExtension:
		((tt__AudioClassDescriptorExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioClassDescriptor:
		((tt__AudioClassDescriptor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioClassCandidate:
		((tt__AudioClassCandidate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ActionEngineEventPayloadExtension:
		((tt__ActionEngineEventPayloadExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ActionEngineEventPayload:
		((tt__ActionEngineEventPayload *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsState:
		((tt__AnalyticsState *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsStateInformation:
		((tt__AnalyticsStateInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineControl:
		((tt__AnalyticsEngineControl *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataInputExtension:
		((tt__MetadataInputExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataInput:
		((tt__MetadataInput *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SourceIdentificationExtension:
		((tt__SourceIdentificationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SourceIdentification:
		((tt__SourceIdentification *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInput:
		((tt__AnalyticsEngineInput *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension:
		((tt__AnalyticsEngineInputInfoExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInputInfo:
		((tt__AnalyticsEngineInputInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EngineConfiguration:
		((tt__EngineConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension:
		((tt__AnalyticsDeviceEngineConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration:
		((tt__AnalyticsDeviceEngineConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsEngine:
		((tt__AnalyticsEngine *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReplayConfiguration:
		((tt__ReplayConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__GetRecordingJobsResponseItem:
		((tt__GetRecordingJobsResponseItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobStateTrack:
		((tt__RecordingJobStateTrack *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobStateTracks:
		((tt__RecordingJobStateTracks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobStateSource:
		((tt__RecordingJobStateSource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobStateInformationExtension:
		((tt__RecordingJobStateInformationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobStateInformation:
		((tt__RecordingJobStateInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobTrack:
		((tt__RecordingJobTrack *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobSourceExtension:
		((tt__RecordingJobSourceExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobSource:
		((tt__RecordingJobSource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobConfigurationExtension:
		((tt__RecordingJobConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingJobConfiguration:
		((tt__RecordingJobConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__GetTracksResponseItem:
		((tt__GetTracksResponseItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__GetTracksResponseList:
		((tt__GetTracksResponseList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__GetRecordingsResponseItem:
		((tt__GetRecordingsResponseItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TrackConfiguration:
		((tt__TrackConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingConfiguration:
		((tt__RecordingConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataAttributes:
		((tt__MetadataAttributes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioAttributes:
		((tt__AudioAttributes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoAttributes:
		((tt__VideoAttributes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TrackAttributesExtension:
		((tt__TrackAttributesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TrackAttributes:
		((tt__TrackAttributes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MediaAttributes:
		((tt__MediaAttributes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TrackInformation:
		((tt__TrackInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingSourceInformation:
		((tt__RecordingSourceInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingInformation:
		((tt__RecordingInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FindMetadataResult:
		((tt__FindMetadataResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FindMetadataResultList:
		((tt__FindMetadataResultList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FindPTZPositionResult:
		((tt__FindPTZPositionResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FindPTZPositionResultList:
		((tt__FindPTZPositionResultList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FindEventResult:
		((tt__FindEventResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FindEventResultList:
		((tt__FindEventResultList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FindRecordingResultList:
		((tt__FindRecordingResultList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataFilter:
		((tt__MetadataFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPositionFilter:
		((tt__PTZPositionFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EventFilter:
		((tt__EventFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SearchScopeExtension:
		((tt__SearchScopeExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SearchScope:
		((tt__SearchScope *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingSummary:
		((tt__RecordingSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DateTimeRange:
		((tt__DateTimeRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SourceReference:
		((tt__SourceReference *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReceiverStateInformation:
		((tt__ReceiverStateInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReceiverConfiguration:
		((tt__ReceiverConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Receiver:
		((tt__Receiver *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PaneOptionExtension:
		((tt__PaneOptionExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PaneLayoutOptions:
		((tt__PaneLayoutOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LayoutOptionsExtension:
		((tt__LayoutOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LayoutOptions:
		((tt__LayoutOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CodingCapabilities:
		((tt__CodingCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LayoutExtension:
		((tt__LayoutExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Layout:
		((tt__Layout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PaneLayout:
		((tt__PaneLayout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PaneConfiguration:
		((tt__PaneConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CellLayout:
		((tt__CellLayout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MotionExpressionConfiguration:
		((tt__MotionExpressionConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MotionExpression:
		((tt__MotionExpression *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PolylineArrayConfiguration:
		((tt__PolylineArrayConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PolylineArrayExtension:
		((tt__PolylineArrayExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PolylineArray:
		((tt__PolylineArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PolygonConfiguration:
		((tt__PolygonConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SupportedAnalyticsModulesExtension:
		((tt__SupportedAnalyticsModulesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SupportedAnalyticsModules:
		((tt__SupportedAnalyticsModules *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SupportedRulesExtension:
		((tt__SupportedRulesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SupportedRules:
		((tt__SupportedRules *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ConfigDescriptionExtension:
		((tt__ConfigDescriptionExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ConfigDescription:
		((tt__ConfigDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Config:
		((tt__Config *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RuleEngineConfigurationExtension:
		((tt__RuleEngineConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RuleEngineConfiguration:
		((tt__RuleEngineConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension:
		((tt__AnalyticsEngineConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineConfiguration:
		((tt__AnalyticsEngineConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Polyline:
		((tt__Polyline *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ItemListDescriptionExtension:
		((tt__ItemListDescriptionExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ItemListDescription:
		((tt__ItemListDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MessageDescriptionExtension:
		((tt__MessageDescriptionExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MessageDescription:
		((tt__MessageDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ItemListExtension:
		((tt__ItemListExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ItemList:
		((tt__ItemList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MessageExtension:
		((tt__MessageExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NoiseReductionOptions:
		((tt__NoiseReductionOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DefoggingOptions:
		((tt__DefoggingOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ToneCompensationOptions:
		((tt__ToneCompensationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusOptions20Extension:
		((tt__FocusOptions20Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusOptions20:
		((tt__FocusOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions20Extension:
		((tt__WhiteBalanceOptions20Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions20:
		((tt__WhiteBalanceOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusConfiguration20Extension:
		((tt__FocusConfiguration20Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusConfiguration20:
		((tt__FocusConfiguration20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WhiteBalance20Extension:
		((tt__WhiteBalance20Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WhiteBalance20:
		((tt__WhiteBalance20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelativeFocusOptions20:
		((tt__RelativeFocusOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MoveOptions20:
		((tt__MoveOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ExposureOptions20:
		((tt__ExposureOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__BacklightCompensationOptions20:
		((tt__BacklightCompensationOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WideDynamicRangeOptions20:
		((tt__WideDynamicRangeOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension:
		((tt__IrCutFilterAutoAdjustmentOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions:
		((tt__IrCutFilterAutoAdjustmentOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImageStabilizationOptionsExtension:
		((tt__ImageStabilizationOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImageStabilizationOptions:
		((tt__ImageStabilizationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension4:
		((tt__ImagingOptions20Extension4 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension3:
		((tt__ImagingOptions20Extension3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension2:
		((tt__ImagingOptions20Extension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension:
		((tt__ImagingOptions20Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingOptions20:
		((tt__ImagingOptions20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NoiseReduction:
		((tt__NoiseReduction *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DefoggingExtension:
		((tt__DefoggingExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Defogging:
		((tt__Defogging *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ToneCompensationExtension:
		((tt__ToneCompensationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ToneCompensation:
		((tt__ToneCompensation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Exposure20:
		((tt__Exposure20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__BacklightCompensation20:
		((tt__BacklightCompensation20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WideDynamicRange20:
		((tt__WideDynamicRange20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension:
		((tt__IrCutFilterAutoAdjustmentExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustment:
		((tt__IrCutFilterAutoAdjustment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImageStabilizationExtension:
		((tt__ImageStabilizationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImageStabilization:
		((tt__ImageStabilization *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension204:
		((tt__ImagingSettingsExtension204 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension203:
		((tt__ImagingSettingsExtension203 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension202:
		((tt__ImagingSettingsExtension202 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension20:
		((tt__ImagingSettingsExtension20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingSettings20:
		((tt__ImagingSettings20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusStatus20Extension:
		((tt__FocusStatus20Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusStatus20:
		((tt__FocusStatus20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingStatus20Extension:
		((tt__ImagingStatus20Extension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingStatus20:
		((tt__ImagingStatus20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WhiteBalance:
		((tt__WhiteBalance *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ContinuousFocusOptions:
		((tt__ContinuousFocusOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelativeFocusOptions:
		((tt__RelativeFocusOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AbsoluteFocusOptions:
		((tt__AbsoluteFocusOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MoveOptions:
		((tt__MoveOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ContinuousFocus:
		((tt__ContinuousFocus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelativeFocus:
		((tt__RelativeFocus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AbsoluteFocus:
		((tt__AbsoluteFocus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusMove:
		((tt__FocusMove *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions:
		((tt__WhiteBalanceOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ExposureOptions:
		((tt__ExposureOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusOptions:
		((tt__FocusOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__BacklightCompensationOptions:
		((tt__BacklightCompensationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WideDynamicRangeOptions:
		((tt__WideDynamicRangeOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingOptions:
		((tt__ImagingOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__BacklightCompensation:
		((tt__BacklightCompensation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__WideDynamicRange:
		((tt__WideDynamicRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Exposure:
		((tt__Exposure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension:
		((tt__ImagingSettingsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingSettings:
		((tt__ImagingSettings *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusConfiguration:
		((tt__FocusConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FocusStatus:
		((tt__FocusStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingStatus:
		((tt__ImagingStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension:
		((tt__PTZPresetTourStartingConditionOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions:
		((tt__PTZPresetTourStartingConditionOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension:
		((tt__PTZPresetTourPresetDetailOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions:
		((tt__PTZPresetTourPresetDetailOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpotOptions:
		((tt__PTZPresetTourSpotOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourOptions:
		((tt__PTZPresetTourOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension:
		((tt__PTZPresetTourStartingConditionExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingCondition:
		((tt__PTZPresetTourStartingCondition *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStatusExtension:
		((tt__PTZPresetTourStatusExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStatus:
		((tt__PTZPresetTourStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourTypeExtension:
		((tt__PTZPresetTourTypeExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetail:
		((tt__PTZPresetTourPresetDetail *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpotExtension:
		((tt__PTZPresetTourSpotExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpot:
		((tt__PTZPresetTourSpot *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourExtension:
		((tt__PTZPresetTourExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PresetTour:
		((tt__PresetTour *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPreset:
		((tt__PTZPreset *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZSpeed:
		((tt__PTZSpeed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Space1DDescription:
		((tt__Space1DDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Space2DDescription:
		((tt__Space2DDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZSpacesExtension:
		((tt__PTZSpacesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZSpaces:
		((tt__PTZSpaces *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ZoomLimits:
		((tt__ZoomLimits *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PanTiltLimits:
		((tt__PanTiltLimits *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReverseOptionsExtension:
		((tt__ReverseOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReverseOptions:
		((tt__ReverseOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EFlipOptionsExtension:
		((tt__EFlipOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EFlipOptions:
		((tt__EFlipOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTControlDirectionOptionsExtension:
		((tt__PTControlDirectionOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTControlDirectionOptions:
		((tt__PTControlDirectionOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZConfigurationOptions2:
		((tt__PTZConfigurationOptions2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZConfigurationOptions:
		((tt__PTZConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Reverse:
		((tt__Reverse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EFlip:
		((tt__EFlip *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTControlDirectionExtension:
		((tt__PTControlDirectionExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTControlDirection:
		((tt__PTControlDirection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZConfigurationExtension2:
		((tt__PTZConfigurationExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZConfigurationExtension:
		((tt__PTZConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZConfiguration:
		((tt__PTZConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSupportedExtension:
		((tt__PTZPresetTourSupportedExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSupported:
		((tt__PTZPresetTourSupported *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZNodeExtension2:
		((tt__PTZNodeExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZNodeExtension:
		((tt__PTZNodeExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZNode:
		((tt__PTZNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DigitalInput:
		((tt__DigitalInput *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelayOutput:
		((tt__RelayOutput *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RelayOutputSettings:
		((tt__RelayOutputSettings *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__GenericEapPwdConfigurationExtension:
		((tt__GenericEapPwdConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TLSConfiguration:
		((tt__TLSConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EapMethodExtension:
		((tt__EapMethodExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EAPMethodConfiguration:
		((tt__EAPMethodConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot1XConfigurationExtension:
		((tt__Dot1XConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot1XConfiguration:
		((tt__Dot1XConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CertificateInformationExtension:
		((tt__CertificateInformationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CertificateUsage:
		((tt__CertificateUsage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CertificateInformation:
		((tt__CertificateInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CertificateWithPrivateKey:
		((tt__CertificateWithPrivateKey *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CertificateStatus:
		((tt__CertificateStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Certificate:
		((tt__Certificate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CertificateGenerationParametersExtension:
		((tt__CertificateGenerationParametersExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CertificateGenerationParameters:
		((tt__CertificateGenerationParameters *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__UserExtension:
		((tt__UserExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__User:
		((tt__User *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RemoteUser:
		((tt__RemoteUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__TimeZone:
		((tt__TimeZone *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Time:
		((tt__Time *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Date:
		((tt__Date *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DateTime:
		((tt__DateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemDateTimeExtension:
		((tt__SystemDateTimeExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemDateTime:
		((tt__SystemDateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemLogUri:
		((tt__SystemLogUri *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemLogUriList:
		((tt__SystemLogUriList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__BackupFile:
		((tt__BackupFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AttachmentData:
		((tt__AttachmentData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__BinaryData:
		((tt__BinaryData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SupportInformation:
		((tt__SupportInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemLog:
		((tt__SystemLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceExtension:
		((tt__AnalyticsDeviceExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceCapabilities:
		((tt__AnalyticsDeviceCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReceiverCapabilities:
		((tt__ReceiverCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ReplayCapabilities:
		((tt__ReplayCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SearchCapabilities:
		((tt__SearchCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RecordingCapabilities:
		((tt__RecordingCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DisplayCapabilities:
		((tt__DisplayCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DeviceIOCapabilities:
		((tt__DeviceIOCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZCapabilities:
		((tt__PTZCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ImagingCapabilities:
		((tt__ImagingCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__OnvifVersion:
		((tt__OnvifVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemCapabilitiesExtension2:
		((tt__SystemCapabilitiesExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemCapabilitiesExtension:
		((tt__SystemCapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SystemCapabilities:
		((tt__SystemCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension2:
		((tt__SecurityCapabilitiesExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension:
		((tt__SecurityCapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SecurityCapabilities:
		((tt__SecurityCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension2:
		((tt__NetworkCapabilitiesExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension:
		((tt__NetworkCapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkCapabilities:
		((tt__NetworkCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ProfileCapabilities:
		((tt__ProfileCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension:
		((tt__RealTimeStreamingCapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RealTimeStreamingCapabilities:
		((tt__RealTimeStreamingCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MediaCapabilitiesExtension:
		((tt__MediaCapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MediaCapabilities:
		((tt__MediaCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IOCapabilitiesExtension2:
		((tt__IOCapabilitiesExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IOCapabilitiesExtension:
		((tt__IOCapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IOCapabilities:
		((tt__IOCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EventCapabilities:
		((tt__EventCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DeviceCapabilitiesExtension:
		((tt__DeviceCapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DeviceCapabilities:
		((tt__DeviceCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnalyticsCapabilities:
		((tt__AnalyticsCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CapabilitiesExtension2:
		((tt__CapabilitiesExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__CapabilitiesExtension:
		((tt__CapabilitiesExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Capabilities:
		((tt__Capabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11AvailableNetworksExtension:
		((tt__Dot11AvailableNetworksExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11AvailableNetworks:
		((tt__Dot11AvailableNetworks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11Status:
		((tt__Dot11Status *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11Capabilities:
		((tt__Dot11Capabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2:
		((tt__NetworkInterfaceSetConfigurationExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11PSKSetExtension:
		((tt__Dot11PSKSetExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11PSKSet:
		((tt__Dot11PSKSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11SecurityConfigurationExtension:
		((tt__Dot11SecurityConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11SecurityConfiguration:
		((tt__Dot11SecurityConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot11Configuration:
		((tt__Dot11Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPAddressFilterExtension:
		((tt__IPAddressFilterExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPAddressFilter:
		((tt__IPAddressFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension2:
		((tt__NetworkZeroConfigurationExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension:
		((tt__NetworkZeroConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkZeroConfiguration:
		((tt__NetworkZeroConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkGateway:
		((tt__NetworkGateway *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration:
		((tt__IPv4NetworkInterfaceSetConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration:
		((tt__IPv6NetworkInterfaceSetConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension:
		((tt__NetworkInterfaceSetConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfiguration:
		((tt__NetworkInterfaceSetConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DynamicDNSInformationExtension:
		((tt__DynamicDNSInformationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DynamicDNSInformation:
		((tt__DynamicDNSInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NTPInformationExtension:
		((tt__NTPInformationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NTPInformation:
		((tt__NTPInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DNSInformationExtension:
		((tt__DNSInformationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DNSInformation:
		((tt__DNSInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__HostnameInformationExtension:
		((tt__HostnameInformationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__HostnameInformation:
		((tt__HostnameInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PrefixedIPv6Address:
		((tt__PrefixedIPv6Address *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PrefixedIPv4Address:
		((tt__PrefixedIPv4Address *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPAddress:
		((tt__IPAddress *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkHostExtension:
		((tt__NetworkHostExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkHost:
		((tt__NetworkHost *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkProtocolExtension:
		((tt__NetworkProtocolExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkProtocol:
		((tt__NetworkProtocol *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv6ConfigurationExtension:
		((tt__IPv6ConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv6Configuration:
		((tt__IPv6Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv4Configuration:
		((tt__IPv4Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv4NetworkInterface:
		((tt__IPv4NetworkInterface *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IPv6NetworkInterface:
		((tt__IPv6NetworkInterface *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceInfo:
		((tt__NetworkInterfaceInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConnectionSetting:
		((tt__NetworkInterfaceConnectionSetting *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceLink:
		((tt__NetworkInterfaceLink *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceExtension2:
		((tt__NetworkInterfaceExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Dot3Configuration:
		((tt__Dot3Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceExtension:
		((tt__NetworkInterfaceExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__NetworkInterface:
		((tt__NetworkInterface *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Scope:
		((tt__Scope *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MediaUri:
		((tt__MediaUri *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Transport:
		((tt__Transport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__StreamSetup:
		((tt__StreamSetup *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MulticastConfiguration:
		((tt__MulticastConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension:
		((tt__AudioDecoderConfigurationOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__G726DecOptions:
		((tt__G726DecOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AACDecOptions:
		((tt__AACDecOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__G711DecOptions:
		((tt__G711DecOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptions:
		((tt__AudioDecoderConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioDecoderConfiguration:
		((tt__AudioDecoderConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioOutputConfigurationOptions:
		((tt__AudioOutputConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioOutputConfiguration:
		((tt__AudioOutputConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioOutput:
		((tt__AudioOutput *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension:
		((tt__VideoDecoderConfigurationOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Mpeg4DecOptions:
		((tt__Mpeg4DecOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__JpegDecOptions:
		((tt__JpegDecOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__H264DecOptions:
		((tt__H264DecOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptions:
		((tt__VideoDecoderConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoOutputConfigurationOptions:
		((tt__VideoOutputConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoOutputConfiguration:
		((tt__VideoOutputConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoOutputExtension:
		((tt__VideoOutputExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoOutput:
		((tt__VideoOutput *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZStatusFilterOptionsExtension:
		((tt__PTZStatusFilterOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZStatusFilterOptions:
		((tt__PTZStatusFilterOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2:
		((tt__MetadataConfigurationOptionsExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension:
		((tt__MetadataConfigurationOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptions:
		((tt__MetadataConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__EventSubscription:
		((tt__EventSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__PTZFilter:
		((tt__PTZFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationExtension:
		((tt__MetadataConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__MetadataConfiguration:
		((tt__MetadataConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoAnalyticsConfiguration:
		((tt__VideoAnalyticsConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions:
		((tt__AudioEncoder2ConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioEncoder2Configuration:
		((tt__AudioEncoder2Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioEncoderConfigurationOption:
		((tt__AudioEncoderConfigurationOption *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioEncoderConfigurationOptions:
		((tt__AudioEncoderConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioEncoderConfiguration:
		((tt__AudioEncoderConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioSourceOptionsExtension:
		((tt__AudioSourceOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioSourceConfigurationOptions:
		((tt__AudioSourceConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioSourceConfiguration:
		((tt__AudioSourceConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions:
		((tt__VideoEncoder2ConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoRateControl2:
		((tt__VideoRateControl2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoResolution2:
		((tt__VideoResolution2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncoder2Configuration:
		((tt__VideoEncoder2Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__H264Options2:
		((tt__H264Options2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__H264Options:
		((tt__H264Options *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Mpeg4Options2:
		((tt__Mpeg4Options2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Mpeg4Options:
		((tt__Mpeg4Options *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__JpegOptions2:
		((tt__JpegOptions2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__JpegOptions:
		((tt__JpegOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension2:
		((tt__VideoEncoderOptionsExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension:
		((tt__VideoEncoderOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncoderConfigurationOptions:
		((tt__VideoEncoderConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__H264Configuration:
		((tt__H264Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Mpeg4Configuration:
		((tt__Mpeg4Configuration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoRateControl:
		((tt__VideoRateControl *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoResolution:
		((tt__VideoResolution *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoEncoderConfiguration:
		((tt__VideoEncoderConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__SceneOrientation:
		((tt__SceneOrientation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RotateOptionsExtension:
		((tt__RotateOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RotateOptions:
		((tt__RotateOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2:
		((tt__VideoSourceConfigurationOptionsExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension:
		((tt__VideoSourceConfigurationOptionsExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptions:
		((tt__VideoSourceConfigurationOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LensDescription:
		((tt__LensDescription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LensOffset:
		((tt__LensOffset *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__LensProjection:
		((tt__LensProjection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__RotateExtension:
		((tt__RotateExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Rotate:
		((tt__Rotate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension2:
		((tt__VideoSourceConfigurationExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension:
		((tt__VideoSourceConfigurationExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceConfiguration:
		((tt__VideoSourceConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ConfigurationEntity:
		((tt__ConfigurationEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ProfileExtension2:
		((tt__ProfileExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__ProfileExtension:
		((tt__ProfileExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__Profile:
		((tt__Profile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AudioSource:
		((tt__AudioSource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceExtension2:
		((tt__VideoSourceExtension2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSourceExtension:
		((tt__VideoSourceExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__VideoSource:
		((tt__VideoSource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__AnyHolder:
		((tt__AnyHolder *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FloatList:
		((tt__FloatList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IntList:
		((tt__IntList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DurationRange:
		((tt__DurationRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__FloatRange:
		((tt__FloatRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IntRange:
		((tt__IntRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IntRectangleRange:
		((tt__IntRectangleRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__IntRectangle:
		((tt__IntRectangle *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tt__DeviceEntity:
		((tt__DeviceEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteGeoLocationResponse:
		((_tds__DeleteGeoLocationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteGeoLocation:
		((_tds__DeleteGeoLocation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetGeoLocationResponse:
		((_tds__SetGeoLocationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetGeoLocation:
		((_tds__SetGeoLocation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetGeoLocationResponse:
		((_tds__GetGeoLocationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetGeoLocation:
		((_tds__GetGeoLocation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteStorageConfigurationResponse:
		((_tds__DeleteStorageConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteStorageConfiguration:
		((_tds__DeleteStorageConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetStorageConfigurationResponse:
		((_tds__SetStorageConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetStorageConfiguration:
		((_tds__SetStorageConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetStorageConfigurationResponse:
		((_tds__GetStorageConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetStorageConfiguration:
		((_tds__GetStorageConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateStorageConfigurationResponse:
		((_tds__CreateStorageConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateStorageConfiguration:
		((_tds__CreateStorageConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetStorageConfigurationsResponse:
		((_tds__GetStorageConfigurationsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetStorageConfigurations:
		((_tds__GetStorageConfigurations *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__StartSystemRestoreResponse:
		((_tds__StartSystemRestoreResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__StartSystemRestore:
		((_tds__StartSystemRestore *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__StartFirmwareUpgradeResponse:
		((_tds__StartFirmwareUpgradeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__StartFirmwareUpgrade:
		((_tds__StartFirmwareUpgrade *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemUrisResponse:
		((_tds__GetSystemUrisResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemUris:
		((_tds__GetSystemUris *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse:
		((_tds__ScanAvailableDot11NetworksResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__ScanAvailableDot11Networks:
		((_tds__ScanAvailableDot11Networks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot11StatusResponse:
		((_tds__GetDot11StatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot11Status:
		((_tds__GetDot11Status *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot11CapabilitiesResponse:
		((_tds__GetDot11CapabilitiesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot11Capabilities:
		((_tds__GetDot11Capabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SendAuxiliaryCommandResponse:
		((_tds__SendAuxiliaryCommandResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SendAuxiliaryCommand:
		((_tds__SendAuxiliaryCommand *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRelayOutputStateResponse:
		((_tds__SetRelayOutputStateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRelayOutputState:
		((_tds__SetRelayOutputState *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRelayOutputSettingsResponse:
		((_tds__SetRelayOutputSettingsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRelayOutputSettings:
		((_tds__SetRelayOutputSettings *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetRelayOutputsResponse:
		((_tds__GetRelayOutputsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetRelayOutputs:
		((_tds__GetRelayOutputs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteDot1XConfigurationResponse:
		((_tds__DeleteDot1XConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteDot1XConfiguration:
		((_tds__DeleteDot1XConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurationsResponse:
		((_tds__GetDot1XConfigurationsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurations:
		((_tds__GetDot1XConfigurations *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurationResponse:
		((_tds__GetDot1XConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDot1XConfiguration:
		((_tds__GetDot1XConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDot1XConfigurationResponse:
		((_tds__SetDot1XConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDot1XConfiguration:
		((_tds__SetDot1XConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateDot1XConfigurationResponse:
		((_tds__CreateDot1XConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateDot1XConfiguration:
		((_tds__CreateDot1XConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__LoadCACertificatesResponse:
		((_tds__LoadCACertificatesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__LoadCACertificates:
		((_tds__LoadCACertificates *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCertificateInformationResponse:
		((_tds__GetCertificateInformationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCertificateInformation:
		((_tds__GetCertificateInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse:
		((_tds__LoadCertificateWithPrivateKeyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKey:
		((_tds__LoadCertificateWithPrivateKey *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCACertificatesResponse:
		((_tds__GetCACertificatesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCACertificates:
		((_tds__GetCACertificates *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetClientCertificateModeResponse:
		((_tds__SetClientCertificateModeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetClientCertificateMode:
		((_tds__SetClientCertificateMode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetClientCertificateModeResponse:
		((_tds__GetClientCertificateModeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetClientCertificateMode:
		((_tds__GetClientCertificateMode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__LoadCertificatesResponse:
		((_tds__LoadCertificatesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__LoadCertificates:
		((_tds__LoadCertificates *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetPkcs10RequestResponse:
		((_tds__GetPkcs10RequestResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetPkcs10Request:
		((_tds__GetPkcs10Request *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteCertificatesResponse:
		((_tds__DeleteCertificatesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteCertificates:
		((_tds__DeleteCertificates *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetCertificatesStatusResponse:
		((_tds__SetCertificatesStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetCertificatesStatus:
		((_tds__SetCertificatesStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCertificatesStatusResponse:
		((_tds__GetCertificatesStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCertificatesStatus:
		((_tds__GetCertificatesStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCertificatesResponse:
		((_tds__GetCertificatesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCertificates:
		((_tds__GetCertificates *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateCertificateResponse:
		((_tds__CreateCertificateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateCertificate:
		((_tds__CreateCertificate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetAccessPolicyResponse:
		((_tds__SetAccessPolicyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetAccessPolicy:
		((_tds__SetAccessPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetAccessPolicyResponse:
		((_tds__GetAccessPolicyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetAccessPolicy:
		((_tds__GetAccessPolicy *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__RemoveIPAddressFilterResponse:
		((_tds__RemoveIPAddressFilterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__RemoveIPAddressFilter:
		((_tds__RemoveIPAddressFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__AddIPAddressFilterResponse:
		((_tds__AddIPAddressFilterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__AddIPAddressFilter:
		((_tds__AddIPAddressFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetIPAddressFilterResponse:
		((_tds__SetIPAddressFilterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetIPAddressFilter:
		((_tds__SetIPAddressFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetIPAddressFilterResponse:
		((_tds__GetIPAddressFilterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetIPAddressFilter:
		((_tds__GetIPAddressFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetZeroConfigurationResponse:
		((_tds__SetZeroConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetZeroConfiguration:
		((_tds__SetZeroConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetZeroConfigurationResponse:
		((_tds__GetZeroConfigurationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetZeroConfiguration:
		((_tds__GetZeroConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse:
		((_tds__SetNetworkDefaultGatewayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNetworkDefaultGateway:
		((_tds__SetNetworkDefaultGateway *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse:
		((_tds__GetNetworkDefaultGatewayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNetworkDefaultGateway:
		((_tds__GetNetworkDefaultGateway *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNetworkProtocolsResponse:
		((_tds__SetNetworkProtocolsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNetworkProtocols:
		((_tds__SetNetworkProtocols *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNetworkProtocolsResponse:
		((_tds__GetNetworkProtocolsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNetworkProtocols:
		((_tds__GetNetworkProtocols *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNetworkInterfacesResponse:
		((_tds__SetNetworkInterfacesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNetworkInterfaces:
		((_tds__SetNetworkInterfaces *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNetworkInterfacesResponse:
		((_tds__GetNetworkInterfacesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNetworkInterfaces:
		((_tds__GetNetworkInterfaces *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDynamicDNSResponse:
		((_tds__SetDynamicDNSResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDynamicDNS:
		((_tds__SetDynamicDNS *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDynamicDNSResponse:
		((_tds__GetDynamicDNSResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDynamicDNS:
		((_tds__GetDynamicDNS *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNTPResponse:
		((_tds__SetNTPResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetNTP:
		((_tds__SetNTP *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNTPResponse:
		((_tds__GetNTPResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetNTP:
		((_tds__GetNTP *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDNSResponse:
		((_tds__SetDNSResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDNS:
		((_tds__SetDNS *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDNSResponse:
		((_tds__GetDNSResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDNS:
		((_tds__GetDNS *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetHostnameFromDHCPResponse:
		((_tds__SetHostnameFromDHCPResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetHostnameFromDHCP:
		((_tds__SetHostnameFromDHCP *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetHostnameResponse:
		((_tds__SetHostnameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetHostname:
		((_tds__SetHostname *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetHostnameResponse:
		((_tds__GetHostnameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetHostname:
		((_tds__GetHostname *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCapabilitiesResponse:
		((_tds__GetCapabilitiesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetCapabilities:
		((_tds__GetCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetWsdlUrlResponse:
		((_tds__GetWsdlUrlResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetWsdlUrl:
		((_tds__GetWsdlUrl *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetUserResponse:
		((_tds__SetUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetUser:
		((_tds__SetUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteUsersResponse:
		((_tds__DeleteUsersResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__DeleteUsers:
		((_tds__DeleteUsers *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateUsersResponse:
		((_tds__CreateUsersResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__CreateUsers:
		((_tds__CreateUsers *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetUsersResponse:
		((_tds__GetUsersResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetUsers:
		((_tds__GetUsers *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRemoteUserResponse:
		((_tds__SetRemoteUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRemoteUser:
		((_tds__SetRemoteUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetRemoteUserResponse:
		((_tds__GetRemoteUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetRemoteUser:
		((_tds__GetRemoteUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetEndpointReferenceResponse:
		((_tds__GetEndpointReferenceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetEndpointReference:
		((_tds__GetEndpointReference *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDPAddressesResponse:
		((_tds__SetDPAddressesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDPAddresses:
		((_tds__SetDPAddresses *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDPAddressesResponse:
		((_tds__GetDPAddressesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDPAddresses:
		((_tds__GetDPAddresses *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse:
		((_tds__SetRemoteDiscoveryModeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetRemoteDiscoveryMode:
		((_tds__SetRemoteDiscoveryMode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse:
		((_tds__GetRemoteDiscoveryModeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetRemoteDiscoveryMode:
		((_tds__GetRemoteDiscoveryMode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDiscoveryModeResponse:
		((_tds__SetDiscoveryModeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetDiscoveryMode:
		((_tds__SetDiscoveryMode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDiscoveryModeResponse:
		((_tds__GetDiscoveryModeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDiscoveryMode:
		((_tds__GetDiscoveryMode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__RemoveScopesResponse:
		((_tds__RemoveScopesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__RemoveScopes:
		((_tds__RemoveScopes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__AddScopesResponse:
		((_tds__AddScopesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__AddScopes:
		((_tds__AddScopes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetScopesResponse:
		((_tds__SetScopesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetScopes:
		((_tds__SetScopes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetScopesResponse:
		((_tds__GetScopesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetScopes:
		((_tds__GetScopes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemLogResponse:
		((_tds__GetSystemLogResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemLog:
		((_tds__GetSystemLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemSupportInformationResponse:
		((_tds__GetSystemSupportInformationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemSupportInformation:
		((_tds__GetSystemSupportInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemBackupResponse:
		((_tds__GetSystemBackupResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemBackup:
		((_tds__GetSystemBackup *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__RestoreSystemResponse:
		((_tds__RestoreSystemResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__RestoreSystem:
		((_tds__RestoreSystem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SystemRebootResponse:
		((_tds__SystemRebootResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SystemReboot:
		((_tds__SystemReboot *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__UpgradeSystemFirmwareResponse:
		((_tds__UpgradeSystemFirmwareResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__UpgradeSystemFirmware:
		((_tds__UpgradeSystemFirmware *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetSystemFactoryDefaultResponse:
		((_tds__SetSystemFactoryDefaultResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetSystemFactoryDefault:
		((_tds__SetSystemFactoryDefault *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemDateAndTimeResponse:
		((_tds__GetSystemDateAndTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetSystemDateAndTime:
		((_tds__GetSystemDateAndTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetSystemDateAndTimeResponse:
		((_tds__SetSystemDateAndTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__SetSystemDateAndTime:
		((_tds__SetSystemDateAndTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDeviceInformationResponse:
		((_tds__GetDeviceInformationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetDeviceInformation:
		((_tds__GetDeviceInformation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetServiceCapabilitiesResponse:
		((_tds__GetServiceCapabilitiesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetServiceCapabilities:
		((_tds__GetServiceCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetServicesResponse:
		((_tds__GetServicesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tds__GetServices:
		((_tds__GetServices *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__StorageConfiguration:
		((tds__StorageConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__StorageConfigurationData:
		((tds__StorageConfigurationData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__UserCredential:
		((tds__UserCredential *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__MiscCapabilities:
		((tds__MiscCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__SystemCapabilities:
		((tds__SystemCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__SecurityCapabilities:
		((tds__SecurityCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__NetworkCapabilities:
		((tds__NetworkCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__DeviceServiceCapabilities:
		((tds__DeviceServiceCapabilities *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tds__Service:
		((tds__Service *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__xml__lang:
		soap_serialize__xml__lang(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__xmime__contentType:
		soap_serialize__xmime__contentType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__unsignedInt_:
		((xsd__unsignedInt_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__token__:
		((xsd__token__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__token:
		soap_serialize_xsd__token(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__string_:
		((xsd__string_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger__:
		((xsd__nonNegativeInteger__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		soap_serialize_xsd__nonNegativeInteger(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__integer__:
		((xsd__integer__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__int_:
		((xsd__int_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__hexBinary__:
		((xsd__hexBinary__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__float_:
		((xsd__float_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration__:
		((xsd__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__double_:
		((xsd__double_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__dateTime__:
		((xsd__dateTime__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean_:
		((xsd__boolean_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary__:
		((xsd__base64Binary__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI__:
		((xsd__anyURI__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anySimpleType__:
		((xsd__anySimpleType__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		soap_serialize_xsd__anySimpleType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__QName__:
		((xsd__QName__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__NCName__:
		((xsd__NCName__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__NCName:
		soap_serialize_xsd__NCName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__IDREFS__:
		((xsd__IDREFS__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREFS:
		soap_serialize_xsd__IDREFS(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__ID__:
		((xsd__ID__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Envelope:
		soap_serialize_SOAP_ENV__Envelope(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__hexBinary:
		((xsd__hexBinary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::chrono::nanoseconds *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__QName:
		soap_serialize_xsd__QName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__wsse__Security:
		soap_serialize__wsse__Security(soap, (const struct _wsse__Security *)ptr);
		break;
	case SOAP_TYPE__saml2__EncryptedAttribute:
		soap_serialize__saml2__EncryptedAttribute(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Attribute:
		soap_serialize__saml2__Attribute(soap, (const struct saml2__AttributeType *)ptr);
		break;
	case SOAP_TYPE__saml2__AttributeStatement:
		soap_serialize__saml2__AttributeStatement(soap, (const struct saml2__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Evidence:
		soap_serialize__saml2__Evidence(soap, (const struct saml2__EvidenceType *)ptr);
		break;
	case SOAP_TYPE__saml2__Action:
		soap_serialize__saml2__Action(soap, (const struct saml2__ActionType *)ptr);
		break;
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		soap_serialize__saml2__AuthzDecisionStatement(soap, (const struct saml2__AuthzDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE__saml2__AuthnContext:
		soap_serialize__saml2__AuthnContext(soap, (const struct saml2__AuthnContextType *)ptr);
		break;
	case SOAP_TYPE__saml2__SubjectLocality:
		soap_serialize__saml2__SubjectLocality(soap, (const struct saml2__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE__saml2__AuthnStatement:
		soap_serialize__saml2__AuthnStatement(soap, (const struct saml2__AuthnStatementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Statement:
		soap_serialize__saml2__Statement(soap, (const struct saml2__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml2__EncryptedAssertion:
		soap_serialize__saml2__EncryptedAssertion(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Advice:
		soap_serialize__saml2__Advice(soap, (const struct saml2__AdviceType *)ptr);
		break;
	case SOAP_TYPE__saml2__ProxyRestriction:
		soap_serialize__saml2__ProxyRestriction(soap, (const struct saml2__ProxyRestrictionType *)ptr);
		break;
	case SOAP_TYPE__saml2__OneTimeUse:
		soap_serialize__saml2__OneTimeUse(soap, (const struct saml2__OneTimeUseType *)ptr);
		break;
	case SOAP_TYPE__saml2__AudienceRestriction:
		soap_serialize__saml2__AudienceRestriction(soap, (const struct saml2__AudienceRestrictionType *)ptr);
		break;
	case SOAP_TYPE__saml2__Condition:
		soap_serialize__saml2__Condition(soap, (const struct saml2__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml2__Conditions:
		soap_serialize__saml2__Conditions(soap, (const struct saml2__ConditionsType *)ptr);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		soap_serialize__saml2__SubjectConfirmationData(soap, (const struct saml2__SubjectConfirmationDataType *)ptr);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmation:
		soap_serialize__saml2__SubjectConfirmation(soap, (const struct saml2__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE__saml2__Subject:
		soap_serialize__saml2__Subject(soap, (const struct saml2__SubjectType *)ptr);
		break;
	case SOAP_TYPE__saml2__Assertion:
		soap_serialize__saml2__Assertion(soap, (const struct saml2__AssertionType *)ptr);
		break;
	case SOAP_TYPE__saml2__Issuer:
		soap_serialize__saml2__Issuer(soap, (const struct saml2__NameIDType *)ptr);
		break;
	case SOAP_TYPE__saml2__EncryptedID:
		soap_serialize__saml2__EncryptedID(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE__saml2__NameID:
		soap_serialize__saml2__NameID(soap, (const struct saml2__NameIDType *)ptr);
		break;
	case SOAP_TYPE__saml2__BaseID:
		soap_serialize__saml2__BaseID(soap, (const struct saml2__BaseIDAbstractType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		soap_serialize___saml2__union_AttributeStatementType(soap, (const struct __saml2__union_AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_EvidenceType:
		soap_serialize___saml2__union_EvidenceType(soap, (const struct __saml2__union_EvidenceType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_AdviceType:
		soap_serialize___saml2__union_AdviceType(soap, (const struct __saml2__union_AdviceType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_ConditionsType:
		soap_serialize___saml2__union_ConditionsType(soap, (const struct __saml2__union_ConditionsType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_AssertionType:
		soap_serialize___saml2__union_AssertionType(soap, (const struct __saml2__union_AssertionType *)ptr);
		break;
	case SOAP_TYPE_saml2__AttributeType:
		soap_serialize_saml2__AttributeType(soap, (const struct saml2__AttributeType *)ptr);
		break;
	case SOAP_TYPE_saml2__AttributeStatementType:
		soap_serialize_saml2__AttributeStatementType(soap, (const struct saml2__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE_saml2__EvidenceType:
		soap_serialize_saml2__EvidenceType(soap, (const struct saml2__EvidenceType *)ptr);
		break;
	case SOAP_TYPE_saml2__ActionType:
		soap_serialize_saml2__ActionType(soap, (const struct saml2__ActionType *)ptr);
		break;
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		soap_serialize_saml2__AuthzDecisionStatementType(soap, (const struct saml2__AuthzDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE_saml2__AuthnContextType:
		soap_serialize_saml2__AuthnContextType(soap, (const struct saml2__AuthnContextType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectLocalityType:
		soap_serialize_saml2__SubjectLocalityType(soap, (const struct saml2__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE_saml2__AuthnStatementType:
		soap_serialize_saml2__AuthnStatementType(soap, (const struct saml2__AuthnStatementType *)ptr);
		break;
	case SOAP_TYPE_saml2__StatementAbstractType:
		soap_serialize_saml2__StatementAbstractType(soap, (const struct saml2__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml2__AdviceType:
		soap_serialize_saml2__AdviceType(soap, (const struct saml2__AdviceType *)ptr);
		break;
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		soap_serialize_saml2__ProxyRestrictionType(soap, (const struct saml2__ProxyRestrictionType *)ptr);
		break;
	case SOAP_TYPE_saml2__OneTimeUseType:
		soap_serialize_saml2__OneTimeUseType(soap, (const struct saml2__OneTimeUseType *)ptr);
		break;
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		soap_serialize_saml2__AudienceRestrictionType(soap, (const struct saml2__AudienceRestrictionType *)ptr);
		break;
	case SOAP_TYPE_saml2__ConditionAbstractType:
		soap_serialize_saml2__ConditionAbstractType(soap, (const struct saml2__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml2__ConditionsType:
		soap_serialize_saml2__ConditionsType(soap, (const struct saml2__ConditionsType *)ptr);
		break;
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		soap_serialize_saml2__KeyInfoConfirmationDataType(soap, (const struct saml2__KeyInfoConfirmationDataType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		soap_serialize_saml2__SubjectConfirmationDataType(soap, (const struct saml2__SubjectConfirmationDataType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		soap_serialize_saml2__SubjectConfirmationType(soap, (const struct saml2__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectType:
		soap_serialize_saml2__SubjectType(soap, (const struct saml2__SubjectType *)ptr);
		break;
	case SOAP_TYPE_saml2__AssertionType:
		soap_serialize_saml2__AssertionType(soap, (const struct saml2__AssertionType *)ptr);
		break;
	case SOAP_TYPE_saml2__EncryptedElementType:
		soap_serialize_saml2__EncryptedElementType(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE_saml2__NameIDType:
		soap_serialize_saml2__NameIDType(soap, (const struct saml2__NameIDType *)ptr);
		break;
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		soap_serialize_saml2__BaseIDAbstractType(soap, (const struct saml2__BaseIDAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Attribute:
		soap_serialize__saml1__Attribute(soap, (const struct saml1__AttributeType *)ptr);
		break;
	case SOAP_TYPE__saml1__AttributeDesignator:
		soap_serialize__saml1__AttributeDesignator(soap, (const struct saml1__AttributeDesignatorType *)ptr);
		break;
	case SOAP_TYPE__saml1__AttributeStatement:
		soap_serialize__saml1__AttributeStatement(soap, (const struct saml1__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE__saml1__Evidence:
		soap_serialize__saml1__Evidence(soap, (const struct saml1__EvidenceType *)ptr);
		break;
	case SOAP_TYPE__saml1__Action:
		soap_serialize__saml1__Action(soap, (const struct saml1__ActionType *)ptr);
		break;
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		soap_serialize__saml1__AuthorizationDecisionStatement(soap, (const struct saml1__AuthorizationDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE__saml1__AuthorityBinding:
		soap_serialize__saml1__AuthorityBinding(soap, (const struct saml1__AuthorityBindingType *)ptr);
		break;
	case SOAP_TYPE__saml1__SubjectLocality:
		soap_serialize__saml1__SubjectLocality(soap, (const struct saml1__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE__saml1__AuthenticationStatement:
		soap_serialize__saml1__AuthenticationStatement(soap, (const struct saml1__AuthenticationStatementType *)ptr);
		break;
	case SOAP_TYPE__saml1__SubjectConfirmation:
		soap_serialize__saml1__SubjectConfirmation(soap, (const struct saml1__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE__saml1__NameIdentifier:
		soap_serialize__saml1__NameIdentifier(soap, (const struct saml1__NameIdentifierType *)ptr);
		break;
	case SOAP_TYPE__saml1__Subject:
		soap_serialize__saml1__Subject(soap, (const struct saml1__SubjectType *)ptr);
		break;
	case SOAP_TYPE__saml1__SubjectStatement:
		soap_serialize__saml1__SubjectStatement(soap, (const struct saml1__SubjectStatementAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Statement:
		soap_serialize__saml1__Statement(soap, (const struct saml1__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Advice:
		soap_serialize__saml1__Advice(soap, (const struct saml1__AdviceType *)ptr);
		break;
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		soap_serialize__saml1__DoNotCacheCondition(soap, (const struct saml1__DoNotCacheConditionType *)ptr);
		break;
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		soap_serialize__saml1__AudienceRestrictionCondition(soap, (const struct saml1__AudienceRestrictionConditionType *)ptr);
		break;
	case SOAP_TYPE__saml1__Condition:
		soap_serialize__saml1__Condition(soap, (const struct saml1__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Conditions:
		soap_serialize__saml1__Conditions(soap, (const struct saml1__ConditionsType *)ptr);
		break;
	case SOAP_TYPE__saml1__Assertion:
		soap_serialize__saml1__Assertion(soap, (const struct saml1__AssertionType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_EvidenceType:
		soap_serialize___saml1__union_EvidenceType(soap, (const struct __saml1__union_EvidenceType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_AdviceType:
		soap_serialize___saml1__union_AdviceType(soap, (const struct __saml1__union_AdviceType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_ConditionsType:
		soap_serialize___saml1__union_ConditionsType(soap, (const struct __saml1__union_ConditionsType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_AssertionType:
		soap_serialize___saml1__union_AssertionType(soap, (const struct __saml1__union_AssertionType *)ptr);
		break;
	case SOAP_TYPE_saml1__AttributeType:
		soap_serialize_saml1__AttributeType(soap, (const struct saml1__AttributeType *)ptr);
		break;
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		soap_serialize_saml1__AttributeDesignatorType(soap, (const struct saml1__AttributeDesignatorType *)ptr);
		break;
	case SOAP_TYPE_saml1__AttributeStatementType:
		soap_serialize_saml1__AttributeStatementType(soap, (const struct saml1__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE_saml1__EvidenceType:
		soap_serialize_saml1__EvidenceType(soap, (const struct saml1__EvidenceType *)ptr);
		break;
	case SOAP_TYPE_saml1__ActionType:
		soap_serialize_saml1__ActionType(soap, (const struct saml1__ActionType *)ptr);
		break;
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		soap_serialize_saml1__AuthorizationDecisionStatementType(soap, (const struct saml1__AuthorizationDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE_saml1__AuthorityBindingType:
		soap_serialize_saml1__AuthorityBindingType(soap, (const struct saml1__AuthorityBindingType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectLocalityType:
		soap_serialize_saml1__SubjectLocalityType(soap, (const struct saml1__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		soap_serialize_saml1__AuthenticationStatementType(soap, (const struct saml1__AuthenticationStatementType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		soap_serialize_saml1__SubjectConfirmationType(soap, (const struct saml1__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE_saml1__NameIdentifierType:
		soap_serialize_saml1__NameIdentifierType(soap, (const struct saml1__NameIdentifierType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectType:
		soap_serialize_saml1__SubjectType(soap, (const struct saml1__SubjectType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		soap_serialize_saml1__SubjectStatementAbstractType(soap, (const struct saml1__SubjectStatementAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml1__StatementAbstractType:
		soap_serialize_saml1__StatementAbstractType(soap, (const struct saml1__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml1__AdviceType:
		soap_serialize_saml1__AdviceType(soap, (const struct saml1__AdviceType *)ptr);
		break;
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		soap_serialize_saml1__DoNotCacheConditionType(soap, (const struct saml1__DoNotCacheConditionType *)ptr);
		break;
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		soap_serialize_saml1__AudienceRestrictionConditionType(soap, (const struct saml1__AudienceRestrictionConditionType *)ptr);
		break;
	case SOAP_TYPE_saml1__ConditionAbstractType:
		soap_serialize_saml1__ConditionAbstractType(soap, (const struct saml1__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml1__ConditionsType:
		soap_serialize_saml1__ConditionsType(soap, (const struct saml1__ConditionsType *)ptr);
		break;
	case SOAP_TYPE_saml1__AssertionType:
		soap_serialize_saml1__AssertionType(soap, (const struct saml1__AssertionType *)ptr);
		break;
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, (const struct __wsc__DerivedKeyTokenType_sequence *)ptr);
		break;
	case SOAP_TYPE_wsc__PropertiesType:
		soap_serialize_wsc__PropertiesType(soap, (const struct wsc__PropertiesType *)ptr);
		break;
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		soap_serialize_wsc__DerivedKeyTokenType(soap, (const struct wsc__DerivedKeyTokenType *)ptr);
		break;
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		soap_serialize_wsc__SecurityContextTokenType(soap, (const struct wsc__SecurityContextTokenType *)ptr);
		break;
	case SOAP_TYPE___xenc__union_ReferenceList:
		soap_serialize___xenc__union_ReferenceList(soap, (const struct __xenc__union_ReferenceList *)ptr);
		break;
	case SOAP_TYPE__xenc__ReferenceList:
		soap_serialize__xenc__ReferenceList(soap, (const struct _xenc__ReferenceList *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		soap_serialize_xenc__EncryptionPropertyType(soap, (const struct xenc__EncryptionPropertyType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		soap_serialize_xenc__EncryptionPropertiesType(soap, (const struct xenc__EncryptionPropertiesType *)ptr);
		break;
	case SOAP_TYPE_xenc__ReferenceType:
		soap_serialize_xenc__ReferenceType(soap, (const struct xenc__ReferenceType *)ptr);
		break;
	case SOAP_TYPE_xenc__AgreementMethodType:
		soap_serialize_xenc__AgreementMethodType(soap, (const struct xenc__AgreementMethodType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptedKeyType:
		soap_serialize_xenc__EncryptedKeyType(soap, (const struct xenc__EncryptedKeyType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptedDataType:
		soap_serialize_xenc__EncryptedDataType(soap, (const struct xenc__EncryptedDataType *)ptr);
		break;
	case SOAP_TYPE_xenc__TransformsType:
		soap_serialize_xenc__TransformsType(soap, (const struct xenc__TransformsType *)ptr);
		break;
	case SOAP_TYPE_xenc__CipherReferenceType:
		soap_serialize_xenc__CipherReferenceType(soap, (const struct xenc__CipherReferenceType *)ptr);
		break;
	case SOAP_TYPE_xenc__CipherDataType:
		soap_serialize_xenc__CipherDataType(soap, (const struct xenc__CipherDataType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptionMethodType:
		soap_serialize_xenc__EncryptionMethodType(soap, (const struct xenc__EncryptionMethodType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptedType:
		soap_serialize_xenc__EncryptedType(soap, (const struct xenc__EncryptedType *)ptr);
		break;
	case SOAP_TYPE_ds__RSAKeyValueType:
		soap_serialize_ds__RSAKeyValueType(soap, (const struct ds__RSAKeyValueType *)ptr);
		break;
	case SOAP_TYPE_ds__DSAKeyValueType:
		soap_serialize_ds__DSAKeyValueType(soap, (const struct ds__DSAKeyValueType *)ptr);
		break;
	case SOAP_TYPE_ds__X509IssuerSerialType:
		soap_serialize_ds__X509IssuerSerialType(soap, (const struct ds__X509IssuerSerialType *)ptr);
		break;
	case SOAP_TYPE__ds__KeyInfo:
		soap_serialize__ds__KeyInfo(soap, (const struct ds__KeyInfoType *)ptr);
		break;
	case SOAP_TYPE_ds__RetrievalMethodType:
		soap_serialize_ds__RetrievalMethodType(soap, (const struct ds__RetrievalMethodType *)ptr);
		break;
	case SOAP_TYPE_ds__KeyValueType:
		soap_serialize_ds__KeyValueType(soap, (const struct ds__KeyValueType *)ptr);
		break;
	case SOAP_TYPE_ds__DigestMethodType:
		soap_serialize_ds__DigestMethodType(soap, (const struct ds__DigestMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__Transform:
		soap_serialize__ds__Transform(soap, (const struct ds__TransformType *)ptr);
		break;
	case SOAP_TYPE_ds__TransformType:
		soap_serialize_ds__TransformType(soap, (const struct ds__TransformType *)ptr);
		break;
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		soap_serialize__c14n__InclusiveNamespaces(soap, (const struct _c14n__InclusiveNamespaces *)ptr);
		break;
	case SOAP_TYPE_ds__TransformsType:
		soap_serialize_ds__TransformsType(soap, (const struct ds__TransformsType *)ptr);
		break;
	case SOAP_TYPE_ds__ReferenceType:
		soap_serialize_ds__ReferenceType(soap, (const struct ds__ReferenceType *)ptr);
		break;
	case SOAP_TYPE_ds__SignatureMethodType:
		soap_serialize_ds__SignatureMethodType(soap, (const struct ds__SignatureMethodType *)ptr);
		break;
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		soap_serialize_ds__CanonicalizationMethodType(soap, (const struct ds__CanonicalizationMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__Signature:
		soap_serialize__ds__Signature(soap, (const struct ds__SignatureType *)ptr);
		break;
	case SOAP_TYPE_ds__KeyInfoType:
		soap_serialize_ds__KeyInfoType(soap, (const struct ds__KeyInfoType *)ptr);
		break;
	case SOAP_TYPE_ds__SignedInfoType:
		soap_serialize_ds__SignedInfoType(soap, (const struct ds__SignedInfoType *)ptr);
		break;
	case SOAP_TYPE_ds__SignatureType:
		soap_serialize_ds__SignatureType(soap, (const struct ds__SignatureType *)ptr);
		break;
	case SOAP_TYPE_ds__X509DataType:
		soap_serialize_ds__X509DataType(soap, (const struct ds__X509DataType *)ptr);
		break;
	case SOAP_TYPE__wsse__SecurityTokenReference:
		soap_serialize__wsse__SecurityTokenReference(soap, (const struct _wsse__SecurityTokenReference *)ptr);
		break;
	case SOAP_TYPE__wsse__KeyIdentifier:
		soap_serialize__wsse__KeyIdentifier(soap, (const struct _wsse__KeyIdentifier *)ptr);
		break;
	case SOAP_TYPE__wsse__Embedded:
		soap_serialize__wsse__Embedded(soap, (const struct _wsse__Embedded *)ptr);
		break;
	case SOAP_TYPE__wsse__Reference:
		soap_serialize__wsse__Reference(soap, (const struct _wsse__Reference *)ptr);
		break;
	case SOAP_TYPE__wsse__BinarySecurityToken:
		soap_serialize__wsse__BinarySecurityToken(soap, (const struct _wsse__BinarySecurityToken *)ptr);
		break;
	case SOAP_TYPE__wsse__Password:
		soap_serialize__wsse__Password(soap, (const struct _wsse__Password *)ptr);
		break;
	case SOAP_TYPE__wsse__UsernameToken:
		soap_serialize__wsse__UsernameToken(soap, (const struct _wsse__UsernameToken *)ptr);
		break;
	case SOAP_TYPE_wsse__EncodedString:
		soap_serialize_wsse__EncodedString(soap, (const struct wsse__EncodedString *)ptr);
		break;
	case SOAP_TYPE__wsu__Timestamp:
		soap_serialize__wsu__Timestamp(soap, (const struct _wsu__Timestamp *)ptr);
		break;
	case SOAP_TYPE___tevsmb__Unsubscribe:
		soap_serialize___tevsmb__Unsubscribe(soap, (const struct __tevsmb__Unsubscribe *)ptr);
		break;
	case SOAP_TYPE___tevsmb__Renew:
		soap_serialize___tevsmb__Renew(soap, (const struct __tevsmb__Renew *)ptr);
		break;
	case SOAP_TYPE___tevpsmb__ResumeSubscription:
		soap_serialize___tevpsmb__ResumeSubscription(soap, (const struct __tevpsmb__ResumeSubscription *)ptr);
		break;
	case SOAP_TYPE___tevpsmb__PauseSubscription:
		soap_serialize___tevpsmb__PauseSubscription(soap, (const struct __tevpsmb__PauseSubscription *)ptr);
		break;
	case SOAP_TYPE___tevpsmb__Unsubscribe:
		soap_serialize___tevpsmb__Unsubscribe(soap, (const struct __tevpsmb__Unsubscribe *)ptr);
		break;
	case SOAP_TYPE___tevpsmb__Renew:
		soap_serialize___tevpsmb__Renew(soap, (const struct __tevpsmb__Renew *)ptr);
		break;
	case SOAP_TYPE___tevpps__Unsubscribe:
		soap_serialize___tevpps__Unsubscribe(soap, (const struct __tevpps__Unsubscribe *)ptr);
		break;
	case SOAP_TYPE___tevpps__SetSynchronizationPoint:
		soap_serialize___tevpps__SetSynchronizationPoint(soap, (const struct __tevpps__SetSynchronizationPoint *)ptr);
		break;
	case SOAP_TYPE___tevpps__Seek:
		soap_serialize___tevpps__Seek(soap, (const struct __tevpps__Seek *)ptr);
		break;
	case SOAP_TYPE___tevpps__PullMessages:
		soap_serialize___tevpps__PullMessages(soap, (const struct __tevpps__PullMessages *)ptr);
		break;
	case SOAP_TYPE___tevppb__Notify:
		soap_serialize___tevppb__Notify(soap, (const struct __tevppb__Notify *)ptr);
		break;
	case SOAP_TYPE___tevppb__DestroyPullPoint:
		soap_serialize___tevppb__DestroyPullPoint(soap, (const struct __tevppb__DestroyPullPoint *)ptr);
		break;
	case SOAP_TYPE___tevppb__GetMessages:
		soap_serialize___tevppb__GetMessages(soap, (const struct __tevppb__GetMessages *)ptr);
		break;
	case SOAP_TYPE___tevnpb__GetCurrentMessage:
		soap_serialize___tevnpb__GetCurrentMessage(soap, (const struct __tevnpb__GetCurrentMessage *)ptr);
		break;
	case SOAP_TYPE___tevnpb__Subscribe:
		soap_serialize___tevnpb__Subscribe(soap, (const struct __tevnpb__Subscribe *)ptr);
		break;
	case SOAP_TYPE___tevncb__Notify:
		soap_serialize___tevncb__Notify(soap, (const struct __tevncb__Notify *)ptr);
		break;
	case SOAP_TYPE___teveb__GetEventProperties:
		soap_serialize___teveb__GetEventProperties(soap, (const struct __teveb__GetEventProperties *)ptr);
		break;
	case SOAP_TYPE___teveb__CreatePullPointSubscription:
		soap_serialize___teveb__CreatePullPointSubscription(soap, (const struct __teveb__CreatePullPointSubscription *)ptr);
		break;
	case SOAP_TYPE___teveb__GetServiceCapabilities:
		soap_serialize___teveb__GetServiceCapabilities(soap, (const struct __teveb__GetServiceCapabilities *)ptr);
		break;
	case SOAP_TYPE___tevcppb__CreatePullPoint:
		soap_serialize___tevcppb__CreatePullPoint(soap, (const struct __tevcppb__CreatePullPoint *)ptr);
		break;
	case SOAP_TYPE___tds__DeleteGeoLocation:
		soap_serialize___tds__DeleteGeoLocation(soap, (const struct __tds__DeleteGeoLocation *)ptr);
		break;
	case SOAP_TYPE___tds__SetGeoLocation:
		soap_serialize___tds__SetGeoLocation(soap, (const struct __tds__SetGeoLocation *)ptr);
		break;
	case SOAP_TYPE___tds__GetGeoLocation:
		soap_serialize___tds__GetGeoLocation(soap, (const struct __tds__GetGeoLocation *)ptr);
		break;
	case SOAP_TYPE___tds__DeleteStorageConfiguration:
		soap_serialize___tds__DeleteStorageConfiguration(soap, (const struct __tds__DeleteStorageConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__SetStorageConfiguration:
		soap_serialize___tds__SetStorageConfiguration(soap, (const struct __tds__SetStorageConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__GetStorageConfiguration:
		soap_serialize___tds__GetStorageConfiguration(soap, (const struct __tds__GetStorageConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__CreateStorageConfiguration:
		soap_serialize___tds__CreateStorageConfiguration(soap, (const struct __tds__CreateStorageConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__GetStorageConfigurations:
		soap_serialize___tds__GetStorageConfigurations(soap, (const struct __tds__GetStorageConfigurations *)ptr);
		break;
	case SOAP_TYPE___tds__StartSystemRestore:
		soap_serialize___tds__StartSystemRestore(soap, (const struct __tds__StartSystemRestore *)ptr);
		break;
	case SOAP_TYPE___tds__StartFirmwareUpgrade:
		soap_serialize___tds__StartFirmwareUpgrade(soap, (const struct __tds__StartFirmwareUpgrade *)ptr);
		break;
	case SOAP_TYPE___tds__GetSystemUris:
		soap_serialize___tds__GetSystemUris(soap, (const struct __tds__GetSystemUris *)ptr);
		break;
	case SOAP_TYPE___tds__ScanAvailableDot11Networks:
		soap_serialize___tds__ScanAvailableDot11Networks(soap, (const struct __tds__ScanAvailableDot11Networks *)ptr);
		break;
	case SOAP_TYPE___tds__GetDot11Status:
		soap_serialize___tds__GetDot11Status(soap, (const struct __tds__GetDot11Status *)ptr);
		break;
	case SOAP_TYPE___tds__GetDot11Capabilities:
		soap_serialize___tds__GetDot11Capabilities(soap, (const struct __tds__GetDot11Capabilities *)ptr);
		break;
	case SOAP_TYPE___tds__DeleteDot1XConfiguration:
		soap_serialize___tds__DeleteDot1XConfiguration(soap, (const struct __tds__DeleteDot1XConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__GetDot1XConfigurations:
		soap_serialize___tds__GetDot1XConfigurations(soap, (const struct __tds__GetDot1XConfigurations *)ptr);
		break;
	case SOAP_TYPE___tds__GetDot1XConfiguration:
		soap_serialize___tds__GetDot1XConfiguration(soap, (const struct __tds__GetDot1XConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__SetDot1XConfiguration:
		soap_serialize___tds__SetDot1XConfiguration(soap, (const struct __tds__SetDot1XConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__CreateDot1XConfiguration:
		soap_serialize___tds__CreateDot1XConfiguration(soap, (const struct __tds__CreateDot1XConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__LoadCACertificates:
		soap_serialize___tds__LoadCACertificates(soap, (const struct __tds__LoadCACertificates *)ptr);
		break;
	case SOAP_TYPE___tds__GetCertificateInformation:
		soap_serialize___tds__GetCertificateInformation(soap, (const struct __tds__GetCertificateInformation *)ptr);
		break;
	case SOAP_TYPE___tds__LoadCertificateWithPrivateKey:
		soap_serialize___tds__LoadCertificateWithPrivateKey(soap, (const struct __tds__LoadCertificateWithPrivateKey *)ptr);
		break;
	case SOAP_TYPE___tds__GetCACertificates:
		soap_serialize___tds__GetCACertificates(soap, (const struct __tds__GetCACertificates *)ptr);
		break;
	case SOAP_TYPE___tds__SendAuxiliaryCommand:
		soap_serialize___tds__SendAuxiliaryCommand(soap, (const struct __tds__SendAuxiliaryCommand *)ptr);
		break;
	case SOAP_TYPE___tds__SetRelayOutputState:
		soap_serialize___tds__SetRelayOutputState(soap, (const struct __tds__SetRelayOutputState *)ptr);
		break;
	case SOAP_TYPE___tds__SetRelayOutputSettings:
		soap_serialize___tds__SetRelayOutputSettings(soap, (const struct __tds__SetRelayOutputSettings *)ptr);
		break;
	case SOAP_TYPE___tds__GetRelayOutputs:
		soap_serialize___tds__GetRelayOutputs(soap, (const struct __tds__GetRelayOutputs *)ptr);
		break;
	case SOAP_TYPE___tds__SetClientCertificateMode:
		soap_serialize___tds__SetClientCertificateMode(soap, (const struct __tds__SetClientCertificateMode *)ptr);
		break;
	case SOAP_TYPE___tds__GetClientCertificateMode:
		soap_serialize___tds__GetClientCertificateMode(soap, (const struct __tds__GetClientCertificateMode *)ptr);
		break;
	case SOAP_TYPE___tds__LoadCertificates:
		soap_serialize___tds__LoadCertificates(soap, (const struct __tds__LoadCertificates *)ptr);
		break;
	case SOAP_TYPE___tds__GetPkcs10Request:
		soap_serialize___tds__GetPkcs10Request(soap, (const struct __tds__GetPkcs10Request *)ptr);
		break;
	case SOAP_TYPE___tds__DeleteCertificates:
		soap_serialize___tds__DeleteCertificates(soap, (const struct __tds__DeleteCertificates *)ptr);
		break;
	case SOAP_TYPE___tds__SetCertificatesStatus:
		soap_serialize___tds__SetCertificatesStatus(soap, (const struct __tds__SetCertificatesStatus *)ptr);
		break;
	case SOAP_TYPE___tds__GetCertificatesStatus:
		soap_serialize___tds__GetCertificatesStatus(soap, (const struct __tds__GetCertificatesStatus *)ptr);
		break;
	case SOAP_TYPE___tds__GetCertificates:
		soap_serialize___tds__GetCertificates(soap, (const struct __tds__GetCertificates *)ptr);
		break;
	case SOAP_TYPE___tds__CreateCertificate:
		soap_serialize___tds__CreateCertificate(soap, (const struct __tds__CreateCertificate *)ptr);
		break;
	case SOAP_TYPE___tds__SetAccessPolicy:
		soap_serialize___tds__SetAccessPolicy(soap, (const struct __tds__SetAccessPolicy *)ptr);
		break;
	case SOAP_TYPE___tds__GetAccessPolicy:
		soap_serialize___tds__GetAccessPolicy(soap, (const struct __tds__GetAccessPolicy *)ptr);
		break;
	case SOAP_TYPE___tds__RemoveIPAddressFilter:
		soap_serialize___tds__RemoveIPAddressFilter(soap, (const struct __tds__RemoveIPAddressFilter *)ptr);
		break;
	case SOAP_TYPE___tds__AddIPAddressFilter:
		soap_serialize___tds__AddIPAddressFilter(soap, (const struct __tds__AddIPAddressFilter *)ptr);
		break;
	case SOAP_TYPE___tds__SetIPAddressFilter:
		soap_serialize___tds__SetIPAddressFilter(soap, (const struct __tds__SetIPAddressFilter *)ptr);
		break;
	case SOAP_TYPE___tds__GetIPAddressFilter:
		soap_serialize___tds__GetIPAddressFilter(soap, (const struct __tds__GetIPAddressFilter *)ptr);
		break;
	case SOAP_TYPE___tds__SetZeroConfiguration:
		soap_serialize___tds__SetZeroConfiguration(soap, (const struct __tds__SetZeroConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__GetZeroConfiguration:
		soap_serialize___tds__GetZeroConfiguration(soap, (const struct __tds__GetZeroConfiguration *)ptr);
		break;
	case SOAP_TYPE___tds__SetNetworkDefaultGateway:
		soap_serialize___tds__SetNetworkDefaultGateway(soap, (const struct __tds__SetNetworkDefaultGateway *)ptr);
		break;
	case SOAP_TYPE___tds__GetNetworkDefaultGateway:
		soap_serialize___tds__GetNetworkDefaultGateway(soap, (const struct __tds__GetNetworkDefaultGateway *)ptr);
		break;
	case SOAP_TYPE___tds__SetNetworkProtocols:
		soap_serialize___tds__SetNetworkProtocols(soap, (const struct __tds__SetNetworkProtocols *)ptr);
		break;
	case SOAP_TYPE___tds__GetNetworkProtocols:
		soap_serialize___tds__GetNetworkProtocols(soap, (const struct __tds__GetNetworkProtocols *)ptr);
		break;
	case SOAP_TYPE___tds__SetNetworkInterfaces:
		soap_serialize___tds__SetNetworkInterfaces(soap, (const struct __tds__SetNetworkInterfaces *)ptr);
		break;
	case SOAP_TYPE___tds__GetNetworkInterfaces:
		soap_serialize___tds__GetNetworkInterfaces(soap, (const struct __tds__GetNetworkInterfaces *)ptr);
		break;
	case SOAP_TYPE___tds__SetDynamicDNS:
		soap_serialize___tds__SetDynamicDNS(soap, (const struct __tds__SetDynamicDNS *)ptr);
		break;
	case SOAP_TYPE___tds__GetDynamicDNS:
		soap_serialize___tds__GetDynamicDNS(soap, (const struct __tds__GetDynamicDNS *)ptr);
		break;
	case SOAP_TYPE___tds__SetNTP:
		soap_serialize___tds__SetNTP(soap, (const struct __tds__SetNTP *)ptr);
		break;
	case SOAP_TYPE___tds__GetNTP:
		soap_serialize___tds__GetNTP(soap, (const struct __tds__GetNTP *)ptr);
		break;
	case SOAP_TYPE___tds__SetDNS:
		soap_serialize___tds__SetDNS(soap, (const struct __tds__SetDNS *)ptr);
		break;
	case SOAP_TYPE___tds__GetDNS:
		soap_serialize___tds__GetDNS(soap, (const struct __tds__GetDNS *)ptr);
		break;
	case SOAP_TYPE___tds__SetHostnameFromDHCP:
		soap_serialize___tds__SetHostnameFromDHCP(soap, (const struct __tds__SetHostnameFromDHCP *)ptr);
		break;
	case SOAP_TYPE___tds__SetHostname:
		soap_serialize___tds__SetHostname(soap, (const struct __tds__SetHostname *)ptr);
		break;
	case SOAP_TYPE___tds__GetHostname:
		soap_serialize___tds__GetHostname(soap, (const struct __tds__GetHostname *)ptr);
		break;
	case SOAP_TYPE___tds__SetDPAddresses:
		soap_serialize___tds__SetDPAddresses(soap, (const struct __tds__SetDPAddresses *)ptr);
		break;
	case SOAP_TYPE___tds__GetCapabilities:
		soap_serialize___tds__GetCapabilities(soap, (const struct __tds__GetCapabilities *)ptr);
		break;
	case SOAP_TYPE___tds__GetWsdlUrl:
		soap_serialize___tds__GetWsdlUrl(soap, (const struct __tds__GetWsdlUrl *)ptr);
		break;
	case SOAP_TYPE___tds__SetUser:
		soap_serialize___tds__SetUser(soap, (const struct __tds__SetUser *)ptr);
		break;
	case SOAP_TYPE___tds__DeleteUsers:
		soap_serialize___tds__DeleteUsers(soap, (const struct __tds__DeleteUsers *)ptr);
		break;
	case SOAP_TYPE___tds__CreateUsers:
		soap_serialize___tds__CreateUsers(soap, (const struct __tds__CreateUsers *)ptr);
		break;
	case SOAP_TYPE___tds__GetUsers:
		soap_serialize___tds__GetUsers(soap, (const struct __tds__GetUsers *)ptr);
		break;
	case SOAP_TYPE___tds__SetRemoteUser:
		soap_serialize___tds__SetRemoteUser(soap, (const struct __tds__SetRemoteUser *)ptr);
		break;
	case SOAP_TYPE___tds__GetRemoteUser:
		soap_serialize___tds__GetRemoteUser(soap, (const struct __tds__GetRemoteUser *)ptr);
		break;
	case SOAP_TYPE___tds__GetEndpointReference:
		soap_serialize___tds__GetEndpointReference(soap, (const struct __tds__GetEndpointReference *)ptr);
		break;
	case SOAP_TYPE___tds__GetDPAddresses:
		soap_serialize___tds__GetDPAddresses(soap, (const struct __tds__GetDPAddresses *)ptr);
		break;
	case SOAP_TYPE___tds__SetRemoteDiscoveryMode:
		soap_serialize___tds__SetRemoteDiscoveryMode(soap, (const struct __tds__SetRemoteDiscoveryMode *)ptr);
		break;
	case SOAP_TYPE___tds__GetRemoteDiscoveryMode:
		soap_serialize___tds__GetRemoteDiscoveryMode(soap, (const struct __tds__GetRemoteDiscoveryMode *)ptr);
		break;
	case SOAP_TYPE___tds__SetDiscoveryMode:
		soap_serialize___tds__SetDiscoveryMode(soap, (const struct __tds__SetDiscoveryMode *)ptr);
		break;
	case SOAP_TYPE___tds__GetDiscoveryMode:
		soap_serialize___tds__GetDiscoveryMode(soap, (const struct __tds__GetDiscoveryMode *)ptr);
		break;
	case SOAP_TYPE___tds__RemoveScopes:
		soap_serialize___tds__RemoveScopes(soap, (const struct __tds__RemoveScopes *)ptr);
		break;
	case SOAP_TYPE___tds__AddScopes:
		soap_serialize___tds__AddScopes(soap, (const struct __tds__AddScopes *)ptr);
		break;
	case SOAP_TYPE___tds__SetScopes:
		soap_serialize___tds__SetScopes(soap, (const struct __tds__SetScopes *)ptr);
		break;
	case SOAP_TYPE___tds__GetScopes:
		soap_serialize___tds__GetScopes(soap, (const struct __tds__GetScopes *)ptr);
		break;
	case SOAP_TYPE___tds__GetSystemSupportInformation:
		soap_serialize___tds__GetSystemSupportInformation(soap, (const struct __tds__GetSystemSupportInformation *)ptr);
		break;
	case SOAP_TYPE___tds__GetSystemLog:
		soap_serialize___tds__GetSystemLog(soap, (const struct __tds__GetSystemLog *)ptr);
		break;
	case SOAP_TYPE___tds__GetSystemBackup:
		soap_serialize___tds__GetSystemBackup(soap, (const struct __tds__GetSystemBackup *)ptr);
		break;
	case SOAP_TYPE___tds__RestoreSystem:
		soap_serialize___tds__RestoreSystem(soap, (const struct __tds__RestoreSystem *)ptr);
		break;
	case SOAP_TYPE___tds__SystemReboot:
		soap_serialize___tds__SystemReboot(soap, (const struct __tds__SystemReboot *)ptr);
		break;
	case SOAP_TYPE___tds__UpgradeSystemFirmware:
		soap_serialize___tds__UpgradeSystemFirmware(soap, (const struct __tds__UpgradeSystemFirmware *)ptr);
		break;
	case SOAP_TYPE___tds__SetSystemFactoryDefault:
		soap_serialize___tds__SetSystemFactoryDefault(soap, (const struct __tds__SetSystemFactoryDefault *)ptr);
		break;
	case SOAP_TYPE___tds__GetSystemDateAndTime:
		soap_serialize___tds__GetSystemDateAndTime(soap, (const struct __tds__GetSystemDateAndTime *)ptr);
		break;
	case SOAP_TYPE___tds__SetSystemDateAndTime:
		soap_serialize___tds__SetSystemDateAndTime(soap, (const struct __tds__SetSystemDateAndTime *)ptr);
		break;
	case SOAP_TYPE___tds__GetDeviceInformation:
		soap_serialize___tds__GetDeviceInformation(soap, (const struct __tds__GetDeviceInformation *)ptr);
		break;
	case SOAP_TYPE___tds__GetServiceCapabilities:
		soap_serialize___tds__GetServiceCapabilities(soap, (const struct __tds__GetServiceCapabilities *)ptr);
		break;
	case SOAP_TYPE___tds__GetServices:
		soap_serialize___tds__GetServices(soap, (const struct __tds__GetServices *)ptr);
		break;
	case SOAP_TYPE__wsd__ProbeMatches:
		soap_serialize__wsd__ProbeMatches(soap, (const struct wsd__ProbeMatchesType *)ptr);
		break;
	case SOAP_TYPE__wsd__Probe:
		soap_serialize__wsd__Probe(soap, (const struct wsd__ProbeType *)ptr);
		break;
	case SOAP_TYPE__wsnt__TerminationTime:
		soap_serialize__wsnt__TerminationTime(soap, (const struct timeval *)ptr);
		break;
	case SOAP_TYPE__wsnt__CurrentTime:
		soap_serialize__wsnt__CurrentTime(soap, (const struct timeval *)ptr);
		break;
	case SOAP_TYPE__wsnt__ProducerReference:
		soap_serialize__wsnt__ProducerReference(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsnt__SubscriptionReference:
		soap_serialize__wsnt__SubscriptionReference(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsnt__CreationTime:
		soap_serialize__wsnt__CreationTime(soap, (const struct timeval *)ptr);
		break;
	case SOAP_TYPE__wsnt__ConsumerReference:
		soap_serialize__wsnt__ConsumerReference(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		soap_serialize_xsd__dateTime(soap, (const struct timeval *)ptr);
		break;
	case SOAP_TYPE_timeval:
		soap_serialize_timeval(soap, (const struct timeval *)ptr);
		break;
	case SOAP_TYPE_chan__ChannelInstanceType:
		soap_serialize_chan__ChannelInstanceType(soap, (const struct chan__ChannelInstanceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__ProblemAction:
		soap_serialize__wsa5__ProblemAction(soap, (const struct wsa5__ProblemActionType *)ptr);
		break;
	case SOAP_TYPE__wsa5__FaultTo:
		soap_serialize__wsa5__FaultTo(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__From:
		soap_serialize__wsa5__From(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__ReplyTo:
		soap_serialize__wsa5__ReplyTo(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa5__RelatesTo:
		soap_serialize__wsa5__RelatesTo(soap, (const struct wsa5__RelatesToType *)ptr);
		break;
	case SOAP_TYPE__wsa5__Metadata:
		soap_serialize__wsa5__Metadata(soap, (const struct wsa5__MetadataType *)ptr);
		break;
	case SOAP_TYPE__wsa5__ReferenceParameters:
		soap_serialize__wsa5__ReferenceParameters(soap, (const struct wsa5__ReferenceParametersType *)ptr);
		break;
	case SOAP_TYPE__wsa5__EndpointReference:
		soap_serialize__wsa5__EndpointReference(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE_wsa5__ProblemActionType:
		soap_serialize_wsa5__ProblemActionType(soap, (const struct wsa5__ProblemActionType *)ptr);
		break;
	case SOAP_TYPE_wsa5__RelatesToType:
		soap_serialize_wsa5__RelatesToType(soap, (const struct wsa5__RelatesToType *)ptr);
		break;
	case SOAP_TYPE_wsa5__MetadataType:
		soap_serialize_wsa5__MetadataType(soap, (const struct wsa5__MetadataType *)ptr);
		break;
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		soap_serialize_wsa5__ReferenceParametersType(soap, (const struct wsa5__ReferenceParametersType *)ptr);
		break;
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		soap_serialize_wsa5__EndpointReferenceType(soap, (const struct wsa5__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE_xsd__anyAttribute:
		soap_serialize_xsd__anyAttribute(soap, (const struct soap_dom_attribute *)ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		soap_serialize_xsd__anyType(soap, (const struct soap_dom_element *)ptr);
		break;
	case SOAP_TYPE___wsd__ProbeMatches:
		soap_serialize___wsd__ProbeMatches(soap, (const struct __wsd__ProbeMatches *)ptr);
		break;
	case SOAP_TYPE_wsd__ProbeMatchesType:
		soap_serialize_wsd__ProbeMatchesType(soap, (const struct wsd__ProbeMatchesType *)ptr);
		break;
	case SOAP_TYPE___wsd__Probe:
		soap_serialize___wsd__Probe(soap, (const struct __wsd__Probe *)ptr);
		break;
	case SOAP_TYPE_wsd__ProbeType:
		soap_serialize_wsd__ProbeType(soap, (const struct wsd__ProbeType *)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__Security:
		soap_serialize_PointerTo_wsse__Security(soap, (struct _wsse__Security *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__SignatureType:
		soap_serialize_PointerTods__SignatureType(soap, (struct ds__SignatureType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsc__SecurityContextTokenType:
		soap_serialize_PointerTowsc__SecurityContextTokenType(soap, (struct wsc__SecurityContextTokenType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__BinarySecurityToken:
		soap_serialize_PointerTo_wsse__BinarySecurityToken(soap, (struct _wsse__BinarySecurityToken *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__UsernameToken:
		soap_serialize_PointerTo_wsse__UsernameToken(soap, (struct _wsse__UsernameToken *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsu__Timestamp:
		soap_serialize_PointerTo_wsu__Timestamp(soap, (struct _wsu__Timestamp *const*)ptr);
		break;
	case SOAP_TYPE__saml2__AuthenticatingAuthority:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AuthnContextDeclRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AuthnContextClassRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__Audience:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AssertionURIRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AssertionIDRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerToPointerTo_ds__KeyInfo:
		soap_serialize_PointerToPointerTo_ds__KeyInfo(soap, (struct ds__KeyInfoType **const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType:
		soap_serialize_PointerTo__saml2__union_AttributeStatementType(soap, (struct __saml2__union_AttributeStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AttributeType:
		soap_serialize_PointerTosaml2__AttributeType(soap, (struct saml2__AttributeType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__EvidenceType:
		soap_serialize_PointerTosaml2__EvidenceType(soap, (struct saml2__EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ActionType:
		soap_serialize_PointerTosaml2__ActionType(soap, (struct saml2__ActionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AuthnContextType:
		soap_serialize_PointerTosaml2__AuthnContextType(soap, (struct saml2__AuthnContextType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectLocalityType:
		soap_serialize_PointerTosaml2__SubjectLocalityType(soap, (struct saml2__SubjectLocalityType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_EvidenceType:
		soap_serialize_PointerTo__saml2__union_EvidenceType(soap, (struct __saml2__union_EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_AdviceType:
		soap_serialize_PointerTo__saml2__union_AdviceType(soap, (struct __saml2__union_AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AssertionType:
		soap_serialize_PointerTosaml2__AssertionType(soap, (struct saml2__AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_ConditionsType:
		soap_serialize_PointerTo__saml2__union_ConditionsType(soap, (struct __saml2__union_ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ProxyRestrictionType:
		soap_serialize_PointerTosaml2__ProxyRestrictionType(soap, (struct saml2__ProxyRestrictionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__OneTimeUseType:
		soap_serialize_PointerTosaml2__OneTimeUseType(soap, (struct saml2__OneTimeUseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AudienceRestrictionType:
		soap_serialize_PointerTosaml2__AudienceRestrictionType(soap, (struct saml2__AudienceRestrictionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ConditionAbstractType:
		soap_serialize_PointerTosaml2__ConditionAbstractType(soap, (struct saml2__ConditionAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType:
		soap_serialize_PointerTosaml2__SubjectConfirmationDataType(soap, (struct saml2__SubjectConfirmationDataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationType:
		soap_serialize_PointerTosaml2__SubjectConfirmationType(soap, (struct saml2__SubjectConfirmationType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__EncryptedElementType:
		soap_serialize_PointerTosaml2__EncryptedElementType(soap, (struct saml2__EncryptedElementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__BaseIDAbstractType:
		soap_serialize_PointerTosaml2__BaseIDAbstractType(soap, (struct saml2__BaseIDAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_AssertionType:
		soap_serialize_PointerTo__saml2__union_AssertionType(soap, (struct __saml2__union_AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AttributeStatementType:
		soap_serialize_PointerTosaml2__AttributeStatementType(soap, (struct saml2__AttributeStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType:
		soap_serialize_PointerTosaml2__AuthzDecisionStatementType(soap, (struct saml2__AuthzDecisionStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AuthnStatementType:
		soap_serialize_PointerTosaml2__AuthnStatementType(soap, (struct saml2__AuthnStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__StatementAbstractType:
		soap_serialize_PointerTosaml2__StatementAbstractType(soap, (struct saml2__StatementAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AdviceType:
		soap_serialize_PointerTosaml2__AdviceType(soap, (struct saml2__AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ConditionsType:
		soap_serialize_PointerTosaml2__ConditionsType(soap, (struct saml2__ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectType:
		soap_serialize_PointerTosaml2__SubjectType(soap, (struct saml2__SubjectType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__NameIDType:
		soap_serialize_PointerTosaml2__NameIDType(soap, (struct saml2__NameIDType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType:
		soap_serialize_PointerToPointerToxenc__EncryptedKeyType(soap, (struct xenc__EncryptedKeyType **const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptedKeyType:
		soap_serialize_PointerToxenc__EncryptedKeyType(soap, (struct xenc__EncryptedKeyType *const*)ptr);
		break;
	case SOAP_TYPE__saml1__ConfirmationMethod:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml1__Audience:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml1__AssertionIDReference:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AttributeType:
		soap_serialize_PointerTosaml1__AttributeType(soap, (struct saml1__AttributeType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__EvidenceType:
		soap_serialize_PointerTosaml1__EvidenceType(soap, (struct saml1__EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__ActionType:
		soap_serialize_PointerTosaml1__ActionType(soap, (struct saml1__ActionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AuthorityBindingType:
		soap_serialize_PointerTosaml1__AuthorityBindingType(soap, (struct saml1__AuthorityBindingType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectLocalityType:
		soap_serialize_PointerTosaml1__SubjectLocalityType(soap, (struct saml1__SubjectLocalityType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectType:
		soap_serialize_PointerTosaml1__SubjectType(soap, (struct saml1__SubjectType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_EvidenceType:
		soap_serialize_PointerTo__saml1__union_EvidenceType(soap, (struct __saml1__union_EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectConfirmationType:
		soap_serialize_PointerTosaml1__SubjectConfirmationType(soap, (struct saml1__SubjectConfirmationType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__NameIdentifierType:
		soap_serialize_PointerTosaml1__NameIdentifierType(soap, (struct saml1__NameIdentifierType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_AdviceType:
		soap_serialize_PointerTo__saml1__union_AdviceType(soap, (struct __saml1__union_AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AssertionType:
		soap_serialize_PointerTosaml1__AssertionType(soap, (struct saml1__AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_ConditionsType:
		soap_serialize_PointerTo__saml1__union_ConditionsType(soap, (struct __saml1__union_ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__ConditionAbstractType:
		soap_serialize_PointerTosaml1__ConditionAbstractType(soap, (struct saml1__ConditionAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType:
		soap_serialize_PointerTosaml1__DoNotCacheConditionType(soap, (struct saml1__DoNotCacheConditionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType:
		soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(soap, (struct saml1__AudienceRestrictionConditionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ds__Signature:
		soap_serialize_PointerTo_ds__Signature(soap, (struct ds__SignatureType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_AssertionType:
		soap_serialize_PointerTo__saml1__union_AssertionType(soap, (struct __saml1__union_AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AttributeStatementType:
		soap_serialize_PointerTosaml1__AttributeStatementType(soap, (struct saml1__AttributeStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType:
		soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(soap, (struct saml1__AuthorizationDecisionStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AuthenticationStatementType:
		soap_serialize_PointerTosaml1__AuthenticationStatementType(soap, (struct saml1__AuthenticationStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType:
		soap_serialize_PointerTosaml1__SubjectStatementAbstractType(soap, (struct saml1__SubjectStatementAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__StatementAbstractType:
		soap_serialize_PointerTosaml1__StatementAbstractType(soap, (struct saml1__StatementAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AdviceType:
		soap_serialize_PointerTosaml1__AdviceType(soap, (struct saml1__AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__ConditionsType:
		soap_serialize_PointerTosaml1__ConditionsType(soap, (struct saml1__ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence:
		soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, (struct __wsc__DerivedKeyTokenType_sequence *const*)ptr);
		break;
	case SOAP_TYPE_PointerToULONG64:
		soap_serialize_PointerToULONG64(soap, (ULONG64 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsc__PropertiesType:
		soap_serialize_PointerTowsc__PropertiesType(soap, (struct wsc__PropertiesType *const*)ptr);
		break;
	case SOAP_TYPE_wsc__FaultCodeOpenEnumType:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTo_xenc__ReferenceList:
		soap_serialize_PointerTo_xenc__ReferenceList(soap, (struct _xenc__ReferenceList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__xenc__union_ReferenceList:
		soap_serialize_PointerTo__xenc__union_ReferenceList(soap, (struct __xenc__union_ReferenceList *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__ReferenceType:
		soap_serialize_PointerToxenc__ReferenceType(soap, (struct xenc__ReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptionPropertyType:
		soap_serialize_PointerToxenc__EncryptionPropertyType(soap, (struct xenc__EncryptionPropertyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__TransformsType:
		soap_serialize_PointerToxenc__TransformsType(soap, (struct xenc__TransformsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__CipherReferenceType:
		soap_serialize_PointerToxenc__CipherReferenceType(soap, (struct xenc__CipherReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptionPropertiesType:
		soap_serialize_PointerToxenc__EncryptionPropertiesType(soap, (struct xenc__EncryptionPropertiesType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__CipherDataType:
		soap_serialize_PointerToxenc__CipherDataType(soap, (struct xenc__CipherDataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ds__KeyInfo:
		soap_serialize_PointerTo_ds__KeyInfo(soap, (struct ds__KeyInfoType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptionMethodType:
		soap_serialize_PointerToxenc__EncryptionMethodType(soap, (struct xenc__EncryptionMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__X509IssuerSerialType:
		soap_serialize_PointerTods__X509IssuerSerialType(soap, (struct ds__X509IssuerSerialType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__RSAKeyValueType:
		soap_serialize_PointerTods__RSAKeyValueType(soap, (struct ds__RSAKeyValueType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__DSAKeyValueType:
		soap_serialize_PointerTods__DSAKeyValueType(soap, (struct ds__DSAKeyValueType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__TransformType:
		soap_serialize_PointerTods__TransformType(soap, (struct ds__TransformType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__DigestMethodType:
		soap_serialize_PointerTods__DigestMethodType(soap, (struct ds__DigestMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__TransformsType:
		soap_serialize_PointerTods__TransformsType(soap, (struct ds__TransformsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTods__ReferenceType:
		soap_serialize_PointerToPointerTods__ReferenceType(soap, (struct ds__ReferenceType **const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__ReferenceType:
		soap_serialize_PointerTods__ReferenceType(soap, (struct ds__ReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__SignatureMethodType:
		soap_serialize_PointerTods__SignatureMethodType(soap, (struct ds__SignatureMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__CanonicalizationMethodType:
		soap_serialize_PointerTods__CanonicalizationMethodType(soap, (struct ds__CanonicalizationMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__SecurityTokenReference:
		soap_serialize_PointerTo_wsse__SecurityTokenReference(soap, (struct _wsse__SecurityTokenReference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__RetrievalMethodType:
		soap_serialize_PointerTods__RetrievalMethodType(soap, (struct ds__RetrievalMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__KeyValueType:
		soap_serialize_PointerTods__KeyValueType(soap, (struct ds__KeyValueType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces:
		soap_serialize_PointerTo_c14n__InclusiveNamespaces(soap, (struct _c14n__InclusiveNamespaces *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__KeyInfoType:
		soap_serialize_PointerTods__KeyInfoType(soap, (struct ds__KeyInfoType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__SignedInfoType:
		soap_serialize_PointerTods__SignedInfoType(soap, (struct ds__SignedInfoType *const*)ptr);
		break;
	case SOAP_TYPE__ds__SignatureValue:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTods__X509DataType:
		soap_serialize_PointerTods__X509DataType(soap, (struct ds__X509DataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__Embedded:
		soap_serialize_PointerTo_wsse__Embedded(soap, (struct _wsse__Embedded *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__KeyIdentifier:
		soap_serialize_PointerTo_wsse__KeyIdentifier(soap, (struct _wsse__KeyIdentifier *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__Reference:
		soap_serialize_PointerTo_wsse__Reference(soap, (struct _wsse__Reference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsse__EncodedString:
		soap_serialize_PointerTowsse__EncodedString(soap, (struct wsse__EncodedString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__Password:
		soap_serialize_PointerTo_wsse__Password(soap, (struct _wsse__Password *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__AppSequenceType:
		soap_serialize_PointerTowsd__AppSequenceType(soap, (wsd__AppSequenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa__Relationship:
		soap_serialize_PointerTowsa__Relationship(soap, (wsa__Relationship *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__ResumeSubscription:
		soap_serialize_PointerTo_wsnt__ResumeSubscription(soap, (_wsnt__ResumeSubscription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__PauseSubscription:
		soap_serialize_PointerTo_wsnt__PauseSubscription(soap, (_wsnt__PauseSubscription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Renew:
		soap_serialize_PointerTo_wsnt__Renew(soap, (_wsnt__Renew *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Unsubscribe:
		soap_serialize_PointerTo_wsnt__Unsubscribe(soap, (_wsnt__Unsubscribe *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint:
		soap_serialize_PointerTo_tev__SetSynchronizationPoint(soap, (_tev__SetSynchronizationPoint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__Seek:
		soap_serialize_PointerTo_tev__Seek(soap, (_tev__Seek *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__PullMessages:
		soap_serialize_PointerTo_tev__PullMessages(soap, (_tev__PullMessages *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint:
		soap_serialize_PointerTo_wsnt__DestroyPullPoint(soap, (_wsnt__DestroyPullPoint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__GetMessages:
		soap_serialize_PointerTo_wsnt__GetMessages(soap, (_wsnt__GetMessages *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage:
		soap_serialize_PointerTo_wsnt__GetCurrentMessage(soap, (_wsnt__GetCurrentMessage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Subscribe:
		soap_serialize_PointerTo_wsnt__Subscribe(soap, (_wsnt__Subscribe *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Notify:
		soap_serialize_PointerTo_wsnt__Notify(soap, (_wsnt__Notify *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__GetEventProperties:
		soap_serialize_PointerTo_tev__GetEventProperties(soap, (_tev__GetEventProperties *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription:
		soap_serialize_PointerTo_tev__CreatePullPointSubscription(soap, (_tev__CreatePullPointSubscription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__GetServiceCapabilities:
		soap_serialize_PointerTo_tev__GetServiceCapabilities(soap, (_tev__GetServiceCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__CreatePullPoint:
		soap_serialize_PointerTo_wsnt__CreatePullPoint(soap, (_wsnt__CreatePullPoint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__DeleteGeoLocation:
		soap_serialize_PointerTo_tds__DeleteGeoLocation(soap, (_tds__DeleteGeoLocation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetGeoLocation:
		soap_serialize_PointerTo_tds__SetGeoLocation(soap, (_tds__SetGeoLocation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetGeoLocation:
		soap_serialize_PointerTo_tds__GetGeoLocation(soap, (_tds__GetGeoLocation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration:
		soap_serialize_PointerTo_tds__DeleteStorageConfiguration(soap, (_tds__DeleteStorageConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetStorageConfiguration:
		soap_serialize_PointerTo_tds__SetStorageConfiguration(soap, (_tds__SetStorageConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetStorageConfiguration:
		soap_serialize_PointerTo_tds__GetStorageConfiguration(soap, (_tds__GetStorageConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration:
		soap_serialize_PointerTo_tds__CreateStorageConfiguration(soap, (_tds__CreateStorageConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetStorageConfigurations:
		soap_serialize_PointerTo_tds__GetStorageConfigurations(soap, (_tds__GetStorageConfigurations *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__StartSystemRestore:
		soap_serialize_PointerTo_tds__StartSystemRestore(soap, (_tds__StartSystemRestore *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade:
		soap_serialize_PointerTo_tds__StartFirmwareUpgrade(soap, (_tds__StartFirmwareUpgrade *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetSystemUris:
		soap_serialize_PointerTo_tds__GetSystemUris(soap, (_tds__GetSystemUris *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks:
		soap_serialize_PointerTo_tds__ScanAvailableDot11Networks(soap, (_tds__ScanAvailableDot11Networks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDot11Status:
		soap_serialize_PointerTo_tds__GetDot11Status(soap, (_tds__GetDot11Status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDot11Capabilities:
		soap_serialize_PointerTo_tds__GetDot11Capabilities(soap, (_tds__GetDot11Capabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration:
		soap_serialize_PointerTo_tds__DeleteDot1XConfiguration(soap, (_tds__DeleteDot1XConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations:
		soap_serialize_PointerTo_tds__GetDot1XConfigurations(soap, (_tds__GetDot1XConfigurations *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration:
		soap_serialize_PointerTo_tds__GetDot1XConfiguration(soap, (_tds__GetDot1XConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration:
		soap_serialize_PointerTo_tds__SetDot1XConfiguration(soap, (_tds__SetDot1XConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration:
		soap_serialize_PointerTo_tds__CreateDot1XConfiguration(soap, (_tds__CreateDot1XConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__LoadCACertificates:
		soap_serialize_PointerTo_tds__LoadCACertificates(soap, (_tds__LoadCACertificates *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetCertificateInformation:
		soap_serialize_PointerTo_tds__GetCertificateInformation(soap, (_tds__GetCertificateInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey:
		soap_serialize_PointerTo_tds__LoadCertificateWithPrivateKey(soap, (_tds__LoadCertificateWithPrivateKey *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetCACertificates:
		soap_serialize_PointerTo_tds__GetCACertificates(soap, (_tds__GetCACertificates *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand:
		soap_serialize_PointerTo_tds__SendAuxiliaryCommand(soap, (_tds__SendAuxiliaryCommand *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetRelayOutputState:
		soap_serialize_PointerTo_tds__SetRelayOutputState(soap, (_tds__SetRelayOutputState *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings:
		soap_serialize_PointerTo_tds__SetRelayOutputSettings(soap, (_tds__SetRelayOutputSettings *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetRelayOutputs:
		soap_serialize_PointerTo_tds__GetRelayOutputs(soap, (_tds__GetRelayOutputs *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetClientCertificateMode:
		soap_serialize_PointerTo_tds__SetClientCertificateMode(soap, (_tds__SetClientCertificateMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetClientCertificateMode:
		soap_serialize_PointerTo_tds__GetClientCertificateMode(soap, (_tds__GetClientCertificateMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__LoadCertificates:
		soap_serialize_PointerTo_tds__LoadCertificates(soap, (_tds__LoadCertificates *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetPkcs10Request:
		soap_serialize_PointerTo_tds__GetPkcs10Request(soap, (_tds__GetPkcs10Request *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__DeleteCertificates:
		soap_serialize_PointerTo_tds__DeleteCertificates(soap, (_tds__DeleteCertificates *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetCertificatesStatus:
		soap_serialize_PointerTo_tds__SetCertificatesStatus(soap, (_tds__SetCertificatesStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetCertificatesStatus:
		soap_serialize_PointerTo_tds__GetCertificatesStatus(soap, (_tds__GetCertificatesStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetCertificates:
		soap_serialize_PointerTo_tds__GetCertificates(soap, (_tds__GetCertificates *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__CreateCertificate:
		soap_serialize_PointerTo_tds__CreateCertificate(soap, (_tds__CreateCertificate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetAccessPolicy:
		soap_serialize_PointerTo_tds__SetAccessPolicy(soap, (_tds__SetAccessPolicy *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetAccessPolicy:
		soap_serialize_PointerTo_tds__GetAccessPolicy(soap, (_tds__GetAccessPolicy *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter:
		soap_serialize_PointerTo_tds__RemoveIPAddressFilter(soap, (_tds__RemoveIPAddressFilter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__AddIPAddressFilter:
		soap_serialize_PointerTo_tds__AddIPAddressFilter(soap, (_tds__AddIPAddressFilter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetIPAddressFilter:
		soap_serialize_PointerTo_tds__SetIPAddressFilter(soap, (_tds__SetIPAddressFilter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetIPAddressFilter:
		soap_serialize_PointerTo_tds__GetIPAddressFilter(soap, (_tds__GetIPAddressFilter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetZeroConfiguration:
		soap_serialize_PointerTo_tds__SetZeroConfiguration(soap, (_tds__SetZeroConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetZeroConfiguration:
		soap_serialize_PointerTo_tds__GetZeroConfiguration(soap, (_tds__GetZeroConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway:
		soap_serialize_PointerTo_tds__SetNetworkDefaultGateway(soap, (_tds__SetNetworkDefaultGateway *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway:
		soap_serialize_PointerTo_tds__GetNetworkDefaultGateway(soap, (_tds__GetNetworkDefaultGateway *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetNetworkProtocols:
		soap_serialize_PointerTo_tds__SetNetworkProtocols(soap, (_tds__SetNetworkProtocols *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetNetworkProtocols:
		soap_serialize_PointerTo_tds__GetNetworkProtocols(soap, (_tds__GetNetworkProtocols *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces:
		soap_serialize_PointerTo_tds__SetNetworkInterfaces(soap, (_tds__SetNetworkInterfaces *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces:
		soap_serialize_PointerTo_tds__GetNetworkInterfaces(soap, (_tds__GetNetworkInterfaces *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetDynamicDNS:
		soap_serialize_PointerTo_tds__SetDynamicDNS(soap, (_tds__SetDynamicDNS *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDynamicDNS:
		soap_serialize_PointerTo_tds__GetDynamicDNS(soap, (_tds__GetDynamicDNS *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetNTP:
		soap_serialize_PointerTo_tds__SetNTP(soap, (_tds__SetNTP *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetNTP:
		soap_serialize_PointerTo_tds__GetNTP(soap, (_tds__GetNTP *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetDNS:
		soap_serialize_PointerTo_tds__SetDNS(soap, (_tds__SetDNS *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDNS:
		soap_serialize_PointerTo_tds__GetDNS(soap, (_tds__GetDNS *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP:
		soap_serialize_PointerTo_tds__SetHostnameFromDHCP(soap, (_tds__SetHostnameFromDHCP *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetHostname:
		soap_serialize_PointerTo_tds__SetHostname(soap, (_tds__SetHostname *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetHostname:
		soap_serialize_PointerTo_tds__GetHostname(soap, (_tds__GetHostname *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetDPAddresses:
		soap_serialize_PointerTo_tds__SetDPAddresses(soap, (_tds__SetDPAddresses *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetCapabilities:
		soap_serialize_PointerTo_tds__GetCapabilities(soap, (_tds__GetCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetWsdlUrl:
		soap_serialize_PointerTo_tds__GetWsdlUrl(soap, (_tds__GetWsdlUrl *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetUser:
		soap_serialize_PointerTo_tds__SetUser(soap, (_tds__SetUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__DeleteUsers:
		soap_serialize_PointerTo_tds__DeleteUsers(soap, (_tds__DeleteUsers *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__CreateUsers:
		soap_serialize_PointerTo_tds__CreateUsers(soap, (_tds__CreateUsers *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetUsers:
		soap_serialize_PointerTo_tds__GetUsers(soap, (_tds__GetUsers *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetRemoteUser:
		soap_serialize_PointerTo_tds__SetRemoteUser(soap, (_tds__SetRemoteUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetRemoteUser:
		soap_serialize_PointerTo_tds__GetRemoteUser(soap, (_tds__GetRemoteUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetEndpointReference:
		soap_serialize_PointerTo_tds__GetEndpointReference(soap, (_tds__GetEndpointReference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDPAddresses:
		soap_serialize_PointerTo_tds__GetDPAddresses(soap, (_tds__GetDPAddresses *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode:
		soap_serialize_PointerTo_tds__SetRemoteDiscoveryMode(soap, (_tds__SetRemoteDiscoveryMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode:
		soap_serialize_PointerTo_tds__GetRemoteDiscoveryMode(soap, (_tds__GetRemoteDiscoveryMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetDiscoveryMode:
		soap_serialize_PointerTo_tds__SetDiscoveryMode(soap, (_tds__SetDiscoveryMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDiscoveryMode:
		soap_serialize_PointerTo_tds__GetDiscoveryMode(soap, (_tds__GetDiscoveryMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__RemoveScopes:
		soap_serialize_PointerTo_tds__RemoveScopes(soap, (_tds__RemoveScopes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__AddScopes:
		soap_serialize_PointerTo_tds__AddScopes(soap, (_tds__AddScopes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetScopes:
		soap_serialize_PointerTo_tds__SetScopes(soap, (_tds__SetScopes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetScopes:
		soap_serialize_PointerTo_tds__GetScopes(soap, (_tds__GetScopes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation:
		soap_serialize_PointerTo_tds__GetSystemSupportInformation(soap, (_tds__GetSystemSupportInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetSystemLog:
		soap_serialize_PointerTo_tds__GetSystemLog(soap, (_tds__GetSystemLog *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetSystemBackup:
		soap_serialize_PointerTo_tds__GetSystemBackup(soap, (_tds__GetSystemBackup *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__RestoreSystem:
		soap_serialize_PointerTo_tds__RestoreSystem(soap, (_tds__RestoreSystem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SystemReboot:
		soap_serialize_PointerTo_tds__SystemReboot(soap, (_tds__SystemReboot *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware:
		soap_serialize_PointerTo_tds__UpgradeSystemFirmware(soap, (_tds__UpgradeSystemFirmware *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault:
		soap_serialize_PointerTo_tds__SetSystemFactoryDefault(soap, (_tds__SetSystemFactoryDefault *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime:
		soap_serialize_PointerTo_tds__GetSystemDateAndTime(soap, (_tds__GetSystemDateAndTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime:
		soap_serialize_PointerTo_tds__SetSystemDateAndTime(soap, (_tds__SetSystemDateAndTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetDeviceInformation:
		soap_serialize_PointerTo_tds__GetDeviceInformation(soap, (_tds__GetDeviceInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetServiceCapabilities:
		soap_serialize_PointerTo_tds__GetServiceCapabilities(soap, (_tds__GetServiceCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetServices:
		soap_serialize_PointerTo_tds__GetServices(soap, (_tds__GetServices *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType:
		soap_serialize_PointerTowsnt__UnacceptableTerminationTimeFaultType(soap, (wsnt__UnacceptableTerminationTimeFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType:
		soap_serialize_PointerTowsnt__ResumeFailedFaultType(soap, (wsnt__ResumeFailedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__PauseFailedFaultType:
		soap_serialize_PointerTowsnt__PauseFailedFaultType(soap, (wsnt__PauseFailedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType:
		soap_serialize_PointerTowsnt__UnableToDestroySubscriptionFaultType(soap, (wsnt__UnableToDestroySubscriptionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse:
		soap_serialize_PointerTo_tev__PullMessagesFaultResponse(soap, (_tev__PullMessagesFaultResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType:
		soap_serialize_PointerTowsnt__UnableToGetMessagesFaultType(soap, (wsnt__UnableToGetMessagesFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType:
		soap_serialize_PointerTowsnt__UnableToDestroyPullPointFaultType(soap, (wsnt__UnableToDestroyPullPointFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType:
		soap_serialize_PointerTowsnt__NoCurrentMessageOnTopicFaultType(soap, (wsnt__NoCurrentMessageOnTopicFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType:
		soap_serialize_PointerTowsnt__MultipleTopicsSpecifiedFaultType(soap, (wsnt__MultipleTopicsSpecifiedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType:
		soap_serialize_PointerTowsnt__UnsupportedPolicyRequestFaultType(soap, (wsnt__UnsupportedPolicyRequestFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType:
		soap_serialize_PointerTowsnt__UnrecognizedPolicyRequestFaultType(soap, (wsnt__UnrecognizedPolicyRequestFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType:
		soap_serialize_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(soap, (wsnt__UnacceptableInitialTerminationTimeFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType:
		soap_serialize_PointerTowsnt__TopicNotSupportedFaultType(soap, (wsnt__TopicNotSupportedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType:
		soap_serialize_PointerTowsnt__TopicExpressionDialectUnknownFaultType(soap, (wsnt__TopicExpressionDialectUnknownFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType:
		soap_serialize_PointerTowsnt__SubscribeCreationFailedFaultType(soap, (wsnt__SubscribeCreationFailedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsrf__ResourceUnknownFaultType:
		soap_serialize_PointerTowsrf__ResourceUnknownFaultType(soap, (wsrf__ResourceUnknownFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType:
		soap_serialize_PointerTowsnt__NotifyMessageNotSupportedFaultType(soap, (wsnt__NotifyMessageNotSupportedFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType:
		soap_serialize_PointerTowsnt__InvalidTopicExpressionFaultType(soap, (wsnt__InvalidTopicExpressionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType:
		soap_serialize_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(soap, (wsnt__InvalidProducerPropertiesExpressionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType:
		soap_serialize_PointerTowsnt__InvalidMessageContentExpressionFaultType(soap, (wsnt__InvalidMessageContentExpressionFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType:
		soap_serialize_PointerTowsnt__InvalidFilterFaultType(soap, (wsnt__InvalidFilterFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType:
		soap_serialize_PointerTowsnt__UnableToCreatePullPointFaultType(soap, (wsnt__UnableToCreatePullPointFaultType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__NCName:
		soap_serialize_PointerToxsd__NCName(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__ConcreteTopicExpression:
		soap_serialize_PointerTowstop__ConcreteTopicExpression(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__QName:
		soap_serialize_PointerToxsd__QName(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__TopicType:
		soap_serialize_PointerTowstop__TopicType(soap, (wstop__TopicType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__QueryExpressionType:
		soap_serialize_PointerTowstop__QueryExpressionType(soap, (wstop__QueryExpressionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDConfigurationExtension:
		soap_serialize_PointerTott__OSDConfigurationExtension(soap, (tt__OSDConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDImgConfiguration:
		soap_serialize_PointerTott__OSDImgConfiguration(soap, (tt__OSDImgConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDTextConfiguration:
		soap_serialize_PointerTott__OSDTextConfiguration(soap, (tt__OSDTextConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDPosConfiguration:
		soap_serialize_PointerTott__OSDPosConfiguration(soap, (tt__OSDPosConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDReference:
		soap_serialize_PointerTott__OSDReference(soap, (tt__OSDReference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MetadataInput:
		soap_serialize_PointerTott__MetadataInput(soap, (tt__MetadataInput *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SourceIdentification:
		soap_serialize_PointerTott__SourceIdentification(soap, (tt__SourceIdentification *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration:
		soap_serialize_PointerTott__AnalyticsDeviceEngineConfiguration(soap, (tt__AnalyticsDeviceEngineConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZConfigurationExtension:
		soap_serialize_PointerTott__PTZConfigurationExtension(soap, (tt__PTZConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ZoomLimits:
		soap_serialize_PointerTott__ZoomLimits(soap, (tt__ZoomLimits *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PanTiltLimits:
		soap_serialize_PointerTott__PanTiltLimits(soap, (tt__PanTiltLimits *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZNodeExtension:
		soap_serialize_PointerTott__PTZNodeExtension(soap, (tt__PTZNodeExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DigitalIdleState:
		soap_serialize_PointerTott__DigitalIdleState(soap, (tt__DigitalIdleState *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceExtension:
		soap_serialize_PointerTott__NetworkInterfaceExtension(soap, (tt__NetworkInterfaceExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv6NetworkInterface:
		soap_serialize_PointerTott__IPv6NetworkInterface(soap, (tt__IPv6NetworkInterface *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv4NetworkInterface:
		soap_serialize_PointerTott__IPv4NetworkInterface(soap, (tt__IPv4NetworkInterface *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceLink:
		soap_serialize_PointerTott__NetworkInterfaceLink(soap, (tt__NetworkInterfaceLink *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceInfo:
		soap_serialize_PointerTott__NetworkInterfaceInfo(soap, (tt__NetworkInterfaceInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoOutputExtension:
		soap_serialize_PointerTott__VideoOutputExtension(soap, (tt__VideoOutputExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Layout:
		soap_serialize_PointerTott__Layout(soap, (tt__Layout *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MetadataConfigurationExtension:
		soap_serialize_PointerTott__MetadataConfigurationExtension(soap, (tt__MetadataConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EventSubscription:
		soap_serialize_PointerTott__EventSubscription(soap, (tt__EventSubscription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZFilter:
		soap_serialize_PointerTott__PTZFilter(soap, (tt__PTZFilter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RuleEngineConfiguration:
		soap_serialize_PointerTott__RuleEngineConfiguration(soap, (tt__RuleEngineConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration:
		soap_serialize_PointerTott__AnalyticsEngineConfiguration(soap, (tt__AnalyticsEngineConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoRateControl2:
		soap_serialize_PointerTott__VideoRateControl2(soap, (tt__VideoRateControl2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MulticastConfiguration:
		soap_serialize_PointerTott__MulticastConfiguration(soap, (tt__MulticastConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__H264Configuration:
		soap_serialize_PointerTott__H264Configuration(soap, (tt__H264Configuration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Mpeg4Configuration:
		soap_serialize_PointerTott__Mpeg4Configuration(soap, (tt__Mpeg4Configuration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoRateControl:
		soap_serialize_PointerTott__VideoRateControl(soap, (tt__VideoRateControl *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension:
		soap_serialize_PointerTott__VideoSourceConfigurationExtension(soap, (tt__VideoSourceConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IntRectangle:
		soap_serialize_PointerTott__IntRectangle(soap, (tt__IntRectangle *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoSourceExtension:
		soap_serialize_PointerTott__VideoSourceExtension(soap, (tt__VideoSourceExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingSettings:
		soap_serialize_PointerTott__ImagingSettings(soap, (tt__ImagingSettings *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MessageDescription:
		soap_serialize_PointerTott__MessageDescription(soap, (tt__MessageDescription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa__ServiceNameType:
		soap_serialize_PointerTowsa__ServiceNameType(soap, (wsa__ServiceNameType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa__AttributedQName:
		soap_serialize_PointerTowsa__AttributedQName(soap, (wsa__AttributedQName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa__ReferenceParametersType:
		soap_serialize_PointerTowsa__ReferenceParametersType(soap, (wsa__ReferenceParametersType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa__ReferencePropertiesType:
		soap_serialize_PointerTowsa__ReferencePropertiesType(soap, (wsa__ReferencePropertiesType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa__AttributedURI:
		soap_serialize_PointerTowsa__AttributedURI(soap, (wsa__AttributedURI *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__SigType:
		soap_serialize_PointerTowsd__SigType(soap, (wsd__SigType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__ResolveMatchType:
		soap_serialize_PointerTowsd__ResolveMatchType(soap, (wsd__ResolveMatchType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__ProbeMatchType:
		soap_serialize_PointerTowsd__ProbeMatchType(soap, (wsd__ProbeMatchType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedInt:
		soap_serialize_PointerTounsignedInt(soap, (unsigned int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__UriListType:
		soap_serialize_PointerTowsd__UriListType(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__ScopesType:
		soap_serialize_PointerTowsd__ScopesType(soap, (wsd__ScopesType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__QNameListType:
		soap_serialize_PointerTowsd__QNameListType(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa__EndpointReferenceType:
		soap_serialize_PointerTowsa__EndpointReferenceType(soap, (wsa__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy:
		soap_serialize_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(soap, (_tev__CreatePullPointSubscription_SubscriptionPolicy *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotev__Capabilities:
		soap_serialize_PointerTotev__Capabilities(soap, (tev__Capabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__Documentation:
		soap_serialize_PointerTowstop__Documentation(soap, (wstop__Documentation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause:
		soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, (_wsrfbf__BaseFaultType_FaultCause *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_xml__lang:
		soap_serialize_PointerTo_xml__lang(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode:
		soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, (_wsrfbf__BaseFaultType_ErrorCode *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__nonNegativeInteger:
		soap_serialize_PointerToxsd__nonNegativeInteger(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy:
		soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, (_wsnt__Subscribe_SubscriptionPolicy *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType:
		soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType:
		soap_serialize_PointerTowsnt__SubscriptionPolicyType(soap, (wsnt__SubscriptionPolicyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowstop__TopicSetType:
		soap_serialize_PointerTowstop__TopicSetType(soap, (wstop__TopicSetType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__TopicExpressionTypeCustom:
		soap_serialize_PointerTowsnt__TopicExpressionTypeCustom(soap, (wsnt__TopicExpressionTypeCustom *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa5__EndpointReferenceType:
		soap_serialize_PointerTowsa5__EndpointReferenceType(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PropertyOperation:
		soap_serialize_PointerTott__PropertyOperation(soap, (tt__PropertyOperation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MessageExtension:
		soap_serialize_PointerTott__MessageExtension(soap, (tt__MessageExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LocalOrientation:
		soap_serialize_PointerTott__LocalOrientation(soap, (tt__LocalOrientation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LocalLocation:
		soap_serialize_PointerTott__LocalLocation(soap, (tt__LocalLocation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__GeoOrientation:
		soap_serialize_PointerTott__GeoOrientation(soap, (tt__GeoOrientation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__GeoLocation:
		soap_serialize_PointerTott__GeoLocation(soap, (tt__GeoLocation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodouble:
		soap_serialize_PointerTodouble(soap, (double *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__TransformationExtension:
		soap_serialize_PointerTott__TransformationExtension(soap, (tt__TransformationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MoveStatus:
		soap_serialize_PointerTott__MoveStatus(soap, (tt__MoveStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZMoveStatus:
		soap_serialize_PointerTott__PTZMoveStatus(soap, (tt__PTZMoveStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__StorageReferencePathExtension:
		soap_serialize_PointerTott__StorageReferencePathExtension(soap, (tt__StorageReferencePathExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension:
		soap_serialize_PointerTott__ArrayOfFileProgressExtension(soap, (tt__ArrayOfFileProgressExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FileProgress:
		soap_serialize_PointerTott__FileProgress(soap, (tt__FileProgress *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension:
		soap_serialize_PointerTott__OSDConfigurationOptionsExtension(soap, (tt__OSDConfigurationOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDImgOptions:
		soap_serialize_PointerTott__OSDImgOptions(soap, (tt__OSDImgOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDTextOptions:
		soap_serialize_PointerTott__OSDTextOptions(soap, (tt__OSDTextOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MaximumNumberOfOSDs:
		soap_serialize_PointerTott__MaximumNumberOfOSDs(soap, (tt__MaximumNumberOfOSDs *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDImgOptionsExtension:
		soap_serialize_PointerTott__OSDImgOptionsExtension(soap, (tt__OSDImgOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDTextOptionsExtension:
		soap_serialize_PointerTott__OSDTextOptionsExtension(soap, (tt__OSDTextOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDColorOptions:
		soap_serialize_PointerTott__OSDColorOptions(soap, (tt__OSDColorOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDColorOptionsExtension:
		soap_serialize_PointerTott__OSDColorOptionsExtension(soap, (tt__OSDColorOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ColorOptions:
		soap_serialize_PointerTott__ColorOptions(soap, (tt__ColorOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ColorspaceRange:
		soap_serialize_PointerTott__ColorspaceRange(soap, (tt__ColorspaceRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDImgConfigurationExtension:
		soap_serialize_PointerTott__OSDImgConfigurationExtension(soap, (tt__OSDImgConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDTextConfigurationExtension:
		soap_serialize_PointerTott__OSDTextConfigurationExtension(soap, (tt__OSDTextConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDColor:
		soap_serialize_PointerTott__OSDColor(soap, (tt__OSDColor *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Color:
		soap_serialize_PointerTott__Color(soap, (tt__Color *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OSDPosConfigurationExtension:
		soap_serialize_PointerTott__OSDPosConfigurationExtension(soap, (tt__OSDPosConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ProfileStatusExtension:
		soap_serialize_PointerTott__ProfileStatusExtension(soap, (tt__ProfileStatusExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ActiveConnection:
		soap_serialize_PointerTott__ActiveConnection(soap, (tt__ActiveConnection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioClassDescriptorExtension:
		soap_serialize_PointerTott__AudioClassDescriptorExtension(soap, (tt__AudioClassDescriptorExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioClassCandidate:
		soap_serialize_PointerTott__AudioClassCandidate(soap, (tt__AudioClassCandidate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension:
		soap_serialize_PointerTott__ActionEngineEventPayloadExtension(soap, (tt__ActionEngineEventPayloadExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSOAP_ENV__Envelope:
		soap_serialize_PointerToSOAP_ENV__Envelope(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsState:
		soap_serialize_PointerTott__AnalyticsState(soap, (tt__AnalyticsState *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MetadataInputExtension:
		soap_serialize_PointerTott__MetadataInputExtension(soap, (tt__MetadataInputExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SourceIdentificationExtension:
		soap_serialize_PointerTott__SourceIdentificationExtension(soap, (tt__SourceIdentificationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension:
		soap_serialize_PointerTott__AnalyticsEngineInputInfoExtension(soap, (tt__AnalyticsEngineInputInfoExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo:
		soap_serialize_PointerTott__AnalyticsEngineInputInfo(soap, (tt__AnalyticsEngineInputInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension:
		soap_serialize_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, (tt__AnalyticsDeviceEngineConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EngineConfiguration:
		soap_serialize_PointerTott__EngineConfiguration(soap, (tt__EngineConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobConfiguration:
		soap_serialize_PointerTott__RecordingJobConfiguration(soap, (tt__RecordingJobConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobStateTrack:
		soap_serialize_PointerTott__RecordingJobStateTrack(soap, (tt__RecordingJobStateTrack *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobStateTracks:
		soap_serialize_PointerTott__RecordingJobStateTracks(soap, (tt__RecordingJobStateTracks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension:
		soap_serialize_PointerTott__RecordingJobStateInformationExtension(soap, (tt__RecordingJobStateInformationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobStateSource:
		soap_serialize_PointerTott__RecordingJobStateSource(soap, (tt__RecordingJobStateSource *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobSourceExtension:
		soap_serialize_PointerTott__RecordingJobSourceExtension(soap, (tt__RecordingJobSourceExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobTrack:
		soap_serialize_PointerTott__RecordingJobTrack(soap, (tt__RecordingJobTrack *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension:
		soap_serialize_PointerTott__RecordingJobConfigurationExtension(soap, (tt__RecordingJobConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingJobSource:
		soap_serialize_PointerTott__RecordingJobSource(soap, (tt__RecordingJobSource *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__TrackConfiguration:
		soap_serialize_PointerTott__TrackConfiguration(soap, (tt__TrackConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__GetTracksResponseItem:
		soap_serialize_PointerTott__GetTracksResponseItem(soap, (tt__GetTracksResponseItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__GetTracksResponseList:
		soap_serialize_PointerTott__GetTracksResponseList(soap, (tt__GetTracksResponseList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingConfiguration:
		soap_serialize_PointerTott__RecordingConfiguration(soap, (tt__RecordingConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__TrackAttributesExtension:
		soap_serialize_PointerTott__TrackAttributesExtension(soap, (tt__TrackAttributesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MetadataAttributes:
		soap_serialize_PointerTott__MetadataAttributes(soap, (tt__MetadataAttributes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioAttributes:
		soap_serialize_PointerTott__AudioAttributes(soap, (tt__AudioAttributes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoAttributes:
		soap_serialize_PointerTott__VideoAttributes(soap, (tt__VideoAttributes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__TrackAttributes:
		soap_serialize_PointerTott__TrackAttributes(soap, (tt__TrackAttributes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__TrackInformation:
		soap_serialize_PointerTott__TrackInformation(soap, (tt__TrackInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingSourceInformation:
		soap_serialize_PointerTott__RecordingSourceInformation(soap, (tt__RecordingSourceInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FindMetadataResult:
		soap_serialize_PointerTott__FindMetadataResult(soap, (tt__FindMetadataResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FindPTZPositionResult:
		soap_serialize_PointerTott__FindPTZPositionResult(soap, (tt__FindPTZPositionResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType:
		soap_serialize_PointerTowsnt__NotificationMessageHolderType(soap, (wsnt__NotificationMessageHolderType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FindEventResult:
		soap_serialize_PointerTott__FindEventResult(soap, (tt__FindEventResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingInformation:
		soap_serialize_PointerTott__RecordingInformation(soap, (tt__RecordingInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SearchScopeExtension:
		soap_serialize_PointerTott__SearchScopeExtension(soap, (tt__SearchScopeExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__XPathExpression:
		soap_serialize_PointerTott__XPathExpression(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SourceReference:
		soap_serialize_PointerTott__SourceReference(soap, (tt__SourceReference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__StreamSetup:
		soap_serialize_PointerTott__StreamSetup(soap, (tt__StreamSetup *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ReceiverConfiguration:
		soap_serialize_PointerTott__ReceiverConfiguration(soap, (tt__ReceiverConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PaneOptionExtension:
		soap_serialize_PointerTott__PaneOptionExtension(soap, (tt__PaneOptionExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LayoutOptionsExtension:
		soap_serialize_PointerTott__LayoutOptionsExtension(soap, (tt__LayoutOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PaneLayoutOptions:
		soap_serialize_PointerTott__PaneLayoutOptions(soap, (tt__PaneLayoutOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions:
		soap_serialize_PointerTott__VideoDecoderConfigurationOptions(soap, (tt__VideoDecoderConfigurationOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions:
		soap_serialize_PointerTott__AudioDecoderConfigurationOptions(soap, (tt__AudioDecoderConfigurationOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions:
		soap_serialize_PointerTott__AudioEncoderConfigurationOptions(soap, (tt__AudioEncoderConfigurationOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LayoutExtension:
		soap_serialize_PointerTott__LayoutExtension(soap, (tt__LayoutExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PaneLayout:
		soap_serialize_PointerTott__PaneLayout(soap, (tt__PaneLayout *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Transformation:
		soap_serialize_PointerTott__Transformation(soap, (tt__Transformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MotionExpression:
		soap_serialize_PointerTott__MotionExpression(soap, (tt__MotionExpression *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PolylineArray:
		soap_serialize_PointerTott__PolylineArray(soap, (tt__PolylineArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PolylineArrayExtension:
		soap_serialize_PointerTott__PolylineArrayExtension(soap, (tt__PolylineArrayExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Polyline:
		soap_serialize_PointerTott__Polyline(soap, (tt__Polyline *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Polygon:
		soap_serialize_PointerTott__Polygon(soap, (tt__Polygon *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension:
		soap_serialize_PointerTott__SupportedAnalyticsModulesExtension(soap, (tt__SupportedAnalyticsModulesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SupportedRulesExtension:
		soap_serialize_PointerTott__SupportedRulesExtension(soap, (tt__SupportedRulesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ConfigDescription:
		soap_serialize_PointerTott__ConfigDescription(soap, (tt__ConfigDescription *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__integer:
		soap_serialize_PointerToxsd__integer(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ConfigDescriptionExtension:
		soap_serialize_PointerTott__ConfigDescriptionExtension(soap, (tt__ConfigDescriptionExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ItemList:
		soap_serialize_PointerTott__ItemList(soap, (tt__ItemList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension:
		soap_serialize_PointerTott__RuleEngineConfigurationExtension(soap, (tt__RuleEngineConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension:
		soap_serialize_PointerTott__AnalyticsEngineConfigurationExtension(soap, (tt__AnalyticsEngineConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Config:
		soap_serialize_PointerTott__Config(soap, (tt__Config *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Vector:
		soap_serialize_PointerTott__Vector(soap, (tt__Vector *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ItemListDescriptionExtension:
		soap_serialize_PointerTott__ItemListDescriptionExtension(soap, (tt__ItemListDescriptionExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MessageDescriptionExtension:
		soap_serialize_PointerTott__MessageDescriptionExtension(soap, (tt__MessageDescriptionExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ItemListDescription:
		soap_serialize_PointerTott__ItemListDescription(soap, (tt__ItemListDescription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ItemListExtension:
		soap_serialize_PointerTott__ItemListExtension(soap, (tt__ItemListExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusOptions20Extension:
		soap_serialize_PointerTott__FocusOptions20Extension(soap, (tt__FocusOptions20Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension:
		soap_serialize_PointerTott__WhiteBalanceOptions20Extension(soap, (tt__WhiteBalanceOptions20Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusConfiguration20Extension:
		soap_serialize_PointerTott__FocusConfiguration20Extension(soap, (tt__FocusConfiguration20Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WhiteBalance20Extension:
		soap_serialize_PointerTott__WhiteBalance20Extension(soap, (tt__WhiteBalance20Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RelativeFocusOptions20:
		soap_serialize_PointerTott__RelativeFocusOptions20(soap, (tt__RelativeFocusOptions20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension:
		soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, (tt__IrCutFilterAutoAdjustmentOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension:
		soap_serialize_PointerTott__ImageStabilizationOptionsExtension(soap, (tt__ImageStabilizationOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension4:
		soap_serialize_PointerTott__ImagingOptions20Extension4(soap, (tt__ImagingOptions20Extension4 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NoiseReductionOptions:
		soap_serialize_PointerTott__NoiseReductionOptions(soap, (tt__NoiseReductionOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DefoggingOptions:
		soap_serialize_PointerTott__DefoggingOptions(soap, (tt__DefoggingOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ToneCompensationOptions:
		soap_serialize_PointerTott__ToneCompensationOptions(soap, (tt__ToneCompensationOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension3:
		soap_serialize_PointerTott__ImagingOptions20Extension3(soap, (tt__ImagingOptions20Extension3 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions:
		soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, (tt__IrCutFilterAutoAdjustmentOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension2:
		soap_serialize_PointerTott__ImagingOptions20Extension2(soap, (tt__ImagingOptions20Extension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImageStabilizationOptions:
		soap_serialize_PointerTott__ImageStabilizationOptions(soap, (tt__ImageStabilizationOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingOptions20Extension:
		soap_serialize_PointerTott__ImagingOptions20Extension(soap, (tt__ImagingOptions20Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions20:
		soap_serialize_PointerTott__WhiteBalanceOptions20(soap, (tt__WhiteBalanceOptions20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WideDynamicRangeOptions20:
		soap_serialize_PointerTott__WideDynamicRangeOptions20(soap, (tt__WideDynamicRangeOptions20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusOptions20:
		soap_serialize_PointerTott__FocusOptions20(soap, (tt__FocusOptions20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ExposureOptions20:
		soap_serialize_PointerTott__ExposureOptions20(soap, (tt__ExposureOptions20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__BacklightCompensationOptions20:
		soap_serialize_PointerTott__BacklightCompensationOptions20(soap, (tt__BacklightCompensationOptions20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DefoggingExtension:
		soap_serialize_PointerTott__DefoggingExtension(soap, (tt__DefoggingExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ToneCompensationExtension:
		soap_serialize_PointerTott__ToneCompensationExtension(soap, (tt__ToneCompensationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ExposurePriority:
		soap_serialize_PointerTott__ExposurePriority(soap, (tt__ExposurePriority *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension:
		soap_serialize_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, (tt__IrCutFilterAutoAdjustmentExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImageStabilizationExtension:
		soap_serialize_PointerTott__ImageStabilizationExtension(soap, (tt__ImageStabilizationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension204:
		soap_serialize_PointerTott__ImagingSettingsExtension204(soap, (tt__ImagingSettingsExtension204 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NoiseReduction:
		soap_serialize_PointerTott__NoiseReduction(soap, (tt__NoiseReduction *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Defogging:
		soap_serialize_PointerTott__Defogging(soap, (tt__Defogging *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ToneCompensation:
		soap_serialize_PointerTott__ToneCompensation(soap, (tt__ToneCompensation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension203:
		soap_serialize_PointerTott__ImagingSettingsExtension203(soap, (tt__ImagingSettingsExtension203 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment:
		soap_serialize_PointerTott__IrCutFilterAutoAdjustment(soap, (tt__IrCutFilterAutoAdjustment *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension202:
		soap_serialize_PointerTott__ImagingSettingsExtension202(soap, (tt__ImagingSettingsExtension202 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImageStabilization:
		soap_serialize_PointerTott__ImageStabilization(soap, (tt__ImageStabilization *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension20:
		soap_serialize_PointerTott__ImagingSettingsExtension20(soap, (tt__ImagingSettingsExtension20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WhiteBalance20:
		soap_serialize_PointerTott__WhiteBalance20(soap, (tt__WhiteBalance20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WideDynamicRange20:
		soap_serialize_PointerTott__WideDynamicRange20(soap, (tt__WideDynamicRange20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusConfiguration20:
		soap_serialize_PointerTott__FocusConfiguration20(soap, (tt__FocusConfiguration20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Exposure20:
		soap_serialize_PointerTott__Exposure20(soap, (tt__Exposure20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__BacklightCompensation20:
		soap_serialize_PointerTott__BacklightCompensation20(soap, (tt__BacklightCompensation20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusStatus20Extension:
		soap_serialize_PointerTott__FocusStatus20Extension(soap, (tt__FocusStatus20Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingStatus20Extension:
		soap_serialize_PointerTott__ImagingStatus20Extension(soap, (tt__ImagingStatus20Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusStatus20:
		soap_serialize_PointerTott__FocusStatus20(soap, (tt__FocusStatus20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ContinuousFocusOptions:
		soap_serialize_PointerTott__ContinuousFocusOptions(soap, (tt__ContinuousFocusOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RelativeFocusOptions:
		soap_serialize_PointerTott__RelativeFocusOptions(soap, (tt__RelativeFocusOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AbsoluteFocusOptions:
		soap_serialize_PointerTott__AbsoluteFocusOptions(soap, (tt__AbsoluteFocusOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ContinuousFocus:
		soap_serialize_PointerTott__ContinuousFocus(soap, (tt__ContinuousFocus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RelativeFocus:
		soap_serialize_PointerTott__RelativeFocus(soap, (tt__RelativeFocus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AbsoluteFocus:
		soap_serialize_PointerTott__AbsoluteFocus(soap, (tt__AbsoluteFocus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WhiteBalanceOptions:
		soap_serialize_PointerTott__WhiteBalanceOptions(soap, (tt__WhiteBalanceOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WideDynamicRangeOptions:
		soap_serialize_PointerTott__WideDynamicRangeOptions(soap, (tt__WideDynamicRangeOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusOptions:
		soap_serialize_PointerTott__FocusOptions(soap, (tt__FocusOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ExposureOptions:
		soap_serialize_PointerTott__ExposureOptions(soap, (tt__ExposureOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__BacklightCompensationOptions:
		soap_serialize_PointerTott__BacklightCompensationOptions(soap, (tt__BacklightCompensationOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Rectangle:
		soap_serialize_PointerTott__Rectangle(soap, (tt__Rectangle *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingSettingsExtension:
		soap_serialize_PointerTott__ImagingSettingsExtension(soap, (tt__ImagingSettingsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WhiteBalance:
		soap_serialize_PointerTott__WhiteBalance(soap, (tt__WhiteBalance *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__WideDynamicRange:
		soap_serialize_PointerTott__WideDynamicRange(soap, (tt__WideDynamicRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IrCutFilterMode:
		soap_serialize_PointerTott__IrCutFilterMode(soap, (tt__IrCutFilterMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusConfiguration:
		soap_serialize_PointerTott__FocusConfiguration(soap, (tt__FocusConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Exposure:
		soap_serialize_PointerTott__Exposure(soap, (tt__Exposure *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__BacklightCompensation:
		soap_serialize_PointerTott__BacklightCompensation(soap, (tt__BacklightCompensation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FocusStatus:
		soap_serialize_PointerTott__FocusStatus(soap, (tt__FocusStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension:
		soap_serialize_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, (tt__PTZPresetTourStartingConditionOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension:
		soap_serialize_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, (tt__PTZPresetTourPresetDetailOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions:
		soap_serialize_PointerTott__PTZPresetTourPresetDetailOptions(soap, (tt__PTZPresetTourPresetDetailOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions:
		soap_serialize_PointerTott__PTZPresetTourSpotOptions(soap, (tt__PTZPresetTourSpotOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions:
		soap_serialize_PointerTott__PTZPresetTourStartingConditionOptions(soap, (tt__PTZPresetTourStartingConditionOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension:
		soap_serialize_PointerTott__PTZPresetTourStartingConditionExtension(soap, (tt__PTZPresetTourStartingConditionExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourDirection:
		soap_serialize_PointerTott__PTZPresetTourDirection(soap, (tt__PTZPresetTourDirection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension:
		soap_serialize_PointerTott__PTZPresetTourStatusExtension(soap, (tt__PTZPresetTourStatusExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension:
		soap_serialize_PointerTott__PTZPresetTourTypeExtension(soap, (tt__PTZPresetTourTypeExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension:
		soap_serialize_PointerTott__PTZPresetTourSpotExtension(soap, (tt__PTZPresetTourSpotExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZSpeed:
		soap_serialize_PointerTott__PTZSpeed(soap, (tt__PTZSpeed *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail:
		soap_serialize_PointerTott__PTZPresetTourPresetDetail(soap, (tt__PTZPresetTourPresetDetail *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourExtension:
		soap_serialize_PointerTott__PTZPresetTourExtension(soap, (tt__PTZPresetTourExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourSpot:
		soap_serialize_PointerTott__PTZPresetTourSpot(soap, (tt__PTZPresetTourSpot *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition:
		soap_serialize_PointerTott__PTZPresetTourStartingCondition(soap, (tt__PTZPresetTourStartingCondition *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourStatus:
		soap_serialize_PointerTott__PTZPresetTourStatus(soap, (tt__PTZPresetTourStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZVector:
		soap_serialize_PointerTott__PTZVector(soap, (tt__PTZVector *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Name:
		soap_serialize_PointerTott__Name(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Vector1D:
		soap_serialize_PointerTott__Vector1D(soap, (tt__Vector1D *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Vector2D:
		soap_serialize_PointerTott__Vector2D(soap, (tt__Vector2D *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZSpacesExtension:
		soap_serialize_PointerTott__PTZSpacesExtension(soap, (tt__PTZSpacesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Space1DDescription:
		soap_serialize_PointerTott__Space1DDescription(soap, (tt__Space1DDescription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Space2DDescription:
		soap_serialize_PointerTott__Space2DDescription(soap, (tt__Space2DDescription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ReverseOptionsExtension:
		soap_serialize_PointerTott__ReverseOptionsExtension(soap, (tt__ReverseOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EFlipOptionsExtension:
		soap_serialize_PointerTott__EFlipOptionsExtension(soap, (tt__EFlipOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension:
		soap_serialize_PointerTott__PTControlDirectionOptionsExtension(soap, (tt__PTControlDirectionOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ReverseOptions:
		soap_serialize_PointerTott__ReverseOptions(soap, (tt__ReverseOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EFlipOptions:
		soap_serialize_PointerTott__EFlipOptions(soap, (tt__EFlipOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZConfigurationOptions2:
		soap_serialize_PointerTott__PTZConfigurationOptions2(soap, (tt__PTZConfigurationOptions2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTControlDirectionOptions:
		soap_serialize_PointerTott__PTControlDirectionOptions(soap, (tt__PTControlDirectionOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DurationRange:
		soap_serialize_PointerTott__DurationRange(soap, (tt__DurationRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZSpaces:
		soap_serialize_PointerTott__PTZSpaces(soap, (tt__PTZSpaces *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTControlDirectionExtension:
		soap_serialize_PointerTott__PTControlDirectionExtension(soap, (tt__PTControlDirectionExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Reverse:
		soap_serialize_PointerTott__Reverse(soap, (tt__Reverse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EFlip:
		soap_serialize_PointerTott__EFlip(soap, (tt__EFlip *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZConfigurationExtension2:
		soap_serialize_PointerTott__PTZConfigurationExtension2(soap, (tt__PTZConfigurationExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTControlDirection:
		soap_serialize_PointerTott__PTControlDirection(soap, (tt__PTControlDirection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension:
		soap_serialize_PointerTott__PTZPresetTourSupportedExtension(soap, (tt__PTZPresetTourSupportedExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZNodeExtension2:
		soap_serialize_PointerTott__PTZNodeExtension2(soap, (tt__PTZNodeExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZPresetTourSupported:
		soap_serialize_PointerTott__PTZPresetTourSupported(soap, (tt__PTZPresetTourSupported *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EapMethodExtension:
		soap_serialize_PointerTott__EapMethodExtension(soap, (tt__EapMethodExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__TLSConfiguration:
		soap_serialize_PointerTott__TLSConfiguration(soap, (tt__TLSConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot1XConfigurationExtension:
		soap_serialize_PointerTott__Dot1XConfigurationExtension(soap, (tt__Dot1XConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EAPMethodConfiguration:
		soap_serialize_PointerTott__EAPMethodConfiguration(soap, (tt__EAPMethodConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CertificateInformationExtension:
		soap_serialize_PointerTott__CertificateInformationExtension(soap, (tt__CertificateInformationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DateTimeRange:
		soap_serialize_PointerTott__DateTimeRange(soap, (tt__DateTimeRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CertificateUsage:
		soap_serialize_PointerTott__CertificateUsage(soap, (tt__CertificateUsage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension:
		soap_serialize_PointerTott__CertificateGenerationParametersExtension(soap, (tt__CertificateGenerationParametersExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__UserExtension:
		soap_serialize_PointerTott__UserExtension(soap, (tt__UserExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Date:
		soap_serialize_PointerTott__Date(soap, (tt__Date *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Time:
		soap_serialize_PointerTott__Time(soap, (tt__Time *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemDateTimeExtension:
		soap_serialize_PointerTott__SystemDateTimeExtension(soap, (tt__SystemDateTimeExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemLogUri:
		soap_serialize_PointerTott__SystemLogUri(soap, (tt__SystemLogUri *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxop__Include:
		soap_serialize_PointerToxop__Include(soap, (xop__Include *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_xmime__contentType:
		soap_serialize_PointerTo_xmime__contentType(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsDeviceExtension:
		soap_serialize_PointerTott__AnalyticsDeviceExtension(soap, (tt__AnalyticsDeviceExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2:
		soap_serialize_PointerTott__SystemCapabilitiesExtension2(soap, (tt__SystemCapabilitiesExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemCapabilitiesExtension:
		soap_serialize_PointerTott__SystemCapabilitiesExtension(soap, (tt__SystemCapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2:
		soap_serialize_PointerTott__SecurityCapabilitiesExtension2(soap, (tt__SecurityCapabilitiesExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension:
		soap_serialize_PointerTott__SecurityCapabilitiesExtension(soap, (tt__SecurityCapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2:
		soap_serialize_PointerTott__NetworkCapabilitiesExtension2(soap, (tt__NetworkCapabilitiesExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension:
		soap_serialize_PointerTott__NetworkCapabilitiesExtension(soap, (tt__NetworkCapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension:
		soap_serialize_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, (tt__RealTimeStreamingCapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ProfileCapabilities:
		soap_serialize_PointerTott__ProfileCapabilities(soap, (tt__ProfileCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MediaCapabilitiesExtension:
		soap_serialize_PointerTott__MediaCapabilitiesExtension(soap, (tt__MediaCapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities:
		soap_serialize_PointerTott__RealTimeStreamingCapabilities(soap, (tt__RealTimeStreamingCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IOCapabilitiesExtension2:
		soap_serialize_PointerTott__IOCapabilitiesExtension2(soap, (tt__IOCapabilitiesExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IOCapabilitiesExtension:
		soap_serialize_PointerTott__IOCapabilitiesExtension(soap, (tt__IOCapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension:
		soap_serialize_PointerTott__DeviceCapabilitiesExtension(soap, (tt__DeviceCapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SecurityCapabilities:
		soap_serialize_PointerTott__SecurityCapabilities(soap, (tt__SecurityCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IOCapabilities:
		soap_serialize_PointerTott__IOCapabilities(soap, (tt__IOCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemCapabilities:
		soap_serialize_PointerTott__SystemCapabilities(soap, (tt__SystemCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkCapabilities:
		soap_serialize_PointerTott__NetworkCapabilities(soap, (tt__NetworkCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CapabilitiesExtension2:
		soap_serialize_PointerTott__CapabilitiesExtension2(soap, (tt__CapabilitiesExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities:
		soap_serialize_PointerTott__AnalyticsDeviceCapabilities(soap, (tt__AnalyticsDeviceCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ReceiverCapabilities:
		soap_serialize_PointerTott__ReceiverCapabilities(soap, (tt__ReceiverCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ReplayCapabilities:
		soap_serialize_PointerTott__ReplayCapabilities(soap, (tt__ReplayCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SearchCapabilities:
		soap_serialize_PointerTott__SearchCapabilities(soap, (tt__SearchCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RecordingCapabilities:
		soap_serialize_PointerTott__RecordingCapabilities(soap, (tt__RecordingCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DisplayCapabilities:
		soap_serialize_PointerTott__DisplayCapabilities(soap, (tt__DisplayCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DeviceIOCapabilities:
		soap_serialize_PointerTott__DeviceIOCapabilities(soap, (tt__DeviceIOCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CapabilitiesExtension:
		soap_serialize_PointerTott__CapabilitiesExtension(soap, (tt__CapabilitiesExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZCapabilities:
		soap_serialize_PointerTott__PTZCapabilities(soap, (tt__PTZCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MediaCapabilities:
		soap_serialize_PointerTott__MediaCapabilities(soap, (tt__MediaCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingCapabilities:
		soap_serialize_PointerTott__ImagingCapabilities(soap, (tt__ImagingCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__EventCapabilities:
		soap_serialize_PointerTott__EventCapabilities(soap, (tt__EventCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DeviceCapabilities:
		soap_serialize_PointerTott__DeviceCapabilities(soap, (tt__DeviceCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AnalyticsCapabilities:
		soap_serialize_PointerTott__AnalyticsCapabilities(soap, (tt__AnalyticsCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension:
		soap_serialize_PointerTott__Dot11AvailableNetworksExtension(soap, (tt__Dot11AvailableNetworksExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11SignalStrength:
		soap_serialize_PointerTott__Dot11SignalStrength(soap, (tt__Dot11SignalStrength *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11PSKSetExtension:
		soap_serialize_PointerTott__Dot11PSKSetExtension(soap, (tt__Dot11PSKSetExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11PSKPassphrase:
		soap_serialize_PointerTott__Dot11PSKPassphrase(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11PSK:
		soap_serialize_PointerTott__Dot11PSK(soap, (xsd__hexBinary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension:
		soap_serialize_PointerTott__Dot11SecurityConfigurationExtension(soap, (tt__Dot11SecurityConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ReferenceToken:
		soap_serialize_PointerTott__ReferenceToken(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11PSKSet:
		soap_serialize_PointerTott__Dot11PSKSet(soap, (tt__Dot11PSKSet *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11Cipher:
		soap_serialize_PointerTott__Dot11Cipher(soap, (tt__Dot11Cipher *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11SecurityConfiguration:
		soap_serialize_PointerTott__Dot11SecurityConfiguration(soap, (tt__Dot11SecurityConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPAddressFilterExtension:
		soap_serialize_PointerTott__IPAddressFilterExtension(soap, (tt__IPAddressFilterExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2:
		soap_serialize_PointerTott__NetworkZeroConfigurationExtension2(soap, (tt__NetworkZeroConfigurationExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension:
		soap_serialize_PointerTott__NetworkZeroConfigurationExtension(soap, (tt__NetworkZeroConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv6DHCPConfiguration:
		soap_serialize_PointerTott__IPv6DHCPConfiguration(soap, (tt__IPv6DHCPConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2:
		soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, (tt__NetworkInterfaceSetConfigurationExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension:
		soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, (tt__NetworkInterfaceSetConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration:
		soap_serialize_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, (tt__IPv6NetworkInterfaceSetConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration:
		soap_serialize_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, (tt__IPv4NetworkInterfaceSetConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DynamicDNSInformationExtension:
		soap_serialize_PointerTott__DynamicDNSInformationExtension(soap, (tt__DynamicDNSInformationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NTPInformationExtension:
		soap_serialize_PointerTott__NTPInformationExtension(soap, (tt__NTPInformationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DNSInformationExtension:
		soap_serialize_PointerTott__DNSInformationExtension(soap, (tt__DNSInformationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__HostnameInformationExtension:
		soap_serialize_PointerTott__HostnameInformationExtension(soap, (tt__HostnameInformationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkHostExtension:
		soap_serialize_PointerTott__NetworkHostExtension(soap, (tt__NetworkHostExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv6Address:
		soap_serialize_PointerTott__IPv6Address(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv4Address:
		soap_serialize_PointerTott__IPv4Address(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkProtocolExtension:
		soap_serialize_PointerTott__NetworkProtocolExtension(soap, (tt__NetworkProtocolExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv6ConfigurationExtension:
		soap_serialize_PointerTott__IPv6ConfigurationExtension(soap, (tt__IPv6ConfigurationExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PrefixedIPv6Address:
		soap_serialize_PointerTott__PrefixedIPv6Address(soap, (tt__PrefixedIPv6Address *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PrefixedIPv4Address:
		soap_serialize_PointerTott__PrefixedIPv4Address(soap, (tt__PrefixedIPv4Address *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv4Configuration:
		soap_serialize_PointerTott__IPv4Configuration(soap, (tt__IPv4Configuration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPv6Configuration:
		soap_serialize_PointerTott__IPv6Configuration(soap, (tt__IPv6Configuration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting:
		soap_serialize_PointerTott__NetworkInterfaceConnectionSetting(soap, (tt__NetworkInterfaceConnectionSetting *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceExtension2:
		soap_serialize_PointerTott__NetworkInterfaceExtension2(soap, (tt__NetworkInterfaceExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11Configuration:
		soap_serialize_PointerTott__Dot11Configuration(soap, (tt__Dot11Configuration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot3Configuration:
		soap_serialize_PointerTott__Dot3Configuration(soap, (tt__Dot3Configuration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Transport:
		soap_serialize_PointerTott__Transport(soap, (tt__Transport *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension:
		soap_serialize_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, (tt__AudioDecoderConfigurationOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__G726DecOptions:
		soap_serialize_PointerTott__G726DecOptions(soap, (tt__G726DecOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__G711DecOptions:
		soap_serialize_PointerTott__G711DecOptions(soap, (tt__G711DecOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AACDecOptions:
		soap_serialize_PointerTott__AACDecOptions(soap, (tt__AACDecOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension:
		soap_serialize_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, (tt__VideoDecoderConfigurationOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Mpeg4DecOptions:
		soap_serialize_PointerTott__Mpeg4DecOptions(soap, (tt__Mpeg4DecOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__H264DecOptions:
		soap_serialize_PointerTott__H264DecOptions(soap, (tt__H264DecOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__JpegDecOptions:
		soap_serialize_PointerTott__JpegDecOptions(soap, (tt__JpegDecOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension:
		soap_serialize_PointerTott__PTZStatusFilterOptionsExtension(soap, (tt__PTZStatusFilterOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2:
		soap_serialize_PointerTott__MetadataConfigurationOptionsExtension2(soap, (tt__MetadataConfigurationOptionsExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension:
		soap_serialize_PointerTott__MetadataConfigurationOptionsExtension(soap, (tt__MetadataConfigurationOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZStatusFilterOptions:
		soap_serialize_PointerTott__PTZStatusFilterOptions(soap, (tt__PTZStatusFilterOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy:
		soap_serialize_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, (_tt__EventSubscription_SubscriptionPolicy *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsnt__FilterType:
		soap_serialize_PointerTowsnt__FilterType(soap, (wsnt__FilterType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption:
		soap_serialize_PointerTott__AudioEncoderConfigurationOption(soap, (tt__AudioEncoderConfigurationOption *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioSourceOptionsExtension:
		soap_serialize_PointerTott__AudioSourceOptionsExtension(soap, (tt__AudioSourceOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FloatAttrList:
		soap_serialize_PointerTott__FloatAttrList(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IntAttrList:
		soap_serialize_PointerTott__IntAttrList(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoResolution2:
		soap_serialize_PointerTott__VideoResolution2(soap, (tt__VideoResolution2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__FloatRange:
		soap_serialize_PointerTott__FloatRange(soap, (tt__FloatRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoResolution:
		soap_serialize_PointerTott__VideoResolution(soap, (tt__VideoResolution *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2:
		soap_serialize_PointerTott__VideoEncoderOptionsExtension2(soap, (tt__VideoEncoderOptionsExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__H264Options2:
		soap_serialize_PointerTott__H264Options2(soap, (tt__H264Options2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Mpeg4Options2:
		soap_serialize_PointerTott__Mpeg4Options2(soap, (tt__Mpeg4Options2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__JpegOptions2:
		soap_serialize_PointerTott__JpegOptions2(soap, (tt__JpegOptions2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension:
		soap_serialize_PointerTott__VideoEncoderOptionsExtension(soap, (tt__VideoEncoderOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__H264Options:
		soap_serialize_PointerTott__H264Options(soap, (tt__H264Options *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Mpeg4Options:
		soap_serialize_PointerTott__Mpeg4Options(soap, (tt__Mpeg4Options *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__JpegOptions:
		soap_serialize_PointerTott__JpegOptions(soap, (tt__JpegOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RotateOptionsExtension:
		soap_serialize_PointerTott__RotateOptionsExtension(soap, (tt__RotateOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IntList:
		soap_serialize_PointerTott__IntList(soap, (tt__IntList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2:
		soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, (tt__VideoSourceConfigurationOptionsExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RotateOptions:
		soap_serialize_PointerTott__RotateOptions(soap, (tt__RotateOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension:
		soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension(soap, (tt__VideoSourceConfigurationOptionsExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IntRectangleRange:
		soap_serialize_PointerTott__IntRectangleRange(soap, (tt__IntRectangleRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LensProjection:
		soap_serialize_PointerTott__LensProjection(soap, (tt__LensProjection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LensOffset:
		soap_serialize_PointerTott__LensOffset(soap, (tt__LensOffset *const*)ptr);
		break;
	case SOAP_TYPE_PointerTofloat:
		soap_serialize_PointerTofloat(soap, (float *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RotateExtension:
		soap_serialize_PointerTott__RotateExtension(soap, (tt__RotateExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SceneOrientation:
		soap_serialize_PointerTott__SceneOrientation(soap, (tt__SceneOrientation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LensDescription:
		soap_serialize_PointerTott__LensDescription(soap, (tt__LensDescription *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2:
		soap_serialize_PointerTott__VideoSourceConfigurationExtension2(soap, (tt__VideoSourceConfigurationExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Rotate:
		soap_serialize_PointerTott__Rotate(soap, (tt__Rotate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ProfileExtension2:
		soap_serialize_PointerTott__ProfileExtension2(soap, (tt__ProfileExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioDecoderConfiguration:
		soap_serialize_PointerTott__AudioDecoderConfiguration(soap, (tt__AudioDecoderConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioOutputConfiguration:
		soap_serialize_PointerTott__AudioOutputConfiguration(soap, (tt__AudioOutputConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ProfileExtension:
		soap_serialize_PointerTott__ProfileExtension(soap, (tt__ProfileExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__MetadataConfiguration:
		soap_serialize_PointerTott__MetadataConfiguration(soap, (tt__MetadataConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__PTZConfiguration:
		soap_serialize_PointerTott__PTZConfiguration(soap, (tt__PTZConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration:
		soap_serialize_PointerTott__VideoAnalyticsConfiguration(soap, (tt__VideoAnalyticsConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioEncoderConfiguration:
		soap_serialize_PointerTott__AudioEncoderConfiguration(soap, (tt__AudioEncoderConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoEncoderConfiguration:
		soap_serialize_PointerTott__VideoEncoderConfiguration(soap, (tt__VideoEncoderConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AudioSourceConfiguration:
		soap_serialize_PointerTott__AudioSourceConfiguration(soap, (tt__AudioSourceConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoSourceConfiguration:
		soap_serialize_PointerTott__VideoSourceConfiguration(soap, (tt__VideoSourceConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__VideoSourceExtension2:
		soap_serialize_PointerTott__VideoSourceExtension2(soap, (tt__VideoSourceExtension2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__ImagingSettings20:
		soap_serialize_PointerTott__ImagingSettings20(soap, (tt__ImagingSettings20 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IntRange:
		soap_serialize_PointerTott__IntRange(soap, (tt__IntRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__LocationEntity:
		soap_serialize_PointerTott__LocationEntity(soap, (tt__LocationEntity *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__StorageConfigurationData:
		soap_serialize_PointerTotds__StorageConfigurationData(soap, (tds__StorageConfigurationData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__StorageConfiguration:
		soap_serialize_PointerTotds__StorageConfiguration(soap, (tds__StorageConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension:
		soap_serialize_PointerTo_tds__GetSystemUrisResponse_Extension(soap, (_tds__GetSystemUrisResponse_Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemLogUriList:
		soap_serialize_PointerTott__SystemLogUriList(soap, (tt__SystemLogUriList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11AvailableNetworks:
		soap_serialize_PointerTott__Dot11AvailableNetworks(soap, (tt__Dot11AvailableNetworks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11Status:
		soap_serialize_PointerTott__Dot11Status(soap, (tt__Dot11Status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot11Capabilities:
		soap_serialize_PointerTott__Dot11Capabilities(soap, (tt__Dot11Capabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AuxiliaryData:
		soap_serialize_PointerTott__AuxiliaryData(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RelayOutputSettings:
		soap_serialize_PointerTott__RelayOutputSettings(soap, (tt__RelayOutputSettings *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RelayOutput:
		soap_serialize_PointerTott__RelayOutput(soap, (tt__RelayOutput *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Dot1XConfiguration:
		soap_serialize_PointerTott__Dot1XConfiguration(soap, (tt__Dot1XConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CertificateInformation:
		soap_serialize_PointerTott__CertificateInformation(soap, (tt__CertificateInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CertificateWithPrivateKey:
		soap_serialize_PointerTott__CertificateWithPrivateKey(soap, (tt__CertificateWithPrivateKey *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__CertificateStatus:
		soap_serialize_PointerTott__CertificateStatus(soap, (tt__CertificateStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Certificate:
		soap_serialize_PointerTott__Certificate(soap, (tt__Certificate *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__dateTime:
		soap_serialize_PointerToxsd__dateTime(soap, (struct timeval *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__token:
		soap_serialize_PointerToxsd__token(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__BinaryData:
		soap_serialize_PointerTott__BinaryData(soap, (tt__BinaryData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPAddressFilter:
		soap_serialize_PointerTott__IPAddressFilter(soap, (tt__IPAddressFilter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkZeroConfiguration:
		soap_serialize_PointerTott__NetworkZeroConfiguration(soap, (tt__NetworkZeroConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkGateway:
		soap_serialize_PointerTott__NetworkGateway(soap, (tt__NetworkGateway *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkProtocol:
		soap_serialize_PointerTott__NetworkProtocol(soap, (tt__NetworkProtocol *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration:
		soap_serialize_PointerTott__NetworkInterfaceSetConfiguration(soap, (tt__NetworkInterfaceSetConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkInterface:
		soap_serialize_PointerTott__NetworkInterface(soap, (tt__NetworkInterface *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__duration:
		soap_serialize_PointerToxsd__duration(soap, (std::chrono::nanoseconds *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DNSName:
		soap_serialize_PointerTott__DNSName(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DynamicDNSInformation:
		soap_serialize_PointerTott__DynamicDNSInformation(soap, (tt__DynamicDNSInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NTPInformation:
		soap_serialize_PointerTott__NTPInformation(soap, (tt__NTPInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__IPAddress:
		soap_serialize_PointerTott__IPAddress(soap, (tt__IPAddress *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DNSInformation:
		soap_serialize_PointerTott__DNSInformation(soap, (tt__DNSInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__HostnameInformation:
		soap_serialize_PointerTott__HostnameInformation(soap, (tt__HostnameInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Capabilities:
		soap_serialize_PointerTott__Capabilities(soap, (tt__Capabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__User:
		soap_serialize_PointerTott__User(soap, (tt__User *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__RemoteUser:
		soap_serialize_PointerTott__RemoteUser(soap, (tt__RemoteUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__NetworkHost:
		soap_serialize_PointerTott__NetworkHost(soap, (tt__NetworkHost *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__Scope:
		soap_serialize_PointerTott__Scope(soap, (tt__Scope *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemLog:
		soap_serialize_PointerTott__SystemLog(soap, (tt__SystemLog *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SupportInformation:
		soap_serialize_PointerTott__SupportInformation(soap, (tt__SupportInformation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__BackupFile:
		soap_serialize_PointerTott__BackupFile(soap, (tt__BackupFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__AttachmentData:
		soap_serialize_PointerTott__AttachmentData(soap, (tt__AttachmentData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__SystemDateTime:
		soap_serialize_PointerTott__SystemDateTime(soap, (tt__SystemDateTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__DateTime:
		soap_serialize_PointerTott__DateTime(soap, (tt__DateTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__TimeZone:
		soap_serialize_PointerTott__TimeZone(soap, (tt__TimeZone *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__DeviceServiceCapabilities:
		soap_serialize_PointerTotds__DeviceServiceCapabilities(soap, (tds__DeviceServiceCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__Service:
		soap_serialize_PointerTotds__Service(soap, (tds__Service *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension:
		soap_serialize_PointerTo_tds__StorageConfigurationData_Extension(soap, (_tds__StorageConfigurationData_Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__UserCredential:
		soap_serialize_PointerTotds__UserCredential(soap, (tds__UserCredential *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyURI:
		soap_serialize_PointerToxsd__anyURI(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__UserCredential_Extension:
		soap_serialize_PointerTo_tds__UserCredential_Extension(soap, (_tds__UserCredential_Extension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__StringAttrList:
		soap_serialize_PointerTott__StringAttrList(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__EAPMethodTypes:
		soap_serialize_PointerTotds__EAPMethodTypes(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__MiscCapabilities:
		soap_serialize_PointerTotds__MiscCapabilities(soap, (tds__MiscCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__SystemCapabilities:
		soap_serialize_PointerTotds__SystemCapabilities(soap, (tds__SystemCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__SecurityCapabilities:
		soap_serialize_PointerTotds__SecurityCapabilities(soap, (tds__SecurityCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotds__NetworkCapabilities:
		soap_serialize_PointerTotds__NetworkCapabilities(soap, (tds__NetworkCapabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTott__OnvifVersion:
		soap_serialize_PointerTott__OnvifVersion(soap, (tt__OnvifVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tds__Service_Capabilities:
		soap_serialize_PointerTo_tds__Service_Capabilities(soap, (_tds__Service_Capabilities *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerTochan__ChannelInstanceType:
		soap_serialize_PointerTochan__ChannelInstanceType(soap, (struct chan__ChannelInstanceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__FaultTo:
		soap_serialize_PointerTo_wsa5__FaultTo(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__ReplyTo:
		soap_serialize_PointerTo_wsa5__ReplyTo(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__From:
		soap_serialize_PointerTo_wsa5__From(soap, (struct wsa5__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa5__RelatesTo:
		soap_serialize_PointerTo_wsa5__RelatesTo(soap, (struct wsa5__RelatesToType *const*)ptr);
		break;
	case SOAP_TYPE__wsa5__ProblemIRI:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__ProblemHeaderQName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__Action:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__To:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__wsa5__MessageID:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa5__MetadataType:
		soap_serialize_PointerTowsa5__MetadataType(soap, (struct wsa5__MetadataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa5__ReferenceParametersType:
		soap_serialize_PointerTowsa5__ReferenceParametersType(soap, (struct wsa5__ReferenceParametersType *const*)ptr);
		break;
	case SOAP_TYPE_wsa5__FaultCodesOpenEnumType:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_wsa5__RelationshipTypeOpenEnum:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTowsd__ProbeMatchesType:
		soap_serialize_PointerTowsd__ProbeMatchesType(soap, (struct wsd__ProbeMatchesType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsd__ProbeType:
		soap_serialize_PointerTowsd__ProbeType(soap, (struct wsd__ProbeType *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE___wsd__Probe:
		return (void*)soap_instantiate___wsd__Probe(soap, -1, type, arrayType, n);
	case SOAP_TYPE___wsd__ProbeMatches:
		return (void*)soap_instantiate___wsd__ProbeMatches(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		return (void*)soap_instantiate_wsa5__EndpointReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		return (void*)soap_instantiate_wsa5__ReferenceParametersType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__MetadataType:
		return (void*)soap_instantiate_wsa5__MetadataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__ProblemActionType:
		return (void*)soap_instantiate_wsa5__ProblemActionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa5__RelatesToType:
		return (void*)soap_instantiate_wsa5__RelatesToType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_chan__ChannelInstanceType:
		return (void*)soap_instantiate_chan__ChannelInstanceType(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_timeval:
		return (void*)soap_instantiate_timeval(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__hexBinary:
		return (void*)soap_instantiate_xsd__hexBinary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID__:
		return (void*)soap_instantiate_xsd__ID__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREFS__:
		return (void*)soap_instantiate_xsd__IDREFS__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__NCName__:
		return (void*)soap_instantiate_xsd__NCName__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName__:
		return (void*)soap_instantiate_xsd__QName__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anySimpleType__:
		return (void*)soap_instantiate_xsd__anySimpleType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI__:
		return (void*)soap_instantiate_xsd__anyURI__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary__:
		return (void*)soap_instantiate_xsd__base64Binary__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean_:
		return (void*)soap_instantiate_xsd__boolean_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime__:
		return (void*)soap_instantiate_xsd__dateTime__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__double_:
		return (void*)soap_instantiate_xsd__double_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration__:
		return (void*)soap_instantiate_xsd__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__float_:
		return (void*)soap_instantiate_xsd__float_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__hexBinary__:
		return (void*)soap_instantiate_xsd__hexBinary__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int_:
		return (void*)soap_instantiate_xsd__int_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__integer__:
		return (void*)soap_instantiate_xsd__integer__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__nonNegativeInteger__:
		return (void*)soap_instantiate_xsd__nonNegativeInteger__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string_:
		return (void*)soap_instantiate_xsd__string_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__token__:
		return (void*)soap_instantiate_xsd__token__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt_:
		return (void*)soap_instantiate_xsd__unsignedInt_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__TopicExpressionTypeCustom:
		return (void*)soap_instantiate_wsnt__TopicExpressionTypeCustom(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__AutoGeoModes__:
		return (void*)soap_instantiate_tds__AutoGeoModes__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__StorageType__:
		return (void*)soap_instantiate_tds__StorageType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Name__:
		return (void*)soap_instantiate_tt__Name__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RotateMode__:
		return (void*)soap_instantiate_tt__RotateMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SceneOrientationMode__:
		return (void*)soap_instantiate_tt__SceneOrientationMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SceneOrientationOption__:
		return (void*)soap_instantiate_tt__SceneOrientationOption__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ViewModes__:
		return (void*)soap_instantiate_tt__ViewModes__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncoding__:
		return (void*)soap_instantiate_tt__VideoEncoding__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Mpeg4Profile__:
		return (void*)soap_instantiate_tt__Mpeg4Profile__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__H264Profile__:
		return (void*)soap_instantiate_tt__H264Profile__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncodingMimeNames__:
		return (void*)soap_instantiate_tt__VideoEncodingMimeNames__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncodingProfiles__:
		return (void*)soap_instantiate_tt__VideoEncodingProfiles__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioEncoding__:
		return (void*)soap_instantiate_tt__AudioEncoding__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioEncodingMimeNames__:
		return (void*)soap_instantiate_tt__AudioEncodingMimeNames__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataCompressionType__:
		return (void*)soap_instantiate_tt__MetadataCompressionType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__StreamType__:
		return (void*)soap_instantiate_tt__StreamType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TransportProtocol__:
		return (void*)soap_instantiate_tt__TransportProtocol__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ScopeDefinition__:
		return (void*)soap_instantiate_tt__ScopeDefinition__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DiscoveryMode__:
		return (void*)soap_instantiate_tt__DiscoveryMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority__:
		return (void*)soap_instantiate_tt__NetworkInterfaceConfigPriority__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Duplex__:
		return (void*)soap_instantiate_tt__Duplex__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IANA_IfTypes__:
		return (void*)soap_instantiate_tt__IANA_IfTypes__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv6DHCPConfiguration__:
		return (void*)soap_instantiate_tt__IPv6DHCPConfiguration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkProtocolType__:
		return (void*)soap_instantiate_tt__NetworkProtocolType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkHostType__:
		return (void*)soap_instantiate_tt__NetworkHostType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv4Address__:
		return (void*)soap_instantiate_tt__IPv4Address__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv6Address__:
		return (void*)soap_instantiate_tt__IPv6Address__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__HwAddress__:
		return (void*)soap_instantiate_tt__HwAddress__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPType__:
		return (void*)soap_instantiate_tt__IPType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DNSName__:
		return (void*)soap_instantiate_tt__DNSName__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Domain__:
		return (void*)soap_instantiate_tt__Domain__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPAddressFilterType__:
		return (void*)soap_instantiate_tt__IPAddressFilterType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DynamicDNSType__:
		return (void*)soap_instantiate_tt__DynamicDNSType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11SSIDType__:
		return (void*)soap_instantiate_tt__Dot11SSIDType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11StationMode__:
		return (void*)soap_instantiate_tt__Dot11StationMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11SecurityMode__:
		return (void*)soap_instantiate_tt__Dot11SecurityMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11Cipher__:
		return (void*)soap_instantiate_tt__Dot11Cipher__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11PSK__:
		return (void*)soap_instantiate_tt__Dot11PSK__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11PSKPassphrase__:
		return (void*)soap_instantiate_tt__Dot11PSKPassphrase__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11SignalStrength__:
		return (void*)soap_instantiate_tt__Dot11SignalStrength__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite__:
		return (void*)soap_instantiate_tt__Dot11AuthAndMangementSuite__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CapabilityCategory__:
		return (void*)soap_instantiate_tt__CapabilityCategory__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemLogType__:
		return (void*)soap_instantiate_tt__SystemLogType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FactoryDefaultType__:
		return (void*)soap_instantiate_tt__FactoryDefaultType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SetDateTimeType__:
		return (void*)soap_instantiate_tt__SetDateTimeType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__UserLevel__:
		return (void*)soap_instantiate_tt__UserLevel__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelayLogicalState__:
		return (void*)soap_instantiate_tt__RelayLogicalState__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelayIdleState__:
		return (void*)soap_instantiate_tt__RelayIdleState__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelayMode__:
		return (void*)soap_instantiate_tt__RelayMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DigitalIdleState__:
		return (void*)soap_instantiate_tt__DigitalIdleState__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EFlipMode__:
		return (void*)soap_instantiate_tt__EFlipMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReverseMode__:
		return (void*)soap_instantiate_tt__ReverseMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AuxiliaryData__:
		return (void*)soap_instantiate_tt__AuxiliaryData__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourState__:
		return (void*)soap_instantiate_tt__PTZPresetTourState__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourDirection__:
		return (void*)soap_instantiate_tt__PTZPresetTourDirection__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourOperation__:
		return (void*)soap_instantiate_tt__PTZPresetTourOperation__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AutoFocusMode__:
		return (void*)soap_instantiate_tt__AutoFocusMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WideDynamicMode__:
		return (void*)soap_instantiate_tt__WideDynamicMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__BacklightCompensationMode__:
		return (void*)soap_instantiate_tt__BacklightCompensationMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ExposurePriority__:
		return (void*)soap_instantiate_tt__ExposurePriority__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ExposureMode__:
		return (void*)soap_instantiate_tt__ExposureMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Enabled__:
		return (void*)soap_instantiate_tt__Enabled__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WhiteBalanceMode__:
		return (void*)soap_instantiate_tt__WhiteBalanceMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IrCutFilterMode__:
		return (void*)soap_instantiate_tt__IrCutFilterMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImageStabilizationMode__:
		return (void*)soap_instantiate_tt__ImageStabilizationMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__:
		return (void*)soap_instantiate_tt__IrCutFilterAutoBoundaryType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ToneCompensationMode__:
		return (void*)soap_instantiate_tt__ToneCompensationMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DefoggingMode__:
		return (void*)soap_instantiate_tt__DefoggingMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TopicNamespaceLocation__:
		return (void*)soap_instantiate_tt__TopicNamespaceLocation__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PropertyOperation__:
		return (void*)soap_instantiate_tt__PropertyOperation__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Direction__:
		return (void*)soap_instantiate_tt__Direction__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReceiverMode__:
		return (void*)soap_instantiate_tt__ReceiverMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReceiverState__:
		return (void*)soap_instantiate_tt__ReceiverState__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Description__:
		return (void*)soap_instantiate_tt__Description__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__XPathExpression__:
		return (void*)soap_instantiate_tt__XPathExpression__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SearchState__:
		return (void*)soap_instantiate_tt__SearchState__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingStatus__:
		return (void*)soap_instantiate_tt__RecordingStatus__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TrackType__:
		return (void*)soap_instantiate_tt__TrackType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobMode__:
		return (void*)soap_instantiate_tt__RecordingJobMode__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobState__:
		return (void*)soap_instantiate_tt__RecordingJobState__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ModeOfOperation__:
		return (void*)soap_instantiate_tt__ModeOfOperation__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioClassType__:
		return (void*)soap_instantiate_tt__AudioClassType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDType__:
		return (void*)soap_instantiate_tt__OSDType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReferenceToken__:
		return (void*)soap_instantiate_tt__ReferenceToken__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MoveStatus__:
		return (void*)soap_instantiate_tt__MoveStatus__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Entity__:
		return (void*)soap_instantiate_tt__Entity__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__FullTopicExpression__:
		return (void*)soap_instantiate_wstop__FullTopicExpression__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		return (void*)soap_instantiate_wstop__ConcreteTopicExpression__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		return (void*)soap_instantiate_wstop__SimpleTopicExpression__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__RelationshipType__:
		return (void*)soap_instantiate_wsd__RelationshipType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__FaultCodeType__:
		return (void*)soap_instantiate_wsd__FaultCodeType__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__RelationshipTypeValues__:
		return (void*)soap_instantiate_wsa__RelationshipTypeValues__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__FaultSubcodeValues__:
		return (void*)soap_instantiate_wsa__FaultSubcodeValues__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReceiverReference__:
		return (void*)soap_instantiate_tt__ReceiverReference__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingReference__:
		return (void*)soap_instantiate_tt__RecordingReference__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TrackReference__:
		return (void*)soap_instantiate_tt__TrackReference__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__JobToken__:
		return (void*)soap_instantiate_tt__JobToken__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobReference__:
		return (void*)soap_instantiate_tt__RecordingJobReference__(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__Service_Capabilities:
		return (void*)soap_instantiate__tds__Service_Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__Service:
		return (void*)soap_instantiate_tds__Service(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__DeviceServiceCapabilities:
		return (void*)soap_instantiate_tds__DeviceServiceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__NetworkCapabilities:
		return (void*)soap_instantiate_tds__NetworkCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__SecurityCapabilities:
		return (void*)soap_instantiate_tds__SecurityCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__SystemCapabilities:
		return (void*)soap_instantiate_tds__SystemCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__MiscCapabilities:
		return (void*)soap_instantiate_tds__MiscCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__UserCredential_Extension:
		return (void*)soap_instantiate__tds__UserCredential_Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__UserCredential:
		return (void*)soap_instantiate_tds__UserCredential(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__StorageConfigurationData_Extension:
		return (void*)soap_instantiate__tds__StorageConfigurationData_Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__StorageConfigurationData:
		return (void*)soap_instantiate_tds__StorageConfigurationData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetServices:
		return (void*)soap_instantiate__tds__GetServices(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetServicesResponse:
		return (void*)soap_instantiate__tds__GetServicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetServiceCapabilities:
		return (void*)soap_instantiate__tds__GetServiceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetServiceCapabilitiesResponse:
		return (void*)soap_instantiate__tds__GetServiceCapabilitiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDeviceInformation:
		return (void*)soap_instantiate__tds__GetDeviceInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDeviceInformationResponse:
		return (void*)soap_instantiate__tds__GetDeviceInformationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetSystemDateAndTime:
		return (void*)soap_instantiate__tds__SetSystemDateAndTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetSystemDateAndTimeResponse:
		return (void*)soap_instantiate__tds__SetSystemDateAndTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemDateAndTime:
		return (void*)soap_instantiate__tds__GetSystemDateAndTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemDateAndTimeResponse:
		return (void*)soap_instantiate__tds__GetSystemDateAndTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetSystemFactoryDefault:
		return (void*)soap_instantiate__tds__SetSystemFactoryDefault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetSystemFactoryDefaultResponse:
		return (void*)soap_instantiate__tds__SetSystemFactoryDefaultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__UpgradeSystemFirmware:
		return (void*)soap_instantiate__tds__UpgradeSystemFirmware(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__UpgradeSystemFirmwareResponse:
		return (void*)soap_instantiate__tds__UpgradeSystemFirmwareResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SystemReboot:
		return (void*)soap_instantiate__tds__SystemReboot(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SystemRebootResponse:
		return (void*)soap_instantiate__tds__SystemRebootResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__RestoreSystem:
		return (void*)soap_instantiate__tds__RestoreSystem(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__RestoreSystemResponse:
		return (void*)soap_instantiate__tds__RestoreSystemResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemBackup:
		return (void*)soap_instantiate__tds__GetSystemBackup(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemBackupResponse:
		return (void*)soap_instantiate__tds__GetSystemBackupResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemSupportInformation:
		return (void*)soap_instantiate__tds__GetSystemSupportInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemSupportInformationResponse:
		return (void*)soap_instantiate__tds__GetSystemSupportInformationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemLog:
		return (void*)soap_instantiate__tds__GetSystemLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemLogResponse:
		return (void*)soap_instantiate__tds__GetSystemLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetScopes:
		return (void*)soap_instantiate__tds__GetScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetScopesResponse:
		return (void*)soap_instantiate__tds__GetScopesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetScopes:
		return (void*)soap_instantiate__tds__SetScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetScopesResponse:
		return (void*)soap_instantiate__tds__SetScopesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__AddScopes:
		return (void*)soap_instantiate__tds__AddScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__AddScopesResponse:
		return (void*)soap_instantiate__tds__AddScopesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__RemoveScopes:
		return (void*)soap_instantiate__tds__RemoveScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__RemoveScopesResponse:
		return (void*)soap_instantiate__tds__RemoveScopesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDiscoveryMode:
		return (void*)soap_instantiate__tds__GetDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDiscoveryModeResponse:
		return (void*)soap_instantiate__tds__GetDiscoveryModeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDiscoveryMode:
		return (void*)soap_instantiate__tds__SetDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDiscoveryModeResponse:
		return (void*)soap_instantiate__tds__SetDiscoveryModeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetRemoteDiscoveryMode:
		return (void*)soap_instantiate__tds__GetRemoteDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse:
		return (void*)soap_instantiate__tds__GetRemoteDiscoveryModeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRemoteDiscoveryMode:
		return (void*)soap_instantiate__tds__SetRemoteDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse:
		return (void*)soap_instantiate__tds__SetRemoteDiscoveryModeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDPAddresses:
		return (void*)soap_instantiate__tds__GetDPAddresses(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDPAddressesResponse:
		return (void*)soap_instantiate__tds__GetDPAddressesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDPAddresses:
		return (void*)soap_instantiate__tds__SetDPAddresses(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDPAddressesResponse:
		return (void*)soap_instantiate__tds__SetDPAddressesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetEndpointReference:
		return (void*)soap_instantiate__tds__GetEndpointReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetEndpointReferenceResponse:
		return (void*)soap_instantiate__tds__GetEndpointReferenceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetRemoteUser:
		return (void*)soap_instantiate__tds__GetRemoteUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetRemoteUserResponse:
		return (void*)soap_instantiate__tds__GetRemoteUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRemoteUser:
		return (void*)soap_instantiate__tds__SetRemoteUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRemoteUserResponse:
		return (void*)soap_instantiate__tds__SetRemoteUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetUsers:
		return (void*)soap_instantiate__tds__GetUsers(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetUsersResponse:
		return (void*)soap_instantiate__tds__GetUsersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateUsers:
		return (void*)soap_instantiate__tds__CreateUsers(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateUsersResponse:
		return (void*)soap_instantiate__tds__CreateUsersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteUsers:
		return (void*)soap_instantiate__tds__DeleteUsers(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteUsersResponse:
		return (void*)soap_instantiate__tds__DeleteUsersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetUser:
		return (void*)soap_instantiate__tds__SetUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetUserResponse:
		return (void*)soap_instantiate__tds__SetUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetWsdlUrl:
		return (void*)soap_instantiate__tds__GetWsdlUrl(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetWsdlUrlResponse:
		return (void*)soap_instantiate__tds__GetWsdlUrlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCapabilities:
		return (void*)soap_instantiate__tds__GetCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCapabilitiesResponse:
		return (void*)soap_instantiate__tds__GetCapabilitiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetHostname:
		return (void*)soap_instantiate__tds__GetHostname(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetHostnameResponse:
		return (void*)soap_instantiate__tds__GetHostnameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetHostname:
		return (void*)soap_instantiate__tds__SetHostname(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetHostnameResponse:
		return (void*)soap_instantiate__tds__SetHostnameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetHostnameFromDHCP:
		return (void*)soap_instantiate__tds__SetHostnameFromDHCP(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetHostnameFromDHCPResponse:
		return (void*)soap_instantiate__tds__SetHostnameFromDHCPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDNS:
		return (void*)soap_instantiate__tds__GetDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDNSResponse:
		return (void*)soap_instantiate__tds__GetDNSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDNS:
		return (void*)soap_instantiate__tds__SetDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDNSResponse:
		return (void*)soap_instantiate__tds__SetDNSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNTP:
		return (void*)soap_instantiate__tds__GetNTP(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNTPResponse:
		return (void*)soap_instantiate__tds__GetNTPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNTP:
		return (void*)soap_instantiate__tds__SetNTP(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNTPResponse:
		return (void*)soap_instantiate__tds__SetNTPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDynamicDNS:
		return (void*)soap_instantiate__tds__GetDynamicDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDynamicDNSResponse:
		return (void*)soap_instantiate__tds__GetDynamicDNSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDynamicDNS:
		return (void*)soap_instantiate__tds__SetDynamicDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDynamicDNSResponse:
		return (void*)soap_instantiate__tds__SetDynamicDNSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNetworkInterfaces:
		return (void*)soap_instantiate__tds__GetNetworkInterfaces(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNetworkInterfacesResponse:
		return (void*)soap_instantiate__tds__GetNetworkInterfacesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNetworkInterfaces:
		return (void*)soap_instantiate__tds__SetNetworkInterfaces(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNetworkInterfacesResponse:
		return (void*)soap_instantiate__tds__SetNetworkInterfacesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNetworkProtocols:
		return (void*)soap_instantiate__tds__GetNetworkProtocols(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNetworkProtocolsResponse:
		return (void*)soap_instantiate__tds__GetNetworkProtocolsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNetworkProtocols:
		return (void*)soap_instantiate__tds__SetNetworkProtocols(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNetworkProtocolsResponse:
		return (void*)soap_instantiate__tds__SetNetworkProtocolsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNetworkDefaultGateway:
		return (void*)soap_instantiate__tds__GetNetworkDefaultGateway(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse:
		return (void*)soap_instantiate__tds__GetNetworkDefaultGatewayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNetworkDefaultGateway:
		return (void*)soap_instantiate__tds__SetNetworkDefaultGateway(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse:
		return (void*)soap_instantiate__tds__SetNetworkDefaultGatewayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetZeroConfiguration:
		return (void*)soap_instantiate__tds__GetZeroConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetZeroConfigurationResponse:
		return (void*)soap_instantiate__tds__GetZeroConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetZeroConfiguration:
		return (void*)soap_instantiate__tds__SetZeroConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetZeroConfigurationResponse:
		return (void*)soap_instantiate__tds__SetZeroConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetIPAddressFilter:
		return (void*)soap_instantiate__tds__GetIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetIPAddressFilterResponse:
		return (void*)soap_instantiate__tds__GetIPAddressFilterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetIPAddressFilter:
		return (void*)soap_instantiate__tds__SetIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetIPAddressFilterResponse:
		return (void*)soap_instantiate__tds__SetIPAddressFilterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__AddIPAddressFilter:
		return (void*)soap_instantiate__tds__AddIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__AddIPAddressFilterResponse:
		return (void*)soap_instantiate__tds__AddIPAddressFilterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__RemoveIPAddressFilter:
		return (void*)soap_instantiate__tds__RemoveIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__RemoveIPAddressFilterResponse:
		return (void*)soap_instantiate__tds__RemoveIPAddressFilterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetAccessPolicy:
		return (void*)soap_instantiate__tds__GetAccessPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetAccessPolicyResponse:
		return (void*)soap_instantiate__tds__GetAccessPolicyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetAccessPolicy:
		return (void*)soap_instantiate__tds__SetAccessPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetAccessPolicyResponse:
		return (void*)soap_instantiate__tds__SetAccessPolicyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateCertificate:
		return (void*)soap_instantiate__tds__CreateCertificate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateCertificateResponse:
		return (void*)soap_instantiate__tds__CreateCertificateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCertificates:
		return (void*)soap_instantiate__tds__GetCertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCertificatesResponse:
		return (void*)soap_instantiate__tds__GetCertificatesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCertificatesStatus:
		return (void*)soap_instantiate__tds__GetCertificatesStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCertificatesStatusResponse:
		return (void*)soap_instantiate__tds__GetCertificatesStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetCertificatesStatus:
		return (void*)soap_instantiate__tds__SetCertificatesStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetCertificatesStatusResponse:
		return (void*)soap_instantiate__tds__SetCertificatesStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteCertificates:
		return (void*)soap_instantiate__tds__DeleteCertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteCertificatesResponse:
		return (void*)soap_instantiate__tds__DeleteCertificatesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetPkcs10Request:
		return (void*)soap_instantiate__tds__GetPkcs10Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetPkcs10RequestResponse:
		return (void*)soap_instantiate__tds__GetPkcs10RequestResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__LoadCertificates:
		return (void*)soap_instantiate__tds__LoadCertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__LoadCertificatesResponse:
		return (void*)soap_instantiate__tds__LoadCertificatesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetClientCertificateMode:
		return (void*)soap_instantiate__tds__GetClientCertificateMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetClientCertificateModeResponse:
		return (void*)soap_instantiate__tds__GetClientCertificateModeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetClientCertificateMode:
		return (void*)soap_instantiate__tds__SetClientCertificateMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetClientCertificateModeResponse:
		return (void*)soap_instantiate__tds__SetClientCertificateModeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCACertificates:
		return (void*)soap_instantiate__tds__GetCACertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCACertificatesResponse:
		return (void*)soap_instantiate__tds__GetCACertificatesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKey:
		return (void*)soap_instantiate__tds__LoadCertificateWithPrivateKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse:
		return (void*)soap_instantiate__tds__LoadCertificateWithPrivateKeyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCertificateInformation:
		return (void*)soap_instantiate__tds__GetCertificateInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetCertificateInformationResponse:
		return (void*)soap_instantiate__tds__GetCertificateInformationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__LoadCACertificates:
		return (void*)soap_instantiate__tds__LoadCACertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__LoadCACertificatesResponse:
		return (void*)soap_instantiate__tds__LoadCACertificatesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateDot1XConfiguration:
		return (void*)soap_instantiate__tds__CreateDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateDot1XConfigurationResponse:
		return (void*)soap_instantiate__tds__CreateDot1XConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDot1XConfiguration:
		return (void*)soap_instantiate__tds__SetDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetDot1XConfigurationResponse:
		return (void*)soap_instantiate__tds__SetDot1XConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot1XConfiguration:
		return (void*)soap_instantiate__tds__GetDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot1XConfigurationResponse:
		return (void*)soap_instantiate__tds__GetDot1XConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot1XConfigurations:
		return (void*)soap_instantiate__tds__GetDot1XConfigurations(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot1XConfigurationsResponse:
		return (void*)soap_instantiate__tds__GetDot1XConfigurationsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteDot1XConfiguration:
		return (void*)soap_instantiate__tds__DeleteDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteDot1XConfigurationResponse:
		return (void*)soap_instantiate__tds__DeleteDot1XConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetRelayOutputs:
		return (void*)soap_instantiate__tds__GetRelayOutputs(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetRelayOutputsResponse:
		return (void*)soap_instantiate__tds__GetRelayOutputsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRelayOutputSettings:
		return (void*)soap_instantiate__tds__SetRelayOutputSettings(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRelayOutputSettingsResponse:
		return (void*)soap_instantiate__tds__SetRelayOutputSettingsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRelayOutputState:
		return (void*)soap_instantiate__tds__SetRelayOutputState(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetRelayOutputStateResponse:
		return (void*)soap_instantiate__tds__SetRelayOutputStateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SendAuxiliaryCommand:
		return (void*)soap_instantiate__tds__SendAuxiliaryCommand(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SendAuxiliaryCommandResponse:
		return (void*)soap_instantiate__tds__SendAuxiliaryCommandResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot11Capabilities:
		return (void*)soap_instantiate__tds__GetDot11Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot11CapabilitiesResponse:
		return (void*)soap_instantiate__tds__GetDot11CapabilitiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot11Status:
		return (void*)soap_instantiate__tds__GetDot11Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetDot11StatusResponse:
		return (void*)soap_instantiate__tds__GetDot11StatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__ScanAvailableDot11Networks:
		return (void*)soap_instantiate__tds__ScanAvailableDot11Networks(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse:
		return (void*)soap_instantiate__tds__ScanAvailableDot11NetworksResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemUris:
		return (void*)soap_instantiate__tds__GetSystemUris(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemUrisResponse_Extension:
		return (void*)soap_instantiate__tds__GetSystemUrisResponse_Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetSystemUrisResponse:
		return (void*)soap_instantiate__tds__GetSystemUrisResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__StartFirmwareUpgrade:
		return (void*)soap_instantiate__tds__StartFirmwareUpgrade(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__StartFirmwareUpgradeResponse:
		return (void*)soap_instantiate__tds__StartFirmwareUpgradeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__StartSystemRestore:
		return (void*)soap_instantiate__tds__StartSystemRestore(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__StartSystemRestoreResponse:
		return (void*)soap_instantiate__tds__StartSystemRestoreResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetStorageConfigurations:
		return (void*)soap_instantiate__tds__GetStorageConfigurations(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetStorageConfigurationsResponse:
		return (void*)soap_instantiate__tds__GetStorageConfigurationsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateStorageConfiguration:
		return (void*)soap_instantiate__tds__CreateStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__CreateStorageConfigurationResponse:
		return (void*)soap_instantiate__tds__CreateStorageConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetStorageConfiguration:
		return (void*)soap_instantiate__tds__GetStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetStorageConfigurationResponse:
		return (void*)soap_instantiate__tds__GetStorageConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetStorageConfiguration:
		return (void*)soap_instantiate__tds__SetStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetStorageConfigurationResponse:
		return (void*)soap_instantiate__tds__SetStorageConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteStorageConfiguration:
		return (void*)soap_instantiate__tds__DeleteStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteStorageConfigurationResponse:
		return (void*)soap_instantiate__tds__DeleteStorageConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetGeoLocation:
		return (void*)soap_instantiate__tds__GetGeoLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__GetGeoLocationResponse:
		return (void*)soap_instantiate__tds__GetGeoLocationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetGeoLocation:
		return (void*)soap_instantiate__tds__SetGeoLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__SetGeoLocationResponse:
		return (void*)soap_instantiate__tds__SetGeoLocationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteGeoLocation:
		return (void*)soap_instantiate__tds__DeleteGeoLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__DeleteGeoLocationResponse:
		return (void*)soap_instantiate__tds__DeleteGeoLocationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DeviceEntity:
		return (void*)soap_instantiate_tt__DeviceEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IntRectangle:
		return (void*)soap_instantiate_tt__IntRectangle(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IntRectangleRange:
		return (void*)soap_instantiate_tt__IntRectangleRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IntRange:
		return (void*)soap_instantiate_tt__IntRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FloatRange:
		return (void*)soap_instantiate_tt__FloatRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DurationRange:
		return (void*)soap_instantiate_tt__DurationRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IntList:
		return (void*)soap_instantiate_tt__IntList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FloatList:
		return (void*)soap_instantiate_tt__FloatList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnyHolder:
		return (void*)soap_instantiate_tt__AnyHolder(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceExtension:
		return (void*)soap_instantiate_tt__VideoSourceExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceExtension2:
		return (void*)soap_instantiate_tt__VideoSourceExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Profile:
		return (void*)soap_instantiate_tt__Profile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ProfileExtension:
		return (void*)soap_instantiate_tt__ProfileExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ProfileExtension2:
		return (void*)soap_instantiate_tt__ProfileExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ConfigurationEntity:
		return (void*)soap_instantiate_tt__ConfigurationEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension:
		return (void*)soap_instantiate_tt__VideoSourceConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension2:
		return (void*)soap_instantiate_tt__VideoSourceConfigurationExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Rotate:
		return (void*)soap_instantiate_tt__Rotate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RotateExtension:
		return (void*)soap_instantiate_tt__RotateExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LensProjection:
		return (void*)soap_instantiate_tt__LensProjection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LensOffset:
		return (void*)soap_instantiate_tt__LensOffset(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LensDescription:
		return (void*)soap_instantiate_tt__LensDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceConfigurationOptions:
		return (void*)soap_instantiate_tt__VideoSourceConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension:
		return (void*)soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2:
		return (void*)soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RotateOptions:
		return (void*)soap_instantiate_tt__RotateOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RotateOptionsExtension:
		return (void*)soap_instantiate_tt__RotateOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SceneOrientation:
		return (void*)soap_instantiate_tt__SceneOrientation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoResolution:
		return (void*)soap_instantiate_tt__VideoResolution(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoRateControl:
		return (void*)soap_instantiate_tt__VideoRateControl(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Mpeg4Configuration:
		return (void*)soap_instantiate_tt__Mpeg4Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__H264Configuration:
		return (void*)soap_instantiate_tt__H264Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncoderConfigurationOptions:
		return (void*)soap_instantiate_tt__VideoEncoderConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension:
		return (void*)soap_instantiate_tt__VideoEncoderOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension2:
		return (void*)soap_instantiate_tt__VideoEncoderOptionsExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__JpegOptions:
		return (void*)soap_instantiate_tt__JpegOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Mpeg4Options:
		return (void*)soap_instantiate_tt__Mpeg4Options(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__H264Options:
		return (void*)soap_instantiate_tt__H264Options(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoResolution2:
		return (void*)soap_instantiate_tt__VideoResolution2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoRateControl2:
		return (void*)soap_instantiate_tt__VideoRateControl2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions:
		return (void*)soap_instantiate_tt__VideoEncoder2ConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioSourceConfigurationOptions:
		return (void*)soap_instantiate_tt__AudioSourceConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioSourceOptionsExtension:
		return (void*)soap_instantiate_tt__AudioSourceOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioEncoderConfigurationOptions:
		return (void*)soap_instantiate_tt__AudioEncoderConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioEncoderConfigurationOption:
		return (void*)soap_instantiate_tt__AudioEncoderConfigurationOption(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions:
		return (void*)soap_instantiate_tt__AudioEncoder2ConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataConfigurationExtension:
		return (void*)soap_instantiate_tt__MetadataConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZFilter:
		return (void*)soap_instantiate_tt__PTZFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy:
		return (void*)soap_instantiate__tt__EventSubscription_SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EventSubscription:
		return (void*)soap_instantiate_tt__EventSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataConfigurationOptions:
		return (void*)soap_instantiate_tt__MetadataConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension:
		return (void*)soap_instantiate_tt__MetadataConfigurationOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2:
		return (void*)soap_instantiate_tt__MetadataConfigurationOptionsExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZStatusFilterOptions:
		return (void*)soap_instantiate_tt__PTZStatusFilterOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZStatusFilterOptionsExtension:
		return (void*)soap_instantiate_tt__PTZStatusFilterOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoOutputExtension:
		return (void*)soap_instantiate_tt__VideoOutputExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoOutputConfigurationOptions:
		return (void*)soap_instantiate_tt__VideoOutputConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptions:
		return (void*)soap_instantiate_tt__VideoDecoderConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__H264DecOptions:
		return (void*)soap_instantiate_tt__H264DecOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__JpegDecOptions:
		return (void*)soap_instantiate_tt__JpegDecOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Mpeg4DecOptions:
		return (void*)soap_instantiate_tt__Mpeg4DecOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension:
		return (void*)soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioOutputConfigurationOptions:
		return (void*)soap_instantiate_tt__AudioOutputConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptions:
		return (void*)soap_instantiate_tt__AudioDecoderConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__G711DecOptions:
		return (void*)soap_instantiate_tt__G711DecOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AACDecOptions:
		return (void*)soap_instantiate_tt__AACDecOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__G726DecOptions:
		return (void*)soap_instantiate_tt__G726DecOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension:
		return (void*)soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MulticastConfiguration:
		return (void*)soap_instantiate_tt__MulticastConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__StreamSetup:
		return (void*)soap_instantiate_tt__StreamSetup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Transport:
		return (void*)soap_instantiate_tt__Transport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MediaUri:
		return (void*)soap_instantiate_tt__MediaUri(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Scope:
		return (void*)soap_instantiate_tt__Scope(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceExtension:
		return (void*)soap_instantiate_tt__NetworkInterfaceExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot3Configuration:
		return (void*)soap_instantiate_tt__Dot3Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceExtension2:
		return (void*)soap_instantiate_tt__NetworkInterfaceExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceLink:
		return (void*)soap_instantiate_tt__NetworkInterfaceLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceConnectionSetting:
		return (void*)soap_instantiate_tt__NetworkInterfaceConnectionSetting(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceInfo:
		return (void*)soap_instantiate_tt__NetworkInterfaceInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv6NetworkInterface:
		return (void*)soap_instantiate_tt__IPv6NetworkInterface(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv4NetworkInterface:
		return (void*)soap_instantiate_tt__IPv4NetworkInterface(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv4Configuration:
		return (void*)soap_instantiate_tt__IPv4Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv6Configuration:
		return (void*)soap_instantiate_tt__IPv6Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv6ConfigurationExtension:
		return (void*)soap_instantiate_tt__IPv6ConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkProtocol:
		return (void*)soap_instantiate_tt__NetworkProtocol(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkProtocolExtension:
		return (void*)soap_instantiate_tt__NetworkProtocolExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkHost:
		return (void*)soap_instantiate_tt__NetworkHost(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkHostExtension:
		return (void*)soap_instantiate_tt__NetworkHostExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPAddress:
		return (void*)soap_instantiate_tt__IPAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PrefixedIPv4Address:
		return (void*)soap_instantiate_tt__PrefixedIPv4Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PrefixedIPv6Address:
		return (void*)soap_instantiate_tt__PrefixedIPv6Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__HostnameInformation:
		return (void*)soap_instantiate_tt__HostnameInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__HostnameInformationExtension:
		return (void*)soap_instantiate_tt__HostnameInformationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DNSInformation:
		return (void*)soap_instantiate_tt__DNSInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DNSInformationExtension:
		return (void*)soap_instantiate_tt__DNSInformationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NTPInformation:
		return (void*)soap_instantiate_tt__NTPInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NTPInformationExtension:
		return (void*)soap_instantiate_tt__NTPInformationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DynamicDNSInformation:
		return (void*)soap_instantiate_tt__DynamicDNSInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DynamicDNSInformationExtension:
		return (void*)soap_instantiate_tt__DynamicDNSInformationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceSetConfiguration:
		return (void*)soap_instantiate_tt__NetworkInterfaceSetConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension:
		return (void*)soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration:
		return (void*)soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration:
		return (void*)soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkGateway:
		return (void*)soap_instantiate_tt__NetworkGateway(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkZeroConfiguration:
		return (void*)soap_instantiate_tt__NetworkZeroConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension:
		return (void*)soap_instantiate_tt__NetworkZeroConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension2:
		return (void*)soap_instantiate_tt__NetworkZeroConfigurationExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPAddressFilter:
		return (void*)soap_instantiate_tt__IPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPAddressFilterExtension:
		return (void*)soap_instantiate_tt__IPAddressFilterExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11Configuration:
		return (void*)soap_instantiate_tt__Dot11Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11SecurityConfiguration:
		return (void*)soap_instantiate_tt__Dot11SecurityConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11SecurityConfigurationExtension:
		return (void*)soap_instantiate_tt__Dot11SecurityConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11PSKSet:
		return (void*)soap_instantiate_tt__Dot11PSKSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11PSKSetExtension:
		return (void*)soap_instantiate_tt__Dot11PSKSetExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2:
		return (void*)soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11Capabilities:
		return (void*)soap_instantiate_tt__Dot11Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11Status:
		return (void*)soap_instantiate_tt__Dot11Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11AvailableNetworks:
		return (void*)soap_instantiate_tt__Dot11AvailableNetworks(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11AvailableNetworksExtension:
		return (void*)soap_instantiate_tt__Dot11AvailableNetworksExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Capabilities:
		return (void*)soap_instantiate_tt__Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CapabilitiesExtension:
		return (void*)soap_instantiate_tt__CapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CapabilitiesExtension2:
		return (void*)soap_instantiate_tt__CapabilitiesExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsCapabilities:
		return (void*)soap_instantiate_tt__AnalyticsCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DeviceCapabilities:
		return (void*)soap_instantiate_tt__DeviceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DeviceCapabilitiesExtension:
		return (void*)soap_instantiate_tt__DeviceCapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EventCapabilities:
		return (void*)soap_instantiate_tt__EventCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IOCapabilities:
		return (void*)soap_instantiate_tt__IOCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IOCapabilitiesExtension:
		return (void*)soap_instantiate_tt__IOCapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IOCapabilitiesExtension2:
		return (void*)soap_instantiate_tt__IOCapabilitiesExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MediaCapabilities:
		return (void*)soap_instantiate_tt__MediaCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MediaCapabilitiesExtension:
		return (void*)soap_instantiate_tt__MediaCapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RealTimeStreamingCapabilities:
		return (void*)soap_instantiate_tt__RealTimeStreamingCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension:
		return (void*)soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ProfileCapabilities:
		return (void*)soap_instantiate_tt__ProfileCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkCapabilities:
		return (void*)soap_instantiate_tt__NetworkCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension:
		return (void*)soap_instantiate_tt__NetworkCapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension2:
		return (void*)soap_instantiate_tt__NetworkCapabilitiesExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SecurityCapabilities:
		return (void*)soap_instantiate_tt__SecurityCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension:
		return (void*)soap_instantiate_tt__SecurityCapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension2:
		return (void*)soap_instantiate_tt__SecurityCapabilitiesExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemCapabilities:
		return (void*)soap_instantiate_tt__SystemCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemCapabilitiesExtension:
		return (void*)soap_instantiate_tt__SystemCapabilitiesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemCapabilitiesExtension2:
		return (void*)soap_instantiate_tt__SystemCapabilitiesExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OnvifVersion:
		return (void*)soap_instantiate_tt__OnvifVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingCapabilities:
		return (void*)soap_instantiate_tt__ImagingCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZCapabilities:
		return (void*)soap_instantiate_tt__PTZCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DeviceIOCapabilities:
		return (void*)soap_instantiate_tt__DeviceIOCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DisplayCapabilities:
		return (void*)soap_instantiate_tt__DisplayCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingCapabilities:
		return (void*)soap_instantiate_tt__RecordingCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SearchCapabilities:
		return (void*)soap_instantiate_tt__SearchCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReplayCapabilities:
		return (void*)soap_instantiate_tt__ReplayCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReceiverCapabilities:
		return (void*)soap_instantiate_tt__ReceiverCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsDeviceCapabilities:
		return (void*)soap_instantiate_tt__AnalyticsDeviceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsDeviceExtension:
		return (void*)soap_instantiate_tt__AnalyticsDeviceExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemLog:
		return (void*)soap_instantiate_tt__SystemLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SupportInformation:
		return (void*)soap_instantiate_tt__SupportInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__BinaryData:
		return (void*)soap_instantiate_tt__BinaryData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AttachmentData:
		return (void*)soap_instantiate_tt__AttachmentData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__BackupFile:
		return (void*)soap_instantiate_tt__BackupFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemLogUriList:
		return (void*)soap_instantiate_tt__SystemLogUriList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemLogUri:
		return (void*)soap_instantiate_tt__SystemLogUri(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemDateTime:
		return (void*)soap_instantiate_tt__SystemDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SystemDateTimeExtension:
		return (void*)soap_instantiate_tt__SystemDateTimeExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DateTime:
		return (void*)soap_instantiate_tt__DateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Date:
		return (void*)soap_instantiate_tt__Date(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Time:
		return (void*)soap_instantiate_tt__Time(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TimeZone:
		return (void*)soap_instantiate_tt__TimeZone(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RemoteUser:
		return (void*)soap_instantiate_tt__RemoteUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__User:
		return (void*)soap_instantiate_tt__User(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__UserExtension:
		return (void*)soap_instantiate_tt__UserExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CertificateGenerationParameters:
		return (void*)soap_instantiate_tt__CertificateGenerationParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CertificateGenerationParametersExtension:
		return (void*)soap_instantiate_tt__CertificateGenerationParametersExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Certificate:
		return (void*)soap_instantiate_tt__Certificate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CertificateStatus:
		return (void*)soap_instantiate_tt__CertificateStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CertificateWithPrivateKey:
		return (void*)soap_instantiate_tt__CertificateWithPrivateKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CertificateInformation:
		return (void*)soap_instantiate_tt__CertificateInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CertificateInformationExtension:
		return (void*)soap_instantiate_tt__CertificateInformationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot1XConfiguration:
		return (void*)soap_instantiate_tt__Dot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot1XConfigurationExtension:
		return (void*)soap_instantiate_tt__Dot1XConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EAPMethodConfiguration:
		return (void*)soap_instantiate_tt__EAPMethodConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EapMethodExtension:
		return (void*)soap_instantiate_tt__EapMethodExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TLSConfiguration:
		return (void*)soap_instantiate_tt__TLSConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__GenericEapPwdConfigurationExtension:
		return (void*)soap_instantiate_tt__GenericEapPwdConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelayOutputSettings:
		return (void*)soap_instantiate_tt__RelayOutputSettings(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZNodeExtension:
		return (void*)soap_instantiate_tt__PTZNodeExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZNodeExtension2:
		return (void*)soap_instantiate_tt__PTZNodeExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourSupported:
		return (void*)soap_instantiate_tt__PTZPresetTourSupported(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourSupportedExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZConfigurationExtension:
		return (void*)soap_instantiate_tt__PTZConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZConfigurationExtension2:
		return (void*)soap_instantiate_tt__PTZConfigurationExtension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTControlDirection:
		return (void*)soap_instantiate_tt__PTControlDirection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTControlDirectionExtension:
		return (void*)soap_instantiate_tt__PTControlDirectionExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EFlip:
		return (void*)soap_instantiate_tt__EFlip(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Reverse:
		return (void*)soap_instantiate_tt__Reverse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZConfigurationOptions:
		return (void*)soap_instantiate_tt__PTZConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZConfigurationOptions2:
		return (void*)soap_instantiate_tt__PTZConfigurationOptions2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTControlDirectionOptions:
		return (void*)soap_instantiate_tt__PTControlDirectionOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTControlDirectionOptionsExtension:
		return (void*)soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EFlipOptions:
		return (void*)soap_instantiate_tt__EFlipOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EFlipOptionsExtension:
		return (void*)soap_instantiate_tt__EFlipOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReverseOptions:
		return (void*)soap_instantiate_tt__ReverseOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReverseOptionsExtension:
		return (void*)soap_instantiate_tt__ReverseOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PanTiltLimits:
		return (void*)soap_instantiate_tt__PanTiltLimits(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ZoomLimits:
		return (void*)soap_instantiate_tt__ZoomLimits(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZSpaces:
		return (void*)soap_instantiate_tt__PTZSpaces(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZSpacesExtension:
		return (void*)soap_instantiate_tt__PTZSpacesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Space2DDescription:
		return (void*)soap_instantiate_tt__Space2DDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Space1DDescription:
		return (void*)soap_instantiate_tt__Space1DDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZSpeed:
		return (void*)soap_instantiate_tt__PTZSpeed(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPreset:
		return (void*)soap_instantiate_tt__PTZPreset(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PresetTour:
		return (void*)soap_instantiate_tt__PresetTour(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourSpot:
		return (void*)soap_instantiate_tt__PTZPresetTourSpot(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourSpotExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourSpotExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourPresetDetail:
		return (void*)soap_instantiate_tt__PTZPresetTourPresetDetail(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourTypeExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourTypeExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourStatus:
		return (void*)soap_instantiate_tt__PTZPresetTourStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourStatusExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourStatusExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourStartingCondition:
		return (void*)soap_instantiate_tt__PTZPresetTourStartingCondition(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourOptions:
		return (void*)soap_instantiate_tt__PTZPresetTourOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourSpotOptions:
		return (void*)soap_instantiate_tt__PTZPresetTourSpotOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions:
		return (void*)soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions:
		return (void*)soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension:
		return (void*)soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingStatus:
		return (void*)soap_instantiate_tt__ImagingStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusStatus:
		return (void*)soap_instantiate_tt__FocusStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusConfiguration:
		return (void*)soap_instantiate_tt__FocusConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingSettings:
		return (void*)soap_instantiate_tt__ImagingSettings(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingSettingsExtension:
		return (void*)soap_instantiate_tt__ImagingSettingsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Exposure:
		return (void*)soap_instantiate_tt__Exposure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WideDynamicRange:
		return (void*)soap_instantiate_tt__WideDynamicRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__BacklightCompensation:
		return (void*)soap_instantiate_tt__BacklightCompensation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingOptions:
		return (void*)soap_instantiate_tt__ImagingOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WideDynamicRangeOptions:
		return (void*)soap_instantiate_tt__WideDynamicRangeOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__BacklightCompensationOptions:
		return (void*)soap_instantiate_tt__BacklightCompensationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusOptions:
		return (void*)soap_instantiate_tt__FocusOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ExposureOptions:
		return (void*)soap_instantiate_tt__ExposureOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WhiteBalanceOptions:
		return (void*)soap_instantiate_tt__WhiteBalanceOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusMove:
		return (void*)soap_instantiate_tt__FocusMove(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AbsoluteFocus:
		return (void*)soap_instantiate_tt__AbsoluteFocus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelativeFocus:
		return (void*)soap_instantiate_tt__RelativeFocus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ContinuousFocus:
		return (void*)soap_instantiate_tt__ContinuousFocus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MoveOptions:
		return (void*)soap_instantiate_tt__MoveOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AbsoluteFocusOptions:
		return (void*)soap_instantiate_tt__AbsoluteFocusOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelativeFocusOptions:
		return (void*)soap_instantiate_tt__RelativeFocusOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ContinuousFocusOptions:
		return (void*)soap_instantiate_tt__ContinuousFocusOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WhiteBalance:
		return (void*)soap_instantiate_tt__WhiteBalance(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingStatus20:
		return (void*)soap_instantiate_tt__ImagingStatus20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingStatus20Extension:
		return (void*)soap_instantiate_tt__ImagingStatus20Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusStatus20:
		return (void*)soap_instantiate_tt__FocusStatus20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusStatus20Extension:
		return (void*)soap_instantiate_tt__FocusStatus20Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingSettings20:
		return (void*)soap_instantiate_tt__ImagingSettings20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingSettingsExtension20:
		return (void*)soap_instantiate_tt__ImagingSettingsExtension20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingSettingsExtension202:
		return (void*)soap_instantiate_tt__ImagingSettingsExtension202(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingSettingsExtension203:
		return (void*)soap_instantiate_tt__ImagingSettingsExtension203(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingSettingsExtension204:
		return (void*)soap_instantiate_tt__ImagingSettingsExtension204(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImageStabilization:
		return (void*)soap_instantiate_tt__ImageStabilization(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImageStabilizationExtension:
		return (void*)soap_instantiate_tt__ImageStabilizationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustment:
		return (void*)soap_instantiate_tt__IrCutFilterAutoAdjustment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension:
		return (void*)soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WideDynamicRange20:
		return (void*)soap_instantiate_tt__WideDynamicRange20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__BacklightCompensation20:
		return (void*)soap_instantiate_tt__BacklightCompensation20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Exposure20:
		return (void*)soap_instantiate_tt__Exposure20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ToneCompensation:
		return (void*)soap_instantiate_tt__ToneCompensation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ToneCompensationExtension:
		return (void*)soap_instantiate_tt__ToneCompensationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Defogging:
		return (void*)soap_instantiate_tt__Defogging(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DefoggingExtension:
		return (void*)soap_instantiate_tt__DefoggingExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NoiseReduction:
		return (void*)soap_instantiate_tt__NoiseReduction(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingOptions20:
		return (void*)soap_instantiate_tt__ImagingOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingOptions20Extension:
		return (void*)soap_instantiate_tt__ImagingOptions20Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingOptions20Extension2:
		return (void*)soap_instantiate_tt__ImagingOptions20Extension2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingOptions20Extension3:
		return (void*)soap_instantiate_tt__ImagingOptions20Extension3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImagingOptions20Extension4:
		return (void*)soap_instantiate_tt__ImagingOptions20Extension4(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImageStabilizationOptions:
		return (void*)soap_instantiate_tt__ImageStabilizationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ImageStabilizationOptionsExtension:
		return (void*)soap_instantiate_tt__ImageStabilizationOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions:
		return (void*)soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension:
		return (void*)soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WideDynamicRangeOptions20:
		return (void*)soap_instantiate_tt__WideDynamicRangeOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__BacklightCompensationOptions20:
		return (void*)soap_instantiate_tt__BacklightCompensationOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ExposureOptions20:
		return (void*)soap_instantiate_tt__ExposureOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MoveOptions20:
		return (void*)soap_instantiate_tt__MoveOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelativeFocusOptions20:
		return (void*)soap_instantiate_tt__RelativeFocusOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WhiteBalance20:
		return (void*)soap_instantiate_tt__WhiteBalance20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WhiteBalance20Extension:
		return (void*)soap_instantiate_tt__WhiteBalance20Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusConfiguration20:
		return (void*)soap_instantiate_tt__FocusConfiguration20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusConfiguration20Extension:
		return (void*)soap_instantiate_tt__FocusConfiguration20Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WhiteBalanceOptions20:
		return (void*)soap_instantiate_tt__WhiteBalanceOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__WhiteBalanceOptions20Extension:
		return (void*)soap_instantiate_tt__WhiteBalanceOptions20Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusOptions20:
		return (void*)soap_instantiate_tt__FocusOptions20(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FocusOptions20Extension:
		return (void*)soap_instantiate_tt__FocusOptions20Extension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ToneCompensationOptions:
		return (void*)soap_instantiate_tt__ToneCompensationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DefoggingOptions:
		return (void*)soap_instantiate_tt__DefoggingOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NoiseReductionOptions:
		return (void*)soap_instantiate_tt__NoiseReductionOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MessageExtension:
		return (void*)soap_instantiate_tt__MessageExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__ItemList_SimpleItem:
		return (void*)soap_instantiate__tt__ItemList_SimpleItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__ItemList_ElementItem:
		return (void*)soap_instantiate__tt__ItemList_ElementItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ItemList:
		return (void*)soap_instantiate_tt__ItemList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ItemListExtension:
		return (void*)soap_instantiate_tt__ItemListExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MessageDescription:
		return (void*)soap_instantiate_tt__MessageDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MessageDescriptionExtension:
		return (void*)soap_instantiate_tt__MessageDescriptionExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription:
		return (void*)soap_instantiate__tt__ItemListDescription_SimpleItemDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__ItemListDescription_ElementItemDescription:
		return (void*)soap_instantiate__tt__ItemListDescription_ElementItemDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ItemListDescription:
		return (void*)soap_instantiate_tt__ItemListDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ItemListDescriptionExtension:
		return (void*)soap_instantiate_tt__ItemListDescriptionExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Polyline:
		return (void*)soap_instantiate_tt__Polyline(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsEngineConfiguration:
		return (void*)soap_instantiate_tt__AnalyticsEngineConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension:
		return (void*)soap_instantiate_tt__AnalyticsEngineConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RuleEngineConfiguration:
		return (void*)soap_instantiate_tt__RuleEngineConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RuleEngineConfigurationExtension:
		return (void*)soap_instantiate_tt__RuleEngineConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Config:
		return (void*)soap_instantiate_tt__Config(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__ConfigDescription_Messages:
		return (void*)soap_instantiate__tt__ConfigDescription_Messages(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ConfigDescription:
		return (void*)soap_instantiate_tt__ConfigDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ConfigDescriptionExtension:
		return (void*)soap_instantiate_tt__ConfigDescriptionExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SupportedRules:
		return (void*)soap_instantiate_tt__SupportedRules(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SupportedRulesExtension:
		return (void*)soap_instantiate_tt__SupportedRulesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SupportedAnalyticsModules:
		return (void*)soap_instantiate_tt__SupportedAnalyticsModules(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SupportedAnalyticsModulesExtension:
		return (void*)soap_instantiate_tt__SupportedAnalyticsModulesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PolygonConfiguration:
		return (void*)soap_instantiate_tt__PolygonConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PolylineArray:
		return (void*)soap_instantiate_tt__PolylineArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PolylineArrayExtension:
		return (void*)soap_instantiate_tt__PolylineArrayExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PolylineArrayConfiguration:
		return (void*)soap_instantiate_tt__PolylineArrayConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MotionExpression:
		return (void*)soap_instantiate_tt__MotionExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MotionExpressionConfiguration:
		return (void*)soap_instantiate_tt__MotionExpressionConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CellLayout:
		return (void*)soap_instantiate_tt__CellLayout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PaneConfiguration:
		return (void*)soap_instantiate_tt__PaneConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PaneLayout:
		return (void*)soap_instantiate_tt__PaneLayout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Layout:
		return (void*)soap_instantiate_tt__Layout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LayoutExtension:
		return (void*)soap_instantiate_tt__LayoutExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CodingCapabilities:
		return (void*)soap_instantiate_tt__CodingCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LayoutOptions:
		return (void*)soap_instantiate_tt__LayoutOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LayoutOptionsExtension:
		return (void*)soap_instantiate_tt__LayoutOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PaneLayoutOptions:
		return (void*)soap_instantiate_tt__PaneLayoutOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PaneOptionExtension:
		return (void*)soap_instantiate_tt__PaneOptionExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Receiver:
		return (void*)soap_instantiate_tt__Receiver(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReceiverConfiguration:
		return (void*)soap_instantiate_tt__ReceiverConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReceiverStateInformation:
		return (void*)soap_instantiate_tt__ReceiverStateInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SourceReference:
		return (void*)soap_instantiate_tt__SourceReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DateTimeRange:
		return (void*)soap_instantiate_tt__DateTimeRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingSummary:
		return (void*)soap_instantiate_tt__RecordingSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SearchScope:
		return (void*)soap_instantiate_tt__SearchScope(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SearchScopeExtension:
		return (void*)soap_instantiate_tt__SearchScopeExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZPositionFilter:
		return (void*)soap_instantiate_tt__PTZPositionFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataFilter:
		return (void*)soap_instantiate_tt__MetadataFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FindRecordingResultList:
		return (void*)soap_instantiate_tt__FindRecordingResultList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FindEventResultList:
		return (void*)soap_instantiate_tt__FindEventResultList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FindEventResult:
		return (void*)soap_instantiate_tt__FindEventResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FindPTZPositionResultList:
		return (void*)soap_instantiate_tt__FindPTZPositionResultList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FindPTZPositionResult:
		return (void*)soap_instantiate_tt__FindPTZPositionResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FindMetadataResultList:
		return (void*)soap_instantiate_tt__FindMetadataResultList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FindMetadataResult:
		return (void*)soap_instantiate_tt__FindMetadataResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingInformation:
		return (void*)soap_instantiate_tt__RecordingInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingSourceInformation:
		return (void*)soap_instantiate_tt__RecordingSourceInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TrackInformation:
		return (void*)soap_instantiate_tt__TrackInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MediaAttributes:
		return (void*)soap_instantiate_tt__MediaAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TrackAttributes:
		return (void*)soap_instantiate_tt__TrackAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TrackAttributesExtension:
		return (void*)soap_instantiate_tt__TrackAttributesExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoAttributes:
		return (void*)soap_instantiate_tt__VideoAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioAttributes:
		return (void*)soap_instantiate_tt__AudioAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataAttributes:
		return (void*)soap_instantiate_tt__MetadataAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingConfiguration:
		return (void*)soap_instantiate_tt__RecordingConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TrackConfiguration:
		return (void*)soap_instantiate_tt__TrackConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__GetRecordingsResponseItem:
		return (void*)soap_instantiate_tt__GetRecordingsResponseItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__GetTracksResponseList:
		return (void*)soap_instantiate_tt__GetTracksResponseList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__GetTracksResponseItem:
		return (void*)soap_instantiate_tt__GetTracksResponseItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobConfiguration:
		return (void*)soap_instantiate_tt__RecordingJobConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobConfigurationExtension:
		return (void*)soap_instantiate_tt__RecordingJobConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobSource:
		return (void*)soap_instantiate_tt__RecordingJobSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobSourceExtension:
		return (void*)soap_instantiate_tt__RecordingJobSourceExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobTrack:
		return (void*)soap_instantiate_tt__RecordingJobTrack(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobStateInformation:
		return (void*)soap_instantiate_tt__RecordingJobStateInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobStateInformationExtension:
		return (void*)soap_instantiate_tt__RecordingJobStateInformationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobStateSource:
		return (void*)soap_instantiate_tt__RecordingJobStateSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobStateTracks:
		return (void*)soap_instantiate_tt__RecordingJobStateTracks(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobStateTrack:
		return (void*)soap_instantiate_tt__RecordingJobStateTrack(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__GetRecordingJobsResponseItem:
		return (void*)soap_instantiate_tt__GetRecordingJobsResponseItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReplayConfiguration:
		return (void*)soap_instantiate_tt__ReplayConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration:
		return (void*)soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension:
		return (void*)soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EngineConfiguration:
		return (void*)soap_instantiate_tt__EngineConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsEngineInputInfo:
		return (void*)soap_instantiate_tt__AnalyticsEngineInputInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension:
		return (void*)soap_instantiate_tt__AnalyticsEngineInputInfoExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SourceIdentification:
		return (void*)soap_instantiate_tt__SourceIdentification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__SourceIdentificationExtension:
		return (void*)soap_instantiate_tt__SourceIdentificationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataInput:
		return (void*)soap_instantiate_tt__MetadataInput(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataInputExtension:
		return (void*)soap_instantiate_tt__MetadataInputExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsStateInformation:
		return (void*)soap_instantiate_tt__AnalyticsStateInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsState:
		return (void*)soap_instantiate_tt__AnalyticsState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ActionEngineEventPayload:
		return (void*)soap_instantiate_tt__ActionEngineEventPayload(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ActionEngineEventPayloadExtension:
		return (void*)soap_instantiate_tt__ActionEngineEventPayloadExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioClassCandidate:
		return (void*)soap_instantiate_tt__AudioClassCandidate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioClassDescriptor:
		return (void*)soap_instantiate_tt__AudioClassDescriptor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioClassDescriptorExtension:
		return (void*)soap_instantiate_tt__AudioClassDescriptorExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ActiveConnection:
		return (void*)soap_instantiate_tt__ActiveConnection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ProfileStatus:
		return (void*)soap_instantiate_tt__ProfileStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ProfileStatusExtension:
		return (void*)soap_instantiate_tt__ProfileStatusExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDPosConfiguration:
		return (void*)soap_instantiate_tt__OSDPosConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDPosConfigurationExtension:
		return (void*)soap_instantiate_tt__OSDPosConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDColor:
		return (void*)soap_instantiate_tt__OSDColor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDTextConfiguration:
		return (void*)soap_instantiate_tt__OSDTextConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDTextConfigurationExtension:
		return (void*)soap_instantiate_tt__OSDTextConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDImgConfiguration:
		return (void*)soap_instantiate_tt__OSDImgConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDImgConfigurationExtension:
		return (void*)soap_instantiate_tt__OSDImgConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ColorspaceRange:
		return (void*)soap_instantiate_tt__ColorspaceRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ColorOptions:
		return (void*)soap_instantiate_tt__ColorOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDColorOptions:
		return (void*)soap_instantiate_tt__OSDColorOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDColorOptionsExtension:
		return (void*)soap_instantiate_tt__OSDColorOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDTextOptions:
		return (void*)soap_instantiate_tt__OSDTextOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDTextOptionsExtension:
		return (void*)soap_instantiate_tt__OSDTextOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDImgOptions:
		return (void*)soap_instantiate_tt__OSDImgOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDImgOptionsExtension:
		return (void*)soap_instantiate_tt__OSDImgOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDConfigurationExtension:
		return (void*)soap_instantiate_tt__OSDConfigurationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MaximumNumberOfOSDs:
		return (void*)soap_instantiate_tt__MaximumNumberOfOSDs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDConfigurationOptions:
		return (void*)soap_instantiate_tt__OSDConfigurationOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDConfigurationOptionsExtension:
		return (void*)soap_instantiate_tt__OSDConfigurationOptionsExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FileProgress:
		return (void*)soap_instantiate_tt__FileProgress(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ArrayOfFileProgress:
		return (void*)soap_instantiate_tt__ArrayOfFileProgress(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ArrayOfFileProgressExtension:
		return (void*)soap_instantiate_tt__ArrayOfFileProgressExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__StorageReferencePath:
		return (void*)soap_instantiate_tt__StorageReferencePath(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__StorageReferencePathExtension:
		return (void*)soap_instantiate_tt__StorageReferencePathExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Vector2D:
		return (void*)soap_instantiate_tt__Vector2D(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Vector1D:
		return (void*)soap_instantiate_tt__Vector1D(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZVector:
		return (void*)soap_instantiate_tt__PTZVector(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZStatus:
		return (void*)soap_instantiate_tt__PTZStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZMoveStatus:
		return (void*)soap_instantiate_tt__PTZMoveStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Vector:
		return (void*)soap_instantiate_tt__Vector(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Rectangle:
		return (void*)soap_instantiate_tt__Rectangle(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Polygon:
		return (void*)soap_instantiate_tt__Polygon(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Color:
		return (void*)soap_instantiate_tt__Color(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ColorCovariance:
		return (void*)soap_instantiate_tt__ColorCovariance(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Transformation:
		return (void*)soap_instantiate_tt__Transformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TransformationExtension:
		return (void*)soap_instantiate_tt__TransformationExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__GeoLocation:
		return (void*)soap_instantiate_tt__GeoLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__GeoOrientation:
		return (void*)soap_instantiate_tt__GeoOrientation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LocalLocation:
		return (void*)soap_instantiate_tt__LocalLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LocalOrientation:
		return (void*)soap_instantiate_tt__LocalOrientation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__LocationEntity:
		return (void*)soap_instantiate_tt__LocationEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__Message:
		return (void*)soap_instantiate__tt__Message(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__QueryExpressionType:
		return (void*)soap_instantiate_wsnt__QueryExpressionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__FilterType:
		return (void*)soap_instantiate_wsnt__FilterType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		return (void*)soap_instantiate_wsnt__SubscriptionPolicyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		return (void*)soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		return (void*)soap_instantiate_wsnt__NotificationMessageHolderType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		return (void*)soap_instantiate__wsnt__NotificationProducerRP(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		return (void*)soap_instantiate__wsnt__SubscriptionManagerRP(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Notify:
		return (void*)soap_instantiate__wsnt__Notify(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UseRaw:
		return (void*)soap_instantiate__wsnt__UseRaw(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		return (void*)soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Subscribe:
		return (void*)soap_instantiate__wsnt__Subscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__SubscribeResponse:
		return (void*)soap_instantiate__wsnt__SubscribeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		return (void*)soap_instantiate__wsnt__GetCurrentMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		return (void*)soap_instantiate__wsnt__GetCurrentMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetMessages:
		return (void*)soap_instantiate__wsnt__GetMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		return (void*)soap_instantiate__wsnt__GetMessagesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		return (void*)soap_instantiate__wsnt__DestroyPullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		return (void*)soap_instantiate__wsnt__DestroyPullPointResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__CreatePullPoint:
		return (void*)soap_instantiate__wsnt__CreatePullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		return (void*)soap_instantiate__wsnt__CreatePullPointResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Renew:
		return (void*)soap_instantiate__wsnt__Renew(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__RenewResponse:
		return (void*)soap_instantiate__wsnt__RenewResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Unsubscribe:
		return (void*)soap_instantiate__wsnt__Unsubscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		return (void*)soap_instantiate__wsnt__UnsubscribeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__PauseSubscription:
		return (void*)soap_instantiate__wsnt__PauseSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		return (void*)soap_instantiate__wsnt__PauseSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ResumeSubscription:
		return (void*)soap_instantiate__wsnt__ResumeSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		return (void*)soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xop__Include:
		return (void*)soap_instantiate_xop__Include(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		return (void*)soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		return (void*)soap_instantiate__wsrfbf__BaseFaultType_Description(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		return (void*)soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		return (void*)soap_instantiate_wsrfbf__BaseFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__Documentation:
		return (void*)soap_instantiate_wstop__Documentation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		return (void*)soap_instantiate_wstop__ExtensibleDocumented(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__QueryExpressionType:
		return (void*)soap_instantiate_wstop__QueryExpressionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tev__Capabilities:
		return (void*)soap_instantiate_tev__Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tev__SubscriptionPolicy:
		return (void*)soap_instantiate_tev__SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__GetServiceCapabilities:
		return (void*)soap_instantiate__tev__GetServiceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__GetServiceCapabilitiesResponse:
		return (void*)soap_instantiate__tev__GetServiceCapabilitiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy:
		return (void*)soap_instantiate__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__CreatePullPointSubscription:
		return (void*)soap_instantiate__tev__CreatePullPointSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__CreatePullPointSubscriptionResponse:
		return (void*)soap_instantiate__tev__CreatePullPointSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__PullMessages:
		return (void*)soap_instantiate__tev__PullMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__PullMessagesResponse:
		return (void*)soap_instantiate__tev__PullMessagesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__PullMessagesFaultResponse:
		return (void*)soap_instantiate__tev__PullMessagesFaultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__Seek:
		return (void*)soap_instantiate__tev__Seek(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__SeekResponse:
		return (void*)soap_instantiate__tev__SeekResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__SetSynchronizationPoint:
		return (void*)soap_instantiate__tev__SetSynchronizationPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__SetSynchronizationPointResponse:
		return (void*)soap_instantiate__tev__SetSynchronizationPointResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__GetEventProperties:
		return (void*)soap_instantiate__tev__GetEventProperties(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__GetEventPropertiesResponse:
		return (void*)soap_instantiate__tev__GetEventPropertiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__HelloType:
		return (void*)soap_instantiate_wsd__HelloType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ByeType:
		return (void*)soap_instantiate_wsd__ByeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ProbeType:
		return (void*)soap_instantiate_wsd__ProbeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ProbeMatchesType:
		return (void*)soap_instantiate_wsd__ProbeMatchesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ProbeMatchType:
		return (void*)soap_instantiate_wsd__ProbeMatchType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ResolveType:
		return (void*)soap_instantiate_wsd__ResolveType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ResolveMatchesType:
		return (void*)soap_instantiate_wsd__ResolveMatchesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ResolveMatchType:
		return (void*)soap_instantiate_wsd__ResolveMatchType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__SecurityType:
		return (void*)soap_instantiate_wsd__SecurityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__SigType:
		return (void*)soap_instantiate_wsd__SigType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__EndpointReferenceType:
		return (void*)soap_instantiate_wsa__EndpointReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__ReferencePropertiesType:
		return (void*)soap_instantiate_wsa__ReferencePropertiesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__ReferenceParametersType:
		return (void*)soap_instantiate_wsa__ReferenceParametersType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__AccessControl:
		return (void*)soap_instantiate_tmk__AccessControl(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__FireAlarm:
		return (void*)soap_instantiate_tmk__FireAlarm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__GasAnalysis:
		return (void*)soap_instantiate_tmk__GasAnalysis(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__Introscopy:
		return (void*)soap_instantiate_tmk__Introscopy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__NeutronProbing:
		return (void*)soap_instantiate_tmk__NeutronProbing(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__RadiationMonitoring:
		return (void*)soap_instantiate_tmk__RadiationMonitoring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__SteamDetector:
		return (void*)soap_instantiate_tmk__SteamDetector(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__MetalDetector:
		return (void*)soap_instantiate_tmk__MetalDetector(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tmk__VideoSurveillanceSystem:
		return (void*)soap_instantiate_tmk__VideoSurveillanceSystem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__StorageConfiguration:
		return (void*)soap_instantiate_tds__StorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSource:
		return (void*)soap_instantiate_tt__VideoSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioSource:
		return (void*)soap_instantiate_tt__AudioSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoSourceConfiguration:
		return (void*)soap_instantiate_tt__VideoSourceConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncoderConfiguration:
		return (void*)soap_instantiate_tt__VideoEncoderConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__JpegOptions2:
		return (void*)soap_instantiate_tt__JpegOptions2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Mpeg4Options2:
		return (void*)soap_instantiate_tt__Mpeg4Options2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__H264Options2:
		return (void*)soap_instantiate_tt__H264Options2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoEncoder2Configuration:
		return (void*)soap_instantiate_tt__VideoEncoder2Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioSourceConfiguration:
		return (void*)soap_instantiate_tt__AudioSourceConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioEncoderConfiguration:
		return (void*)soap_instantiate_tt__AudioEncoderConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioEncoder2Configuration:
		return (void*)soap_instantiate_tt__AudioEncoder2Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoAnalyticsConfiguration:
		return (void*)soap_instantiate_tt__VideoAnalyticsConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__MetadataConfiguration:
		return (void*)soap_instantiate_tt__MetadataConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoOutput:
		return (void*)soap_instantiate_tt__VideoOutput(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__VideoOutputConfiguration:
		return (void*)soap_instantiate_tt__VideoOutputConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioOutput:
		return (void*)soap_instantiate_tt__AudioOutput(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioOutputConfiguration:
		return (void*)soap_instantiate_tt__AudioOutputConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioDecoderConfiguration:
		return (void*)soap_instantiate_tt__AudioDecoderConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterface:
		return (void*)soap_instantiate_tt__NetworkInterface(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__CertificateUsage:
		return (void*)soap_instantiate_tt__CertificateUsage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RelayOutput:
		return (void*)soap_instantiate_tt__RelayOutput(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DigitalInput:
		return (void*)soap_instantiate_tt__DigitalInput(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZNode:
		return (void*)soap_instantiate_tt__PTZNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__PTZConfiguration:
		return (void*)soap_instantiate_tt__PTZConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__EventFilter:
		return (void*)soap_instantiate_tt__EventFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsEngine:
		return (void*)soap_instantiate_tt__AnalyticsEngine(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsEngineInput:
		return (void*)soap_instantiate_tt__AnalyticsEngineInput(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AnalyticsEngineControl:
		return (void*)soap_instantiate_tt__AnalyticsEngineControl(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDConfiguration:
		return (void*)soap_instantiate_tt__OSDConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		return (void*)soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		return (void*)soap_instantiate_wsnt__InvalidFilterFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		return (void*)soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		return (void*)soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		return (void*)soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		return (void*)soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		return (void*)soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		return (void*)soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		return (void*)soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		return (void*)soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		return (void*)soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		return (void*)soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		return (void*)soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		return (void*)soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		return (void*)soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		return (void*)soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		return (void*)soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		return (void*)soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		return (void*)soap_instantiate_wsnt__PauseFailedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		return (void*)soap_instantiate_wsnt__ResumeFailedFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		return (void*)soap_instantiate__wstop__TopicNamespaceType_Topic(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__TopicNamespaceType:
		return (void*)soap_instantiate_wstop__TopicNamespaceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__TopicType:
		return (void*)soap_instantiate_wstop__TopicType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__TopicSetType:
		return (void*)soap_instantiate_wstop__TopicSetType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsrf__ResourceUnknownFaultType:
		return (void*)soap_instantiate_wsrf__ResourceUnknownFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsrf__ResourceUnavailableFaultType:
		return (void*)soap_instantiate_wsrf__ResourceUnavailableFaultType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__ScopesType:
		return (void*)soap_instantiate_wsd__ScopesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__AppSequenceType:
		return (void*)soap_instantiate_wsd__AppSequenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__ServiceNameType:
		return (void*)soap_instantiate_wsa__ServiceNameType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__Relationship:
		return (void*)soap_instantiate_wsa__Relationship(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__ReplyAfterType:
		return (void*)soap_instantiate_wsa__ReplyAfterType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__RetryAfterType:
		return (void*)soap_instantiate_wsa__RetryAfterType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__AttributedQName:
		return (void*)soap_instantiate_wsa__AttributedQName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa__AttributedURI:
		return (void*)soap_instantiate_wsa__AttributedURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__OSDReference:
		return (void*)soap_instantiate_tt__OSDReference(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___tds__GetServices:
		return (void*)soap_instantiate___tds__GetServices(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetServiceCapabilities:
		return (void*)soap_instantiate___tds__GetServiceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDeviceInformation:
		return (void*)soap_instantiate___tds__GetDeviceInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetSystemDateAndTime:
		return (void*)soap_instantiate___tds__SetSystemDateAndTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetSystemDateAndTime:
		return (void*)soap_instantiate___tds__GetSystemDateAndTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetSystemFactoryDefault:
		return (void*)soap_instantiate___tds__SetSystemFactoryDefault(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__UpgradeSystemFirmware:
		return (void*)soap_instantiate___tds__UpgradeSystemFirmware(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SystemReboot:
		return (void*)soap_instantiate___tds__SystemReboot(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__RestoreSystem:
		return (void*)soap_instantiate___tds__RestoreSystem(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetSystemBackup:
		return (void*)soap_instantiate___tds__GetSystemBackup(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetSystemLog:
		return (void*)soap_instantiate___tds__GetSystemLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetSystemSupportInformation:
		return (void*)soap_instantiate___tds__GetSystemSupportInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetScopes:
		return (void*)soap_instantiate___tds__GetScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetScopes:
		return (void*)soap_instantiate___tds__SetScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__AddScopes:
		return (void*)soap_instantiate___tds__AddScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__RemoveScopes:
		return (void*)soap_instantiate___tds__RemoveScopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDiscoveryMode:
		return (void*)soap_instantiate___tds__GetDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetDiscoveryMode:
		return (void*)soap_instantiate___tds__SetDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetRemoteDiscoveryMode:
		return (void*)soap_instantiate___tds__GetRemoteDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetRemoteDiscoveryMode:
		return (void*)soap_instantiate___tds__SetRemoteDiscoveryMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDPAddresses:
		return (void*)soap_instantiate___tds__GetDPAddresses(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetEndpointReference:
		return (void*)soap_instantiate___tds__GetEndpointReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetRemoteUser:
		return (void*)soap_instantiate___tds__GetRemoteUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetRemoteUser:
		return (void*)soap_instantiate___tds__SetRemoteUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetUsers:
		return (void*)soap_instantiate___tds__GetUsers(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__CreateUsers:
		return (void*)soap_instantiate___tds__CreateUsers(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__DeleteUsers:
		return (void*)soap_instantiate___tds__DeleteUsers(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetUser:
		return (void*)soap_instantiate___tds__SetUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetWsdlUrl:
		return (void*)soap_instantiate___tds__GetWsdlUrl(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetCapabilities:
		return (void*)soap_instantiate___tds__GetCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetDPAddresses:
		return (void*)soap_instantiate___tds__SetDPAddresses(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetHostname:
		return (void*)soap_instantiate___tds__GetHostname(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetHostname:
		return (void*)soap_instantiate___tds__SetHostname(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetHostnameFromDHCP:
		return (void*)soap_instantiate___tds__SetHostnameFromDHCP(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDNS:
		return (void*)soap_instantiate___tds__GetDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetDNS:
		return (void*)soap_instantiate___tds__SetDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetNTP:
		return (void*)soap_instantiate___tds__GetNTP(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetNTP:
		return (void*)soap_instantiate___tds__SetNTP(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDynamicDNS:
		return (void*)soap_instantiate___tds__GetDynamicDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetDynamicDNS:
		return (void*)soap_instantiate___tds__SetDynamicDNS(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetNetworkInterfaces:
		return (void*)soap_instantiate___tds__GetNetworkInterfaces(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetNetworkInterfaces:
		return (void*)soap_instantiate___tds__SetNetworkInterfaces(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetNetworkProtocols:
		return (void*)soap_instantiate___tds__GetNetworkProtocols(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetNetworkProtocols:
		return (void*)soap_instantiate___tds__SetNetworkProtocols(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetNetworkDefaultGateway:
		return (void*)soap_instantiate___tds__GetNetworkDefaultGateway(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetNetworkDefaultGateway:
		return (void*)soap_instantiate___tds__SetNetworkDefaultGateway(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetZeroConfiguration:
		return (void*)soap_instantiate___tds__GetZeroConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetZeroConfiguration:
		return (void*)soap_instantiate___tds__SetZeroConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetIPAddressFilter:
		return (void*)soap_instantiate___tds__GetIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetIPAddressFilter:
		return (void*)soap_instantiate___tds__SetIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__AddIPAddressFilter:
		return (void*)soap_instantiate___tds__AddIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__RemoveIPAddressFilter:
		return (void*)soap_instantiate___tds__RemoveIPAddressFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetAccessPolicy:
		return (void*)soap_instantiate___tds__GetAccessPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetAccessPolicy:
		return (void*)soap_instantiate___tds__SetAccessPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__CreateCertificate:
		return (void*)soap_instantiate___tds__CreateCertificate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetCertificates:
		return (void*)soap_instantiate___tds__GetCertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetCertificatesStatus:
		return (void*)soap_instantiate___tds__GetCertificatesStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetCertificatesStatus:
		return (void*)soap_instantiate___tds__SetCertificatesStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__DeleteCertificates:
		return (void*)soap_instantiate___tds__DeleteCertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetPkcs10Request:
		return (void*)soap_instantiate___tds__GetPkcs10Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__LoadCertificates:
		return (void*)soap_instantiate___tds__LoadCertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetClientCertificateMode:
		return (void*)soap_instantiate___tds__GetClientCertificateMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetClientCertificateMode:
		return (void*)soap_instantiate___tds__SetClientCertificateMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetRelayOutputs:
		return (void*)soap_instantiate___tds__GetRelayOutputs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetRelayOutputSettings:
		return (void*)soap_instantiate___tds__SetRelayOutputSettings(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetRelayOutputState:
		return (void*)soap_instantiate___tds__SetRelayOutputState(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SendAuxiliaryCommand:
		return (void*)soap_instantiate___tds__SendAuxiliaryCommand(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetCACertificates:
		return (void*)soap_instantiate___tds__GetCACertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__LoadCertificateWithPrivateKey:
		return (void*)soap_instantiate___tds__LoadCertificateWithPrivateKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetCertificateInformation:
		return (void*)soap_instantiate___tds__GetCertificateInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__LoadCACertificates:
		return (void*)soap_instantiate___tds__LoadCACertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__CreateDot1XConfiguration:
		return (void*)soap_instantiate___tds__CreateDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetDot1XConfiguration:
		return (void*)soap_instantiate___tds__SetDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDot1XConfiguration:
		return (void*)soap_instantiate___tds__GetDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDot1XConfigurations:
		return (void*)soap_instantiate___tds__GetDot1XConfigurations(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__DeleteDot1XConfiguration:
		return (void*)soap_instantiate___tds__DeleteDot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDot11Capabilities:
		return (void*)soap_instantiate___tds__GetDot11Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetDot11Status:
		return (void*)soap_instantiate___tds__GetDot11Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__ScanAvailableDot11Networks:
		return (void*)soap_instantiate___tds__ScanAvailableDot11Networks(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetSystemUris:
		return (void*)soap_instantiate___tds__GetSystemUris(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__StartFirmwareUpgrade:
		return (void*)soap_instantiate___tds__StartFirmwareUpgrade(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__StartSystemRestore:
		return (void*)soap_instantiate___tds__StartSystemRestore(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetStorageConfigurations:
		return (void*)soap_instantiate___tds__GetStorageConfigurations(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__CreateStorageConfiguration:
		return (void*)soap_instantiate___tds__CreateStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetStorageConfiguration:
		return (void*)soap_instantiate___tds__GetStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetStorageConfiguration:
		return (void*)soap_instantiate___tds__SetStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__DeleteStorageConfiguration:
		return (void*)soap_instantiate___tds__DeleteStorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__GetGeoLocation:
		return (void*)soap_instantiate___tds__GetGeoLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__SetGeoLocation:
		return (void*)soap_instantiate___tds__SetGeoLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tds__DeleteGeoLocation:
		return (void*)soap_instantiate___tds__DeleteGeoLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevcppb__CreatePullPoint:
		return (void*)soap_instantiate___tevcppb__CreatePullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE___teveb__GetServiceCapabilities:
		return (void*)soap_instantiate___teveb__GetServiceCapabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE___teveb__CreatePullPointSubscription:
		return (void*)soap_instantiate___teveb__CreatePullPointSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE___teveb__GetEventProperties:
		return (void*)soap_instantiate___teveb__GetEventProperties(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevncb__Notify:
		return (void*)soap_instantiate___tevncb__Notify(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevnpb__Subscribe:
		return (void*)soap_instantiate___tevnpb__Subscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevnpb__GetCurrentMessage:
		return (void*)soap_instantiate___tevnpb__GetCurrentMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevppb__GetMessages:
		return (void*)soap_instantiate___tevppb__GetMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevppb__DestroyPullPoint:
		return (void*)soap_instantiate___tevppb__DestroyPullPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevppb__Notify:
		return (void*)soap_instantiate___tevppb__Notify(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpps__PullMessages:
		return (void*)soap_instantiate___tevpps__PullMessages(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpps__Seek:
		return (void*)soap_instantiate___tevpps__Seek(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpps__SetSynchronizationPoint:
		return (void*)soap_instantiate___tevpps__SetSynchronizationPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpps__Unsubscribe:
		return (void*)soap_instantiate___tevpps__Unsubscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpsmb__Renew:
		return (void*)soap_instantiate___tevpsmb__Renew(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpsmb__Unsubscribe:
		return (void*)soap_instantiate___tevpsmb__Unsubscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpsmb__PauseSubscription:
		return (void*)soap_instantiate___tevpsmb__PauseSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevpsmb__ResumeSubscription:
		return (void*)soap_instantiate___tevpsmb__ResumeSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevsmb__Renew:
		return (void*)soap_instantiate___tevsmb__Renew(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tevsmb__Unsubscribe:
		return (void*)soap_instantiate___tevsmb__Unsubscribe(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsu__Timestamp:
		return (void*)soap_instantiate__wsu__Timestamp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsse__EncodedString:
		return (void*)soap_instantiate_wsse__EncodedString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__UsernameToken:
		return (void*)soap_instantiate__wsse__UsernameToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__BinarySecurityToken:
		return (void*)soap_instantiate__wsse__BinarySecurityToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Reference:
		return (void*)soap_instantiate__wsse__Reference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Embedded:
		return (void*)soap_instantiate__wsse__Embedded(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__KeyIdentifier:
		return (void*)soap_instantiate__wsse__KeyIdentifier(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__SecurityTokenReference:
		return (void*)soap_instantiate__wsse__SecurityTokenReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__SignatureType:
		return (void*)soap_instantiate_ds__SignatureType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		return (void*)soap_instantiate__c14n__InclusiveNamespaces(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__TransformType:
		return (void*)soap_instantiate_ds__TransformType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__KeyInfoType:
		return (void*)soap_instantiate_ds__KeyInfoType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__SignedInfoType:
		return (void*)soap_instantiate_ds__SignedInfoType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		return (void*)soap_instantiate_ds__CanonicalizationMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__SignatureMethodType:
		return (void*)soap_instantiate_ds__SignatureMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__ReferenceType:
		return (void*)soap_instantiate_ds__ReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__TransformsType:
		return (void*)soap_instantiate_ds__TransformsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__DigestMethodType:
		return (void*)soap_instantiate_ds__DigestMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__KeyValueType:
		return (void*)soap_instantiate_ds__KeyValueType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__RetrievalMethodType:
		return (void*)soap_instantiate_ds__RetrievalMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__X509DataType:
		return (void*)soap_instantiate_ds__X509DataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__X509IssuerSerialType:
		return (void*)soap_instantiate_ds__X509IssuerSerialType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__DSAKeyValueType:
		return (void*)soap_instantiate_ds__DSAKeyValueType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__RSAKeyValueType:
		return (void*)soap_instantiate_ds__RSAKeyValueType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		return (void*)soap_instantiate_xenc__EncryptionPropertyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptedType:
		return (void*)soap_instantiate_xenc__EncryptedType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptionMethodType:
		return (void*)soap_instantiate_xenc__EncryptionMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__CipherDataType:
		return (void*)soap_instantiate_xenc__CipherDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__CipherReferenceType:
		return (void*)soap_instantiate_xenc__CipherReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__TransformsType:
		return (void*)soap_instantiate_xenc__TransformsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__AgreementMethodType:
		return (void*)soap_instantiate_xenc__AgreementMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__ReferenceType:
		return (void*)soap_instantiate_xenc__ReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		return (void*)soap_instantiate_xenc__EncryptionPropertiesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___xenc__union_ReferenceList:
		return (void*)soap_instantiate___xenc__union_ReferenceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xenc__ReferenceList:
		return (void*)soap_instantiate__xenc__ReferenceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptedDataType:
		return (void*)soap_instantiate_xenc__EncryptedDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptedKeyType:
		return (void*)soap_instantiate_xenc__EncryptedKeyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		return (void*)soap_instantiate_wsc__SecurityContextTokenType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		return (void*)soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		return (void*)soap_instantiate_wsc__DerivedKeyTokenType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsc__PropertiesType:
		return (void*)soap_instantiate_wsc__PropertiesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_AssertionType:
		return (void*)soap_instantiate___saml1__union_AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AssertionType:
		return (void*)soap_instantiate_saml1__AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_ConditionsType:
		return (void*)soap_instantiate___saml1__union_ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__ConditionsType:
		return (void*)soap_instantiate_saml1__ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__ConditionAbstractType:
		return (void*)soap_instantiate_saml1__ConditionAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_AdviceType:
		return (void*)soap_instantiate___saml1__union_AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AdviceType:
		return (void*)soap_instantiate_saml1__AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__StatementAbstractType:
		return (void*)soap_instantiate_saml1__StatementAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectType:
		return (void*)soap_instantiate_saml1__SubjectType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		return (void*)soap_instantiate_saml1__SubjectConfirmationType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectLocalityType:
		return (void*)soap_instantiate_saml1__SubjectLocalityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AuthorityBindingType:
		return (void*)soap_instantiate_saml1__AuthorityBindingType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_EvidenceType:
		return (void*)soap_instantiate___saml1__union_EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__EvidenceType:
		return (void*)soap_instantiate_saml1__EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		return (void*)soap_instantiate_saml1__AttributeDesignatorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		return (void*)soap_instantiate_saml1__AudienceRestrictionConditionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		return (void*)soap_instantiate_saml1__DoNotCacheConditionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		return (void*)soap_instantiate_saml1__SubjectStatementAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__NameIdentifierType:
		return (void*)soap_instantiate_saml1__NameIdentifierType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__ActionType:
		return (void*)soap_instantiate_saml1__ActionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AttributeType:
		return (void*)soap_instantiate_saml1__AttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		return (void*)soap_instantiate_saml1__AuthenticationStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		return (void*)soap_instantiate_saml1__AuthorizationDecisionStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AttributeStatementType:
		return (void*)soap_instantiate_saml1__AttributeStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		return (void*)soap_instantiate_saml2__BaseIDAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__EncryptedElementType:
		return (void*)soap_instantiate_saml2__EncryptedElementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_AssertionType:
		return (void*)soap_instantiate___saml2__union_AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AssertionType:
		return (void*)soap_instantiate_saml2__AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectType:
		return (void*)soap_instantiate_saml2__SubjectType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		return (void*)soap_instantiate_saml2__SubjectConfirmationType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_ConditionsType:
		return (void*)soap_instantiate___saml2__union_ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ConditionsType:
		return (void*)soap_instantiate_saml2__ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ConditionAbstractType:
		return (void*)soap_instantiate_saml2__ConditionAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_AdviceType:
		return (void*)soap_instantiate___saml2__union_AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AdviceType:
		return (void*)soap_instantiate_saml2__AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__StatementAbstractType:
		return (void*)soap_instantiate_saml2__StatementAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectLocalityType:
		return (void*)soap_instantiate_saml2__SubjectLocalityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AuthnContextType:
		return (void*)soap_instantiate_saml2__AuthnContextType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_EvidenceType:
		return (void*)soap_instantiate___saml2__union_EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__EvidenceType:
		return (void*)soap_instantiate_saml2__EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AttributeType:
		return (void*)soap_instantiate_saml2__AttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__NameIDType:
		return (void*)soap_instantiate_saml2__NameIDType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		return (void*)soap_instantiate_saml2__SubjectConfirmationDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		return (void*)soap_instantiate_saml2__AudienceRestrictionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__OneTimeUseType:
		return (void*)soap_instantiate_saml2__OneTimeUseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		return (void*)soap_instantiate_saml2__ProxyRestrictionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AuthnStatementType:
		return (void*)soap_instantiate_saml2__AuthnStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		return (void*)soap_instantiate_saml2__AuthzDecisionStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ActionType:
		return (void*)soap_instantiate_saml2__ActionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		return (void*)soap_instantiate___saml2__union_AttributeStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AttributeStatementType:
		return (void*)soap_instantiate_saml2__AttributeStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		return (void*)soap_instantiate_saml2__KeyInfoConfirmationDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Security:
		return (void*)soap_instantiate__wsse__Security(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Password:
		return (void*)soap_instantiate__wsse__Password(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyAttribute:
		return (void*)soap_instantiate_xsd__anyAttribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__EndpointReference:
		return (void*)soap_instantiate__wsa5__EndpointReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__ReferenceParameters:
		return (void*)soap_instantiate__wsa5__ReferenceParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__Metadata:
		return (void*)soap_instantiate__wsa5__Metadata(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__RelatesTo:
		return (void*)soap_instantiate__wsa5__RelatesTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__ReplyTo:
		return (void*)soap_instantiate__wsa5__ReplyTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__From:
		return (void*)soap_instantiate__wsa5__From(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__FaultTo:
		return (void*)soap_instantiate__wsa5__FaultTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa5__ProblemAction:
		return (void*)soap_instantiate__wsa5__ProblemAction(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SOAP_ENV__Envelope:
		return (void*)soap_instantiate_SOAP_ENV__Envelope(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREFS:
		return (void*)soap_instantiate_xsd__IDREFS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__NCName:
		return (void*)soap_instantiate_xsd__NCName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anySimpleType:
		return (void*)soap_instantiate_xsd__anySimpleType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return (void*)soap_instantiate_xsd__nonNegativeInteger(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__token:
		return (void*)soap_instantiate_xsd__token(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xmime__contentType:
		return (void*)soap_instantiate__xmime__contentType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xml__lang:
		return (void*)soap_instantiate__xml__lang(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tds__EAPMethodTypes:
		return (void*)soap_instantiate_tds__EAPMethodTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IntAttrList:
		return (void*)soap_instantiate_tt__IntAttrList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__FloatAttrList:
		return (void*)soap_instantiate_tt__FloatAttrList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__StringAttrList:
		return (void*)soap_instantiate_tt__StringAttrList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReferenceTokenList:
		return (void*)soap_instantiate_tt__ReferenceTokenList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		return (void*)soap_instantiate_wsnt__AbsoluteOrRelativeTimeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__OpenRelationshipType:
		return (void*)soap_instantiate_wsd__OpenRelationshipType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__QNameListType:
		return (void*)soap_instantiate_wsd__QNameListType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__UriListType:
		return (void*)soap_instantiate_wsd__UriListType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsd__FaultCodeOpenType:
		return (void*)soap_instantiate_wsd__FaultCodeOpenType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Name:
		return (void*)soap_instantiate_tt__Name(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority:
		return (void*)soap_instantiate_tt__NetworkInterfaceConfigPriority(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv4Address:
		return (void*)soap_instantiate_tt__IPv4Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__IPv6Address:
		return (void*)soap_instantiate_tt__IPv6Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__HwAddress:
		return (void*)soap_instantiate_tt__HwAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__DNSName:
		return (void*)soap_instantiate_tt__DNSName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Domain:
		return (void*)soap_instantiate_tt__Domain(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11SSIDType:
		return (void*)soap_instantiate_tt__Dot11SSIDType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11PSK:
		return (void*)soap_instantiate_tt__Dot11PSK(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Dot11PSKPassphrase:
		return (void*)soap_instantiate_tt__Dot11PSKPassphrase(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AuxiliaryData:
		return (void*)soap_instantiate_tt__AuxiliaryData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TopicNamespaceLocation:
		return (void*)soap_instantiate_tt__TopicNamespaceLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__Description:
		return (void*)soap_instantiate_tt__Description(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__XPathExpression:
		return (void*)soap_instantiate_tt__XPathExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobMode:
		return (void*)soap_instantiate_tt__RecordingJobMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobState:
		return (void*)soap_instantiate_tt__RecordingJobState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__AudioClassType:
		return (void*)soap_instantiate_tt__AudioClassType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReferenceToken:
		return (void*)soap_instantiate_tt__ReferenceToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__FullTopicExpression:
		return (void*)soap_instantiate_wstop__FullTopicExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		return (void*)soap_instantiate_wstop__ConcreteTopicExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		return (void*)soap_instantiate_wstop__SimpleTopicExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__ReceiverReference:
		return (void*)soap_instantiate_tt__ReceiverReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingReference:
		return (void*)soap_instantiate_tt__RecordingReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__TrackReference:
		return (void*)soap_instantiate_tt__TrackReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__JobToken:
		return (void*)soap_instantiate_tt__JobToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tt__RecordingJobReference:
		return (void*)soap_instantiate_tt__RecordingJobReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tds__Capabilities:
		return (void*)soap_instantiate__tds__Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__VideoSourceConfiguration:
		return (void*)soap_instantiate__tt__VideoSourceConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__AudioSourceConfiguration:
		return (void*)soap_instantiate__tt__AudioSourceConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__VideoEncoderConfiguration:
		return (void*)soap_instantiate__tt__VideoEncoderConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__AudioEncoderConfiguration:
		return (void*)soap_instantiate__tt__AudioEncoderConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__VideoAnalyticsConfiguration:
		return (void*)soap_instantiate__tt__VideoAnalyticsConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__PTZConfiguration:
		return (void*)soap_instantiate__tt__PTZConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__MetadataConfiguration:
		return (void*)soap_instantiate__tt__MetadataConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__AudioOutputConfiguration:
		return (void*)soap_instantiate__tt__AudioOutputConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__AudioDecoderConfiguration:
		return (void*)soap_instantiate__tt__AudioDecoderConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__Polyline:
		return (void*)soap_instantiate__tt__Polyline(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tt__Polygon:
		return (void*)soap_instantiate__tt__Polygon(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__TopicExpression:
		return (void*)soap_instantiate__wsnt__TopicExpression(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__TopicExpressionDialect:
		return (void*)soap_instantiate__wsnt__TopicExpressionDialect(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ConsumerReference:
		return (void*)soap_instantiate__wsnt__ConsumerReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Filter:
		return (void*)soap_instantiate__wsnt__Filter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__SubscriptionPolicy:
		return (void*)soap_instantiate__wsnt__SubscriptionPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__CreationTime:
		return (void*)soap_instantiate__wsnt__CreationTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__SubscriptionReference:
		return (void*)soap_instantiate__wsnt__SubscriptionReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__Topic:
		return (void*)soap_instantiate__wsnt__Topic(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ProducerReference:
		return (void*)soap_instantiate__wsnt__ProducerReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__NotificationMessage:
		return (void*)soap_instantiate__wsnt__NotificationMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__CurrentTime:
		return (void*)soap_instantiate__wsnt__CurrentTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__TerminationTime:
		return (void*)soap_instantiate__wsnt__TerminationTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ProducerProperties:
		return (void*)soap_instantiate__wsnt__ProducerProperties(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__MessageContent:
		return (void*)soap_instantiate__wsnt__MessageContent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__SubscribeCreationFailedFault:
		return (void*)soap_instantiate__wsnt__SubscribeCreationFailedFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__InvalidFilterFault:
		return (void*)soap_instantiate__wsnt__InvalidFilterFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault:
		return (void*)soap_instantiate__wsnt__TopicExpressionDialectUnknownFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__InvalidTopicExpressionFault:
		return (void*)soap_instantiate__wsnt__InvalidTopicExpressionFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__TopicNotSupportedFault:
		return (void*)soap_instantiate__wsnt__TopicNotSupportedFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault:
		return (void*)soap_instantiate__wsnt__MultipleTopicsSpecifiedFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault:
		return (void*)soap_instantiate__wsnt__InvalidProducerPropertiesExpressionFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault:
		return (void*)soap_instantiate__wsnt__InvalidMessageContentExpressionFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault:
		return (void*)soap_instantiate__wsnt__UnrecognizedPolicyRequestFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault:
		return (void*)soap_instantiate__wsnt__UnsupportedPolicyRequestFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault:
		return (void*)soap_instantiate__wsnt__NotifyMessageNotSupportedFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault:
		return (void*)soap_instantiate__wsnt__UnacceptableInitialTerminationTimeFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault:
		return (void*)soap_instantiate__wsnt__NoCurrentMessageOnTopicFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnableToGetMessagesFault:
		return (void*)soap_instantiate__wsnt__UnableToGetMessagesFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnableToDestroyPullPointFault:
		return (void*)soap_instantiate__wsnt__UnableToDestroyPullPointFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnableToCreatePullPointFault:
		return (void*)soap_instantiate__wsnt__UnableToCreatePullPointFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault:
		return (void*)soap_instantiate__wsnt__UnacceptableTerminationTimeFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault:
		return (void*)soap_instantiate__wsnt__UnableToDestroySubscriptionFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__PauseFailedFault:
		return (void*)soap_instantiate__wsnt__PauseFailedFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsnt__ResumeFailedFault:
		return (void*)soap_instantiate__wsnt__ResumeFailedFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xop__Include:
		return (void*)soap_instantiate__xop__Include(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrfbf__BaseFault:
		return (void*)soap_instantiate__wsrfbf__BaseFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wstop__TopicNamespace:
		return (void*)soap_instantiate__wstop__TopicNamespace(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wstop__TopicSet:
		return (void*)soap_instantiate__wstop__TopicSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wstop__topicNamespaceLocation:
		return (void*)soap_instantiate__wstop__topicNamespaceLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tev__Capabilities:
		return (void*)soap_instantiate__tev__Capabilities(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrf__ResourceUnknownFault:
		return (void*)soap_instantiate__wsrf__ResourceUnknownFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsrf__ResourceUnavailableFault:
		return (void*)soap_instantiate__wsrf__ResourceUnavailableFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Hello:
		return (void*)soap_instantiate__wsd__Hello(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Bye:
		return (void*)soap_instantiate__wsd__Bye(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Probe:
		return (void*)soap_instantiate__wsd__Probe(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__ProbeMatches:
		return (void*)soap_instantiate__wsd__ProbeMatches(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Resolve:
		return (void*)soap_instantiate__wsd__Resolve(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__ResolveMatches:
		return (void*)soap_instantiate__wsd__ResolveMatches(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Types:
		return (void*)soap_instantiate__wsd__Types(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Scopes:
		return (void*)soap_instantiate__wsd__Scopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__XAddrs:
		return (void*)soap_instantiate__wsd__XAddrs(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__SupportedMatchingRules:
		return (void*)soap_instantiate__wsd__SupportedMatchingRules(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Security:
		return (void*)soap_instantiate__wsd__Security(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Sig:
		return (void*)soap_instantiate__wsd__Sig(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__AppSequence:
		return (void*)soap_instantiate__wsd__AppSequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsd__Id:
		return (void*)soap_instantiate__wsd__Id(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__EndpointReference:
		return (void*)soap_instantiate__wsa__EndpointReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__MessageID:
		return (void*)soap_instantiate__wsa__MessageID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__RelatesTo:
		return (void*)soap_instantiate__wsa__RelatesTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__To:
		return (void*)soap_instantiate__wsa__To(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__Action:
		return (void*)soap_instantiate__wsa__Action(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__From:
		return (void*)soap_instantiate__wsa__From(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__ReplyTo:
		return (void*)soap_instantiate__wsa__ReplyTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__FaultTo:
		return (void*)soap_instantiate__wsa__FaultTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__ReplyAfter:
		return (void*)soap_instantiate__wsa__ReplyAfter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa__RetryAfter:
		return (void*)soap_instantiate__wsa__RetryAfter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__Signature:
		return (void*)soap_instantiate__ds__Signature(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__Transform:
		return (void*)soap_instantiate__ds__Transform(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__KeyInfo:
		return (void*)soap_instantiate__ds__KeyInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Assertion:
		return (void*)soap_instantiate__saml1__Assertion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Conditions:
		return (void*)soap_instantiate__saml1__Conditions(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Condition:
		return (void*)soap_instantiate__saml1__Condition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		return (void*)soap_instantiate__saml1__AudienceRestrictionCondition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		return (void*)soap_instantiate__saml1__DoNotCacheCondition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Advice:
		return (void*)soap_instantiate__saml1__Advice(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Statement:
		return (void*)soap_instantiate__saml1__Statement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__SubjectStatement:
		return (void*)soap_instantiate__saml1__SubjectStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Subject:
		return (void*)soap_instantiate__saml1__Subject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__NameIdentifier:
		return (void*)soap_instantiate__saml1__NameIdentifier(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__SubjectConfirmation:
		return (void*)soap_instantiate__saml1__SubjectConfirmation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AuthenticationStatement:
		return (void*)soap_instantiate__saml1__AuthenticationStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__SubjectLocality:
		return (void*)soap_instantiate__saml1__SubjectLocality(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AuthorityBinding:
		return (void*)soap_instantiate__saml1__AuthorityBinding(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		return (void*)soap_instantiate__saml1__AuthorizationDecisionStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Action:
		return (void*)soap_instantiate__saml1__Action(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Evidence:
		return (void*)soap_instantiate__saml1__Evidence(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AttributeStatement:
		return (void*)soap_instantiate__saml1__AttributeStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AttributeDesignator:
		return (void*)soap_instantiate__saml1__AttributeDesignator(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Attribute:
		return (void*)soap_instantiate__saml1__Attribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__BaseID:
		return (void*)soap_instantiate__saml2__BaseID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__NameID:
		return (void*)soap_instantiate__saml2__NameID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__EncryptedID:
		return (void*)soap_instantiate__saml2__EncryptedID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Issuer:
		return (void*)soap_instantiate__saml2__Issuer(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Assertion:
		return (void*)soap_instantiate__saml2__Assertion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Subject:
		return (void*)soap_instantiate__saml2__Subject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__SubjectConfirmation:
		return (void*)soap_instantiate__saml2__SubjectConfirmation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		return (void*)soap_instantiate__saml2__SubjectConfirmationData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Conditions:
		return (void*)soap_instantiate__saml2__Conditions(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Condition:
		return (void*)soap_instantiate__saml2__Condition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AudienceRestriction:
		return (void*)soap_instantiate__saml2__AudienceRestriction(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__OneTimeUse:
		return (void*)soap_instantiate__saml2__OneTimeUse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__ProxyRestriction:
		return (void*)soap_instantiate__saml2__ProxyRestriction(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Advice:
		return (void*)soap_instantiate__saml2__Advice(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__EncryptedAssertion:
		return (void*)soap_instantiate__saml2__EncryptedAssertion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Statement:
		return (void*)soap_instantiate__saml2__Statement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AuthnStatement:
		return (void*)soap_instantiate__saml2__AuthnStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__SubjectLocality:
		return (void*)soap_instantiate__saml2__SubjectLocality(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AuthnContext:
		return (void*)soap_instantiate__saml2__AuthnContext(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		return (void*)soap_instantiate__saml2__AuthzDecisionStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Action:
		return (void*)soap_instantiate__saml2__Action(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Evidence:
		return (void*)soap_instantiate__saml2__Evidence(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AttributeStatement:
		return (void*)soap_instantiate__saml2__AttributeStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Attribute:
		return (void*)soap_instantiate__saml2__Attribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__EncryptedAttribute:
		return (void*)soap_instantiate__saml2__EncryptedAttribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE_dn__dummy:
		return (void*)soap_instantiate_dn__dummy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tns1__dummy:
		return (void*)soap_instantiate_tns1__dummy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic:
		return (void*)soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__QName:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsd__ProbeMatchType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowsd__ProbeMatchType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description:
		return (void*)soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfwsnt__TopicExpressionTypeCustom:
		return (void*)soap_instantiate_std__vectorTemplateOfwsnt__TopicExpressionTypeCustom(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__FileProgress(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__OSDType:
		return (void*)soap_instantiate_std__vectorTemplateOftt__OSDType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__ColorspaceRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Color:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Color(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__ActiveConnection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__AudioClassCandidate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__EngineConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobTrack(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__GetTracksResponseItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__TrackAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__TrackInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__FindMetadataResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__FindPTZPositionResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__FindEventResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__RecordingInformation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__RecordingReference:
		return (void*)soap_instantiate_std__vectorTemplateOftt__RecordingReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__SourceReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Rectangle(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayoutOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Polyline(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__ConfigDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages:
		return (void*)soap_instantiate_std__vectorTemplateOf_tt__ConfigDescription_Messages(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Config:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Config(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Vector(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription:
		return (void*)soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription:
		return (void*)soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem:
		return (void*)soap_instantiate_std__vectorTemplateOf_tt__ItemList_ElementItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem:
		return (void*)soap_instantiate_std__vectorTemplateOf_tt__ItemList_SimpleItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__BacklightCompensationMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__ImageStabilizationMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__WhiteBalanceMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority:
		return (void*)soap_instantiate_std__vectorTemplateOftt__ExposurePriority(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__ExposureMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__ExposureMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__AutoFocusMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__WideDynamicMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__IrCutFilterMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection:
		return (void*)soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__ReverseMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__ReverseMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__EFlipMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__EFlipMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation:
		return (void*)soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__SystemLogUri(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__OnvifVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData:
		return (void*)soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher:
		return (void*)soap_instantiate_std__vectorTemplateOftt__Dot11Cipher(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite:
		return (void*)soap_instantiate_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Dot11Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Dot3Configuration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__H264Profile:
		return (void*)soap_instantiate_std__vectorTemplateOftt__H264Profile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile:
		return (void*)soap_instantiate_std__vectorTemplateOftt__Mpeg4Profile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__RotateMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__RotateMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode:
		return (void*)soap_instantiate_std__vectorTemplateOftt__SceneOrientationMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__LensProjection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__LensDescription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOffloat:
		return (void*)soap_instantiate_std__vectorTemplateOffloat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LocationEntity:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__LocationEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTotds__StorageConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__RelayOutput(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken:
		return (void*)soap_instantiate_std__vectorTemplateOftt__ReferenceToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Dot1XConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__CertificateStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Certificate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__IPv6Address:
		return (void*)soap_instantiate_std__vectorTemplateOftt__IPv6Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__IPv4Address:
		return (void*)soap_instantiate_std__vectorTemplateOftt__IPv4Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__NetworkProtocol(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__NetworkInterface(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__IPAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__token:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__token(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory:
		return (void*)soap_instantiate_std__vectorTemplateOftt__CapabilityCategory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__User:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__User(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__NetworkHost(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyURI:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__Scope(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTott__BackupFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTotds__Service(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyType:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__anyType(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE___wsd__Probe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __wsd__Probe*>(p->ptr), struct __wsd__Probe);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __wsd__Probe*>(p->ptr), struct __wsd__Probe);
		break;
	case SOAP_TYPE___wsd__ProbeMatches:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __wsd__ProbeMatches*>(p->ptr), struct __wsd__ProbeMatches);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __wsd__ProbeMatches*>(p->ptr), struct __wsd__ProbeMatches);
		break;
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__ReferenceParametersType*>(p->ptr), struct wsa5__ReferenceParametersType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__ReferenceParametersType*>(p->ptr), struct wsa5__ReferenceParametersType);
		break;
	case SOAP_TYPE_wsa5__MetadataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__MetadataType*>(p->ptr), struct wsa5__MetadataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__MetadataType*>(p->ptr), struct wsa5__MetadataType);
		break;
	case SOAP_TYPE_wsa5__ProblemActionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__ProblemActionType*>(p->ptr), struct wsa5__ProblemActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__ProblemActionType*>(p->ptr), struct wsa5__ProblemActionType);
		break;
	case SOAP_TYPE_wsa5__RelatesToType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__RelatesToType*>(p->ptr), struct wsa5__RelatesToType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__RelatesToType*>(p->ptr), struct wsa5__RelatesToType);
		break;
	case SOAP_TYPE_chan__ChannelInstanceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct chan__ChannelInstanceType*>(p->ptr), struct chan__ChannelInstanceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct chan__ChannelInstanceType*>(p->ptr), struct chan__ChannelInstanceType);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_timeval:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		break;
	case SOAP_TYPE_xsd__hexBinary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__hexBinary*>(p->ptr), xsd__hexBinary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__hexBinary*>(p->ptr), xsd__hexBinary);
		break;
	case SOAP_TYPE_xsd__ID__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__ID__*>(p->ptr), xsd__ID__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__ID__*>(p->ptr), xsd__ID__);
		break;
	case SOAP_TYPE_xsd__IDREFS__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__IDREFS__*>(p->ptr), xsd__IDREFS__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__IDREFS__*>(p->ptr), xsd__IDREFS__);
		break;
	case SOAP_TYPE_xsd__NCName__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__NCName__*>(p->ptr), xsd__NCName__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__NCName__*>(p->ptr), xsd__NCName__);
		break;
	case SOAP_TYPE_xsd__QName__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__QName__*>(p->ptr), xsd__QName__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__QName__*>(p->ptr), xsd__QName__);
		break;
	case SOAP_TYPE_xsd__anySimpleType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__anySimpleType__*>(p->ptr), xsd__anySimpleType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__anySimpleType__*>(p->ptr), xsd__anySimpleType__);
		break;
	case SOAP_TYPE_xsd__anyURI__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__anyURI__*>(p->ptr), xsd__anyURI__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__anyURI__*>(p->ptr), xsd__anyURI__);
		break;
	case SOAP_TYPE_xsd__base64Binary__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary__*>(p->ptr), xsd__base64Binary__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary__*>(p->ptr), xsd__base64Binary__);
		break;
	case SOAP_TYPE_xsd__boolean_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__boolean_*>(p->ptr), xsd__boolean_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__boolean_*>(p->ptr), xsd__boolean_);
		break;
	case SOAP_TYPE_xsd__dateTime__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__dateTime__*>(p->ptr), xsd__dateTime__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__dateTime__*>(p->ptr), xsd__dateTime__);
		break;
	case SOAP_TYPE_xsd__double_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__double_*>(p->ptr), xsd__double_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__double_*>(p->ptr), xsd__double_);
		break;
	case SOAP_TYPE_xsd__duration__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__duration__*>(p->ptr), xsd__duration__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__duration__*>(p->ptr), xsd__duration__);
		break;
	case SOAP_TYPE_xsd__float_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__float_*>(p->ptr), xsd__float_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__float_*>(p->ptr), xsd__float_);
		break;
	case SOAP_TYPE_xsd__hexBinary__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__hexBinary__*>(p->ptr), xsd__hexBinary__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__hexBinary__*>(p->ptr), xsd__hexBinary__);
		break;
	case SOAP_TYPE_xsd__int_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__int_*>(p->ptr), xsd__int_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__int_*>(p->ptr), xsd__int_);
		break;
	case SOAP_TYPE_xsd__integer__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__integer__*>(p->ptr), xsd__integer__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__integer__*>(p->ptr), xsd__integer__);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__nonNegativeInteger__*>(p->ptr), xsd__nonNegativeInteger__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__nonNegativeInteger__*>(p->ptr), xsd__nonNegativeInteger__);
		break;
	case SOAP_TYPE_xsd__string_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__string_*>(p->ptr), xsd__string_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__string_*>(p->ptr), xsd__string_);
		break;
	case SOAP_TYPE_xsd__token__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__token__*>(p->ptr), xsd__token__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__token__*>(p->ptr), xsd__token__);
		break;
	case SOAP_TYPE_xsd__unsignedInt_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedInt_*>(p->ptr), xsd__unsignedInt_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedInt_*>(p->ptr), xsd__unsignedInt_);
		break;
	case SOAP_TYPE_wsnt__TopicExpressionTypeCustom:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__TopicExpressionTypeCustom*>(p->ptr), wsnt__TopicExpressionTypeCustom);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__TopicExpressionTypeCustom*>(p->ptr), wsnt__TopicExpressionTypeCustom);
		break;
	case SOAP_TYPE_tds__AutoGeoModes__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__AutoGeoModes__*>(p->ptr), tds__AutoGeoModes__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__AutoGeoModes__*>(p->ptr), tds__AutoGeoModes__);
		break;
	case SOAP_TYPE_tds__StorageType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__StorageType__*>(p->ptr), tds__StorageType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__StorageType__*>(p->ptr), tds__StorageType__);
		break;
	case SOAP_TYPE_tt__Name__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Name__*>(p->ptr), tt__Name__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Name__*>(p->ptr), tt__Name__);
		break;
	case SOAP_TYPE_tt__RotateMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RotateMode__*>(p->ptr), tt__RotateMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RotateMode__*>(p->ptr), tt__RotateMode__);
		break;
	case SOAP_TYPE_tt__SceneOrientationMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SceneOrientationMode__*>(p->ptr), tt__SceneOrientationMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SceneOrientationMode__*>(p->ptr), tt__SceneOrientationMode__);
		break;
	case SOAP_TYPE_tt__SceneOrientationOption__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SceneOrientationOption__*>(p->ptr), tt__SceneOrientationOption__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SceneOrientationOption__*>(p->ptr), tt__SceneOrientationOption__);
		break;
	case SOAP_TYPE_tt__ViewModes__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ViewModes__*>(p->ptr), tt__ViewModes__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ViewModes__*>(p->ptr), tt__ViewModes__);
		break;
	case SOAP_TYPE_tt__VideoEncoding__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoding__*>(p->ptr), tt__VideoEncoding__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoding__*>(p->ptr), tt__VideoEncoding__);
		break;
	case SOAP_TYPE_tt__Mpeg4Profile__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Mpeg4Profile__*>(p->ptr), tt__Mpeg4Profile__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Mpeg4Profile__*>(p->ptr), tt__Mpeg4Profile__);
		break;
	case SOAP_TYPE_tt__H264Profile__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__H264Profile__*>(p->ptr), tt__H264Profile__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__H264Profile__*>(p->ptr), tt__H264Profile__);
		break;
	case SOAP_TYPE_tt__VideoEncodingMimeNames__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncodingMimeNames__*>(p->ptr), tt__VideoEncodingMimeNames__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncodingMimeNames__*>(p->ptr), tt__VideoEncodingMimeNames__);
		break;
	case SOAP_TYPE_tt__VideoEncodingProfiles__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncodingProfiles__*>(p->ptr), tt__VideoEncodingProfiles__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncodingProfiles__*>(p->ptr), tt__VideoEncodingProfiles__);
		break;
	case SOAP_TYPE_tt__AudioEncoding__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncoding__*>(p->ptr), tt__AudioEncoding__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncoding__*>(p->ptr), tt__AudioEncoding__);
		break;
	case SOAP_TYPE_tt__AudioEncodingMimeNames__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncodingMimeNames__*>(p->ptr), tt__AudioEncodingMimeNames__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncodingMimeNames__*>(p->ptr), tt__AudioEncodingMimeNames__);
		break;
	case SOAP_TYPE_tt__MetadataCompressionType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataCompressionType__*>(p->ptr), tt__MetadataCompressionType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataCompressionType__*>(p->ptr), tt__MetadataCompressionType__);
		break;
	case SOAP_TYPE_tt__StreamType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__StreamType__*>(p->ptr), tt__StreamType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__StreamType__*>(p->ptr), tt__StreamType__);
		break;
	case SOAP_TYPE_tt__TransportProtocol__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TransportProtocol__*>(p->ptr), tt__TransportProtocol__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TransportProtocol__*>(p->ptr), tt__TransportProtocol__);
		break;
	case SOAP_TYPE_tt__ScopeDefinition__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ScopeDefinition__*>(p->ptr), tt__ScopeDefinition__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ScopeDefinition__*>(p->ptr), tt__ScopeDefinition__);
		break;
	case SOAP_TYPE_tt__DiscoveryMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DiscoveryMode__*>(p->ptr), tt__DiscoveryMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DiscoveryMode__*>(p->ptr), tt__DiscoveryMode__);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceConfigPriority__*>(p->ptr), tt__NetworkInterfaceConfigPriority__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceConfigPriority__*>(p->ptr), tt__NetworkInterfaceConfigPriority__);
		break;
	case SOAP_TYPE_tt__Duplex__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Duplex__*>(p->ptr), tt__Duplex__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Duplex__*>(p->ptr), tt__Duplex__);
		break;
	case SOAP_TYPE_tt__IANA_IfTypes__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IANA_IfTypes__*>(p->ptr), tt__IANA_IfTypes__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IANA_IfTypes__*>(p->ptr), tt__IANA_IfTypes__);
		break;
	case SOAP_TYPE_tt__IPv6DHCPConfiguration__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv6DHCPConfiguration__*>(p->ptr), tt__IPv6DHCPConfiguration__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv6DHCPConfiguration__*>(p->ptr), tt__IPv6DHCPConfiguration__);
		break;
	case SOAP_TYPE_tt__NetworkProtocolType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkProtocolType__*>(p->ptr), tt__NetworkProtocolType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkProtocolType__*>(p->ptr), tt__NetworkProtocolType__);
		break;
	case SOAP_TYPE_tt__NetworkHostType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkHostType__*>(p->ptr), tt__NetworkHostType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkHostType__*>(p->ptr), tt__NetworkHostType__);
		break;
	case SOAP_TYPE_tt__IPv4Address__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv4Address__*>(p->ptr), tt__IPv4Address__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv4Address__*>(p->ptr), tt__IPv4Address__);
		break;
	case SOAP_TYPE_tt__IPv6Address__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv6Address__*>(p->ptr), tt__IPv6Address__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv6Address__*>(p->ptr), tt__IPv6Address__);
		break;
	case SOAP_TYPE_tt__HwAddress__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__HwAddress__*>(p->ptr), tt__HwAddress__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__HwAddress__*>(p->ptr), tt__HwAddress__);
		break;
	case SOAP_TYPE_tt__IPType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPType__*>(p->ptr), tt__IPType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPType__*>(p->ptr), tt__IPType__);
		break;
	case SOAP_TYPE_tt__DNSName__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DNSName__*>(p->ptr), tt__DNSName__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DNSName__*>(p->ptr), tt__DNSName__);
		break;
	case SOAP_TYPE_tt__Domain__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Domain__*>(p->ptr), tt__Domain__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Domain__*>(p->ptr), tt__Domain__);
		break;
	case SOAP_TYPE_tt__IPAddressFilterType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPAddressFilterType__*>(p->ptr), tt__IPAddressFilterType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPAddressFilterType__*>(p->ptr), tt__IPAddressFilterType__);
		break;
	case SOAP_TYPE_tt__DynamicDNSType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DynamicDNSType__*>(p->ptr), tt__DynamicDNSType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DynamicDNSType__*>(p->ptr), tt__DynamicDNSType__);
		break;
	case SOAP_TYPE_tt__Dot11SSIDType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11SSIDType__*>(p->ptr), tt__Dot11SSIDType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11SSIDType__*>(p->ptr), tt__Dot11SSIDType__);
		break;
	case SOAP_TYPE_tt__Dot11StationMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11StationMode__*>(p->ptr), tt__Dot11StationMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11StationMode__*>(p->ptr), tt__Dot11StationMode__);
		break;
	case SOAP_TYPE_tt__Dot11SecurityMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11SecurityMode__*>(p->ptr), tt__Dot11SecurityMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11SecurityMode__*>(p->ptr), tt__Dot11SecurityMode__);
		break;
	case SOAP_TYPE_tt__Dot11Cipher__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11Cipher__*>(p->ptr), tt__Dot11Cipher__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11Cipher__*>(p->ptr), tt__Dot11Cipher__);
		break;
	case SOAP_TYPE_tt__Dot11PSK__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11PSK__*>(p->ptr), tt__Dot11PSK__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11PSK__*>(p->ptr), tt__Dot11PSK__);
		break;
	case SOAP_TYPE_tt__Dot11PSKPassphrase__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11PSKPassphrase__*>(p->ptr), tt__Dot11PSKPassphrase__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11PSKPassphrase__*>(p->ptr), tt__Dot11PSKPassphrase__);
		break;
	case SOAP_TYPE_tt__Dot11SignalStrength__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11SignalStrength__*>(p->ptr), tt__Dot11SignalStrength__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11SignalStrength__*>(p->ptr), tt__Dot11SignalStrength__);
		break;
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11AuthAndMangementSuite__*>(p->ptr), tt__Dot11AuthAndMangementSuite__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11AuthAndMangementSuite__*>(p->ptr), tt__Dot11AuthAndMangementSuite__);
		break;
	case SOAP_TYPE_tt__CapabilityCategory__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CapabilityCategory__*>(p->ptr), tt__CapabilityCategory__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CapabilityCategory__*>(p->ptr), tt__CapabilityCategory__);
		break;
	case SOAP_TYPE_tt__SystemLogType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemLogType__*>(p->ptr), tt__SystemLogType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemLogType__*>(p->ptr), tt__SystemLogType__);
		break;
	case SOAP_TYPE_tt__FactoryDefaultType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FactoryDefaultType__*>(p->ptr), tt__FactoryDefaultType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FactoryDefaultType__*>(p->ptr), tt__FactoryDefaultType__);
		break;
	case SOAP_TYPE_tt__SetDateTimeType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SetDateTimeType__*>(p->ptr), tt__SetDateTimeType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SetDateTimeType__*>(p->ptr), tt__SetDateTimeType__);
		break;
	case SOAP_TYPE_tt__UserLevel__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__UserLevel__*>(p->ptr), tt__UserLevel__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__UserLevel__*>(p->ptr), tt__UserLevel__);
		break;
	case SOAP_TYPE_tt__RelayLogicalState__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelayLogicalState__*>(p->ptr), tt__RelayLogicalState__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelayLogicalState__*>(p->ptr), tt__RelayLogicalState__);
		break;
	case SOAP_TYPE_tt__RelayIdleState__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelayIdleState__*>(p->ptr), tt__RelayIdleState__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelayIdleState__*>(p->ptr), tt__RelayIdleState__);
		break;
	case SOAP_TYPE_tt__RelayMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelayMode__*>(p->ptr), tt__RelayMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelayMode__*>(p->ptr), tt__RelayMode__);
		break;
	case SOAP_TYPE_tt__DigitalIdleState__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DigitalIdleState__*>(p->ptr), tt__DigitalIdleState__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DigitalIdleState__*>(p->ptr), tt__DigitalIdleState__);
		break;
	case SOAP_TYPE_tt__EFlipMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EFlipMode__*>(p->ptr), tt__EFlipMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EFlipMode__*>(p->ptr), tt__EFlipMode__);
		break;
	case SOAP_TYPE_tt__ReverseMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReverseMode__*>(p->ptr), tt__ReverseMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReverseMode__*>(p->ptr), tt__ReverseMode__);
		break;
	case SOAP_TYPE_tt__AuxiliaryData__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AuxiliaryData__*>(p->ptr), tt__AuxiliaryData__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AuxiliaryData__*>(p->ptr), tt__AuxiliaryData__);
		break;
	case SOAP_TYPE_tt__PTZPresetTourState__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourState__*>(p->ptr), tt__PTZPresetTourState__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourState__*>(p->ptr), tt__PTZPresetTourState__);
		break;
	case SOAP_TYPE_tt__PTZPresetTourDirection__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourDirection__*>(p->ptr), tt__PTZPresetTourDirection__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourDirection__*>(p->ptr), tt__PTZPresetTourDirection__);
		break;
	case SOAP_TYPE_tt__PTZPresetTourOperation__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourOperation__*>(p->ptr), tt__PTZPresetTourOperation__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourOperation__*>(p->ptr), tt__PTZPresetTourOperation__);
		break;
	case SOAP_TYPE_tt__AutoFocusMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AutoFocusMode__*>(p->ptr), tt__AutoFocusMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AutoFocusMode__*>(p->ptr), tt__AutoFocusMode__);
		break;
	case SOAP_TYPE_tt__WideDynamicMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WideDynamicMode__*>(p->ptr), tt__WideDynamicMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WideDynamicMode__*>(p->ptr), tt__WideDynamicMode__);
		break;
	case SOAP_TYPE_tt__BacklightCompensationMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__BacklightCompensationMode__*>(p->ptr), tt__BacklightCompensationMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__BacklightCompensationMode__*>(p->ptr), tt__BacklightCompensationMode__);
		break;
	case SOAP_TYPE_tt__ExposurePriority__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ExposurePriority__*>(p->ptr), tt__ExposurePriority__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ExposurePriority__*>(p->ptr), tt__ExposurePriority__);
		break;
	case SOAP_TYPE_tt__ExposureMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ExposureMode__*>(p->ptr), tt__ExposureMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ExposureMode__*>(p->ptr), tt__ExposureMode__);
		break;
	case SOAP_TYPE_tt__Enabled__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Enabled__*>(p->ptr), tt__Enabled__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Enabled__*>(p->ptr), tt__Enabled__);
		break;
	case SOAP_TYPE_tt__WhiteBalanceMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WhiteBalanceMode__*>(p->ptr), tt__WhiteBalanceMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WhiteBalanceMode__*>(p->ptr), tt__WhiteBalanceMode__);
		break;
	case SOAP_TYPE_tt__IrCutFilterMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IrCutFilterMode__*>(p->ptr), tt__IrCutFilterMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IrCutFilterMode__*>(p->ptr), tt__IrCutFilterMode__);
		break;
	case SOAP_TYPE_tt__ImageStabilizationMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImageStabilizationMode__*>(p->ptr), tt__ImageStabilizationMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImageStabilizationMode__*>(p->ptr), tt__ImageStabilizationMode__);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IrCutFilterAutoBoundaryType__*>(p->ptr), tt__IrCutFilterAutoBoundaryType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IrCutFilterAutoBoundaryType__*>(p->ptr), tt__IrCutFilterAutoBoundaryType__);
		break;
	case SOAP_TYPE_tt__ToneCompensationMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ToneCompensationMode__*>(p->ptr), tt__ToneCompensationMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ToneCompensationMode__*>(p->ptr), tt__ToneCompensationMode__);
		break;
	case SOAP_TYPE_tt__DefoggingMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DefoggingMode__*>(p->ptr), tt__DefoggingMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DefoggingMode__*>(p->ptr), tt__DefoggingMode__);
		break;
	case SOAP_TYPE_tt__TopicNamespaceLocation__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TopicNamespaceLocation__*>(p->ptr), tt__TopicNamespaceLocation__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TopicNamespaceLocation__*>(p->ptr), tt__TopicNamespaceLocation__);
		break;
	case SOAP_TYPE_tt__PropertyOperation__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PropertyOperation__*>(p->ptr), tt__PropertyOperation__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PropertyOperation__*>(p->ptr), tt__PropertyOperation__);
		break;
	case SOAP_TYPE_tt__Direction__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Direction__*>(p->ptr), tt__Direction__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Direction__*>(p->ptr), tt__Direction__);
		break;
	case SOAP_TYPE_tt__ReceiverMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReceiverMode__*>(p->ptr), tt__ReceiverMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReceiverMode__*>(p->ptr), tt__ReceiverMode__);
		break;
	case SOAP_TYPE_tt__ReceiverState__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReceiverState__*>(p->ptr), tt__ReceiverState__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReceiverState__*>(p->ptr), tt__ReceiverState__);
		break;
	case SOAP_TYPE_tt__Description__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Description__*>(p->ptr), tt__Description__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Description__*>(p->ptr), tt__Description__);
		break;
	case SOAP_TYPE_tt__XPathExpression__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__XPathExpression__*>(p->ptr), tt__XPathExpression__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__XPathExpression__*>(p->ptr), tt__XPathExpression__);
		break;
	case SOAP_TYPE_tt__SearchState__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SearchState__*>(p->ptr), tt__SearchState__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SearchState__*>(p->ptr), tt__SearchState__);
		break;
	case SOAP_TYPE_tt__RecordingStatus__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingStatus__*>(p->ptr), tt__RecordingStatus__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingStatus__*>(p->ptr), tt__RecordingStatus__);
		break;
	case SOAP_TYPE_tt__TrackType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TrackType__*>(p->ptr), tt__TrackType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TrackType__*>(p->ptr), tt__TrackType__);
		break;
	case SOAP_TYPE_tt__RecordingJobMode__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobMode__*>(p->ptr), tt__RecordingJobMode__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobMode__*>(p->ptr), tt__RecordingJobMode__);
		break;
	case SOAP_TYPE_tt__RecordingJobState__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobState__*>(p->ptr), tt__RecordingJobState__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobState__*>(p->ptr), tt__RecordingJobState__);
		break;
	case SOAP_TYPE_tt__ModeOfOperation__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ModeOfOperation__*>(p->ptr), tt__ModeOfOperation__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ModeOfOperation__*>(p->ptr), tt__ModeOfOperation__);
		break;
	case SOAP_TYPE_tt__AudioClassType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioClassType__*>(p->ptr), tt__AudioClassType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioClassType__*>(p->ptr), tt__AudioClassType__);
		break;
	case SOAP_TYPE_tt__OSDType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDType__*>(p->ptr), tt__OSDType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDType__*>(p->ptr), tt__OSDType__);
		break;
	case SOAP_TYPE_tt__ReferenceToken__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReferenceToken__*>(p->ptr), tt__ReferenceToken__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReferenceToken__*>(p->ptr), tt__ReferenceToken__);
		break;
	case SOAP_TYPE_tt__MoveStatus__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MoveStatus__*>(p->ptr), tt__MoveStatus__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MoveStatus__*>(p->ptr), tt__MoveStatus__);
		break;
	case SOAP_TYPE_tt__Entity__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Entity__*>(p->ptr), tt__Entity__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Entity__*>(p->ptr), tt__Entity__);
		break;
	case SOAP_TYPE_wstop__FullTopicExpression__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__FullTopicExpression__*>(p->ptr), wstop__FullTopicExpression__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__FullTopicExpression__*>(p->ptr), wstop__FullTopicExpression__);
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__ConcreteTopicExpression__*>(p->ptr), wstop__ConcreteTopicExpression__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__ConcreteTopicExpression__*>(p->ptr), wstop__ConcreteTopicExpression__);
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__SimpleTopicExpression__*>(p->ptr), wstop__SimpleTopicExpression__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__SimpleTopicExpression__*>(p->ptr), wstop__SimpleTopicExpression__);
		break;
	case SOAP_TYPE_wsd__RelationshipType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__RelationshipType__*>(p->ptr), wsd__RelationshipType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__RelationshipType__*>(p->ptr), wsd__RelationshipType__);
		break;
	case SOAP_TYPE_wsd__FaultCodeType__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__FaultCodeType__*>(p->ptr), wsd__FaultCodeType__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__FaultCodeType__*>(p->ptr), wsd__FaultCodeType__);
		break;
	case SOAP_TYPE_wsa__RelationshipTypeValues__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__RelationshipTypeValues__*>(p->ptr), wsa__RelationshipTypeValues__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__RelationshipTypeValues__*>(p->ptr), wsa__RelationshipTypeValues__);
		break;
	case SOAP_TYPE_wsa__FaultSubcodeValues__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__FaultSubcodeValues__*>(p->ptr), wsa__FaultSubcodeValues__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__FaultSubcodeValues__*>(p->ptr), wsa__FaultSubcodeValues__);
		break;
	case SOAP_TYPE_tt__ReceiverReference__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReceiverReference__*>(p->ptr), tt__ReceiverReference__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReceiverReference__*>(p->ptr), tt__ReceiverReference__);
		break;
	case SOAP_TYPE_tt__RecordingReference__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingReference__*>(p->ptr), tt__RecordingReference__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingReference__*>(p->ptr), tt__RecordingReference__);
		break;
	case SOAP_TYPE_tt__TrackReference__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TrackReference__*>(p->ptr), tt__TrackReference__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TrackReference__*>(p->ptr), tt__TrackReference__);
		break;
	case SOAP_TYPE_tt__JobToken__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__JobToken__*>(p->ptr), tt__JobToken__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__JobToken__*>(p->ptr), tt__JobToken__);
		break;
	case SOAP_TYPE_tt__RecordingJobReference__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobReference__*>(p->ptr), tt__RecordingJobReference__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobReference__*>(p->ptr), tt__RecordingJobReference__);
		break;
	case SOAP_TYPE__tds__Service_Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__Service_Capabilities*>(p->ptr), _tds__Service_Capabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__Service_Capabilities*>(p->ptr), _tds__Service_Capabilities);
		break;
	case SOAP_TYPE_tds__Service:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__Service*>(p->ptr), tds__Service);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__Service*>(p->ptr), tds__Service);
		break;
	case SOAP_TYPE_tds__DeviceServiceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__DeviceServiceCapabilities*>(p->ptr), tds__DeviceServiceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__DeviceServiceCapabilities*>(p->ptr), tds__DeviceServiceCapabilities);
		break;
	case SOAP_TYPE_tds__NetworkCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__NetworkCapabilities*>(p->ptr), tds__NetworkCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__NetworkCapabilities*>(p->ptr), tds__NetworkCapabilities);
		break;
	case SOAP_TYPE_tds__SecurityCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__SecurityCapabilities*>(p->ptr), tds__SecurityCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__SecurityCapabilities*>(p->ptr), tds__SecurityCapabilities);
		break;
	case SOAP_TYPE_tds__SystemCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__SystemCapabilities*>(p->ptr), tds__SystemCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__SystemCapabilities*>(p->ptr), tds__SystemCapabilities);
		break;
	case SOAP_TYPE_tds__MiscCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__MiscCapabilities*>(p->ptr), tds__MiscCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__MiscCapabilities*>(p->ptr), tds__MiscCapabilities);
		break;
	case SOAP_TYPE__tds__UserCredential_Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__UserCredential_Extension*>(p->ptr), _tds__UserCredential_Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__UserCredential_Extension*>(p->ptr), _tds__UserCredential_Extension);
		break;
	case SOAP_TYPE_tds__UserCredential:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__UserCredential*>(p->ptr), tds__UserCredential);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__UserCredential*>(p->ptr), tds__UserCredential);
		break;
	case SOAP_TYPE__tds__StorageConfigurationData_Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__StorageConfigurationData_Extension*>(p->ptr), _tds__StorageConfigurationData_Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__StorageConfigurationData_Extension*>(p->ptr), _tds__StorageConfigurationData_Extension);
		break;
	case SOAP_TYPE_tds__StorageConfigurationData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__StorageConfigurationData*>(p->ptr), tds__StorageConfigurationData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__StorageConfigurationData*>(p->ptr), tds__StorageConfigurationData);
		break;
	case SOAP_TYPE__tds__GetServices:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetServices*>(p->ptr), _tds__GetServices);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetServices*>(p->ptr), _tds__GetServices);
		break;
	case SOAP_TYPE__tds__GetServicesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetServicesResponse*>(p->ptr), _tds__GetServicesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetServicesResponse*>(p->ptr), _tds__GetServicesResponse);
		break;
	case SOAP_TYPE__tds__GetServiceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetServiceCapabilities*>(p->ptr), _tds__GetServiceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetServiceCapabilities*>(p->ptr), _tds__GetServiceCapabilities);
		break;
	case SOAP_TYPE__tds__GetServiceCapabilitiesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetServiceCapabilitiesResponse*>(p->ptr), _tds__GetServiceCapabilitiesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetServiceCapabilitiesResponse*>(p->ptr), _tds__GetServiceCapabilitiesResponse);
		break;
	case SOAP_TYPE__tds__GetDeviceInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDeviceInformation*>(p->ptr), _tds__GetDeviceInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDeviceInformation*>(p->ptr), _tds__GetDeviceInformation);
		break;
	case SOAP_TYPE__tds__GetDeviceInformationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDeviceInformationResponse*>(p->ptr), _tds__GetDeviceInformationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDeviceInformationResponse*>(p->ptr), _tds__GetDeviceInformationResponse);
		break;
	case SOAP_TYPE__tds__SetSystemDateAndTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetSystemDateAndTime*>(p->ptr), _tds__SetSystemDateAndTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetSystemDateAndTime*>(p->ptr), _tds__SetSystemDateAndTime);
		break;
	case SOAP_TYPE__tds__SetSystemDateAndTimeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetSystemDateAndTimeResponse*>(p->ptr), _tds__SetSystemDateAndTimeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetSystemDateAndTimeResponse*>(p->ptr), _tds__SetSystemDateAndTimeResponse);
		break;
	case SOAP_TYPE__tds__GetSystemDateAndTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemDateAndTime*>(p->ptr), _tds__GetSystemDateAndTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemDateAndTime*>(p->ptr), _tds__GetSystemDateAndTime);
		break;
	case SOAP_TYPE__tds__GetSystemDateAndTimeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemDateAndTimeResponse*>(p->ptr), _tds__GetSystemDateAndTimeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemDateAndTimeResponse*>(p->ptr), _tds__GetSystemDateAndTimeResponse);
		break;
	case SOAP_TYPE__tds__SetSystemFactoryDefault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetSystemFactoryDefault*>(p->ptr), _tds__SetSystemFactoryDefault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetSystemFactoryDefault*>(p->ptr), _tds__SetSystemFactoryDefault);
		break;
	case SOAP_TYPE__tds__SetSystemFactoryDefaultResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetSystemFactoryDefaultResponse*>(p->ptr), _tds__SetSystemFactoryDefaultResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetSystemFactoryDefaultResponse*>(p->ptr), _tds__SetSystemFactoryDefaultResponse);
		break;
	case SOAP_TYPE__tds__UpgradeSystemFirmware:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__UpgradeSystemFirmware*>(p->ptr), _tds__UpgradeSystemFirmware);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__UpgradeSystemFirmware*>(p->ptr), _tds__UpgradeSystemFirmware);
		break;
	case SOAP_TYPE__tds__UpgradeSystemFirmwareResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__UpgradeSystemFirmwareResponse*>(p->ptr), _tds__UpgradeSystemFirmwareResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__UpgradeSystemFirmwareResponse*>(p->ptr), _tds__UpgradeSystemFirmwareResponse);
		break;
	case SOAP_TYPE__tds__SystemReboot:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SystemReboot*>(p->ptr), _tds__SystemReboot);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SystemReboot*>(p->ptr), _tds__SystemReboot);
		break;
	case SOAP_TYPE__tds__SystemRebootResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SystemRebootResponse*>(p->ptr), _tds__SystemRebootResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SystemRebootResponse*>(p->ptr), _tds__SystemRebootResponse);
		break;
	case SOAP_TYPE__tds__RestoreSystem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__RestoreSystem*>(p->ptr), _tds__RestoreSystem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__RestoreSystem*>(p->ptr), _tds__RestoreSystem);
		break;
	case SOAP_TYPE__tds__RestoreSystemResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__RestoreSystemResponse*>(p->ptr), _tds__RestoreSystemResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__RestoreSystemResponse*>(p->ptr), _tds__RestoreSystemResponse);
		break;
	case SOAP_TYPE__tds__GetSystemBackup:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemBackup*>(p->ptr), _tds__GetSystemBackup);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemBackup*>(p->ptr), _tds__GetSystemBackup);
		break;
	case SOAP_TYPE__tds__GetSystemBackupResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemBackupResponse*>(p->ptr), _tds__GetSystemBackupResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemBackupResponse*>(p->ptr), _tds__GetSystemBackupResponse);
		break;
	case SOAP_TYPE__tds__GetSystemSupportInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemSupportInformation*>(p->ptr), _tds__GetSystemSupportInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemSupportInformation*>(p->ptr), _tds__GetSystemSupportInformation);
		break;
	case SOAP_TYPE__tds__GetSystemSupportInformationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemSupportInformationResponse*>(p->ptr), _tds__GetSystemSupportInformationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemSupportInformationResponse*>(p->ptr), _tds__GetSystemSupportInformationResponse);
		break;
	case SOAP_TYPE__tds__GetSystemLog:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemLog*>(p->ptr), _tds__GetSystemLog);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemLog*>(p->ptr), _tds__GetSystemLog);
		break;
	case SOAP_TYPE__tds__GetSystemLogResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemLogResponse*>(p->ptr), _tds__GetSystemLogResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemLogResponse*>(p->ptr), _tds__GetSystemLogResponse);
		break;
	case SOAP_TYPE__tds__GetScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetScopes*>(p->ptr), _tds__GetScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetScopes*>(p->ptr), _tds__GetScopes);
		break;
	case SOAP_TYPE__tds__GetScopesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetScopesResponse*>(p->ptr), _tds__GetScopesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetScopesResponse*>(p->ptr), _tds__GetScopesResponse);
		break;
	case SOAP_TYPE__tds__SetScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetScopes*>(p->ptr), _tds__SetScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetScopes*>(p->ptr), _tds__SetScopes);
		break;
	case SOAP_TYPE__tds__SetScopesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetScopesResponse*>(p->ptr), _tds__SetScopesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetScopesResponse*>(p->ptr), _tds__SetScopesResponse);
		break;
	case SOAP_TYPE__tds__AddScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__AddScopes*>(p->ptr), _tds__AddScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__AddScopes*>(p->ptr), _tds__AddScopes);
		break;
	case SOAP_TYPE__tds__AddScopesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__AddScopesResponse*>(p->ptr), _tds__AddScopesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__AddScopesResponse*>(p->ptr), _tds__AddScopesResponse);
		break;
	case SOAP_TYPE__tds__RemoveScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__RemoveScopes*>(p->ptr), _tds__RemoveScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__RemoveScopes*>(p->ptr), _tds__RemoveScopes);
		break;
	case SOAP_TYPE__tds__RemoveScopesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__RemoveScopesResponse*>(p->ptr), _tds__RemoveScopesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__RemoveScopesResponse*>(p->ptr), _tds__RemoveScopesResponse);
		break;
	case SOAP_TYPE__tds__GetDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDiscoveryMode*>(p->ptr), _tds__GetDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDiscoveryMode*>(p->ptr), _tds__GetDiscoveryMode);
		break;
	case SOAP_TYPE__tds__GetDiscoveryModeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDiscoveryModeResponse*>(p->ptr), _tds__GetDiscoveryModeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDiscoveryModeResponse*>(p->ptr), _tds__GetDiscoveryModeResponse);
		break;
	case SOAP_TYPE__tds__SetDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDiscoveryMode*>(p->ptr), _tds__SetDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDiscoveryMode*>(p->ptr), _tds__SetDiscoveryMode);
		break;
	case SOAP_TYPE__tds__SetDiscoveryModeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDiscoveryModeResponse*>(p->ptr), _tds__SetDiscoveryModeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDiscoveryModeResponse*>(p->ptr), _tds__SetDiscoveryModeResponse);
		break;
	case SOAP_TYPE__tds__GetRemoteDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetRemoteDiscoveryMode*>(p->ptr), _tds__GetRemoteDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetRemoteDiscoveryMode*>(p->ptr), _tds__GetRemoteDiscoveryMode);
		break;
	case SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetRemoteDiscoveryModeResponse*>(p->ptr), _tds__GetRemoteDiscoveryModeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetRemoteDiscoveryModeResponse*>(p->ptr), _tds__GetRemoteDiscoveryModeResponse);
		break;
	case SOAP_TYPE__tds__SetRemoteDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRemoteDiscoveryMode*>(p->ptr), _tds__SetRemoteDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRemoteDiscoveryMode*>(p->ptr), _tds__SetRemoteDiscoveryMode);
		break;
	case SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRemoteDiscoveryModeResponse*>(p->ptr), _tds__SetRemoteDiscoveryModeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRemoteDiscoveryModeResponse*>(p->ptr), _tds__SetRemoteDiscoveryModeResponse);
		break;
	case SOAP_TYPE__tds__GetDPAddresses:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDPAddresses*>(p->ptr), _tds__GetDPAddresses);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDPAddresses*>(p->ptr), _tds__GetDPAddresses);
		break;
	case SOAP_TYPE__tds__GetDPAddressesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDPAddressesResponse*>(p->ptr), _tds__GetDPAddressesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDPAddressesResponse*>(p->ptr), _tds__GetDPAddressesResponse);
		break;
	case SOAP_TYPE__tds__SetDPAddresses:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDPAddresses*>(p->ptr), _tds__SetDPAddresses);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDPAddresses*>(p->ptr), _tds__SetDPAddresses);
		break;
	case SOAP_TYPE__tds__SetDPAddressesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDPAddressesResponse*>(p->ptr), _tds__SetDPAddressesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDPAddressesResponse*>(p->ptr), _tds__SetDPAddressesResponse);
		break;
	case SOAP_TYPE__tds__GetEndpointReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetEndpointReference*>(p->ptr), _tds__GetEndpointReference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetEndpointReference*>(p->ptr), _tds__GetEndpointReference);
		break;
	case SOAP_TYPE__tds__GetEndpointReferenceResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetEndpointReferenceResponse*>(p->ptr), _tds__GetEndpointReferenceResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetEndpointReferenceResponse*>(p->ptr), _tds__GetEndpointReferenceResponse);
		break;
	case SOAP_TYPE__tds__GetRemoteUser:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetRemoteUser*>(p->ptr), _tds__GetRemoteUser);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetRemoteUser*>(p->ptr), _tds__GetRemoteUser);
		break;
	case SOAP_TYPE__tds__GetRemoteUserResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetRemoteUserResponse*>(p->ptr), _tds__GetRemoteUserResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetRemoteUserResponse*>(p->ptr), _tds__GetRemoteUserResponse);
		break;
	case SOAP_TYPE__tds__SetRemoteUser:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRemoteUser*>(p->ptr), _tds__SetRemoteUser);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRemoteUser*>(p->ptr), _tds__SetRemoteUser);
		break;
	case SOAP_TYPE__tds__SetRemoteUserResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRemoteUserResponse*>(p->ptr), _tds__SetRemoteUserResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRemoteUserResponse*>(p->ptr), _tds__SetRemoteUserResponse);
		break;
	case SOAP_TYPE__tds__GetUsers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetUsers*>(p->ptr), _tds__GetUsers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetUsers*>(p->ptr), _tds__GetUsers);
		break;
	case SOAP_TYPE__tds__GetUsersResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetUsersResponse*>(p->ptr), _tds__GetUsersResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetUsersResponse*>(p->ptr), _tds__GetUsersResponse);
		break;
	case SOAP_TYPE__tds__CreateUsers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateUsers*>(p->ptr), _tds__CreateUsers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateUsers*>(p->ptr), _tds__CreateUsers);
		break;
	case SOAP_TYPE__tds__CreateUsersResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateUsersResponse*>(p->ptr), _tds__CreateUsersResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateUsersResponse*>(p->ptr), _tds__CreateUsersResponse);
		break;
	case SOAP_TYPE__tds__DeleteUsers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteUsers*>(p->ptr), _tds__DeleteUsers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteUsers*>(p->ptr), _tds__DeleteUsers);
		break;
	case SOAP_TYPE__tds__DeleteUsersResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteUsersResponse*>(p->ptr), _tds__DeleteUsersResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteUsersResponse*>(p->ptr), _tds__DeleteUsersResponse);
		break;
	case SOAP_TYPE__tds__SetUser:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetUser*>(p->ptr), _tds__SetUser);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetUser*>(p->ptr), _tds__SetUser);
		break;
	case SOAP_TYPE__tds__SetUserResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetUserResponse*>(p->ptr), _tds__SetUserResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetUserResponse*>(p->ptr), _tds__SetUserResponse);
		break;
	case SOAP_TYPE__tds__GetWsdlUrl:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetWsdlUrl*>(p->ptr), _tds__GetWsdlUrl);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetWsdlUrl*>(p->ptr), _tds__GetWsdlUrl);
		break;
	case SOAP_TYPE__tds__GetWsdlUrlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetWsdlUrlResponse*>(p->ptr), _tds__GetWsdlUrlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetWsdlUrlResponse*>(p->ptr), _tds__GetWsdlUrlResponse);
		break;
	case SOAP_TYPE__tds__GetCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCapabilities*>(p->ptr), _tds__GetCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCapabilities*>(p->ptr), _tds__GetCapabilities);
		break;
	case SOAP_TYPE__tds__GetCapabilitiesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCapabilitiesResponse*>(p->ptr), _tds__GetCapabilitiesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCapabilitiesResponse*>(p->ptr), _tds__GetCapabilitiesResponse);
		break;
	case SOAP_TYPE__tds__GetHostname:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetHostname*>(p->ptr), _tds__GetHostname);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetHostname*>(p->ptr), _tds__GetHostname);
		break;
	case SOAP_TYPE__tds__GetHostnameResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetHostnameResponse*>(p->ptr), _tds__GetHostnameResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetHostnameResponse*>(p->ptr), _tds__GetHostnameResponse);
		break;
	case SOAP_TYPE__tds__SetHostname:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetHostname*>(p->ptr), _tds__SetHostname);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetHostname*>(p->ptr), _tds__SetHostname);
		break;
	case SOAP_TYPE__tds__SetHostnameResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetHostnameResponse*>(p->ptr), _tds__SetHostnameResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetHostnameResponse*>(p->ptr), _tds__SetHostnameResponse);
		break;
	case SOAP_TYPE__tds__SetHostnameFromDHCP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetHostnameFromDHCP*>(p->ptr), _tds__SetHostnameFromDHCP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetHostnameFromDHCP*>(p->ptr), _tds__SetHostnameFromDHCP);
		break;
	case SOAP_TYPE__tds__SetHostnameFromDHCPResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetHostnameFromDHCPResponse*>(p->ptr), _tds__SetHostnameFromDHCPResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetHostnameFromDHCPResponse*>(p->ptr), _tds__SetHostnameFromDHCPResponse);
		break;
	case SOAP_TYPE__tds__GetDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDNS*>(p->ptr), _tds__GetDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDNS*>(p->ptr), _tds__GetDNS);
		break;
	case SOAP_TYPE__tds__GetDNSResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDNSResponse*>(p->ptr), _tds__GetDNSResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDNSResponse*>(p->ptr), _tds__GetDNSResponse);
		break;
	case SOAP_TYPE__tds__SetDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDNS*>(p->ptr), _tds__SetDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDNS*>(p->ptr), _tds__SetDNS);
		break;
	case SOAP_TYPE__tds__SetDNSResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDNSResponse*>(p->ptr), _tds__SetDNSResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDNSResponse*>(p->ptr), _tds__SetDNSResponse);
		break;
	case SOAP_TYPE__tds__GetNTP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNTP*>(p->ptr), _tds__GetNTP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNTP*>(p->ptr), _tds__GetNTP);
		break;
	case SOAP_TYPE__tds__GetNTPResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNTPResponse*>(p->ptr), _tds__GetNTPResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNTPResponse*>(p->ptr), _tds__GetNTPResponse);
		break;
	case SOAP_TYPE__tds__SetNTP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNTP*>(p->ptr), _tds__SetNTP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNTP*>(p->ptr), _tds__SetNTP);
		break;
	case SOAP_TYPE__tds__SetNTPResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNTPResponse*>(p->ptr), _tds__SetNTPResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNTPResponse*>(p->ptr), _tds__SetNTPResponse);
		break;
	case SOAP_TYPE__tds__GetDynamicDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDynamicDNS*>(p->ptr), _tds__GetDynamicDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDynamicDNS*>(p->ptr), _tds__GetDynamicDNS);
		break;
	case SOAP_TYPE__tds__GetDynamicDNSResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDynamicDNSResponse*>(p->ptr), _tds__GetDynamicDNSResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDynamicDNSResponse*>(p->ptr), _tds__GetDynamicDNSResponse);
		break;
	case SOAP_TYPE__tds__SetDynamicDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDynamicDNS*>(p->ptr), _tds__SetDynamicDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDynamicDNS*>(p->ptr), _tds__SetDynamicDNS);
		break;
	case SOAP_TYPE__tds__SetDynamicDNSResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDynamicDNSResponse*>(p->ptr), _tds__SetDynamicDNSResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDynamicDNSResponse*>(p->ptr), _tds__SetDynamicDNSResponse);
		break;
	case SOAP_TYPE__tds__GetNetworkInterfaces:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNetworkInterfaces*>(p->ptr), _tds__GetNetworkInterfaces);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNetworkInterfaces*>(p->ptr), _tds__GetNetworkInterfaces);
		break;
	case SOAP_TYPE__tds__GetNetworkInterfacesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNetworkInterfacesResponse*>(p->ptr), _tds__GetNetworkInterfacesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNetworkInterfacesResponse*>(p->ptr), _tds__GetNetworkInterfacesResponse);
		break;
	case SOAP_TYPE__tds__SetNetworkInterfaces:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNetworkInterfaces*>(p->ptr), _tds__SetNetworkInterfaces);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNetworkInterfaces*>(p->ptr), _tds__SetNetworkInterfaces);
		break;
	case SOAP_TYPE__tds__SetNetworkInterfacesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNetworkInterfacesResponse*>(p->ptr), _tds__SetNetworkInterfacesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNetworkInterfacesResponse*>(p->ptr), _tds__SetNetworkInterfacesResponse);
		break;
	case SOAP_TYPE__tds__GetNetworkProtocols:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNetworkProtocols*>(p->ptr), _tds__GetNetworkProtocols);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNetworkProtocols*>(p->ptr), _tds__GetNetworkProtocols);
		break;
	case SOAP_TYPE__tds__GetNetworkProtocolsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNetworkProtocolsResponse*>(p->ptr), _tds__GetNetworkProtocolsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNetworkProtocolsResponse*>(p->ptr), _tds__GetNetworkProtocolsResponse);
		break;
	case SOAP_TYPE__tds__SetNetworkProtocols:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNetworkProtocols*>(p->ptr), _tds__SetNetworkProtocols);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNetworkProtocols*>(p->ptr), _tds__SetNetworkProtocols);
		break;
	case SOAP_TYPE__tds__SetNetworkProtocolsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNetworkProtocolsResponse*>(p->ptr), _tds__SetNetworkProtocolsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNetworkProtocolsResponse*>(p->ptr), _tds__SetNetworkProtocolsResponse);
		break;
	case SOAP_TYPE__tds__GetNetworkDefaultGateway:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNetworkDefaultGateway*>(p->ptr), _tds__GetNetworkDefaultGateway);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNetworkDefaultGateway*>(p->ptr), _tds__GetNetworkDefaultGateway);
		break;
	case SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetNetworkDefaultGatewayResponse*>(p->ptr), _tds__GetNetworkDefaultGatewayResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetNetworkDefaultGatewayResponse*>(p->ptr), _tds__GetNetworkDefaultGatewayResponse);
		break;
	case SOAP_TYPE__tds__SetNetworkDefaultGateway:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNetworkDefaultGateway*>(p->ptr), _tds__SetNetworkDefaultGateway);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNetworkDefaultGateway*>(p->ptr), _tds__SetNetworkDefaultGateway);
		break;
	case SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetNetworkDefaultGatewayResponse*>(p->ptr), _tds__SetNetworkDefaultGatewayResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetNetworkDefaultGatewayResponse*>(p->ptr), _tds__SetNetworkDefaultGatewayResponse);
		break;
	case SOAP_TYPE__tds__GetZeroConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetZeroConfiguration*>(p->ptr), _tds__GetZeroConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetZeroConfiguration*>(p->ptr), _tds__GetZeroConfiguration);
		break;
	case SOAP_TYPE__tds__GetZeroConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetZeroConfigurationResponse*>(p->ptr), _tds__GetZeroConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetZeroConfigurationResponse*>(p->ptr), _tds__GetZeroConfigurationResponse);
		break;
	case SOAP_TYPE__tds__SetZeroConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetZeroConfiguration*>(p->ptr), _tds__SetZeroConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetZeroConfiguration*>(p->ptr), _tds__SetZeroConfiguration);
		break;
	case SOAP_TYPE__tds__SetZeroConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetZeroConfigurationResponse*>(p->ptr), _tds__SetZeroConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetZeroConfigurationResponse*>(p->ptr), _tds__SetZeroConfigurationResponse);
		break;
	case SOAP_TYPE__tds__GetIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetIPAddressFilter*>(p->ptr), _tds__GetIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetIPAddressFilter*>(p->ptr), _tds__GetIPAddressFilter);
		break;
	case SOAP_TYPE__tds__GetIPAddressFilterResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetIPAddressFilterResponse*>(p->ptr), _tds__GetIPAddressFilterResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetIPAddressFilterResponse*>(p->ptr), _tds__GetIPAddressFilterResponse);
		break;
	case SOAP_TYPE__tds__SetIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetIPAddressFilter*>(p->ptr), _tds__SetIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetIPAddressFilter*>(p->ptr), _tds__SetIPAddressFilter);
		break;
	case SOAP_TYPE__tds__SetIPAddressFilterResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetIPAddressFilterResponse*>(p->ptr), _tds__SetIPAddressFilterResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetIPAddressFilterResponse*>(p->ptr), _tds__SetIPAddressFilterResponse);
		break;
	case SOAP_TYPE__tds__AddIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__AddIPAddressFilter*>(p->ptr), _tds__AddIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__AddIPAddressFilter*>(p->ptr), _tds__AddIPAddressFilter);
		break;
	case SOAP_TYPE__tds__AddIPAddressFilterResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__AddIPAddressFilterResponse*>(p->ptr), _tds__AddIPAddressFilterResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__AddIPAddressFilterResponse*>(p->ptr), _tds__AddIPAddressFilterResponse);
		break;
	case SOAP_TYPE__tds__RemoveIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__RemoveIPAddressFilter*>(p->ptr), _tds__RemoveIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__RemoveIPAddressFilter*>(p->ptr), _tds__RemoveIPAddressFilter);
		break;
	case SOAP_TYPE__tds__RemoveIPAddressFilterResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__RemoveIPAddressFilterResponse*>(p->ptr), _tds__RemoveIPAddressFilterResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__RemoveIPAddressFilterResponse*>(p->ptr), _tds__RemoveIPAddressFilterResponse);
		break;
	case SOAP_TYPE__tds__GetAccessPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetAccessPolicy*>(p->ptr), _tds__GetAccessPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetAccessPolicy*>(p->ptr), _tds__GetAccessPolicy);
		break;
	case SOAP_TYPE__tds__GetAccessPolicyResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetAccessPolicyResponse*>(p->ptr), _tds__GetAccessPolicyResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetAccessPolicyResponse*>(p->ptr), _tds__GetAccessPolicyResponse);
		break;
	case SOAP_TYPE__tds__SetAccessPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetAccessPolicy*>(p->ptr), _tds__SetAccessPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetAccessPolicy*>(p->ptr), _tds__SetAccessPolicy);
		break;
	case SOAP_TYPE__tds__SetAccessPolicyResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetAccessPolicyResponse*>(p->ptr), _tds__SetAccessPolicyResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetAccessPolicyResponse*>(p->ptr), _tds__SetAccessPolicyResponse);
		break;
	case SOAP_TYPE__tds__CreateCertificate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateCertificate*>(p->ptr), _tds__CreateCertificate);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateCertificate*>(p->ptr), _tds__CreateCertificate);
		break;
	case SOAP_TYPE__tds__CreateCertificateResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateCertificateResponse*>(p->ptr), _tds__CreateCertificateResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateCertificateResponse*>(p->ptr), _tds__CreateCertificateResponse);
		break;
	case SOAP_TYPE__tds__GetCertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCertificates*>(p->ptr), _tds__GetCertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCertificates*>(p->ptr), _tds__GetCertificates);
		break;
	case SOAP_TYPE__tds__GetCertificatesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCertificatesResponse*>(p->ptr), _tds__GetCertificatesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCertificatesResponse*>(p->ptr), _tds__GetCertificatesResponse);
		break;
	case SOAP_TYPE__tds__GetCertificatesStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCertificatesStatus*>(p->ptr), _tds__GetCertificatesStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCertificatesStatus*>(p->ptr), _tds__GetCertificatesStatus);
		break;
	case SOAP_TYPE__tds__GetCertificatesStatusResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCertificatesStatusResponse*>(p->ptr), _tds__GetCertificatesStatusResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCertificatesStatusResponse*>(p->ptr), _tds__GetCertificatesStatusResponse);
		break;
	case SOAP_TYPE__tds__SetCertificatesStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetCertificatesStatus*>(p->ptr), _tds__SetCertificatesStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetCertificatesStatus*>(p->ptr), _tds__SetCertificatesStatus);
		break;
	case SOAP_TYPE__tds__SetCertificatesStatusResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetCertificatesStatusResponse*>(p->ptr), _tds__SetCertificatesStatusResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetCertificatesStatusResponse*>(p->ptr), _tds__SetCertificatesStatusResponse);
		break;
	case SOAP_TYPE__tds__DeleteCertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteCertificates*>(p->ptr), _tds__DeleteCertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteCertificates*>(p->ptr), _tds__DeleteCertificates);
		break;
	case SOAP_TYPE__tds__DeleteCertificatesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteCertificatesResponse*>(p->ptr), _tds__DeleteCertificatesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteCertificatesResponse*>(p->ptr), _tds__DeleteCertificatesResponse);
		break;
	case SOAP_TYPE__tds__GetPkcs10Request:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetPkcs10Request*>(p->ptr), _tds__GetPkcs10Request);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetPkcs10Request*>(p->ptr), _tds__GetPkcs10Request);
		break;
	case SOAP_TYPE__tds__GetPkcs10RequestResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetPkcs10RequestResponse*>(p->ptr), _tds__GetPkcs10RequestResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetPkcs10RequestResponse*>(p->ptr), _tds__GetPkcs10RequestResponse);
		break;
	case SOAP_TYPE__tds__LoadCertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__LoadCertificates*>(p->ptr), _tds__LoadCertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__LoadCertificates*>(p->ptr), _tds__LoadCertificates);
		break;
	case SOAP_TYPE__tds__LoadCertificatesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__LoadCertificatesResponse*>(p->ptr), _tds__LoadCertificatesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__LoadCertificatesResponse*>(p->ptr), _tds__LoadCertificatesResponse);
		break;
	case SOAP_TYPE__tds__GetClientCertificateMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetClientCertificateMode*>(p->ptr), _tds__GetClientCertificateMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetClientCertificateMode*>(p->ptr), _tds__GetClientCertificateMode);
		break;
	case SOAP_TYPE__tds__GetClientCertificateModeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetClientCertificateModeResponse*>(p->ptr), _tds__GetClientCertificateModeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetClientCertificateModeResponse*>(p->ptr), _tds__GetClientCertificateModeResponse);
		break;
	case SOAP_TYPE__tds__SetClientCertificateMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetClientCertificateMode*>(p->ptr), _tds__SetClientCertificateMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetClientCertificateMode*>(p->ptr), _tds__SetClientCertificateMode);
		break;
	case SOAP_TYPE__tds__SetClientCertificateModeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetClientCertificateModeResponse*>(p->ptr), _tds__SetClientCertificateModeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetClientCertificateModeResponse*>(p->ptr), _tds__SetClientCertificateModeResponse);
		break;
	case SOAP_TYPE__tds__GetCACertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCACertificates*>(p->ptr), _tds__GetCACertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCACertificates*>(p->ptr), _tds__GetCACertificates);
		break;
	case SOAP_TYPE__tds__GetCACertificatesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCACertificatesResponse*>(p->ptr), _tds__GetCACertificatesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCACertificatesResponse*>(p->ptr), _tds__GetCACertificatesResponse);
		break;
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKey:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__LoadCertificateWithPrivateKey*>(p->ptr), _tds__LoadCertificateWithPrivateKey);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__LoadCertificateWithPrivateKey*>(p->ptr), _tds__LoadCertificateWithPrivateKey);
		break;
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__LoadCertificateWithPrivateKeyResponse*>(p->ptr), _tds__LoadCertificateWithPrivateKeyResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__LoadCertificateWithPrivateKeyResponse*>(p->ptr), _tds__LoadCertificateWithPrivateKeyResponse);
		break;
	case SOAP_TYPE__tds__GetCertificateInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCertificateInformation*>(p->ptr), _tds__GetCertificateInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCertificateInformation*>(p->ptr), _tds__GetCertificateInformation);
		break;
	case SOAP_TYPE__tds__GetCertificateInformationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetCertificateInformationResponse*>(p->ptr), _tds__GetCertificateInformationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetCertificateInformationResponse*>(p->ptr), _tds__GetCertificateInformationResponse);
		break;
	case SOAP_TYPE__tds__LoadCACertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__LoadCACertificates*>(p->ptr), _tds__LoadCACertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__LoadCACertificates*>(p->ptr), _tds__LoadCACertificates);
		break;
	case SOAP_TYPE__tds__LoadCACertificatesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__LoadCACertificatesResponse*>(p->ptr), _tds__LoadCACertificatesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__LoadCACertificatesResponse*>(p->ptr), _tds__LoadCACertificatesResponse);
		break;
	case SOAP_TYPE__tds__CreateDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateDot1XConfiguration*>(p->ptr), _tds__CreateDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateDot1XConfiguration*>(p->ptr), _tds__CreateDot1XConfiguration);
		break;
	case SOAP_TYPE__tds__CreateDot1XConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateDot1XConfigurationResponse*>(p->ptr), _tds__CreateDot1XConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateDot1XConfigurationResponse*>(p->ptr), _tds__CreateDot1XConfigurationResponse);
		break;
	case SOAP_TYPE__tds__SetDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDot1XConfiguration*>(p->ptr), _tds__SetDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDot1XConfiguration*>(p->ptr), _tds__SetDot1XConfiguration);
		break;
	case SOAP_TYPE__tds__SetDot1XConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetDot1XConfigurationResponse*>(p->ptr), _tds__SetDot1XConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetDot1XConfigurationResponse*>(p->ptr), _tds__SetDot1XConfigurationResponse);
		break;
	case SOAP_TYPE__tds__GetDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot1XConfiguration*>(p->ptr), _tds__GetDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot1XConfiguration*>(p->ptr), _tds__GetDot1XConfiguration);
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot1XConfigurationResponse*>(p->ptr), _tds__GetDot1XConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot1XConfigurationResponse*>(p->ptr), _tds__GetDot1XConfigurationResponse);
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurations:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot1XConfigurations*>(p->ptr), _tds__GetDot1XConfigurations);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot1XConfigurations*>(p->ptr), _tds__GetDot1XConfigurations);
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurationsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot1XConfigurationsResponse*>(p->ptr), _tds__GetDot1XConfigurationsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot1XConfigurationsResponse*>(p->ptr), _tds__GetDot1XConfigurationsResponse);
		break;
	case SOAP_TYPE__tds__DeleteDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteDot1XConfiguration*>(p->ptr), _tds__DeleteDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteDot1XConfiguration*>(p->ptr), _tds__DeleteDot1XConfiguration);
		break;
	case SOAP_TYPE__tds__DeleteDot1XConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteDot1XConfigurationResponse*>(p->ptr), _tds__DeleteDot1XConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteDot1XConfigurationResponse*>(p->ptr), _tds__DeleteDot1XConfigurationResponse);
		break;
	case SOAP_TYPE__tds__GetRelayOutputs:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetRelayOutputs*>(p->ptr), _tds__GetRelayOutputs);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetRelayOutputs*>(p->ptr), _tds__GetRelayOutputs);
		break;
	case SOAP_TYPE__tds__GetRelayOutputsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetRelayOutputsResponse*>(p->ptr), _tds__GetRelayOutputsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetRelayOutputsResponse*>(p->ptr), _tds__GetRelayOutputsResponse);
		break;
	case SOAP_TYPE__tds__SetRelayOutputSettings:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRelayOutputSettings*>(p->ptr), _tds__SetRelayOutputSettings);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRelayOutputSettings*>(p->ptr), _tds__SetRelayOutputSettings);
		break;
	case SOAP_TYPE__tds__SetRelayOutputSettingsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRelayOutputSettingsResponse*>(p->ptr), _tds__SetRelayOutputSettingsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRelayOutputSettingsResponse*>(p->ptr), _tds__SetRelayOutputSettingsResponse);
		break;
	case SOAP_TYPE__tds__SetRelayOutputState:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRelayOutputState*>(p->ptr), _tds__SetRelayOutputState);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRelayOutputState*>(p->ptr), _tds__SetRelayOutputState);
		break;
	case SOAP_TYPE__tds__SetRelayOutputStateResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetRelayOutputStateResponse*>(p->ptr), _tds__SetRelayOutputStateResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetRelayOutputStateResponse*>(p->ptr), _tds__SetRelayOutputStateResponse);
		break;
	case SOAP_TYPE__tds__SendAuxiliaryCommand:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SendAuxiliaryCommand*>(p->ptr), _tds__SendAuxiliaryCommand);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SendAuxiliaryCommand*>(p->ptr), _tds__SendAuxiliaryCommand);
		break;
	case SOAP_TYPE__tds__SendAuxiliaryCommandResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SendAuxiliaryCommandResponse*>(p->ptr), _tds__SendAuxiliaryCommandResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SendAuxiliaryCommandResponse*>(p->ptr), _tds__SendAuxiliaryCommandResponse);
		break;
	case SOAP_TYPE__tds__GetDot11Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot11Capabilities*>(p->ptr), _tds__GetDot11Capabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot11Capabilities*>(p->ptr), _tds__GetDot11Capabilities);
		break;
	case SOAP_TYPE__tds__GetDot11CapabilitiesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot11CapabilitiesResponse*>(p->ptr), _tds__GetDot11CapabilitiesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot11CapabilitiesResponse*>(p->ptr), _tds__GetDot11CapabilitiesResponse);
		break;
	case SOAP_TYPE__tds__GetDot11Status:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot11Status*>(p->ptr), _tds__GetDot11Status);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot11Status*>(p->ptr), _tds__GetDot11Status);
		break;
	case SOAP_TYPE__tds__GetDot11StatusResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetDot11StatusResponse*>(p->ptr), _tds__GetDot11StatusResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetDot11StatusResponse*>(p->ptr), _tds__GetDot11StatusResponse);
		break;
	case SOAP_TYPE__tds__ScanAvailableDot11Networks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__ScanAvailableDot11Networks*>(p->ptr), _tds__ScanAvailableDot11Networks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__ScanAvailableDot11Networks*>(p->ptr), _tds__ScanAvailableDot11Networks);
		break;
	case SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__ScanAvailableDot11NetworksResponse*>(p->ptr), _tds__ScanAvailableDot11NetworksResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__ScanAvailableDot11NetworksResponse*>(p->ptr), _tds__ScanAvailableDot11NetworksResponse);
		break;
	case SOAP_TYPE__tds__GetSystemUris:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemUris*>(p->ptr), _tds__GetSystemUris);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemUris*>(p->ptr), _tds__GetSystemUris);
		break;
	case SOAP_TYPE__tds__GetSystemUrisResponse_Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemUrisResponse_Extension*>(p->ptr), _tds__GetSystemUrisResponse_Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemUrisResponse_Extension*>(p->ptr), _tds__GetSystemUrisResponse_Extension);
		break;
	case SOAP_TYPE__tds__GetSystemUrisResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetSystemUrisResponse*>(p->ptr), _tds__GetSystemUrisResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetSystemUrisResponse*>(p->ptr), _tds__GetSystemUrisResponse);
		break;
	case SOAP_TYPE__tds__StartFirmwareUpgrade:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__StartFirmwareUpgrade*>(p->ptr), _tds__StartFirmwareUpgrade);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__StartFirmwareUpgrade*>(p->ptr), _tds__StartFirmwareUpgrade);
		break;
	case SOAP_TYPE__tds__StartFirmwareUpgradeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__StartFirmwareUpgradeResponse*>(p->ptr), _tds__StartFirmwareUpgradeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__StartFirmwareUpgradeResponse*>(p->ptr), _tds__StartFirmwareUpgradeResponse);
		break;
	case SOAP_TYPE__tds__StartSystemRestore:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__StartSystemRestore*>(p->ptr), _tds__StartSystemRestore);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__StartSystemRestore*>(p->ptr), _tds__StartSystemRestore);
		break;
	case SOAP_TYPE__tds__StartSystemRestoreResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__StartSystemRestoreResponse*>(p->ptr), _tds__StartSystemRestoreResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__StartSystemRestoreResponse*>(p->ptr), _tds__StartSystemRestoreResponse);
		break;
	case SOAP_TYPE__tds__GetStorageConfigurations:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetStorageConfigurations*>(p->ptr), _tds__GetStorageConfigurations);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetStorageConfigurations*>(p->ptr), _tds__GetStorageConfigurations);
		break;
	case SOAP_TYPE__tds__GetStorageConfigurationsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetStorageConfigurationsResponse*>(p->ptr), _tds__GetStorageConfigurationsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetStorageConfigurationsResponse*>(p->ptr), _tds__GetStorageConfigurationsResponse);
		break;
	case SOAP_TYPE__tds__CreateStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateStorageConfiguration*>(p->ptr), _tds__CreateStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateStorageConfiguration*>(p->ptr), _tds__CreateStorageConfiguration);
		break;
	case SOAP_TYPE__tds__CreateStorageConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__CreateStorageConfigurationResponse*>(p->ptr), _tds__CreateStorageConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__CreateStorageConfigurationResponse*>(p->ptr), _tds__CreateStorageConfigurationResponse);
		break;
	case SOAP_TYPE__tds__GetStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetStorageConfiguration*>(p->ptr), _tds__GetStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetStorageConfiguration*>(p->ptr), _tds__GetStorageConfiguration);
		break;
	case SOAP_TYPE__tds__GetStorageConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetStorageConfigurationResponse*>(p->ptr), _tds__GetStorageConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetStorageConfigurationResponse*>(p->ptr), _tds__GetStorageConfigurationResponse);
		break;
	case SOAP_TYPE__tds__SetStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetStorageConfiguration*>(p->ptr), _tds__SetStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetStorageConfiguration*>(p->ptr), _tds__SetStorageConfiguration);
		break;
	case SOAP_TYPE__tds__SetStorageConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetStorageConfigurationResponse*>(p->ptr), _tds__SetStorageConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetStorageConfigurationResponse*>(p->ptr), _tds__SetStorageConfigurationResponse);
		break;
	case SOAP_TYPE__tds__DeleteStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteStorageConfiguration*>(p->ptr), _tds__DeleteStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteStorageConfiguration*>(p->ptr), _tds__DeleteStorageConfiguration);
		break;
	case SOAP_TYPE__tds__DeleteStorageConfigurationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteStorageConfigurationResponse*>(p->ptr), _tds__DeleteStorageConfigurationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteStorageConfigurationResponse*>(p->ptr), _tds__DeleteStorageConfigurationResponse);
		break;
	case SOAP_TYPE__tds__GetGeoLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetGeoLocation*>(p->ptr), _tds__GetGeoLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetGeoLocation*>(p->ptr), _tds__GetGeoLocation);
		break;
	case SOAP_TYPE__tds__GetGeoLocationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__GetGeoLocationResponse*>(p->ptr), _tds__GetGeoLocationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__GetGeoLocationResponse*>(p->ptr), _tds__GetGeoLocationResponse);
		break;
	case SOAP_TYPE__tds__SetGeoLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetGeoLocation*>(p->ptr), _tds__SetGeoLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetGeoLocation*>(p->ptr), _tds__SetGeoLocation);
		break;
	case SOAP_TYPE__tds__SetGeoLocationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__SetGeoLocationResponse*>(p->ptr), _tds__SetGeoLocationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__SetGeoLocationResponse*>(p->ptr), _tds__SetGeoLocationResponse);
		break;
	case SOAP_TYPE__tds__DeleteGeoLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteGeoLocation*>(p->ptr), _tds__DeleteGeoLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteGeoLocation*>(p->ptr), _tds__DeleteGeoLocation);
		break;
	case SOAP_TYPE__tds__DeleteGeoLocationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tds__DeleteGeoLocationResponse*>(p->ptr), _tds__DeleteGeoLocationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tds__DeleteGeoLocationResponse*>(p->ptr), _tds__DeleteGeoLocationResponse);
		break;
	case SOAP_TYPE_tt__DeviceEntity:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DeviceEntity*>(p->ptr), tt__DeviceEntity);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DeviceEntity*>(p->ptr), tt__DeviceEntity);
		break;
	case SOAP_TYPE_tt__IntRectangle:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IntRectangle*>(p->ptr), tt__IntRectangle);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IntRectangle*>(p->ptr), tt__IntRectangle);
		break;
	case SOAP_TYPE_tt__IntRectangleRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IntRectangleRange*>(p->ptr), tt__IntRectangleRange);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IntRectangleRange*>(p->ptr), tt__IntRectangleRange);
		break;
	case SOAP_TYPE_tt__IntRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IntRange*>(p->ptr), tt__IntRange);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IntRange*>(p->ptr), tt__IntRange);
		break;
	case SOAP_TYPE_tt__FloatRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FloatRange*>(p->ptr), tt__FloatRange);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FloatRange*>(p->ptr), tt__FloatRange);
		break;
	case SOAP_TYPE_tt__DurationRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DurationRange*>(p->ptr), tt__DurationRange);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DurationRange*>(p->ptr), tt__DurationRange);
		break;
	case SOAP_TYPE_tt__IntList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IntList*>(p->ptr), tt__IntList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IntList*>(p->ptr), tt__IntList);
		break;
	case SOAP_TYPE_tt__FloatList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FloatList*>(p->ptr), tt__FloatList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FloatList*>(p->ptr), tt__FloatList);
		break;
	case SOAP_TYPE_tt__AnyHolder:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnyHolder*>(p->ptr), tt__AnyHolder);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnyHolder*>(p->ptr), tt__AnyHolder);
		break;
	case SOAP_TYPE_tt__VideoSourceExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceExtension*>(p->ptr), tt__VideoSourceExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceExtension*>(p->ptr), tt__VideoSourceExtension);
		break;
	case SOAP_TYPE_tt__VideoSourceExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceExtension2*>(p->ptr), tt__VideoSourceExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceExtension2*>(p->ptr), tt__VideoSourceExtension2);
		break;
	case SOAP_TYPE_tt__Profile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Profile*>(p->ptr), tt__Profile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Profile*>(p->ptr), tt__Profile);
		break;
	case SOAP_TYPE_tt__ProfileExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ProfileExtension*>(p->ptr), tt__ProfileExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ProfileExtension*>(p->ptr), tt__ProfileExtension);
		break;
	case SOAP_TYPE_tt__ProfileExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ProfileExtension2*>(p->ptr), tt__ProfileExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ProfileExtension2*>(p->ptr), tt__ProfileExtension2);
		break;
	case SOAP_TYPE_tt__ConfigurationEntity:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ConfigurationEntity*>(p->ptr), tt__ConfigurationEntity);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ConfigurationEntity*>(p->ptr), tt__ConfigurationEntity);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceConfigurationExtension*>(p->ptr), tt__VideoSourceConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceConfigurationExtension*>(p->ptr), tt__VideoSourceConfigurationExtension);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceConfigurationExtension2*>(p->ptr), tt__VideoSourceConfigurationExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceConfigurationExtension2*>(p->ptr), tt__VideoSourceConfigurationExtension2);
		break;
	case SOAP_TYPE_tt__Rotate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Rotate*>(p->ptr), tt__Rotate);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Rotate*>(p->ptr), tt__Rotate);
		break;
	case SOAP_TYPE_tt__RotateExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RotateExtension*>(p->ptr), tt__RotateExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RotateExtension*>(p->ptr), tt__RotateExtension);
		break;
	case SOAP_TYPE_tt__LensProjection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LensProjection*>(p->ptr), tt__LensProjection);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LensProjection*>(p->ptr), tt__LensProjection);
		break;
	case SOAP_TYPE_tt__LensOffset:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LensOffset*>(p->ptr), tt__LensOffset);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LensOffset*>(p->ptr), tt__LensOffset);
		break;
	case SOAP_TYPE_tt__LensDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LensDescription*>(p->ptr), tt__LensDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LensDescription*>(p->ptr), tt__LensDescription);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceConfigurationOptions*>(p->ptr), tt__VideoSourceConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceConfigurationOptions*>(p->ptr), tt__VideoSourceConfigurationOptions);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceConfigurationOptionsExtension*>(p->ptr), tt__VideoSourceConfigurationOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceConfigurationOptionsExtension*>(p->ptr), tt__VideoSourceConfigurationOptionsExtension);
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceConfigurationOptionsExtension2*>(p->ptr), tt__VideoSourceConfigurationOptionsExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceConfigurationOptionsExtension2*>(p->ptr), tt__VideoSourceConfigurationOptionsExtension2);
		break;
	case SOAP_TYPE_tt__RotateOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RotateOptions*>(p->ptr), tt__RotateOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RotateOptions*>(p->ptr), tt__RotateOptions);
		break;
	case SOAP_TYPE_tt__RotateOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RotateOptionsExtension*>(p->ptr), tt__RotateOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RotateOptionsExtension*>(p->ptr), tt__RotateOptionsExtension);
		break;
	case SOAP_TYPE_tt__SceneOrientation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SceneOrientation*>(p->ptr), tt__SceneOrientation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SceneOrientation*>(p->ptr), tt__SceneOrientation);
		break;
	case SOAP_TYPE_tt__VideoResolution:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoResolution*>(p->ptr), tt__VideoResolution);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoResolution*>(p->ptr), tt__VideoResolution);
		break;
	case SOAP_TYPE_tt__VideoRateControl:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoRateControl*>(p->ptr), tt__VideoRateControl);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoRateControl*>(p->ptr), tt__VideoRateControl);
		break;
	case SOAP_TYPE_tt__Mpeg4Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Mpeg4Configuration*>(p->ptr), tt__Mpeg4Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Mpeg4Configuration*>(p->ptr), tt__Mpeg4Configuration);
		break;
	case SOAP_TYPE_tt__H264Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__H264Configuration*>(p->ptr), tt__H264Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__H264Configuration*>(p->ptr), tt__H264Configuration);
		break;
	case SOAP_TYPE_tt__VideoEncoderConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoderConfigurationOptions*>(p->ptr), tt__VideoEncoderConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoderConfigurationOptions*>(p->ptr), tt__VideoEncoderConfigurationOptions);
		break;
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoderOptionsExtension*>(p->ptr), tt__VideoEncoderOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoderOptionsExtension*>(p->ptr), tt__VideoEncoderOptionsExtension);
		break;
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoderOptionsExtension2*>(p->ptr), tt__VideoEncoderOptionsExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoderOptionsExtension2*>(p->ptr), tt__VideoEncoderOptionsExtension2);
		break;
	case SOAP_TYPE_tt__JpegOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__JpegOptions*>(p->ptr), tt__JpegOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__JpegOptions*>(p->ptr), tt__JpegOptions);
		break;
	case SOAP_TYPE_tt__Mpeg4Options:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Mpeg4Options*>(p->ptr), tt__Mpeg4Options);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Mpeg4Options*>(p->ptr), tt__Mpeg4Options);
		break;
	case SOAP_TYPE_tt__H264Options:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__H264Options*>(p->ptr), tt__H264Options);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__H264Options*>(p->ptr), tt__H264Options);
		break;
	case SOAP_TYPE_tt__VideoResolution2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoResolution2*>(p->ptr), tt__VideoResolution2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoResolution2*>(p->ptr), tt__VideoResolution2);
		break;
	case SOAP_TYPE_tt__VideoRateControl2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoRateControl2*>(p->ptr), tt__VideoRateControl2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoRateControl2*>(p->ptr), tt__VideoRateControl2);
		break;
	case SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoder2ConfigurationOptions*>(p->ptr), tt__VideoEncoder2ConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoder2ConfigurationOptions*>(p->ptr), tt__VideoEncoder2ConfigurationOptions);
		break;
	case SOAP_TYPE_tt__AudioSourceConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioSourceConfigurationOptions*>(p->ptr), tt__AudioSourceConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioSourceConfigurationOptions*>(p->ptr), tt__AudioSourceConfigurationOptions);
		break;
	case SOAP_TYPE_tt__AudioSourceOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioSourceOptionsExtension*>(p->ptr), tt__AudioSourceOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioSourceOptionsExtension*>(p->ptr), tt__AudioSourceOptionsExtension);
		break;
	case SOAP_TYPE_tt__AudioEncoderConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncoderConfigurationOptions*>(p->ptr), tt__AudioEncoderConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncoderConfigurationOptions*>(p->ptr), tt__AudioEncoderConfigurationOptions);
		break;
	case SOAP_TYPE_tt__AudioEncoderConfigurationOption:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncoderConfigurationOption*>(p->ptr), tt__AudioEncoderConfigurationOption);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncoderConfigurationOption*>(p->ptr), tt__AudioEncoderConfigurationOption);
		break;
	case SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncoder2ConfigurationOptions*>(p->ptr), tt__AudioEncoder2ConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncoder2ConfigurationOptions*>(p->ptr), tt__AudioEncoder2ConfigurationOptions);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataConfigurationExtension*>(p->ptr), tt__MetadataConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataConfigurationExtension*>(p->ptr), tt__MetadataConfigurationExtension);
		break;
	case SOAP_TYPE_tt__PTZFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZFilter*>(p->ptr), tt__PTZFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZFilter*>(p->ptr), tt__PTZFilter);
		break;
	case SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tt__EventSubscription_SubscriptionPolicy*>(p->ptr), _tt__EventSubscription_SubscriptionPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tt__EventSubscription_SubscriptionPolicy*>(p->ptr), _tt__EventSubscription_SubscriptionPolicy);
		break;
	case SOAP_TYPE_tt__EventSubscription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EventSubscription*>(p->ptr), tt__EventSubscription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EventSubscription*>(p->ptr), tt__EventSubscription);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataConfigurationOptions*>(p->ptr), tt__MetadataConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataConfigurationOptions*>(p->ptr), tt__MetadataConfigurationOptions);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataConfigurationOptionsExtension*>(p->ptr), tt__MetadataConfigurationOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataConfigurationOptionsExtension*>(p->ptr), tt__MetadataConfigurationOptionsExtension);
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataConfigurationOptionsExtension2*>(p->ptr), tt__MetadataConfigurationOptionsExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataConfigurationOptionsExtension2*>(p->ptr), tt__MetadataConfigurationOptionsExtension2);
		break;
	case SOAP_TYPE_tt__PTZStatusFilterOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZStatusFilterOptions*>(p->ptr), tt__PTZStatusFilterOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZStatusFilterOptions*>(p->ptr), tt__PTZStatusFilterOptions);
		break;
	case SOAP_TYPE_tt__PTZStatusFilterOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZStatusFilterOptionsExtension*>(p->ptr), tt__PTZStatusFilterOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZStatusFilterOptionsExtension*>(p->ptr), tt__PTZStatusFilterOptionsExtension);
		break;
	case SOAP_TYPE_tt__VideoOutputExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoOutputExtension*>(p->ptr), tt__VideoOutputExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoOutputExtension*>(p->ptr), tt__VideoOutputExtension);
		break;
	case SOAP_TYPE_tt__VideoOutputConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoOutputConfigurationOptions*>(p->ptr), tt__VideoOutputConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoOutputConfigurationOptions*>(p->ptr), tt__VideoOutputConfigurationOptions);
		break;
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoDecoderConfigurationOptions*>(p->ptr), tt__VideoDecoderConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoDecoderConfigurationOptions*>(p->ptr), tt__VideoDecoderConfigurationOptions);
		break;
	case SOAP_TYPE_tt__H264DecOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__H264DecOptions*>(p->ptr), tt__H264DecOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__H264DecOptions*>(p->ptr), tt__H264DecOptions);
		break;
	case SOAP_TYPE_tt__JpegDecOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__JpegDecOptions*>(p->ptr), tt__JpegDecOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__JpegDecOptions*>(p->ptr), tt__JpegDecOptions);
		break;
	case SOAP_TYPE_tt__Mpeg4DecOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Mpeg4DecOptions*>(p->ptr), tt__Mpeg4DecOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Mpeg4DecOptions*>(p->ptr), tt__Mpeg4DecOptions);
		break;
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoDecoderConfigurationOptionsExtension*>(p->ptr), tt__VideoDecoderConfigurationOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoDecoderConfigurationOptionsExtension*>(p->ptr), tt__VideoDecoderConfigurationOptionsExtension);
		break;
	case SOAP_TYPE_tt__AudioOutputConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioOutputConfigurationOptions*>(p->ptr), tt__AudioOutputConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioOutputConfigurationOptions*>(p->ptr), tt__AudioOutputConfigurationOptions);
		break;
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioDecoderConfigurationOptions*>(p->ptr), tt__AudioDecoderConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioDecoderConfigurationOptions*>(p->ptr), tt__AudioDecoderConfigurationOptions);
		break;
	case SOAP_TYPE_tt__G711DecOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__G711DecOptions*>(p->ptr), tt__G711DecOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__G711DecOptions*>(p->ptr), tt__G711DecOptions);
		break;
	case SOAP_TYPE_tt__AACDecOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AACDecOptions*>(p->ptr), tt__AACDecOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AACDecOptions*>(p->ptr), tt__AACDecOptions);
		break;
	case SOAP_TYPE_tt__G726DecOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__G726DecOptions*>(p->ptr), tt__G726DecOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__G726DecOptions*>(p->ptr), tt__G726DecOptions);
		break;
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioDecoderConfigurationOptionsExtension*>(p->ptr), tt__AudioDecoderConfigurationOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioDecoderConfigurationOptionsExtension*>(p->ptr), tt__AudioDecoderConfigurationOptionsExtension);
		break;
	case SOAP_TYPE_tt__MulticastConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MulticastConfiguration*>(p->ptr), tt__MulticastConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MulticastConfiguration*>(p->ptr), tt__MulticastConfiguration);
		break;
	case SOAP_TYPE_tt__StreamSetup:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__StreamSetup*>(p->ptr), tt__StreamSetup);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__StreamSetup*>(p->ptr), tt__StreamSetup);
		break;
	case SOAP_TYPE_tt__Transport:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Transport*>(p->ptr), tt__Transport);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Transport*>(p->ptr), tt__Transport);
		break;
	case SOAP_TYPE_tt__MediaUri:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MediaUri*>(p->ptr), tt__MediaUri);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MediaUri*>(p->ptr), tt__MediaUri);
		break;
	case SOAP_TYPE_tt__Scope:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Scope*>(p->ptr), tt__Scope);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Scope*>(p->ptr), tt__Scope);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceExtension*>(p->ptr), tt__NetworkInterfaceExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceExtension*>(p->ptr), tt__NetworkInterfaceExtension);
		break;
	case SOAP_TYPE_tt__Dot3Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot3Configuration*>(p->ptr), tt__Dot3Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot3Configuration*>(p->ptr), tt__Dot3Configuration);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceExtension2*>(p->ptr), tt__NetworkInterfaceExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceExtension2*>(p->ptr), tt__NetworkInterfaceExtension2);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceLink:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceLink*>(p->ptr), tt__NetworkInterfaceLink);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceLink*>(p->ptr), tt__NetworkInterfaceLink);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConnectionSetting:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceConnectionSetting*>(p->ptr), tt__NetworkInterfaceConnectionSetting);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceConnectionSetting*>(p->ptr), tt__NetworkInterfaceConnectionSetting);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceInfo*>(p->ptr), tt__NetworkInterfaceInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceInfo*>(p->ptr), tt__NetworkInterfaceInfo);
		break;
	case SOAP_TYPE_tt__IPv6NetworkInterface:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv6NetworkInterface*>(p->ptr), tt__IPv6NetworkInterface);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv6NetworkInterface*>(p->ptr), tt__IPv6NetworkInterface);
		break;
	case SOAP_TYPE_tt__IPv4NetworkInterface:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv4NetworkInterface*>(p->ptr), tt__IPv4NetworkInterface);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv4NetworkInterface*>(p->ptr), tt__IPv4NetworkInterface);
		break;
	case SOAP_TYPE_tt__IPv4Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv4Configuration*>(p->ptr), tt__IPv4Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv4Configuration*>(p->ptr), tt__IPv4Configuration);
		break;
	case SOAP_TYPE_tt__IPv6Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv6Configuration*>(p->ptr), tt__IPv6Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv6Configuration*>(p->ptr), tt__IPv6Configuration);
		break;
	case SOAP_TYPE_tt__IPv6ConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv6ConfigurationExtension*>(p->ptr), tt__IPv6ConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv6ConfigurationExtension*>(p->ptr), tt__IPv6ConfigurationExtension);
		break;
	case SOAP_TYPE_tt__NetworkProtocol:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkProtocol*>(p->ptr), tt__NetworkProtocol);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkProtocol*>(p->ptr), tt__NetworkProtocol);
		break;
	case SOAP_TYPE_tt__NetworkProtocolExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkProtocolExtension*>(p->ptr), tt__NetworkProtocolExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkProtocolExtension*>(p->ptr), tt__NetworkProtocolExtension);
		break;
	case SOAP_TYPE_tt__NetworkHost:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkHost*>(p->ptr), tt__NetworkHost);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkHost*>(p->ptr), tt__NetworkHost);
		break;
	case SOAP_TYPE_tt__NetworkHostExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkHostExtension*>(p->ptr), tt__NetworkHostExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkHostExtension*>(p->ptr), tt__NetworkHostExtension);
		break;
	case SOAP_TYPE_tt__IPAddress:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPAddress*>(p->ptr), tt__IPAddress);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPAddress*>(p->ptr), tt__IPAddress);
		break;
	case SOAP_TYPE_tt__PrefixedIPv4Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PrefixedIPv4Address*>(p->ptr), tt__PrefixedIPv4Address);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PrefixedIPv4Address*>(p->ptr), tt__PrefixedIPv4Address);
		break;
	case SOAP_TYPE_tt__PrefixedIPv6Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PrefixedIPv6Address*>(p->ptr), tt__PrefixedIPv6Address);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PrefixedIPv6Address*>(p->ptr), tt__PrefixedIPv6Address);
		break;
	case SOAP_TYPE_tt__HostnameInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__HostnameInformation*>(p->ptr), tt__HostnameInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__HostnameInformation*>(p->ptr), tt__HostnameInformation);
		break;
	case SOAP_TYPE_tt__HostnameInformationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__HostnameInformationExtension*>(p->ptr), tt__HostnameInformationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__HostnameInformationExtension*>(p->ptr), tt__HostnameInformationExtension);
		break;
	case SOAP_TYPE_tt__DNSInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DNSInformation*>(p->ptr), tt__DNSInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DNSInformation*>(p->ptr), tt__DNSInformation);
		break;
	case SOAP_TYPE_tt__DNSInformationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DNSInformationExtension*>(p->ptr), tt__DNSInformationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DNSInformationExtension*>(p->ptr), tt__DNSInformationExtension);
		break;
	case SOAP_TYPE_tt__NTPInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NTPInformation*>(p->ptr), tt__NTPInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NTPInformation*>(p->ptr), tt__NTPInformation);
		break;
	case SOAP_TYPE_tt__NTPInformationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NTPInformationExtension*>(p->ptr), tt__NTPInformationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NTPInformationExtension*>(p->ptr), tt__NTPInformationExtension);
		break;
	case SOAP_TYPE_tt__DynamicDNSInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DynamicDNSInformation*>(p->ptr), tt__DynamicDNSInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DynamicDNSInformation*>(p->ptr), tt__DynamicDNSInformation);
		break;
	case SOAP_TYPE_tt__DynamicDNSInformationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DynamicDNSInformationExtension*>(p->ptr), tt__DynamicDNSInformationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DynamicDNSInformationExtension*>(p->ptr), tt__DynamicDNSInformationExtension);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceSetConfiguration*>(p->ptr), tt__NetworkInterfaceSetConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceSetConfiguration*>(p->ptr), tt__NetworkInterfaceSetConfiguration);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceSetConfigurationExtension*>(p->ptr), tt__NetworkInterfaceSetConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceSetConfigurationExtension*>(p->ptr), tt__NetworkInterfaceSetConfigurationExtension);
		break;
	case SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv6NetworkInterfaceSetConfiguration*>(p->ptr), tt__IPv6NetworkInterfaceSetConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv6NetworkInterfaceSetConfiguration*>(p->ptr), tt__IPv6NetworkInterfaceSetConfiguration);
		break;
	case SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPv4NetworkInterfaceSetConfiguration*>(p->ptr), tt__IPv4NetworkInterfaceSetConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPv4NetworkInterfaceSetConfiguration*>(p->ptr), tt__IPv4NetworkInterfaceSetConfiguration);
		break;
	case SOAP_TYPE_tt__NetworkGateway:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkGateway*>(p->ptr), tt__NetworkGateway);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkGateway*>(p->ptr), tt__NetworkGateway);
		break;
	case SOAP_TYPE_tt__NetworkZeroConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkZeroConfiguration*>(p->ptr), tt__NetworkZeroConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkZeroConfiguration*>(p->ptr), tt__NetworkZeroConfiguration);
		break;
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkZeroConfigurationExtension*>(p->ptr), tt__NetworkZeroConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkZeroConfigurationExtension*>(p->ptr), tt__NetworkZeroConfigurationExtension);
		break;
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkZeroConfigurationExtension2*>(p->ptr), tt__NetworkZeroConfigurationExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkZeroConfigurationExtension2*>(p->ptr), tt__NetworkZeroConfigurationExtension2);
		break;
	case SOAP_TYPE_tt__IPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPAddressFilter*>(p->ptr), tt__IPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPAddressFilter*>(p->ptr), tt__IPAddressFilter);
		break;
	case SOAP_TYPE_tt__IPAddressFilterExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IPAddressFilterExtension*>(p->ptr), tt__IPAddressFilterExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IPAddressFilterExtension*>(p->ptr), tt__IPAddressFilterExtension);
		break;
	case SOAP_TYPE_tt__Dot11Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11Configuration*>(p->ptr), tt__Dot11Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11Configuration*>(p->ptr), tt__Dot11Configuration);
		break;
	case SOAP_TYPE_tt__Dot11SecurityConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11SecurityConfiguration*>(p->ptr), tt__Dot11SecurityConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11SecurityConfiguration*>(p->ptr), tt__Dot11SecurityConfiguration);
		break;
	case SOAP_TYPE_tt__Dot11SecurityConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11SecurityConfigurationExtension*>(p->ptr), tt__Dot11SecurityConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11SecurityConfigurationExtension*>(p->ptr), tt__Dot11SecurityConfigurationExtension);
		break;
	case SOAP_TYPE_tt__Dot11PSKSet:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11PSKSet*>(p->ptr), tt__Dot11PSKSet);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11PSKSet*>(p->ptr), tt__Dot11PSKSet);
		break;
	case SOAP_TYPE_tt__Dot11PSKSetExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11PSKSetExtension*>(p->ptr), tt__Dot11PSKSetExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11PSKSetExtension*>(p->ptr), tt__Dot11PSKSetExtension);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterfaceSetConfigurationExtension2*>(p->ptr), tt__NetworkInterfaceSetConfigurationExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterfaceSetConfigurationExtension2*>(p->ptr), tt__NetworkInterfaceSetConfigurationExtension2);
		break;
	case SOAP_TYPE_tt__Dot11Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11Capabilities*>(p->ptr), tt__Dot11Capabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11Capabilities*>(p->ptr), tt__Dot11Capabilities);
		break;
	case SOAP_TYPE_tt__Dot11Status:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11Status*>(p->ptr), tt__Dot11Status);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11Status*>(p->ptr), tt__Dot11Status);
		break;
	case SOAP_TYPE_tt__Dot11AvailableNetworks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11AvailableNetworks*>(p->ptr), tt__Dot11AvailableNetworks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11AvailableNetworks*>(p->ptr), tt__Dot11AvailableNetworks);
		break;
	case SOAP_TYPE_tt__Dot11AvailableNetworksExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot11AvailableNetworksExtension*>(p->ptr), tt__Dot11AvailableNetworksExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot11AvailableNetworksExtension*>(p->ptr), tt__Dot11AvailableNetworksExtension);
		break;
	case SOAP_TYPE_tt__Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Capabilities*>(p->ptr), tt__Capabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Capabilities*>(p->ptr), tt__Capabilities);
		break;
	case SOAP_TYPE_tt__CapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CapabilitiesExtension*>(p->ptr), tt__CapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CapabilitiesExtension*>(p->ptr), tt__CapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__CapabilitiesExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CapabilitiesExtension2*>(p->ptr), tt__CapabilitiesExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CapabilitiesExtension2*>(p->ptr), tt__CapabilitiesExtension2);
		break;
	case SOAP_TYPE_tt__AnalyticsCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsCapabilities*>(p->ptr), tt__AnalyticsCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsCapabilities*>(p->ptr), tt__AnalyticsCapabilities);
		break;
	case SOAP_TYPE_tt__DeviceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DeviceCapabilities*>(p->ptr), tt__DeviceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DeviceCapabilities*>(p->ptr), tt__DeviceCapabilities);
		break;
	case SOAP_TYPE_tt__DeviceCapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DeviceCapabilitiesExtension*>(p->ptr), tt__DeviceCapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DeviceCapabilitiesExtension*>(p->ptr), tt__DeviceCapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__EventCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EventCapabilities*>(p->ptr), tt__EventCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EventCapabilities*>(p->ptr), tt__EventCapabilities);
		break;
	case SOAP_TYPE_tt__IOCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IOCapabilities*>(p->ptr), tt__IOCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IOCapabilities*>(p->ptr), tt__IOCapabilities);
		break;
	case SOAP_TYPE_tt__IOCapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IOCapabilitiesExtension*>(p->ptr), tt__IOCapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IOCapabilitiesExtension*>(p->ptr), tt__IOCapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__IOCapabilitiesExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IOCapabilitiesExtension2*>(p->ptr), tt__IOCapabilitiesExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IOCapabilitiesExtension2*>(p->ptr), tt__IOCapabilitiesExtension2);
		break;
	case SOAP_TYPE_tt__MediaCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MediaCapabilities*>(p->ptr), tt__MediaCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MediaCapabilities*>(p->ptr), tt__MediaCapabilities);
		break;
	case SOAP_TYPE_tt__MediaCapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MediaCapabilitiesExtension*>(p->ptr), tt__MediaCapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MediaCapabilitiesExtension*>(p->ptr), tt__MediaCapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__RealTimeStreamingCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RealTimeStreamingCapabilities*>(p->ptr), tt__RealTimeStreamingCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RealTimeStreamingCapabilities*>(p->ptr), tt__RealTimeStreamingCapabilities);
		break;
	case SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RealTimeStreamingCapabilitiesExtension*>(p->ptr), tt__RealTimeStreamingCapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RealTimeStreamingCapabilitiesExtension*>(p->ptr), tt__RealTimeStreamingCapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__ProfileCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ProfileCapabilities*>(p->ptr), tt__ProfileCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ProfileCapabilities*>(p->ptr), tt__ProfileCapabilities);
		break;
	case SOAP_TYPE_tt__NetworkCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkCapabilities*>(p->ptr), tt__NetworkCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkCapabilities*>(p->ptr), tt__NetworkCapabilities);
		break;
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkCapabilitiesExtension*>(p->ptr), tt__NetworkCapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkCapabilitiesExtension*>(p->ptr), tt__NetworkCapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkCapabilitiesExtension2*>(p->ptr), tt__NetworkCapabilitiesExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkCapabilitiesExtension2*>(p->ptr), tt__NetworkCapabilitiesExtension2);
		break;
	case SOAP_TYPE_tt__SecurityCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SecurityCapabilities*>(p->ptr), tt__SecurityCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SecurityCapabilities*>(p->ptr), tt__SecurityCapabilities);
		break;
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SecurityCapabilitiesExtension*>(p->ptr), tt__SecurityCapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SecurityCapabilitiesExtension*>(p->ptr), tt__SecurityCapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SecurityCapabilitiesExtension2*>(p->ptr), tt__SecurityCapabilitiesExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SecurityCapabilitiesExtension2*>(p->ptr), tt__SecurityCapabilitiesExtension2);
		break;
	case SOAP_TYPE_tt__SystemCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemCapabilities*>(p->ptr), tt__SystemCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemCapabilities*>(p->ptr), tt__SystemCapabilities);
		break;
	case SOAP_TYPE_tt__SystemCapabilitiesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemCapabilitiesExtension*>(p->ptr), tt__SystemCapabilitiesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemCapabilitiesExtension*>(p->ptr), tt__SystemCapabilitiesExtension);
		break;
	case SOAP_TYPE_tt__SystemCapabilitiesExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemCapabilitiesExtension2*>(p->ptr), tt__SystemCapabilitiesExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemCapabilitiesExtension2*>(p->ptr), tt__SystemCapabilitiesExtension2);
		break;
	case SOAP_TYPE_tt__OnvifVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OnvifVersion*>(p->ptr), tt__OnvifVersion);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OnvifVersion*>(p->ptr), tt__OnvifVersion);
		break;
	case SOAP_TYPE_tt__ImagingCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingCapabilities*>(p->ptr), tt__ImagingCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingCapabilities*>(p->ptr), tt__ImagingCapabilities);
		break;
	case SOAP_TYPE_tt__PTZCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZCapabilities*>(p->ptr), tt__PTZCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZCapabilities*>(p->ptr), tt__PTZCapabilities);
		break;
	case SOAP_TYPE_tt__DeviceIOCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DeviceIOCapabilities*>(p->ptr), tt__DeviceIOCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DeviceIOCapabilities*>(p->ptr), tt__DeviceIOCapabilities);
		break;
	case SOAP_TYPE_tt__DisplayCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DisplayCapabilities*>(p->ptr), tt__DisplayCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DisplayCapabilities*>(p->ptr), tt__DisplayCapabilities);
		break;
	case SOAP_TYPE_tt__RecordingCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingCapabilities*>(p->ptr), tt__RecordingCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingCapabilities*>(p->ptr), tt__RecordingCapabilities);
		break;
	case SOAP_TYPE_tt__SearchCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SearchCapabilities*>(p->ptr), tt__SearchCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SearchCapabilities*>(p->ptr), tt__SearchCapabilities);
		break;
	case SOAP_TYPE_tt__ReplayCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReplayCapabilities*>(p->ptr), tt__ReplayCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReplayCapabilities*>(p->ptr), tt__ReplayCapabilities);
		break;
	case SOAP_TYPE_tt__ReceiverCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReceiverCapabilities*>(p->ptr), tt__ReceiverCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReceiverCapabilities*>(p->ptr), tt__ReceiverCapabilities);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsDeviceCapabilities*>(p->ptr), tt__AnalyticsDeviceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsDeviceCapabilities*>(p->ptr), tt__AnalyticsDeviceCapabilities);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsDeviceExtension*>(p->ptr), tt__AnalyticsDeviceExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsDeviceExtension*>(p->ptr), tt__AnalyticsDeviceExtension);
		break;
	case SOAP_TYPE_tt__SystemLog:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemLog*>(p->ptr), tt__SystemLog);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemLog*>(p->ptr), tt__SystemLog);
		break;
	case SOAP_TYPE_tt__SupportInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SupportInformation*>(p->ptr), tt__SupportInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SupportInformation*>(p->ptr), tt__SupportInformation);
		break;
	case SOAP_TYPE_tt__BinaryData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__BinaryData*>(p->ptr), tt__BinaryData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__BinaryData*>(p->ptr), tt__BinaryData);
		break;
	case SOAP_TYPE_tt__AttachmentData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AttachmentData*>(p->ptr), tt__AttachmentData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AttachmentData*>(p->ptr), tt__AttachmentData);
		break;
	case SOAP_TYPE_tt__BackupFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__BackupFile*>(p->ptr), tt__BackupFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__BackupFile*>(p->ptr), tt__BackupFile);
		break;
	case SOAP_TYPE_tt__SystemLogUriList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemLogUriList*>(p->ptr), tt__SystemLogUriList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemLogUriList*>(p->ptr), tt__SystemLogUriList);
		break;
	case SOAP_TYPE_tt__SystemLogUri:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemLogUri*>(p->ptr), tt__SystemLogUri);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemLogUri*>(p->ptr), tt__SystemLogUri);
		break;
	case SOAP_TYPE_tt__SystemDateTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemDateTime*>(p->ptr), tt__SystemDateTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemDateTime*>(p->ptr), tt__SystemDateTime);
		break;
	case SOAP_TYPE_tt__SystemDateTimeExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SystemDateTimeExtension*>(p->ptr), tt__SystemDateTimeExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SystemDateTimeExtension*>(p->ptr), tt__SystemDateTimeExtension);
		break;
	case SOAP_TYPE_tt__DateTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DateTime*>(p->ptr), tt__DateTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DateTime*>(p->ptr), tt__DateTime);
		break;
	case SOAP_TYPE_tt__Date:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Date*>(p->ptr), tt__Date);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Date*>(p->ptr), tt__Date);
		break;
	case SOAP_TYPE_tt__Time:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Time*>(p->ptr), tt__Time);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Time*>(p->ptr), tt__Time);
		break;
	case SOAP_TYPE_tt__TimeZone:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TimeZone*>(p->ptr), tt__TimeZone);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TimeZone*>(p->ptr), tt__TimeZone);
		break;
	case SOAP_TYPE_tt__RemoteUser:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RemoteUser*>(p->ptr), tt__RemoteUser);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RemoteUser*>(p->ptr), tt__RemoteUser);
		break;
	case SOAP_TYPE_tt__User:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__User*>(p->ptr), tt__User);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__User*>(p->ptr), tt__User);
		break;
	case SOAP_TYPE_tt__UserExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__UserExtension*>(p->ptr), tt__UserExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__UserExtension*>(p->ptr), tt__UserExtension);
		break;
	case SOAP_TYPE_tt__CertificateGenerationParameters:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CertificateGenerationParameters*>(p->ptr), tt__CertificateGenerationParameters);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CertificateGenerationParameters*>(p->ptr), tt__CertificateGenerationParameters);
		break;
	case SOAP_TYPE_tt__CertificateGenerationParametersExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CertificateGenerationParametersExtension*>(p->ptr), tt__CertificateGenerationParametersExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CertificateGenerationParametersExtension*>(p->ptr), tt__CertificateGenerationParametersExtension);
		break;
	case SOAP_TYPE_tt__Certificate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Certificate*>(p->ptr), tt__Certificate);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Certificate*>(p->ptr), tt__Certificate);
		break;
	case SOAP_TYPE_tt__CertificateStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CertificateStatus*>(p->ptr), tt__CertificateStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CertificateStatus*>(p->ptr), tt__CertificateStatus);
		break;
	case SOAP_TYPE_tt__CertificateWithPrivateKey:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CertificateWithPrivateKey*>(p->ptr), tt__CertificateWithPrivateKey);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CertificateWithPrivateKey*>(p->ptr), tt__CertificateWithPrivateKey);
		break;
	case SOAP_TYPE_tt__CertificateInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CertificateInformation*>(p->ptr), tt__CertificateInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CertificateInformation*>(p->ptr), tt__CertificateInformation);
		break;
	case SOAP_TYPE_tt__CertificateInformationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CertificateInformationExtension*>(p->ptr), tt__CertificateInformationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CertificateInformationExtension*>(p->ptr), tt__CertificateInformationExtension);
		break;
	case SOAP_TYPE_tt__Dot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot1XConfiguration*>(p->ptr), tt__Dot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot1XConfiguration*>(p->ptr), tt__Dot1XConfiguration);
		break;
	case SOAP_TYPE_tt__Dot1XConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Dot1XConfigurationExtension*>(p->ptr), tt__Dot1XConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Dot1XConfigurationExtension*>(p->ptr), tt__Dot1XConfigurationExtension);
		break;
	case SOAP_TYPE_tt__EAPMethodConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EAPMethodConfiguration*>(p->ptr), tt__EAPMethodConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EAPMethodConfiguration*>(p->ptr), tt__EAPMethodConfiguration);
		break;
	case SOAP_TYPE_tt__EapMethodExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EapMethodExtension*>(p->ptr), tt__EapMethodExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EapMethodExtension*>(p->ptr), tt__EapMethodExtension);
		break;
	case SOAP_TYPE_tt__TLSConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TLSConfiguration*>(p->ptr), tt__TLSConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TLSConfiguration*>(p->ptr), tt__TLSConfiguration);
		break;
	case SOAP_TYPE_tt__GenericEapPwdConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__GenericEapPwdConfigurationExtension*>(p->ptr), tt__GenericEapPwdConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__GenericEapPwdConfigurationExtension*>(p->ptr), tt__GenericEapPwdConfigurationExtension);
		break;
	case SOAP_TYPE_tt__RelayOutputSettings:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelayOutputSettings*>(p->ptr), tt__RelayOutputSettings);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelayOutputSettings*>(p->ptr), tt__RelayOutputSettings);
		break;
	case SOAP_TYPE_tt__PTZNodeExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZNodeExtension*>(p->ptr), tt__PTZNodeExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZNodeExtension*>(p->ptr), tt__PTZNodeExtension);
		break;
	case SOAP_TYPE_tt__PTZNodeExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZNodeExtension2*>(p->ptr), tt__PTZNodeExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZNodeExtension2*>(p->ptr), tt__PTZNodeExtension2);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSupported:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourSupported*>(p->ptr), tt__PTZPresetTourSupported);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourSupported*>(p->ptr), tt__PTZPresetTourSupported);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSupportedExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourSupportedExtension*>(p->ptr), tt__PTZPresetTourSupportedExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourSupportedExtension*>(p->ptr), tt__PTZPresetTourSupportedExtension);
		break;
	case SOAP_TYPE_tt__PTZConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZConfigurationExtension*>(p->ptr), tt__PTZConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZConfigurationExtension*>(p->ptr), tt__PTZConfigurationExtension);
		break;
	case SOAP_TYPE_tt__PTZConfigurationExtension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZConfigurationExtension2*>(p->ptr), tt__PTZConfigurationExtension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZConfigurationExtension2*>(p->ptr), tt__PTZConfigurationExtension2);
		break;
	case SOAP_TYPE_tt__PTControlDirection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTControlDirection*>(p->ptr), tt__PTControlDirection);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTControlDirection*>(p->ptr), tt__PTControlDirection);
		break;
	case SOAP_TYPE_tt__PTControlDirectionExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTControlDirectionExtension*>(p->ptr), tt__PTControlDirectionExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTControlDirectionExtension*>(p->ptr), tt__PTControlDirectionExtension);
		break;
	case SOAP_TYPE_tt__EFlip:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EFlip*>(p->ptr), tt__EFlip);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EFlip*>(p->ptr), tt__EFlip);
		break;
	case SOAP_TYPE_tt__Reverse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Reverse*>(p->ptr), tt__Reverse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Reverse*>(p->ptr), tt__Reverse);
		break;
	case SOAP_TYPE_tt__PTZConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZConfigurationOptions*>(p->ptr), tt__PTZConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZConfigurationOptions*>(p->ptr), tt__PTZConfigurationOptions);
		break;
	case SOAP_TYPE_tt__PTZConfigurationOptions2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZConfigurationOptions2*>(p->ptr), tt__PTZConfigurationOptions2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZConfigurationOptions2*>(p->ptr), tt__PTZConfigurationOptions2);
		break;
	case SOAP_TYPE_tt__PTControlDirectionOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTControlDirectionOptions*>(p->ptr), tt__PTControlDirectionOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTControlDirectionOptions*>(p->ptr), tt__PTControlDirectionOptions);
		break;
	case SOAP_TYPE_tt__PTControlDirectionOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTControlDirectionOptionsExtension*>(p->ptr), tt__PTControlDirectionOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTControlDirectionOptionsExtension*>(p->ptr), tt__PTControlDirectionOptionsExtension);
		break;
	case SOAP_TYPE_tt__EFlipOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EFlipOptions*>(p->ptr), tt__EFlipOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EFlipOptions*>(p->ptr), tt__EFlipOptions);
		break;
	case SOAP_TYPE_tt__EFlipOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EFlipOptionsExtension*>(p->ptr), tt__EFlipOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EFlipOptionsExtension*>(p->ptr), tt__EFlipOptionsExtension);
		break;
	case SOAP_TYPE_tt__ReverseOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReverseOptions*>(p->ptr), tt__ReverseOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReverseOptions*>(p->ptr), tt__ReverseOptions);
		break;
	case SOAP_TYPE_tt__ReverseOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReverseOptionsExtension*>(p->ptr), tt__ReverseOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReverseOptionsExtension*>(p->ptr), tt__ReverseOptionsExtension);
		break;
	case SOAP_TYPE_tt__PanTiltLimits:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PanTiltLimits*>(p->ptr), tt__PanTiltLimits);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PanTiltLimits*>(p->ptr), tt__PanTiltLimits);
		break;
	case SOAP_TYPE_tt__ZoomLimits:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ZoomLimits*>(p->ptr), tt__ZoomLimits);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ZoomLimits*>(p->ptr), tt__ZoomLimits);
		break;
	case SOAP_TYPE_tt__PTZSpaces:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZSpaces*>(p->ptr), tt__PTZSpaces);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZSpaces*>(p->ptr), tt__PTZSpaces);
		break;
	case SOAP_TYPE_tt__PTZSpacesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZSpacesExtension*>(p->ptr), tt__PTZSpacesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZSpacesExtension*>(p->ptr), tt__PTZSpacesExtension);
		break;
	case SOAP_TYPE_tt__Space2DDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Space2DDescription*>(p->ptr), tt__Space2DDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Space2DDescription*>(p->ptr), tt__Space2DDescription);
		break;
	case SOAP_TYPE_tt__Space1DDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Space1DDescription*>(p->ptr), tt__Space1DDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Space1DDescription*>(p->ptr), tt__Space1DDescription);
		break;
	case SOAP_TYPE_tt__PTZSpeed:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZSpeed*>(p->ptr), tt__PTZSpeed);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZSpeed*>(p->ptr), tt__PTZSpeed);
		break;
	case SOAP_TYPE_tt__PTZPreset:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPreset*>(p->ptr), tt__PTZPreset);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPreset*>(p->ptr), tt__PTZPreset);
		break;
	case SOAP_TYPE_tt__PresetTour:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PresetTour*>(p->ptr), tt__PresetTour);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PresetTour*>(p->ptr), tt__PresetTour);
		break;
	case SOAP_TYPE_tt__PTZPresetTourExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourExtension*>(p->ptr), tt__PTZPresetTourExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourExtension*>(p->ptr), tt__PTZPresetTourExtension);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpot:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourSpot*>(p->ptr), tt__PTZPresetTourSpot);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourSpot*>(p->ptr), tt__PTZPresetTourSpot);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpotExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourSpotExtension*>(p->ptr), tt__PTZPresetTourSpotExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourSpotExtension*>(p->ptr), tt__PTZPresetTourSpotExtension);
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourPresetDetail*>(p->ptr), tt__PTZPresetTourPresetDetail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourPresetDetail*>(p->ptr), tt__PTZPresetTourPresetDetail);
		break;
	case SOAP_TYPE_tt__PTZPresetTourTypeExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourTypeExtension*>(p->ptr), tt__PTZPresetTourTypeExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourTypeExtension*>(p->ptr), tt__PTZPresetTourTypeExtension);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourStatus*>(p->ptr), tt__PTZPresetTourStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourStatus*>(p->ptr), tt__PTZPresetTourStatus);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStatusExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourStatusExtension*>(p->ptr), tt__PTZPresetTourStatusExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourStatusExtension*>(p->ptr), tt__PTZPresetTourStatusExtension);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingCondition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourStartingCondition*>(p->ptr), tt__PTZPresetTourStartingCondition);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourStartingCondition*>(p->ptr), tt__PTZPresetTourStartingCondition);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourStartingConditionExtension*>(p->ptr), tt__PTZPresetTourStartingConditionExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourStartingConditionExtension*>(p->ptr), tt__PTZPresetTourStartingConditionExtension);
		break;
	case SOAP_TYPE_tt__PTZPresetTourOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourOptions*>(p->ptr), tt__PTZPresetTourOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourOptions*>(p->ptr), tt__PTZPresetTourOptions);
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpotOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourSpotOptions*>(p->ptr), tt__PTZPresetTourSpotOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourSpotOptions*>(p->ptr), tt__PTZPresetTourSpotOptions);
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourPresetDetailOptions*>(p->ptr), tt__PTZPresetTourPresetDetailOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourPresetDetailOptions*>(p->ptr), tt__PTZPresetTourPresetDetailOptions);
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourPresetDetailOptionsExtension*>(p->ptr), tt__PTZPresetTourPresetDetailOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourPresetDetailOptionsExtension*>(p->ptr), tt__PTZPresetTourPresetDetailOptionsExtension);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourStartingConditionOptions*>(p->ptr), tt__PTZPresetTourStartingConditionOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourStartingConditionOptions*>(p->ptr), tt__PTZPresetTourStartingConditionOptions);
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPresetTourStartingConditionOptionsExtension*>(p->ptr), tt__PTZPresetTourStartingConditionOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPresetTourStartingConditionOptionsExtension*>(p->ptr), tt__PTZPresetTourStartingConditionOptionsExtension);
		break;
	case SOAP_TYPE_tt__ImagingStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingStatus*>(p->ptr), tt__ImagingStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingStatus*>(p->ptr), tt__ImagingStatus);
		break;
	case SOAP_TYPE_tt__FocusStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusStatus*>(p->ptr), tt__FocusStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusStatus*>(p->ptr), tt__FocusStatus);
		break;
	case SOAP_TYPE_tt__FocusConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusConfiguration*>(p->ptr), tt__FocusConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusConfiguration*>(p->ptr), tt__FocusConfiguration);
		break;
	case SOAP_TYPE_tt__ImagingSettings:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingSettings*>(p->ptr), tt__ImagingSettings);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingSettings*>(p->ptr), tt__ImagingSettings);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingSettingsExtension*>(p->ptr), tt__ImagingSettingsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingSettingsExtension*>(p->ptr), tt__ImagingSettingsExtension);
		break;
	case SOAP_TYPE_tt__Exposure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Exposure*>(p->ptr), tt__Exposure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Exposure*>(p->ptr), tt__Exposure);
		break;
	case SOAP_TYPE_tt__WideDynamicRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WideDynamicRange*>(p->ptr), tt__WideDynamicRange);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WideDynamicRange*>(p->ptr), tt__WideDynamicRange);
		break;
	case SOAP_TYPE_tt__BacklightCompensation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__BacklightCompensation*>(p->ptr), tt__BacklightCompensation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__BacklightCompensation*>(p->ptr), tt__BacklightCompensation);
		break;
	case SOAP_TYPE_tt__ImagingOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingOptions*>(p->ptr), tt__ImagingOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingOptions*>(p->ptr), tt__ImagingOptions);
		break;
	case SOAP_TYPE_tt__WideDynamicRangeOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WideDynamicRangeOptions*>(p->ptr), tt__WideDynamicRangeOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WideDynamicRangeOptions*>(p->ptr), tt__WideDynamicRangeOptions);
		break;
	case SOAP_TYPE_tt__BacklightCompensationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__BacklightCompensationOptions*>(p->ptr), tt__BacklightCompensationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__BacklightCompensationOptions*>(p->ptr), tt__BacklightCompensationOptions);
		break;
	case SOAP_TYPE_tt__FocusOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusOptions*>(p->ptr), tt__FocusOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusOptions*>(p->ptr), tt__FocusOptions);
		break;
	case SOAP_TYPE_tt__ExposureOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ExposureOptions*>(p->ptr), tt__ExposureOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ExposureOptions*>(p->ptr), tt__ExposureOptions);
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WhiteBalanceOptions*>(p->ptr), tt__WhiteBalanceOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WhiteBalanceOptions*>(p->ptr), tt__WhiteBalanceOptions);
		break;
	case SOAP_TYPE_tt__FocusMove:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusMove*>(p->ptr), tt__FocusMove);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusMove*>(p->ptr), tt__FocusMove);
		break;
	case SOAP_TYPE_tt__AbsoluteFocus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AbsoluteFocus*>(p->ptr), tt__AbsoluteFocus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AbsoluteFocus*>(p->ptr), tt__AbsoluteFocus);
		break;
	case SOAP_TYPE_tt__RelativeFocus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelativeFocus*>(p->ptr), tt__RelativeFocus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelativeFocus*>(p->ptr), tt__RelativeFocus);
		break;
	case SOAP_TYPE_tt__ContinuousFocus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ContinuousFocus*>(p->ptr), tt__ContinuousFocus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ContinuousFocus*>(p->ptr), tt__ContinuousFocus);
		break;
	case SOAP_TYPE_tt__MoveOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MoveOptions*>(p->ptr), tt__MoveOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MoveOptions*>(p->ptr), tt__MoveOptions);
		break;
	case SOAP_TYPE_tt__AbsoluteFocusOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AbsoluteFocusOptions*>(p->ptr), tt__AbsoluteFocusOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AbsoluteFocusOptions*>(p->ptr), tt__AbsoluteFocusOptions);
		break;
	case SOAP_TYPE_tt__RelativeFocusOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelativeFocusOptions*>(p->ptr), tt__RelativeFocusOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelativeFocusOptions*>(p->ptr), tt__RelativeFocusOptions);
		break;
	case SOAP_TYPE_tt__ContinuousFocusOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ContinuousFocusOptions*>(p->ptr), tt__ContinuousFocusOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ContinuousFocusOptions*>(p->ptr), tt__ContinuousFocusOptions);
		break;
	case SOAP_TYPE_tt__WhiteBalance:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WhiteBalance*>(p->ptr), tt__WhiteBalance);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WhiteBalance*>(p->ptr), tt__WhiteBalance);
		break;
	case SOAP_TYPE_tt__ImagingStatus20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingStatus20*>(p->ptr), tt__ImagingStatus20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingStatus20*>(p->ptr), tt__ImagingStatus20);
		break;
	case SOAP_TYPE_tt__ImagingStatus20Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingStatus20Extension*>(p->ptr), tt__ImagingStatus20Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingStatus20Extension*>(p->ptr), tt__ImagingStatus20Extension);
		break;
	case SOAP_TYPE_tt__FocusStatus20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusStatus20*>(p->ptr), tt__FocusStatus20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusStatus20*>(p->ptr), tt__FocusStatus20);
		break;
	case SOAP_TYPE_tt__FocusStatus20Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusStatus20Extension*>(p->ptr), tt__FocusStatus20Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusStatus20Extension*>(p->ptr), tt__FocusStatus20Extension);
		break;
	case SOAP_TYPE_tt__ImagingSettings20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingSettings20*>(p->ptr), tt__ImagingSettings20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingSettings20*>(p->ptr), tt__ImagingSettings20);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingSettingsExtension20*>(p->ptr), tt__ImagingSettingsExtension20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingSettingsExtension20*>(p->ptr), tt__ImagingSettingsExtension20);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension202:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingSettingsExtension202*>(p->ptr), tt__ImagingSettingsExtension202);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingSettingsExtension202*>(p->ptr), tt__ImagingSettingsExtension202);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension203:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingSettingsExtension203*>(p->ptr), tt__ImagingSettingsExtension203);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingSettingsExtension203*>(p->ptr), tt__ImagingSettingsExtension203);
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension204:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingSettingsExtension204*>(p->ptr), tt__ImagingSettingsExtension204);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingSettingsExtension204*>(p->ptr), tt__ImagingSettingsExtension204);
		break;
	case SOAP_TYPE_tt__ImageStabilization:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImageStabilization*>(p->ptr), tt__ImageStabilization);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImageStabilization*>(p->ptr), tt__ImageStabilization);
		break;
	case SOAP_TYPE_tt__ImageStabilizationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImageStabilizationExtension*>(p->ptr), tt__ImageStabilizationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImageStabilizationExtension*>(p->ptr), tt__ImageStabilizationExtension);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustment:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IrCutFilterAutoAdjustment*>(p->ptr), tt__IrCutFilterAutoAdjustment);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IrCutFilterAutoAdjustment*>(p->ptr), tt__IrCutFilterAutoAdjustment);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IrCutFilterAutoAdjustmentExtension*>(p->ptr), tt__IrCutFilterAutoAdjustmentExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IrCutFilterAutoAdjustmentExtension*>(p->ptr), tt__IrCutFilterAutoAdjustmentExtension);
		break;
	case SOAP_TYPE_tt__WideDynamicRange20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WideDynamicRange20*>(p->ptr), tt__WideDynamicRange20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WideDynamicRange20*>(p->ptr), tt__WideDynamicRange20);
		break;
	case SOAP_TYPE_tt__BacklightCompensation20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__BacklightCompensation20*>(p->ptr), tt__BacklightCompensation20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__BacklightCompensation20*>(p->ptr), tt__BacklightCompensation20);
		break;
	case SOAP_TYPE_tt__Exposure20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Exposure20*>(p->ptr), tt__Exposure20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Exposure20*>(p->ptr), tt__Exposure20);
		break;
	case SOAP_TYPE_tt__ToneCompensation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ToneCompensation*>(p->ptr), tt__ToneCompensation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ToneCompensation*>(p->ptr), tt__ToneCompensation);
		break;
	case SOAP_TYPE_tt__ToneCompensationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ToneCompensationExtension*>(p->ptr), tt__ToneCompensationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ToneCompensationExtension*>(p->ptr), tt__ToneCompensationExtension);
		break;
	case SOAP_TYPE_tt__Defogging:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Defogging*>(p->ptr), tt__Defogging);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Defogging*>(p->ptr), tt__Defogging);
		break;
	case SOAP_TYPE_tt__DefoggingExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DefoggingExtension*>(p->ptr), tt__DefoggingExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DefoggingExtension*>(p->ptr), tt__DefoggingExtension);
		break;
	case SOAP_TYPE_tt__NoiseReduction:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NoiseReduction*>(p->ptr), tt__NoiseReduction);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NoiseReduction*>(p->ptr), tt__NoiseReduction);
		break;
	case SOAP_TYPE_tt__ImagingOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingOptions20*>(p->ptr), tt__ImagingOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingOptions20*>(p->ptr), tt__ImagingOptions20);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingOptions20Extension*>(p->ptr), tt__ImagingOptions20Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingOptions20Extension*>(p->ptr), tt__ImagingOptions20Extension);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingOptions20Extension2*>(p->ptr), tt__ImagingOptions20Extension2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingOptions20Extension2*>(p->ptr), tt__ImagingOptions20Extension2);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension3:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingOptions20Extension3*>(p->ptr), tt__ImagingOptions20Extension3);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingOptions20Extension3*>(p->ptr), tt__ImagingOptions20Extension3);
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension4:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImagingOptions20Extension4*>(p->ptr), tt__ImagingOptions20Extension4);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImagingOptions20Extension4*>(p->ptr), tt__ImagingOptions20Extension4);
		break;
	case SOAP_TYPE_tt__ImageStabilizationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImageStabilizationOptions*>(p->ptr), tt__ImageStabilizationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImageStabilizationOptions*>(p->ptr), tt__ImageStabilizationOptions);
		break;
	case SOAP_TYPE_tt__ImageStabilizationOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ImageStabilizationOptionsExtension*>(p->ptr), tt__ImageStabilizationOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ImageStabilizationOptionsExtension*>(p->ptr), tt__ImageStabilizationOptionsExtension);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IrCutFilterAutoAdjustmentOptions*>(p->ptr), tt__IrCutFilterAutoAdjustmentOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IrCutFilterAutoAdjustmentOptions*>(p->ptr), tt__IrCutFilterAutoAdjustmentOptions);
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__IrCutFilterAutoAdjustmentOptionsExtension*>(p->ptr), tt__IrCutFilterAutoAdjustmentOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__IrCutFilterAutoAdjustmentOptionsExtension*>(p->ptr), tt__IrCutFilterAutoAdjustmentOptionsExtension);
		break;
	case SOAP_TYPE_tt__WideDynamicRangeOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WideDynamicRangeOptions20*>(p->ptr), tt__WideDynamicRangeOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WideDynamicRangeOptions20*>(p->ptr), tt__WideDynamicRangeOptions20);
		break;
	case SOAP_TYPE_tt__BacklightCompensationOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__BacklightCompensationOptions20*>(p->ptr), tt__BacklightCompensationOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__BacklightCompensationOptions20*>(p->ptr), tt__BacklightCompensationOptions20);
		break;
	case SOAP_TYPE_tt__ExposureOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ExposureOptions20*>(p->ptr), tt__ExposureOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ExposureOptions20*>(p->ptr), tt__ExposureOptions20);
		break;
	case SOAP_TYPE_tt__MoveOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MoveOptions20*>(p->ptr), tt__MoveOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MoveOptions20*>(p->ptr), tt__MoveOptions20);
		break;
	case SOAP_TYPE_tt__RelativeFocusOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelativeFocusOptions20*>(p->ptr), tt__RelativeFocusOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelativeFocusOptions20*>(p->ptr), tt__RelativeFocusOptions20);
		break;
	case SOAP_TYPE_tt__WhiteBalance20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WhiteBalance20*>(p->ptr), tt__WhiteBalance20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WhiteBalance20*>(p->ptr), tt__WhiteBalance20);
		break;
	case SOAP_TYPE_tt__WhiteBalance20Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WhiteBalance20Extension*>(p->ptr), tt__WhiteBalance20Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WhiteBalance20Extension*>(p->ptr), tt__WhiteBalance20Extension);
		break;
	case SOAP_TYPE_tt__FocusConfiguration20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusConfiguration20*>(p->ptr), tt__FocusConfiguration20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusConfiguration20*>(p->ptr), tt__FocusConfiguration20);
		break;
	case SOAP_TYPE_tt__FocusConfiguration20Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusConfiguration20Extension*>(p->ptr), tt__FocusConfiguration20Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusConfiguration20Extension*>(p->ptr), tt__FocusConfiguration20Extension);
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WhiteBalanceOptions20*>(p->ptr), tt__WhiteBalanceOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WhiteBalanceOptions20*>(p->ptr), tt__WhiteBalanceOptions20);
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions20Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__WhiteBalanceOptions20Extension*>(p->ptr), tt__WhiteBalanceOptions20Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__WhiteBalanceOptions20Extension*>(p->ptr), tt__WhiteBalanceOptions20Extension);
		break;
	case SOAP_TYPE_tt__FocusOptions20:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusOptions20*>(p->ptr), tt__FocusOptions20);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusOptions20*>(p->ptr), tt__FocusOptions20);
		break;
	case SOAP_TYPE_tt__FocusOptions20Extension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FocusOptions20Extension*>(p->ptr), tt__FocusOptions20Extension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FocusOptions20Extension*>(p->ptr), tt__FocusOptions20Extension);
		break;
	case SOAP_TYPE_tt__ToneCompensationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ToneCompensationOptions*>(p->ptr), tt__ToneCompensationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ToneCompensationOptions*>(p->ptr), tt__ToneCompensationOptions);
		break;
	case SOAP_TYPE_tt__DefoggingOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DefoggingOptions*>(p->ptr), tt__DefoggingOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DefoggingOptions*>(p->ptr), tt__DefoggingOptions);
		break;
	case SOAP_TYPE_tt__NoiseReductionOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NoiseReductionOptions*>(p->ptr), tt__NoiseReductionOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NoiseReductionOptions*>(p->ptr), tt__NoiseReductionOptions);
		break;
	case SOAP_TYPE_tt__MessageExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MessageExtension*>(p->ptr), tt__MessageExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MessageExtension*>(p->ptr), tt__MessageExtension);
		break;
	case SOAP_TYPE__tt__ItemList_SimpleItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tt__ItemList_SimpleItem*>(p->ptr), _tt__ItemList_SimpleItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tt__ItemList_SimpleItem*>(p->ptr), _tt__ItemList_SimpleItem);
		break;
	case SOAP_TYPE__tt__ItemList_ElementItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tt__ItemList_ElementItem*>(p->ptr), _tt__ItemList_ElementItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tt__ItemList_ElementItem*>(p->ptr), _tt__ItemList_ElementItem);
		break;
	case SOAP_TYPE_tt__ItemList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ItemList*>(p->ptr), tt__ItemList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ItemList*>(p->ptr), tt__ItemList);
		break;
	case SOAP_TYPE_tt__ItemListExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ItemListExtension*>(p->ptr), tt__ItemListExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ItemListExtension*>(p->ptr), tt__ItemListExtension);
		break;
	case SOAP_TYPE_tt__MessageDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MessageDescription*>(p->ptr), tt__MessageDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MessageDescription*>(p->ptr), tt__MessageDescription);
		break;
	case SOAP_TYPE_tt__MessageDescriptionExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MessageDescriptionExtension*>(p->ptr), tt__MessageDescriptionExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MessageDescriptionExtension*>(p->ptr), tt__MessageDescriptionExtension);
		break;
	case SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tt__ItemListDescription_SimpleItemDescription*>(p->ptr), _tt__ItemListDescription_SimpleItemDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tt__ItemListDescription_SimpleItemDescription*>(p->ptr), _tt__ItemListDescription_SimpleItemDescription);
		break;
	case SOAP_TYPE__tt__ItemListDescription_ElementItemDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tt__ItemListDescription_ElementItemDescription*>(p->ptr), _tt__ItemListDescription_ElementItemDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tt__ItemListDescription_ElementItemDescription*>(p->ptr), _tt__ItemListDescription_ElementItemDescription);
		break;
	case SOAP_TYPE_tt__ItemListDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ItemListDescription*>(p->ptr), tt__ItemListDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ItemListDescription*>(p->ptr), tt__ItemListDescription);
		break;
	case SOAP_TYPE_tt__ItemListDescriptionExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ItemListDescriptionExtension*>(p->ptr), tt__ItemListDescriptionExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ItemListDescriptionExtension*>(p->ptr), tt__ItemListDescriptionExtension);
		break;
	case SOAP_TYPE_tt__Polyline:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Polyline*>(p->ptr), tt__Polyline);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Polyline*>(p->ptr), tt__Polyline);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsEngineConfiguration*>(p->ptr), tt__AnalyticsEngineConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsEngineConfiguration*>(p->ptr), tt__AnalyticsEngineConfiguration);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsEngineConfigurationExtension*>(p->ptr), tt__AnalyticsEngineConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsEngineConfigurationExtension*>(p->ptr), tt__AnalyticsEngineConfigurationExtension);
		break;
	case SOAP_TYPE_tt__RuleEngineConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RuleEngineConfiguration*>(p->ptr), tt__RuleEngineConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RuleEngineConfiguration*>(p->ptr), tt__RuleEngineConfiguration);
		break;
	case SOAP_TYPE_tt__RuleEngineConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RuleEngineConfigurationExtension*>(p->ptr), tt__RuleEngineConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RuleEngineConfigurationExtension*>(p->ptr), tt__RuleEngineConfigurationExtension);
		break;
	case SOAP_TYPE_tt__Config:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Config*>(p->ptr), tt__Config);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Config*>(p->ptr), tt__Config);
		break;
	case SOAP_TYPE__tt__ConfigDescription_Messages:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tt__ConfigDescription_Messages*>(p->ptr), _tt__ConfigDescription_Messages);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tt__ConfigDescription_Messages*>(p->ptr), _tt__ConfigDescription_Messages);
		break;
	case SOAP_TYPE_tt__ConfigDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ConfigDescription*>(p->ptr), tt__ConfigDescription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ConfigDescription*>(p->ptr), tt__ConfigDescription);
		break;
	case SOAP_TYPE_tt__ConfigDescriptionExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ConfigDescriptionExtension*>(p->ptr), tt__ConfigDescriptionExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ConfigDescriptionExtension*>(p->ptr), tt__ConfigDescriptionExtension);
		break;
	case SOAP_TYPE_tt__SupportedRules:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SupportedRules*>(p->ptr), tt__SupportedRules);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SupportedRules*>(p->ptr), tt__SupportedRules);
		break;
	case SOAP_TYPE_tt__SupportedRulesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SupportedRulesExtension*>(p->ptr), tt__SupportedRulesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SupportedRulesExtension*>(p->ptr), tt__SupportedRulesExtension);
		break;
	case SOAP_TYPE_tt__SupportedAnalyticsModules:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SupportedAnalyticsModules*>(p->ptr), tt__SupportedAnalyticsModules);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SupportedAnalyticsModules*>(p->ptr), tt__SupportedAnalyticsModules);
		break;
	case SOAP_TYPE_tt__SupportedAnalyticsModulesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SupportedAnalyticsModulesExtension*>(p->ptr), tt__SupportedAnalyticsModulesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SupportedAnalyticsModulesExtension*>(p->ptr), tt__SupportedAnalyticsModulesExtension);
		break;
	case SOAP_TYPE_tt__PolygonConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PolygonConfiguration*>(p->ptr), tt__PolygonConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PolygonConfiguration*>(p->ptr), tt__PolygonConfiguration);
		break;
	case SOAP_TYPE_tt__PolylineArray:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PolylineArray*>(p->ptr), tt__PolylineArray);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PolylineArray*>(p->ptr), tt__PolylineArray);
		break;
	case SOAP_TYPE_tt__PolylineArrayExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PolylineArrayExtension*>(p->ptr), tt__PolylineArrayExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PolylineArrayExtension*>(p->ptr), tt__PolylineArrayExtension);
		break;
	case SOAP_TYPE_tt__PolylineArrayConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PolylineArrayConfiguration*>(p->ptr), tt__PolylineArrayConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PolylineArrayConfiguration*>(p->ptr), tt__PolylineArrayConfiguration);
		break;
	case SOAP_TYPE_tt__MotionExpression:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MotionExpression*>(p->ptr), tt__MotionExpression);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MotionExpression*>(p->ptr), tt__MotionExpression);
		break;
	case SOAP_TYPE_tt__MotionExpressionConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MotionExpressionConfiguration*>(p->ptr), tt__MotionExpressionConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MotionExpressionConfiguration*>(p->ptr), tt__MotionExpressionConfiguration);
		break;
	case SOAP_TYPE_tt__CellLayout:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CellLayout*>(p->ptr), tt__CellLayout);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CellLayout*>(p->ptr), tt__CellLayout);
		break;
	case SOAP_TYPE_tt__PaneConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PaneConfiguration*>(p->ptr), tt__PaneConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PaneConfiguration*>(p->ptr), tt__PaneConfiguration);
		break;
	case SOAP_TYPE_tt__PaneLayout:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PaneLayout*>(p->ptr), tt__PaneLayout);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PaneLayout*>(p->ptr), tt__PaneLayout);
		break;
	case SOAP_TYPE_tt__Layout:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Layout*>(p->ptr), tt__Layout);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Layout*>(p->ptr), tt__Layout);
		break;
	case SOAP_TYPE_tt__LayoutExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LayoutExtension*>(p->ptr), tt__LayoutExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LayoutExtension*>(p->ptr), tt__LayoutExtension);
		break;
	case SOAP_TYPE_tt__CodingCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CodingCapabilities*>(p->ptr), tt__CodingCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CodingCapabilities*>(p->ptr), tt__CodingCapabilities);
		break;
	case SOAP_TYPE_tt__LayoutOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LayoutOptions*>(p->ptr), tt__LayoutOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LayoutOptions*>(p->ptr), tt__LayoutOptions);
		break;
	case SOAP_TYPE_tt__LayoutOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LayoutOptionsExtension*>(p->ptr), tt__LayoutOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LayoutOptionsExtension*>(p->ptr), tt__LayoutOptionsExtension);
		break;
	case SOAP_TYPE_tt__PaneLayoutOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PaneLayoutOptions*>(p->ptr), tt__PaneLayoutOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PaneLayoutOptions*>(p->ptr), tt__PaneLayoutOptions);
		break;
	case SOAP_TYPE_tt__PaneOptionExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PaneOptionExtension*>(p->ptr), tt__PaneOptionExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PaneOptionExtension*>(p->ptr), tt__PaneOptionExtension);
		break;
	case SOAP_TYPE_tt__Receiver:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Receiver*>(p->ptr), tt__Receiver);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Receiver*>(p->ptr), tt__Receiver);
		break;
	case SOAP_TYPE_tt__ReceiverConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReceiverConfiguration*>(p->ptr), tt__ReceiverConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReceiverConfiguration*>(p->ptr), tt__ReceiverConfiguration);
		break;
	case SOAP_TYPE_tt__ReceiverStateInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReceiverStateInformation*>(p->ptr), tt__ReceiverStateInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReceiverStateInformation*>(p->ptr), tt__ReceiverStateInformation);
		break;
	case SOAP_TYPE_tt__SourceReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SourceReference*>(p->ptr), tt__SourceReference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SourceReference*>(p->ptr), tt__SourceReference);
		break;
	case SOAP_TYPE_tt__DateTimeRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DateTimeRange*>(p->ptr), tt__DateTimeRange);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DateTimeRange*>(p->ptr), tt__DateTimeRange);
		break;
	case SOAP_TYPE_tt__RecordingSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingSummary*>(p->ptr), tt__RecordingSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingSummary*>(p->ptr), tt__RecordingSummary);
		break;
	case SOAP_TYPE_tt__SearchScope:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SearchScope*>(p->ptr), tt__SearchScope);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SearchScope*>(p->ptr), tt__SearchScope);
		break;
	case SOAP_TYPE_tt__SearchScopeExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SearchScopeExtension*>(p->ptr), tt__SearchScopeExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SearchScopeExtension*>(p->ptr), tt__SearchScopeExtension);
		break;
	case SOAP_TYPE_tt__PTZPositionFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZPositionFilter*>(p->ptr), tt__PTZPositionFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZPositionFilter*>(p->ptr), tt__PTZPositionFilter);
		break;
	case SOAP_TYPE_tt__MetadataFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataFilter*>(p->ptr), tt__MetadataFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataFilter*>(p->ptr), tt__MetadataFilter);
		break;
	case SOAP_TYPE_tt__FindRecordingResultList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FindRecordingResultList*>(p->ptr), tt__FindRecordingResultList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FindRecordingResultList*>(p->ptr), tt__FindRecordingResultList);
		break;
	case SOAP_TYPE_tt__FindEventResultList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FindEventResultList*>(p->ptr), tt__FindEventResultList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FindEventResultList*>(p->ptr), tt__FindEventResultList);
		break;
	case SOAP_TYPE_tt__FindEventResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FindEventResult*>(p->ptr), tt__FindEventResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FindEventResult*>(p->ptr), tt__FindEventResult);
		break;
	case SOAP_TYPE_tt__FindPTZPositionResultList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FindPTZPositionResultList*>(p->ptr), tt__FindPTZPositionResultList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FindPTZPositionResultList*>(p->ptr), tt__FindPTZPositionResultList);
		break;
	case SOAP_TYPE_tt__FindPTZPositionResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FindPTZPositionResult*>(p->ptr), tt__FindPTZPositionResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FindPTZPositionResult*>(p->ptr), tt__FindPTZPositionResult);
		break;
	case SOAP_TYPE_tt__FindMetadataResultList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FindMetadataResultList*>(p->ptr), tt__FindMetadataResultList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FindMetadataResultList*>(p->ptr), tt__FindMetadataResultList);
		break;
	case SOAP_TYPE_tt__FindMetadataResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FindMetadataResult*>(p->ptr), tt__FindMetadataResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FindMetadataResult*>(p->ptr), tt__FindMetadataResult);
		break;
	case SOAP_TYPE_tt__RecordingInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingInformation*>(p->ptr), tt__RecordingInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingInformation*>(p->ptr), tt__RecordingInformation);
		break;
	case SOAP_TYPE_tt__RecordingSourceInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingSourceInformation*>(p->ptr), tt__RecordingSourceInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingSourceInformation*>(p->ptr), tt__RecordingSourceInformation);
		break;
	case SOAP_TYPE_tt__TrackInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TrackInformation*>(p->ptr), tt__TrackInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TrackInformation*>(p->ptr), tt__TrackInformation);
		break;
	case SOAP_TYPE_tt__MediaAttributes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MediaAttributes*>(p->ptr), tt__MediaAttributes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MediaAttributes*>(p->ptr), tt__MediaAttributes);
		break;
	case SOAP_TYPE_tt__TrackAttributes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TrackAttributes*>(p->ptr), tt__TrackAttributes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TrackAttributes*>(p->ptr), tt__TrackAttributes);
		break;
	case SOAP_TYPE_tt__TrackAttributesExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TrackAttributesExtension*>(p->ptr), tt__TrackAttributesExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TrackAttributesExtension*>(p->ptr), tt__TrackAttributesExtension);
		break;
	case SOAP_TYPE_tt__VideoAttributes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoAttributes*>(p->ptr), tt__VideoAttributes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoAttributes*>(p->ptr), tt__VideoAttributes);
		break;
	case SOAP_TYPE_tt__AudioAttributes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioAttributes*>(p->ptr), tt__AudioAttributes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioAttributes*>(p->ptr), tt__AudioAttributes);
		break;
	case SOAP_TYPE_tt__MetadataAttributes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataAttributes*>(p->ptr), tt__MetadataAttributes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataAttributes*>(p->ptr), tt__MetadataAttributes);
		break;
	case SOAP_TYPE_tt__RecordingConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingConfiguration*>(p->ptr), tt__RecordingConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingConfiguration*>(p->ptr), tt__RecordingConfiguration);
		break;
	case SOAP_TYPE_tt__TrackConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TrackConfiguration*>(p->ptr), tt__TrackConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TrackConfiguration*>(p->ptr), tt__TrackConfiguration);
		break;
	case SOAP_TYPE_tt__GetRecordingsResponseItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__GetRecordingsResponseItem*>(p->ptr), tt__GetRecordingsResponseItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__GetRecordingsResponseItem*>(p->ptr), tt__GetRecordingsResponseItem);
		break;
	case SOAP_TYPE_tt__GetTracksResponseList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__GetTracksResponseList*>(p->ptr), tt__GetTracksResponseList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__GetTracksResponseList*>(p->ptr), tt__GetTracksResponseList);
		break;
	case SOAP_TYPE_tt__GetTracksResponseItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__GetTracksResponseItem*>(p->ptr), tt__GetTracksResponseItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__GetTracksResponseItem*>(p->ptr), tt__GetTracksResponseItem);
		break;
	case SOAP_TYPE_tt__RecordingJobConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobConfiguration*>(p->ptr), tt__RecordingJobConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobConfiguration*>(p->ptr), tt__RecordingJobConfiguration);
		break;
	case SOAP_TYPE_tt__RecordingJobConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobConfigurationExtension*>(p->ptr), tt__RecordingJobConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobConfigurationExtension*>(p->ptr), tt__RecordingJobConfigurationExtension);
		break;
	case SOAP_TYPE_tt__RecordingJobSource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobSource*>(p->ptr), tt__RecordingJobSource);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobSource*>(p->ptr), tt__RecordingJobSource);
		break;
	case SOAP_TYPE_tt__RecordingJobSourceExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobSourceExtension*>(p->ptr), tt__RecordingJobSourceExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobSourceExtension*>(p->ptr), tt__RecordingJobSourceExtension);
		break;
	case SOAP_TYPE_tt__RecordingJobTrack:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobTrack*>(p->ptr), tt__RecordingJobTrack);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobTrack*>(p->ptr), tt__RecordingJobTrack);
		break;
	case SOAP_TYPE_tt__RecordingJobStateInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobStateInformation*>(p->ptr), tt__RecordingJobStateInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobStateInformation*>(p->ptr), tt__RecordingJobStateInformation);
		break;
	case SOAP_TYPE_tt__RecordingJobStateInformationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobStateInformationExtension*>(p->ptr), tt__RecordingJobStateInformationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobStateInformationExtension*>(p->ptr), tt__RecordingJobStateInformationExtension);
		break;
	case SOAP_TYPE_tt__RecordingJobStateSource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobStateSource*>(p->ptr), tt__RecordingJobStateSource);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobStateSource*>(p->ptr), tt__RecordingJobStateSource);
		break;
	case SOAP_TYPE_tt__RecordingJobStateTracks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobStateTracks*>(p->ptr), tt__RecordingJobStateTracks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobStateTracks*>(p->ptr), tt__RecordingJobStateTracks);
		break;
	case SOAP_TYPE_tt__RecordingJobStateTrack:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RecordingJobStateTrack*>(p->ptr), tt__RecordingJobStateTrack);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RecordingJobStateTrack*>(p->ptr), tt__RecordingJobStateTrack);
		break;
	case SOAP_TYPE_tt__GetRecordingJobsResponseItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__GetRecordingJobsResponseItem*>(p->ptr), tt__GetRecordingJobsResponseItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__GetRecordingJobsResponseItem*>(p->ptr), tt__GetRecordingJobsResponseItem);
		break;
	case SOAP_TYPE_tt__ReplayConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ReplayConfiguration*>(p->ptr), tt__ReplayConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ReplayConfiguration*>(p->ptr), tt__ReplayConfiguration);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsDeviceEngineConfiguration*>(p->ptr), tt__AnalyticsDeviceEngineConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsDeviceEngineConfiguration*>(p->ptr), tt__AnalyticsDeviceEngineConfiguration);
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsDeviceEngineConfigurationExtension*>(p->ptr), tt__AnalyticsDeviceEngineConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsDeviceEngineConfigurationExtension*>(p->ptr), tt__AnalyticsDeviceEngineConfigurationExtension);
		break;
	case SOAP_TYPE_tt__EngineConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EngineConfiguration*>(p->ptr), tt__EngineConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EngineConfiguration*>(p->ptr), tt__EngineConfiguration);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInputInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsEngineInputInfo*>(p->ptr), tt__AnalyticsEngineInputInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsEngineInputInfo*>(p->ptr), tt__AnalyticsEngineInputInfo);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsEngineInputInfoExtension*>(p->ptr), tt__AnalyticsEngineInputInfoExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsEngineInputInfoExtension*>(p->ptr), tt__AnalyticsEngineInputInfoExtension);
		break;
	case SOAP_TYPE_tt__SourceIdentification:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SourceIdentification*>(p->ptr), tt__SourceIdentification);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SourceIdentification*>(p->ptr), tt__SourceIdentification);
		break;
	case SOAP_TYPE_tt__SourceIdentificationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__SourceIdentificationExtension*>(p->ptr), tt__SourceIdentificationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__SourceIdentificationExtension*>(p->ptr), tt__SourceIdentificationExtension);
		break;
	case SOAP_TYPE_tt__MetadataInput:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataInput*>(p->ptr), tt__MetadataInput);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataInput*>(p->ptr), tt__MetadataInput);
		break;
	case SOAP_TYPE_tt__MetadataInputExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataInputExtension*>(p->ptr), tt__MetadataInputExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataInputExtension*>(p->ptr), tt__MetadataInputExtension);
		break;
	case SOAP_TYPE_tt__AnalyticsStateInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsStateInformation*>(p->ptr), tt__AnalyticsStateInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsStateInformation*>(p->ptr), tt__AnalyticsStateInformation);
		break;
	case SOAP_TYPE_tt__AnalyticsState:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsState*>(p->ptr), tt__AnalyticsState);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsState*>(p->ptr), tt__AnalyticsState);
		break;
	case SOAP_TYPE_tt__ActionEngineEventPayload:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ActionEngineEventPayload*>(p->ptr), tt__ActionEngineEventPayload);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ActionEngineEventPayload*>(p->ptr), tt__ActionEngineEventPayload);
		break;
	case SOAP_TYPE_tt__ActionEngineEventPayloadExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ActionEngineEventPayloadExtension*>(p->ptr), tt__ActionEngineEventPayloadExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ActionEngineEventPayloadExtension*>(p->ptr), tt__ActionEngineEventPayloadExtension);
		break;
	case SOAP_TYPE_tt__AudioClassCandidate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioClassCandidate*>(p->ptr), tt__AudioClassCandidate);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioClassCandidate*>(p->ptr), tt__AudioClassCandidate);
		break;
	case SOAP_TYPE_tt__AudioClassDescriptor:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioClassDescriptor*>(p->ptr), tt__AudioClassDescriptor);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioClassDescriptor*>(p->ptr), tt__AudioClassDescriptor);
		break;
	case SOAP_TYPE_tt__AudioClassDescriptorExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioClassDescriptorExtension*>(p->ptr), tt__AudioClassDescriptorExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioClassDescriptorExtension*>(p->ptr), tt__AudioClassDescriptorExtension);
		break;
	case SOAP_TYPE_tt__ActiveConnection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ActiveConnection*>(p->ptr), tt__ActiveConnection);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ActiveConnection*>(p->ptr), tt__ActiveConnection);
		break;
	case SOAP_TYPE_tt__ProfileStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ProfileStatus*>(p->ptr), tt__ProfileStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ProfileStatus*>(p->ptr), tt__ProfileStatus);
		break;
	case SOAP_TYPE_tt__ProfileStatusExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ProfileStatusExtension*>(p->ptr), tt__ProfileStatusExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ProfileStatusExtension*>(p->ptr), tt__ProfileStatusExtension);
		break;
	case SOAP_TYPE_tt__OSDPosConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDPosConfiguration*>(p->ptr), tt__OSDPosConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDPosConfiguration*>(p->ptr), tt__OSDPosConfiguration);
		break;
	case SOAP_TYPE_tt__OSDPosConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDPosConfigurationExtension*>(p->ptr), tt__OSDPosConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDPosConfigurationExtension*>(p->ptr), tt__OSDPosConfigurationExtension);
		break;
	case SOAP_TYPE_tt__OSDColor:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDColor*>(p->ptr), tt__OSDColor);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDColor*>(p->ptr), tt__OSDColor);
		break;
	case SOAP_TYPE_tt__OSDTextConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDTextConfiguration*>(p->ptr), tt__OSDTextConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDTextConfiguration*>(p->ptr), tt__OSDTextConfiguration);
		break;
	case SOAP_TYPE_tt__OSDTextConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDTextConfigurationExtension*>(p->ptr), tt__OSDTextConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDTextConfigurationExtension*>(p->ptr), tt__OSDTextConfigurationExtension);
		break;
	case SOAP_TYPE_tt__OSDImgConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDImgConfiguration*>(p->ptr), tt__OSDImgConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDImgConfiguration*>(p->ptr), tt__OSDImgConfiguration);
		break;
	case SOAP_TYPE_tt__OSDImgConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDImgConfigurationExtension*>(p->ptr), tt__OSDImgConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDImgConfigurationExtension*>(p->ptr), tt__OSDImgConfigurationExtension);
		break;
	case SOAP_TYPE_tt__ColorspaceRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ColorspaceRange*>(p->ptr), tt__ColorspaceRange);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ColorspaceRange*>(p->ptr), tt__ColorspaceRange);
		break;
	case SOAP_TYPE_tt__ColorOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ColorOptions*>(p->ptr), tt__ColorOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ColorOptions*>(p->ptr), tt__ColorOptions);
		break;
	case SOAP_TYPE_tt__OSDColorOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDColorOptions*>(p->ptr), tt__OSDColorOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDColorOptions*>(p->ptr), tt__OSDColorOptions);
		break;
	case SOAP_TYPE_tt__OSDColorOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDColorOptionsExtension*>(p->ptr), tt__OSDColorOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDColorOptionsExtension*>(p->ptr), tt__OSDColorOptionsExtension);
		break;
	case SOAP_TYPE_tt__OSDTextOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDTextOptions*>(p->ptr), tt__OSDTextOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDTextOptions*>(p->ptr), tt__OSDTextOptions);
		break;
	case SOAP_TYPE_tt__OSDTextOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDTextOptionsExtension*>(p->ptr), tt__OSDTextOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDTextOptionsExtension*>(p->ptr), tt__OSDTextOptionsExtension);
		break;
	case SOAP_TYPE_tt__OSDImgOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDImgOptions*>(p->ptr), tt__OSDImgOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDImgOptions*>(p->ptr), tt__OSDImgOptions);
		break;
	case SOAP_TYPE_tt__OSDImgOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDImgOptionsExtension*>(p->ptr), tt__OSDImgOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDImgOptionsExtension*>(p->ptr), tt__OSDImgOptionsExtension);
		break;
	case SOAP_TYPE_tt__OSDConfigurationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDConfigurationExtension*>(p->ptr), tt__OSDConfigurationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDConfigurationExtension*>(p->ptr), tt__OSDConfigurationExtension);
		break;
	case SOAP_TYPE_tt__MaximumNumberOfOSDs:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MaximumNumberOfOSDs*>(p->ptr), tt__MaximumNumberOfOSDs);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MaximumNumberOfOSDs*>(p->ptr), tt__MaximumNumberOfOSDs);
		break;
	case SOAP_TYPE_tt__OSDConfigurationOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDConfigurationOptions*>(p->ptr), tt__OSDConfigurationOptions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDConfigurationOptions*>(p->ptr), tt__OSDConfigurationOptions);
		break;
	case SOAP_TYPE_tt__OSDConfigurationOptionsExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDConfigurationOptionsExtension*>(p->ptr), tt__OSDConfigurationOptionsExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDConfigurationOptionsExtension*>(p->ptr), tt__OSDConfigurationOptionsExtension);
		break;
	case SOAP_TYPE_tt__FileProgress:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__FileProgress*>(p->ptr), tt__FileProgress);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__FileProgress*>(p->ptr), tt__FileProgress);
		break;
	case SOAP_TYPE_tt__ArrayOfFileProgress:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ArrayOfFileProgress*>(p->ptr), tt__ArrayOfFileProgress);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ArrayOfFileProgress*>(p->ptr), tt__ArrayOfFileProgress);
		break;
	case SOAP_TYPE_tt__ArrayOfFileProgressExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ArrayOfFileProgressExtension*>(p->ptr), tt__ArrayOfFileProgressExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ArrayOfFileProgressExtension*>(p->ptr), tt__ArrayOfFileProgressExtension);
		break;
	case SOAP_TYPE_tt__StorageReferencePath:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__StorageReferencePath*>(p->ptr), tt__StorageReferencePath);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__StorageReferencePath*>(p->ptr), tt__StorageReferencePath);
		break;
	case SOAP_TYPE_tt__StorageReferencePathExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__StorageReferencePathExtension*>(p->ptr), tt__StorageReferencePathExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__StorageReferencePathExtension*>(p->ptr), tt__StorageReferencePathExtension);
		break;
	case SOAP_TYPE_tt__Vector2D:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Vector2D*>(p->ptr), tt__Vector2D);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Vector2D*>(p->ptr), tt__Vector2D);
		break;
	case SOAP_TYPE_tt__Vector1D:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Vector1D*>(p->ptr), tt__Vector1D);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Vector1D*>(p->ptr), tt__Vector1D);
		break;
	case SOAP_TYPE_tt__PTZVector:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZVector*>(p->ptr), tt__PTZVector);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZVector*>(p->ptr), tt__PTZVector);
		break;
	case SOAP_TYPE_tt__PTZStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZStatus*>(p->ptr), tt__PTZStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZStatus*>(p->ptr), tt__PTZStatus);
		break;
	case SOAP_TYPE_tt__PTZMoveStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZMoveStatus*>(p->ptr), tt__PTZMoveStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZMoveStatus*>(p->ptr), tt__PTZMoveStatus);
		break;
	case SOAP_TYPE_tt__Vector:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Vector*>(p->ptr), tt__Vector);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Vector*>(p->ptr), tt__Vector);
		break;
	case SOAP_TYPE_tt__Rectangle:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Rectangle*>(p->ptr), tt__Rectangle);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Rectangle*>(p->ptr), tt__Rectangle);
		break;
	case SOAP_TYPE_tt__Polygon:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Polygon*>(p->ptr), tt__Polygon);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Polygon*>(p->ptr), tt__Polygon);
		break;
	case SOAP_TYPE_tt__Color:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Color*>(p->ptr), tt__Color);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Color*>(p->ptr), tt__Color);
		break;
	case SOAP_TYPE_tt__ColorCovariance:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__ColorCovariance*>(p->ptr), tt__ColorCovariance);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__ColorCovariance*>(p->ptr), tt__ColorCovariance);
		break;
	case SOAP_TYPE_tt__Transformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Transformation*>(p->ptr), tt__Transformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Transformation*>(p->ptr), tt__Transformation);
		break;
	case SOAP_TYPE_tt__TransformationExtension:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__TransformationExtension*>(p->ptr), tt__TransformationExtension);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__TransformationExtension*>(p->ptr), tt__TransformationExtension);
		break;
	case SOAP_TYPE_tt__GeoLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__GeoLocation*>(p->ptr), tt__GeoLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__GeoLocation*>(p->ptr), tt__GeoLocation);
		break;
	case SOAP_TYPE_tt__GeoOrientation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__GeoOrientation*>(p->ptr), tt__GeoOrientation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__GeoOrientation*>(p->ptr), tt__GeoOrientation);
		break;
	case SOAP_TYPE_tt__LocalLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LocalLocation*>(p->ptr), tt__LocalLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LocalLocation*>(p->ptr), tt__LocalLocation);
		break;
	case SOAP_TYPE_tt__LocalOrientation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LocalOrientation*>(p->ptr), tt__LocalOrientation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LocalOrientation*>(p->ptr), tt__LocalOrientation);
		break;
	case SOAP_TYPE_tt__LocationEntity:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__LocationEntity*>(p->ptr), tt__LocationEntity);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__LocationEntity*>(p->ptr), tt__LocationEntity);
		break;
	case SOAP_TYPE__tt__Message:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tt__Message*>(p->ptr), _tt__Message);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tt__Message*>(p->ptr), _tt__Message);
		break;
	case SOAP_TYPE_wsnt__QueryExpressionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__QueryExpressionType*>(p->ptr), wsnt__QueryExpressionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__QueryExpressionType*>(p->ptr), wsnt__QueryExpressionType);
		break;
	case SOAP_TYPE_wsnt__FilterType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__FilterType*>(p->ptr), wsnt__FilterType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__FilterType*>(p->ptr), wsnt__FilterType);
		break;
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__SubscriptionPolicyType*>(p->ptr), wsnt__SubscriptionPolicyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__SubscriptionPolicyType*>(p->ptr), wsnt__SubscriptionPolicyType);
		break;
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__NotificationMessageHolderType_Message*>(p->ptr), _wsnt__NotificationMessageHolderType_Message);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__NotificationMessageHolderType_Message*>(p->ptr), _wsnt__NotificationMessageHolderType_Message);
		break;
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__NotificationMessageHolderType*>(p->ptr), wsnt__NotificationMessageHolderType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__NotificationMessageHolderType*>(p->ptr), wsnt__NotificationMessageHolderType);
		break;
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__NotificationProducerRP*>(p->ptr), _wsnt__NotificationProducerRP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__NotificationProducerRP*>(p->ptr), _wsnt__NotificationProducerRP);
		break;
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__SubscriptionManagerRP*>(p->ptr), _wsnt__SubscriptionManagerRP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__SubscriptionManagerRP*>(p->ptr), _wsnt__SubscriptionManagerRP);
		break;
	case SOAP_TYPE__wsnt__Notify:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__Notify*>(p->ptr), _wsnt__Notify);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__Notify*>(p->ptr), _wsnt__Notify);
		break;
	case SOAP_TYPE__wsnt__UseRaw:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__UseRaw*>(p->ptr), _wsnt__UseRaw);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__UseRaw*>(p->ptr), _wsnt__UseRaw);
		break;
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__Subscribe_SubscriptionPolicy*>(p->ptr), _wsnt__Subscribe_SubscriptionPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__Subscribe_SubscriptionPolicy*>(p->ptr), _wsnt__Subscribe_SubscriptionPolicy);
		break;
	case SOAP_TYPE__wsnt__Subscribe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__Subscribe*>(p->ptr), _wsnt__Subscribe);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__Subscribe*>(p->ptr), _wsnt__Subscribe);
		break;
	case SOAP_TYPE__wsnt__SubscribeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__SubscribeResponse*>(p->ptr), _wsnt__SubscribeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__SubscribeResponse*>(p->ptr), _wsnt__SubscribeResponse);
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__GetCurrentMessage*>(p->ptr), _wsnt__GetCurrentMessage);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__GetCurrentMessage*>(p->ptr), _wsnt__GetCurrentMessage);
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__GetCurrentMessageResponse*>(p->ptr), _wsnt__GetCurrentMessageResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__GetCurrentMessageResponse*>(p->ptr), _wsnt__GetCurrentMessageResponse);
		break;
	case SOAP_TYPE__wsnt__GetMessages:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__GetMessages*>(p->ptr), _wsnt__GetMessages);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__GetMessages*>(p->ptr), _wsnt__GetMessages);
		break;
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__GetMessagesResponse*>(p->ptr), _wsnt__GetMessagesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__GetMessagesResponse*>(p->ptr), _wsnt__GetMessagesResponse);
		break;
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__DestroyPullPoint*>(p->ptr), _wsnt__DestroyPullPoint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__DestroyPullPoint*>(p->ptr), _wsnt__DestroyPullPoint);
		break;
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__DestroyPullPointResponse*>(p->ptr), _wsnt__DestroyPullPointResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__DestroyPullPointResponse*>(p->ptr), _wsnt__DestroyPullPointResponse);
		break;
	case SOAP_TYPE__wsnt__CreatePullPoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__CreatePullPoint*>(p->ptr), _wsnt__CreatePullPoint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__CreatePullPoint*>(p->ptr), _wsnt__CreatePullPoint);
		break;
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__CreatePullPointResponse*>(p->ptr), _wsnt__CreatePullPointResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__CreatePullPointResponse*>(p->ptr), _wsnt__CreatePullPointResponse);
		break;
	case SOAP_TYPE__wsnt__Renew:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__Renew*>(p->ptr), _wsnt__Renew);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__Renew*>(p->ptr), _wsnt__Renew);
		break;
	case SOAP_TYPE__wsnt__RenewResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__RenewResponse*>(p->ptr), _wsnt__RenewResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__RenewResponse*>(p->ptr), _wsnt__RenewResponse);
		break;
	case SOAP_TYPE__wsnt__Unsubscribe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__Unsubscribe*>(p->ptr), _wsnt__Unsubscribe);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__Unsubscribe*>(p->ptr), _wsnt__Unsubscribe);
		break;
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__UnsubscribeResponse*>(p->ptr), _wsnt__UnsubscribeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__UnsubscribeResponse*>(p->ptr), _wsnt__UnsubscribeResponse);
		break;
	case SOAP_TYPE__wsnt__PauseSubscription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__PauseSubscription*>(p->ptr), _wsnt__PauseSubscription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__PauseSubscription*>(p->ptr), _wsnt__PauseSubscription);
		break;
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__PauseSubscriptionResponse*>(p->ptr), _wsnt__PauseSubscriptionResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__PauseSubscriptionResponse*>(p->ptr), _wsnt__PauseSubscriptionResponse);
		break;
	case SOAP_TYPE__wsnt__ResumeSubscription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__ResumeSubscription*>(p->ptr), _wsnt__ResumeSubscription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__ResumeSubscription*>(p->ptr), _wsnt__ResumeSubscription);
		break;
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsnt__ResumeSubscriptionResponse*>(p->ptr), _wsnt__ResumeSubscriptionResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsnt__ResumeSubscriptionResponse*>(p->ptr), _wsnt__ResumeSubscriptionResponse);
		break;
	case SOAP_TYPE_xop__Include:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xop__Include*>(p->ptr), xop__Include);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xop__Include*>(p->ptr), xop__Include);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsrfbf__BaseFaultType_ErrorCode*>(p->ptr), _wsrfbf__BaseFaultType_ErrorCode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsrfbf__BaseFaultType_ErrorCode*>(p->ptr), _wsrfbf__BaseFaultType_ErrorCode);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsrfbf__BaseFaultType_Description*>(p->ptr), _wsrfbf__BaseFaultType_Description);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsrfbf__BaseFaultType_Description*>(p->ptr), _wsrfbf__BaseFaultType_Description);
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wsrfbf__BaseFaultType_FaultCause*>(p->ptr), _wsrfbf__BaseFaultType_FaultCause);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wsrfbf__BaseFaultType_FaultCause*>(p->ptr), _wsrfbf__BaseFaultType_FaultCause);
		break;
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsrfbf__BaseFaultType*>(p->ptr), wsrfbf__BaseFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsrfbf__BaseFaultType*>(p->ptr), wsrfbf__BaseFaultType);
		break;
	case SOAP_TYPE_wstop__Documentation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__Documentation*>(p->ptr), wstop__Documentation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__Documentation*>(p->ptr), wstop__Documentation);
		break;
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__ExtensibleDocumented*>(p->ptr), wstop__ExtensibleDocumented);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__ExtensibleDocumented*>(p->ptr), wstop__ExtensibleDocumented);
		break;
	case SOAP_TYPE_wstop__QueryExpressionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__QueryExpressionType*>(p->ptr), wstop__QueryExpressionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__QueryExpressionType*>(p->ptr), wstop__QueryExpressionType);
		break;
	case SOAP_TYPE_tev__Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tev__Capabilities*>(p->ptr), tev__Capabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tev__Capabilities*>(p->ptr), tev__Capabilities);
		break;
	case SOAP_TYPE_tev__SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tev__SubscriptionPolicy*>(p->ptr), tev__SubscriptionPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tev__SubscriptionPolicy*>(p->ptr), tev__SubscriptionPolicy);
		break;
	case SOAP_TYPE__tev__GetServiceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__GetServiceCapabilities*>(p->ptr), _tev__GetServiceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__GetServiceCapabilities*>(p->ptr), _tev__GetServiceCapabilities);
		break;
	case SOAP_TYPE__tev__GetServiceCapabilitiesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__GetServiceCapabilitiesResponse*>(p->ptr), _tev__GetServiceCapabilitiesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__GetServiceCapabilitiesResponse*>(p->ptr), _tev__GetServiceCapabilitiesResponse);
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__CreatePullPointSubscription_SubscriptionPolicy*>(p->ptr), _tev__CreatePullPointSubscription_SubscriptionPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__CreatePullPointSubscription_SubscriptionPolicy*>(p->ptr), _tev__CreatePullPointSubscription_SubscriptionPolicy);
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__CreatePullPointSubscription*>(p->ptr), _tev__CreatePullPointSubscription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__CreatePullPointSubscription*>(p->ptr), _tev__CreatePullPointSubscription);
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__CreatePullPointSubscriptionResponse*>(p->ptr), _tev__CreatePullPointSubscriptionResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__CreatePullPointSubscriptionResponse*>(p->ptr), _tev__CreatePullPointSubscriptionResponse);
		break;
	case SOAP_TYPE__tev__PullMessages:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__PullMessages*>(p->ptr), _tev__PullMessages);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__PullMessages*>(p->ptr), _tev__PullMessages);
		break;
	case SOAP_TYPE__tev__PullMessagesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__PullMessagesResponse*>(p->ptr), _tev__PullMessagesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__PullMessagesResponse*>(p->ptr), _tev__PullMessagesResponse);
		break;
	case SOAP_TYPE__tev__PullMessagesFaultResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__PullMessagesFaultResponse*>(p->ptr), _tev__PullMessagesFaultResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__PullMessagesFaultResponse*>(p->ptr), _tev__PullMessagesFaultResponse);
		break;
	case SOAP_TYPE__tev__Seek:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__Seek*>(p->ptr), _tev__Seek);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__Seek*>(p->ptr), _tev__Seek);
		break;
	case SOAP_TYPE__tev__SeekResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__SeekResponse*>(p->ptr), _tev__SeekResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__SeekResponse*>(p->ptr), _tev__SeekResponse);
		break;
	case SOAP_TYPE__tev__SetSynchronizationPoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__SetSynchronizationPoint*>(p->ptr), _tev__SetSynchronizationPoint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__SetSynchronizationPoint*>(p->ptr), _tev__SetSynchronizationPoint);
		break;
	case SOAP_TYPE__tev__SetSynchronizationPointResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__SetSynchronizationPointResponse*>(p->ptr), _tev__SetSynchronizationPointResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__SetSynchronizationPointResponse*>(p->ptr), _tev__SetSynchronizationPointResponse);
		break;
	case SOAP_TYPE__tev__GetEventProperties:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__GetEventProperties*>(p->ptr), _tev__GetEventProperties);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__GetEventProperties*>(p->ptr), _tev__GetEventProperties);
		break;
	case SOAP_TYPE__tev__GetEventPropertiesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_tev__GetEventPropertiesResponse*>(p->ptr), _tev__GetEventPropertiesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_tev__GetEventPropertiesResponse*>(p->ptr), _tev__GetEventPropertiesResponse);
		break;
	case SOAP_TYPE_wsd__HelloType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__HelloType*>(p->ptr), wsd__HelloType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__HelloType*>(p->ptr), wsd__HelloType);
		break;
	case SOAP_TYPE_wsd__ByeType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ByeType*>(p->ptr), wsd__ByeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ByeType*>(p->ptr), wsd__ByeType);
		break;
	case SOAP_TYPE_wsd__ProbeType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsd__ProbeType*>(p->ptr), struct wsd__ProbeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsd__ProbeType*>(p->ptr), struct wsd__ProbeType);
		break;
	case SOAP_TYPE_wsd__ProbeMatchesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsd__ProbeMatchesType*>(p->ptr), struct wsd__ProbeMatchesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsd__ProbeMatchesType*>(p->ptr), struct wsd__ProbeMatchesType);
		break;
	case SOAP_TYPE_wsd__ProbeMatchType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ProbeMatchType*>(p->ptr), wsd__ProbeMatchType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ProbeMatchType*>(p->ptr), wsd__ProbeMatchType);
		break;
	case SOAP_TYPE_wsd__ResolveType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ResolveType*>(p->ptr), wsd__ResolveType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ResolveType*>(p->ptr), wsd__ResolveType);
		break;
	case SOAP_TYPE_wsd__ResolveMatchesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ResolveMatchesType*>(p->ptr), wsd__ResolveMatchesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ResolveMatchesType*>(p->ptr), wsd__ResolveMatchesType);
		break;
	case SOAP_TYPE_wsd__ResolveMatchType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ResolveMatchType*>(p->ptr), wsd__ResolveMatchType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ResolveMatchType*>(p->ptr), wsd__ResolveMatchType);
		break;
	case SOAP_TYPE_wsd__SecurityType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__SecurityType*>(p->ptr), wsd__SecurityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__SecurityType*>(p->ptr), wsd__SecurityType);
		break;
	case SOAP_TYPE_wsd__SigType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__SigType*>(p->ptr), wsd__SigType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__SigType*>(p->ptr), wsd__SigType);
		break;
	case SOAP_TYPE_wsa__EndpointReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		break;
	case SOAP_TYPE_wsa__ReferencePropertiesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__ReferencePropertiesType*>(p->ptr), wsa__ReferencePropertiesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__ReferencePropertiesType*>(p->ptr), wsa__ReferencePropertiesType);
		break;
	case SOAP_TYPE_wsa__ReferenceParametersType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__ReferenceParametersType*>(p->ptr), wsa__ReferenceParametersType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__ReferenceParametersType*>(p->ptr), wsa__ReferenceParametersType);
		break;
	case SOAP_TYPE_tmk__AccessControl:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__AccessControl*>(p->ptr), tmk__AccessControl);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__AccessControl*>(p->ptr), tmk__AccessControl);
		break;
	case SOAP_TYPE_tmk__FireAlarm:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__FireAlarm*>(p->ptr), tmk__FireAlarm);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__FireAlarm*>(p->ptr), tmk__FireAlarm);
		break;
	case SOAP_TYPE_tmk__GasAnalysis:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__GasAnalysis*>(p->ptr), tmk__GasAnalysis);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__GasAnalysis*>(p->ptr), tmk__GasAnalysis);
		break;
	case SOAP_TYPE_tmk__Introscopy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__Introscopy*>(p->ptr), tmk__Introscopy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__Introscopy*>(p->ptr), tmk__Introscopy);
		break;
	case SOAP_TYPE_tmk__NeutronProbing:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__NeutronProbing*>(p->ptr), tmk__NeutronProbing);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__NeutronProbing*>(p->ptr), tmk__NeutronProbing);
		break;
	case SOAP_TYPE_tmk__RadiationMonitoring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__RadiationMonitoring*>(p->ptr), tmk__RadiationMonitoring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__RadiationMonitoring*>(p->ptr), tmk__RadiationMonitoring);
		break;
	case SOAP_TYPE_tmk__SteamDetector:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__SteamDetector*>(p->ptr), tmk__SteamDetector);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__SteamDetector*>(p->ptr), tmk__SteamDetector);
		break;
	case SOAP_TYPE_tmk__MetalDetector:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__MetalDetector*>(p->ptr), tmk__MetalDetector);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__MetalDetector*>(p->ptr), tmk__MetalDetector);
		break;
	case SOAP_TYPE_tmk__VideoSurveillanceSystem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tmk__VideoSurveillanceSystem*>(p->ptr), tmk__VideoSurveillanceSystem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tmk__VideoSurveillanceSystem*>(p->ptr), tmk__VideoSurveillanceSystem);
		break;
	case SOAP_TYPE_tds__StorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__StorageConfiguration*>(p->ptr), tds__StorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__StorageConfiguration*>(p->ptr), tds__StorageConfiguration);
		break;
	case SOAP_TYPE_tt__VideoSource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSource*>(p->ptr), tt__VideoSource);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSource*>(p->ptr), tt__VideoSource);
		break;
	case SOAP_TYPE_tt__AudioSource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioSource*>(p->ptr), tt__AudioSource);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioSource*>(p->ptr), tt__AudioSource);
		break;
	case SOAP_TYPE_tt__VideoSourceConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceConfiguration*>(p->ptr), tt__VideoSourceConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceConfiguration*>(p->ptr), tt__VideoSourceConfiguration);
		break;
	case SOAP_TYPE_tt__VideoEncoderConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoderConfiguration*>(p->ptr), tt__VideoEncoderConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoderConfiguration*>(p->ptr), tt__VideoEncoderConfiguration);
		break;
	case SOAP_TYPE_tt__JpegOptions2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__JpegOptions2*>(p->ptr), tt__JpegOptions2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__JpegOptions2*>(p->ptr), tt__JpegOptions2);
		break;
	case SOAP_TYPE_tt__Mpeg4Options2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Mpeg4Options2*>(p->ptr), tt__Mpeg4Options2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Mpeg4Options2*>(p->ptr), tt__Mpeg4Options2);
		break;
	case SOAP_TYPE_tt__H264Options2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__H264Options2*>(p->ptr), tt__H264Options2);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__H264Options2*>(p->ptr), tt__H264Options2);
		break;
	case SOAP_TYPE_tt__VideoEncoder2Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoder2Configuration*>(p->ptr), tt__VideoEncoder2Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoder2Configuration*>(p->ptr), tt__VideoEncoder2Configuration);
		break;
	case SOAP_TYPE_tt__AudioSourceConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioSourceConfiguration*>(p->ptr), tt__AudioSourceConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioSourceConfiguration*>(p->ptr), tt__AudioSourceConfiguration);
		break;
	case SOAP_TYPE_tt__AudioEncoderConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncoderConfiguration*>(p->ptr), tt__AudioEncoderConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncoderConfiguration*>(p->ptr), tt__AudioEncoderConfiguration);
		break;
	case SOAP_TYPE_tt__AudioEncoder2Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncoder2Configuration*>(p->ptr), tt__AudioEncoder2Configuration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncoder2Configuration*>(p->ptr), tt__AudioEncoder2Configuration);
		break;
	case SOAP_TYPE_tt__VideoAnalyticsConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoAnalyticsConfiguration*>(p->ptr), tt__VideoAnalyticsConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoAnalyticsConfiguration*>(p->ptr), tt__VideoAnalyticsConfiguration);
		break;
	case SOAP_TYPE_tt__MetadataConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataConfiguration*>(p->ptr), tt__MetadataConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataConfiguration*>(p->ptr), tt__MetadataConfiguration);
		break;
	case SOAP_TYPE_tt__VideoOutput:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoOutput*>(p->ptr), tt__VideoOutput);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoOutput*>(p->ptr), tt__VideoOutput);
		break;
	case SOAP_TYPE_tt__VideoOutputConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoOutputConfiguration*>(p->ptr), tt__VideoOutputConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoOutputConfiguration*>(p->ptr), tt__VideoOutputConfiguration);
		break;
	case SOAP_TYPE_tt__AudioOutput:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioOutput*>(p->ptr), tt__AudioOutput);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioOutput*>(p->ptr), tt__AudioOutput);
		break;
	case SOAP_TYPE_tt__AudioOutputConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioOutputConfiguration*>(p->ptr), tt__AudioOutputConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioOutputConfiguration*>(p->ptr), tt__AudioOutputConfiguration);
		break;
	case SOAP_TYPE_tt__AudioDecoderConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioDecoderConfiguration*>(p->ptr), tt__AudioDecoderConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioDecoderConfiguration*>(p->ptr), tt__AudioDecoderConfiguration);
		break;
	case SOAP_TYPE_tt__NetworkInterface:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__NetworkInterface*>(p->ptr), tt__NetworkInterface);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__NetworkInterface*>(p->ptr), tt__NetworkInterface);
		break;
	case SOAP_TYPE_tt__CertificateUsage:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__CertificateUsage*>(p->ptr), tt__CertificateUsage);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__CertificateUsage*>(p->ptr), tt__CertificateUsage);
		break;
	case SOAP_TYPE_tt__RelayOutput:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__RelayOutput*>(p->ptr), tt__RelayOutput);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__RelayOutput*>(p->ptr), tt__RelayOutput);
		break;
	case SOAP_TYPE_tt__DigitalInput:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__DigitalInput*>(p->ptr), tt__DigitalInput);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__DigitalInput*>(p->ptr), tt__DigitalInput);
		break;
	case SOAP_TYPE_tt__PTZNode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZNode*>(p->ptr), tt__PTZNode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZNode*>(p->ptr), tt__PTZNode);
		break;
	case SOAP_TYPE_tt__PTZConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZConfiguration*>(p->ptr), tt__PTZConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZConfiguration*>(p->ptr), tt__PTZConfiguration);
		break;
	case SOAP_TYPE_tt__EventFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__EventFilter*>(p->ptr), tt__EventFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__EventFilter*>(p->ptr), tt__EventFilter);
		break;
	case SOAP_TYPE_tt__AnalyticsEngine:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsEngine*>(p->ptr), tt__AnalyticsEngine);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsEngine*>(p->ptr), tt__AnalyticsEngine);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInput:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsEngineInput*>(p->ptr), tt__AnalyticsEngineInput);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsEngineInput*>(p->ptr), tt__AnalyticsEngineInput);
		break;
	case SOAP_TYPE_tt__AnalyticsEngineControl:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AnalyticsEngineControl*>(p->ptr), tt__AnalyticsEngineControl);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AnalyticsEngineControl*>(p->ptr), tt__AnalyticsEngineControl);
		break;
	case SOAP_TYPE_tt__OSDConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDConfiguration*>(p->ptr), tt__OSDConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDConfiguration*>(p->ptr), tt__OSDConfiguration);
		break;
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__SubscribeCreationFailedFaultType*>(p->ptr), wsnt__SubscribeCreationFailedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__SubscribeCreationFailedFaultType*>(p->ptr), wsnt__SubscribeCreationFailedFaultType);
		break;
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidFilterFaultType*>(p->ptr), wsnt__InvalidFilterFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidFilterFaultType*>(p->ptr), wsnt__InvalidFilterFaultType);
		break;
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__TopicExpressionDialectUnknownFaultType*>(p->ptr), wsnt__TopicExpressionDialectUnknownFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__TopicExpressionDialectUnknownFaultType*>(p->ptr), wsnt__TopicExpressionDialectUnknownFaultType);
		break;
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidTopicExpressionFaultType*>(p->ptr), wsnt__InvalidTopicExpressionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidTopicExpressionFaultType*>(p->ptr), wsnt__InvalidTopicExpressionFaultType);
		break;
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__TopicNotSupportedFaultType*>(p->ptr), wsnt__TopicNotSupportedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__TopicNotSupportedFaultType*>(p->ptr), wsnt__TopicNotSupportedFaultType);
		break;
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__MultipleTopicsSpecifiedFaultType*>(p->ptr), wsnt__MultipleTopicsSpecifiedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__MultipleTopicsSpecifiedFaultType*>(p->ptr), wsnt__MultipleTopicsSpecifiedFaultType);
		break;
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidProducerPropertiesExpressionFaultType*>(p->ptr), wsnt__InvalidProducerPropertiesExpressionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidProducerPropertiesExpressionFaultType*>(p->ptr), wsnt__InvalidProducerPropertiesExpressionFaultType);
		break;
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidMessageContentExpressionFaultType*>(p->ptr), wsnt__InvalidMessageContentExpressionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidMessageContentExpressionFaultType*>(p->ptr), wsnt__InvalidMessageContentExpressionFaultType);
		break;
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnrecognizedPolicyRequestFaultType*>(p->ptr), wsnt__UnrecognizedPolicyRequestFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnrecognizedPolicyRequestFaultType*>(p->ptr), wsnt__UnrecognizedPolicyRequestFaultType);
		break;
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnsupportedPolicyRequestFaultType*>(p->ptr), wsnt__UnsupportedPolicyRequestFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnsupportedPolicyRequestFaultType*>(p->ptr), wsnt__UnsupportedPolicyRequestFaultType);
		break;
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__NotifyMessageNotSupportedFaultType*>(p->ptr), wsnt__NotifyMessageNotSupportedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__NotifyMessageNotSupportedFaultType*>(p->ptr), wsnt__NotifyMessageNotSupportedFaultType);
		break;
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnacceptableInitialTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableInitialTerminationTimeFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnacceptableInitialTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableInitialTerminationTimeFaultType);
		break;
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__NoCurrentMessageOnTopicFaultType*>(p->ptr), wsnt__NoCurrentMessageOnTopicFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__NoCurrentMessageOnTopicFaultType*>(p->ptr), wsnt__NoCurrentMessageOnTopicFaultType);
		break;
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToGetMessagesFaultType*>(p->ptr), wsnt__UnableToGetMessagesFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToGetMessagesFaultType*>(p->ptr), wsnt__UnableToGetMessagesFaultType);
		break;
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToDestroyPullPointFaultType*>(p->ptr), wsnt__UnableToDestroyPullPointFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToDestroyPullPointFaultType*>(p->ptr), wsnt__UnableToDestroyPullPointFaultType);
		break;
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToCreatePullPointFaultType*>(p->ptr), wsnt__UnableToCreatePullPointFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToCreatePullPointFaultType*>(p->ptr), wsnt__UnableToCreatePullPointFaultType);
		break;
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnacceptableTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableTerminationTimeFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnacceptableTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableTerminationTimeFaultType);
		break;
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToDestroySubscriptionFaultType*>(p->ptr), wsnt__UnableToDestroySubscriptionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToDestroySubscriptionFaultType*>(p->ptr), wsnt__UnableToDestroySubscriptionFaultType);
		break;
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__PauseFailedFaultType*>(p->ptr), wsnt__PauseFailedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__PauseFailedFaultType*>(p->ptr), wsnt__PauseFailedFaultType);
		break;
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__ResumeFailedFaultType*>(p->ptr), wsnt__ResumeFailedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__ResumeFailedFaultType*>(p->ptr), wsnt__ResumeFailedFaultType);
		break;
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_wstop__TopicNamespaceType_Topic*>(p->ptr), _wstop__TopicNamespaceType_Topic);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_wstop__TopicNamespaceType_Topic*>(p->ptr), _wstop__TopicNamespaceType_Topic);
		break;
	case SOAP_TYPE_wstop__TopicNamespaceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__TopicNamespaceType*>(p->ptr), wstop__TopicNamespaceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__TopicNamespaceType*>(p->ptr), wstop__TopicNamespaceType);
		break;
	case SOAP_TYPE_wstop__TopicType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__TopicType*>(p->ptr), wstop__TopicType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__TopicType*>(p->ptr), wstop__TopicType);
		break;
	case SOAP_TYPE_wstop__TopicSetType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__TopicSetType*>(p->ptr), wstop__TopicSetType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__TopicSetType*>(p->ptr), wstop__TopicSetType);
		break;
	case SOAP_TYPE_wsrf__ResourceUnknownFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsrf__ResourceUnknownFaultType*>(p->ptr), wsrf__ResourceUnknownFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsrf__ResourceUnknownFaultType*>(p->ptr), wsrf__ResourceUnknownFaultType);
		break;
	case SOAP_TYPE_wsrf__ResourceUnavailableFaultType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsrf__ResourceUnavailableFaultType*>(p->ptr), wsrf__ResourceUnavailableFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsrf__ResourceUnavailableFaultType*>(p->ptr), wsrf__ResourceUnavailableFaultType);
		break;
	case SOAP_TYPE_wsd__ScopesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ScopesType*>(p->ptr), wsd__ScopesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ScopesType*>(p->ptr), wsd__ScopesType);
		break;
	case SOAP_TYPE_wsd__AppSequenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__AppSequenceType*>(p->ptr), wsd__AppSequenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__AppSequenceType*>(p->ptr), wsd__AppSequenceType);
		break;
	case SOAP_TYPE_wsa__ServiceNameType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__ServiceNameType*>(p->ptr), wsa__ServiceNameType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__ServiceNameType*>(p->ptr), wsa__ServiceNameType);
		break;
	case SOAP_TYPE_wsa__Relationship:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__Relationship*>(p->ptr), wsa__Relationship);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__Relationship*>(p->ptr), wsa__Relationship);
		break;
	case SOAP_TYPE_wsa__ReplyAfterType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__ReplyAfterType*>(p->ptr), wsa__ReplyAfterType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__ReplyAfterType*>(p->ptr), wsa__ReplyAfterType);
		break;
	case SOAP_TYPE_wsa__RetryAfterType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__RetryAfterType*>(p->ptr), wsa__RetryAfterType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__RetryAfterType*>(p->ptr), wsa__RetryAfterType);
		break;
	case SOAP_TYPE_wsa__AttributedQName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__AttributedQName*>(p->ptr), wsa__AttributedQName);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__AttributedQName*>(p->ptr), wsa__AttributedQName);
		break;
	case SOAP_TYPE_wsa__AttributedURI:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		break;
	case SOAP_TYPE_tt__OSDReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__OSDReference*>(p->ptr), tt__OSDReference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__OSDReference*>(p->ptr), tt__OSDReference);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
	case SOAP_TYPE___tds__GetServices:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetServices*>(p->ptr), struct __tds__GetServices);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetServices*>(p->ptr), struct __tds__GetServices);
		break;
	case SOAP_TYPE___tds__GetServiceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetServiceCapabilities*>(p->ptr), struct __tds__GetServiceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetServiceCapabilities*>(p->ptr), struct __tds__GetServiceCapabilities);
		break;
	case SOAP_TYPE___tds__GetDeviceInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDeviceInformation*>(p->ptr), struct __tds__GetDeviceInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDeviceInformation*>(p->ptr), struct __tds__GetDeviceInformation);
		break;
	case SOAP_TYPE___tds__SetSystemDateAndTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetSystemDateAndTime*>(p->ptr), struct __tds__SetSystemDateAndTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetSystemDateAndTime*>(p->ptr), struct __tds__SetSystemDateAndTime);
		break;
	case SOAP_TYPE___tds__GetSystemDateAndTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetSystemDateAndTime*>(p->ptr), struct __tds__GetSystemDateAndTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetSystemDateAndTime*>(p->ptr), struct __tds__GetSystemDateAndTime);
		break;
	case SOAP_TYPE___tds__SetSystemFactoryDefault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetSystemFactoryDefault*>(p->ptr), struct __tds__SetSystemFactoryDefault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetSystemFactoryDefault*>(p->ptr), struct __tds__SetSystemFactoryDefault);
		break;
	case SOAP_TYPE___tds__UpgradeSystemFirmware:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__UpgradeSystemFirmware*>(p->ptr), struct __tds__UpgradeSystemFirmware);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__UpgradeSystemFirmware*>(p->ptr), struct __tds__UpgradeSystemFirmware);
		break;
	case SOAP_TYPE___tds__SystemReboot:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SystemReboot*>(p->ptr), struct __tds__SystemReboot);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SystemReboot*>(p->ptr), struct __tds__SystemReboot);
		break;
	case SOAP_TYPE___tds__RestoreSystem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__RestoreSystem*>(p->ptr), struct __tds__RestoreSystem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__RestoreSystem*>(p->ptr), struct __tds__RestoreSystem);
		break;
	case SOAP_TYPE___tds__GetSystemBackup:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetSystemBackup*>(p->ptr), struct __tds__GetSystemBackup);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetSystemBackup*>(p->ptr), struct __tds__GetSystemBackup);
		break;
	case SOAP_TYPE___tds__GetSystemLog:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetSystemLog*>(p->ptr), struct __tds__GetSystemLog);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetSystemLog*>(p->ptr), struct __tds__GetSystemLog);
		break;
	case SOAP_TYPE___tds__GetSystemSupportInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetSystemSupportInformation*>(p->ptr), struct __tds__GetSystemSupportInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetSystemSupportInformation*>(p->ptr), struct __tds__GetSystemSupportInformation);
		break;
	case SOAP_TYPE___tds__GetScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetScopes*>(p->ptr), struct __tds__GetScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetScopes*>(p->ptr), struct __tds__GetScopes);
		break;
	case SOAP_TYPE___tds__SetScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetScopes*>(p->ptr), struct __tds__SetScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetScopes*>(p->ptr), struct __tds__SetScopes);
		break;
	case SOAP_TYPE___tds__AddScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__AddScopes*>(p->ptr), struct __tds__AddScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__AddScopes*>(p->ptr), struct __tds__AddScopes);
		break;
	case SOAP_TYPE___tds__RemoveScopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__RemoveScopes*>(p->ptr), struct __tds__RemoveScopes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__RemoveScopes*>(p->ptr), struct __tds__RemoveScopes);
		break;
	case SOAP_TYPE___tds__GetDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDiscoveryMode*>(p->ptr), struct __tds__GetDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDiscoveryMode*>(p->ptr), struct __tds__GetDiscoveryMode);
		break;
	case SOAP_TYPE___tds__SetDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetDiscoveryMode*>(p->ptr), struct __tds__SetDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetDiscoveryMode*>(p->ptr), struct __tds__SetDiscoveryMode);
		break;
	case SOAP_TYPE___tds__GetRemoteDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetRemoteDiscoveryMode*>(p->ptr), struct __tds__GetRemoteDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetRemoteDiscoveryMode*>(p->ptr), struct __tds__GetRemoteDiscoveryMode);
		break;
	case SOAP_TYPE___tds__SetRemoteDiscoveryMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetRemoteDiscoveryMode*>(p->ptr), struct __tds__SetRemoteDiscoveryMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetRemoteDiscoveryMode*>(p->ptr), struct __tds__SetRemoteDiscoveryMode);
		break;
	case SOAP_TYPE___tds__GetDPAddresses:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDPAddresses*>(p->ptr), struct __tds__GetDPAddresses);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDPAddresses*>(p->ptr), struct __tds__GetDPAddresses);
		break;
	case SOAP_TYPE___tds__GetEndpointReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetEndpointReference*>(p->ptr), struct __tds__GetEndpointReference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetEndpointReference*>(p->ptr), struct __tds__GetEndpointReference);
		break;
	case SOAP_TYPE___tds__GetRemoteUser:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetRemoteUser*>(p->ptr), struct __tds__GetRemoteUser);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetRemoteUser*>(p->ptr), struct __tds__GetRemoteUser);
		break;
	case SOAP_TYPE___tds__SetRemoteUser:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetRemoteUser*>(p->ptr), struct __tds__SetRemoteUser);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetRemoteUser*>(p->ptr), struct __tds__SetRemoteUser);
		break;
	case SOAP_TYPE___tds__GetUsers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetUsers*>(p->ptr), struct __tds__GetUsers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetUsers*>(p->ptr), struct __tds__GetUsers);
		break;
	case SOAP_TYPE___tds__CreateUsers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__CreateUsers*>(p->ptr), struct __tds__CreateUsers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__CreateUsers*>(p->ptr), struct __tds__CreateUsers);
		break;
	case SOAP_TYPE___tds__DeleteUsers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__DeleteUsers*>(p->ptr), struct __tds__DeleteUsers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__DeleteUsers*>(p->ptr), struct __tds__DeleteUsers);
		break;
	case SOAP_TYPE___tds__SetUser:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetUser*>(p->ptr), struct __tds__SetUser);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetUser*>(p->ptr), struct __tds__SetUser);
		break;
	case SOAP_TYPE___tds__GetWsdlUrl:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetWsdlUrl*>(p->ptr), struct __tds__GetWsdlUrl);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetWsdlUrl*>(p->ptr), struct __tds__GetWsdlUrl);
		break;
	case SOAP_TYPE___tds__GetCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetCapabilities*>(p->ptr), struct __tds__GetCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetCapabilities*>(p->ptr), struct __tds__GetCapabilities);
		break;
	case SOAP_TYPE___tds__SetDPAddresses:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetDPAddresses*>(p->ptr), struct __tds__SetDPAddresses);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetDPAddresses*>(p->ptr), struct __tds__SetDPAddresses);
		break;
	case SOAP_TYPE___tds__GetHostname:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetHostname*>(p->ptr), struct __tds__GetHostname);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetHostname*>(p->ptr), struct __tds__GetHostname);
		break;
	case SOAP_TYPE___tds__SetHostname:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetHostname*>(p->ptr), struct __tds__SetHostname);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetHostname*>(p->ptr), struct __tds__SetHostname);
		break;
	case SOAP_TYPE___tds__SetHostnameFromDHCP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetHostnameFromDHCP*>(p->ptr), struct __tds__SetHostnameFromDHCP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetHostnameFromDHCP*>(p->ptr), struct __tds__SetHostnameFromDHCP);
		break;
	case SOAP_TYPE___tds__GetDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDNS*>(p->ptr), struct __tds__GetDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDNS*>(p->ptr), struct __tds__GetDNS);
		break;
	case SOAP_TYPE___tds__SetDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetDNS*>(p->ptr), struct __tds__SetDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetDNS*>(p->ptr), struct __tds__SetDNS);
		break;
	case SOAP_TYPE___tds__GetNTP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetNTP*>(p->ptr), struct __tds__GetNTP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetNTP*>(p->ptr), struct __tds__GetNTP);
		break;
	case SOAP_TYPE___tds__SetNTP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetNTP*>(p->ptr), struct __tds__SetNTP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetNTP*>(p->ptr), struct __tds__SetNTP);
		break;
	case SOAP_TYPE___tds__GetDynamicDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDynamicDNS*>(p->ptr), struct __tds__GetDynamicDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDynamicDNS*>(p->ptr), struct __tds__GetDynamicDNS);
		break;
	case SOAP_TYPE___tds__SetDynamicDNS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetDynamicDNS*>(p->ptr), struct __tds__SetDynamicDNS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetDynamicDNS*>(p->ptr), struct __tds__SetDynamicDNS);
		break;
	case SOAP_TYPE___tds__GetNetworkInterfaces:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetNetworkInterfaces*>(p->ptr), struct __tds__GetNetworkInterfaces);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetNetworkInterfaces*>(p->ptr), struct __tds__GetNetworkInterfaces);
		break;
	case SOAP_TYPE___tds__SetNetworkInterfaces:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetNetworkInterfaces*>(p->ptr), struct __tds__SetNetworkInterfaces);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetNetworkInterfaces*>(p->ptr), struct __tds__SetNetworkInterfaces);
		break;
	case SOAP_TYPE___tds__GetNetworkProtocols:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetNetworkProtocols*>(p->ptr), struct __tds__GetNetworkProtocols);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetNetworkProtocols*>(p->ptr), struct __tds__GetNetworkProtocols);
		break;
	case SOAP_TYPE___tds__SetNetworkProtocols:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetNetworkProtocols*>(p->ptr), struct __tds__SetNetworkProtocols);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetNetworkProtocols*>(p->ptr), struct __tds__SetNetworkProtocols);
		break;
	case SOAP_TYPE___tds__GetNetworkDefaultGateway:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetNetworkDefaultGateway*>(p->ptr), struct __tds__GetNetworkDefaultGateway);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetNetworkDefaultGateway*>(p->ptr), struct __tds__GetNetworkDefaultGateway);
		break;
	case SOAP_TYPE___tds__SetNetworkDefaultGateway:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetNetworkDefaultGateway*>(p->ptr), struct __tds__SetNetworkDefaultGateway);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetNetworkDefaultGateway*>(p->ptr), struct __tds__SetNetworkDefaultGateway);
		break;
	case SOAP_TYPE___tds__GetZeroConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetZeroConfiguration*>(p->ptr), struct __tds__GetZeroConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetZeroConfiguration*>(p->ptr), struct __tds__GetZeroConfiguration);
		break;
	case SOAP_TYPE___tds__SetZeroConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetZeroConfiguration*>(p->ptr), struct __tds__SetZeroConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetZeroConfiguration*>(p->ptr), struct __tds__SetZeroConfiguration);
		break;
	case SOAP_TYPE___tds__GetIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetIPAddressFilter*>(p->ptr), struct __tds__GetIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetIPAddressFilter*>(p->ptr), struct __tds__GetIPAddressFilter);
		break;
	case SOAP_TYPE___tds__SetIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetIPAddressFilter*>(p->ptr), struct __tds__SetIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetIPAddressFilter*>(p->ptr), struct __tds__SetIPAddressFilter);
		break;
	case SOAP_TYPE___tds__AddIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__AddIPAddressFilter*>(p->ptr), struct __tds__AddIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__AddIPAddressFilter*>(p->ptr), struct __tds__AddIPAddressFilter);
		break;
	case SOAP_TYPE___tds__RemoveIPAddressFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__RemoveIPAddressFilter*>(p->ptr), struct __tds__RemoveIPAddressFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__RemoveIPAddressFilter*>(p->ptr), struct __tds__RemoveIPAddressFilter);
		break;
	case SOAP_TYPE___tds__GetAccessPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetAccessPolicy*>(p->ptr), struct __tds__GetAccessPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetAccessPolicy*>(p->ptr), struct __tds__GetAccessPolicy);
		break;
	case SOAP_TYPE___tds__SetAccessPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetAccessPolicy*>(p->ptr), struct __tds__SetAccessPolicy);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetAccessPolicy*>(p->ptr), struct __tds__SetAccessPolicy);
		break;
	case SOAP_TYPE___tds__CreateCertificate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__CreateCertificate*>(p->ptr), struct __tds__CreateCertificate);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__CreateCertificate*>(p->ptr), struct __tds__CreateCertificate);
		break;
	case SOAP_TYPE___tds__GetCertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetCertificates*>(p->ptr), struct __tds__GetCertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetCertificates*>(p->ptr), struct __tds__GetCertificates);
		break;
	case SOAP_TYPE___tds__GetCertificatesStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetCertificatesStatus*>(p->ptr), struct __tds__GetCertificatesStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetCertificatesStatus*>(p->ptr), struct __tds__GetCertificatesStatus);
		break;
	case SOAP_TYPE___tds__SetCertificatesStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetCertificatesStatus*>(p->ptr), struct __tds__SetCertificatesStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetCertificatesStatus*>(p->ptr), struct __tds__SetCertificatesStatus);
		break;
	case SOAP_TYPE___tds__DeleteCertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__DeleteCertificates*>(p->ptr), struct __tds__DeleteCertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__DeleteCertificates*>(p->ptr), struct __tds__DeleteCertificates);
		break;
	case SOAP_TYPE___tds__GetPkcs10Request:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetPkcs10Request*>(p->ptr), struct __tds__GetPkcs10Request);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetPkcs10Request*>(p->ptr), struct __tds__GetPkcs10Request);
		break;
	case SOAP_TYPE___tds__LoadCertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__LoadCertificates*>(p->ptr), struct __tds__LoadCertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__LoadCertificates*>(p->ptr), struct __tds__LoadCertificates);
		break;
	case SOAP_TYPE___tds__GetClientCertificateMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetClientCertificateMode*>(p->ptr), struct __tds__GetClientCertificateMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetClientCertificateMode*>(p->ptr), struct __tds__GetClientCertificateMode);
		break;
	case SOAP_TYPE___tds__SetClientCertificateMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetClientCertificateMode*>(p->ptr), struct __tds__SetClientCertificateMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetClientCertificateMode*>(p->ptr), struct __tds__SetClientCertificateMode);
		break;
	case SOAP_TYPE___tds__GetRelayOutputs:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetRelayOutputs*>(p->ptr), struct __tds__GetRelayOutputs);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetRelayOutputs*>(p->ptr), struct __tds__GetRelayOutputs);
		break;
	case SOAP_TYPE___tds__SetRelayOutputSettings:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetRelayOutputSettings*>(p->ptr), struct __tds__SetRelayOutputSettings);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetRelayOutputSettings*>(p->ptr), struct __tds__SetRelayOutputSettings);
		break;
	case SOAP_TYPE___tds__SetRelayOutputState:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetRelayOutputState*>(p->ptr), struct __tds__SetRelayOutputState);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetRelayOutputState*>(p->ptr), struct __tds__SetRelayOutputState);
		break;
	case SOAP_TYPE___tds__SendAuxiliaryCommand:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SendAuxiliaryCommand*>(p->ptr), struct __tds__SendAuxiliaryCommand);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SendAuxiliaryCommand*>(p->ptr), struct __tds__SendAuxiliaryCommand);
		break;
	case SOAP_TYPE___tds__GetCACertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetCACertificates*>(p->ptr), struct __tds__GetCACertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetCACertificates*>(p->ptr), struct __tds__GetCACertificates);
		break;
	case SOAP_TYPE___tds__LoadCertificateWithPrivateKey:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__LoadCertificateWithPrivateKey*>(p->ptr), struct __tds__LoadCertificateWithPrivateKey);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__LoadCertificateWithPrivateKey*>(p->ptr), struct __tds__LoadCertificateWithPrivateKey);
		break;
	case SOAP_TYPE___tds__GetCertificateInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetCertificateInformation*>(p->ptr), struct __tds__GetCertificateInformation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetCertificateInformation*>(p->ptr), struct __tds__GetCertificateInformation);
		break;
	case SOAP_TYPE___tds__LoadCACertificates:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__LoadCACertificates*>(p->ptr), struct __tds__LoadCACertificates);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__LoadCACertificates*>(p->ptr), struct __tds__LoadCACertificates);
		break;
	case SOAP_TYPE___tds__CreateDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__CreateDot1XConfiguration*>(p->ptr), struct __tds__CreateDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__CreateDot1XConfiguration*>(p->ptr), struct __tds__CreateDot1XConfiguration);
		break;
	case SOAP_TYPE___tds__SetDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetDot1XConfiguration*>(p->ptr), struct __tds__SetDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetDot1XConfiguration*>(p->ptr), struct __tds__SetDot1XConfiguration);
		break;
	case SOAP_TYPE___tds__GetDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDot1XConfiguration*>(p->ptr), struct __tds__GetDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDot1XConfiguration*>(p->ptr), struct __tds__GetDot1XConfiguration);
		break;
	case SOAP_TYPE___tds__GetDot1XConfigurations:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDot1XConfigurations*>(p->ptr), struct __tds__GetDot1XConfigurations);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDot1XConfigurations*>(p->ptr), struct __tds__GetDot1XConfigurations);
		break;
	case SOAP_TYPE___tds__DeleteDot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__DeleteDot1XConfiguration*>(p->ptr), struct __tds__DeleteDot1XConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__DeleteDot1XConfiguration*>(p->ptr), struct __tds__DeleteDot1XConfiguration);
		break;
	case SOAP_TYPE___tds__GetDot11Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDot11Capabilities*>(p->ptr), struct __tds__GetDot11Capabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDot11Capabilities*>(p->ptr), struct __tds__GetDot11Capabilities);
		break;
	case SOAP_TYPE___tds__GetDot11Status:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetDot11Status*>(p->ptr), struct __tds__GetDot11Status);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetDot11Status*>(p->ptr), struct __tds__GetDot11Status);
		break;
	case SOAP_TYPE___tds__ScanAvailableDot11Networks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__ScanAvailableDot11Networks*>(p->ptr), struct __tds__ScanAvailableDot11Networks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__ScanAvailableDot11Networks*>(p->ptr), struct __tds__ScanAvailableDot11Networks);
		break;
	case SOAP_TYPE___tds__GetSystemUris:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetSystemUris*>(p->ptr), struct __tds__GetSystemUris);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetSystemUris*>(p->ptr), struct __tds__GetSystemUris);
		break;
	case SOAP_TYPE___tds__StartFirmwareUpgrade:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__StartFirmwareUpgrade*>(p->ptr), struct __tds__StartFirmwareUpgrade);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__StartFirmwareUpgrade*>(p->ptr), struct __tds__StartFirmwareUpgrade);
		break;
	case SOAP_TYPE___tds__StartSystemRestore:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__StartSystemRestore*>(p->ptr), struct __tds__StartSystemRestore);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__StartSystemRestore*>(p->ptr), struct __tds__StartSystemRestore);
		break;
	case SOAP_TYPE___tds__GetStorageConfigurations:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetStorageConfigurations*>(p->ptr), struct __tds__GetStorageConfigurations);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetStorageConfigurations*>(p->ptr), struct __tds__GetStorageConfigurations);
		break;
	case SOAP_TYPE___tds__CreateStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__CreateStorageConfiguration*>(p->ptr), struct __tds__CreateStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__CreateStorageConfiguration*>(p->ptr), struct __tds__CreateStorageConfiguration);
		break;
	case SOAP_TYPE___tds__GetStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetStorageConfiguration*>(p->ptr), struct __tds__GetStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetStorageConfiguration*>(p->ptr), struct __tds__GetStorageConfiguration);
		break;
	case SOAP_TYPE___tds__SetStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetStorageConfiguration*>(p->ptr), struct __tds__SetStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetStorageConfiguration*>(p->ptr), struct __tds__SetStorageConfiguration);
		break;
	case SOAP_TYPE___tds__DeleteStorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__DeleteStorageConfiguration*>(p->ptr), struct __tds__DeleteStorageConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__DeleteStorageConfiguration*>(p->ptr), struct __tds__DeleteStorageConfiguration);
		break;
	case SOAP_TYPE___tds__GetGeoLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__GetGeoLocation*>(p->ptr), struct __tds__GetGeoLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__GetGeoLocation*>(p->ptr), struct __tds__GetGeoLocation);
		break;
	case SOAP_TYPE___tds__SetGeoLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__SetGeoLocation*>(p->ptr), struct __tds__SetGeoLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__SetGeoLocation*>(p->ptr), struct __tds__SetGeoLocation);
		break;
	case SOAP_TYPE___tds__DeleteGeoLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tds__DeleteGeoLocation*>(p->ptr), struct __tds__DeleteGeoLocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tds__DeleteGeoLocation*>(p->ptr), struct __tds__DeleteGeoLocation);
		break;
	case SOAP_TYPE___tevcppb__CreatePullPoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevcppb__CreatePullPoint*>(p->ptr), struct __tevcppb__CreatePullPoint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevcppb__CreatePullPoint*>(p->ptr), struct __tevcppb__CreatePullPoint);
		break;
	case SOAP_TYPE___teveb__GetServiceCapabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __teveb__GetServiceCapabilities*>(p->ptr), struct __teveb__GetServiceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __teveb__GetServiceCapabilities*>(p->ptr), struct __teveb__GetServiceCapabilities);
		break;
	case SOAP_TYPE___teveb__CreatePullPointSubscription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __teveb__CreatePullPointSubscription*>(p->ptr), struct __teveb__CreatePullPointSubscription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __teveb__CreatePullPointSubscription*>(p->ptr), struct __teveb__CreatePullPointSubscription);
		break;
	case SOAP_TYPE___teveb__GetEventProperties:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __teveb__GetEventProperties*>(p->ptr), struct __teveb__GetEventProperties);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __teveb__GetEventProperties*>(p->ptr), struct __teveb__GetEventProperties);
		break;
	case SOAP_TYPE___tevncb__Notify:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevncb__Notify*>(p->ptr), struct __tevncb__Notify);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevncb__Notify*>(p->ptr), struct __tevncb__Notify);
		break;
	case SOAP_TYPE___tevnpb__Subscribe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevnpb__Subscribe*>(p->ptr), struct __tevnpb__Subscribe);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevnpb__Subscribe*>(p->ptr), struct __tevnpb__Subscribe);
		break;
	case SOAP_TYPE___tevnpb__GetCurrentMessage:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevnpb__GetCurrentMessage*>(p->ptr), struct __tevnpb__GetCurrentMessage);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevnpb__GetCurrentMessage*>(p->ptr), struct __tevnpb__GetCurrentMessage);
		break;
	case SOAP_TYPE___tevppb__GetMessages:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevppb__GetMessages*>(p->ptr), struct __tevppb__GetMessages);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevppb__GetMessages*>(p->ptr), struct __tevppb__GetMessages);
		break;
	case SOAP_TYPE___tevppb__DestroyPullPoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevppb__DestroyPullPoint*>(p->ptr), struct __tevppb__DestroyPullPoint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevppb__DestroyPullPoint*>(p->ptr), struct __tevppb__DestroyPullPoint);
		break;
	case SOAP_TYPE___tevppb__Notify:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevppb__Notify*>(p->ptr), struct __tevppb__Notify);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevppb__Notify*>(p->ptr), struct __tevppb__Notify);
		break;
	case SOAP_TYPE___tevpps__PullMessages:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpps__PullMessages*>(p->ptr), struct __tevpps__PullMessages);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpps__PullMessages*>(p->ptr), struct __tevpps__PullMessages);
		break;
	case SOAP_TYPE___tevpps__Seek:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpps__Seek*>(p->ptr), struct __tevpps__Seek);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpps__Seek*>(p->ptr), struct __tevpps__Seek);
		break;
	case SOAP_TYPE___tevpps__SetSynchronizationPoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpps__SetSynchronizationPoint*>(p->ptr), struct __tevpps__SetSynchronizationPoint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpps__SetSynchronizationPoint*>(p->ptr), struct __tevpps__SetSynchronizationPoint);
		break;
	case SOAP_TYPE___tevpps__Unsubscribe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpps__Unsubscribe*>(p->ptr), struct __tevpps__Unsubscribe);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpps__Unsubscribe*>(p->ptr), struct __tevpps__Unsubscribe);
		break;
	case SOAP_TYPE___tevpsmb__Renew:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpsmb__Renew*>(p->ptr), struct __tevpsmb__Renew);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpsmb__Renew*>(p->ptr), struct __tevpsmb__Renew);
		break;
	case SOAP_TYPE___tevpsmb__Unsubscribe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpsmb__Unsubscribe*>(p->ptr), struct __tevpsmb__Unsubscribe);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpsmb__Unsubscribe*>(p->ptr), struct __tevpsmb__Unsubscribe);
		break;
	case SOAP_TYPE___tevpsmb__PauseSubscription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpsmb__PauseSubscription*>(p->ptr), struct __tevpsmb__PauseSubscription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpsmb__PauseSubscription*>(p->ptr), struct __tevpsmb__PauseSubscription);
		break;
	case SOAP_TYPE___tevpsmb__ResumeSubscription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevpsmb__ResumeSubscription*>(p->ptr), struct __tevpsmb__ResumeSubscription);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevpsmb__ResumeSubscription*>(p->ptr), struct __tevpsmb__ResumeSubscription);
		break;
	case SOAP_TYPE___tevsmb__Renew:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevsmb__Renew*>(p->ptr), struct __tevsmb__Renew);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevsmb__Renew*>(p->ptr), struct __tevsmb__Renew);
		break;
	case SOAP_TYPE___tevsmb__Unsubscribe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __tevsmb__Unsubscribe*>(p->ptr), struct __tevsmb__Unsubscribe);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __tevsmb__Unsubscribe*>(p->ptr), struct __tevsmb__Unsubscribe);
		break;
	case SOAP_TYPE__wsu__Timestamp:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsu__Timestamp*>(p->ptr), struct _wsu__Timestamp);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsu__Timestamp*>(p->ptr), struct _wsu__Timestamp);
		break;
	case SOAP_TYPE_wsse__EncodedString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsse__EncodedString*>(p->ptr), struct wsse__EncodedString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsse__EncodedString*>(p->ptr), struct wsse__EncodedString);
		break;
	case SOAP_TYPE__wsse__UsernameToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__UsernameToken*>(p->ptr), struct _wsse__UsernameToken);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__UsernameToken*>(p->ptr), struct _wsse__UsernameToken);
		break;
	case SOAP_TYPE__wsse__BinarySecurityToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__BinarySecurityToken*>(p->ptr), struct _wsse__BinarySecurityToken);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__BinarySecurityToken*>(p->ptr), struct _wsse__BinarySecurityToken);
		break;
	case SOAP_TYPE__wsse__Reference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Reference*>(p->ptr), struct _wsse__Reference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Reference*>(p->ptr), struct _wsse__Reference);
		break;
	case SOAP_TYPE__wsse__Embedded:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Embedded*>(p->ptr), struct _wsse__Embedded);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Embedded*>(p->ptr), struct _wsse__Embedded);
		break;
	case SOAP_TYPE__wsse__KeyIdentifier:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__KeyIdentifier*>(p->ptr), struct _wsse__KeyIdentifier);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__KeyIdentifier*>(p->ptr), struct _wsse__KeyIdentifier);
		break;
	case SOAP_TYPE__wsse__SecurityTokenReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__SecurityTokenReference*>(p->ptr), struct _wsse__SecurityTokenReference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__SecurityTokenReference*>(p->ptr), struct _wsse__SecurityTokenReference);
		break;
	case SOAP_TYPE_ds__SignatureType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		break;
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _c14n__InclusiveNamespaces*>(p->ptr), struct _c14n__InclusiveNamespaces);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _c14n__InclusiveNamespaces*>(p->ptr), struct _c14n__InclusiveNamespaces);
		break;
	case SOAP_TYPE_ds__TransformType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		break;
	case SOAP_TYPE_ds__KeyInfoType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		break;
	case SOAP_TYPE_ds__SignedInfoType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignedInfoType*>(p->ptr), struct ds__SignedInfoType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignedInfoType*>(p->ptr), struct ds__SignedInfoType);
		break;
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__CanonicalizationMethodType*>(p->ptr), struct ds__CanonicalizationMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__CanonicalizationMethodType*>(p->ptr), struct ds__CanonicalizationMethodType);
		break;
	case SOAP_TYPE_ds__SignatureMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignatureMethodType*>(p->ptr), struct ds__SignatureMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignatureMethodType*>(p->ptr), struct ds__SignatureMethodType);
		break;
	case SOAP_TYPE_ds__ReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__ReferenceType*>(p->ptr), struct ds__ReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__ReferenceType*>(p->ptr), struct ds__ReferenceType);
		break;
	case SOAP_TYPE_ds__TransformsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__TransformsType*>(p->ptr), struct ds__TransformsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__TransformsType*>(p->ptr), struct ds__TransformsType);
		break;
	case SOAP_TYPE_ds__DigestMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__DigestMethodType*>(p->ptr), struct ds__DigestMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__DigestMethodType*>(p->ptr), struct ds__DigestMethodType);
		break;
	case SOAP_TYPE_ds__KeyValueType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__KeyValueType*>(p->ptr), struct ds__KeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__KeyValueType*>(p->ptr), struct ds__KeyValueType);
		break;
	case SOAP_TYPE_ds__RetrievalMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__RetrievalMethodType*>(p->ptr), struct ds__RetrievalMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__RetrievalMethodType*>(p->ptr), struct ds__RetrievalMethodType);
		break;
	case SOAP_TYPE_ds__X509DataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__X509DataType*>(p->ptr), struct ds__X509DataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__X509DataType*>(p->ptr), struct ds__X509DataType);
		break;
	case SOAP_TYPE_ds__X509IssuerSerialType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__X509IssuerSerialType*>(p->ptr), struct ds__X509IssuerSerialType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__X509IssuerSerialType*>(p->ptr), struct ds__X509IssuerSerialType);
		break;
	case SOAP_TYPE_ds__DSAKeyValueType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__DSAKeyValueType*>(p->ptr), struct ds__DSAKeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__DSAKeyValueType*>(p->ptr), struct ds__DSAKeyValueType);
		break;
	case SOAP_TYPE_ds__RSAKeyValueType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__RSAKeyValueType*>(p->ptr), struct ds__RSAKeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__RSAKeyValueType*>(p->ptr), struct ds__RSAKeyValueType);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionPropertyType*>(p->ptr), struct xenc__EncryptionPropertyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionPropertyType*>(p->ptr), struct xenc__EncryptionPropertyType);
		break;
	case SOAP_TYPE_xenc__EncryptedType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptedType*>(p->ptr), struct xenc__EncryptedType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptedType*>(p->ptr), struct xenc__EncryptedType);
		break;
	case SOAP_TYPE_xenc__EncryptionMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionMethodType*>(p->ptr), struct xenc__EncryptionMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionMethodType*>(p->ptr), struct xenc__EncryptionMethodType);
		break;
	case SOAP_TYPE_xenc__CipherDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__CipherDataType*>(p->ptr), struct xenc__CipherDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__CipherDataType*>(p->ptr), struct xenc__CipherDataType);
		break;
	case SOAP_TYPE_xenc__CipherReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__CipherReferenceType*>(p->ptr), struct xenc__CipherReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__CipherReferenceType*>(p->ptr), struct xenc__CipherReferenceType);
		break;
	case SOAP_TYPE_xenc__TransformsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__TransformsType*>(p->ptr), struct xenc__TransformsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__TransformsType*>(p->ptr), struct xenc__TransformsType);
		break;
	case SOAP_TYPE_xenc__AgreementMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__AgreementMethodType*>(p->ptr), struct xenc__AgreementMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__AgreementMethodType*>(p->ptr), struct xenc__AgreementMethodType);
		break;
	case SOAP_TYPE_xenc__ReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__ReferenceType*>(p->ptr), struct xenc__ReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__ReferenceType*>(p->ptr), struct xenc__ReferenceType);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionPropertiesType*>(p->ptr), struct xenc__EncryptionPropertiesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionPropertiesType*>(p->ptr), struct xenc__EncryptionPropertiesType);
		break;
	case SOAP_TYPE___xenc__union_ReferenceList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __xenc__union_ReferenceList*>(p->ptr), struct __xenc__union_ReferenceList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __xenc__union_ReferenceList*>(p->ptr), struct __xenc__union_ReferenceList);
		break;
	case SOAP_TYPE__xenc__ReferenceList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _xenc__ReferenceList*>(p->ptr), struct _xenc__ReferenceList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _xenc__ReferenceList*>(p->ptr), struct _xenc__ReferenceList);
		break;
	case SOAP_TYPE_xenc__EncryptedDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptedDataType*>(p->ptr), struct xenc__EncryptedDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptedDataType*>(p->ptr), struct xenc__EncryptedDataType);
		break;
	case SOAP_TYPE_xenc__EncryptedKeyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptedKeyType*>(p->ptr), struct xenc__EncryptedKeyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptedKeyType*>(p->ptr), struct xenc__EncryptedKeyType);
		break;
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsc__SecurityContextTokenType*>(p->ptr), struct wsc__SecurityContextTokenType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsc__SecurityContextTokenType*>(p->ptr), struct wsc__SecurityContextTokenType);
		break;
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __wsc__DerivedKeyTokenType_sequence*>(p->ptr), struct __wsc__DerivedKeyTokenType_sequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __wsc__DerivedKeyTokenType_sequence*>(p->ptr), struct __wsc__DerivedKeyTokenType_sequence);
		break;
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsc__DerivedKeyTokenType*>(p->ptr), struct wsc__DerivedKeyTokenType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsc__DerivedKeyTokenType*>(p->ptr), struct wsc__DerivedKeyTokenType);
		break;
	case SOAP_TYPE_wsc__PropertiesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsc__PropertiesType*>(p->ptr), struct wsc__PropertiesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsc__PropertiesType*>(p->ptr), struct wsc__PropertiesType);
		break;
	case SOAP_TYPE___saml1__union_AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_AssertionType*>(p->ptr), struct __saml1__union_AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_AssertionType*>(p->ptr), struct __saml1__union_AssertionType);
		break;
	case SOAP_TYPE_saml1__AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		break;
	case SOAP_TYPE___saml1__union_ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_ConditionsType*>(p->ptr), struct __saml1__union_ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_ConditionsType*>(p->ptr), struct __saml1__union_ConditionsType);
		break;
	case SOAP_TYPE_saml1__ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		break;
	case SOAP_TYPE_saml1__ConditionAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		break;
	case SOAP_TYPE___saml1__union_AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_AdviceType*>(p->ptr), struct __saml1__union_AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_AdviceType*>(p->ptr), struct __saml1__union_AdviceType);
		break;
	case SOAP_TYPE_saml1__AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		break;
	case SOAP_TYPE_saml1__StatementAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		break;
	case SOAP_TYPE_saml1__SubjectType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		break;
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		break;
	case SOAP_TYPE_saml1__SubjectLocalityType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		break;
	case SOAP_TYPE_saml1__AuthorityBindingType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		break;
	case SOAP_TYPE___saml1__union_EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_EvidenceType*>(p->ptr), struct __saml1__union_EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_EvidenceType*>(p->ptr), struct __saml1__union_EvidenceType);
		break;
	case SOAP_TYPE_saml1__EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		break;
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		break;
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		break;
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		break;
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		break;
	case SOAP_TYPE_saml1__NameIdentifierType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		break;
	case SOAP_TYPE_saml1__ActionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		break;
	case SOAP_TYPE_saml1__AttributeType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		break;
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		break;
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		break;
	case SOAP_TYPE_saml1__AttributeStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		break;
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		break;
	case SOAP_TYPE_saml2__EncryptedElementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	case SOAP_TYPE___saml2__union_AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_AssertionType*>(p->ptr), struct __saml2__union_AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_AssertionType*>(p->ptr), struct __saml2__union_AssertionType);
		break;
	case SOAP_TYPE_saml2__AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		break;
	case SOAP_TYPE_saml2__SubjectType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		break;
	case SOAP_TYPE___saml2__union_ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_ConditionsType*>(p->ptr), struct __saml2__union_ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_ConditionsType*>(p->ptr), struct __saml2__union_ConditionsType);
		break;
	case SOAP_TYPE_saml2__ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		break;
	case SOAP_TYPE_saml2__ConditionAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		break;
	case SOAP_TYPE___saml2__union_AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_AdviceType*>(p->ptr), struct __saml2__union_AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_AdviceType*>(p->ptr), struct __saml2__union_AdviceType);
		break;
	case SOAP_TYPE_saml2__AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		break;
	case SOAP_TYPE_saml2__StatementAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		break;
	case SOAP_TYPE_saml2__SubjectLocalityType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		break;
	case SOAP_TYPE_saml2__AuthnContextType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		break;
	case SOAP_TYPE___saml2__union_EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_EvidenceType*>(p->ptr), struct __saml2__union_EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_EvidenceType*>(p->ptr), struct __saml2__union_EvidenceType);
		break;
	case SOAP_TYPE_saml2__EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		break;
	case SOAP_TYPE_saml2__AttributeType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		break;
	case SOAP_TYPE_saml2__NameIDType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		break;
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		break;
	case SOAP_TYPE_saml2__OneTimeUseType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		break;
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		break;
	case SOAP_TYPE_saml2__AuthnStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		break;
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		break;
	case SOAP_TYPE_saml2__ActionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		break;
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_AttributeStatementType*>(p->ptr), struct __saml2__union_AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_AttributeStatementType*>(p->ptr), struct __saml2__union_AttributeStatementType);
		break;
	case SOAP_TYPE_saml2__AttributeStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		break;
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__KeyInfoConfirmationDataType*>(p->ptr), struct saml2__KeyInfoConfirmationDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__KeyInfoConfirmationDataType*>(p->ptr), struct saml2__KeyInfoConfirmationDataType);
		break;
	case SOAP_TYPE__wsse__Security:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Security*>(p->ptr), struct _wsse__Security);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Security*>(p->ptr), struct _wsse__Security);
		break;
	case SOAP_TYPE__wsse__Password:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Password*>(p->ptr), struct _wsse__Password);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Password*>(p->ptr), struct _wsse__Password);
		break;
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct soap_dom_element*>(p->ptr), struct soap_dom_element);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct soap_dom_element*>(p->ptr), struct soap_dom_element);
		break;
	case SOAP_TYPE_xsd__anyAttribute:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct soap_dom_attribute*>(p->ptr), struct soap_dom_attribute);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct soap_dom_attribute*>(p->ptr), struct soap_dom_attribute);
		break;
	case SOAP_TYPE__wsa5__EndpointReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa5__ReferenceParameters:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__ReferenceParametersType*>(p->ptr), struct wsa5__ReferenceParametersType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__ReferenceParametersType*>(p->ptr), struct wsa5__ReferenceParametersType);
		break;
	case SOAP_TYPE__wsa5__Metadata:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__MetadataType*>(p->ptr), struct wsa5__MetadataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__MetadataType*>(p->ptr), struct wsa5__MetadataType);
		break;
	case SOAP_TYPE__wsa5__RelatesTo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__RelatesToType*>(p->ptr), struct wsa5__RelatesToType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__RelatesToType*>(p->ptr), struct wsa5__RelatesToType);
		break;
	case SOAP_TYPE__wsa5__ReplyTo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa5__From:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa5__FaultTo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa5__ProblemAction:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__ProblemActionType*>(p->ptr), struct wsa5__ProblemActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__ProblemActionType*>(p->ptr), struct wsa5__ProblemActionType);
		break;
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		break;
	case SOAP_TYPE_xsd__duration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::chrono::nanoseconds*>(p->ptr), std::chrono::nanoseconds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::chrono::nanoseconds*>(p->ptr), std::chrono::nanoseconds);
		break;
	case SOAP_TYPE_SOAP_ENV__Envelope:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__ID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__IDREFS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__NCName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__token:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__xmime__contentType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__xml__lang:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tds__EAPMethodTypes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__IntAttrList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__FloatAttrList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__StringAttrList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__ReferenceTokenList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wsd__OpenRelationshipType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wsd__QNameListType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wsd__UriListType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wsd__FaultCodeOpenType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__Name:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__IPv4Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__IPv6Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__HwAddress:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__DNSName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__Domain:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__Dot11SSIDType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__hexBinary*>(p->ptr), xsd__hexBinary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__hexBinary*>(p->ptr), xsd__hexBinary);
		break;
	case SOAP_TYPE_tt__Dot11PSK:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__hexBinary*>(p->ptr), xsd__hexBinary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__hexBinary*>(p->ptr), xsd__hexBinary);
		break;
	case SOAP_TYPE_tt__Dot11PSKPassphrase:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__AuxiliaryData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__TopicNamespaceLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__Description:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__XPathExpression:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__RecordingJobMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__RecordingJobState:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__AudioClassType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__ReferenceToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wstop__FullTopicExpression:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__ReceiverReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__RecordingReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__TrackReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__JobToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tt__RecordingJobReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__tds__Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tds__DeviceServiceCapabilities*>(p->ptr), tds__DeviceServiceCapabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tds__DeviceServiceCapabilities*>(p->ptr), tds__DeviceServiceCapabilities);
		break;
	case SOAP_TYPE__tt__VideoSourceConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoSourceConfiguration*>(p->ptr), tt__VideoSourceConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoSourceConfiguration*>(p->ptr), tt__VideoSourceConfiguration);
		break;
	case SOAP_TYPE__tt__AudioSourceConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioSourceConfiguration*>(p->ptr), tt__AudioSourceConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioSourceConfiguration*>(p->ptr), tt__AudioSourceConfiguration);
		break;
	case SOAP_TYPE__tt__VideoEncoderConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoEncoderConfiguration*>(p->ptr), tt__VideoEncoderConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoEncoderConfiguration*>(p->ptr), tt__VideoEncoderConfiguration);
		break;
	case SOAP_TYPE__tt__AudioEncoderConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioEncoderConfiguration*>(p->ptr), tt__AudioEncoderConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioEncoderConfiguration*>(p->ptr), tt__AudioEncoderConfiguration);
		break;
	case SOAP_TYPE__tt__VideoAnalyticsConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__VideoAnalyticsConfiguration*>(p->ptr), tt__VideoAnalyticsConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__VideoAnalyticsConfiguration*>(p->ptr), tt__VideoAnalyticsConfiguration);
		break;
	case SOAP_TYPE__tt__PTZConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__PTZConfiguration*>(p->ptr), tt__PTZConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__PTZConfiguration*>(p->ptr), tt__PTZConfiguration);
		break;
	case SOAP_TYPE__tt__MetadataConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__MetadataConfiguration*>(p->ptr), tt__MetadataConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__MetadataConfiguration*>(p->ptr), tt__MetadataConfiguration);
		break;
	case SOAP_TYPE__tt__AudioOutputConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioOutputConfiguration*>(p->ptr), tt__AudioOutputConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioOutputConfiguration*>(p->ptr), tt__AudioOutputConfiguration);
		break;
	case SOAP_TYPE__tt__AudioDecoderConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__AudioDecoderConfiguration*>(p->ptr), tt__AudioDecoderConfiguration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__AudioDecoderConfiguration*>(p->ptr), tt__AudioDecoderConfiguration);
		break;
	case SOAP_TYPE__tt__Polyline:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Polyline*>(p->ptr), tt__Polyline);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Polyline*>(p->ptr), tt__Polyline);
		break;
	case SOAP_TYPE__tt__Polygon:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tt__Polygon*>(p->ptr), tt__Polygon);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tt__Polygon*>(p->ptr), tt__Polygon);
		break;
	case SOAP_TYPE__wsnt__TopicExpression:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__TopicExpressionTypeCustom*>(p->ptr), wsnt__TopicExpressionTypeCustom);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__TopicExpressionTypeCustom*>(p->ptr), wsnt__TopicExpressionTypeCustom);
		break;
	case SOAP_TYPE__wsnt__TopicExpressionDialect:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__wsnt__ConsumerReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsnt__Filter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__FilterType*>(p->ptr), wsnt__FilterType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__FilterType*>(p->ptr), wsnt__FilterType);
		break;
	case SOAP_TYPE__wsnt__SubscriptionPolicy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__SubscriptionPolicyType*>(p->ptr), wsnt__SubscriptionPolicyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__SubscriptionPolicyType*>(p->ptr), wsnt__SubscriptionPolicyType);
		break;
	case SOAP_TYPE__wsnt__CreationTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		break;
	case SOAP_TYPE__wsnt__SubscriptionReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsnt__Topic:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__TopicExpressionTypeCustom*>(p->ptr), wsnt__TopicExpressionTypeCustom);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__TopicExpressionTypeCustom*>(p->ptr), wsnt__TopicExpressionTypeCustom);
		break;
	case SOAP_TYPE__wsnt__ProducerReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsa5__EndpointReferenceType*>(p->ptr), struct wsa5__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsnt__NotificationMessage:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__NotificationMessageHolderType*>(p->ptr), wsnt__NotificationMessageHolderType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__NotificationMessageHolderType*>(p->ptr), wsnt__NotificationMessageHolderType);
		break;
	case SOAP_TYPE__wsnt__CurrentTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		break;
	case SOAP_TYPE__wsnt__TerminationTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct timeval*>(p->ptr), struct timeval);
		break;
	case SOAP_TYPE__wsnt__ProducerProperties:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__QueryExpressionType*>(p->ptr), wsnt__QueryExpressionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__QueryExpressionType*>(p->ptr), wsnt__QueryExpressionType);
		break;
	case SOAP_TYPE__wsnt__MessageContent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__QueryExpressionType*>(p->ptr), wsnt__QueryExpressionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__QueryExpressionType*>(p->ptr), wsnt__QueryExpressionType);
		break;
	case SOAP_TYPE__wsnt__SubscribeCreationFailedFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__SubscribeCreationFailedFaultType*>(p->ptr), wsnt__SubscribeCreationFailedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__SubscribeCreationFailedFaultType*>(p->ptr), wsnt__SubscribeCreationFailedFaultType);
		break;
	case SOAP_TYPE__wsnt__InvalidFilterFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidFilterFaultType*>(p->ptr), wsnt__InvalidFilterFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidFilterFaultType*>(p->ptr), wsnt__InvalidFilterFaultType);
		break;
	case SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__TopicExpressionDialectUnknownFaultType*>(p->ptr), wsnt__TopicExpressionDialectUnknownFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__TopicExpressionDialectUnknownFaultType*>(p->ptr), wsnt__TopicExpressionDialectUnknownFaultType);
		break;
	case SOAP_TYPE__wsnt__InvalidTopicExpressionFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidTopicExpressionFaultType*>(p->ptr), wsnt__InvalidTopicExpressionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidTopicExpressionFaultType*>(p->ptr), wsnt__InvalidTopicExpressionFaultType);
		break;
	case SOAP_TYPE__wsnt__TopicNotSupportedFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__TopicNotSupportedFaultType*>(p->ptr), wsnt__TopicNotSupportedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__TopicNotSupportedFaultType*>(p->ptr), wsnt__TopicNotSupportedFaultType);
		break;
	case SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__MultipleTopicsSpecifiedFaultType*>(p->ptr), wsnt__MultipleTopicsSpecifiedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__MultipleTopicsSpecifiedFaultType*>(p->ptr), wsnt__MultipleTopicsSpecifiedFaultType);
		break;
	case SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidProducerPropertiesExpressionFaultType*>(p->ptr), wsnt__InvalidProducerPropertiesExpressionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidProducerPropertiesExpressionFaultType*>(p->ptr), wsnt__InvalidProducerPropertiesExpressionFaultType);
		break;
	case SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__InvalidMessageContentExpressionFaultType*>(p->ptr), wsnt__InvalidMessageContentExpressionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__InvalidMessageContentExpressionFaultType*>(p->ptr), wsnt__InvalidMessageContentExpressionFaultType);
		break;
	case SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnrecognizedPolicyRequestFaultType*>(p->ptr), wsnt__UnrecognizedPolicyRequestFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnrecognizedPolicyRequestFaultType*>(p->ptr), wsnt__UnrecognizedPolicyRequestFaultType);
		break;
	case SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnsupportedPolicyRequestFaultType*>(p->ptr), wsnt__UnsupportedPolicyRequestFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnsupportedPolicyRequestFaultType*>(p->ptr), wsnt__UnsupportedPolicyRequestFaultType);
		break;
	case SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__NotifyMessageNotSupportedFaultType*>(p->ptr), wsnt__NotifyMessageNotSupportedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__NotifyMessageNotSupportedFaultType*>(p->ptr), wsnt__NotifyMessageNotSupportedFaultType);
		break;
	case SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnacceptableInitialTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableInitialTerminationTimeFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnacceptableInitialTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableInitialTerminationTimeFaultType);
		break;
	case SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__NoCurrentMessageOnTopicFaultType*>(p->ptr), wsnt__NoCurrentMessageOnTopicFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__NoCurrentMessageOnTopicFaultType*>(p->ptr), wsnt__NoCurrentMessageOnTopicFaultType);
		break;
	case SOAP_TYPE__wsnt__UnableToGetMessagesFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToGetMessagesFaultType*>(p->ptr), wsnt__UnableToGetMessagesFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToGetMessagesFaultType*>(p->ptr), wsnt__UnableToGetMessagesFaultType);
		break;
	case SOAP_TYPE__wsnt__UnableToDestroyPullPointFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToDestroyPullPointFaultType*>(p->ptr), wsnt__UnableToDestroyPullPointFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToDestroyPullPointFaultType*>(p->ptr), wsnt__UnableToDestroyPullPointFaultType);
		break;
	case SOAP_TYPE__wsnt__UnableToCreatePullPointFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToCreatePullPointFaultType*>(p->ptr), wsnt__UnableToCreatePullPointFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToCreatePullPointFaultType*>(p->ptr), wsnt__UnableToCreatePullPointFaultType);
		break;
	case SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnacceptableTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableTerminationTimeFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnacceptableTerminationTimeFaultType*>(p->ptr), wsnt__UnacceptableTerminationTimeFaultType);
		break;
	case SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__UnableToDestroySubscriptionFaultType*>(p->ptr), wsnt__UnableToDestroySubscriptionFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__UnableToDestroySubscriptionFaultType*>(p->ptr), wsnt__UnableToDestroySubscriptionFaultType);
		break;
	case SOAP_TYPE__wsnt__PauseFailedFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__PauseFailedFaultType*>(p->ptr), wsnt__PauseFailedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__PauseFailedFaultType*>(p->ptr), wsnt__PauseFailedFaultType);
		break;
	case SOAP_TYPE__wsnt__ResumeFailedFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsnt__ResumeFailedFaultType*>(p->ptr), wsnt__ResumeFailedFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsnt__ResumeFailedFaultType*>(p->ptr), wsnt__ResumeFailedFaultType);
		break;
	case SOAP_TYPE__xop__Include:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xop__Include*>(p->ptr), xop__Include);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xop__Include*>(p->ptr), xop__Include);
		break;
	case SOAP_TYPE__wsrfbf__BaseFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsrfbf__BaseFaultType*>(p->ptr), wsrfbf__BaseFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsrfbf__BaseFaultType*>(p->ptr), wsrfbf__BaseFaultType);
		break;
	case SOAP_TYPE__wstop__TopicNamespace:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__TopicNamespaceType*>(p->ptr), wstop__TopicNamespaceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__TopicNamespaceType*>(p->ptr), wstop__TopicNamespaceType);
		break;
	case SOAP_TYPE__wstop__TopicSet:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wstop__TopicSetType*>(p->ptr), wstop__TopicSetType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wstop__TopicSetType*>(p->ptr), wstop__TopicSetType);
		break;
	case SOAP_TYPE__wstop__topicNamespaceLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__tev__Capabilities:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<tev__Capabilities*>(p->ptr), tev__Capabilities);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<tev__Capabilities*>(p->ptr), tev__Capabilities);
		break;
	case SOAP_TYPE__wsrf__ResourceUnknownFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsrf__ResourceUnknownFaultType*>(p->ptr), wsrf__ResourceUnknownFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsrf__ResourceUnknownFaultType*>(p->ptr), wsrf__ResourceUnknownFaultType);
		break;
	case SOAP_TYPE__wsrf__ResourceUnavailableFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsrf__ResourceUnavailableFaultType*>(p->ptr), wsrf__ResourceUnavailableFaultType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsrf__ResourceUnavailableFaultType*>(p->ptr), wsrf__ResourceUnavailableFaultType);
		break;
	case SOAP_TYPE__wsd__Hello:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__HelloType*>(p->ptr), wsd__HelloType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__HelloType*>(p->ptr), wsd__HelloType);
		break;
	case SOAP_TYPE__wsd__Bye:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ByeType*>(p->ptr), wsd__ByeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ByeType*>(p->ptr), wsd__ByeType);
		break;
	case SOAP_TYPE__wsd__Probe:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsd__ProbeType*>(p->ptr), struct wsd__ProbeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsd__ProbeType*>(p->ptr), struct wsd__ProbeType);
		break;
	case SOAP_TYPE__wsd__ProbeMatches:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsd__ProbeMatchesType*>(p->ptr), struct wsd__ProbeMatchesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsd__ProbeMatchesType*>(p->ptr), struct wsd__ProbeMatchesType);
		break;
	case SOAP_TYPE__wsd__Resolve:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ResolveType*>(p->ptr), wsd__ResolveType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ResolveType*>(p->ptr), wsd__ResolveType);
		break;
	case SOAP_TYPE__wsd__ResolveMatches:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ResolveMatchesType*>(p->ptr), wsd__ResolveMatchesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ResolveMatchesType*>(p->ptr), wsd__ResolveMatchesType);
		break;
	case SOAP_TYPE__wsd__Types:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__wsd__Scopes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__ScopesType*>(p->ptr), wsd__ScopesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__ScopesType*>(p->ptr), wsd__ScopesType);
		break;
	case SOAP_TYPE__wsd__XAddrs:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__wsd__SupportedMatchingRules:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__wsd__Security:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__SecurityType*>(p->ptr), wsd__SecurityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__SecurityType*>(p->ptr), wsd__SecurityType);
		break;
	case SOAP_TYPE__wsd__Sig:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__SigType*>(p->ptr), wsd__SigType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__SigType*>(p->ptr), wsd__SigType);
		break;
	case SOAP_TYPE__wsd__AppSequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsd__AppSequenceType*>(p->ptr), wsd__AppSequenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsd__AppSequenceType*>(p->ptr), wsd__AppSequenceType);
		break;
	case SOAP_TYPE__wsd__Id:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__wsa__EndpointReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa__MessageID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		break;
	case SOAP_TYPE__wsa__RelatesTo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__Relationship*>(p->ptr), wsa__Relationship);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__Relationship*>(p->ptr), wsa__Relationship);
		break;
	case SOAP_TYPE__wsa__To:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		break;
	case SOAP_TYPE__wsa__Action:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__AttributedURI*>(p->ptr), wsa__AttributedURI);
		break;
	case SOAP_TYPE__wsa__From:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa__ReplyTo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa__FaultTo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__EndpointReferenceType*>(p->ptr), wsa__EndpointReferenceType);
		break;
	case SOAP_TYPE__wsa__ReplyAfter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__ReplyAfterType*>(p->ptr), wsa__ReplyAfterType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__ReplyAfterType*>(p->ptr), wsa__ReplyAfterType);
		break;
	case SOAP_TYPE__wsa__RetryAfter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<wsa__RetryAfterType*>(p->ptr), wsa__RetryAfterType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<wsa__RetryAfterType*>(p->ptr), wsa__RetryAfterType);
		break;
	case SOAP_TYPE__ds__Signature:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		break;
	case SOAP_TYPE__ds__Transform:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		break;
	case SOAP_TYPE__ds__KeyInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		break;
	case SOAP_TYPE__saml1__Assertion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		break;
	case SOAP_TYPE__saml1__Conditions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		break;
	case SOAP_TYPE__saml1__Condition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		break;
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		break;
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		break;
	case SOAP_TYPE__saml1__Advice:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		break;
	case SOAP_TYPE__saml1__Statement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		break;
	case SOAP_TYPE__saml1__SubjectStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		break;
	case SOAP_TYPE__saml1__Subject:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		break;
	case SOAP_TYPE__saml1__NameIdentifier:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		break;
	case SOAP_TYPE__saml1__SubjectConfirmation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		break;
	case SOAP_TYPE__saml1__AuthenticationStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		break;
	case SOAP_TYPE__saml1__SubjectLocality:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		break;
	case SOAP_TYPE__saml1__AuthorityBinding:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		break;
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		break;
	case SOAP_TYPE__saml1__Action:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		break;
	case SOAP_TYPE__saml1__Evidence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		break;
	case SOAP_TYPE__saml1__AttributeStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		break;
	case SOAP_TYPE__saml1__AttributeDesignator:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		break;
	case SOAP_TYPE__saml1__Attribute:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		break;
	case SOAP_TYPE__saml2__BaseID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		break;
	case SOAP_TYPE__saml2__NameID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		break;
	case SOAP_TYPE__saml2__EncryptedID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	case SOAP_TYPE__saml2__Issuer:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		break;
	case SOAP_TYPE__saml2__Assertion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		break;
	case SOAP_TYPE__saml2__Subject:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		break;
	case SOAP_TYPE__saml2__Conditions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		break;
	case SOAP_TYPE__saml2__Condition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		break;
	case SOAP_TYPE__saml2__AudienceRestriction:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		break;
	case SOAP_TYPE__saml2__OneTimeUse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		break;
	case SOAP_TYPE__saml2__ProxyRestriction:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		break;
	case SOAP_TYPE__saml2__Advice:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		break;
	case SOAP_TYPE__saml2__EncryptedAssertion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	case SOAP_TYPE__saml2__Statement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		break;
	case SOAP_TYPE__saml2__AuthnStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		break;
	case SOAP_TYPE__saml2__SubjectLocality:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		break;
	case SOAP_TYPE__saml2__AuthnContext:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		break;
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		break;
	case SOAP_TYPE__saml2__Action:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		break;
	case SOAP_TYPE__saml2__Evidence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		break;
	case SOAP_TYPE__saml2__AttributeStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		break;
	case SOAP_TYPE__saml2__Attribute:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		break;
	case SOAP_TYPE__saml2__EncryptedAttribute:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	case SOAP_TYPE_dn__dummy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_tns1__dummy:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_wstop__TopicNamespaceType_Topic> *>(p->ptr), std::vector<_wstop__TopicNamespaceType_Topic> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_wstop__TopicNamespaceType_Topic> *>(p->ptr), std::vector<_wstop__TopicNamespaceType_Topic> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<wstop__TopicType *> *>(p->ptr), std::vector<wstop__TopicType *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<wstop__TopicType *> *>(p->ptr), std::vector<wstop__TopicType *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__QName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsd__ProbeMatchType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<wsd__ProbeMatchType *> *>(p->ptr), std::vector<wsd__ProbeMatchType *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<wsd__ProbeMatchType *> *>(p->ptr), std::vector<wsd__ProbeMatchType *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_wsrfbf__BaseFaultType_Description> *>(p->ptr), std::vector<_wsrfbf__BaseFaultType_Description> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_wsrfbf__BaseFaultType_Description> *>(p->ptr), std::vector<_wsrfbf__BaseFaultType_Description> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<wsnt__NotificationMessageHolderType *> *>(p->ptr), std::vector<wsnt__NotificationMessageHolderType *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<wsnt__NotificationMessageHolderType *> *>(p->ptr), std::vector<wsnt__NotificationMessageHolderType *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfwsnt__TopicExpressionTypeCustom:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<wsnt__TopicExpressionTypeCustom> *>(p->ptr), std::vector<wsnt__TopicExpressionTypeCustom> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<wsnt__TopicExpressionTypeCustom> *>(p->ptr), std::vector<wsnt__TopicExpressionTypeCustom> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__FileProgress *> *>(p->ptr), std::vector<tt__FileProgress *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__FileProgress *> *>(p->ptr), std::vector<tt__FileProgress *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__OSDType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__OSDType> *>(p->ptr), std::vector<tt__OSDType> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__OSDType> *>(p->ptr), std::vector<tt__OSDType> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__ColorspaceRange *> *>(p->ptr), std::vector<tt__ColorspaceRange *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__ColorspaceRange *> *>(p->ptr), std::vector<tt__ColorspaceRange *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Color:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Color *> *>(p->ptr), std::vector<tt__Color *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Color *> *>(p->ptr), std::vector<tt__Color *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__ActiveConnection *> *>(p->ptr), std::vector<tt__ActiveConnection *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__ActiveConnection *> *>(p->ptr), std::vector<tt__ActiveConnection *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__AudioClassCandidate *> *>(p->ptr), std::vector<tt__AudioClassCandidate *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__AudioClassCandidate *> *>(p->ptr), std::vector<tt__AudioClassCandidate *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__EngineConfiguration *> *>(p->ptr), std::vector<tt__EngineConfiguration *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__EngineConfiguration *> *>(p->ptr), std::vector<tt__EngineConfiguration *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__RecordingJobStateTrack *> *>(p->ptr), std::vector<tt__RecordingJobStateTrack *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__RecordingJobStateTrack *> *>(p->ptr), std::vector<tt__RecordingJobStateTrack *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__RecordingJobStateSource *> *>(p->ptr), std::vector<tt__RecordingJobStateSource *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__RecordingJobStateSource *> *>(p->ptr), std::vector<tt__RecordingJobStateSource *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__RecordingJobTrack *> *>(p->ptr), std::vector<tt__RecordingJobTrack *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__RecordingJobTrack *> *>(p->ptr), std::vector<tt__RecordingJobTrack *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__RecordingJobSource *> *>(p->ptr), std::vector<tt__RecordingJobSource *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__RecordingJobSource *> *>(p->ptr), std::vector<tt__RecordingJobSource *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__GetTracksResponseItem *> *>(p->ptr), std::vector<tt__GetTracksResponseItem *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__GetTracksResponseItem *> *>(p->ptr), std::vector<tt__GetTracksResponseItem *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__TrackAttributes *> *>(p->ptr), std::vector<tt__TrackAttributes *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__TrackAttributes *> *>(p->ptr), std::vector<tt__TrackAttributes *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__TrackInformation *> *>(p->ptr), std::vector<tt__TrackInformation *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__TrackInformation *> *>(p->ptr), std::vector<tt__TrackInformation *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__FindMetadataResult *> *>(p->ptr), std::vector<tt__FindMetadataResult *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__FindMetadataResult *> *>(p->ptr), std::vector<tt__FindMetadataResult *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__FindPTZPositionResult *> *>(p->ptr), std::vector<tt__FindPTZPositionResult *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__FindPTZPositionResult *> *>(p->ptr), std::vector<tt__FindPTZPositionResult *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__FindEventResult *> *>(p->ptr), std::vector<tt__FindEventResult *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__FindEventResult *> *>(p->ptr), std::vector<tt__FindEventResult *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__RecordingInformation *> *>(p->ptr), std::vector<tt__RecordingInformation *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__RecordingInformation *> *>(p->ptr), std::vector<tt__RecordingInformation *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__RecordingReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__SourceReference *> *>(p->ptr), std::vector<tt__SourceReference *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__SourceReference *> *>(p->ptr), std::vector<tt__SourceReference *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Rectangle *> *>(p->ptr), std::vector<tt__Rectangle *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Rectangle *> *>(p->ptr), std::vector<tt__Rectangle *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__PaneLayoutOptions *> *>(p->ptr), std::vector<tt__PaneLayoutOptions *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__PaneLayoutOptions *> *>(p->ptr), std::vector<tt__PaneLayoutOptions *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__PaneLayout *> *>(p->ptr), std::vector<tt__PaneLayout *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__PaneLayout *> *>(p->ptr), std::vector<tt__PaneLayout *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Polyline *> *>(p->ptr), std::vector<tt__Polyline *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Polyline *> *>(p->ptr), std::vector<tt__Polyline *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__ConfigDescription *> *>(p->ptr), std::vector<tt__ConfigDescription *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__ConfigDescription *> *>(p->ptr), std::vector<tt__ConfigDescription *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_tt__ConfigDescription_Messages> *>(p->ptr), std::vector<_tt__ConfigDescription_Messages> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_tt__ConfigDescription_Messages> *>(p->ptr), std::vector<_tt__ConfigDescription_Messages> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Config:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Config *> *>(p->ptr), std::vector<tt__Config *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Config *> *>(p->ptr), std::vector<tt__Config *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Vector *> *>(p->ptr), std::vector<tt__Vector *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Vector *> *>(p->ptr), std::vector<tt__Vector *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_tt__ItemListDescription_ElementItemDescription> *>(p->ptr), std::vector<_tt__ItemListDescription_ElementItemDescription> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_tt__ItemListDescription_ElementItemDescription> *>(p->ptr), std::vector<_tt__ItemListDescription_ElementItemDescription> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_tt__ItemListDescription_SimpleItemDescription> *>(p->ptr), std::vector<_tt__ItemListDescription_SimpleItemDescription> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_tt__ItemListDescription_SimpleItemDescription> *>(p->ptr), std::vector<_tt__ItemListDescription_SimpleItemDescription> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_tt__ItemList_ElementItem> *>(p->ptr), std::vector<_tt__ItemList_ElementItem> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_tt__ItemList_ElementItem> *>(p->ptr), std::vector<_tt__ItemList_ElementItem> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_tt__ItemList_SimpleItem> *>(p->ptr), std::vector<_tt__ItemList_SimpleItem> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_tt__ItemList_SimpleItem> *>(p->ptr), std::vector<_tt__ItemList_SimpleItem> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__BacklightCompensationMode> *>(p->ptr), std::vector<tt__BacklightCompensationMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__BacklightCompensationMode> *>(p->ptr), std::vector<tt__BacklightCompensationMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__ImageStabilizationMode> *>(p->ptr), std::vector<tt__ImageStabilizationMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__ImageStabilizationMode> *>(p->ptr), std::vector<tt__ImageStabilizationMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__IrCutFilterAutoAdjustment *> *>(p->ptr), std::vector<tt__IrCutFilterAutoAdjustment *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__IrCutFilterAutoAdjustment *> *>(p->ptr), std::vector<tt__IrCutFilterAutoAdjustment *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__WhiteBalanceMode> *>(p->ptr), std::vector<tt__WhiteBalanceMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__WhiteBalanceMode> *>(p->ptr), std::vector<tt__WhiteBalanceMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__ExposurePriority> *>(p->ptr), std::vector<tt__ExposurePriority> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__ExposurePriority> *>(p->ptr), std::vector<tt__ExposurePriority> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ExposureMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__ExposureMode> *>(p->ptr), std::vector<tt__ExposureMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__ExposureMode> *>(p->ptr), std::vector<tt__ExposureMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__AutoFocusMode> *>(p->ptr), std::vector<tt__AutoFocusMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__AutoFocusMode> *>(p->ptr), std::vector<tt__AutoFocusMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__WideDynamicMode> *>(p->ptr), std::vector<tt__WideDynamicMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__WideDynamicMode> *>(p->ptr), std::vector<tt__WideDynamicMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__IrCutFilterMode> *>(p->ptr), std::vector<tt__IrCutFilterMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__IrCutFilterMode> *>(p->ptr), std::vector<tt__IrCutFilterMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__PTZPresetTourDirection> *>(p->ptr), std::vector<tt__PTZPresetTourDirection> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__PTZPresetTourDirection> *>(p->ptr), std::vector<tt__PTZPresetTourDirection> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__PTZPresetTourSpot *> *>(p->ptr), std::vector<tt__PTZPresetTourSpot *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__PTZPresetTourSpot *> *>(p->ptr), std::vector<tt__PTZPresetTourSpot *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Space1DDescription *> *>(p->ptr), std::vector<tt__Space1DDescription *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Space1DDescription *> *>(p->ptr), std::vector<tt__Space1DDescription *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Space2DDescription *> *>(p->ptr), std::vector<tt__Space2DDescription *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Space2DDescription *> *>(p->ptr), std::vector<tt__Space2DDescription *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ReverseMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__ReverseMode> *>(p->ptr), std::vector<tt__ReverseMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__ReverseMode> *>(p->ptr), std::vector<tt__ReverseMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__EFlipMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__EFlipMode> *>(p->ptr), std::vector<tt__EFlipMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__EFlipMode> *>(p->ptr), std::vector<tt__EFlipMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__PTZPresetTourOperation> *>(p->ptr), std::vector<tt__PTZPresetTourOperation> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__PTZPresetTourOperation> *>(p->ptr), std::vector<tt__PTZPresetTourOperation> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__SystemLogUri *> *>(p->ptr), std::vector<tt__SystemLogUri *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__SystemLogUri *> *>(p->ptr), std::vector<tt__SystemLogUri *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__OnvifVersion *> *>(p->ptr), std::vector<tt__OnvifVersion *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__OnvifVersion *> *>(p->ptr), std::vector<tt__OnvifVersion *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Dot11Cipher> *>(p->ptr), std::vector<tt__Dot11Cipher> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Dot11Cipher> *>(p->ptr), std::vector<tt__Dot11Cipher> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Dot11AuthAndMangementSuite> *>(p->ptr), std::vector<tt__Dot11AuthAndMangementSuite> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Dot11AuthAndMangementSuite> *>(p->ptr), std::vector<tt__Dot11AuthAndMangementSuite> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__NetworkZeroConfiguration *> *>(p->ptr), std::vector<tt__NetworkZeroConfiguration *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__NetworkZeroConfiguration *> *>(p->ptr), std::vector<tt__NetworkZeroConfiguration *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__PrefixedIPv6Address *> *>(p->ptr), std::vector<tt__PrefixedIPv6Address *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__PrefixedIPv6Address *> *>(p->ptr), std::vector<tt__PrefixedIPv6Address *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__PrefixedIPv4Address *> *>(p->ptr), std::vector<tt__PrefixedIPv4Address *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__PrefixedIPv4Address *> *>(p->ptr), std::vector<tt__PrefixedIPv4Address *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Dot11Configuration *> *>(p->ptr), std::vector<tt__Dot11Configuration *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Dot11Configuration *> *>(p->ptr), std::vector<tt__Dot11Configuration *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Dot3Configuration *> *>(p->ptr), std::vector<tt__Dot3Configuration *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Dot3Configuration *> *>(p->ptr), std::vector<tt__Dot3Configuration *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__AudioEncoderConfigurationOption *> *>(p->ptr), std::vector<tt__AudioEncoderConfigurationOption *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__AudioEncoderConfigurationOption *> *>(p->ptr), std::vector<tt__AudioEncoderConfigurationOption *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__VideoResolution2 *> *>(p->ptr), std::vector<tt__VideoResolution2 *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__VideoResolution2 *> *>(p->ptr), std::vector<tt__VideoResolution2 *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__H264Profile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__H264Profile> *>(p->ptr), std::vector<tt__H264Profile> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__H264Profile> *>(p->ptr), std::vector<tt__H264Profile> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Mpeg4Profile> *>(p->ptr), std::vector<tt__Mpeg4Profile> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Mpeg4Profile> *>(p->ptr), std::vector<tt__Mpeg4Profile> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__VideoResolution *> *>(p->ptr), std::vector<tt__VideoResolution *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__VideoResolution *> *>(p->ptr), std::vector<tt__VideoResolution *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__RotateMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__RotateMode> *>(p->ptr), std::vector<tt__RotateMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__RotateMode> *>(p->ptr), std::vector<tt__RotateMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__SceneOrientationMode> *>(p->ptr), std::vector<tt__SceneOrientationMode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__SceneOrientationMode> *>(p->ptr), std::vector<tt__SceneOrientationMode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__LensProjection *> *>(p->ptr), std::vector<tt__LensProjection *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__LensProjection *> *>(p->ptr), std::vector<tt__LensProjection *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__LensDescription *> *>(p->ptr), std::vector<tt__LensDescription *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__LensDescription *> *>(p->ptr), std::vector<tt__LensDescription *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOffloat:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<float> *>(p->ptr), std::vector<float> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<float> *>(p->ptr), std::vector<float> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LocationEntity:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__LocationEntity *> *>(p->ptr), std::vector<tt__LocationEntity *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__LocationEntity *> *>(p->ptr), std::vector<tt__LocationEntity *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tds__StorageConfiguration *> *>(p->ptr), std::vector<tds__StorageConfiguration *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tds__StorageConfiguration *> *>(p->ptr), std::vector<tds__StorageConfiguration *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Dot11AvailableNetworks *> *>(p->ptr), std::vector<tt__Dot11AvailableNetworks *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Dot11AvailableNetworks *> *>(p->ptr), std::vector<tt__Dot11AvailableNetworks *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__RelayOutput *> *>(p->ptr), std::vector<tt__RelayOutput *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__RelayOutput *> *>(p->ptr), std::vector<tt__RelayOutput *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Dot1XConfiguration *> *>(p->ptr), std::vector<tt__Dot1XConfiguration *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Dot1XConfiguration *> *>(p->ptr), std::vector<tt__Dot1XConfiguration *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__CertificateWithPrivateKey *> *>(p->ptr), std::vector<tt__CertificateWithPrivateKey *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__CertificateWithPrivateKey *> *>(p->ptr), std::vector<tt__CertificateWithPrivateKey *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__CertificateStatus *> *>(p->ptr), std::vector<tt__CertificateStatus *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__CertificateStatus *> *>(p->ptr), std::vector<tt__CertificateStatus *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Certificate *> *>(p->ptr), std::vector<tt__Certificate *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Certificate *> *>(p->ptr), std::vector<tt__Certificate *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__IPv6Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__IPv4Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__NetworkProtocol *> *>(p->ptr), std::vector<tt__NetworkProtocol *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__NetworkProtocol *> *>(p->ptr), std::vector<tt__NetworkProtocol *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__NetworkInterface *> *>(p->ptr), std::vector<tt__NetworkInterface *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__NetworkInterface *> *>(p->ptr), std::vector<tt__NetworkInterface *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__IPAddress *> *>(p->ptr), std::vector<tt__IPAddress *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__IPAddress *> *>(p->ptr), std::vector<tt__IPAddress *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__token:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__CapabilityCategory> *>(p->ptr), std::vector<tt__CapabilityCategory> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__CapabilityCategory> *>(p->ptr), std::vector<tt__CapabilityCategory> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__User:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__User *> *>(p->ptr), std::vector<tt__User *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__User *> *>(p->ptr), std::vector<tt__User *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__NetworkHost *> *>(p->ptr), std::vector<tt__NetworkHost *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__NetworkHost *> *>(p->ptr), std::vector<tt__NetworkHost *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__Scope *> *>(p->ptr), std::vector<tt__Scope *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__Scope *> *>(p->ptr), std::vector<tt__Scope *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tt__BackupFile *> *>(p->ptr), std::vector<tt__BackupFile *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tt__BackupFile *> *>(p->ptr), std::vector<tt__BackupFile *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<tds__Service *> *>(p->ptr), std::vector<tds__Service *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<tds__Service *> *>(p->ptr), std::vector<tds__Service *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<struct soap_dom_element> *>(p->ptr), std::vector<struct soap_dom_element> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<struct soap_dom_element> *>(p->ptr), std::vector<struct soap_dom_element> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{

		case SOAP_TYPE_tds__StorageConfiguration: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__VideoSource: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__AudioSource: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__VideoSourceConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__VideoEncoderConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__JpegOptions2: t = SOAP_TYPE_tt__JpegOptions; break;
		case SOAP_TYPE_tt__Mpeg4Options2: t = SOAP_TYPE_tt__Mpeg4Options; break;
		case SOAP_TYPE_tt__H264Options2: t = SOAP_TYPE_tt__H264Options; break;
		case SOAP_TYPE_tt__VideoEncoder2Configuration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__AudioSourceConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__AudioEncoderConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__AudioEncoder2Configuration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__VideoAnalyticsConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__MetadataConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__VideoOutput: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__VideoOutputConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__AudioOutput: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__AudioOutputConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__AudioDecoderConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__NetworkInterface: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__RelayOutput: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__DigitalInput: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__PTZNode: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_tt__PTZConfiguration: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__EventFilter: t = SOAP_TYPE_wsnt__FilterType; break;
		case SOAP_TYPE_tt__AnalyticsEngine: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__AnalyticsEngineInput: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__AnalyticsEngineControl: t = SOAP_TYPE_tt__ConfigurationEntity; break;
		case SOAP_TYPE_tt__OSDConfiguration: t = SOAP_TYPE_tt__DeviceEntity; break;
		case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__InvalidFilterFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__TopicNotSupportedFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__PauseFailedFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsnt__ResumeFailedFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wstop__TopicNamespaceType: t = SOAP_TYPE_wstop__ExtensibleDocumented; break;
		case SOAP_TYPE_wstop__TopicType: t = SOAP_TYPE_wstop__ExtensibleDocumented; break;
		case SOAP_TYPE_wstop__TopicSetType: t = SOAP_TYPE_wstop__ExtensibleDocumented; break;
		case SOAP_TYPE_wsrf__ResourceUnknownFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		case SOAP_TYPE_wsrf__ResourceUnavailableFaultType: t = SOAP_TYPE_wsrfbf__BaseFaultType; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic:
		if (t == SOAP_TYPE__wstop__TopicNamespaceType_Topic)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_wstop__TopicNamespaceType_Topic>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_wstop__TopicNamespaceType_Topic> *)p)[index] = *(_wstop__TopicNamespaceType_Topic *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType:
		if (t == SOAP_TYPE_wstop__TopicType || soap_fbase(t, SOAP_TYPE_wstop__TopicType))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<wstop__TopicType *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<wstop__TopicType *> *)p)[index] = *(wstop__TopicType **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__QName:
		if (t == SOAP_TYPE_xsd__QName)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsd__ProbeMatchType:
		if (t == SOAP_TYPE_wsd__ProbeMatchType || soap_fbase(t, SOAP_TYPE_wsd__ProbeMatchType))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<wsd__ProbeMatchType *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<wsd__ProbeMatchType *> *)p)[index] = *(wsd__ProbeMatchType **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description:
		if (t == SOAP_TYPE__wsrfbf__BaseFaultType_Description)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_wsrfbf__BaseFaultType_Description>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_wsrfbf__BaseFaultType_Description> *)p)[index] = *(_wsrfbf__BaseFaultType_Description *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType:
		if (t == SOAP_TYPE_wsnt__NotificationMessageHolderType || soap_fbase(t, SOAP_TYPE_wsnt__NotificationMessageHolderType))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<wsnt__NotificationMessageHolderType *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<wsnt__NotificationMessageHolderType *> *)p)[index] = *(wsnt__NotificationMessageHolderType **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfwsnt__TopicExpressionTypeCustom:
		if (t == SOAP_TYPE_wsnt__TopicExpressionTypeCustom)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<wsnt__TopicExpressionTypeCustom>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<wsnt__TopicExpressionTypeCustom> *)p)[index] = *(wsnt__TopicExpressionTypeCustom *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress:
		if (t == SOAP_TYPE_tt__FileProgress || soap_fbase(t, SOAP_TYPE_tt__FileProgress))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__FileProgress *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__FileProgress *> *)p)[index] = *(tt__FileProgress **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__OSDType:
		if (t == SOAP_TYPE_tt__OSDType)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__OSDType>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__OSDType> *)p)[index] = *(tt__OSDType *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange:
		if (t == SOAP_TYPE_tt__ColorspaceRange || soap_fbase(t, SOAP_TYPE_tt__ColorspaceRange))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__ColorspaceRange *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__ColorspaceRange *> *)p)[index] = *(tt__ColorspaceRange **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Color:
		if (t == SOAP_TYPE_tt__Color || soap_fbase(t, SOAP_TYPE_tt__Color))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Color *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Color *> *)p)[index] = *(tt__Color **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection:
		if (t == SOAP_TYPE_tt__ActiveConnection || soap_fbase(t, SOAP_TYPE_tt__ActiveConnection))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__ActiveConnection *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__ActiveConnection *> *)p)[index] = *(tt__ActiveConnection **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate:
		if (t == SOAP_TYPE_tt__AudioClassCandidate || soap_fbase(t, SOAP_TYPE_tt__AudioClassCandidate))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__AudioClassCandidate *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__AudioClassCandidate *> *)p)[index] = *(tt__AudioClassCandidate **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration:
		if (t == SOAP_TYPE_tt__EngineConfiguration || soap_fbase(t, SOAP_TYPE_tt__EngineConfiguration))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__EngineConfiguration *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__EngineConfiguration *> *)p)[index] = *(tt__EngineConfiguration **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack:
		if (t == SOAP_TYPE_tt__RecordingJobStateTrack || soap_fbase(t, SOAP_TYPE_tt__RecordingJobStateTrack))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__RecordingJobStateTrack *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__RecordingJobStateTrack *> *)p)[index] = *(tt__RecordingJobStateTrack **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource:
		if (t == SOAP_TYPE_tt__RecordingJobStateSource || soap_fbase(t, SOAP_TYPE_tt__RecordingJobStateSource))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__RecordingJobStateSource *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__RecordingJobStateSource *> *)p)[index] = *(tt__RecordingJobStateSource **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack:
		if (t == SOAP_TYPE_tt__RecordingJobTrack || soap_fbase(t, SOAP_TYPE_tt__RecordingJobTrack))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__RecordingJobTrack *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__RecordingJobTrack *> *)p)[index] = *(tt__RecordingJobTrack **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource:
		if (t == SOAP_TYPE_tt__RecordingJobSource || soap_fbase(t, SOAP_TYPE_tt__RecordingJobSource))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__RecordingJobSource *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__RecordingJobSource *> *)p)[index] = *(tt__RecordingJobSource **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem:
		if (t == SOAP_TYPE_tt__GetTracksResponseItem || soap_fbase(t, SOAP_TYPE_tt__GetTracksResponseItem))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__GetTracksResponseItem *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__GetTracksResponseItem *> *)p)[index] = *(tt__GetTracksResponseItem **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes:
		if (t == SOAP_TYPE_tt__TrackAttributes || soap_fbase(t, SOAP_TYPE_tt__TrackAttributes))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__TrackAttributes *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__TrackAttributes *> *)p)[index] = *(tt__TrackAttributes **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation:
		if (t == SOAP_TYPE_tt__TrackInformation || soap_fbase(t, SOAP_TYPE_tt__TrackInformation))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__TrackInformation *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__TrackInformation *> *)p)[index] = *(tt__TrackInformation **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult:
		if (t == SOAP_TYPE_tt__FindMetadataResult || soap_fbase(t, SOAP_TYPE_tt__FindMetadataResult))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__FindMetadataResult *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__FindMetadataResult *> *)p)[index] = *(tt__FindMetadataResult **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult:
		if (t == SOAP_TYPE_tt__FindPTZPositionResult || soap_fbase(t, SOAP_TYPE_tt__FindPTZPositionResult))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__FindPTZPositionResult *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__FindPTZPositionResult *> *)p)[index] = *(tt__FindPTZPositionResult **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult:
		if (t == SOAP_TYPE_tt__FindEventResult || soap_fbase(t, SOAP_TYPE_tt__FindEventResult))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__FindEventResult *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__FindEventResult *> *)p)[index] = *(tt__FindEventResult **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation:
		if (t == SOAP_TYPE_tt__RecordingInformation || soap_fbase(t, SOAP_TYPE_tt__RecordingInformation))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__RecordingInformation *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__RecordingInformation *> *)p)[index] = *(tt__RecordingInformation **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__RecordingReference:
		if (t == SOAP_TYPE_tt__RecordingReference)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference:
		if (t == SOAP_TYPE_tt__SourceReference || soap_fbase(t, SOAP_TYPE_tt__SourceReference))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__SourceReference *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__SourceReference *> *)p)[index] = *(tt__SourceReference **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle:
		if (t == SOAP_TYPE_tt__Rectangle || soap_fbase(t, SOAP_TYPE_tt__Rectangle))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Rectangle *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Rectangle *> *)p)[index] = *(tt__Rectangle **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions:
		if (t == SOAP_TYPE_tt__PaneLayoutOptions || soap_fbase(t, SOAP_TYPE_tt__PaneLayoutOptions))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__PaneLayoutOptions *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__PaneLayoutOptions *> *)p)[index] = *(tt__PaneLayoutOptions **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout:
		if (t == SOAP_TYPE_tt__PaneLayout || soap_fbase(t, SOAP_TYPE_tt__PaneLayout))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__PaneLayout *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__PaneLayout *> *)p)[index] = *(tt__PaneLayout **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline:
		if (t == SOAP_TYPE_tt__Polyline || soap_fbase(t, SOAP_TYPE_tt__Polyline))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Polyline *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Polyline *> *)p)[index] = *(tt__Polyline **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription:
		if (t == SOAP_TYPE_tt__ConfigDescription || soap_fbase(t, SOAP_TYPE_tt__ConfigDescription))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__ConfigDescription *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__ConfigDescription *> *)p)[index] = *(tt__ConfigDescription **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages:
		if (t == SOAP_TYPE__tt__ConfigDescription_Messages)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_tt__ConfigDescription_Messages>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_tt__ConfigDescription_Messages> *)p)[index] = *(_tt__ConfigDescription_Messages *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Config:
		if (t == SOAP_TYPE_tt__Config || soap_fbase(t, SOAP_TYPE_tt__Config))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Config *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Config *> *)p)[index] = *(tt__Config **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector:
		if (t == SOAP_TYPE_tt__Vector || soap_fbase(t, SOAP_TYPE_tt__Vector))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Vector *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Vector *> *)p)[index] = *(tt__Vector **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription:
		if (t == SOAP_TYPE__tt__ItemListDescription_ElementItemDescription)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_tt__ItemListDescription_ElementItemDescription>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_tt__ItemListDescription_ElementItemDescription> *)p)[index] = *(_tt__ItemListDescription_ElementItemDescription *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription:
		if (t == SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_tt__ItemListDescription_SimpleItemDescription>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_tt__ItemListDescription_SimpleItemDescription> *)p)[index] = *(_tt__ItemListDescription_SimpleItemDescription *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem:
		if (t == SOAP_TYPE__tt__ItemList_ElementItem)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_tt__ItemList_ElementItem>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_tt__ItemList_ElementItem> *)p)[index] = *(_tt__ItemList_ElementItem *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem:
		if (t == SOAP_TYPE__tt__ItemList_SimpleItem)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_tt__ItemList_SimpleItem>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_tt__ItemList_SimpleItem> *)p)[index] = *(_tt__ItemList_SimpleItem *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode:
		if (t == SOAP_TYPE_tt__BacklightCompensationMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__BacklightCompensationMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__BacklightCompensationMode> *)p)[index] = *(tt__BacklightCompensationMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode:
		if (t == SOAP_TYPE_tt__ImageStabilizationMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__ImageStabilizationMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__ImageStabilizationMode> *)p)[index] = *(tt__ImageStabilizationMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment:
		if (t == SOAP_TYPE_tt__IrCutFilterAutoAdjustment || soap_fbase(t, SOAP_TYPE_tt__IrCutFilterAutoAdjustment))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__IrCutFilterAutoAdjustment *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__IrCutFilterAutoAdjustment *> *)p)[index] = *(tt__IrCutFilterAutoAdjustment **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode:
		if (t == SOAP_TYPE_tt__WhiteBalanceMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__WhiteBalanceMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__WhiteBalanceMode> *)p)[index] = *(tt__WhiteBalanceMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority:
		if (t == SOAP_TYPE_tt__ExposurePriority)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__ExposurePriority>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__ExposurePriority> *)p)[index] = *(tt__ExposurePriority *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ExposureMode:
		if (t == SOAP_TYPE_tt__ExposureMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__ExposureMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__ExposureMode> *)p)[index] = *(tt__ExposureMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode:
		if (t == SOAP_TYPE_tt__AutoFocusMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__AutoFocusMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__AutoFocusMode> *)p)[index] = *(tt__AutoFocusMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode:
		if (t == SOAP_TYPE_tt__WideDynamicMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__WideDynamicMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__WideDynamicMode> *)p)[index] = *(tt__WideDynamicMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode:
		if (t == SOAP_TYPE_tt__IrCutFilterMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__IrCutFilterMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__IrCutFilterMode> *)p)[index] = *(tt__IrCutFilterMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection:
		if (t == SOAP_TYPE_tt__PTZPresetTourDirection)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__PTZPresetTourDirection>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__PTZPresetTourDirection> *)p)[index] = *(tt__PTZPresetTourDirection *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot:
		if (t == SOAP_TYPE_tt__PTZPresetTourSpot || soap_fbase(t, SOAP_TYPE_tt__PTZPresetTourSpot))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__PTZPresetTourSpot *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__PTZPresetTourSpot *> *)p)[index] = *(tt__PTZPresetTourSpot **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription:
		if (t == SOAP_TYPE_tt__Space1DDescription || soap_fbase(t, SOAP_TYPE_tt__Space1DDescription))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Space1DDescription *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Space1DDescription *> *)p)[index] = *(tt__Space1DDescription **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription:
		if (t == SOAP_TYPE_tt__Space2DDescription || soap_fbase(t, SOAP_TYPE_tt__Space2DDescription))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Space2DDescription *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Space2DDescription *> *)p)[index] = *(tt__Space2DDescription **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ReverseMode:
		if (t == SOAP_TYPE_tt__ReverseMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__ReverseMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__ReverseMode> *)p)[index] = *(tt__ReverseMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__EFlipMode:
		if (t == SOAP_TYPE_tt__EFlipMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__EFlipMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__EFlipMode> *)p)[index] = *(tt__EFlipMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation:
		if (t == SOAP_TYPE_tt__PTZPresetTourOperation)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__PTZPresetTourOperation>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__PTZPresetTourOperation> *)p)[index] = *(tt__PTZPresetTourOperation *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri:
		if (t == SOAP_TYPE_tt__SystemLogUri || soap_fbase(t, SOAP_TYPE_tt__SystemLogUri))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__SystemLogUri *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__SystemLogUri *> *)p)[index] = *(tt__SystemLogUri **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion:
		if (t == SOAP_TYPE_tt__OnvifVersion || soap_fbase(t, SOAP_TYPE_tt__OnvifVersion))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__OnvifVersion *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__OnvifVersion *> *)p)[index] = *(tt__OnvifVersion **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData:
		if (t == SOAP_TYPE_tt__AuxiliaryData)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher:
		if (t == SOAP_TYPE_tt__Dot11Cipher)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Dot11Cipher>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Dot11Cipher> *)p)[index] = *(tt__Dot11Cipher *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite:
		if (t == SOAP_TYPE_tt__Dot11AuthAndMangementSuite)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Dot11AuthAndMangementSuite>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Dot11AuthAndMangementSuite> *)p)[index] = *(tt__Dot11AuthAndMangementSuite *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration:
		if (t == SOAP_TYPE_tt__NetworkZeroConfiguration || soap_fbase(t, SOAP_TYPE_tt__NetworkZeroConfiguration))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__NetworkZeroConfiguration *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__NetworkZeroConfiguration *> *)p)[index] = *(tt__NetworkZeroConfiguration **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address:
		if (t == SOAP_TYPE_tt__PrefixedIPv6Address || soap_fbase(t, SOAP_TYPE_tt__PrefixedIPv6Address))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__PrefixedIPv6Address *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__PrefixedIPv6Address *> *)p)[index] = *(tt__PrefixedIPv6Address **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address:
		if (t == SOAP_TYPE_tt__PrefixedIPv4Address || soap_fbase(t, SOAP_TYPE_tt__PrefixedIPv4Address))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__PrefixedIPv4Address *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__PrefixedIPv4Address *> *)p)[index] = *(tt__PrefixedIPv4Address **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration:
		if (t == SOAP_TYPE_tt__Dot11Configuration || soap_fbase(t, SOAP_TYPE_tt__Dot11Configuration))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Dot11Configuration *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Dot11Configuration *> *)p)[index] = *(tt__Dot11Configuration **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration:
		if (t == SOAP_TYPE_tt__Dot3Configuration || soap_fbase(t, SOAP_TYPE_tt__Dot3Configuration))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Dot3Configuration *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Dot3Configuration *> *)p)[index] = *(tt__Dot3Configuration **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption:
		if (t == SOAP_TYPE_tt__AudioEncoderConfigurationOption || soap_fbase(t, SOAP_TYPE_tt__AudioEncoderConfigurationOption))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__AudioEncoderConfigurationOption *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__AudioEncoderConfigurationOption *> *)p)[index] = *(tt__AudioEncoderConfigurationOption **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2:
		if (t == SOAP_TYPE_tt__VideoResolution2 || soap_fbase(t, SOAP_TYPE_tt__VideoResolution2))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__VideoResolution2 *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__VideoResolution2 *> *)p)[index] = *(tt__VideoResolution2 **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__H264Profile:
		if (t == SOAP_TYPE_tt__H264Profile)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__H264Profile>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__H264Profile> *)p)[index] = *(tt__H264Profile *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile:
		if (t == SOAP_TYPE_tt__Mpeg4Profile)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Mpeg4Profile>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Mpeg4Profile> *)p)[index] = *(tt__Mpeg4Profile *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution:
		if (t == SOAP_TYPE_tt__VideoResolution || soap_fbase(t, SOAP_TYPE_tt__VideoResolution))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__VideoResolution *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__VideoResolution *> *)p)[index] = *(tt__VideoResolution **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__RotateMode:
		if (t == SOAP_TYPE_tt__RotateMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__RotateMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__RotateMode> *)p)[index] = *(tt__RotateMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode:
		if (t == SOAP_TYPE_tt__SceneOrientationMode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__SceneOrientationMode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__SceneOrientationMode> *)p)[index] = *(tt__SceneOrientationMode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection:
		if (t == SOAP_TYPE_tt__LensProjection || soap_fbase(t, SOAP_TYPE_tt__LensProjection))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__LensProjection *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__LensProjection *> *)p)[index] = *(tt__LensProjection **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription:
		if (t == SOAP_TYPE_tt__LensDescription || soap_fbase(t, SOAP_TYPE_tt__LensDescription))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__LensDescription *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__LensDescription *> *)p)[index] = *(tt__LensDescription **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOffloat:
		if (t == SOAP_TYPE_float)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<float>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<float> *)p)[index] = *(float *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (t == SOAP_TYPE_int)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<int>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<int> *)p)[index] = *(int *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__LocationEntity:
		if (t == SOAP_TYPE_tt__LocationEntity || soap_fbase(t, SOAP_TYPE_tt__LocationEntity))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__LocationEntity *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__LocationEntity *> *)p)[index] = *(tt__LocationEntity **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration:
		if (t == SOAP_TYPE_tds__StorageConfiguration || soap_fbase(t, SOAP_TYPE_tds__StorageConfiguration))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tds__StorageConfiguration *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tds__StorageConfiguration *> *)p)[index] = *(tds__StorageConfiguration **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks:
		if (t == SOAP_TYPE_tt__Dot11AvailableNetworks || soap_fbase(t, SOAP_TYPE_tt__Dot11AvailableNetworks))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Dot11AvailableNetworks *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Dot11AvailableNetworks *> *)p)[index] = *(tt__Dot11AvailableNetworks **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput:
		if (t == SOAP_TYPE_tt__RelayOutput || soap_fbase(t, SOAP_TYPE_tt__RelayOutput))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__RelayOutput *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__RelayOutput *> *)p)[index] = *(tt__RelayOutput **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken:
		if (t == SOAP_TYPE_tt__ReferenceToken)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration:
		if (t == SOAP_TYPE_tt__Dot1XConfiguration || soap_fbase(t, SOAP_TYPE_tt__Dot1XConfiguration))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Dot1XConfiguration *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Dot1XConfiguration *> *)p)[index] = *(tt__Dot1XConfiguration **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey:
		if (t == SOAP_TYPE_tt__CertificateWithPrivateKey || soap_fbase(t, SOAP_TYPE_tt__CertificateWithPrivateKey))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__CertificateWithPrivateKey *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__CertificateWithPrivateKey *> *)p)[index] = *(tt__CertificateWithPrivateKey **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus:
		if (t == SOAP_TYPE_tt__CertificateStatus || soap_fbase(t, SOAP_TYPE_tt__CertificateStatus))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__CertificateStatus *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__CertificateStatus *> *)p)[index] = *(tt__CertificateStatus **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate:
		if (t == SOAP_TYPE_tt__Certificate || soap_fbase(t, SOAP_TYPE_tt__Certificate))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Certificate *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Certificate *> *)p)[index] = *(tt__Certificate **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__IPv6Address:
		if (t == SOAP_TYPE_tt__IPv6Address)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__IPv4Address:
		if (t == SOAP_TYPE_tt__IPv4Address)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol:
		if (t == SOAP_TYPE_tt__NetworkProtocol || soap_fbase(t, SOAP_TYPE_tt__NetworkProtocol))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__NetworkProtocol *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__NetworkProtocol *> *)p)[index] = *(tt__NetworkProtocol **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface:
		if (t == SOAP_TYPE_tt__NetworkInterface || soap_fbase(t, SOAP_TYPE_tt__NetworkInterface))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__NetworkInterface *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__NetworkInterface *> *)p)[index] = *(tt__NetworkInterface **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress:
		if (t == SOAP_TYPE_tt__IPAddress || soap_fbase(t, SOAP_TYPE_tt__IPAddress))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__IPAddress *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__IPAddress *> *)p)[index] = *(tt__IPAddress **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__token:
		if (t == SOAP_TYPE_xsd__token)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory:
		if (t == SOAP_TYPE_tt__CapabilityCategory)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__CapabilityCategory>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__CapabilityCategory> *)p)[index] = *(tt__CapabilityCategory *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (t == SOAP_TYPE_std__string)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__User:
		if (t == SOAP_TYPE_tt__User || soap_fbase(t, SOAP_TYPE_tt__User))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__User *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__User *> *)p)[index] = *(tt__User **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost:
		if (t == SOAP_TYPE_tt__NetworkHost || soap_fbase(t, SOAP_TYPE_tt__NetworkHost))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__NetworkHost *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__NetworkHost *> *)p)[index] = *(tt__NetworkHost **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyURI:
		if (t == SOAP_TYPE_xsd__anyURI)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope:
		if (t == SOAP_TYPE_tt__Scope || soap_fbase(t, SOAP_TYPE_tt__Scope))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__Scope *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__Scope *> *)p)[index] = *(tt__Scope **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile:
		if (t == SOAP_TYPE_tt__BackupFile || soap_fbase(t, SOAP_TYPE_tt__BackupFile))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tt__BackupFile *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tt__BackupFile *> *)p)[index] = *(tt__BackupFile **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service:
		if (t == SOAP_TYPE_tds__Service || soap_fbase(t, SOAP_TYPE_tds__Service))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<tds__Service *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<tds__Service *> *)p)[index] = *(tds__Service **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__anyType:
		if (t == SOAP_TYPE_xsd__anyType)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<struct soap_dom_element>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<struct soap_dom_element> *)p)[index] = *(struct soap_dom_element *)q;
		}
		break;
	case SOAP_TYPE___wsd__Probe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __wsd__Probe type=%d location=%p object=%p\n", t, p, q));
		*(struct __wsd__Probe*)p = *(struct __wsd__Probe*)q;
		break;
	case SOAP_TYPE___wsd__ProbeMatches:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __wsd__ProbeMatches type=%d location=%p object=%p\n", t, p, q));
		*(struct __wsd__ProbeMatches*)p = *(struct __wsd__ProbeMatches*)q;
		break;
	case SOAP_TYPE_wsa5__EndpointReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE_wsa5__ReferenceParametersType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__ReferenceParametersType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__ReferenceParametersType*)p = *(struct wsa5__ReferenceParametersType*)q;
		break;
	case SOAP_TYPE_wsa5__MetadataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__MetadataType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__MetadataType*)p = *(struct wsa5__MetadataType*)q;
		break;
	case SOAP_TYPE_wsa5__ProblemActionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__ProblemActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__ProblemActionType*)p = *(struct wsa5__ProblemActionType*)q;
		break;
	case SOAP_TYPE_wsa5__RelatesToType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__RelatesToType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__RelatesToType*)p = *(struct wsa5__RelatesToType*)q;
		break;
	case SOAP_TYPE_chan__ChannelInstanceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct chan__ChannelInstanceType type=%d location=%p object=%p\n", t, p, q));
		*(struct chan__ChannelInstanceType*)p = *(struct chan__ChannelInstanceType*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_timeval:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct timeval type=%d location=%p object=%p\n", t, p, q));
		*(struct timeval*)p = *(struct timeval*)q;
		break;
	case SOAP_TYPE_xsd__hexBinary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__hexBinary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__hexBinary*)p = *(xsd__hexBinary*)q;
		break;
	case SOAP_TYPE_xsd__ID__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__ID__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__ID__*)p = *(xsd__ID__*)q;
		break;
	case SOAP_TYPE_xsd__IDREFS__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__IDREFS__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__IDREFS__*)p = *(xsd__IDREFS__*)q;
		break;
	case SOAP_TYPE_xsd__NCName__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__NCName__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__NCName__*)p = *(xsd__NCName__*)q;
		break;
	case SOAP_TYPE_xsd__QName__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__QName__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__QName__*)p = *(xsd__QName__*)q;
		break;
	case SOAP_TYPE_xsd__anySimpleType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anySimpleType__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anySimpleType__*)p = *(xsd__anySimpleType__*)q;
		break;
	case SOAP_TYPE_xsd__anyURI__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyURI__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyURI__*)p = *(xsd__anyURI__*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary__*)p = *(xsd__base64Binary__*)q;
		break;
	case SOAP_TYPE_xsd__boolean_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__boolean_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__boolean_*)p = *(xsd__boolean_*)q;
		break;
	case SOAP_TYPE_xsd__dateTime__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__dateTime__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__dateTime__*)p = *(xsd__dateTime__*)q;
		break;
	case SOAP_TYPE_xsd__double_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__double_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__double_*)p = *(xsd__double_*)q;
		break;
	case SOAP_TYPE_xsd__duration__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__duration__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__duration__*)p = *(xsd__duration__*)q;
		break;
	case SOAP_TYPE_xsd__float_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__float_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__float_*)p = *(xsd__float_*)q;
		break;
	case SOAP_TYPE_xsd__hexBinary__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__hexBinary__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__hexBinary__*)p = *(xsd__hexBinary__*)q;
		break;
	case SOAP_TYPE_xsd__int_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__int_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__int_*)p = *(xsd__int_*)q;
		break;
	case SOAP_TYPE_xsd__integer__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__integer__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__integer__*)p = *(xsd__integer__*)q;
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__nonNegativeInteger__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__nonNegativeInteger__*)p = *(xsd__nonNegativeInteger__*)q;
		break;
	case SOAP_TYPE_xsd__string_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__string_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__string_*)p = *(xsd__string_*)q;
		break;
	case SOAP_TYPE_xsd__token__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__token__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__token__*)p = *(xsd__token__*)q;
		break;
	case SOAP_TYPE_xsd__unsignedInt_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedInt_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedInt_*)p = *(xsd__unsignedInt_*)q;
		break;
	case SOAP_TYPE_wsnt__TopicExpressionTypeCustom:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__TopicExpressionTypeCustom type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__TopicExpressionTypeCustom*)p = *(wsnt__TopicExpressionTypeCustom*)q;
		break;
	case SOAP_TYPE_tds__AutoGeoModes__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__AutoGeoModes__ type=%d location=%p object=%p\n", t, p, q));
		*(tds__AutoGeoModes__*)p = *(tds__AutoGeoModes__*)q;
		break;
	case SOAP_TYPE_tds__StorageType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__StorageType__ type=%d location=%p object=%p\n", t, p, q));
		*(tds__StorageType__*)p = *(tds__StorageType__*)q;
		break;
	case SOAP_TYPE_tt__Name__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Name__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Name__*)p = *(tt__Name__*)q;
		break;
	case SOAP_TYPE_tt__RotateMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RotateMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RotateMode__*)p = *(tt__RotateMode__*)q;
		break;
	case SOAP_TYPE_tt__SceneOrientationMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SceneOrientationMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__SceneOrientationMode__*)p = *(tt__SceneOrientationMode__*)q;
		break;
	case SOAP_TYPE_tt__SceneOrientationOption__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SceneOrientationOption__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__SceneOrientationOption__*)p = *(tt__SceneOrientationOption__*)q;
		break;
	case SOAP_TYPE_tt__ViewModes__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ViewModes__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ViewModes__*)p = *(tt__ViewModes__*)q;
		break;
	case SOAP_TYPE_tt__VideoEncoding__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoding__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoding__*)p = *(tt__VideoEncoding__*)q;
		break;
	case SOAP_TYPE_tt__Mpeg4Profile__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Mpeg4Profile__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Mpeg4Profile__*)p = *(tt__Mpeg4Profile__*)q;
		break;
	case SOAP_TYPE_tt__H264Profile__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__H264Profile__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__H264Profile__*)p = *(tt__H264Profile__*)q;
		break;
	case SOAP_TYPE_tt__VideoEncodingMimeNames__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncodingMimeNames__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncodingMimeNames__*)p = *(tt__VideoEncodingMimeNames__*)q;
		break;
	case SOAP_TYPE_tt__VideoEncodingProfiles__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncodingProfiles__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncodingProfiles__*)p = *(tt__VideoEncodingProfiles__*)q;
		break;
	case SOAP_TYPE_tt__AudioEncoding__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncoding__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncoding__*)p = *(tt__AudioEncoding__*)q;
		break;
	case SOAP_TYPE_tt__AudioEncodingMimeNames__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncodingMimeNames__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncodingMimeNames__*)p = *(tt__AudioEncodingMimeNames__*)q;
		break;
	case SOAP_TYPE_tt__MetadataCompressionType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataCompressionType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataCompressionType__*)p = *(tt__MetadataCompressionType__*)q;
		break;
	case SOAP_TYPE_tt__StreamType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__StreamType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__StreamType__*)p = *(tt__StreamType__*)q;
		break;
	case SOAP_TYPE_tt__TransportProtocol__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TransportProtocol__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__TransportProtocol__*)p = *(tt__TransportProtocol__*)q;
		break;
	case SOAP_TYPE_tt__ScopeDefinition__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ScopeDefinition__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ScopeDefinition__*)p = *(tt__ScopeDefinition__*)q;
		break;
	case SOAP_TYPE_tt__DiscoveryMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DiscoveryMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__DiscoveryMode__*)p = *(tt__DiscoveryMode__*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceConfigPriority__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceConfigPriority__*)p = *(tt__NetworkInterfaceConfigPriority__*)q;
		break;
	case SOAP_TYPE_tt__Duplex__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Duplex__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Duplex__*)p = *(tt__Duplex__*)q;
		break;
	case SOAP_TYPE_tt__IANA_IfTypes__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IANA_IfTypes__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IANA_IfTypes__*)p = *(tt__IANA_IfTypes__*)q;
		break;
	case SOAP_TYPE_tt__IPv6DHCPConfiguration__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv6DHCPConfiguration__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv6DHCPConfiguration__*)p = *(tt__IPv6DHCPConfiguration__*)q;
		break;
	case SOAP_TYPE_tt__NetworkProtocolType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkProtocolType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkProtocolType__*)p = *(tt__NetworkProtocolType__*)q;
		break;
	case SOAP_TYPE_tt__NetworkHostType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkHostType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkHostType__*)p = *(tt__NetworkHostType__*)q;
		break;
	case SOAP_TYPE_tt__IPv4Address__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv4Address__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv4Address__*)p = *(tt__IPv4Address__*)q;
		break;
	case SOAP_TYPE_tt__IPv6Address__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv6Address__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv6Address__*)p = *(tt__IPv6Address__*)q;
		break;
	case SOAP_TYPE_tt__HwAddress__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__HwAddress__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__HwAddress__*)p = *(tt__HwAddress__*)q;
		break;
	case SOAP_TYPE_tt__IPType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPType__*)p = *(tt__IPType__*)q;
		break;
	case SOAP_TYPE_tt__DNSName__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DNSName__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__DNSName__*)p = *(tt__DNSName__*)q;
		break;
	case SOAP_TYPE_tt__Domain__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Domain__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Domain__*)p = *(tt__Domain__*)q;
		break;
	case SOAP_TYPE_tt__IPAddressFilterType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPAddressFilterType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPAddressFilterType__*)p = *(tt__IPAddressFilterType__*)q;
		break;
	case SOAP_TYPE_tt__DynamicDNSType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DynamicDNSType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__DynamicDNSType__*)p = *(tt__DynamicDNSType__*)q;
		break;
	case SOAP_TYPE_tt__Dot11SSIDType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11SSIDType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11SSIDType__*)p = *(tt__Dot11SSIDType__*)q;
		break;
	case SOAP_TYPE_tt__Dot11StationMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11StationMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11StationMode__*)p = *(tt__Dot11StationMode__*)q;
		break;
	case SOAP_TYPE_tt__Dot11SecurityMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11SecurityMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11SecurityMode__*)p = *(tt__Dot11SecurityMode__*)q;
		break;
	case SOAP_TYPE_tt__Dot11Cipher__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11Cipher__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11Cipher__*)p = *(tt__Dot11Cipher__*)q;
		break;
	case SOAP_TYPE_tt__Dot11PSK__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11PSK__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11PSK__*)p = *(tt__Dot11PSK__*)q;
		break;
	case SOAP_TYPE_tt__Dot11PSKPassphrase__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11PSKPassphrase__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11PSKPassphrase__*)p = *(tt__Dot11PSKPassphrase__*)q;
		break;
	case SOAP_TYPE_tt__Dot11SignalStrength__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11SignalStrength__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11SignalStrength__*)p = *(tt__Dot11SignalStrength__*)q;
		break;
	case SOAP_TYPE_tt__Dot11AuthAndMangementSuite__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11AuthAndMangementSuite__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11AuthAndMangementSuite__*)p = *(tt__Dot11AuthAndMangementSuite__*)q;
		break;
	case SOAP_TYPE_tt__CapabilityCategory__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CapabilityCategory__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__CapabilityCategory__*)p = *(tt__CapabilityCategory__*)q;
		break;
	case SOAP_TYPE_tt__SystemLogType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemLogType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemLogType__*)p = *(tt__SystemLogType__*)q;
		break;
	case SOAP_TYPE_tt__FactoryDefaultType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FactoryDefaultType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__FactoryDefaultType__*)p = *(tt__FactoryDefaultType__*)q;
		break;
	case SOAP_TYPE_tt__SetDateTimeType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SetDateTimeType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__SetDateTimeType__*)p = *(tt__SetDateTimeType__*)q;
		break;
	case SOAP_TYPE_tt__UserLevel__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__UserLevel__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__UserLevel__*)p = *(tt__UserLevel__*)q;
		break;
	case SOAP_TYPE_tt__RelayLogicalState__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelayLogicalState__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelayLogicalState__*)p = *(tt__RelayLogicalState__*)q;
		break;
	case SOAP_TYPE_tt__RelayIdleState__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelayIdleState__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelayIdleState__*)p = *(tt__RelayIdleState__*)q;
		break;
	case SOAP_TYPE_tt__RelayMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelayMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelayMode__*)p = *(tt__RelayMode__*)q;
		break;
	case SOAP_TYPE_tt__DigitalIdleState__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DigitalIdleState__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__DigitalIdleState__*)p = *(tt__DigitalIdleState__*)q;
		break;
	case SOAP_TYPE_tt__EFlipMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EFlipMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__EFlipMode__*)p = *(tt__EFlipMode__*)q;
		break;
	case SOAP_TYPE_tt__ReverseMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReverseMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReverseMode__*)p = *(tt__ReverseMode__*)q;
		break;
	case SOAP_TYPE_tt__AuxiliaryData__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AuxiliaryData__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__AuxiliaryData__*)p = *(tt__AuxiliaryData__*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourState__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourState__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourState__*)p = *(tt__PTZPresetTourState__*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourDirection__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourDirection__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourDirection__*)p = *(tt__PTZPresetTourDirection__*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourOperation__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourOperation__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourOperation__*)p = *(tt__PTZPresetTourOperation__*)q;
		break;
	case SOAP_TYPE_tt__AutoFocusMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AutoFocusMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__AutoFocusMode__*)p = *(tt__AutoFocusMode__*)q;
		break;
	case SOAP_TYPE_tt__WideDynamicMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WideDynamicMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__WideDynamicMode__*)p = *(tt__WideDynamicMode__*)q;
		break;
	case SOAP_TYPE_tt__BacklightCompensationMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__BacklightCompensationMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__BacklightCompensationMode__*)p = *(tt__BacklightCompensationMode__*)q;
		break;
	case SOAP_TYPE_tt__ExposurePriority__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ExposurePriority__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ExposurePriority__*)p = *(tt__ExposurePriority__*)q;
		break;
	case SOAP_TYPE_tt__ExposureMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ExposureMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ExposureMode__*)p = *(tt__ExposureMode__*)q;
		break;
	case SOAP_TYPE_tt__Enabled__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Enabled__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Enabled__*)p = *(tt__Enabled__*)q;
		break;
	case SOAP_TYPE_tt__WhiteBalanceMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WhiteBalanceMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__WhiteBalanceMode__*)p = *(tt__WhiteBalanceMode__*)q;
		break;
	case SOAP_TYPE_tt__IrCutFilterMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IrCutFilterMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IrCutFilterMode__*)p = *(tt__IrCutFilterMode__*)q;
		break;
	case SOAP_TYPE_tt__ImageStabilizationMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImageStabilizationMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImageStabilizationMode__*)p = *(tt__ImageStabilizationMode__*)q;
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IrCutFilterAutoBoundaryType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__IrCutFilterAutoBoundaryType__*)p = *(tt__IrCutFilterAutoBoundaryType__*)q;
		break;
	case SOAP_TYPE_tt__ToneCompensationMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ToneCompensationMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ToneCompensationMode__*)p = *(tt__ToneCompensationMode__*)q;
		break;
	case SOAP_TYPE_tt__DefoggingMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DefoggingMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__DefoggingMode__*)p = *(tt__DefoggingMode__*)q;
		break;
	case SOAP_TYPE_tt__TopicNamespaceLocation__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TopicNamespaceLocation__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__TopicNamespaceLocation__*)p = *(tt__TopicNamespaceLocation__*)q;
		break;
	case SOAP_TYPE_tt__PropertyOperation__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PropertyOperation__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__PropertyOperation__*)p = *(tt__PropertyOperation__*)q;
		break;
	case SOAP_TYPE_tt__Direction__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Direction__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Direction__*)p = *(tt__Direction__*)q;
		break;
	case SOAP_TYPE_tt__ReceiverMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReceiverMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReceiverMode__*)p = *(tt__ReceiverMode__*)q;
		break;
	case SOAP_TYPE_tt__ReceiverState__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReceiverState__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReceiverState__*)p = *(tt__ReceiverState__*)q;
		break;
	case SOAP_TYPE_tt__Description__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Description__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Description__*)p = *(tt__Description__*)q;
		break;
	case SOAP_TYPE_tt__XPathExpression__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__XPathExpression__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__XPathExpression__*)p = *(tt__XPathExpression__*)q;
		break;
	case SOAP_TYPE_tt__SearchState__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SearchState__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__SearchState__*)p = *(tt__SearchState__*)q;
		break;
	case SOAP_TYPE_tt__RecordingStatus__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingStatus__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingStatus__*)p = *(tt__RecordingStatus__*)q;
		break;
	case SOAP_TYPE_tt__TrackType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TrackType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__TrackType__*)p = *(tt__TrackType__*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobMode__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobMode__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobMode__*)p = *(tt__RecordingJobMode__*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobState__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobState__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobState__*)p = *(tt__RecordingJobState__*)q;
		break;
	case SOAP_TYPE_tt__ModeOfOperation__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ModeOfOperation__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ModeOfOperation__*)p = *(tt__ModeOfOperation__*)q;
		break;
	case SOAP_TYPE_tt__AudioClassType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioClassType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioClassType__*)p = *(tt__AudioClassType__*)q;
		break;
	case SOAP_TYPE_tt__OSDType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDType__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDType__*)p = *(tt__OSDType__*)q;
		break;
	case SOAP_TYPE_tt__ReferenceToken__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReferenceToken__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReferenceToken__*)p = *(tt__ReferenceToken__*)q;
		break;
	case SOAP_TYPE_tt__MoveStatus__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MoveStatus__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__MoveStatus__*)p = *(tt__MoveStatus__*)q;
		break;
	case SOAP_TYPE_tt__Entity__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Entity__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__Entity__*)p = *(tt__Entity__*)q;
		break;
	case SOAP_TYPE_wstop__FullTopicExpression__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__FullTopicExpression__ type=%d location=%p object=%p\n", t, p, q));
		*(wstop__FullTopicExpression__*)p = *(wstop__FullTopicExpression__*)q;
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__ConcreteTopicExpression__ type=%d location=%p object=%p\n", t, p, q));
		*(wstop__ConcreteTopicExpression__*)p = *(wstop__ConcreteTopicExpression__*)q;
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__SimpleTopicExpression__ type=%d location=%p object=%p\n", t, p, q));
		*(wstop__SimpleTopicExpression__*)p = *(wstop__SimpleTopicExpression__*)q;
		break;
	case SOAP_TYPE_wsd__RelationshipType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__RelationshipType__ type=%d location=%p object=%p\n", t, p, q));
		*(wsd__RelationshipType__*)p = *(wsd__RelationshipType__*)q;
		break;
	case SOAP_TYPE_wsd__FaultCodeType__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__FaultCodeType__ type=%d location=%p object=%p\n", t, p, q));
		*(wsd__FaultCodeType__*)p = *(wsd__FaultCodeType__*)q;
		break;
	case SOAP_TYPE_wsa__RelationshipTypeValues__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__RelationshipTypeValues__ type=%d location=%p object=%p\n", t, p, q));
		*(wsa__RelationshipTypeValues__*)p = *(wsa__RelationshipTypeValues__*)q;
		break;
	case SOAP_TYPE_wsa__FaultSubcodeValues__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__FaultSubcodeValues__ type=%d location=%p object=%p\n", t, p, q));
		*(wsa__FaultSubcodeValues__*)p = *(wsa__FaultSubcodeValues__*)q;
		break;
	case SOAP_TYPE_tt__ReceiverReference__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReceiverReference__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReceiverReference__*)p = *(tt__ReceiverReference__*)q;
		break;
	case SOAP_TYPE_tt__RecordingReference__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingReference__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingReference__*)p = *(tt__RecordingReference__*)q;
		break;
	case SOAP_TYPE_tt__TrackReference__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TrackReference__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__TrackReference__*)p = *(tt__TrackReference__*)q;
		break;
	case SOAP_TYPE_tt__JobToken__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__JobToken__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__JobToken__*)p = *(tt__JobToken__*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobReference__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobReference__ type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobReference__*)p = *(tt__RecordingJobReference__*)q;
		break;
	case SOAP_TYPE__tds__Service_Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__Service_Capabilities type=%d location=%p object=%p\n", t, p, q));
		*(_tds__Service_Capabilities*)p = *(_tds__Service_Capabilities*)q;
		break;
	case SOAP_TYPE_tds__Service:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__Service type=%d location=%p object=%p\n", t, p, q));
		*(tds__Service*)p = *(tds__Service*)q;
		break;
	case SOAP_TYPE_tds__DeviceServiceCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__DeviceServiceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tds__DeviceServiceCapabilities*)p = *(tds__DeviceServiceCapabilities*)q;
		break;
	case SOAP_TYPE_tds__NetworkCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__NetworkCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tds__NetworkCapabilities*)p = *(tds__NetworkCapabilities*)q;
		break;
	case SOAP_TYPE_tds__SecurityCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__SecurityCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tds__SecurityCapabilities*)p = *(tds__SecurityCapabilities*)q;
		break;
	case SOAP_TYPE_tds__SystemCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__SystemCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tds__SystemCapabilities*)p = *(tds__SystemCapabilities*)q;
		break;
	case SOAP_TYPE_tds__MiscCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__MiscCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tds__MiscCapabilities*)p = *(tds__MiscCapabilities*)q;
		break;
	case SOAP_TYPE__tds__UserCredential_Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__UserCredential_Extension type=%d location=%p object=%p\n", t, p, q));
		*(_tds__UserCredential_Extension*)p = *(_tds__UserCredential_Extension*)q;
		break;
	case SOAP_TYPE_tds__UserCredential:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__UserCredential type=%d location=%p object=%p\n", t, p, q));
		*(tds__UserCredential*)p = *(tds__UserCredential*)q;
		break;
	case SOAP_TYPE__tds__StorageConfigurationData_Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__StorageConfigurationData_Extension type=%d location=%p object=%p\n", t, p, q));
		*(_tds__StorageConfigurationData_Extension*)p = *(_tds__StorageConfigurationData_Extension*)q;
		break;
	case SOAP_TYPE_tds__StorageConfigurationData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__StorageConfigurationData type=%d location=%p object=%p\n", t, p, q));
		*(tds__StorageConfigurationData*)p = *(tds__StorageConfigurationData*)q;
		break;
	case SOAP_TYPE__tds__GetServices:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetServices type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetServices*)p = *(_tds__GetServices*)q;
		break;
	case SOAP_TYPE__tds__GetServicesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetServicesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetServicesResponse*)p = *(_tds__GetServicesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetServiceCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetServiceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetServiceCapabilities*)p = *(_tds__GetServiceCapabilities*)q;
		break;
	case SOAP_TYPE__tds__GetServiceCapabilitiesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetServiceCapabilitiesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetServiceCapabilitiesResponse*)p = *(_tds__GetServiceCapabilitiesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDeviceInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDeviceInformation type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDeviceInformation*)p = *(_tds__GetDeviceInformation*)q;
		break;
	case SOAP_TYPE__tds__GetDeviceInformationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDeviceInformationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDeviceInformationResponse*)p = *(_tds__GetDeviceInformationResponse*)q;
		break;
	case SOAP_TYPE__tds__SetSystemDateAndTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetSystemDateAndTime type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetSystemDateAndTime*)p = *(_tds__SetSystemDateAndTime*)q;
		break;
	case SOAP_TYPE__tds__SetSystemDateAndTimeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetSystemDateAndTimeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetSystemDateAndTimeResponse*)p = *(_tds__SetSystemDateAndTimeResponse*)q;
		break;
	case SOAP_TYPE__tds__GetSystemDateAndTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemDateAndTime type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemDateAndTime*)p = *(_tds__GetSystemDateAndTime*)q;
		break;
	case SOAP_TYPE__tds__GetSystemDateAndTimeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemDateAndTimeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemDateAndTimeResponse*)p = *(_tds__GetSystemDateAndTimeResponse*)q;
		break;
	case SOAP_TYPE__tds__SetSystemFactoryDefault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetSystemFactoryDefault type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetSystemFactoryDefault*)p = *(_tds__SetSystemFactoryDefault*)q;
		break;
	case SOAP_TYPE__tds__SetSystemFactoryDefaultResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetSystemFactoryDefaultResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetSystemFactoryDefaultResponse*)p = *(_tds__SetSystemFactoryDefaultResponse*)q;
		break;
	case SOAP_TYPE__tds__UpgradeSystemFirmware:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__UpgradeSystemFirmware type=%d location=%p object=%p\n", t, p, q));
		*(_tds__UpgradeSystemFirmware*)p = *(_tds__UpgradeSystemFirmware*)q;
		break;
	case SOAP_TYPE__tds__UpgradeSystemFirmwareResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__UpgradeSystemFirmwareResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__UpgradeSystemFirmwareResponse*)p = *(_tds__UpgradeSystemFirmwareResponse*)q;
		break;
	case SOAP_TYPE__tds__SystemReboot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SystemReboot type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SystemReboot*)p = *(_tds__SystemReboot*)q;
		break;
	case SOAP_TYPE__tds__SystemRebootResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SystemRebootResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SystemRebootResponse*)p = *(_tds__SystemRebootResponse*)q;
		break;
	case SOAP_TYPE__tds__RestoreSystem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__RestoreSystem type=%d location=%p object=%p\n", t, p, q));
		*(_tds__RestoreSystem*)p = *(_tds__RestoreSystem*)q;
		break;
	case SOAP_TYPE__tds__RestoreSystemResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__RestoreSystemResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__RestoreSystemResponse*)p = *(_tds__RestoreSystemResponse*)q;
		break;
	case SOAP_TYPE__tds__GetSystemBackup:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemBackup type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemBackup*)p = *(_tds__GetSystemBackup*)q;
		break;
	case SOAP_TYPE__tds__GetSystemBackupResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemBackupResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemBackupResponse*)p = *(_tds__GetSystemBackupResponse*)q;
		break;
	case SOAP_TYPE__tds__GetSystemSupportInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemSupportInformation type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemSupportInformation*)p = *(_tds__GetSystemSupportInformation*)q;
		break;
	case SOAP_TYPE__tds__GetSystemSupportInformationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemSupportInformationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemSupportInformationResponse*)p = *(_tds__GetSystemSupportInformationResponse*)q;
		break;
	case SOAP_TYPE__tds__GetSystemLog:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemLog type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemLog*)p = *(_tds__GetSystemLog*)q;
		break;
	case SOAP_TYPE__tds__GetSystemLogResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemLogResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemLogResponse*)p = *(_tds__GetSystemLogResponse*)q;
		break;
	case SOAP_TYPE__tds__GetScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetScopes type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetScopes*)p = *(_tds__GetScopes*)q;
		break;
	case SOAP_TYPE__tds__GetScopesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetScopesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetScopesResponse*)p = *(_tds__GetScopesResponse*)q;
		break;
	case SOAP_TYPE__tds__SetScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetScopes type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetScopes*)p = *(_tds__SetScopes*)q;
		break;
	case SOAP_TYPE__tds__SetScopesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetScopesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetScopesResponse*)p = *(_tds__SetScopesResponse*)q;
		break;
	case SOAP_TYPE__tds__AddScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__AddScopes type=%d location=%p object=%p\n", t, p, q));
		*(_tds__AddScopes*)p = *(_tds__AddScopes*)q;
		break;
	case SOAP_TYPE__tds__AddScopesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__AddScopesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__AddScopesResponse*)p = *(_tds__AddScopesResponse*)q;
		break;
	case SOAP_TYPE__tds__RemoveScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__RemoveScopes type=%d location=%p object=%p\n", t, p, q));
		*(_tds__RemoveScopes*)p = *(_tds__RemoveScopes*)q;
		break;
	case SOAP_TYPE__tds__RemoveScopesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__RemoveScopesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__RemoveScopesResponse*)p = *(_tds__RemoveScopesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDiscoveryMode*)p = *(_tds__GetDiscoveryMode*)q;
		break;
	case SOAP_TYPE__tds__GetDiscoveryModeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDiscoveryModeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDiscoveryModeResponse*)p = *(_tds__GetDiscoveryModeResponse*)q;
		break;
	case SOAP_TYPE__tds__SetDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDiscoveryMode*)p = *(_tds__SetDiscoveryMode*)q;
		break;
	case SOAP_TYPE__tds__SetDiscoveryModeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDiscoveryModeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDiscoveryModeResponse*)p = *(_tds__SetDiscoveryModeResponse*)q;
		break;
	case SOAP_TYPE__tds__GetRemoteDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetRemoteDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetRemoteDiscoveryMode*)p = *(_tds__GetRemoteDiscoveryMode*)q;
		break;
	case SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetRemoteDiscoveryModeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetRemoteDiscoveryModeResponse*)p = *(_tds__GetRemoteDiscoveryModeResponse*)q;
		break;
	case SOAP_TYPE__tds__SetRemoteDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRemoteDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRemoteDiscoveryMode*)p = *(_tds__SetRemoteDiscoveryMode*)q;
		break;
	case SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRemoteDiscoveryModeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRemoteDiscoveryModeResponse*)p = *(_tds__SetRemoteDiscoveryModeResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDPAddresses:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDPAddresses type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDPAddresses*)p = *(_tds__GetDPAddresses*)q;
		break;
	case SOAP_TYPE__tds__GetDPAddressesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDPAddressesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDPAddressesResponse*)p = *(_tds__GetDPAddressesResponse*)q;
		break;
	case SOAP_TYPE__tds__SetDPAddresses:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDPAddresses type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDPAddresses*)p = *(_tds__SetDPAddresses*)q;
		break;
	case SOAP_TYPE__tds__SetDPAddressesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDPAddressesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDPAddressesResponse*)p = *(_tds__SetDPAddressesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetEndpointReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetEndpointReference type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetEndpointReference*)p = *(_tds__GetEndpointReference*)q;
		break;
	case SOAP_TYPE__tds__GetEndpointReferenceResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetEndpointReferenceResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetEndpointReferenceResponse*)p = *(_tds__GetEndpointReferenceResponse*)q;
		break;
	case SOAP_TYPE__tds__GetRemoteUser:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetRemoteUser type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetRemoteUser*)p = *(_tds__GetRemoteUser*)q;
		break;
	case SOAP_TYPE__tds__GetRemoteUserResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetRemoteUserResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetRemoteUserResponse*)p = *(_tds__GetRemoteUserResponse*)q;
		break;
	case SOAP_TYPE__tds__SetRemoteUser:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRemoteUser type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRemoteUser*)p = *(_tds__SetRemoteUser*)q;
		break;
	case SOAP_TYPE__tds__SetRemoteUserResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRemoteUserResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRemoteUserResponse*)p = *(_tds__SetRemoteUserResponse*)q;
		break;
	case SOAP_TYPE__tds__GetUsers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetUsers type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetUsers*)p = *(_tds__GetUsers*)q;
		break;
	case SOAP_TYPE__tds__GetUsersResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetUsersResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetUsersResponse*)p = *(_tds__GetUsersResponse*)q;
		break;
	case SOAP_TYPE__tds__CreateUsers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateUsers type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateUsers*)p = *(_tds__CreateUsers*)q;
		break;
	case SOAP_TYPE__tds__CreateUsersResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateUsersResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateUsersResponse*)p = *(_tds__CreateUsersResponse*)q;
		break;
	case SOAP_TYPE__tds__DeleteUsers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteUsers type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteUsers*)p = *(_tds__DeleteUsers*)q;
		break;
	case SOAP_TYPE__tds__DeleteUsersResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteUsersResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteUsersResponse*)p = *(_tds__DeleteUsersResponse*)q;
		break;
	case SOAP_TYPE__tds__SetUser:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetUser type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetUser*)p = *(_tds__SetUser*)q;
		break;
	case SOAP_TYPE__tds__SetUserResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetUserResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetUserResponse*)p = *(_tds__SetUserResponse*)q;
		break;
	case SOAP_TYPE__tds__GetWsdlUrl:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetWsdlUrl type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetWsdlUrl*)p = *(_tds__GetWsdlUrl*)q;
		break;
	case SOAP_TYPE__tds__GetWsdlUrlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetWsdlUrlResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetWsdlUrlResponse*)p = *(_tds__GetWsdlUrlResponse*)q;
		break;
	case SOAP_TYPE__tds__GetCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCapabilities*)p = *(_tds__GetCapabilities*)q;
		break;
	case SOAP_TYPE__tds__GetCapabilitiesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCapabilitiesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCapabilitiesResponse*)p = *(_tds__GetCapabilitiesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetHostname:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetHostname type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetHostname*)p = *(_tds__GetHostname*)q;
		break;
	case SOAP_TYPE__tds__GetHostnameResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetHostnameResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetHostnameResponse*)p = *(_tds__GetHostnameResponse*)q;
		break;
	case SOAP_TYPE__tds__SetHostname:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetHostname type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetHostname*)p = *(_tds__SetHostname*)q;
		break;
	case SOAP_TYPE__tds__SetHostnameResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetHostnameResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetHostnameResponse*)p = *(_tds__SetHostnameResponse*)q;
		break;
	case SOAP_TYPE__tds__SetHostnameFromDHCP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetHostnameFromDHCP type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetHostnameFromDHCP*)p = *(_tds__SetHostnameFromDHCP*)q;
		break;
	case SOAP_TYPE__tds__SetHostnameFromDHCPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetHostnameFromDHCPResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetHostnameFromDHCPResponse*)p = *(_tds__SetHostnameFromDHCPResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDNS type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDNS*)p = *(_tds__GetDNS*)q;
		break;
	case SOAP_TYPE__tds__GetDNSResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDNSResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDNSResponse*)p = *(_tds__GetDNSResponse*)q;
		break;
	case SOAP_TYPE__tds__SetDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDNS type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDNS*)p = *(_tds__SetDNS*)q;
		break;
	case SOAP_TYPE__tds__SetDNSResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDNSResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDNSResponse*)p = *(_tds__SetDNSResponse*)q;
		break;
	case SOAP_TYPE__tds__GetNTP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNTP type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNTP*)p = *(_tds__GetNTP*)q;
		break;
	case SOAP_TYPE__tds__GetNTPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNTPResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNTPResponse*)p = *(_tds__GetNTPResponse*)q;
		break;
	case SOAP_TYPE__tds__SetNTP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNTP type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNTP*)p = *(_tds__SetNTP*)q;
		break;
	case SOAP_TYPE__tds__SetNTPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNTPResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNTPResponse*)p = *(_tds__SetNTPResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDynamicDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDynamicDNS type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDynamicDNS*)p = *(_tds__GetDynamicDNS*)q;
		break;
	case SOAP_TYPE__tds__GetDynamicDNSResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDynamicDNSResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDynamicDNSResponse*)p = *(_tds__GetDynamicDNSResponse*)q;
		break;
	case SOAP_TYPE__tds__SetDynamicDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDynamicDNS type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDynamicDNS*)p = *(_tds__SetDynamicDNS*)q;
		break;
	case SOAP_TYPE__tds__SetDynamicDNSResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDynamicDNSResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDynamicDNSResponse*)p = *(_tds__SetDynamicDNSResponse*)q;
		break;
	case SOAP_TYPE__tds__GetNetworkInterfaces:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNetworkInterfaces type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNetworkInterfaces*)p = *(_tds__GetNetworkInterfaces*)q;
		break;
	case SOAP_TYPE__tds__GetNetworkInterfacesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNetworkInterfacesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNetworkInterfacesResponse*)p = *(_tds__GetNetworkInterfacesResponse*)q;
		break;
	case SOAP_TYPE__tds__SetNetworkInterfaces:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNetworkInterfaces type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNetworkInterfaces*)p = *(_tds__SetNetworkInterfaces*)q;
		break;
	case SOAP_TYPE__tds__SetNetworkInterfacesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNetworkInterfacesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNetworkInterfacesResponse*)p = *(_tds__SetNetworkInterfacesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetNetworkProtocols:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNetworkProtocols type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNetworkProtocols*)p = *(_tds__GetNetworkProtocols*)q;
		break;
	case SOAP_TYPE__tds__GetNetworkProtocolsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNetworkProtocolsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNetworkProtocolsResponse*)p = *(_tds__GetNetworkProtocolsResponse*)q;
		break;
	case SOAP_TYPE__tds__SetNetworkProtocols:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNetworkProtocols type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNetworkProtocols*)p = *(_tds__SetNetworkProtocols*)q;
		break;
	case SOAP_TYPE__tds__SetNetworkProtocolsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNetworkProtocolsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNetworkProtocolsResponse*)p = *(_tds__SetNetworkProtocolsResponse*)q;
		break;
	case SOAP_TYPE__tds__GetNetworkDefaultGateway:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNetworkDefaultGateway type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNetworkDefaultGateway*)p = *(_tds__GetNetworkDefaultGateway*)q;
		break;
	case SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetNetworkDefaultGatewayResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetNetworkDefaultGatewayResponse*)p = *(_tds__GetNetworkDefaultGatewayResponse*)q;
		break;
	case SOAP_TYPE__tds__SetNetworkDefaultGateway:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNetworkDefaultGateway type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNetworkDefaultGateway*)p = *(_tds__SetNetworkDefaultGateway*)q;
		break;
	case SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetNetworkDefaultGatewayResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetNetworkDefaultGatewayResponse*)p = *(_tds__SetNetworkDefaultGatewayResponse*)q;
		break;
	case SOAP_TYPE__tds__GetZeroConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetZeroConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetZeroConfiguration*)p = *(_tds__GetZeroConfiguration*)q;
		break;
	case SOAP_TYPE__tds__GetZeroConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetZeroConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetZeroConfigurationResponse*)p = *(_tds__GetZeroConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__SetZeroConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetZeroConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetZeroConfiguration*)p = *(_tds__SetZeroConfiguration*)q;
		break;
	case SOAP_TYPE__tds__SetZeroConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetZeroConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetZeroConfigurationResponse*)p = *(_tds__SetZeroConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__GetIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetIPAddressFilter*)p = *(_tds__GetIPAddressFilter*)q;
		break;
	case SOAP_TYPE__tds__GetIPAddressFilterResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetIPAddressFilterResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetIPAddressFilterResponse*)p = *(_tds__GetIPAddressFilterResponse*)q;
		break;
	case SOAP_TYPE__tds__SetIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetIPAddressFilter*)p = *(_tds__SetIPAddressFilter*)q;
		break;
	case SOAP_TYPE__tds__SetIPAddressFilterResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetIPAddressFilterResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetIPAddressFilterResponse*)p = *(_tds__SetIPAddressFilterResponse*)q;
		break;
	case SOAP_TYPE__tds__AddIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__AddIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(_tds__AddIPAddressFilter*)p = *(_tds__AddIPAddressFilter*)q;
		break;
	case SOAP_TYPE__tds__AddIPAddressFilterResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__AddIPAddressFilterResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__AddIPAddressFilterResponse*)p = *(_tds__AddIPAddressFilterResponse*)q;
		break;
	case SOAP_TYPE__tds__RemoveIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__RemoveIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(_tds__RemoveIPAddressFilter*)p = *(_tds__RemoveIPAddressFilter*)q;
		break;
	case SOAP_TYPE__tds__RemoveIPAddressFilterResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__RemoveIPAddressFilterResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__RemoveIPAddressFilterResponse*)p = *(_tds__RemoveIPAddressFilterResponse*)q;
		break;
	case SOAP_TYPE__tds__GetAccessPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetAccessPolicy type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetAccessPolicy*)p = *(_tds__GetAccessPolicy*)q;
		break;
	case SOAP_TYPE__tds__GetAccessPolicyResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetAccessPolicyResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetAccessPolicyResponse*)p = *(_tds__GetAccessPolicyResponse*)q;
		break;
	case SOAP_TYPE__tds__SetAccessPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetAccessPolicy type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetAccessPolicy*)p = *(_tds__SetAccessPolicy*)q;
		break;
	case SOAP_TYPE__tds__SetAccessPolicyResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetAccessPolicyResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetAccessPolicyResponse*)p = *(_tds__SetAccessPolicyResponse*)q;
		break;
	case SOAP_TYPE__tds__CreateCertificate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateCertificate type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateCertificate*)p = *(_tds__CreateCertificate*)q;
		break;
	case SOAP_TYPE__tds__CreateCertificateResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateCertificateResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateCertificateResponse*)p = *(_tds__CreateCertificateResponse*)q;
		break;
	case SOAP_TYPE__tds__GetCertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCertificates type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCertificates*)p = *(_tds__GetCertificates*)q;
		break;
	case SOAP_TYPE__tds__GetCertificatesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCertificatesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCertificatesResponse*)p = *(_tds__GetCertificatesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetCertificatesStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCertificatesStatus type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCertificatesStatus*)p = *(_tds__GetCertificatesStatus*)q;
		break;
	case SOAP_TYPE__tds__GetCertificatesStatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCertificatesStatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCertificatesStatusResponse*)p = *(_tds__GetCertificatesStatusResponse*)q;
		break;
	case SOAP_TYPE__tds__SetCertificatesStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetCertificatesStatus type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetCertificatesStatus*)p = *(_tds__SetCertificatesStatus*)q;
		break;
	case SOAP_TYPE__tds__SetCertificatesStatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetCertificatesStatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetCertificatesStatusResponse*)p = *(_tds__SetCertificatesStatusResponse*)q;
		break;
	case SOAP_TYPE__tds__DeleteCertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteCertificates type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteCertificates*)p = *(_tds__DeleteCertificates*)q;
		break;
	case SOAP_TYPE__tds__DeleteCertificatesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteCertificatesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteCertificatesResponse*)p = *(_tds__DeleteCertificatesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetPkcs10Request:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetPkcs10Request type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetPkcs10Request*)p = *(_tds__GetPkcs10Request*)q;
		break;
	case SOAP_TYPE__tds__GetPkcs10RequestResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetPkcs10RequestResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetPkcs10RequestResponse*)p = *(_tds__GetPkcs10RequestResponse*)q;
		break;
	case SOAP_TYPE__tds__LoadCertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__LoadCertificates type=%d location=%p object=%p\n", t, p, q));
		*(_tds__LoadCertificates*)p = *(_tds__LoadCertificates*)q;
		break;
	case SOAP_TYPE__tds__LoadCertificatesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__LoadCertificatesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__LoadCertificatesResponse*)p = *(_tds__LoadCertificatesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetClientCertificateMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetClientCertificateMode type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetClientCertificateMode*)p = *(_tds__GetClientCertificateMode*)q;
		break;
	case SOAP_TYPE__tds__GetClientCertificateModeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetClientCertificateModeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetClientCertificateModeResponse*)p = *(_tds__GetClientCertificateModeResponse*)q;
		break;
	case SOAP_TYPE__tds__SetClientCertificateMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetClientCertificateMode type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetClientCertificateMode*)p = *(_tds__SetClientCertificateMode*)q;
		break;
	case SOAP_TYPE__tds__SetClientCertificateModeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetClientCertificateModeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetClientCertificateModeResponse*)p = *(_tds__SetClientCertificateModeResponse*)q;
		break;
	case SOAP_TYPE__tds__GetCACertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCACertificates type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCACertificates*)p = *(_tds__GetCACertificates*)q;
		break;
	case SOAP_TYPE__tds__GetCACertificatesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCACertificatesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCACertificatesResponse*)p = *(_tds__GetCACertificatesResponse*)q;
		break;
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKey:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__LoadCertificateWithPrivateKey type=%d location=%p object=%p\n", t, p, q));
		*(_tds__LoadCertificateWithPrivateKey*)p = *(_tds__LoadCertificateWithPrivateKey*)q;
		break;
	case SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__LoadCertificateWithPrivateKeyResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__LoadCertificateWithPrivateKeyResponse*)p = *(_tds__LoadCertificateWithPrivateKeyResponse*)q;
		break;
	case SOAP_TYPE__tds__GetCertificateInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCertificateInformation type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCertificateInformation*)p = *(_tds__GetCertificateInformation*)q;
		break;
	case SOAP_TYPE__tds__GetCertificateInformationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetCertificateInformationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetCertificateInformationResponse*)p = *(_tds__GetCertificateInformationResponse*)q;
		break;
	case SOAP_TYPE__tds__LoadCACertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__LoadCACertificates type=%d location=%p object=%p\n", t, p, q));
		*(_tds__LoadCACertificates*)p = *(_tds__LoadCACertificates*)q;
		break;
	case SOAP_TYPE__tds__LoadCACertificatesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__LoadCACertificatesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__LoadCACertificatesResponse*)p = *(_tds__LoadCACertificatesResponse*)q;
		break;
	case SOAP_TYPE__tds__CreateDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateDot1XConfiguration*)p = *(_tds__CreateDot1XConfiguration*)q;
		break;
	case SOAP_TYPE__tds__CreateDot1XConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateDot1XConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateDot1XConfigurationResponse*)p = *(_tds__CreateDot1XConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__SetDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDot1XConfiguration*)p = *(_tds__SetDot1XConfiguration*)q;
		break;
	case SOAP_TYPE__tds__SetDot1XConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetDot1XConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetDot1XConfigurationResponse*)p = *(_tds__SetDot1XConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot1XConfiguration*)p = *(_tds__GetDot1XConfiguration*)q;
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot1XConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot1XConfigurationResponse*)p = *(_tds__GetDot1XConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurations:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot1XConfigurations type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot1XConfigurations*)p = *(_tds__GetDot1XConfigurations*)q;
		break;
	case SOAP_TYPE__tds__GetDot1XConfigurationsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot1XConfigurationsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot1XConfigurationsResponse*)p = *(_tds__GetDot1XConfigurationsResponse*)q;
		break;
	case SOAP_TYPE__tds__DeleteDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteDot1XConfiguration*)p = *(_tds__DeleteDot1XConfiguration*)q;
		break;
	case SOAP_TYPE__tds__DeleteDot1XConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteDot1XConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteDot1XConfigurationResponse*)p = *(_tds__DeleteDot1XConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__GetRelayOutputs:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetRelayOutputs type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetRelayOutputs*)p = *(_tds__GetRelayOutputs*)q;
		break;
	case SOAP_TYPE__tds__GetRelayOutputsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetRelayOutputsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetRelayOutputsResponse*)p = *(_tds__GetRelayOutputsResponse*)q;
		break;
	case SOAP_TYPE__tds__SetRelayOutputSettings:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRelayOutputSettings type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRelayOutputSettings*)p = *(_tds__SetRelayOutputSettings*)q;
		break;
	case SOAP_TYPE__tds__SetRelayOutputSettingsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRelayOutputSettingsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRelayOutputSettingsResponse*)p = *(_tds__SetRelayOutputSettingsResponse*)q;
		break;
	case SOAP_TYPE__tds__SetRelayOutputState:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRelayOutputState type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRelayOutputState*)p = *(_tds__SetRelayOutputState*)q;
		break;
	case SOAP_TYPE__tds__SetRelayOutputStateResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetRelayOutputStateResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetRelayOutputStateResponse*)p = *(_tds__SetRelayOutputStateResponse*)q;
		break;
	case SOAP_TYPE__tds__SendAuxiliaryCommand:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SendAuxiliaryCommand type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SendAuxiliaryCommand*)p = *(_tds__SendAuxiliaryCommand*)q;
		break;
	case SOAP_TYPE__tds__SendAuxiliaryCommandResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SendAuxiliaryCommandResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SendAuxiliaryCommandResponse*)p = *(_tds__SendAuxiliaryCommandResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDot11Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot11Capabilities type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot11Capabilities*)p = *(_tds__GetDot11Capabilities*)q;
		break;
	case SOAP_TYPE__tds__GetDot11CapabilitiesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot11CapabilitiesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot11CapabilitiesResponse*)p = *(_tds__GetDot11CapabilitiesResponse*)q;
		break;
	case SOAP_TYPE__tds__GetDot11Status:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot11Status type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot11Status*)p = *(_tds__GetDot11Status*)q;
		break;
	case SOAP_TYPE__tds__GetDot11StatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetDot11StatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetDot11StatusResponse*)p = *(_tds__GetDot11StatusResponse*)q;
		break;
	case SOAP_TYPE__tds__ScanAvailableDot11Networks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__ScanAvailableDot11Networks type=%d location=%p object=%p\n", t, p, q));
		*(_tds__ScanAvailableDot11Networks*)p = *(_tds__ScanAvailableDot11Networks*)q;
		break;
	case SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__ScanAvailableDot11NetworksResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__ScanAvailableDot11NetworksResponse*)p = *(_tds__ScanAvailableDot11NetworksResponse*)q;
		break;
	case SOAP_TYPE__tds__GetSystemUris:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemUris type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemUris*)p = *(_tds__GetSystemUris*)q;
		break;
	case SOAP_TYPE__tds__GetSystemUrisResponse_Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemUrisResponse_Extension type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemUrisResponse_Extension*)p = *(_tds__GetSystemUrisResponse_Extension*)q;
		break;
	case SOAP_TYPE__tds__GetSystemUrisResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetSystemUrisResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetSystemUrisResponse*)p = *(_tds__GetSystemUrisResponse*)q;
		break;
	case SOAP_TYPE__tds__StartFirmwareUpgrade:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__StartFirmwareUpgrade type=%d location=%p object=%p\n", t, p, q));
		*(_tds__StartFirmwareUpgrade*)p = *(_tds__StartFirmwareUpgrade*)q;
		break;
	case SOAP_TYPE__tds__StartFirmwareUpgradeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__StartFirmwareUpgradeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__StartFirmwareUpgradeResponse*)p = *(_tds__StartFirmwareUpgradeResponse*)q;
		break;
	case SOAP_TYPE__tds__StartSystemRestore:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__StartSystemRestore type=%d location=%p object=%p\n", t, p, q));
		*(_tds__StartSystemRestore*)p = *(_tds__StartSystemRestore*)q;
		break;
	case SOAP_TYPE__tds__StartSystemRestoreResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__StartSystemRestoreResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__StartSystemRestoreResponse*)p = *(_tds__StartSystemRestoreResponse*)q;
		break;
	case SOAP_TYPE__tds__GetStorageConfigurations:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetStorageConfigurations type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetStorageConfigurations*)p = *(_tds__GetStorageConfigurations*)q;
		break;
	case SOAP_TYPE__tds__GetStorageConfigurationsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetStorageConfigurationsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetStorageConfigurationsResponse*)p = *(_tds__GetStorageConfigurationsResponse*)q;
		break;
	case SOAP_TYPE__tds__CreateStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateStorageConfiguration*)p = *(_tds__CreateStorageConfiguration*)q;
		break;
	case SOAP_TYPE__tds__CreateStorageConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__CreateStorageConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__CreateStorageConfigurationResponse*)p = *(_tds__CreateStorageConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__GetStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetStorageConfiguration*)p = *(_tds__GetStorageConfiguration*)q;
		break;
	case SOAP_TYPE__tds__GetStorageConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetStorageConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetStorageConfigurationResponse*)p = *(_tds__GetStorageConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__SetStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetStorageConfiguration*)p = *(_tds__SetStorageConfiguration*)q;
		break;
	case SOAP_TYPE__tds__SetStorageConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetStorageConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetStorageConfigurationResponse*)p = *(_tds__SetStorageConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__DeleteStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteStorageConfiguration*)p = *(_tds__DeleteStorageConfiguration*)q;
		break;
	case SOAP_TYPE__tds__DeleteStorageConfigurationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteStorageConfigurationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteStorageConfigurationResponse*)p = *(_tds__DeleteStorageConfigurationResponse*)q;
		break;
	case SOAP_TYPE__tds__GetGeoLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetGeoLocation type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetGeoLocation*)p = *(_tds__GetGeoLocation*)q;
		break;
	case SOAP_TYPE__tds__GetGeoLocationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__GetGeoLocationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__GetGeoLocationResponse*)p = *(_tds__GetGeoLocationResponse*)q;
		break;
	case SOAP_TYPE__tds__SetGeoLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetGeoLocation type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetGeoLocation*)p = *(_tds__SetGeoLocation*)q;
		break;
	case SOAP_TYPE__tds__SetGeoLocationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__SetGeoLocationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__SetGeoLocationResponse*)p = *(_tds__SetGeoLocationResponse*)q;
		break;
	case SOAP_TYPE__tds__DeleteGeoLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteGeoLocation type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteGeoLocation*)p = *(_tds__DeleteGeoLocation*)q;
		break;
	case SOAP_TYPE__tds__DeleteGeoLocationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tds__DeleteGeoLocationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tds__DeleteGeoLocationResponse*)p = *(_tds__DeleteGeoLocationResponse*)q;
		break;
	case SOAP_TYPE_tt__DeviceEntity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DeviceEntity type=%d location=%p object=%p\n", t, p, q));
		*(tt__DeviceEntity*)p = *(tt__DeviceEntity*)q;
		break;
	case SOAP_TYPE_tt__IntRectangle:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IntRectangle type=%d location=%p object=%p\n", t, p, q));
		*(tt__IntRectangle*)p = *(tt__IntRectangle*)q;
		break;
	case SOAP_TYPE_tt__IntRectangleRange:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IntRectangleRange type=%d location=%p object=%p\n", t, p, q));
		*(tt__IntRectangleRange*)p = *(tt__IntRectangleRange*)q;
		break;
	case SOAP_TYPE_tt__IntRange:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IntRange type=%d location=%p object=%p\n", t, p, q));
		*(tt__IntRange*)p = *(tt__IntRange*)q;
		break;
	case SOAP_TYPE_tt__FloatRange:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FloatRange type=%d location=%p object=%p\n", t, p, q));
		*(tt__FloatRange*)p = *(tt__FloatRange*)q;
		break;
	case SOAP_TYPE_tt__DurationRange:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DurationRange type=%d location=%p object=%p\n", t, p, q));
		*(tt__DurationRange*)p = *(tt__DurationRange*)q;
		break;
	case SOAP_TYPE_tt__IntList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IntList type=%d location=%p object=%p\n", t, p, q));
		*(tt__IntList*)p = *(tt__IntList*)q;
		break;
	case SOAP_TYPE_tt__FloatList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FloatList type=%d location=%p object=%p\n", t, p, q));
		*(tt__FloatList*)p = *(tt__FloatList*)q;
		break;
	case SOAP_TYPE_tt__AnyHolder:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnyHolder type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnyHolder*)p = *(tt__AnyHolder*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceExtension*)p = *(tt__VideoSourceExtension*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceExtension2*)p = *(tt__VideoSourceExtension2*)q;
		break;
	case SOAP_TYPE_tt__Profile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Profile type=%d location=%p object=%p\n", t, p, q));
		*(tt__Profile*)p = *(tt__Profile*)q;
		break;
	case SOAP_TYPE_tt__ProfileExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ProfileExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ProfileExtension*)p = *(tt__ProfileExtension*)q;
		break;
	case SOAP_TYPE_tt__ProfileExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ProfileExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ProfileExtension2*)p = *(tt__ProfileExtension2*)q;
		break;
	case SOAP_TYPE_tt__ConfigurationEntity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ConfigurationEntity type=%d location=%p object=%p\n", t, p, q));
		*(tt__ConfigurationEntity*)p = *(tt__ConfigurationEntity*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceConfigurationExtension*)p = *(tt__VideoSourceConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceConfigurationExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceConfigurationExtension2*)p = *(tt__VideoSourceConfigurationExtension2*)q;
		break;
	case SOAP_TYPE_tt__Rotate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Rotate type=%d location=%p object=%p\n", t, p, q));
		*(tt__Rotate*)p = *(tt__Rotate*)q;
		break;
	case SOAP_TYPE_tt__RotateExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RotateExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__RotateExtension*)p = *(tt__RotateExtension*)q;
		break;
	case SOAP_TYPE_tt__LensProjection:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LensProjection type=%d location=%p object=%p\n", t, p, q));
		*(tt__LensProjection*)p = *(tt__LensProjection*)q;
		break;
	case SOAP_TYPE_tt__LensOffset:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LensOffset type=%d location=%p object=%p\n", t, p, q));
		*(tt__LensOffset*)p = *(tt__LensOffset*)q;
		break;
	case SOAP_TYPE_tt__LensDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LensDescription type=%d location=%p object=%p\n", t, p, q));
		*(tt__LensDescription*)p = *(tt__LensDescription*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceConfigurationOptions*)p = *(tt__VideoSourceConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceConfigurationOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceConfigurationOptionsExtension*)p = *(tt__VideoSourceConfigurationOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceConfigurationOptionsExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceConfigurationOptionsExtension2*)p = *(tt__VideoSourceConfigurationOptionsExtension2*)q;
		break;
	case SOAP_TYPE_tt__RotateOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RotateOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__RotateOptions*)p = *(tt__RotateOptions*)q;
		break;
	case SOAP_TYPE_tt__RotateOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RotateOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__RotateOptionsExtension*)p = *(tt__RotateOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__SceneOrientation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SceneOrientation type=%d location=%p object=%p\n", t, p, q));
		*(tt__SceneOrientation*)p = *(tt__SceneOrientation*)q;
		break;
	case SOAP_TYPE_tt__VideoResolution:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoResolution type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoResolution*)p = *(tt__VideoResolution*)q;
		break;
	case SOAP_TYPE_tt__VideoRateControl:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoRateControl type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoRateControl*)p = *(tt__VideoRateControl*)q;
		break;
	case SOAP_TYPE_tt__Mpeg4Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Mpeg4Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__Mpeg4Configuration*)p = *(tt__Mpeg4Configuration*)q;
		break;
	case SOAP_TYPE_tt__H264Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__H264Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__H264Configuration*)p = *(tt__H264Configuration*)q;
		break;
	case SOAP_TYPE_tt__VideoEncoderConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoderConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoderConfigurationOptions*)p = *(tt__VideoEncoderConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoderOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoderOptionsExtension*)p = *(tt__VideoEncoderOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__VideoEncoderOptionsExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoderOptionsExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoderOptionsExtension2*)p = *(tt__VideoEncoderOptionsExtension2*)q;
		break;
	case SOAP_TYPE_tt__JpegOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__JpegOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__JpegOptions*)p = *(tt__JpegOptions*)q;
		break;
	case SOAP_TYPE_tt__Mpeg4Options:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Mpeg4Options type=%d location=%p object=%p\n", t, p, q));
		*(tt__Mpeg4Options*)p = *(tt__Mpeg4Options*)q;
		break;
	case SOAP_TYPE_tt__H264Options:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__H264Options type=%d location=%p object=%p\n", t, p, q));
		*(tt__H264Options*)p = *(tt__H264Options*)q;
		break;
	case SOAP_TYPE_tt__VideoResolution2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoResolution2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoResolution2*)p = *(tt__VideoResolution2*)q;
		break;
	case SOAP_TYPE_tt__VideoRateControl2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoRateControl2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoRateControl2*)p = *(tt__VideoRateControl2*)q;
		break;
	case SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoder2ConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoder2ConfigurationOptions*)p = *(tt__VideoEncoder2ConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__AudioSourceConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioSourceConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioSourceConfigurationOptions*)p = *(tt__AudioSourceConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__AudioSourceOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioSourceOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioSourceOptionsExtension*)p = *(tt__AudioSourceOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__AudioEncoderConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncoderConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncoderConfigurationOptions*)p = *(tt__AudioEncoderConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__AudioEncoderConfigurationOption:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncoderConfigurationOption type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncoderConfigurationOption*)p = *(tt__AudioEncoderConfigurationOption*)q;
		break;
	case SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncoder2ConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncoder2ConfigurationOptions*)p = *(tt__AudioEncoder2ConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__MetadataConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataConfigurationExtension*)p = *(tt__MetadataConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZFilter type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZFilter*)p = *(tt__PTZFilter*)q;
		break;
	case SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tt__EventSubscription_SubscriptionPolicy type=%d location=%p object=%p\n", t, p, q));
		*(_tt__EventSubscription_SubscriptionPolicy*)p = *(_tt__EventSubscription_SubscriptionPolicy*)q;
		break;
	case SOAP_TYPE_tt__EventSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EventSubscription type=%d location=%p object=%p\n", t, p, q));
		*(tt__EventSubscription*)p = *(tt__EventSubscription*)q;
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataConfigurationOptions*)p = *(tt__MetadataConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataConfigurationOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataConfigurationOptionsExtension*)p = *(tt__MetadataConfigurationOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataConfigurationOptionsExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataConfigurationOptionsExtension2*)p = *(tt__MetadataConfigurationOptionsExtension2*)q;
		break;
	case SOAP_TYPE_tt__PTZStatusFilterOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZStatusFilterOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZStatusFilterOptions*)p = *(tt__PTZStatusFilterOptions*)q;
		break;
	case SOAP_TYPE_tt__PTZStatusFilterOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZStatusFilterOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZStatusFilterOptionsExtension*)p = *(tt__PTZStatusFilterOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__VideoOutputExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoOutputExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoOutputExtension*)p = *(tt__VideoOutputExtension*)q;
		break;
	case SOAP_TYPE_tt__VideoOutputConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoOutputConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoOutputConfigurationOptions*)p = *(tt__VideoOutputConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoDecoderConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoDecoderConfigurationOptions*)p = *(tt__VideoDecoderConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__H264DecOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__H264DecOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__H264DecOptions*)p = *(tt__H264DecOptions*)q;
		break;
	case SOAP_TYPE_tt__JpegDecOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__JpegDecOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__JpegDecOptions*)p = *(tt__JpegDecOptions*)q;
		break;
	case SOAP_TYPE_tt__Mpeg4DecOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Mpeg4DecOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__Mpeg4DecOptions*)p = *(tt__Mpeg4DecOptions*)q;
		break;
	case SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoDecoderConfigurationOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoDecoderConfigurationOptionsExtension*)p = *(tt__VideoDecoderConfigurationOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__AudioOutputConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioOutputConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioOutputConfigurationOptions*)p = *(tt__AudioOutputConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioDecoderConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioDecoderConfigurationOptions*)p = *(tt__AudioDecoderConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__G711DecOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__G711DecOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__G711DecOptions*)p = *(tt__G711DecOptions*)q;
		break;
	case SOAP_TYPE_tt__AACDecOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AACDecOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__AACDecOptions*)p = *(tt__AACDecOptions*)q;
		break;
	case SOAP_TYPE_tt__G726DecOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__G726DecOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__G726DecOptions*)p = *(tt__G726DecOptions*)q;
		break;
	case SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioDecoderConfigurationOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioDecoderConfigurationOptionsExtension*)p = *(tt__AudioDecoderConfigurationOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__MulticastConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MulticastConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__MulticastConfiguration*)p = *(tt__MulticastConfiguration*)q;
		break;
	case SOAP_TYPE_tt__StreamSetup:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__StreamSetup type=%d location=%p object=%p\n", t, p, q));
		*(tt__StreamSetup*)p = *(tt__StreamSetup*)q;
		break;
	case SOAP_TYPE_tt__Transport:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Transport type=%d location=%p object=%p\n", t, p, q));
		*(tt__Transport*)p = *(tt__Transport*)q;
		break;
	case SOAP_TYPE_tt__MediaUri:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MediaUri type=%d location=%p object=%p\n", t, p, q));
		*(tt__MediaUri*)p = *(tt__MediaUri*)q;
		break;
	case SOAP_TYPE_tt__Scope:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Scope type=%d location=%p object=%p\n", t, p, q));
		*(tt__Scope*)p = *(tt__Scope*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceExtension*)p = *(tt__NetworkInterfaceExtension*)q;
		break;
	case SOAP_TYPE_tt__Dot3Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot3Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot3Configuration*)p = *(tt__Dot3Configuration*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceExtension2*)p = *(tt__NetworkInterfaceExtension2*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceLink:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceLink type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceLink*)p = *(tt__NetworkInterfaceLink*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConnectionSetting:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceConnectionSetting type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceConnectionSetting*)p = *(tt__NetworkInterfaceConnectionSetting*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceInfo type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceInfo*)p = *(tt__NetworkInterfaceInfo*)q;
		break;
	case SOAP_TYPE_tt__IPv6NetworkInterface:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv6NetworkInterface type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv6NetworkInterface*)p = *(tt__IPv6NetworkInterface*)q;
		break;
	case SOAP_TYPE_tt__IPv4NetworkInterface:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv4NetworkInterface type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv4NetworkInterface*)p = *(tt__IPv4NetworkInterface*)q;
		break;
	case SOAP_TYPE_tt__IPv4Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv4Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv4Configuration*)p = *(tt__IPv4Configuration*)q;
		break;
	case SOAP_TYPE_tt__IPv6Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv6Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv6Configuration*)p = *(tt__IPv6Configuration*)q;
		break;
	case SOAP_TYPE_tt__IPv6ConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv6ConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv6ConfigurationExtension*)p = *(tt__IPv6ConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__NetworkProtocol:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkProtocol type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkProtocol*)p = *(tt__NetworkProtocol*)q;
		break;
	case SOAP_TYPE_tt__NetworkProtocolExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkProtocolExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkProtocolExtension*)p = *(tt__NetworkProtocolExtension*)q;
		break;
	case SOAP_TYPE_tt__NetworkHost:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkHost type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkHost*)p = *(tt__NetworkHost*)q;
		break;
	case SOAP_TYPE_tt__NetworkHostExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkHostExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkHostExtension*)p = *(tt__NetworkHostExtension*)q;
		break;
	case SOAP_TYPE_tt__IPAddress:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPAddress type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPAddress*)p = *(tt__IPAddress*)q;
		break;
	case SOAP_TYPE_tt__PrefixedIPv4Address:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PrefixedIPv4Address type=%d location=%p object=%p\n", t, p, q));
		*(tt__PrefixedIPv4Address*)p = *(tt__PrefixedIPv4Address*)q;
		break;
	case SOAP_TYPE_tt__PrefixedIPv6Address:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PrefixedIPv6Address type=%d location=%p object=%p\n", t, p, q));
		*(tt__PrefixedIPv6Address*)p = *(tt__PrefixedIPv6Address*)q;
		break;
	case SOAP_TYPE_tt__HostnameInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__HostnameInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__HostnameInformation*)p = *(tt__HostnameInformation*)q;
		break;
	case SOAP_TYPE_tt__HostnameInformationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__HostnameInformationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__HostnameInformationExtension*)p = *(tt__HostnameInformationExtension*)q;
		break;
	case SOAP_TYPE_tt__DNSInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DNSInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__DNSInformation*)p = *(tt__DNSInformation*)q;
		break;
	case SOAP_TYPE_tt__DNSInformationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DNSInformationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__DNSInformationExtension*)p = *(tt__DNSInformationExtension*)q;
		break;
	case SOAP_TYPE_tt__NTPInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NTPInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__NTPInformation*)p = *(tt__NTPInformation*)q;
		break;
	case SOAP_TYPE_tt__NTPInformationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NTPInformationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__NTPInformationExtension*)p = *(tt__NTPInformationExtension*)q;
		break;
	case SOAP_TYPE_tt__DynamicDNSInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DynamicDNSInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__DynamicDNSInformation*)p = *(tt__DynamicDNSInformation*)q;
		break;
	case SOAP_TYPE_tt__DynamicDNSInformationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DynamicDNSInformationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__DynamicDNSInformationExtension*)p = *(tt__DynamicDNSInformationExtension*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceSetConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceSetConfiguration*)p = *(tt__NetworkInterfaceSetConfiguration*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceSetConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceSetConfigurationExtension*)p = *(tt__NetworkInterfaceSetConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv6NetworkInterfaceSetConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv6NetworkInterfaceSetConfiguration*)p = *(tt__IPv6NetworkInterfaceSetConfiguration*)q;
		break;
	case SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPv4NetworkInterfaceSetConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPv4NetworkInterfaceSetConfiguration*)p = *(tt__IPv4NetworkInterfaceSetConfiguration*)q;
		break;
	case SOAP_TYPE_tt__NetworkGateway:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkGateway type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkGateway*)p = *(tt__NetworkGateway*)q;
		break;
	case SOAP_TYPE_tt__NetworkZeroConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkZeroConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkZeroConfiguration*)p = *(tt__NetworkZeroConfiguration*)q;
		break;
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkZeroConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkZeroConfigurationExtension*)p = *(tt__NetworkZeroConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__NetworkZeroConfigurationExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkZeroConfigurationExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkZeroConfigurationExtension2*)p = *(tt__NetworkZeroConfigurationExtension2*)q;
		break;
	case SOAP_TYPE_tt__IPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPAddressFilter*)p = *(tt__IPAddressFilter*)q;
		break;
	case SOAP_TYPE_tt__IPAddressFilterExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IPAddressFilterExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__IPAddressFilterExtension*)p = *(tt__IPAddressFilterExtension*)q;
		break;
	case SOAP_TYPE_tt__Dot11Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11Configuration*)p = *(tt__Dot11Configuration*)q;
		break;
	case SOAP_TYPE_tt__Dot11SecurityConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11SecurityConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11SecurityConfiguration*)p = *(tt__Dot11SecurityConfiguration*)q;
		break;
	case SOAP_TYPE_tt__Dot11SecurityConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11SecurityConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11SecurityConfigurationExtension*)p = *(tt__Dot11SecurityConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__Dot11PSKSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11PSKSet type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11PSKSet*)p = *(tt__Dot11PSKSet*)q;
		break;
	case SOAP_TYPE_tt__Dot11PSKSetExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11PSKSetExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11PSKSetExtension*)p = *(tt__Dot11PSKSetExtension*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterfaceSetConfigurationExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterfaceSetConfigurationExtension2*)p = *(tt__NetworkInterfaceSetConfigurationExtension2*)q;
		break;
	case SOAP_TYPE_tt__Dot11Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11Capabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11Capabilities*)p = *(tt__Dot11Capabilities*)q;
		break;
	case SOAP_TYPE_tt__Dot11Status:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11Status type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11Status*)p = *(tt__Dot11Status*)q;
		break;
	case SOAP_TYPE_tt__Dot11AvailableNetworks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11AvailableNetworks type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11AvailableNetworks*)p = *(tt__Dot11AvailableNetworks*)q;
		break;
	case SOAP_TYPE_tt__Dot11AvailableNetworksExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot11AvailableNetworksExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot11AvailableNetworksExtension*)p = *(tt__Dot11AvailableNetworksExtension*)q;
		break;
	case SOAP_TYPE_tt__Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Capabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__Capabilities*)p = *(tt__Capabilities*)q;
		break;
	case SOAP_TYPE_tt__CapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__CapabilitiesExtension*)p = *(tt__CapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__CapabilitiesExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CapabilitiesExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__CapabilitiesExtension2*)p = *(tt__CapabilitiesExtension2*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsCapabilities*)p = *(tt__AnalyticsCapabilities*)q;
		break;
	case SOAP_TYPE_tt__DeviceCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DeviceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__DeviceCapabilities*)p = *(tt__DeviceCapabilities*)q;
		break;
	case SOAP_TYPE_tt__DeviceCapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DeviceCapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__DeviceCapabilitiesExtension*)p = *(tt__DeviceCapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__EventCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EventCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__EventCapabilities*)p = *(tt__EventCapabilities*)q;
		break;
	case SOAP_TYPE_tt__IOCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IOCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__IOCapabilities*)p = *(tt__IOCapabilities*)q;
		break;
	case SOAP_TYPE_tt__IOCapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IOCapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__IOCapabilitiesExtension*)p = *(tt__IOCapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__IOCapabilitiesExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IOCapabilitiesExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__IOCapabilitiesExtension2*)p = *(tt__IOCapabilitiesExtension2*)q;
		break;
	case SOAP_TYPE_tt__MediaCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MediaCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__MediaCapabilities*)p = *(tt__MediaCapabilities*)q;
		break;
	case SOAP_TYPE_tt__MediaCapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MediaCapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__MediaCapabilitiesExtension*)p = *(tt__MediaCapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__RealTimeStreamingCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RealTimeStreamingCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__RealTimeStreamingCapabilities*)p = *(tt__RealTimeStreamingCapabilities*)q;
		break;
	case SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RealTimeStreamingCapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__RealTimeStreamingCapabilitiesExtension*)p = *(tt__RealTimeStreamingCapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__ProfileCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ProfileCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__ProfileCapabilities*)p = *(tt__ProfileCapabilities*)q;
		break;
	case SOAP_TYPE_tt__NetworkCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkCapabilities*)p = *(tt__NetworkCapabilities*)q;
		break;
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkCapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkCapabilitiesExtension*)p = *(tt__NetworkCapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__NetworkCapabilitiesExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkCapabilitiesExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkCapabilitiesExtension2*)p = *(tt__NetworkCapabilitiesExtension2*)q;
		break;
	case SOAP_TYPE_tt__SecurityCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SecurityCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__SecurityCapabilities*)p = *(tt__SecurityCapabilities*)q;
		break;
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SecurityCapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__SecurityCapabilitiesExtension*)p = *(tt__SecurityCapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__SecurityCapabilitiesExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SecurityCapabilitiesExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__SecurityCapabilitiesExtension2*)p = *(tt__SecurityCapabilitiesExtension2*)q;
		break;
	case SOAP_TYPE_tt__SystemCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemCapabilities*)p = *(tt__SystemCapabilities*)q;
		break;
	case SOAP_TYPE_tt__SystemCapabilitiesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemCapabilitiesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemCapabilitiesExtension*)p = *(tt__SystemCapabilitiesExtension*)q;
		break;
	case SOAP_TYPE_tt__SystemCapabilitiesExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemCapabilitiesExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemCapabilitiesExtension2*)p = *(tt__SystemCapabilitiesExtension2*)q;
		break;
	case SOAP_TYPE_tt__OnvifVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OnvifVersion type=%d location=%p object=%p\n", t, p, q));
		*(tt__OnvifVersion*)p = *(tt__OnvifVersion*)q;
		break;
	case SOAP_TYPE_tt__ImagingCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingCapabilities*)p = *(tt__ImagingCapabilities*)q;
		break;
	case SOAP_TYPE_tt__PTZCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZCapabilities*)p = *(tt__PTZCapabilities*)q;
		break;
	case SOAP_TYPE_tt__DeviceIOCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DeviceIOCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__DeviceIOCapabilities*)p = *(tt__DeviceIOCapabilities*)q;
		break;
	case SOAP_TYPE_tt__DisplayCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DisplayCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__DisplayCapabilities*)p = *(tt__DisplayCapabilities*)q;
		break;
	case SOAP_TYPE_tt__RecordingCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingCapabilities*)p = *(tt__RecordingCapabilities*)q;
		break;
	case SOAP_TYPE_tt__SearchCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SearchCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__SearchCapabilities*)p = *(tt__SearchCapabilities*)q;
		break;
	case SOAP_TYPE_tt__ReplayCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReplayCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReplayCapabilities*)p = *(tt__ReplayCapabilities*)q;
		break;
	case SOAP_TYPE_tt__ReceiverCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReceiverCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReceiverCapabilities*)p = *(tt__ReceiverCapabilities*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsDeviceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsDeviceCapabilities*)p = *(tt__AnalyticsDeviceCapabilities*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsDeviceExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsDeviceExtension*)p = *(tt__AnalyticsDeviceExtension*)q;
		break;
	case SOAP_TYPE_tt__SystemLog:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemLog type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemLog*)p = *(tt__SystemLog*)q;
		break;
	case SOAP_TYPE_tt__SupportInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SupportInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__SupportInformation*)p = *(tt__SupportInformation*)q;
		break;
	case SOAP_TYPE_tt__BinaryData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__BinaryData type=%d location=%p object=%p\n", t, p, q));
		*(tt__BinaryData*)p = *(tt__BinaryData*)q;
		break;
	case SOAP_TYPE_tt__AttachmentData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AttachmentData type=%d location=%p object=%p\n", t, p, q));
		*(tt__AttachmentData*)p = *(tt__AttachmentData*)q;
		break;
	case SOAP_TYPE_tt__BackupFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__BackupFile type=%d location=%p object=%p\n", t, p, q));
		*(tt__BackupFile*)p = *(tt__BackupFile*)q;
		break;
	case SOAP_TYPE_tt__SystemLogUriList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemLogUriList type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemLogUriList*)p = *(tt__SystemLogUriList*)q;
		break;
	case SOAP_TYPE_tt__SystemLogUri:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemLogUri type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemLogUri*)p = *(tt__SystemLogUri*)q;
		break;
	case SOAP_TYPE_tt__SystemDateTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemDateTime type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemDateTime*)p = *(tt__SystemDateTime*)q;
		break;
	case SOAP_TYPE_tt__SystemDateTimeExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SystemDateTimeExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__SystemDateTimeExtension*)p = *(tt__SystemDateTimeExtension*)q;
		break;
	case SOAP_TYPE_tt__DateTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DateTime type=%d location=%p object=%p\n", t, p, q));
		*(tt__DateTime*)p = *(tt__DateTime*)q;
		break;
	case SOAP_TYPE_tt__Date:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Date type=%d location=%p object=%p\n", t, p, q));
		*(tt__Date*)p = *(tt__Date*)q;
		break;
	case SOAP_TYPE_tt__Time:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Time type=%d location=%p object=%p\n", t, p, q));
		*(tt__Time*)p = *(tt__Time*)q;
		break;
	case SOAP_TYPE_tt__TimeZone:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TimeZone type=%d location=%p object=%p\n", t, p, q));
		*(tt__TimeZone*)p = *(tt__TimeZone*)q;
		break;
	case SOAP_TYPE_tt__RemoteUser:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RemoteUser type=%d location=%p object=%p\n", t, p, q));
		*(tt__RemoteUser*)p = *(tt__RemoteUser*)q;
		break;
	case SOAP_TYPE_tt__User:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__User type=%d location=%p object=%p\n", t, p, q));
		*(tt__User*)p = *(tt__User*)q;
		break;
	case SOAP_TYPE_tt__UserExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__UserExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__UserExtension*)p = *(tt__UserExtension*)q;
		break;
	case SOAP_TYPE_tt__CertificateGenerationParameters:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CertificateGenerationParameters type=%d location=%p object=%p\n", t, p, q));
		*(tt__CertificateGenerationParameters*)p = *(tt__CertificateGenerationParameters*)q;
		break;
	case SOAP_TYPE_tt__CertificateGenerationParametersExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CertificateGenerationParametersExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__CertificateGenerationParametersExtension*)p = *(tt__CertificateGenerationParametersExtension*)q;
		break;
	case SOAP_TYPE_tt__Certificate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Certificate type=%d location=%p object=%p\n", t, p, q));
		*(tt__Certificate*)p = *(tt__Certificate*)q;
		break;
	case SOAP_TYPE_tt__CertificateStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CertificateStatus type=%d location=%p object=%p\n", t, p, q));
		*(tt__CertificateStatus*)p = *(tt__CertificateStatus*)q;
		break;
	case SOAP_TYPE_tt__CertificateWithPrivateKey:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CertificateWithPrivateKey type=%d location=%p object=%p\n", t, p, q));
		*(tt__CertificateWithPrivateKey*)p = *(tt__CertificateWithPrivateKey*)q;
		break;
	case SOAP_TYPE_tt__CertificateInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CertificateInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__CertificateInformation*)p = *(tt__CertificateInformation*)q;
		break;
	case SOAP_TYPE_tt__CertificateInformationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CertificateInformationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__CertificateInformationExtension*)p = *(tt__CertificateInformationExtension*)q;
		break;
	case SOAP_TYPE_tt__Dot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot1XConfiguration*)p = *(tt__Dot1XConfiguration*)q;
		break;
	case SOAP_TYPE_tt__Dot1XConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Dot1XConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__Dot1XConfigurationExtension*)p = *(tt__Dot1XConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__EAPMethodConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EAPMethodConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__EAPMethodConfiguration*)p = *(tt__EAPMethodConfiguration*)q;
		break;
	case SOAP_TYPE_tt__EapMethodExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EapMethodExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__EapMethodExtension*)p = *(tt__EapMethodExtension*)q;
		break;
	case SOAP_TYPE_tt__TLSConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TLSConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__TLSConfiguration*)p = *(tt__TLSConfiguration*)q;
		break;
	case SOAP_TYPE_tt__GenericEapPwdConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__GenericEapPwdConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__GenericEapPwdConfigurationExtension*)p = *(tt__GenericEapPwdConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__RelayOutputSettings:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelayOutputSettings type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelayOutputSettings*)p = *(tt__RelayOutputSettings*)q;
		break;
	case SOAP_TYPE_tt__PTZNodeExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZNodeExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZNodeExtension*)p = *(tt__PTZNodeExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZNodeExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZNodeExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZNodeExtension2*)p = *(tt__PTZNodeExtension2*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourSupported:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourSupported type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourSupported*)p = *(tt__PTZPresetTourSupported*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourSupportedExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourSupportedExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourSupportedExtension*)p = *(tt__PTZPresetTourSupportedExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZConfigurationExtension*)p = *(tt__PTZConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZConfigurationExtension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZConfigurationExtension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZConfigurationExtension2*)p = *(tt__PTZConfigurationExtension2*)q;
		break;
	case SOAP_TYPE_tt__PTControlDirection:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTControlDirection type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTControlDirection*)p = *(tt__PTControlDirection*)q;
		break;
	case SOAP_TYPE_tt__PTControlDirectionExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTControlDirectionExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTControlDirectionExtension*)p = *(tt__PTControlDirectionExtension*)q;
		break;
	case SOAP_TYPE_tt__EFlip:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EFlip type=%d location=%p object=%p\n", t, p, q));
		*(tt__EFlip*)p = *(tt__EFlip*)q;
		break;
	case SOAP_TYPE_tt__Reverse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Reverse type=%d location=%p object=%p\n", t, p, q));
		*(tt__Reverse*)p = *(tt__Reverse*)q;
		break;
	case SOAP_TYPE_tt__PTZConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZConfigurationOptions*)p = *(tt__PTZConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__PTZConfigurationOptions2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZConfigurationOptions2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZConfigurationOptions2*)p = *(tt__PTZConfigurationOptions2*)q;
		break;
	case SOAP_TYPE_tt__PTControlDirectionOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTControlDirectionOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTControlDirectionOptions*)p = *(tt__PTControlDirectionOptions*)q;
		break;
	case SOAP_TYPE_tt__PTControlDirectionOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTControlDirectionOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTControlDirectionOptionsExtension*)p = *(tt__PTControlDirectionOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__EFlipOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EFlipOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__EFlipOptions*)p = *(tt__EFlipOptions*)q;
		break;
	case SOAP_TYPE_tt__EFlipOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EFlipOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__EFlipOptionsExtension*)p = *(tt__EFlipOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__ReverseOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReverseOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReverseOptions*)p = *(tt__ReverseOptions*)q;
		break;
	case SOAP_TYPE_tt__ReverseOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReverseOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReverseOptionsExtension*)p = *(tt__ReverseOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__PanTiltLimits:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PanTiltLimits type=%d location=%p object=%p\n", t, p, q));
		*(tt__PanTiltLimits*)p = *(tt__PanTiltLimits*)q;
		break;
	case SOAP_TYPE_tt__ZoomLimits:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ZoomLimits type=%d location=%p object=%p\n", t, p, q));
		*(tt__ZoomLimits*)p = *(tt__ZoomLimits*)q;
		break;
	case SOAP_TYPE_tt__PTZSpaces:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZSpaces type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZSpaces*)p = *(tt__PTZSpaces*)q;
		break;
	case SOAP_TYPE_tt__PTZSpacesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZSpacesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZSpacesExtension*)p = *(tt__PTZSpacesExtension*)q;
		break;
	case SOAP_TYPE_tt__Space2DDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Space2DDescription type=%d location=%p object=%p\n", t, p, q));
		*(tt__Space2DDescription*)p = *(tt__Space2DDescription*)q;
		break;
	case SOAP_TYPE_tt__Space1DDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Space1DDescription type=%d location=%p object=%p\n", t, p, q));
		*(tt__Space1DDescription*)p = *(tt__Space1DDescription*)q;
		break;
	case SOAP_TYPE_tt__PTZSpeed:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZSpeed type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZSpeed*)p = *(tt__PTZSpeed*)q;
		break;
	case SOAP_TYPE_tt__PTZPreset:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPreset type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPreset*)p = *(tt__PTZPreset*)q;
		break;
	case SOAP_TYPE_tt__PresetTour:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PresetTour type=%d location=%p object=%p\n", t, p, q));
		*(tt__PresetTour*)p = *(tt__PresetTour*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourExtension*)p = *(tt__PTZPresetTourExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourSpot type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourSpot*)p = *(tt__PTZPresetTourSpot*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpotExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourSpotExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourSpotExtension*)p = *(tt__PTZPresetTourSpotExtension*)q;
		break;
	case SOAP_TYPE__tt__union_PTZPresetTourPresetDetail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _tt__union_PTZPresetTourPresetDetail type=%d location=%p object=%p\n", t, p, q));
		*(union _tt__union_PTZPresetTourPresetDetail*)p = *(union _tt__union_PTZPresetTourPresetDetail*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourPresetDetail type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourPresetDetail*)p = *(tt__PTZPresetTourPresetDetail*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourTypeExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourTypeExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourTypeExtension*)p = *(tt__PTZPresetTourTypeExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourStatus type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourStatus*)p = *(tt__PTZPresetTourStatus*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourStatusExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourStatusExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourStatusExtension*)p = *(tt__PTZPresetTourStatusExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingCondition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourStartingCondition type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourStartingCondition*)p = *(tt__PTZPresetTourStartingCondition*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourStartingConditionExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourStartingConditionExtension*)p = *(tt__PTZPresetTourStartingConditionExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourOptions*)p = *(tt__PTZPresetTourOptions*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourSpotOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourSpotOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourSpotOptions*)p = *(tt__PTZPresetTourSpotOptions*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourPresetDetailOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourPresetDetailOptions*)p = *(tt__PTZPresetTourPresetDetailOptions*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourPresetDetailOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourPresetDetailOptionsExtension*)p = *(tt__PTZPresetTourPresetDetailOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourStartingConditionOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourStartingConditionOptions*)p = *(tt__PTZPresetTourStartingConditionOptions*)q;
		break;
	case SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPresetTourStartingConditionOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPresetTourStartingConditionOptionsExtension*)p = *(tt__PTZPresetTourStartingConditionOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__ImagingStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingStatus type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingStatus*)p = *(tt__ImagingStatus*)q;
		break;
	case SOAP_TYPE_tt__FocusStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusStatus type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusStatus*)p = *(tt__FocusStatus*)q;
		break;
	case SOAP_TYPE_tt__FocusConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusConfiguration*)p = *(tt__FocusConfiguration*)q;
		break;
	case SOAP_TYPE_tt__ImagingSettings:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingSettings type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingSettings*)p = *(tt__ImagingSettings*)q;
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingSettingsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingSettingsExtension*)p = *(tt__ImagingSettingsExtension*)q;
		break;
	case SOAP_TYPE_tt__Exposure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Exposure type=%d location=%p object=%p\n", t, p, q));
		*(tt__Exposure*)p = *(tt__Exposure*)q;
		break;
	case SOAP_TYPE_tt__WideDynamicRange:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WideDynamicRange type=%d location=%p object=%p\n", t, p, q));
		*(tt__WideDynamicRange*)p = *(tt__WideDynamicRange*)q;
		break;
	case SOAP_TYPE_tt__BacklightCompensation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__BacklightCompensation type=%d location=%p object=%p\n", t, p, q));
		*(tt__BacklightCompensation*)p = *(tt__BacklightCompensation*)q;
		break;
	case SOAP_TYPE_tt__ImagingOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingOptions*)p = *(tt__ImagingOptions*)q;
		break;
	case SOAP_TYPE_tt__WideDynamicRangeOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WideDynamicRangeOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__WideDynamicRangeOptions*)p = *(tt__WideDynamicRangeOptions*)q;
		break;
	case SOAP_TYPE_tt__BacklightCompensationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__BacklightCompensationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__BacklightCompensationOptions*)p = *(tt__BacklightCompensationOptions*)q;
		break;
	case SOAP_TYPE_tt__FocusOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusOptions*)p = *(tt__FocusOptions*)q;
		break;
	case SOAP_TYPE_tt__ExposureOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ExposureOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__ExposureOptions*)p = *(tt__ExposureOptions*)q;
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WhiteBalanceOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__WhiteBalanceOptions*)p = *(tt__WhiteBalanceOptions*)q;
		break;
	case SOAP_TYPE_tt__FocusMove:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusMove type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusMove*)p = *(tt__FocusMove*)q;
		break;
	case SOAP_TYPE_tt__AbsoluteFocus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AbsoluteFocus type=%d location=%p object=%p\n", t, p, q));
		*(tt__AbsoluteFocus*)p = *(tt__AbsoluteFocus*)q;
		break;
	case SOAP_TYPE_tt__RelativeFocus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelativeFocus type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelativeFocus*)p = *(tt__RelativeFocus*)q;
		break;
	case SOAP_TYPE_tt__ContinuousFocus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ContinuousFocus type=%d location=%p object=%p\n", t, p, q));
		*(tt__ContinuousFocus*)p = *(tt__ContinuousFocus*)q;
		break;
	case SOAP_TYPE_tt__MoveOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MoveOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__MoveOptions*)p = *(tt__MoveOptions*)q;
		break;
	case SOAP_TYPE_tt__AbsoluteFocusOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AbsoluteFocusOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__AbsoluteFocusOptions*)p = *(tt__AbsoluteFocusOptions*)q;
		break;
	case SOAP_TYPE_tt__RelativeFocusOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelativeFocusOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelativeFocusOptions*)p = *(tt__RelativeFocusOptions*)q;
		break;
	case SOAP_TYPE_tt__ContinuousFocusOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ContinuousFocusOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__ContinuousFocusOptions*)p = *(tt__ContinuousFocusOptions*)q;
		break;
	case SOAP_TYPE_tt__WhiteBalance:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WhiteBalance type=%d location=%p object=%p\n", t, p, q));
		*(tt__WhiteBalance*)p = *(tt__WhiteBalance*)q;
		break;
	case SOAP_TYPE_tt__ImagingStatus20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingStatus20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingStatus20*)p = *(tt__ImagingStatus20*)q;
		break;
	case SOAP_TYPE_tt__ImagingStatus20Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingStatus20Extension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingStatus20Extension*)p = *(tt__ImagingStatus20Extension*)q;
		break;
	case SOAP_TYPE_tt__FocusStatus20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusStatus20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusStatus20*)p = *(tt__FocusStatus20*)q;
		break;
	case SOAP_TYPE_tt__FocusStatus20Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusStatus20Extension type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusStatus20Extension*)p = *(tt__FocusStatus20Extension*)q;
		break;
	case SOAP_TYPE_tt__ImagingSettings20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingSettings20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingSettings20*)p = *(tt__ImagingSettings20*)q;
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingSettingsExtension20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingSettingsExtension20*)p = *(tt__ImagingSettingsExtension20*)q;
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension202:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingSettingsExtension202 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingSettingsExtension202*)p = *(tt__ImagingSettingsExtension202*)q;
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension203:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingSettingsExtension203 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingSettingsExtension203*)p = *(tt__ImagingSettingsExtension203*)q;
		break;
	case SOAP_TYPE_tt__ImagingSettingsExtension204:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingSettingsExtension204 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingSettingsExtension204*)p = *(tt__ImagingSettingsExtension204*)q;
		break;
	case SOAP_TYPE_tt__ImageStabilization:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImageStabilization type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImageStabilization*)p = *(tt__ImageStabilization*)q;
		break;
	case SOAP_TYPE_tt__ImageStabilizationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImageStabilizationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImageStabilizationExtension*)p = *(tt__ImageStabilizationExtension*)q;
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustment:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IrCutFilterAutoAdjustment type=%d location=%p object=%p\n", t, p, q));
		*(tt__IrCutFilterAutoAdjustment*)p = *(tt__IrCutFilterAutoAdjustment*)q;
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IrCutFilterAutoAdjustmentExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__IrCutFilterAutoAdjustmentExtension*)p = *(tt__IrCutFilterAutoAdjustmentExtension*)q;
		break;
	case SOAP_TYPE_tt__WideDynamicRange20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WideDynamicRange20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__WideDynamicRange20*)p = *(tt__WideDynamicRange20*)q;
		break;
	case SOAP_TYPE_tt__BacklightCompensation20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__BacklightCompensation20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__BacklightCompensation20*)p = *(tt__BacklightCompensation20*)q;
		break;
	case SOAP_TYPE_tt__Exposure20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Exposure20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__Exposure20*)p = *(tt__Exposure20*)q;
		break;
	case SOAP_TYPE_tt__ToneCompensation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ToneCompensation type=%d location=%p object=%p\n", t, p, q));
		*(tt__ToneCompensation*)p = *(tt__ToneCompensation*)q;
		break;
	case SOAP_TYPE_tt__ToneCompensationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ToneCompensationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ToneCompensationExtension*)p = *(tt__ToneCompensationExtension*)q;
		break;
	case SOAP_TYPE_tt__Defogging:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Defogging type=%d location=%p object=%p\n", t, p, q));
		*(tt__Defogging*)p = *(tt__Defogging*)q;
		break;
	case SOAP_TYPE_tt__DefoggingExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DefoggingExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__DefoggingExtension*)p = *(tt__DefoggingExtension*)q;
		break;
	case SOAP_TYPE_tt__NoiseReduction:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NoiseReduction type=%d location=%p object=%p\n", t, p, q));
		*(tt__NoiseReduction*)p = *(tt__NoiseReduction*)q;
		break;
	case SOAP_TYPE_tt__ImagingOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingOptions20*)p = *(tt__ImagingOptions20*)q;
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingOptions20Extension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingOptions20Extension*)p = *(tt__ImagingOptions20Extension*)q;
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingOptions20Extension2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingOptions20Extension2*)p = *(tt__ImagingOptions20Extension2*)q;
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension3:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingOptions20Extension3 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingOptions20Extension3*)p = *(tt__ImagingOptions20Extension3*)q;
		break;
	case SOAP_TYPE_tt__ImagingOptions20Extension4:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImagingOptions20Extension4 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImagingOptions20Extension4*)p = *(tt__ImagingOptions20Extension4*)q;
		break;
	case SOAP_TYPE_tt__ImageStabilizationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImageStabilizationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImageStabilizationOptions*)p = *(tt__ImageStabilizationOptions*)q;
		break;
	case SOAP_TYPE_tt__ImageStabilizationOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ImageStabilizationOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ImageStabilizationOptionsExtension*)p = *(tt__ImageStabilizationOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IrCutFilterAutoAdjustmentOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__IrCutFilterAutoAdjustmentOptions*)p = *(tt__IrCutFilterAutoAdjustmentOptions*)q;
		break;
	case SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__IrCutFilterAutoAdjustmentOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__IrCutFilterAutoAdjustmentOptionsExtension*)p = *(tt__IrCutFilterAutoAdjustmentOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__WideDynamicRangeOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WideDynamicRangeOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__WideDynamicRangeOptions20*)p = *(tt__WideDynamicRangeOptions20*)q;
		break;
	case SOAP_TYPE_tt__BacklightCompensationOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__BacklightCompensationOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__BacklightCompensationOptions20*)p = *(tt__BacklightCompensationOptions20*)q;
		break;
	case SOAP_TYPE_tt__ExposureOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ExposureOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__ExposureOptions20*)p = *(tt__ExposureOptions20*)q;
		break;
	case SOAP_TYPE_tt__MoveOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MoveOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__MoveOptions20*)p = *(tt__MoveOptions20*)q;
		break;
	case SOAP_TYPE_tt__RelativeFocusOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelativeFocusOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelativeFocusOptions20*)p = *(tt__RelativeFocusOptions20*)q;
		break;
	case SOAP_TYPE_tt__WhiteBalance20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WhiteBalance20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__WhiteBalance20*)p = *(tt__WhiteBalance20*)q;
		break;
	case SOAP_TYPE_tt__WhiteBalance20Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WhiteBalance20Extension type=%d location=%p object=%p\n", t, p, q));
		*(tt__WhiteBalance20Extension*)p = *(tt__WhiteBalance20Extension*)q;
		break;
	case SOAP_TYPE_tt__FocusConfiguration20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusConfiguration20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusConfiguration20*)p = *(tt__FocusConfiguration20*)q;
		break;
	case SOAP_TYPE_tt__FocusConfiguration20Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusConfiguration20Extension type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusConfiguration20Extension*)p = *(tt__FocusConfiguration20Extension*)q;
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WhiteBalanceOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__WhiteBalanceOptions20*)p = *(tt__WhiteBalanceOptions20*)q;
		break;
	case SOAP_TYPE_tt__WhiteBalanceOptions20Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__WhiteBalanceOptions20Extension type=%d location=%p object=%p\n", t, p, q));
		*(tt__WhiteBalanceOptions20Extension*)p = *(tt__WhiteBalanceOptions20Extension*)q;
		break;
	case SOAP_TYPE_tt__FocusOptions20:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusOptions20 type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusOptions20*)p = *(tt__FocusOptions20*)q;
		break;
	case SOAP_TYPE_tt__FocusOptions20Extension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FocusOptions20Extension type=%d location=%p object=%p\n", t, p, q));
		*(tt__FocusOptions20Extension*)p = *(tt__FocusOptions20Extension*)q;
		break;
	case SOAP_TYPE_tt__ToneCompensationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ToneCompensationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__ToneCompensationOptions*)p = *(tt__ToneCompensationOptions*)q;
		break;
	case SOAP_TYPE_tt__DefoggingOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DefoggingOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__DefoggingOptions*)p = *(tt__DefoggingOptions*)q;
		break;
	case SOAP_TYPE_tt__NoiseReductionOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NoiseReductionOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__NoiseReductionOptions*)p = *(tt__NoiseReductionOptions*)q;
		break;
	case SOAP_TYPE_tt__MessageExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MessageExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__MessageExtension*)p = *(tt__MessageExtension*)q;
		break;
	case SOAP_TYPE__tt__ItemList_SimpleItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tt__ItemList_SimpleItem type=%d location=%p object=%p\n", t, p, q));
		*(_tt__ItemList_SimpleItem*)p = *(_tt__ItemList_SimpleItem*)q;
		break;
	case SOAP_TYPE__tt__ItemList_ElementItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tt__ItemList_ElementItem type=%d location=%p object=%p\n", t, p, q));
		*(_tt__ItemList_ElementItem*)p = *(_tt__ItemList_ElementItem*)q;
		break;
	case SOAP_TYPE_tt__ItemList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ItemList type=%d location=%p object=%p\n", t, p, q));
		*(tt__ItemList*)p = *(tt__ItemList*)q;
		break;
	case SOAP_TYPE_tt__ItemListExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ItemListExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ItemListExtension*)p = *(tt__ItemListExtension*)q;
		break;
	case SOAP_TYPE_tt__MessageDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MessageDescription type=%d location=%p object=%p\n", t, p, q));
		*(tt__MessageDescription*)p = *(tt__MessageDescription*)q;
		break;
	case SOAP_TYPE_tt__MessageDescriptionExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MessageDescriptionExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__MessageDescriptionExtension*)p = *(tt__MessageDescriptionExtension*)q;
		break;
	case SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tt__ItemListDescription_SimpleItemDescription type=%d location=%p object=%p\n", t, p, q));
		*(_tt__ItemListDescription_SimpleItemDescription*)p = *(_tt__ItemListDescription_SimpleItemDescription*)q;
		break;
	case SOAP_TYPE__tt__ItemListDescription_ElementItemDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tt__ItemListDescription_ElementItemDescription type=%d location=%p object=%p\n", t, p, q));
		*(_tt__ItemListDescription_ElementItemDescription*)p = *(_tt__ItemListDescription_ElementItemDescription*)q;
		break;
	case SOAP_TYPE_tt__ItemListDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ItemListDescription type=%d location=%p object=%p\n", t, p, q));
		*(tt__ItemListDescription*)p = *(tt__ItemListDescription*)q;
		break;
	case SOAP_TYPE_tt__ItemListDescriptionExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ItemListDescriptionExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ItemListDescriptionExtension*)p = *(tt__ItemListDescriptionExtension*)q;
		break;
	case SOAP_TYPE_tt__Polyline:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Polyline type=%d location=%p object=%p\n", t, p, q));
		*(tt__Polyline*)p = *(tt__Polyline*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsEngineConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsEngineConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsEngineConfiguration*)p = *(tt__AnalyticsEngineConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsEngineConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsEngineConfigurationExtension*)p = *(tt__AnalyticsEngineConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__RuleEngineConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RuleEngineConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__RuleEngineConfiguration*)p = *(tt__RuleEngineConfiguration*)q;
		break;
	case SOAP_TYPE_tt__RuleEngineConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RuleEngineConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__RuleEngineConfigurationExtension*)p = *(tt__RuleEngineConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__Config:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Config type=%d location=%p object=%p\n", t, p, q));
		*(tt__Config*)p = *(tt__Config*)q;
		break;
	case SOAP_TYPE__tt__ConfigDescription_Messages:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tt__ConfigDescription_Messages type=%d location=%p object=%p\n", t, p, q));
		*(_tt__ConfigDescription_Messages*)p = *(_tt__ConfigDescription_Messages*)q;
		break;
	case SOAP_TYPE_tt__ConfigDescription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ConfigDescription type=%d location=%p object=%p\n", t, p, q));
		*(tt__ConfigDescription*)p = *(tt__ConfigDescription*)q;
		break;
	case SOAP_TYPE_tt__ConfigDescriptionExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ConfigDescriptionExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ConfigDescriptionExtension*)p = *(tt__ConfigDescriptionExtension*)q;
		break;
	case SOAP_TYPE_tt__SupportedRules:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SupportedRules type=%d location=%p object=%p\n", t, p, q));
		*(tt__SupportedRules*)p = *(tt__SupportedRules*)q;
		break;
	case SOAP_TYPE_tt__SupportedRulesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SupportedRulesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__SupportedRulesExtension*)p = *(tt__SupportedRulesExtension*)q;
		break;
	case SOAP_TYPE_tt__SupportedAnalyticsModules:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SupportedAnalyticsModules type=%d location=%p object=%p\n", t, p, q));
		*(tt__SupportedAnalyticsModules*)p = *(tt__SupportedAnalyticsModules*)q;
		break;
	case SOAP_TYPE_tt__SupportedAnalyticsModulesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SupportedAnalyticsModulesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__SupportedAnalyticsModulesExtension*)p = *(tt__SupportedAnalyticsModulesExtension*)q;
		break;
	case SOAP_TYPE_tt__PolygonConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PolygonConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__PolygonConfiguration*)p = *(tt__PolygonConfiguration*)q;
		break;
	case SOAP_TYPE_tt__PolylineArray:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PolylineArray type=%d location=%p object=%p\n", t, p, q));
		*(tt__PolylineArray*)p = *(tt__PolylineArray*)q;
		break;
	case SOAP_TYPE_tt__PolylineArrayExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PolylineArrayExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PolylineArrayExtension*)p = *(tt__PolylineArrayExtension*)q;
		break;
	case SOAP_TYPE_tt__PolylineArrayConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PolylineArrayConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__PolylineArrayConfiguration*)p = *(tt__PolylineArrayConfiguration*)q;
		break;
	case SOAP_TYPE_tt__MotionExpression:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MotionExpression type=%d location=%p object=%p\n", t, p, q));
		*(tt__MotionExpression*)p = *(tt__MotionExpression*)q;
		break;
	case SOAP_TYPE_tt__MotionExpressionConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MotionExpressionConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__MotionExpressionConfiguration*)p = *(tt__MotionExpressionConfiguration*)q;
		break;
	case SOAP_TYPE_tt__CellLayout:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CellLayout type=%d location=%p object=%p\n", t, p, q));
		*(tt__CellLayout*)p = *(tt__CellLayout*)q;
		break;
	case SOAP_TYPE_tt__PaneConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PaneConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__PaneConfiguration*)p = *(tt__PaneConfiguration*)q;
		break;
	case SOAP_TYPE_tt__PaneLayout:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PaneLayout type=%d location=%p object=%p\n", t, p, q));
		*(tt__PaneLayout*)p = *(tt__PaneLayout*)q;
		break;
	case SOAP_TYPE_tt__Layout:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Layout type=%d location=%p object=%p\n", t, p, q));
		*(tt__Layout*)p = *(tt__Layout*)q;
		break;
	case SOAP_TYPE_tt__LayoutExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LayoutExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__LayoutExtension*)p = *(tt__LayoutExtension*)q;
		break;
	case SOAP_TYPE_tt__CodingCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CodingCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tt__CodingCapabilities*)p = *(tt__CodingCapabilities*)q;
		break;
	case SOAP_TYPE_tt__LayoutOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LayoutOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__LayoutOptions*)p = *(tt__LayoutOptions*)q;
		break;
	case SOAP_TYPE_tt__LayoutOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LayoutOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__LayoutOptionsExtension*)p = *(tt__LayoutOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__PaneLayoutOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PaneLayoutOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__PaneLayoutOptions*)p = *(tt__PaneLayoutOptions*)q;
		break;
	case SOAP_TYPE_tt__PaneOptionExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PaneOptionExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__PaneOptionExtension*)p = *(tt__PaneOptionExtension*)q;
		break;
	case SOAP_TYPE_tt__Receiver:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Receiver type=%d location=%p object=%p\n", t, p, q));
		*(tt__Receiver*)p = *(tt__Receiver*)q;
		break;
	case SOAP_TYPE_tt__ReceiverConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReceiverConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReceiverConfiguration*)p = *(tt__ReceiverConfiguration*)q;
		break;
	case SOAP_TYPE_tt__ReceiverStateInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReceiverStateInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReceiverStateInformation*)p = *(tt__ReceiverStateInformation*)q;
		break;
	case SOAP_TYPE_tt__SourceReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SourceReference type=%d location=%p object=%p\n", t, p, q));
		*(tt__SourceReference*)p = *(tt__SourceReference*)q;
		break;
	case SOAP_TYPE_tt__DateTimeRange:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DateTimeRange type=%d location=%p object=%p\n", t, p, q));
		*(tt__DateTimeRange*)p = *(tt__DateTimeRange*)q;
		break;
	case SOAP_TYPE_tt__RecordingSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingSummary type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingSummary*)p = *(tt__RecordingSummary*)q;
		break;
	case SOAP_TYPE_tt__SearchScope:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SearchScope type=%d location=%p object=%p\n", t, p, q));
		*(tt__SearchScope*)p = *(tt__SearchScope*)q;
		break;
	case SOAP_TYPE_tt__SearchScopeExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SearchScopeExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__SearchScopeExtension*)p = *(tt__SearchScopeExtension*)q;
		break;
	case SOAP_TYPE_tt__PTZPositionFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZPositionFilter type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZPositionFilter*)p = *(tt__PTZPositionFilter*)q;
		break;
	case SOAP_TYPE_tt__MetadataFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataFilter type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataFilter*)p = *(tt__MetadataFilter*)q;
		break;
	case SOAP_TYPE_tt__FindRecordingResultList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FindRecordingResultList type=%d location=%p object=%p\n", t, p, q));
		*(tt__FindRecordingResultList*)p = *(tt__FindRecordingResultList*)q;
		break;
	case SOAP_TYPE_tt__FindEventResultList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FindEventResultList type=%d location=%p object=%p\n", t, p, q));
		*(tt__FindEventResultList*)p = *(tt__FindEventResultList*)q;
		break;
	case SOAP_TYPE_tt__FindEventResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FindEventResult type=%d location=%p object=%p\n", t, p, q));
		*(tt__FindEventResult*)p = *(tt__FindEventResult*)q;
		break;
	case SOAP_TYPE_tt__FindPTZPositionResultList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FindPTZPositionResultList type=%d location=%p object=%p\n", t, p, q));
		*(tt__FindPTZPositionResultList*)p = *(tt__FindPTZPositionResultList*)q;
		break;
	case SOAP_TYPE_tt__FindPTZPositionResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FindPTZPositionResult type=%d location=%p object=%p\n", t, p, q));
		*(tt__FindPTZPositionResult*)p = *(tt__FindPTZPositionResult*)q;
		break;
	case SOAP_TYPE_tt__FindMetadataResultList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FindMetadataResultList type=%d location=%p object=%p\n", t, p, q));
		*(tt__FindMetadataResultList*)p = *(tt__FindMetadataResultList*)q;
		break;
	case SOAP_TYPE_tt__FindMetadataResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FindMetadataResult type=%d location=%p object=%p\n", t, p, q));
		*(tt__FindMetadataResult*)p = *(tt__FindMetadataResult*)q;
		break;
	case SOAP_TYPE_tt__RecordingInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingInformation*)p = *(tt__RecordingInformation*)q;
		break;
	case SOAP_TYPE_tt__RecordingSourceInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingSourceInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingSourceInformation*)p = *(tt__RecordingSourceInformation*)q;
		break;
	case SOAP_TYPE_tt__TrackInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TrackInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__TrackInformation*)p = *(tt__TrackInformation*)q;
		break;
	case SOAP_TYPE_tt__MediaAttributes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MediaAttributes type=%d location=%p object=%p\n", t, p, q));
		*(tt__MediaAttributes*)p = *(tt__MediaAttributes*)q;
		break;
	case SOAP_TYPE_tt__TrackAttributes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TrackAttributes type=%d location=%p object=%p\n", t, p, q));
		*(tt__TrackAttributes*)p = *(tt__TrackAttributes*)q;
		break;
	case SOAP_TYPE_tt__TrackAttributesExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TrackAttributesExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__TrackAttributesExtension*)p = *(tt__TrackAttributesExtension*)q;
		break;
	case SOAP_TYPE_tt__VideoAttributes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoAttributes type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoAttributes*)p = *(tt__VideoAttributes*)q;
		break;
	case SOAP_TYPE_tt__AudioAttributes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioAttributes type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioAttributes*)p = *(tt__AudioAttributes*)q;
		break;
	case SOAP_TYPE_tt__MetadataAttributes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataAttributes type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataAttributes*)p = *(tt__MetadataAttributes*)q;
		break;
	case SOAP_TYPE_tt__RecordingConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingConfiguration*)p = *(tt__RecordingConfiguration*)q;
		break;
	case SOAP_TYPE_tt__TrackConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TrackConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__TrackConfiguration*)p = *(tt__TrackConfiguration*)q;
		break;
	case SOAP_TYPE_tt__GetRecordingsResponseItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__GetRecordingsResponseItem type=%d location=%p object=%p\n", t, p, q));
		*(tt__GetRecordingsResponseItem*)p = *(tt__GetRecordingsResponseItem*)q;
		break;
	case SOAP_TYPE_tt__GetTracksResponseList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__GetTracksResponseList type=%d location=%p object=%p\n", t, p, q));
		*(tt__GetTracksResponseList*)p = *(tt__GetTracksResponseList*)q;
		break;
	case SOAP_TYPE_tt__GetTracksResponseItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__GetTracksResponseItem type=%d location=%p object=%p\n", t, p, q));
		*(tt__GetTracksResponseItem*)p = *(tt__GetTracksResponseItem*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobConfiguration*)p = *(tt__RecordingJobConfiguration*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobConfigurationExtension*)p = *(tt__RecordingJobConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobSource:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobSource type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobSource*)p = *(tt__RecordingJobSource*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobSourceExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobSourceExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobSourceExtension*)p = *(tt__RecordingJobSourceExtension*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobTrack:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobTrack type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobTrack*)p = *(tt__RecordingJobTrack*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobStateInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobStateInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobStateInformation*)p = *(tt__RecordingJobStateInformation*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobStateInformationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobStateInformationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobStateInformationExtension*)p = *(tt__RecordingJobStateInformationExtension*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobStateSource:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobStateSource type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobStateSource*)p = *(tt__RecordingJobStateSource*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobStateTracks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobStateTracks type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobStateTracks*)p = *(tt__RecordingJobStateTracks*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobStateTrack:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RecordingJobStateTrack type=%d location=%p object=%p\n", t, p, q));
		*(tt__RecordingJobStateTrack*)p = *(tt__RecordingJobStateTrack*)q;
		break;
	case SOAP_TYPE_tt__GetRecordingJobsResponseItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__GetRecordingJobsResponseItem type=%d location=%p object=%p\n", t, p, q));
		*(tt__GetRecordingJobsResponseItem*)p = *(tt__GetRecordingJobsResponseItem*)q;
		break;
	case SOAP_TYPE_tt__ReplayConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ReplayConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__ReplayConfiguration*)p = *(tt__ReplayConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsDeviceEngineConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsDeviceEngineConfiguration*)p = *(tt__AnalyticsDeviceEngineConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsDeviceEngineConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsDeviceEngineConfigurationExtension*)p = *(tt__AnalyticsDeviceEngineConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__EngineConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EngineConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__EngineConfiguration*)p = *(tt__EngineConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInputInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsEngineInputInfo type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsEngineInputInfo*)p = *(tt__AnalyticsEngineInputInfo*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsEngineInputInfoExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsEngineInputInfoExtension*)p = *(tt__AnalyticsEngineInputInfoExtension*)q;
		break;
	case SOAP_TYPE_tt__SourceIdentification:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SourceIdentification type=%d location=%p object=%p\n", t, p, q));
		*(tt__SourceIdentification*)p = *(tt__SourceIdentification*)q;
		break;
	case SOAP_TYPE_tt__SourceIdentificationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__SourceIdentificationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__SourceIdentificationExtension*)p = *(tt__SourceIdentificationExtension*)q;
		break;
	case SOAP_TYPE_tt__MetadataInput:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataInput type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataInput*)p = *(tt__MetadataInput*)q;
		break;
	case SOAP_TYPE_tt__MetadataInputExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataInputExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataInputExtension*)p = *(tt__MetadataInputExtension*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsStateInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsStateInformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsStateInformation*)p = *(tt__AnalyticsStateInformation*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsState:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsState type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsState*)p = *(tt__AnalyticsState*)q;
		break;
	case SOAP_TYPE_tt__ActionEngineEventPayload:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ActionEngineEventPayload type=%d location=%p object=%p\n", t, p, q));
		*(tt__ActionEngineEventPayload*)p = *(tt__ActionEngineEventPayload*)q;
		break;
	case SOAP_TYPE_tt__ActionEngineEventPayloadExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ActionEngineEventPayloadExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ActionEngineEventPayloadExtension*)p = *(tt__ActionEngineEventPayloadExtension*)q;
		break;
	case SOAP_TYPE_tt__AudioClassCandidate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioClassCandidate type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioClassCandidate*)p = *(tt__AudioClassCandidate*)q;
		break;
	case SOAP_TYPE_tt__AudioClassDescriptor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioClassDescriptor type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioClassDescriptor*)p = *(tt__AudioClassDescriptor*)q;
		break;
	case SOAP_TYPE_tt__AudioClassDescriptorExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioClassDescriptorExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioClassDescriptorExtension*)p = *(tt__AudioClassDescriptorExtension*)q;
		break;
	case SOAP_TYPE_tt__ActiveConnection:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ActiveConnection type=%d location=%p object=%p\n", t, p, q));
		*(tt__ActiveConnection*)p = *(tt__ActiveConnection*)q;
		break;
	case SOAP_TYPE_tt__ProfileStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ProfileStatus type=%d location=%p object=%p\n", t, p, q));
		*(tt__ProfileStatus*)p = *(tt__ProfileStatus*)q;
		break;
	case SOAP_TYPE_tt__ProfileStatusExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ProfileStatusExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ProfileStatusExtension*)p = *(tt__ProfileStatusExtension*)q;
		break;
	case SOAP_TYPE_tt__OSDPosConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDPosConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDPosConfiguration*)p = *(tt__OSDPosConfiguration*)q;
		break;
	case SOAP_TYPE_tt__OSDPosConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDPosConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDPosConfigurationExtension*)p = *(tt__OSDPosConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__OSDColor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDColor type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDColor*)p = *(tt__OSDColor*)q;
		break;
	case SOAP_TYPE_tt__OSDTextConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDTextConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDTextConfiguration*)p = *(tt__OSDTextConfiguration*)q;
		break;
	case SOAP_TYPE_tt__OSDTextConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDTextConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDTextConfigurationExtension*)p = *(tt__OSDTextConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__OSDImgConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDImgConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDImgConfiguration*)p = *(tt__OSDImgConfiguration*)q;
		break;
	case SOAP_TYPE_tt__OSDImgConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDImgConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDImgConfigurationExtension*)p = *(tt__OSDImgConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__ColorspaceRange:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ColorspaceRange type=%d location=%p object=%p\n", t, p, q));
		*(tt__ColorspaceRange*)p = *(tt__ColorspaceRange*)q;
		break;
	case SOAP_TYPE__tt__union_ColorOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _tt__union_ColorOptions type=%d location=%p object=%p\n", t, p, q));
		*(union _tt__union_ColorOptions*)p = *(union _tt__union_ColorOptions*)q;
		break;
	case SOAP_TYPE_tt__ColorOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ColorOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__ColorOptions*)p = *(tt__ColorOptions*)q;
		break;
	case SOAP_TYPE_tt__OSDColorOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDColorOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDColorOptions*)p = *(tt__OSDColorOptions*)q;
		break;
	case SOAP_TYPE_tt__OSDColorOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDColorOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDColorOptionsExtension*)p = *(tt__OSDColorOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__OSDTextOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDTextOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDTextOptions*)p = *(tt__OSDTextOptions*)q;
		break;
	case SOAP_TYPE_tt__OSDTextOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDTextOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDTextOptionsExtension*)p = *(tt__OSDTextOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__OSDImgOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDImgOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDImgOptions*)p = *(tt__OSDImgOptions*)q;
		break;
	case SOAP_TYPE_tt__OSDImgOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDImgOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDImgOptionsExtension*)p = *(tt__OSDImgOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__OSDConfigurationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDConfigurationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDConfigurationExtension*)p = *(tt__OSDConfigurationExtension*)q;
		break;
	case SOAP_TYPE_tt__MaximumNumberOfOSDs:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MaximumNumberOfOSDs type=%d location=%p object=%p\n", t, p, q));
		*(tt__MaximumNumberOfOSDs*)p = *(tt__MaximumNumberOfOSDs*)q;
		break;
	case SOAP_TYPE_tt__OSDConfigurationOptions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDConfigurationOptions type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDConfigurationOptions*)p = *(tt__OSDConfigurationOptions*)q;
		break;
	case SOAP_TYPE_tt__OSDConfigurationOptionsExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDConfigurationOptionsExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDConfigurationOptionsExtension*)p = *(tt__OSDConfigurationOptionsExtension*)q;
		break;
	case SOAP_TYPE_tt__FileProgress:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__FileProgress type=%d location=%p object=%p\n", t, p, q));
		*(tt__FileProgress*)p = *(tt__FileProgress*)q;
		break;
	case SOAP_TYPE_tt__ArrayOfFileProgress:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ArrayOfFileProgress type=%d location=%p object=%p\n", t, p, q));
		*(tt__ArrayOfFileProgress*)p = *(tt__ArrayOfFileProgress*)q;
		break;
	case SOAP_TYPE_tt__ArrayOfFileProgressExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ArrayOfFileProgressExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__ArrayOfFileProgressExtension*)p = *(tt__ArrayOfFileProgressExtension*)q;
		break;
	case SOAP_TYPE_tt__StorageReferencePath:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__StorageReferencePath type=%d location=%p object=%p\n", t, p, q));
		*(tt__StorageReferencePath*)p = *(tt__StorageReferencePath*)q;
		break;
	case SOAP_TYPE_tt__StorageReferencePathExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__StorageReferencePathExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__StorageReferencePathExtension*)p = *(tt__StorageReferencePathExtension*)q;
		break;
	case SOAP_TYPE_tt__Vector2D:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Vector2D type=%d location=%p object=%p\n", t, p, q));
		*(tt__Vector2D*)p = *(tt__Vector2D*)q;
		break;
	case SOAP_TYPE_tt__Vector1D:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Vector1D type=%d location=%p object=%p\n", t, p, q));
		*(tt__Vector1D*)p = *(tt__Vector1D*)q;
		break;
	case SOAP_TYPE_tt__PTZVector:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZVector type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZVector*)p = *(tt__PTZVector*)q;
		break;
	case SOAP_TYPE_tt__PTZStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZStatus type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZStatus*)p = *(tt__PTZStatus*)q;
		break;
	case SOAP_TYPE_tt__PTZMoveStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZMoveStatus type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZMoveStatus*)p = *(tt__PTZMoveStatus*)q;
		break;
	case SOAP_TYPE_tt__Vector:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Vector type=%d location=%p object=%p\n", t, p, q));
		*(tt__Vector*)p = *(tt__Vector*)q;
		break;
	case SOAP_TYPE_tt__Rectangle:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Rectangle type=%d location=%p object=%p\n", t, p, q));
		*(tt__Rectangle*)p = *(tt__Rectangle*)q;
		break;
	case SOAP_TYPE_tt__Polygon:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Polygon type=%d location=%p object=%p\n", t, p, q));
		*(tt__Polygon*)p = *(tt__Polygon*)q;
		break;
	case SOAP_TYPE_tt__Color:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Color type=%d location=%p object=%p\n", t, p, q));
		*(tt__Color*)p = *(tt__Color*)q;
		break;
	case SOAP_TYPE_tt__ColorCovariance:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__ColorCovariance type=%d location=%p object=%p\n", t, p, q));
		*(tt__ColorCovariance*)p = *(tt__ColorCovariance*)q;
		break;
	case SOAP_TYPE_tt__Transformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Transformation type=%d location=%p object=%p\n", t, p, q));
		*(tt__Transformation*)p = *(tt__Transformation*)q;
		break;
	case SOAP_TYPE_tt__TransformationExtension:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__TransformationExtension type=%d location=%p object=%p\n", t, p, q));
		*(tt__TransformationExtension*)p = *(tt__TransformationExtension*)q;
		break;
	case SOAP_TYPE_tt__GeoLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__GeoLocation type=%d location=%p object=%p\n", t, p, q));
		*(tt__GeoLocation*)p = *(tt__GeoLocation*)q;
		break;
	case SOAP_TYPE_tt__GeoOrientation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__GeoOrientation type=%d location=%p object=%p\n", t, p, q));
		*(tt__GeoOrientation*)p = *(tt__GeoOrientation*)q;
		break;
	case SOAP_TYPE_tt__LocalLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LocalLocation type=%d location=%p object=%p\n", t, p, q));
		*(tt__LocalLocation*)p = *(tt__LocalLocation*)q;
		break;
	case SOAP_TYPE_tt__LocalOrientation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LocalOrientation type=%d location=%p object=%p\n", t, p, q));
		*(tt__LocalOrientation*)p = *(tt__LocalOrientation*)q;
		break;
	case SOAP_TYPE_tt__LocationEntity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__LocationEntity type=%d location=%p object=%p\n", t, p, q));
		*(tt__LocationEntity*)p = *(tt__LocationEntity*)q;
		break;
	case SOAP_TYPE__tt__Message:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tt__Message type=%d location=%p object=%p\n", t, p, q));
		*(_tt__Message*)p = *(_tt__Message*)q;
		break;
	case SOAP_TYPE_wsnt__QueryExpressionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__QueryExpressionType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__QueryExpressionType*)p = *(wsnt__QueryExpressionType*)q;
		break;
	case SOAP_TYPE_wsnt__FilterType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__FilterType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__FilterType*)p = *(wsnt__FilterType*)q;
		break;
	case SOAP_TYPE_wsnt__SubscriptionPolicyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__SubscriptionPolicyType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__SubscriptionPolicyType*)p = *(wsnt__SubscriptionPolicyType*)q;
		break;
	case SOAP_TYPE__wsnt__NotificationMessageHolderType_Message:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__NotificationMessageHolderType_Message type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__NotificationMessageHolderType_Message*)p = *(_wsnt__NotificationMessageHolderType_Message*)q;
		break;
	case SOAP_TYPE_wsnt__NotificationMessageHolderType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__NotificationMessageHolderType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__NotificationMessageHolderType*)p = *(wsnt__NotificationMessageHolderType*)q;
		break;
	case SOAP_TYPE__wsnt__NotificationProducerRP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__NotificationProducerRP type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__NotificationProducerRP*)p = *(_wsnt__NotificationProducerRP*)q;
		break;
	case SOAP_TYPE__wsnt__SubscriptionManagerRP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__SubscriptionManagerRP type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__SubscriptionManagerRP*)p = *(_wsnt__SubscriptionManagerRP*)q;
		break;
	case SOAP_TYPE__wsnt__Notify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__Notify type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__Notify*)p = *(_wsnt__Notify*)q;
		break;
	case SOAP_TYPE__wsnt__UseRaw:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__UseRaw type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__UseRaw*)p = *(_wsnt__UseRaw*)q;
		break;
	case SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__Subscribe_SubscriptionPolicy type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__Subscribe_SubscriptionPolicy*)p = *(_wsnt__Subscribe_SubscriptionPolicy*)q;
		break;
	case SOAP_TYPE__wsnt__Subscribe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__Subscribe type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__Subscribe*)p = *(_wsnt__Subscribe*)q;
		break;
	case SOAP_TYPE__wsnt__SubscribeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__SubscribeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__SubscribeResponse*)p = *(_wsnt__SubscribeResponse*)q;
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__GetCurrentMessage type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__GetCurrentMessage*)p = *(_wsnt__GetCurrentMessage*)q;
		break;
	case SOAP_TYPE__wsnt__GetCurrentMessageResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__GetCurrentMessageResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__GetCurrentMessageResponse*)p = *(_wsnt__GetCurrentMessageResponse*)q;
		break;
	case SOAP_TYPE__wsnt__GetMessages:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__GetMessages type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__GetMessages*)p = *(_wsnt__GetMessages*)q;
		break;
	case SOAP_TYPE__wsnt__GetMessagesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__GetMessagesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__GetMessagesResponse*)p = *(_wsnt__GetMessagesResponse*)q;
		break;
	case SOAP_TYPE__wsnt__DestroyPullPoint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__DestroyPullPoint type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__DestroyPullPoint*)p = *(_wsnt__DestroyPullPoint*)q;
		break;
	case SOAP_TYPE__wsnt__DestroyPullPointResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__DestroyPullPointResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__DestroyPullPointResponse*)p = *(_wsnt__DestroyPullPointResponse*)q;
		break;
	case SOAP_TYPE__wsnt__CreatePullPoint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__CreatePullPoint type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__CreatePullPoint*)p = *(_wsnt__CreatePullPoint*)q;
		break;
	case SOAP_TYPE__wsnt__CreatePullPointResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__CreatePullPointResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__CreatePullPointResponse*)p = *(_wsnt__CreatePullPointResponse*)q;
		break;
	case SOAP_TYPE__wsnt__Renew:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__Renew type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__Renew*)p = *(_wsnt__Renew*)q;
		break;
	case SOAP_TYPE__wsnt__RenewResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__RenewResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__RenewResponse*)p = *(_wsnt__RenewResponse*)q;
		break;
	case SOAP_TYPE__wsnt__Unsubscribe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__Unsubscribe type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__Unsubscribe*)p = *(_wsnt__Unsubscribe*)q;
		break;
	case SOAP_TYPE__wsnt__UnsubscribeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__UnsubscribeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__UnsubscribeResponse*)p = *(_wsnt__UnsubscribeResponse*)q;
		break;
	case SOAP_TYPE__wsnt__PauseSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__PauseSubscription type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__PauseSubscription*)p = *(_wsnt__PauseSubscription*)q;
		break;
	case SOAP_TYPE__wsnt__PauseSubscriptionResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__PauseSubscriptionResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__PauseSubscriptionResponse*)p = *(_wsnt__PauseSubscriptionResponse*)q;
		break;
	case SOAP_TYPE__wsnt__ResumeSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__ResumeSubscription type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__ResumeSubscription*)p = *(_wsnt__ResumeSubscription*)q;
		break;
	case SOAP_TYPE__wsnt__ResumeSubscriptionResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsnt__ResumeSubscriptionResponse type=%d location=%p object=%p\n", t, p, q));
		*(_wsnt__ResumeSubscriptionResponse*)p = *(_wsnt__ResumeSubscriptionResponse*)q;
		break;
	case SOAP_TYPE_xop__Include:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xop__Include type=%d location=%p object=%p\n", t, p, q));
		*(xop__Include*)p = *(xop__Include*)q;
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsrfbf__BaseFaultType_ErrorCode type=%d location=%p object=%p\n", t, p, q));
		*(_wsrfbf__BaseFaultType_ErrorCode*)p = *(_wsrfbf__BaseFaultType_ErrorCode*)q;
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_Description:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsrfbf__BaseFaultType_Description type=%d location=%p object=%p\n", t, p, q));
		*(_wsrfbf__BaseFaultType_Description*)p = *(_wsrfbf__BaseFaultType_Description*)q;
		break;
	case SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wsrfbf__BaseFaultType_FaultCause type=%d location=%p object=%p\n", t, p, q));
		*(_wsrfbf__BaseFaultType_FaultCause*)p = *(_wsrfbf__BaseFaultType_FaultCause*)q;
		break;
	case SOAP_TYPE_wsrfbf__BaseFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsrfbf__BaseFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsrfbf__BaseFaultType*)p = *(wsrfbf__BaseFaultType*)q;
		break;
	case SOAP_TYPE_wstop__Documentation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__Documentation type=%d location=%p object=%p\n", t, p, q));
		*(wstop__Documentation*)p = *(wstop__Documentation*)q;
		break;
	case SOAP_TYPE_wstop__ExtensibleDocumented:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__ExtensibleDocumented type=%d location=%p object=%p\n", t, p, q));
		*(wstop__ExtensibleDocumented*)p = *(wstop__ExtensibleDocumented*)q;
		break;
	case SOAP_TYPE_wstop__QueryExpressionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__QueryExpressionType type=%d location=%p object=%p\n", t, p, q));
		*(wstop__QueryExpressionType*)p = *(wstop__QueryExpressionType*)q;
		break;
	case SOAP_TYPE_tev__Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tev__Capabilities type=%d location=%p object=%p\n", t, p, q));
		*(tev__Capabilities*)p = *(tev__Capabilities*)q;
		break;
	case SOAP_TYPE_tev__SubscriptionPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tev__SubscriptionPolicy type=%d location=%p object=%p\n", t, p, q));
		*(tev__SubscriptionPolicy*)p = *(tev__SubscriptionPolicy*)q;
		break;
	case SOAP_TYPE__tev__GetServiceCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__GetServiceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(_tev__GetServiceCapabilities*)p = *(_tev__GetServiceCapabilities*)q;
		break;
	case SOAP_TYPE__tev__GetServiceCapabilitiesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__GetServiceCapabilitiesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tev__GetServiceCapabilitiesResponse*)p = *(_tev__GetServiceCapabilitiesResponse*)q;
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__CreatePullPointSubscription_SubscriptionPolicy type=%d location=%p object=%p\n", t, p, q));
		*(_tev__CreatePullPointSubscription_SubscriptionPolicy*)p = *(_tev__CreatePullPointSubscription_SubscriptionPolicy*)q;
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__CreatePullPointSubscription type=%d location=%p object=%p\n", t, p, q));
		*(_tev__CreatePullPointSubscription*)p = *(_tev__CreatePullPointSubscription*)q;
		break;
	case SOAP_TYPE__tev__CreatePullPointSubscriptionResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__CreatePullPointSubscriptionResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tev__CreatePullPointSubscriptionResponse*)p = *(_tev__CreatePullPointSubscriptionResponse*)q;
		break;
	case SOAP_TYPE__tev__PullMessages:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__PullMessages type=%d location=%p object=%p\n", t, p, q));
		*(_tev__PullMessages*)p = *(_tev__PullMessages*)q;
		break;
	case SOAP_TYPE__tev__PullMessagesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__PullMessagesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tev__PullMessagesResponse*)p = *(_tev__PullMessagesResponse*)q;
		break;
	case SOAP_TYPE__tev__PullMessagesFaultResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__PullMessagesFaultResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tev__PullMessagesFaultResponse*)p = *(_tev__PullMessagesFaultResponse*)q;
		break;
	case SOAP_TYPE__tev__Seek:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__Seek type=%d location=%p object=%p\n", t, p, q));
		*(_tev__Seek*)p = *(_tev__Seek*)q;
		break;
	case SOAP_TYPE__tev__SeekResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__SeekResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tev__SeekResponse*)p = *(_tev__SeekResponse*)q;
		break;
	case SOAP_TYPE__tev__SetSynchronizationPoint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__SetSynchronizationPoint type=%d location=%p object=%p\n", t, p, q));
		*(_tev__SetSynchronizationPoint*)p = *(_tev__SetSynchronizationPoint*)q;
		break;
	case SOAP_TYPE__tev__SetSynchronizationPointResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__SetSynchronizationPointResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tev__SetSynchronizationPointResponse*)p = *(_tev__SetSynchronizationPointResponse*)q;
		break;
	case SOAP_TYPE__tev__GetEventProperties:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__GetEventProperties type=%d location=%p object=%p\n", t, p, q));
		*(_tev__GetEventProperties*)p = *(_tev__GetEventProperties*)q;
		break;
	case SOAP_TYPE__tev__GetEventPropertiesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _tev__GetEventPropertiesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_tev__GetEventPropertiesResponse*)p = *(_tev__GetEventPropertiesResponse*)q;
		break;
	case SOAP_TYPE_wsd__HelloType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__HelloType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__HelloType*)p = *(wsd__HelloType*)q;
		break;
	case SOAP_TYPE_wsd__ByeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ByeType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ByeType*)p = *(wsd__ByeType*)q;
		break;
	case SOAP_TYPE_wsd__ProbeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsd__ProbeType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsd__ProbeType*)p = *(struct wsd__ProbeType*)q;
		break;
	case SOAP_TYPE_wsd__ProbeMatchesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsd__ProbeMatchesType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsd__ProbeMatchesType*)p = *(struct wsd__ProbeMatchesType*)q;
		break;
	case SOAP_TYPE_wsd__ProbeMatchType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ProbeMatchType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ProbeMatchType*)p = *(wsd__ProbeMatchType*)q;
		break;
	case SOAP_TYPE_wsd__ResolveType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ResolveType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ResolveType*)p = *(wsd__ResolveType*)q;
		break;
	case SOAP_TYPE_wsd__ResolveMatchesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ResolveMatchesType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ResolveMatchesType*)p = *(wsd__ResolveMatchesType*)q;
		break;
	case SOAP_TYPE_wsd__ResolveMatchType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ResolveMatchType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ResolveMatchType*)p = *(wsd__ResolveMatchType*)q;
		break;
	case SOAP_TYPE_wsd__SecurityType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__SecurityType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__SecurityType*)p = *(wsd__SecurityType*)q;
		break;
	case SOAP_TYPE_wsd__SigType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__SigType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__SigType*)p = *(wsd__SigType*)q;
		break;
	case SOAP_TYPE_wsa__EndpointReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__EndpointReferenceType*)p = *(wsa__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE_wsa__ReferencePropertiesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__ReferencePropertiesType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__ReferencePropertiesType*)p = *(wsa__ReferencePropertiesType*)q;
		break;
	case SOAP_TYPE_wsa__ReferenceParametersType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__ReferenceParametersType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__ReferenceParametersType*)p = *(wsa__ReferenceParametersType*)q;
		break;
	case SOAP_TYPE_tmk__AccessControl:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__AccessControl type=%d location=%p object=%p\n", t, p, q));
		*(tmk__AccessControl*)p = *(tmk__AccessControl*)q;
		break;
	case SOAP_TYPE_tmk__FireAlarm:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__FireAlarm type=%d location=%p object=%p\n", t, p, q));
		*(tmk__FireAlarm*)p = *(tmk__FireAlarm*)q;
		break;
	case SOAP_TYPE_tmk__GasAnalysis:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__GasAnalysis type=%d location=%p object=%p\n", t, p, q));
		*(tmk__GasAnalysis*)p = *(tmk__GasAnalysis*)q;
		break;
	case SOAP_TYPE_tmk__Introscopy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__Introscopy type=%d location=%p object=%p\n", t, p, q));
		*(tmk__Introscopy*)p = *(tmk__Introscopy*)q;
		break;
	case SOAP_TYPE_tmk__NeutronProbing:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__NeutronProbing type=%d location=%p object=%p\n", t, p, q));
		*(tmk__NeutronProbing*)p = *(tmk__NeutronProbing*)q;
		break;
	case SOAP_TYPE_tmk__RadiationMonitoring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__RadiationMonitoring type=%d location=%p object=%p\n", t, p, q));
		*(tmk__RadiationMonitoring*)p = *(tmk__RadiationMonitoring*)q;
		break;
	case SOAP_TYPE_tmk__SteamDetector:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__SteamDetector type=%d location=%p object=%p\n", t, p, q));
		*(tmk__SteamDetector*)p = *(tmk__SteamDetector*)q;
		break;
	case SOAP_TYPE_tmk__MetalDetector:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__MetalDetector type=%d location=%p object=%p\n", t, p, q));
		*(tmk__MetalDetector*)p = *(tmk__MetalDetector*)q;
		break;
	case SOAP_TYPE_tmk__VideoSurveillanceSystem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tmk__VideoSurveillanceSystem type=%d location=%p object=%p\n", t, p, q));
		*(tmk__VideoSurveillanceSystem*)p = *(tmk__VideoSurveillanceSystem*)q;
		break;
	case SOAP_TYPE_tds__StorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__StorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tds__StorageConfiguration*)p = *(tds__StorageConfiguration*)q;
		break;
	case SOAP_TYPE_tt__VideoSource:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSource type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSource*)p = *(tt__VideoSource*)q;
		break;
	case SOAP_TYPE_tt__AudioSource:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioSource type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioSource*)p = *(tt__AudioSource*)q;
		break;
	case SOAP_TYPE_tt__VideoSourceConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceConfiguration*)p = *(tt__VideoSourceConfiguration*)q;
		break;
	case SOAP_TYPE_tt__VideoEncoderConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoderConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoderConfiguration*)p = *(tt__VideoEncoderConfiguration*)q;
		break;
	case SOAP_TYPE_tt__JpegOptions2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__JpegOptions2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__JpegOptions2*)p = *(tt__JpegOptions2*)q;
		break;
	case SOAP_TYPE_tt__Mpeg4Options2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Mpeg4Options2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__Mpeg4Options2*)p = *(tt__Mpeg4Options2*)q;
		break;
	case SOAP_TYPE_tt__H264Options2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__H264Options2 type=%d location=%p object=%p\n", t, p, q));
		*(tt__H264Options2*)p = *(tt__H264Options2*)q;
		break;
	case SOAP_TYPE_tt__VideoEncoder2Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoder2Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoder2Configuration*)p = *(tt__VideoEncoder2Configuration*)q;
		break;
	case SOAP_TYPE_tt__AudioSourceConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioSourceConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioSourceConfiguration*)p = *(tt__AudioSourceConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AudioEncoderConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncoderConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncoderConfiguration*)p = *(tt__AudioEncoderConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AudioEncoder2Configuration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncoder2Configuration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncoder2Configuration*)p = *(tt__AudioEncoder2Configuration*)q;
		break;
	case SOAP_TYPE_tt__VideoAnalyticsConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoAnalyticsConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoAnalyticsConfiguration*)p = *(tt__VideoAnalyticsConfiguration*)q;
		break;
	case SOAP_TYPE_tt__MetadataConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataConfiguration*)p = *(tt__MetadataConfiguration*)q;
		break;
	case SOAP_TYPE_tt__VideoOutput:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoOutput type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoOutput*)p = *(tt__VideoOutput*)q;
		break;
	case SOAP_TYPE_tt__VideoOutputConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoOutputConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoOutputConfiguration*)p = *(tt__VideoOutputConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AudioOutput:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioOutput type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioOutput*)p = *(tt__AudioOutput*)q;
		break;
	case SOAP_TYPE_tt__AudioOutputConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioOutputConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioOutputConfiguration*)p = *(tt__AudioOutputConfiguration*)q;
		break;
	case SOAP_TYPE_tt__AudioDecoderConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioDecoderConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioDecoderConfiguration*)p = *(tt__AudioDecoderConfiguration*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterface:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__NetworkInterface type=%d location=%p object=%p\n", t, p, q));
		*(tt__NetworkInterface*)p = *(tt__NetworkInterface*)q;
		break;
	case SOAP_TYPE_tt__CertificateUsage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__CertificateUsage type=%d location=%p object=%p\n", t, p, q));
		*(tt__CertificateUsage*)p = *(tt__CertificateUsage*)q;
		break;
	case SOAP_TYPE_tt__RelayOutput:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__RelayOutput type=%d location=%p object=%p\n", t, p, q));
		*(tt__RelayOutput*)p = *(tt__RelayOutput*)q;
		break;
	case SOAP_TYPE_tt__DigitalInput:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__DigitalInput type=%d location=%p object=%p\n", t, p, q));
		*(tt__DigitalInput*)p = *(tt__DigitalInput*)q;
		break;
	case SOAP_TYPE_tt__PTZNode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZNode type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZNode*)p = *(tt__PTZNode*)q;
		break;
	case SOAP_TYPE_tt__PTZConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZConfiguration*)p = *(tt__PTZConfiguration*)q;
		break;
	case SOAP_TYPE_tt__EventFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__EventFilter type=%d location=%p object=%p\n", t, p, q));
		*(tt__EventFilter*)p = *(tt__EventFilter*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsEngine:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsEngine type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsEngine*)p = *(tt__AnalyticsEngine*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsEngineInput:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsEngineInput type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsEngineInput*)p = *(tt__AnalyticsEngineInput*)q;
		break;
	case SOAP_TYPE_tt__AnalyticsEngineControl:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AnalyticsEngineControl type=%d location=%p object=%p\n", t, p, q));
		*(tt__AnalyticsEngineControl*)p = *(tt__AnalyticsEngineControl*)q;
		break;
	case SOAP_TYPE_tt__OSDConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDConfiguration*)p = *(tt__OSDConfiguration*)q;
		break;
	case SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__SubscribeCreationFailedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__SubscribeCreationFailedFaultType*)p = *(wsnt__SubscribeCreationFailedFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__InvalidFilterFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidFilterFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidFilterFaultType*)p = *(wsnt__InvalidFilterFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__TopicExpressionDialectUnknownFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__TopicExpressionDialectUnknownFaultType*)p = *(wsnt__TopicExpressionDialectUnknownFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidTopicExpressionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidTopicExpressionFaultType*)p = *(wsnt__InvalidTopicExpressionFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__TopicNotSupportedFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__TopicNotSupportedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__TopicNotSupportedFaultType*)p = *(wsnt__TopicNotSupportedFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__MultipleTopicsSpecifiedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__MultipleTopicsSpecifiedFaultType*)p = *(wsnt__MultipleTopicsSpecifiedFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidProducerPropertiesExpressionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidProducerPropertiesExpressionFaultType*)p = *(wsnt__InvalidProducerPropertiesExpressionFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidMessageContentExpressionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidMessageContentExpressionFaultType*)p = *(wsnt__InvalidMessageContentExpressionFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnrecognizedPolicyRequestFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnrecognizedPolicyRequestFaultType*)p = *(wsnt__UnrecognizedPolicyRequestFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnsupportedPolicyRequestFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnsupportedPolicyRequestFaultType*)p = *(wsnt__UnsupportedPolicyRequestFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__NotifyMessageNotSupportedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__NotifyMessageNotSupportedFaultType*)p = *(wsnt__NotifyMessageNotSupportedFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnacceptableInitialTerminationTimeFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnacceptableInitialTerminationTimeFaultType*)p = *(wsnt__UnacceptableInitialTerminationTimeFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__NoCurrentMessageOnTopicFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__NoCurrentMessageOnTopicFaultType*)p = *(wsnt__NoCurrentMessageOnTopicFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnableToGetMessagesFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToGetMessagesFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToGetMessagesFaultType*)p = *(wsnt__UnableToGetMessagesFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToDestroyPullPointFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToDestroyPullPointFaultType*)p = *(wsnt__UnableToDestroyPullPointFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToCreatePullPointFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToCreatePullPointFaultType*)p = *(wsnt__UnableToCreatePullPointFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnacceptableTerminationTimeFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnacceptableTerminationTimeFaultType*)p = *(wsnt__UnacceptableTerminationTimeFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToDestroySubscriptionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToDestroySubscriptionFaultType*)p = *(wsnt__UnableToDestroySubscriptionFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__PauseFailedFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__PauseFailedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__PauseFailedFaultType*)p = *(wsnt__PauseFailedFaultType*)q;
		break;
	case SOAP_TYPE_wsnt__ResumeFailedFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__ResumeFailedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__ResumeFailedFaultType*)p = *(wsnt__ResumeFailedFaultType*)q;
		break;
	case SOAP_TYPE__wstop__TopicNamespaceType_Topic:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _wstop__TopicNamespaceType_Topic type=%d location=%p object=%p\n", t, p, q));
		*(_wstop__TopicNamespaceType_Topic*)p = *(_wstop__TopicNamespaceType_Topic*)q;
		break;
	case SOAP_TYPE_wstop__TopicNamespaceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__TopicNamespaceType type=%d location=%p object=%p\n", t, p, q));
		*(wstop__TopicNamespaceType*)p = *(wstop__TopicNamespaceType*)q;
		break;
	case SOAP_TYPE_wstop__TopicType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__TopicType type=%d location=%p object=%p\n", t, p, q));
		*(wstop__TopicType*)p = *(wstop__TopicType*)q;
		break;
	case SOAP_TYPE_wstop__TopicSetType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__TopicSetType type=%d location=%p object=%p\n", t, p, q));
		*(wstop__TopicSetType*)p = *(wstop__TopicSetType*)q;
		break;
	case SOAP_TYPE_wsrf__ResourceUnknownFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsrf__ResourceUnknownFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsrf__ResourceUnknownFaultType*)p = *(wsrf__ResourceUnknownFaultType*)q;
		break;
	case SOAP_TYPE_wsrf__ResourceUnavailableFaultType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsrf__ResourceUnavailableFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsrf__ResourceUnavailableFaultType*)p = *(wsrf__ResourceUnavailableFaultType*)q;
		break;
	case SOAP_TYPE_wsd__ScopesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ScopesType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ScopesType*)p = *(wsd__ScopesType*)q;
		break;
	case SOAP_TYPE_wsd__AppSequenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__AppSequenceType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__AppSequenceType*)p = *(wsd__AppSequenceType*)q;
		break;
	case SOAP_TYPE_wsa__ServiceNameType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__ServiceNameType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__ServiceNameType*)p = *(wsa__ServiceNameType*)q;
		break;
	case SOAP_TYPE_wsa__Relationship:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__Relationship type=%d location=%p object=%p\n", t, p, q));
		*(wsa__Relationship*)p = *(wsa__Relationship*)q;
		break;
	case SOAP_TYPE_wsa__ReplyAfterType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__ReplyAfterType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__ReplyAfterType*)p = *(wsa__ReplyAfterType*)q;
		break;
	case SOAP_TYPE_wsa__RetryAfterType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__RetryAfterType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__RetryAfterType*)p = *(wsa__RetryAfterType*)q;
		break;
	case SOAP_TYPE_wsa__AttributedQName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__AttributedQName type=%d location=%p object=%p\n", t, p, q));
		*(wsa__AttributedQName*)p = *(wsa__AttributedQName*)q;
		break;
	case SOAP_TYPE_wsa__AttributedURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__AttributedURI type=%d location=%p object=%p\n", t, p, q));
		*(wsa__AttributedURI*)p = *(wsa__AttributedURI*)q;
		break;
	case SOAP_TYPE_tt__OSDReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__OSDReference type=%d location=%p object=%p\n", t, p, q));
		*(tt__OSDReference*)p = *(tt__OSDReference*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
	case SOAP_TYPE___tds__GetServices:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetServices type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetServices*)p = *(struct __tds__GetServices*)q;
		break;
	case SOAP_TYPE___tds__GetServiceCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetServiceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetServiceCapabilities*)p = *(struct __tds__GetServiceCapabilities*)q;
		break;
	case SOAP_TYPE___tds__GetDeviceInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDeviceInformation type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDeviceInformation*)p = *(struct __tds__GetDeviceInformation*)q;
		break;
	case SOAP_TYPE___tds__SetSystemDateAndTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetSystemDateAndTime type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetSystemDateAndTime*)p = *(struct __tds__SetSystemDateAndTime*)q;
		break;
	case SOAP_TYPE___tds__GetSystemDateAndTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetSystemDateAndTime type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetSystemDateAndTime*)p = *(struct __tds__GetSystemDateAndTime*)q;
		break;
	case SOAP_TYPE___tds__SetSystemFactoryDefault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetSystemFactoryDefault type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetSystemFactoryDefault*)p = *(struct __tds__SetSystemFactoryDefault*)q;
		break;
	case SOAP_TYPE___tds__UpgradeSystemFirmware:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__UpgradeSystemFirmware type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__UpgradeSystemFirmware*)p = *(struct __tds__UpgradeSystemFirmware*)q;
		break;
	case SOAP_TYPE___tds__SystemReboot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SystemReboot type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SystemReboot*)p = *(struct __tds__SystemReboot*)q;
		break;
	case SOAP_TYPE___tds__RestoreSystem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__RestoreSystem type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__RestoreSystem*)p = *(struct __tds__RestoreSystem*)q;
		break;
	case SOAP_TYPE___tds__GetSystemBackup:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetSystemBackup type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetSystemBackup*)p = *(struct __tds__GetSystemBackup*)q;
		break;
	case SOAP_TYPE___tds__GetSystemLog:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetSystemLog type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetSystemLog*)p = *(struct __tds__GetSystemLog*)q;
		break;
	case SOAP_TYPE___tds__GetSystemSupportInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetSystemSupportInformation type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetSystemSupportInformation*)p = *(struct __tds__GetSystemSupportInformation*)q;
		break;
	case SOAP_TYPE___tds__GetScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetScopes type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetScopes*)p = *(struct __tds__GetScopes*)q;
		break;
	case SOAP_TYPE___tds__SetScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetScopes type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetScopes*)p = *(struct __tds__SetScopes*)q;
		break;
	case SOAP_TYPE___tds__AddScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__AddScopes type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__AddScopes*)p = *(struct __tds__AddScopes*)q;
		break;
	case SOAP_TYPE___tds__RemoveScopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__RemoveScopes type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__RemoveScopes*)p = *(struct __tds__RemoveScopes*)q;
		break;
	case SOAP_TYPE___tds__GetDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDiscoveryMode*)p = *(struct __tds__GetDiscoveryMode*)q;
		break;
	case SOAP_TYPE___tds__SetDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetDiscoveryMode*)p = *(struct __tds__SetDiscoveryMode*)q;
		break;
	case SOAP_TYPE___tds__GetRemoteDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetRemoteDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetRemoteDiscoveryMode*)p = *(struct __tds__GetRemoteDiscoveryMode*)q;
		break;
	case SOAP_TYPE___tds__SetRemoteDiscoveryMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetRemoteDiscoveryMode type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetRemoteDiscoveryMode*)p = *(struct __tds__SetRemoteDiscoveryMode*)q;
		break;
	case SOAP_TYPE___tds__GetDPAddresses:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDPAddresses type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDPAddresses*)p = *(struct __tds__GetDPAddresses*)q;
		break;
	case SOAP_TYPE___tds__GetEndpointReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetEndpointReference type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetEndpointReference*)p = *(struct __tds__GetEndpointReference*)q;
		break;
	case SOAP_TYPE___tds__GetRemoteUser:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetRemoteUser type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetRemoteUser*)p = *(struct __tds__GetRemoteUser*)q;
		break;
	case SOAP_TYPE___tds__SetRemoteUser:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetRemoteUser type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetRemoteUser*)p = *(struct __tds__SetRemoteUser*)q;
		break;
	case SOAP_TYPE___tds__GetUsers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetUsers type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetUsers*)p = *(struct __tds__GetUsers*)q;
		break;
	case SOAP_TYPE___tds__CreateUsers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__CreateUsers type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__CreateUsers*)p = *(struct __tds__CreateUsers*)q;
		break;
	case SOAP_TYPE___tds__DeleteUsers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__DeleteUsers type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__DeleteUsers*)p = *(struct __tds__DeleteUsers*)q;
		break;
	case SOAP_TYPE___tds__SetUser:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetUser type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetUser*)p = *(struct __tds__SetUser*)q;
		break;
	case SOAP_TYPE___tds__GetWsdlUrl:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetWsdlUrl type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetWsdlUrl*)p = *(struct __tds__GetWsdlUrl*)q;
		break;
	case SOAP_TYPE___tds__GetCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetCapabilities*)p = *(struct __tds__GetCapabilities*)q;
		break;
	case SOAP_TYPE___tds__SetDPAddresses:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetDPAddresses type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetDPAddresses*)p = *(struct __tds__SetDPAddresses*)q;
		break;
	case SOAP_TYPE___tds__GetHostname:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetHostname type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetHostname*)p = *(struct __tds__GetHostname*)q;
		break;
	case SOAP_TYPE___tds__SetHostname:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetHostname type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetHostname*)p = *(struct __tds__SetHostname*)q;
		break;
	case SOAP_TYPE___tds__SetHostnameFromDHCP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetHostnameFromDHCP type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetHostnameFromDHCP*)p = *(struct __tds__SetHostnameFromDHCP*)q;
		break;
	case SOAP_TYPE___tds__GetDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDNS type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDNS*)p = *(struct __tds__GetDNS*)q;
		break;
	case SOAP_TYPE___tds__SetDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetDNS type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetDNS*)p = *(struct __tds__SetDNS*)q;
		break;
	case SOAP_TYPE___tds__GetNTP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetNTP type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetNTP*)p = *(struct __tds__GetNTP*)q;
		break;
	case SOAP_TYPE___tds__SetNTP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetNTP type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetNTP*)p = *(struct __tds__SetNTP*)q;
		break;
	case SOAP_TYPE___tds__GetDynamicDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDynamicDNS type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDynamicDNS*)p = *(struct __tds__GetDynamicDNS*)q;
		break;
	case SOAP_TYPE___tds__SetDynamicDNS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetDynamicDNS type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetDynamicDNS*)p = *(struct __tds__SetDynamicDNS*)q;
		break;
	case SOAP_TYPE___tds__GetNetworkInterfaces:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetNetworkInterfaces type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetNetworkInterfaces*)p = *(struct __tds__GetNetworkInterfaces*)q;
		break;
	case SOAP_TYPE___tds__SetNetworkInterfaces:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetNetworkInterfaces type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetNetworkInterfaces*)p = *(struct __tds__SetNetworkInterfaces*)q;
		break;
	case SOAP_TYPE___tds__GetNetworkProtocols:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetNetworkProtocols type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetNetworkProtocols*)p = *(struct __tds__GetNetworkProtocols*)q;
		break;
	case SOAP_TYPE___tds__SetNetworkProtocols:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetNetworkProtocols type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetNetworkProtocols*)p = *(struct __tds__SetNetworkProtocols*)q;
		break;
	case SOAP_TYPE___tds__GetNetworkDefaultGateway:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetNetworkDefaultGateway type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetNetworkDefaultGateway*)p = *(struct __tds__GetNetworkDefaultGateway*)q;
		break;
	case SOAP_TYPE___tds__SetNetworkDefaultGateway:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetNetworkDefaultGateway type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetNetworkDefaultGateway*)p = *(struct __tds__SetNetworkDefaultGateway*)q;
		break;
	case SOAP_TYPE___tds__GetZeroConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetZeroConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetZeroConfiguration*)p = *(struct __tds__GetZeroConfiguration*)q;
		break;
	case SOAP_TYPE___tds__SetZeroConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetZeroConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetZeroConfiguration*)p = *(struct __tds__SetZeroConfiguration*)q;
		break;
	case SOAP_TYPE___tds__GetIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetIPAddressFilter*)p = *(struct __tds__GetIPAddressFilter*)q;
		break;
	case SOAP_TYPE___tds__SetIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetIPAddressFilter*)p = *(struct __tds__SetIPAddressFilter*)q;
		break;
	case SOAP_TYPE___tds__AddIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__AddIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__AddIPAddressFilter*)p = *(struct __tds__AddIPAddressFilter*)q;
		break;
	case SOAP_TYPE___tds__RemoveIPAddressFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__RemoveIPAddressFilter type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__RemoveIPAddressFilter*)p = *(struct __tds__RemoveIPAddressFilter*)q;
		break;
	case SOAP_TYPE___tds__GetAccessPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetAccessPolicy type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetAccessPolicy*)p = *(struct __tds__GetAccessPolicy*)q;
		break;
	case SOAP_TYPE___tds__SetAccessPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetAccessPolicy type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetAccessPolicy*)p = *(struct __tds__SetAccessPolicy*)q;
		break;
	case SOAP_TYPE___tds__CreateCertificate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__CreateCertificate type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__CreateCertificate*)p = *(struct __tds__CreateCertificate*)q;
		break;
	case SOAP_TYPE___tds__GetCertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetCertificates type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetCertificates*)p = *(struct __tds__GetCertificates*)q;
		break;
	case SOAP_TYPE___tds__GetCertificatesStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetCertificatesStatus type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetCertificatesStatus*)p = *(struct __tds__GetCertificatesStatus*)q;
		break;
	case SOAP_TYPE___tds__SetCertificatesStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetCertificatesStatus type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetCertificatesStatus*)p = *(struct __tds__SetCertificatesStatus*)q;
		break;
	case SOAP_TYPE___tds__DeleteCertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__DeleteCertificates type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__DeleteCertificates*)p = *(struct __tds__DeleteCertificates*)q;
		break;
	case SOAP_TYPE___tds__GetPkcs10Request:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetPkcs10Request type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetPkcs10Request*)p = *(struct __tds__GetPkcs10Request*)q;
		break;
	case SOAP_TYPE___tds__LoadCertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__LoadCertificates type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__LoadCertificates*)p = *(struct __tds__LoadCertificates*)q;
		break;
	case SOAP_TYPE___tds__GetClientCertificateMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetClientCertificateMode type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetClientCertificateMode*)p = *(struct __tds__GetClientCertificateMode*)q;
		break;
	case SOAP_TYPE___tds__SetClientCertificateMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetClientCertificateMode type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetClientCertificateMode*)p = *(struct __tds__SetClientCertificateMode*)q;
		break;
	case SOAP_TYPE___tds__GetRelayOutputs:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetRelayOutputs type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetRelayOutputs*)p = *(struct __tds__GetRelayOutputs*)q;
		break;
	case SOAP_TYPE___tds__SetRelayOutputSettings:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetRelayOutputSettings type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetRelayOutputSettings*)p = *(struct __tds__SetRelayOutputSettings*)q;
		break;
	case SOAP_TYPE___tds__SetRelayOutputState:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetRelayOutputState type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetRelayOutputState*)p = *(struct __tds__SetRelayOutputState*)q;
		break;
	case SOAP_TYPE___tds__SendAuxiliaryCommand:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SendAuxiliaryCommand type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SendAuxiliaryCommand*)p = *(struct __tds__SendAuxiliaryCommand*)q;
		break;
	case SOAP_TYPE___tds__GetCACertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetCACertificates type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetCACertificates*)p = *(struct __tds__GetCACertificates*)q;
		break;
	case SOAP_TYPE___tds__LoadCertificateWithPrivateKey:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__LoadCertificateWithPrivateKey type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__LoadCertificateWithPrivateKey*)p = *(struct __tds__LoadCertificateWithPrivateKey*)q;
		break;
	case SOAP_TYPE___tds__GetCertificateInformation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetCertificateInformation type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetCertificateInformation*)p = *(struct __tds__GetCertificateInformation*)q;
		break;
	case SOAP_TYPE___tds__LoadCACertificates:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__LoadCACertificates type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__LoadCACertificates*)p = *(struct __tds__LoadCACertificates*)q;
		break;
	case SOAP_TYPE___tds__CreateDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__CreateDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__CreateDot1XConfiguration*)p = *(struct __tds__CreateDot1XConfiguration*)q;
		break;
	case SOAP_TYPE___tds__SetDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetDot1XConfiguration*)p = *(struct __tds__SetDot1XConfiguration*)q;
		break;
	case SOAP_TYPE___tds__GetDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDot1XConfiguration*)p = *(struct __tds__GetDot1XConfiguration*)q;
		break;
	case SOAP_TYPE___tds__GetDot1XConfigurations:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDot1XConfigurations type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDot1XConfigurations*)p = *(struct __tds__GetDot1XConfigurations*)q;
		break;
	case SOAP_TYPE___tds__DeleteDot1XConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__DeleteDot1XConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__DeleteDot1XConfiguration*)p = *(struct __tds__DeleteDot1XConfiguration*)q;
		break;
	case SOAP_TYPE___tds__GetDot11Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDot11Capabilities type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDot11Capabilities*)p = *(struct __tds__GetDot11Capabilities*)q;
		break;
	case SOAP_TYPE___tds__GetDot11Status:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetDot11Status type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetDot11Status*)p = *(struct __tds__GetDot11Status*)q;
		break;
	case SOAP_TYPE___tds__ScanAvailableDot11Networks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__ScanAvailableDot11Networks type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__ScanAvailableDot11Networks*)p = *(struct __tds__ScanAvailableDot11Networks*)q;
		break;
	case SOAP_TYPE___tds__GetSystemUris:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetSystemUris type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetSystemUris*)p = *(struct __tds__GetSystemUris*)q;
		break;
	case SOAP_TYPE___tds__StartFirmwareUpgrade:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__StartFirmwareUpgrade type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__StartFirmwareUpgrade*)p = *(struct __tds__StartFirmwareUpgrade*)q;
		break;
	case SOAP_TYPE___tds__StartSystemRestore:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__StartSystemRestore type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__StartSystemRestore*)p = *(struct __tds__StartSystemRestore*)q;
		break;
	case SOAP_TYPE___tds__GetStorageConfigurations:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetStorageConfigurations type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetStorageConfigurations*)p = *(struct __tds__GetStorageConfigurations*)q;
		break;
	case SOAP_TYPE___tds__CreateStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__CreateStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__CreateStorageConfiguration*)p = *(struct __tds__CreateStorageConfiguration*)q;
		break;
	case SOAP_TYPE___tds__GetStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetStorageConfiguration*)p = *(struct __tds__GetStorageConfiguration*)q;
		break;
	case SOAP_TYPE___tds__SetStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetStorageConfiguration*)p = *(struct __tds__SetStorageConfiguration*)q;
		break;
	case SOAP_TYPE___tds__DeleteStorageConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__DeleteStorageConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__DeleteStorageConfiguration*)p = *(struct __tds__DeleteStorageConfiguration*)q;
		break;
	case SOAP_TYPE___tds__GetGeoLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__GetGeoLocation type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__GetGeoLocation*)p = *(struct __tds__GetGeoLocation*)q;
		break;
	case SOAP_TYPE___tds__SetGeoLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__SetGeoLocation type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__SetGeoLocation*)p = *(struct __tds__SetGeoLocation*)q;
		break;
	case SOAP_TYPE___tds__DeleteGeoLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tds__DeleteGeoLocation type=%d location=%p object=%p\n", t, p, q));
		*(struct __tds__DeleteGeoLocation*)p = *(struct __tds__DeleteGeoLocation*)q;
		break;
	case SOAP_TYPE___tevcppb__CreatePullPoint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevcppb__CreatePullPoint type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevcppb__CreatePullPoint*)p = *(struct __tevcppb__CreatePullPoint*)q;
		break;
	case SOAP_TYPE___teveb__GetServiceCapabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __teveb__GetServiceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(struct __teveb__GetServiceCapabilities*)p = *(struct __teveb__GetServiceCapabilities*)q;
		break;
	case SOAP_TYPE___teveb__CreatePullPointSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __teveb__CreatePullPointSubscription type=%d location=%p object=%p\n", t, p, q));
		*(struct __teveb__CreatePullPointSubscription*)p = *(struct __teveb__CreatePullPointSubscription*)q;
		break;
	case SOAP_TYPE___teveb__GetEventProperties:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __teveb__GetEventProperties type=%d location=%p object=%p\n", t, p, q));
		*(struct __teveb__GetEventProperties*)p = *(struct __teveb__GetEventProperties*)q;
		break;
	case SOAP_TYPE___tevncb__Notify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevncb__Notify type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevncb__Notify*)p = *(struct __tevncb__Notify*)q;
		break;
	case SOAP_TYPE___tevnpb__Subscribe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevnpb__Subscribe type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevnpb__Subscribe*)p = *(struct __tevnpb__Subscribe*)q;
		break;
	case SOAP_TYPE___tevnpb__GetCurrentMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevnpb__GetCurrentMessage type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevnpb__GetCurrentMessage*)p = *(struct __tevnpb__GetCurrentMessage*)q;
		break;
	case SOAP_TYPE___tevppb__GetMessages:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevppb__GetMessages type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevppb__GetMessages*)p = *(struct __tevppb__GetMessages*)q;
		break;
	case SOAP_TYPE___tevppb__DestroyPullPoint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevppb__DestroyPullPoint type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevppb__DestroyPullPoint*)p = *(struct __tevppb__DestroyPullPoint*)q;
		break;
	case SOAP_TYPE___tevppb__Notify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevppb__Notify type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevppb__Notify*)p = *(struct __tevppb__Notify*)q;
		break;
	case SOAP_TYPE___tevpps__PullMessages:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpps__PullMessages type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpps__PullMessages*)p = *(struct __tevpps__PullMessages*)q;
		break;
	case SOAP_TYPE___tevpps__Seek:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpps__Seek type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpps__Seek*)p = *(struct __tevpps__Seek*)q;
		break;
	case SOAP_TYPE___tevpps__SetSynchronizationPoint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpps__SetSynchronizationPoint type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpps__SetSynchronizationPoint*)p = *(struct __tevpps__SetSynchronizationPoint*)q;
		break;
	case SOAP_TYPE___tevpps__Unsubscribe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpps__Unsubscribe type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpps__Unsubscribe*)p = *(struct __tevpps__Unsubscribe*)q;
		break;
	case SOAP_TYPE___tevpsmb__Renew:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpsmb__Renew type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpsmb__Renew*)p = *(struct __tevpsmb__Renew*)q;
		break;
	case SOAP_TYPE___tevpsmb__Unsubscribe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpsmb__Unsubscribe type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpsmb__Unsubscribe*)p = *(struct __tevpsmb__Unsubscribe*)q;
		break;
	case SOAP_TYPE___tevpsmb__PauseSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpsmb__PauseSubscription type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpsmb__PauseSubscription*)p = *(struct __tevpsmb__PauseSubscription*)q;
		break;
	case SOAP_TYPE___tevpsmb__ResumeSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevpsmb__ResumeSubscription type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevpsmb__ResumeSubscription*)p = *(struct __tevpsmb__ResumeSubscription*)q;
		break;
	case SOAP_TYPE___tevsmb__Renew:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevsmb__Renew type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevsmb__Renew*)p = *(struct __tevsmb__Renew*)q;
		break;
	case SOAP_TYPE___tevsmb__Unsubscribe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __tevsmb__Unsubscribe type=%d location=%p object=%p\n", t, p, q));
		*(struct __tevsmb__Unsubscribe*)p = *(struct __tevsmb__Unsubscribe*)q;
		break;
	case SOAP_TYPE__wsu__Timestamp:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsu__Timestamp type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsu__Timestamp*)p = *(struct _wsu__Timestamp*)q;
		break;
	case SOAP_TYPE_wsse__EncodedString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsse__EncodedString type=%d location=%p object=%p\n", t, p, q));
		*(struct wsse__EncodedString*)p = *(struct wsse__EncodedString*)q;
		break;
	case SOAP_TYPE__wsse__UsernameToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__UsernameToken type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__UsernameToken*)p = *(struct _wsse__UsernameToken*)q;
		break;
	case SOAP_TYPE__wsse__BinarySecurityToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__BinarySecurityToken type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__BinarySecurityToken*)p = *(struct _wsse__BinarySecurityToken*)q;
		break;
	case SOAP_TYPE__wsse__Reference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Reference type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Reference*)p = *(struct _wsse__Reference*)q;
		break;
	case SOAP_TYPE__wsse__Embedded:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Embedded type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Embedded*)p = *(struct _wsse__Embedded*)q;
		break;
	case SOAP_TYPE__wsse__KeyIdentifier:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__KeyIdentifier type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__KeyIdentifier*)p = *(struct _wsse__KeyIdentifier*)q;
		break;
	case SOAP_TYPE__wsse__SecurityTokenReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__SecurityTokenReference type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__SecurityTokenReference*)p = *(struct _wsse__SecurityTokenReference*)q;
		break;
	case SOAP_TYPE_ds__SignatureType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignatureType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignatureType*)p = *(struct ds__SignatureType*)q;
		break;
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _c14n__InclusiveNamespaces type=%d location=%p object=%p\n", t, p, q));
		*(struct _c14n__InclusiveNamespaces*)p = *(struct _c14n__InclusiveNamespaces*)q;
		break;
	case SOAP_TYPE_ds__TransformType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__TransformType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__TransformType*)p = *(struct ds__TransformType*)q;
		break;
	case SOAP_TYPE_ds__KeyInfoType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__KeyInfoType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__KeyInfoType*)p = *(struct ds__KeyInfoType*)q;
		break;
	case SOAP_TYPE_ds__SignedInfoType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignedInfoType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignedInfoType*)p = *(struct ds__SignedInfoType*)q;
		break;
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__CanonicalizationMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__CanonicalizationMethodType*)p = *(struct ds__CanonicalizationMethodType*)q;
		break;
	case SOAP_TYPE_ds__SignatureMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignatureMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignatureMethodType*)p = *(struct ds__SignatureMethodType*)q;
		break;
	case SOAP_TYPE_ds__ReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__ReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__ReferenceType*)p = *(struct ds__ReferenceType*)q;
		break;
	case SOAP_TYPE_ds__TransformsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__TransformsType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__TransformsType*)p = *(struct ds__TransformsType*)q;
		break;
	case SOAP_TYPE_ds__DigestMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__DigestMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__DigestMethodType*)p = *(struct ds__DigestMethodType*)q;
		break;
	case SOAP_TYPE_ds__KeyValueType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__KeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__KeyValueType*)p = *(struct ds__KeyValueType*)q;
		break;
	case SOAP_TYPE_ds__RetrievalMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__RetrievalMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__RetrievalMethodType*)p = *(struct ds__RetrievalMethodType*)q;
		break;
	case SOAP_TYPE_ds__X509DataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__X509DataType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__X509DataType*)p = *(struct ds__X509DataType*)q;
		break;
	case SOAP_TYPE_ds__X509IssuerSerialType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__X509IssuerSerialType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__X509IssuerSerialType*)p = *(struct ds__X509IssuerSerialType*)q;
		break;
	case SOAP_TYPE_ds__DSAKeyValueType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__DSAKeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__DSAKeyValueType*)p = *(struct ds__DSAKeyValueType*)q;
		break;
	case SOAP_TYPE_ds__RSAKeyValueType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__RSAKeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__RSAKeyValueType*)p = *(struct ds__RSAKeyValueType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionPropertyType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionPropertyType*)p = *(struct xenc__EncryptionPropertyType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptedType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptedType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptedType*)p = *(struct xenc__EncryptedType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptionMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionMethodType*)p = *(struct xenc__EncryptionMethodType*)q;
		break;
	case SOAP_TYPE_xenc__CipherDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__CipherDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__CipherDataType*)p = *(struct xenc__CipherDataType*)q;
		break;
	case SOAP_TYPE_xenc__CipherReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__CipherReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__CipherReferenceType*)p = *(struct xenc__CipherReferenceType*)q;
		break;
	case SOAP_TYPE_xenc__TransformsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__TransformsType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__TransformsType*)p = *(struct xenc__TransformsType*)q;
		break;
	case SOAP_TYPE_xenc__AgreementMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__AgreementMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__AgreementMethodType*)p = *(struct xenc__AgreementMethodType*)q;
		break;
	case SOAP_TYPE_xenc__ReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__ReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__ReferenceType*)p = *(struct xenc__ReferenceType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionPropertiesType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionPropertiesType*)p = *(struct xenc__EncryptionPropertiesType*)q;
		break;
	case SOAP_TYPE___xenc__union_ReferenceList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __xenc__union_ReferenceList type=%d location=%p object=%p\n", t, p, q));
		*(struct __xenc__union_ReferenceList*)p = *(struct __xenc__union_ReferenceList*)q;
		break;
	case SOAP_TYPE__xenc__ReferenceList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _xenc__ReferenceList type=%d location=%p object=%p\n", t, p, q));
		*(struct _xenc__ReferenceList*)p = *(struct _xenc__ReferenceList*)q;
		break;
	case SOAP_TYPE_xenc__EncryptedDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptedDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptedDataType*)p = *(struct xenc__EncryptedDataType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptedKeyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptedKeyType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptedKeyType*)p = *(struct xenc__EncryptedKeyType*)q;
		break;
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsc__SecurityContextTokenType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsc__SecurityContextTokenType*)p = *(struct wsc__SecurityContextTokenType*)q;
		break;
	case SOAP_TYPE__wsc__union_DerivedKeyTokenType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _wsc__union_DerivedKeyTokenType type=%d location=%p object=%p\n", t, p, q));
		*(union _wsc__union_DerivedKeyTokenType*)p = *(union _wsc__union_DerivedKeyTokenType*)q;
		break;
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __wsc__DerivedKeyTokenType_sequence type=%d location=%p object=%p\n", t, p, q));
		*(struct __wsc__DerivedKeyTokenType_sequence*)p = *(struct __wsc__DerivedKeyTokenType_sequence*)q;
		break;
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsc__DerivedKeyTokenType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsc__DerivedKeyTokenType*)p = *(struct wsc__DerivedKeyTokenType*)q;
		break;
	case SOAP_TYPE_wsc__PropertiesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsc__PropertiesType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsc__PropertiesType*)p = *(struct wsc__PropertiesType*)q;
		break;
	case SOAP_TYPE___saml1__union_AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_AssertionType*)p = *(struct __saml1__union_AssertionType*)q;
		break;
	case SOAP_TYPE_saml1__AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AssertionType*)p = *(struct saml1__AssertionType*)q;
		break;
	case SOAP_TYPE___saml1__union_ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_ConditionsType*)p = *(struct __saml1__union_ConditionsType*)q;
		break;
	case SOAP_TYPE_saml1__ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionsType*)p = *(struct saml1__ConditionsType*)q;
		break;
	case SOAP_TYPE_saml1__ConditionAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionAbstractType*)p = *(struct saml1__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE___saml1__union_AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_AdviceType*)p = *(struct __saml1__union_AdviceType*)q;
		break;
	case SOAP_TYPE_saml1__AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AdviceType*)p = *(struct saml1__AdviceType*)q;
		break;
	case SOAP_TYPE_saml1__StatementAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__StatementAbstractType*)p = *(struct saml1__StatementAbstractType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectType*)p = *(struct saml1__SubjectType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectConfirmationType*)p = *(struct saml1__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectLocalityType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectLocalityType*)p = *(struct saml1__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE_saml1__AuthorityBindingType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorityBindingType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorityBindingType*)p = *(struct saml1__AuthorityBindingType*)q;
		break;
	case SOAP_TYPE___saml1__union_EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_EvidenceType*)p = *(struct __saml1__union_EvidenceType*)q;
		break;
	case SOAP_TYPE_saml1__EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__EvidenceType*)p = *(struct saml1__EvidenceType*)q;
		break;
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeDesignatorType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeDesignatorType*)p = *(struct saml1__AttributeDesignatorType*)q;
		break;
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AudienceRestrictionConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AudienceRestrictionConditionType*)p = *(struct saml1__AudienceRestrictionConditionType*)q;
		break;
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__DoNotCacheConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__DoNotCacheConditionType*)p = *(struct saml1__DoNotCacheConditionType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectStatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectStatementAbstractType*)p = *(struct saml1__SubjectStatementAbstractType*)q;
		break;
	case SOAP_TYPE_saml1__NameIdentifierType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__NameIdentifierType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__NameIdentifierType*)p = *(struct saml1__NameIdentifierType*)q;
		break;
	case SOAP_TYPE_saml1__ActionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ActionType*)p = *(struct saml1__ActionType*)q;
		break;
	case SOAP_TYPE_saml1__AttributeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeType*)p = *(struct saml1__AttributeType*)q;
		break;
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthenticationStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthenticationStatementType*)p = *(struct saml1__AuthenticationStatementType*)q;
		break;
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorizationDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorizationDecisionStatementType*)p = *(struct saml1__AuthorizationDecisionStatementType*)q;
		break;
	case SOAP_TYPE_saml1__AttributeStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeStatementType*)p = *(struct saml1__AttributeStatementType*)q;
		break;
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__BaseIDAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__BaseIDAbstractType*)p = *(struct saml2__BaseIDAbstractType*)q;
		break;
	case SOAP_TYPE_saml2__EncryptedElementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	case SOAP_TYPE___saml2__union_AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_AssertionType*)p = *(struct __saml2__union_AssertionType*)q;
		break;
	case SOAP_TYPE_saml2__AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AssertionType*)p = *(struct saml2__AssertionType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectType*)p = *(struct saml2__SubjectType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationType*)p = *(struct saml2__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE___saml2__union_ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_ConditionsType*)p = *(struct __saml2__union_ConditionsType*)q;
		break;
	case SOAP_TYPE_saml2__ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionsType*)p = *(struct saml2__ConditionsType*)q;
		break;
	case SOAP_TYPE_saml2__ConditionAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionAbstractType*)p = *(struct saml2__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE___saml2__union_AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_AdviceType*)p = *(struct __saml2__union_AdviceType*)q;
		break;
	case SOAP_TYPE_saml2__AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AdviceType*)p = *(struct saml2__AdviceType*)q;
		break;
	case SOAP_TYPE_saml2__StatementAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__StatementAbstractType*)p = *(struct saml2__StatementAbstractType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectLocalityType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectLocalityType*)p = *(struct saml2__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE_saml2__AuthnContextType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnContextType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnContextType*)p = *(struct saml2__AuthnContextType*)q;
		break;
	case SOAP_TYPE___saml2__union_EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_EvidenceType*)p = *(struct __saml2__union_EvidenceType*)q;
		break;
	case SOAP_TYPE_saml2__EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EvidenceType*)p = *(struct saml2__EvidenceType*)q;
		break;
	case SOAP_TYPE_saml2__AttributeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeType*)p = *(struct saml2__AttributeType*)q;
		break;
	case SOAP_TYPE_saml2__NameIDType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__NameIDType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__NameIDType*)p = *(struct saml2__NameIDType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationDataType*)p = *(struct saml2__SubjectConfirmationDataType*)q;
		break;
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AudienceRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AudienceRestrictionType*)p = *(struct saml2__AudienceRestrictionType*)q;
		break;
	case SOAP_TYPE_saml2__OneTimeUseType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__OneTimeUseType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__OneTimeUseType*)p = *(struct saml2__OneTimeUseType*)q;
		break;
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ProxyRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ProxyRestrictionType*)p = *(struct saml2__ProxyRestrictionType*)q;
		break;
	case SOAP_TYPE_saml2__AuthnStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnStatementType*)p = *(struct saml2__AuthnStatementType*)q;
		break;
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthzDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthzDecisionStatementType*)p = *(struct saml2__AuthzDecisionStatementType*)q;
		break;
	case SOAP_TYPE_saml2__ActionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ActionType*)p = *(struct saml2__ActionType*)q;
		break;
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_AttributeStatementType*)p = *(struct __saml2__union_AttributeStatementType*)q;
		break;
	case SOAP_TYPE_saml2__AttributeStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeStatementType*)p = *(struct saml2__AttributeStatementType*)q;
		break;
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__KeyInfoConfirmationDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__KeyInfoConfirmationDataType*)p = *(struct saml2__KeyInfoConfirmationDataType*)q;
		break;
	case SOAP_TYPE__wsse__Security:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Security type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Security*)p = *(struct _wsse__Security*)q;
		break;
	case SOAP_TYPE__wsse__Password:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Password type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Password*)p = *(struct _wsse__Password*)q;
		break;
	case SOAP_TYPE_xsd__anyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct soap_dom_element type=%d location=%p object=%p\n", t, p, q));
		*(struct soap_dom_element*)p = *(struct soap_dom_element*)q;
		break;
	case SOAP_TYPE_xsd__anyAttribute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct soap_dom_attribute type=%d location=%p object=%p\n", t, p, q));
		*(struct soap_dom_attribute*)p = *(struct soap_dom_attribute*)q;
		break;
	case SOAP_TYPE__wsa5__EndpointReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa5__ReferenceParameters:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__ReferenceParametersType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__ReferenceParametersType*)p = *(struct wsa5__ReferenceParametersType*)q;
		break;
	case SOAP_TYPE__wsa5__Metadata:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__MetadataType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__MetadataType*)p = *(struct wsa5__MetadataType*)q;
		break;
	case SOAP_TYPE__wsa5__RelatesTo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__RelatesToType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__RelatesToType*)p = *(struct wsa5__RelatesToType*)q;
		break;
	case SOAP_TYPE__wsa5__ReplyTo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa5__From:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa5__FaultTo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa5__ProblemAction:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__ProblemActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__ProblemActionType*)p = *(struct wsa5__ProblemActionType*)q;
		break;
	case SOAP_TYPE_xsd__QName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__dateTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct timeval type=%d location=%p object=%p\n", t, p, q));
		*(struct timeval*)p = *(struct timeval*)q;
		break;
	case SOAP_TYPE_xsd__duration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::chrono::nanoseconds type=%d location=%p object=%p\n", t, p, q));
		*(std::chrono::nanoseconds*)p = *(std::chrono::nanoseconds*)q;
		break;
	case SOAP_TYPE_SOAP_ENV__Envelope:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__ID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__IDREFS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__NCName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__integer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__token:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__xmime__contentType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__xml__lang:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tds__EAPMethodTypes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__IntAttrList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__FloatAttrList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__StringAttrList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__ReferenceTokenList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wsd__OpenRelationshipType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wsd__QNameListType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wsd__UriListType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wsd__FaultCodeOpenType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__Name:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__NetworkInterfaceConfigPriority:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__IPv4Address:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__IPv6Address:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__HwAddress:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__DNSName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__Domain:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__Dot11SSIDType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__hexBinary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__hexBinary*)p = *(xsd__hexBinary*)q;
		break;
	case SOAP_TYPE_tt__Dot11PSK:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__hexBinary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__hexBinary*)p = *(xsd__hexBinary*)q;
		break;
	case SOAP_TYPE_tt__Dot11PSKPassphrase:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__AuxiliaryData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__TopicNamespaceLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__Description:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__XPathExpression:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobState:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__AudioClassType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__ReferenceToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wstop__FullTopicExpression:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wstop__ConcreteTopicExpression:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_wstop__SimpleTopicExpression:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__ReceiverReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__RecordingReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__TrackReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__JobToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tt__RecordingJobReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__tds__Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tds__DeviceServiceCapabilities type=%d location=%p object=%p\n", t, p, q));
		*(tds__DeviceServiceCapabilities*)p = *(tds__DeviceServiceCapabilities*)q;
		break;
	case SOAP_TYPE__tt__VideoSourceConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoSourceConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoSourceConfiguration*)p = *(tt__VideoSourceConfiguration*)q;
		break;
	case SOAP_TYPE__tt__AudioSourceConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioSourceConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioSourceConfiguration*)p = *(tt__AudioSourceConfiguration*)q;
		break;
	case SOAP_TYPE__tt__VideoEncoderConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoEncoderConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoEncoderConfiguration*)p = *(tt__VideoEncoderConfiguration*)q;
		break;
	case SOAP_TYPE__tt__AudioEncoderConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioEncoderConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioEncoderConfiguration*)p = *(tt__AudioEncoderConfiguration*)q;
		break;
	case SOAP_TYPE__tt__VideoAnalyticsConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__VideoAnalyticsConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__VideoAnalyticsConfiguration*)p = *(tt__VideoAnalyticsConfiguration*)q;
		break;
	case SOAP_TYPE__tt__PTZConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__PTZConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__PTZConfiguration*)p = *(tt__PTZConfiguration*)q;
		break;
	case SOAP_TYPE__tt__MetadataConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__MetadataConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__MetadataConfiguration*)p = *(tt__MetadataConfiguration*)q;
		break;
	case SOAP_TYPE__tt__AudioOutputConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioOutputConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioOutputConfiguration*)p = *(tt__AudioOutputConfiguration*)q;
		break;
	case SOAP_TYPE__tt__AudioDecoderConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__AudioDecoderConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(tt__AudioDecoderConfiguration*)p = *(tt__AudioDecoderConfiguration*)q;
		break;
	case SOAP_TYPE__tt__Polyline:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Polyline type=%d location=%p object=%p\n", t, p, q));
		*(tt__Polyline*)p = *(tt__Polyline*)q;
		break;
	case SOAP_TYPE__tt__Polygon:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tt__Polygon type=%d location=%p object=%p\n", t, p, q));
		*(tt__Polygon*)p = *(tt__Polygon*)q;
		break;
	case SOAP_TYPE__wsnt__TopicExpression:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__TopicExpressionTypeCustom type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__TopicExpressionTypeCustom*)p = *(wsnt__TopicExpressionTypeCustom*)q;
		break;
	case SOAP_TYPE__wsnt__TopicExpressionDialect:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__wsnt__ConsumerReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsnt__Filter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__FilterType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__FilterType*)p = *(wsnt__FilterType*)q;
		break;
	case SOAP_TYPE__wsnt__SubscriptionPolicy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__SubscriptionPolicyType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__SubscriptionPolicyType*)p = *(wsnt__SubscriptionPolicyType*)q;
		break;
	case SOAP_TYPE__wsnt__CreationTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct timeval type=%d location=%p object=%p\n", t, p, q));
		*(struct timeval*)p = *(struct timeval*)q;
		break;
	case SOAP_TYPE__wsnt__SubscriptionReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsnt__Topic:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__TopicExpressionTypeCustom type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__TopicExpressionTypeCustom*)p = *(wsnt__TopicExpressionTypeCustom*)q;
		break;
	case SOAP_TYPE__wsnt__ProducerReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsa5__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsa5__EndpointReferenceType*)p = *(struct wsa5__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsnt__NotificationMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__NotificationMessageHolderType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__NotificationMessageHolderType*)p = *(wsnt__NotificationMessageHolderType*)q;
		break;
	case SOAP_TYPE__wsnt__CurrentTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct timeval type=%d location=%p object=%p\n", t, p, q));
		*(struct timeval*)p = *(struct timeval*)q;
		break;
	case SOAP_TYPE__wsnt__TerminationTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct timeval type=%d location=%p object=%p\n", t, p, q));
		*(struct timeval*)p = *(struct timeval*)q;
		break;
	case SOAP_TYPE__wsnt__ProducerProperties:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__QueryExpressionType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__QueryExpressionType*)p = *(wsnt__QueryExpressionType*)q;
		break;
	case SOAP_TYPE__wsnt__MessageContent:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__QueryExpressionType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__QueryExpressionType*)p = *(wsnt__QueryExpressionType*)q;
		break;
	case SOAP_TYPE__wsnt__SubscribeCreationFailedFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__SubscribeCreationFailedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__SubscribeCreationFailedFaultType*)p = *(wsnt__SubscribeCreationFailedFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__InvalidFilterFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidFilterFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidFilterFaultType*)p = *(wsnt__InvalidFilterFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__TopicExpressionDialectUnknownFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__TopicExpressionDialectUnknownFaultType*)p = *(wsnt__TopicExpressionDialectUnknownFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__InvalidTopicExpressionFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidTopicExpressionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidTopicExpressionFaultType*)p = *(wsnt__InvalidTopicExpressionFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__TopicNotSupportedFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__TopicNotSupportedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__TopicNotSupportedFaultType*)p = *(wsnt__TopicNotSupportedFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__MultipleTopicsSpecifiedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__MultipleTopicsSpecifiedFaultType*)p = *(wsnt__MultipleTopicsSpecifiedFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidProducerPropertiesExpressionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidProducerPropertiesExpressionFaultType*)p = *(wsnt__InvalidProducerPropertiesExpressionFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__InvalidMessageContentExpressionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__InvalidMessageContentExpressionFaultType*)p = *(wsnt__InvalidMessageContentExpressionFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnrecognizedPolicyRequestFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnrecognizedPolicyRequestFaultType*)p = *(wsnt__UnrecognizedPolicyRequestFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnsupportedPolicyRequestFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnsupportedPolicyRequestFaultType*)p = *(wsnt__UnsupportedPolicyRequestFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__NotifyMessageNotSupportedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__NotifyMessageNotSupportedFaultType*)p = *(wsnt__NotifyMessageNotSupportedFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnacceptableInitialTerminationTimeFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnacceptableInitialTerminationTimeFaultType*)p = *(wsnt__UnacceptableInitialTerminationTimeFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__NoCurrentMessageOnTopicFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__NoCurrentMessageOnTopicFaultType*)p = *(wsnt__NoCurrentMessageOnTopicFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnableToGetMessagesFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToGetMessagesFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToGetMessagesFaultType*)p = *(wsnt__UnableToGetMessagesFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnableToDestroyPullPointFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToDestroyPullPointFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToDestroyPullPointFaultType*)p = *(wsnt__UnableToDestroyPullPointFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnableToCreatePullPointFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToCreatePullPointFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToCreatePullPointFaultType*)p = *(wsnt__UnableToCreatePullPointFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnacceptableTerminationTimeFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnacceptableTerminationTimeFaultType*)p = *(wsnt__UnacceptableTerminationTimeFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__UnableToDestroySubscriptionFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__UnableToDestroySubscriptionFaultType*)p = *(wsnt__UnableToDestroySubscriptionFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__PauseFailedFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__PauseFailedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__PauseFailedFaultType*)p = *(wsnt__PauseFailedFaultType*)q;
		break;
	case SOAP_TYPE__wsnt__ResumeFailedFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsnt__ResumeFailedFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsnt__ResumeFailedFaultType*)p = *(wsnt__ResumeFailedFaultType*)q;
		break;
	case SOAP_TYPE__xop__Include:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xop__Include type=%d location=%p object=%p\n", t, p, q));
		*(xop__Include*)p = *(xop__Include*)q;
		break;
	case SOAP_TYPE__wsrfbf__BaseFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsrfbf__BaseFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsrfbf__BaseFaultType*)p = *(wsrfbf__BaseFaultType*)q;
		break;
	case SOAP_TYPE__wstop__TopicNamespace:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__TopicNamespaceType type=%d location=%p object=%p\n", t, p, q));
		*(wstop__TopicNamespaceType*)p = *(wstop__TopicNamespaceType*)q;
		break;
	case SOAP_TYPE__wstop__TopicSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wstop__TopicSetType type=%d location=%p object=%p\n", t, p, q));
		*(wstop__TopicSetType*)p = *(wstop__TopicSetType*)q;
		break;
	case SOAP_TYPE__wstop__topicNamespaceLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__tev__Capabilities:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy tev__Capabilities type=%d location=%p object=%p\n", t, p, q));
		*(tev__Capabilities*)p = *(tev__Capabilities*)q;
		break;
	case SOAP_TYPE__wsrf__ResourceUnknownFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsrf__ResourceUnknownFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsrf__ResourceUnknownFaultType*)p = *(wsrf__ResourceUnknownFaultType*)q;
		break;
	case SOAP_TYPE__wsrf__ResourceUnavailableFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsrf__ResourceUnavailableFaultType type=%d location=%p object=%p\n", t, p, q));
		*(wsrf__ResourceUnavailableFaultType*)p = *(wsrf__ResourceUnavailableFaultType*)q;
		break;
	case SOAP_TYPE__wsd__Hello:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__HelloType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__HelloType*)p = *(wsd__HelloType*)q;
		break;
	case SOAP_TYPE__wsd__Bye:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ByeType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ByeType*)p = *(wsd__ByeType*)q;
		break;
	case SOAP_TYPE__wsd__Probe:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsd__ProbeType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsd__ProbeType*)p = *(struct wsd__ProbeType*)q;
		break;
	case SOAP_TYPE__wsd__ProbeMatches:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsd__ProbeMatchesType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsd__ProbeMatchesType*)p = *(struct wsd__ProbeMatchesType*)q;
		break;
	case SOAP_TYPE__wsd__Resolve:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ResolveType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ResolveType*)p = *(wsd__ResolveType*)q;
		break;
	case SOAP_TYPE__wsd__ResolveMatches:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ResolveMatchesType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ResolveMatchesType*)p = *(wsd__ResolveMatchesType*)q;
		break;
	case SOAP_TYPE__wsd__Types:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__wsd__Scopes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__ScopesType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__ScopesType*)p = *(wsd__ScopesType*)q;
		break;
	case SOAP_TYPE__wsd__XAddrs:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__wsd__SupportedMatchingRules:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__wsd__Security:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__SecurityType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__SecurityType*)p = *(wsd__SecurityType*)q;
		break;
	case SOAP_TYPE__wsd__Sig:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__SigType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__SigType*)p = *(wsd__SigType*)q;
		break;
	case SOAP_TYPE__wsd__AppSequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsd__AppSequenceType type=%d location=%p object=%p\n", t, p, q));
		*(wsd__AppSequenceType*)p = *(wsd__AppSequenceType*)q;
		break;
	case SOAP_TYPE__wsd__Id:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__wsa__EndpointReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__EndpointReferenceType*)p = *(wsa__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa__MessageID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__AttributedURI type=%d location=%p object=%p\n", t, p, q));
		*(wsa__AttributedURI*)p = *(wsa__AttributedURI*)q;
		break;
	case SOAP_TYPE__wsa__RelatesTo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__Relationship type=%d location=%p object=%p\n", t, p, q));
		*(wsa__Relationship*)p = *(wsa__Relationship*)q;
		break;
	case SOAP_TYPE__wsa__To:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__AttributedURI type=%d location=%p object=%p\n", t, p, q));
		*(wsa__AttributedURI*)p = *(wsa__AttributedURI*)q;
		break;
	case SOAP_TYPE__wsa__Action:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__AttributedURI type=%d location=%p object=%p\n", t, p, q));
		*(wsa__AttributedURI*)p = *(wsa__AttributedURI*)q;
		break;
	case SOAP_TYPE__wsa__From:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__EndpointReferenceType*)p = *(wsa__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa__ReplyTo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__EndpointReferenceType*)p = *(wsa__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa__FaultTo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__EndpointReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__EndpointReferenceType*)p = *(wsa__EndpointReferenceType*)q;
		break;
	case SOAP_TYPE__wsa__ReplyAfter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__ReplyAfterType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__ReplyAfterType*)p = *(wsa__ReplyAfterType*)q;
		break;
	case SOAP_TYPE__wsa__RetryAfter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy wsa__RetryAfterType type=%d location=%p object=%p\n", t, p, q));
		*(wsa__RetryAfterType*)p = *(wsa__RetryAfterType*)q;
		break;
	case SOAP_TYPE__ds__Signature:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignatureType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignatureType*)p = *(struct ds__SignatureType*)q;
		break;
	case SOAP_TYPE__ds__Transform:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__TransformType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__TransformType*)p = *(struct ds__TransformType*)q;
		break;
	case SOAP_TYPE__ds__KeyInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__KeyInfoType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__KeyInfoType*)p = *(struct ds__KeyInfoType*)q;
		break;
	case SOAP_TYPE__saml1__Assertion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AssertionType*)p = *(struct saml1__AssertionType*)q;
		break;
	case SOAP_TYPE__saml1__Conditions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionsType*)p = *(struct saml1__ConditionsType*)q;
		break;
	case SOAP_TYPE__saml1__Condition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionAbstractType*)p = *(struct saml1__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AudienceRestrictionConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AudienceRestrictionConditionType*)p = *(struct saml1__AudienceRestrictionConditionType*)q;
		break;
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__DoNotCacheConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__DoNotCacheConditionType*)p = *(struct saml1__DoNotCacheConditionType*)q;
		break;
	case SOAP_TYPE__saml1__Advice:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AdviceType*)p = *(struct saml1__AdviceType*)q;
		break;
	case SOAP_TYPE__saml1__Statement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__StatementAbstractType*)p = *(struct saml1__StatementAbstractType*)q;
		break;
	case SOAP_TYPE__saml1__SubjectStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectStatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectStatementAbstractType*)p = *(struct saml1__SubjectStatementAbstractType*)q;
		break;
	case SOAP_TYPE__saml1__Subject:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectType*)p = *(struct saml1__SubjectType*)q;
		break;
	case SOAP_TYPE__saml1__NameIdentifier:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__NameIdentifierType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__NameIdentifierType*)p = *(struct saml1__NameIdentifierType*)q;
		break;
	case SOAP_TYPE__saml1__SubjectConfirmation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectConfirmationType*)p = *(struct saml1__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE__saml1__AuthenticationStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthenticationStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthenticationStatementType*)p = *(struct saml1__AuthenticationStatementType*)q;
		break;
	case SOAP_TYPE__saml1__SubjectLocality:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectLocalityType*)p = *(struct saml1__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE__saml1__AuthorityBinding:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorityBindingType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorityBindingType*)p = *(struct saml1__AuthorityBindingType*)q;
		break;
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorizationDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorizationDecisionStatementType*)p = *(struct saml1__AuthorizationDecisionStatementType*)q;
		break;
	case SOAP_TYPE__saml1__Action:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ActionType*)p = *(struct saml1__ActionType*)q;
		break;
	case SOAP_TYPE__saml1__Evidence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__EvidenceType*)p = *(struct saml1__EvidenceType*)q;
		break;
	case SOAP_TYPE__saml1__AttributeStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeStatementType*)p = *(struct saml1__AttributeStatementType*)q;
		break;
	case SOAP_TYPE__saml1__AttributeDesignator:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeDesignatorType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeDesignatorType*)p = *(struct saml1__AttributeDesignatorType*)q;
		break;
	case SOAP_TYPE__saml1__Attribute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeType*)p = *(struct saml1__AttributeType*)q;
		break;
	case SOAP_TYPE__saml2__BaseID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__BaseIDAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__BaseIDAbstractType*)p = *(struct saml2__BaseIDAbstractType*)q;
		break;
	case SOAP_TYPE__saml2__NameID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__NameIDType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__NameIDType*)p = *(struct saml2__NameIDType*)q;
		break;
	case SOAP_TYPE__saml2__EncryptedID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	case SOAP_TYPE__saml2__Issuer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__NameIDType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__NameIDType*)p = *(struct saml2__NameIDType*)q;
		break;
	case SOAP_TYPE__saml2__Assertion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AssertionType*)p = *(struct saml2__AssertionType*)q;
		break;
	case SOAP_TYPE__saml2__Subject:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectType*)p = *(struct saml2__SubjectType*)q;
		break;
	case SOAP_TYPE__saml2__SubjectConfirmation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationType*)p = *(struct saml2__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationDataType*)p = *(struct saml2__SubjectConfirmationDataType*)q;
		break;
	case SOAP_TYPE__saml2__Conditions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionsType*)p = *(struct saml2__ConditionsType*)q;
		break;
	case SOAP_TYPE__saml2__Condition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionAbstractType*)p = *(struct saml2__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE__saml2__AudienceRestriction:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AudienceRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AudienceRestrictionType*)p = *(struct saml2__AudienceRestrictionType*)q;
		break;
	case SOAP_TYPE__saml2__OneTimeUse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__OneTimeUseType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__OneTimeUseType*)p = *(struct saml2__OneTimeUseType*)q;
		break;
	case SOAP_TYPE__saml2__ProxyRestriction:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ProxyRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ProxyRestrictionType*)p = *(struct saml2__ProxyRestrictionType*)q;
		break;
	case SOAP_TYPE__saml2__Advice:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AdviceType*)p = *(struct saml2__AdviceType*)q;
		break;
	case SOAP_TYPE__saml2__EncryptedAssertion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	case SOAP_TYPE__saml2__Statement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__StatementAbstractType*)p = *(struct saml2__StatementAbstractType*)q;
		break;
	case SOAP_TYPE__saml2__AuthnStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnStatementType*)p = *(struct saml2__AuthnStatementType*)q;
		break;
	case SOAP_TYPE__saml2__SubjectLocality:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectLocalityType*)p = *(struct saml2__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE__saml2__AuthnContext:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnContextType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnContextType*)p = *(struct saml2__AuthnContextType*)q;
		break;
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthzDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthzDecisionStatementType*)p = *(struct saml2__AuthzDecisionStatementType*)q;
		break;
	case SOAP_TYPE__saml2__Action:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ActionType*)p = *(struct saml2__ActionType*)q;
		break;
	case SOAP_TYPE__saml2__Evidence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EvidenceType*)p = *(struct saml2__EvidenceType*)q;
		break;
	case SOAP_TYPE__saml2__AttributeStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeStatementType*)p = *(struct saml2__AttributeStatementType*)q;
		break;
	case SOAP_TYPE__saml2__Attribute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeType*)p = *(struct saml2__AttributeType*)q;
		break;
	case SOAP_TYPE__saml2__EncryptedAttribute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	case SOAP_TYPE_dn__dummy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_tns1__dummy:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IANA_IfTypes(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_tt__IANA_IfTypes);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_tt__IANA_IfTypes(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_tt__IANA_IfTypes);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IANA_IfTypes(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_tt__IANA_IfTypes(soap, tag ? tag : "tt:IANA-IfTypes", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_tt__IANA_IfTypes(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__IANA_IfTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	a = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return a;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n)
{
	float *a = static_cast<float *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(float)));
	for (float *p = a; p && n--; ++p)
		soap_default_float(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	if (soap_out_float(soap, tag ? tag : "float", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__MetadataVersion(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out__wsd__MetadataVersion(soap, tag ? tag : "wsd:MetadataVersion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	if (soap_out__wsa5__RetryAfter(soap, tag ? tag : "wsa5:RetryAfter", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_ULONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	a = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_ULONG64);
	return a;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n)
{
	ULONG64 *a = static_cast<ULONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(ULONG64)));
	for (ULONG64 *p = a; p && n--; ++p)
		soap_default_ULONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	if (soap_out_ULONG64(soap, tag ? tag : "unsignedLong", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ULONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_saml2__DecisionType[] =
{	{ (LONG64)saml2__DecisionType__Permit, "Permit" },
	{ (LONG64)saml2__DecisionType__Deny, "Deny" },
	{ (LONG64)saml2__DecisionType__Indeterminate, "Indeterminate" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml2__DecisionType2s(struct soap *soap, enum saml2__DecisionType n)
{
	const char *s = soap_code_str(soap_codes_saml2__DecisionType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__DecisionType(struct soap *soap, const char *tag, int id, const enum saml2__DecisionType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__DecisionType), type) || soap_send(soap, soap_saml2__DecisionType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml2__DecisionType(struct soap *soap, const char *s, enum saml2__DecisionType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_saml2__DecisionType, s);
	if (map)
		*a = (enum saml2__DecisionType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (enum saml2__DecisionType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_in_saml2__DecisionType(struct soap *soap, const char *tag, enum saml2__DecisionType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum saml2__DecisionType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__DecisionType, sizeof(enum saml2__DecisionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2saml2__DecisionType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum saml2__DecisionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__DecisionType, SOAP_TYPE_saml2__DecisionType, sizeof(enum saml2__DecisionType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_new_saml2__DecisionType(struct soap *soap, int n)
{
	enum saml2__DecisionType *a = static_cast<enum saml2__DecisionType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum saml2__DecisionType)));
	for (enum saml2__DecisionType *p = a; p && n--; ++p)
		soap_default_saml2__DecisionType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__DecisionType(struct soap *soap, const enum saml2__DecisionType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__DecisionType(soap, tag ? tag : "saml2:DecisionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_get_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__DecisionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_saml1__DecisionType[] =
{	{ (LONG64)saml1__DecisionType__Permit, "Permit" },
	{ (LONG64)saml1__DecisionType__Deny, "Deny" },
	{ (LONG64)saml1__DecisionType__Indeterminate, "Indeterminate" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml1__DecisionType2s(struct soap *soap, enum saml1__DecisionType n)
{
	const char *s = soap_code_str(soap_codes_saml1__DecisionType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DecisionType(struct soap *soap, const char *tag, int id, const enum saml1__DecisionType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__DecisionType), type) || soap_send(soap, soap_saml1__DecisionType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml1__DecisionType(struct soap *soap, const char *s, enum saml1__DecisionType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_saml1__DecisionType, s);
	if (map)
		*a = (enum saml1__DecisionType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (enum saml1__DecisionType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_in_saml1__DecisionType(struct soap *soap, const char *tag, enum saml1__DecisionType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum saml1__DecisionType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__DecisionType, sizeof(enum saml1__DecisionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2saml1__DecisionType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum saml1__DecisionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__DecisionType, SOAP_TYPE_saml1__DecisionType, sizeof(enum saml1__DecisionType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_new_saml1__DecisionType(struct soap *soap, int n)
{
	enum saml1__DecisionType *a = static_cast<enum saml1__DecisionType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum saml1__DecisionType)));
	for (enum saml1__DecisionType *p = a; p && n--; ++p)
		soap_default_saml1__DecisionType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DecisionType(struct soap *soap, const enum saml1__DecisionType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__DecisionType(soap, tag ? tag : "saml1:DecisionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_get_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__DecisionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsc__FaultCodeType[] =
{	{ (LONG64)wsc__BadContextToken, "wsc:BadContextToken" },
	{ (LONG64)wsc__UnsupportedContextToken, "wsc:UnsupportedContextToken" },
	{ (LONG64)wsc__UnknownDerivationSource, "wsc:UnknownDerivationSource" },
	{ (LONG64)wsc__RenewNeeded, "wsc:RenewNeeded" },
	{ (LONG64)wsc__UnableToRenew, "wsc:UnableToRenew" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap *soap, enum wsc__FaultCodeType n)
{
	const char *s = soap_code_str(soap_codes_wsc__FaultCodeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap *soap, const char *tag, int id, const enum wsc__FaultCodeType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsc__FaultCodeType), type) || soap_send(soap, soap_wsc__FaultCodeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap *soap, const char *s, enum wsc__FaultCodeType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsc__FaultCodeType, t);
	if (map)
		*a = (enum wsc__FaultCodeType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (enum wsc__FaultCodeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap *soap, const char *tag, enum wsc__FaultCodeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsc__FaultCodeType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsc__FaultCodeType, sizeof(enum wsc__FaultCodeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsc__FaultCodeType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsc__FaultCodeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsc__FaultCodeType, SOAP_TYPE_wsc__FaultCodeType, sizeof(enum wsc__FaultCodeType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_new_wsc__FaultCodeType(struct soap *soap, int n)
{
	enum wsc__FaultCodeType *a = static_cast<enum wsc__FaultCodeType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsc__FaultCodeType)));
	for (enum wsc__FaultCodeType *p = a; p && n--; ++p)
		soap_default_wsc__FaultCodeType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap *soap, const enum wsc__FaultCodeType *a, const char *tag, const char *type)
{
	if (soap_out_wsc__FaultCodeType(soap, tag ? tag : "wsc:FaultCodeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsc__FaultCodeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsse__FaultcodeEnum[] =
{	{ (LONG64)wsse__UnsupportedSecurityToken, "wsse:UnsupportedSecurityToken" },
	{ (LONG64)wsse__UnsupportedAlgorithm, "wsse:UnsupportedAlgorithm" },
	{ (LONG64)wsse__InvalidSecurity, "wsse:InvalidSecurity" },
	{ (LONG64)wsse__InvalidSecurityToken, "wsse:InvalidSecurityToken" },
	{ (LONG64)wsse__FailedAuthentication, "wsse:FailedAuthentication" },
	{ (LONG64)wsse__FailedCheck, "wsse:FailedCheck" },
	{ (LONG64)wsse__SecurityTokenUnavailable, "wsse:SecurityTokenUnavailable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap *soap, enum wsse__FaultcodeEnum n)
{
	const char *s = soap_code_str(soap_codes_wsse__FaultcodeEnum, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap *soap, const char *tag, int id, const enum wsse__FaultcodeEnum *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsse__FaultcodeEnum), type) || soap_send(soap, soap_wsse__FaultcodeEnum2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap *soap, const char *s, enum wsse__FaultcodeEnum *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsse__FaultcodeEnum, t);
	if (map)
		*a = (enum wsse__FaultcodeEnum)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 6)
			return soap->error = SOAP_TYPE;
		*a = (enum wsse__FaultcodeEnum)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap *soap, const char *tag, enum wsse__FaultcodeEnum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsse__FaultcodeEnum*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsse__FaultcodeEnum, sizeof(enum wsse__FaultcodeEnum), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsse__FaultcodeEnum(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsse__FaultcodeEnum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsse__FaultcodeEnum, SOAP_TYPE_wsse__FaultcodeEnum, sizeof(enum wsse__FaultcodeEnum), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_new_wsse__FaultcodeEnum(struct soap *soap, int n)
{
	enum wsse__FaultcodeEnum *a = static_cast<enum wsse__FaultcodeEnum *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsse__FaultcodeEnum)));
	for (enum wsse__FaultcodeEnum *p = a; p && n--; ++p)
		soap_default_wsse__FaultcodeEnum(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap *soap, const enum wsse__FaultcodeEnum *a, const char *tag, const char *type)
{
	if (soap_out_wsse__FaultcodeEnum(soap, tag ? tag : "wsse:FaultcodeEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsse__FaultcodeEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsu__tTimestampFault[] =
{	{ (LONG64)wsu__MessageExpired, "wsu:MessageExpired" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap *soap, enum wsu__tTimestampFault n)
{
	const char *s = soap_code_str(soap_codes_wsu__tTimestampFault, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap *soap, const char *tag, int id, const enum wsu__tTimestampFault *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsu__tTimestampFault), type) || soap_send(soap, soap_wsu__tTimestampFault2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap *soap, const char *s, enum wsu__tTimestampFault *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsu__tTimestampFault, t);
	if (map)
		*a = (enum wsu__tTimestampFault)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 0)
			return soap->error = SOAP_TYPE;
		*a = (enum wsu__tTimestampFault)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap *soap, const char *tag, enum wsu__tTimestampFault *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsu__tTimestampFault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsu__tTimestampFault, sizeof(enum wsu__tTimestampFault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsu__tTimestampFault(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsu__tTimestampFault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsu__tTimestampFault, SOAP_TYPE_wsu__tTimestampFault, sizeof(enum wsu__tTimestampFault), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_new_wsu__tTimestampFault(struct soap *soap, int n)
{
	enum wsu__tTimestampFault *a = static_cast<enum wsu__tTimestampFault *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsu__tTimestampFault)));
	for (enum wsu__tTimestampFault *p = a; p && n--; ++p)
		soap_default_wsu__tTimestampFault(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap *soap, const enum wsu__tTimestampFault *a, const char *tag, const char *type)
{
	if (soap_out_wsu__tTimestampFault(soap, tag ? tag : "wsu:tTimestampFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsu__tTimestampFault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wstop__topic(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out__wstop__topic(soap, tag ? tag : "wstop:topic", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__FixedTopicSet(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__FixedTopicSet(soap, tag ? tag : "wsnt:FixedTopicSet", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__wsa5__IsReferenceParameter[] =
{	{ (LONG64)_wsa5__IsReferenceParameter__false, "false" },
	{ (LONG64)_wsa5__IsReferenceParameter__true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap *soap, enum _wsa5__IsReferenceParameter n)
{
	const char *s = soap_code_str(soap_codes__wsa5__IsReferenceParameter, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap *soap, const char *tag, int id, const enum _wsa5__IsReferenceParameter *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsa5__IsReferenceParameter), type) || soap_send(soap, soap__wsa5__IsReferenceParameter2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap *soap, const char *s, enum _wsa5__IsReferenceParameter *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__wsa5__IsReferenceParameter, s);
	if (map)
		*a = (enum _wsa5__IsReferenceParameter)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (enum _wsa5__IsReferenceParameter)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap *soap, const char *tag, enum _wsa5__IsReferenceParameter *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _wsa5__IsReferenceParameter*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsa5__IsReferenceParameter, sizeof(enum _wsa5__IsReferenceParameter), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_wsa5__IsReferenceParameter(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _wsa5__IsReferenceParameter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsa5__IsReferenceParameter, SOAP_TYPE__wsa5__IsReferenceParameter, sizeof(enum _wsa5__IsReferenceParameter), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n)
{
	enum _wsa5__IsReferenceParameter *a = static_cast<enum _wsa5__IsReferenceParameter *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _wsa5__IsReferenceParameter)));
	for (enum _wsa5__IsReferenceParameter *p = a; p && n--; ++p)
		soap_default__wsa5__IsReferenceParameter(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap *soap, const enum _wsa5__IsReferenceParameter *a, const char *tag, const char *type)
{
	if (soap_out__wsa5__IsReferenceParameter(soap, tag ? tag : "wsa5:IsReferenceParameter", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsa5__IsReferenceParameter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsa5__FaultCodesType[] =
{	{ (LONG64)wsa5__InvalidAddressingHeader, "wsa5:InvalidAddressingHeader" },
	{ (LONG64)wsa5__InvalidAddress, "wsa5:InvalidAddress" },
	{ (LONG64)wsa5__InvalidEPR, "wsa5:InvalidEPR" },
	{ (LONG64)wsa5__InvalidCardinality, "wsa5:InvalidCardinality" },
	{ (LONG64)wsa5__MissingAddressInEPR, "wsa5:MissingAddressInEPR" },
	{ (LONG64)wsa5__DuplicateMessageID, "wsa5:DuplicateMessageID" },
	{ (LONG64)wsa5__ActionMismatch, "wsa5:ActionMismatch" },
	{ (LONG64)wsa5__MessageAddressingHeaderRequired, "wsa5:MessageAddressingHeaderRequired" },
	{ (LONG64)wsa5__DestinationUnreachable, "wsa5:DestinationUnreachable" },
	{ (LONG64)wsa5__ActionNotSupported, "wsa5:ActionNotSupported" },
	{ (LONG64)wsa5__EndpointUnavailable, "wsa5:EndpointUnavailable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap *soap, enum wsa5__FaultCodesType n)
{
	const char *s = soap_code_str(soap_codes_wsa5__FaultCodesType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap *soap, const char *tag, int id, const enum wsa5__FaultCodesType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__FaultCodesType), type) || soap_send(soap, soap_wsa5__FaultCodesType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap *soap, const char *s, enum wsa5__FaultCodesType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsa5__FaultCodesType, t);
	if (map)
		*a = (enum wsa5__FaultCodesType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 10)
			return soap->error = SOAP_TYPE;
		*a = (enum wsa5__FaultCodesType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap *soap, const char *tag, enum wsa5__FaultCodesType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsa5__FaultCodesType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__FaultCodesType, sizeof(enum wsa5__FaultCodesType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsa5__FaultCodesType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsa5__FaultCodesType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__FaultCodesType, SOAP_TYPE_wsa5__FaultCodesType, sizeof(enum wsa5__FaultCodesType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n)
{
	enum wsa5__FaultCodesType *a = static_cast<enum wsa5__FaultCodesType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsa5__FaultCodesType)));
	for (enum wsa5__FaultCodesType *p = a; p && n--; ++p)
		soap_default_wsa5__FaultCodesType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap *soap, const enum wsa5__FaultCodesType *a, const char *tag, const char *type)
{
	if (soap_out_wsa5__FaultCodesType(soap, tag ? tag : "wsa5:FaultCodesType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__FaultCodesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsa5__RelationshipType[] =
{	{ (LONG64)http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply, "http://www.w3.org/2005/08/addressing/reply" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap *soap, enum wsa5__RelationshipType n)
{
	const char *s = soap_code_str(soap_codes_wsa5__RelationshipType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap *soap, const char *tag, int id, const enum wsa5__RelationshipType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa5__RelationshipType), type) || soap_send(soap, soap_wsa5__RelationshipType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap *soap, const char *s, enum wsa5__RelationshipType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_wsa5__RelationshipType, s);
	if (map)
		*a = (enum wsa5__RelationshipType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 0)
			return soap->error = SOAP_TYPE;
		*a = (enum wsa5__RelationshipType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap *soap, const char *tag, enum wsa5__RelationshipType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsa5__RelationshipType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa5__RelationshipType, sizeof(enum wsa5__RelationshipType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsa5__RelationshipType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsa5__RelationshipType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa5__RelationshipType, SOAP_TYPE_wsa5__RelationshipType, sizeof(enum wsa5__RelationshipType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n)
{
	enum wsa5__RelationshipType *a = static_cast<enum wsa5__RelationshipType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsa5__RelationshipType)));
	for (enum wsa5__RelationshipType *p = a; p && n--; ++p)
		soap_default_wsa5__RelationshipType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap *soap, const enum wsa5__RelationshipType *a, const char *tag, const char *type)
{
	if (soap_out_wsa5__RelationshipType(soap, tag ? tag : "wsa5:RelationshipType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa5__RelationshipType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsa__FaultSubcodeValues[] =
{	{ (LONG64)wsa__FaultSubcodeValues::wsa__InvalidMessageInformationHeader, "wsa:InvalidMessageInformationHeader" },
	{ (LONG64)wsa__FaultSubcodeValues::wsa__MessageInformationHeaderRequired, "wsa:MessageInformationHeaderRequired" },
	{ (LONG64)wsa__FaultSubcodeValues::wsa__DestinationUnreachable, "wsa:DestinationUnreachable" },
	{ (LONG64)wsa__FaultSubcodeValues::wsa__ActionNotSupported, "wsa:ActionNotSupported" },
	{ (LONG64)wsa__FaultSubcodeValues::wsa__EndpointUnavailable, "wsa:EndpointUnavailable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa__FaultSubcodeValues2s(struct soap *soap, wsa__FaultSubcodeValues n)
{
	const char *s = soap_code_str(soap_codes_wsa__FaultSubcodeValues, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__FaultSubcodeValues(struct soap *soap, const char *tag, int id, const wsa__FaultSubcodeValues *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa__FaultSubcodeValues), type) || soap_send(soap, soap_wsa__FaultSubcodeValues2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa__FaultSubcodeValues(struct soap *soap, const char *s, wsa__FaultSubcodeValues *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsa__FaultSubcodeValues, t);
	if (map)
		*a = (wsa__FaultSubcodeValues)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (wsa__FaultSubcodeValues)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 wsa__FaultSubcodeValues * SOAP_FMAC4 soap_in_wsa__FaultSubcodeValues(struct soap *soap, const char *tag, wsa__FaultSubcodeValues *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (wsa__FaultSubcodeValues*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa__FaultSubcodeValues, sizeof(wsa__FaultSubcodeValues), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsa__FaultSubcodeValues(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (wsa__FaultSubcodeValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa__FaultSubcodeValues, SOAP_TYPE_wsa__FaultSubcodeValues, sizeof(wsa__FaultSubcodeValues), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 wsa__FaultSubcodeValues * SOAP_FMAC4 soap_new_wsa__FaultSubcodeValues(struct soap *soap, int n)
{
	wsa__FaultSubcodeValues *a = static_cast<wsa__FaultSubcodeValues *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(wsa__FaultSubcodeValues)));
	for (wsa__FaultSubcodeValues *p = a; p && n--; ++p)
		soap_default_wsa__FaultSubcodeValues(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__FaultSubcodeValues(struct soap *soap, const wsa__FaultSubcodeValues *a, const char *tag, const char *type)
{
	if (soap_out_wsa__FaultSubcodeValues(soap, tag ? tag : "wsa:FaultSubcodeValues", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsa__FaultSubcodeValues * SOAP_FMAC4 soap_get_wsa__FaultSubcodeValues(struct soap *soap, wsa__FaultSubcodeValues *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa__FaultSubcodeValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsa__RelationshipTypeValues[] =
{	{ (LONG64)wsa__RelationshipTypeValues::wsa__Reply, "wsa:Reply" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa__RelationshipTypeValues2s(struct soap *soap, wsa__RelationshipTypeValues n)
{
	const char *s = soap_code_str(soap_codes_wsa__RelationshipTypeValues, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__RelationshipTypeValues(struct soap *soap, const char *tag, int id, const wsa__RelationshipTypeValues *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa__RelationshipTypeValues), type) || soap_send(soap, soap_wsa__RelationshipTypeValues2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa__RelationshipTypeValues(struct soap *soap, const char *s, wsa__RelationshipTypeValues *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsa__RelationshipTypeValues, t);
	if (map)
		*a = (wsa__RelationshipTypeValues)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 0)
			return soap->error = SOAP_TYPE;
		*a = (wsa__RelationshipTypeValues)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 wsa__RelationshipTypeValues * SOAP_FMAC4 soap_in_wsa__RelationshipTypeValues(struct soap *soap, const char *tag, wsa__RelationshipTypeValues *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (wsa__RelationshipTypeValues*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa__RelationshipTypeValues, sizeof(wsa__RelationshipTypeValues), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsa__RelationshipTypeValues(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (wsa__RelationshipTypeValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa__RelationshipTypeValues, SOAP_TYPE_wsa__RelationshipTypeValues, sizeof(wsa__RelationshipTypeValues), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 wsa__RelationshipTypeValues * SOAP_FMAC4 soap_new_wsa__RelationshipTypeValues(struct soap *soap, int n)
{
	wsa__RelationshipTypeValues *a = static_cast<wsa__RelationshipTypeValues *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(wsa__RelationshipTypeValues)));
	for (wsa__RelationshipTypeValues *p = a; p && n--; ++p)
		soap_default_wsa__RelationshipTypeValues(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__RelationshipTypeValues(struct soap *soap, const wsa__RelationshipTypeValues *a, const char *tag, const char *type)
{
	if (soap_out_wsa__RelationshipTypeValues(soap, tag ? tag : "wsa:RelationshipTypeValues", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsa__RelationshipTypeValues * SOAP_FMAC4 soap_get_wsa__RelationshipTypeValues(struct soap *soap, wsa__RelationshipTypeValues *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa__RelationshipTypeValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsd__FaultCodeType[] =
{	{ (LONG64)wsd__FaultCodeType::wsd__MatchingRuleNotSupported, "wsd:MatchingRuleNotSupported" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsd__FaultCodeType2s(struct soap *soap, wsd__FaultCodeType n)
{
	const char *s = soap_code_str(soap_codes_wsd__FaultCodeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsd__FaultCodeType(struct soap *soap, const char *tag, int id, const wsd__FaultCodeType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsd__FaultCodeType), type) || soap_send(soap, soap_wsd__FaultCodeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsd__FaultCodeType(struct soap *soap, const char *s, wsd__FaultCodeType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsd__FaultCodeType, t);
	if (map)
		*a = (wsd__FaultCodeType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 0)
			return soap->error = SOAP_TYPE;
		*a = (wsd__FaultCodeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 wsd__FaultCodeType * SOAP_FMAC4 soap_in_wsd__FaultCodeType(struct soap *soap, const char *tag, wsd__FaultCodeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (wsd__FaultCodeType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsd__FaultCodeType, sizeof(wsd__FaultCodeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsd__FaultCodeType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (wsd__FaultCodeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsd__FaultCodeType, SOAP_TYPE_wsd__FaultCodeType, sizeof(wsd__FaultCodeType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 wsd__FaultCodeType * SOAP_FMAC4 soap_new_wsd__FaultCodeType(struct soap *soap, int n)
{
	wsd__FaultCodeType *a = static_cast<wsd__FaultCodeType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(wsd__FaultCodeType)));
	for (wsd__FaultCodeType *p = a; p && n--; ++p)
		soap_default_wsd__FaultCodeType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsd__FaultCodeType(struct soap *soap, const wsd__FaultCodeType *a, const char *tag, const char *type)
{
	if (soap_out_wsd__FaultCodeType(soap, tag ? tag : "wsd:FaultCodeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsd__FaultCodeType * SOAP_FMAC4 soap_get_wsd__FaultCodeType(struct soap *soap, wsd__FaultCodeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsd__FaultCodeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsd__RelationshipType[] =
{	{ (LONG64)wsd__RelationshipType::wsd__Suppression, "wsd:Suppression" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsd__RelationshipType2s(struct soap *soap, wsd__RelationshipType n)
{
	const char *s = soap_code_str(soap_codes_wsd__RelationshipType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsd__RelationshipType(struct soap *soap, const char *tag, int id, const wsd__RelationshipType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsd__RelationshipType), type) || soap_send(soap, soap_wsd__RelationshipType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsd__RelationshipType(struct soap *soap, const char *s, wsd__RelationshipType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsd__RelationshipType, t);
	if (map)
		*a = (wsd__RelationshipType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 0)
			return soap->error = SOAP_TYPE;
		*a = (wsd__RelationshipType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 wsd__RelationshipType * SOAP_FMAC4 soap_in_wsd__RelationshipType(struct soap *soap, const char *tag, wsd__RelationshipType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (wsd__RelationshipType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsd__RelationshipType, sizeof(wsd__RelationshipType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsd__RelationshipType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (wsd__RelationshipType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsd__RelationshipType, SOAP_TYPE_wsd__RelationshipType, sizeof(wsd__RelationshipType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 wsd__RelationshipType * SOAP_FMAC4 soap_new_wsd__RelationshipType(struct soap *soap, int n)
{
	wsd__RelationshipType *a = static_cast<wsd__RelationshipType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(wsd__RelationshipType)));
	for (wsd__RelationshipType *p = a; p && n--; ++p)
		soap_default_wsd__RelationshipType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsd__RelationshipType(struct soap *soap, const wsd__RelationshipType *a, const char *tag, const char *type)
{
	if (soap_out_wsd__RelationshipType(soap, tag ? tag : "wsd:RelationshipType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wsd__RelationshipType * SOAP_FMAC4 soap_get_wsd__RelationshipType(struct soap *soap, wsd__RelationshipType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsd__RelationshipType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Entity[] =
{	{ (LONG64)tt__Entity::Device, "Device" },
	{ (LONG64)tt__Entity::VideoSource, "VideoSource" },
	{ (LONG64)tt__Entity::AudioSource, "AudioSource" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Entity2s(struct soap *soap, tt__Entity n)
{
	const char *s = soap_code_str(soap_codes_tt__Entity, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Entity(struct soap *soap, const char *tag, int id, const tt__Entity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Entity), type) || soap_send(soap, soap_tt__Entity2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Entity(struct soap *soap, const char *s, tt__Entity *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Entity, s);
	if (map)
		*a = (tt__Entity)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__Entity)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Entity * SOAP_FMAC4 soap_in_tt__Entity(struct soap *soap, const char *tag, tt__Entity *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Entity*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Entity, sizeof(tt__Entity), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Entity(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Entity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Entity, SOAP_TYPE_tt__Entity, sizeof(tt__Entity), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Entity * SOAP_FMAC4 soap_new_tt__Entity(struct soap *soap, int n)
{
	tt__Entity *a = static_cast<tt__Entity *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Entity)));
	for (tt__Entity *p = a; p && n--; ++p)
		soap_default_tt__Entity(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Entity(struct soap *soap, const tt__Entity *a, const char *tag, const char *type)
{
	if (soap_out_tt__Entity(soap, tag ? tag : "tt:Entity", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Entity * SOAP_FMAC4 soap_get_tt__Entity(struct soap *soap, tt__Entity *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__MoveStatus[] =
{	{ (LONG64)tt__MoveStatus::IDLE, "IDLE" },
	{ (LONG64)tt__MoveStatus::MOVING, "MOVING" },
	{ (LONG64)tt__MoveStatus::UNKNOWN, "UNKNOWN" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MoveStatus2s(struct soap *soap, tt__MoveStatus n)
{
	const char *s = soap_code_str(soap_codes_tt__MoveStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus(struct soap *soap, const char *tag, int id, const tt__MoveStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__MoveStatus), type) || soap_send(soap, soap_tt__MoveStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MoveStatus(struct soap *soap, const char *s, tt__MoveStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__MoveStatus, s);
	if (map)
		*a = (tt__MoveStatus)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__MoveStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__MoveStatus * SOAP_FMAC4 soap_in_tt__MoveStatus(struct soap *soap, const char *tag, tt__MoveStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__MoveStatus*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__MoveStatus, sizeof(tt__MoveStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__MoveStatus(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__MoveStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__MoveStatus, SOAP_TYPE_tt__MoveStatus, sizeof(tt__MoveStatus), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__MoveStatus * SOAP_FMAC4 soap_new_tt__MoveStatus(struct soap *soap, int n)
{
	tt__MoveStatus *a = static_cast<tt__MoveStatus *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__MoveStatus)));
	for (tt__MoveStatus *p = a; p && n--; ++p)
		soap_default_tt__MoveStatus(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MoveStatus(struct soap *soap, const tt__MoveStatus *a, const char *tag, const char *type)
{
	if (soap_out_tt__MoveStatus(soap, tag ? tag : "tt:MoveStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__MoveStatus * SOAP_FMAC4 soap_get_tt__MoveStatus(struct soap *soap, tt__MoveStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__MoveStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__OSDType[] =
{	{ (LONG64)tt__OSDType::Text, "Text" },
	{ (LONG64)tt__OSDType::Image, "Image" },
	{ (LONG64)tt__OSDType::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__OSDType2s(struct soap *soap, tt__OSDType n)
{
	const char *s = soap_code_str(soap_codes_tt__OSDType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDType(struct soap *soap, const char *tag, int id, const tt__OSDType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__OSDType), type) || soap_send(soap, soap_tt__OSDType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__OSDType(struct soap *soap, const char *s, tt__OSDType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__OSDType, s);
	if (map)
		*a = (tt__OSDType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__OSDType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__OSDType * SOAP_FMAC4 soap_in_tt__OSDType(struct soap *soap, const char *tag, tt__OSDType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__OSDType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__OSDType, sizeof(tt__OSDType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__OSDType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__OSDType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__OSDType, SOAP_TYPE_tt__OSDType, sizeof(tt__OSDType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__OSDType * SOAP_FMAC4 soap_new_tt__OSDType(struct soap *soap, int n)
{
	tt__OSDType *a = static_cast<tt__OSDType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__OSDType)));
	for (tt__OSDType *p = a; p && n--; ++p)
		soap_default_tt__OSDType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__OSDType(struct soap *soap, const tt__OSDType *a, const char *tag, const char *type)
{
	if (soap_out_tt__OSDType(soap, tag ? tag : "tt:OSDType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__OSDType * SOAP_FMAC4 soap_get_tt__OSDType(struct soap *soap, tt__OSDType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__OSDType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ModeOfOperation[] =
{	{ (LONG64)tt__ModeOfOperation::Idle, "Idle" },
	{ (LONG64)tt__ModeOfOperation::Active, "Active" },
	{ (LONG64)tt__ModeOfOperation::Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ModeOfOperation2s(struct soap *soap, tt__ModeOfOperation n)
{
	const char *s = soap_code_str(soap_codes_tt__ModeOfOperation, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ModeOfOperation(struct soap *soap, const char *tag, int id, const tt__ModeOfOperation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ModeOfOperation), type) || soap_send(soap, soap_tt__ModeOfOperation2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ModeOfOperation(struct soap *soap, const char *s, tt__ModeOfOperation *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ModeOfOperation, s);
	if (map)
		*a = (tt__ModeOfOperation)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__ModeOfOperation)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ModeOfOperation * SOAP_FMAC4 soap_in_tt__ModeOfOperation(struct soap *soap, const char *tag, tt__ModeOfOperation *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ModeOfOperation*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ModeOfOperation, sizeof(tt__ModeOfOperation), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ModeOfOperation(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ModeOfOperation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ModeOfOperation, SOAP_TYPE_tt__ModeOfOperation, sizeof(tt__ModeOfOperation), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ModeOfOperation * SOAP_FMAC4 soap_new_tt__ModeOfOperation(struct soap *soap, int n)
{
	tt__ModeOfOperation *a = static_cast<tt__ModeOfOperation *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ModeOfOperation)));
	for (tt__ModeOfOperation *p = a; p && n--; ++p)
		soap_default_tt__ModeOfOperation(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ModeOfOperation(struct soap *soap, const tt__ModeOfOperation *a, const char *tag, const char *type)
{
	if (soap_out_tt__ModeOfOperation(soap, tag ? tag : "tt:ModeOfOperation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ModeOfOperation * SOAP_FMAC4 soap_get_tt__ModeOfOperation(struct soap *soap, tt__ModeOfOperation *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ModeOfOperation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__TrackType[] =
{	{ (LONG64)tt__TrackType::Video, "Video" },
	{ (LONG64)tt__TrackType::Audio, "Audio" },
	{ (LONG64)tt__TrackType::Metadata, "Metadata" },
	{ (LONG64)tt__TrackType::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__TrackType2s(struct soap *soap, tt__TrackType n)
{
	const char *s = soap_code_str(soap_codes_tt__TrackType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackType(struct soap *soap, const char *tag, int id, const tt__TrackType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__TrackType), type) || soap_send(soap, soap_tt__TrackType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__TrackType(struct soap *soap, const char *s, tt__TrackType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__TrackType, s);
	if (map)
		*a = (tt__TrackType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__TrackType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__TrackType * SOAP_FMAC4 soap_in_tt__TrackType(struct soap *soap, const char *tag, tt__TrackType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__TrackType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__TrackType, sizeof(tt__TrackType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__TrackType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__TrackType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__TrackType, SOAP_TYPE_tt__TrackType, sizeof(tt__TrackType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__TrackType * SOAP_FMAC4 soap_new_tt__TrackType(struct soap *soap, int n)
{
	tt__TrackType *a = static_cast<tt__TrackType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__TrackType)));
	for (tt__TrackType *p = a; p && n--; ++p)
		soap_default_tt__TrackType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TrackType(struct soap *soap, const tt__TrackType *a, const char *tag, const char *type)
{
	if (soap_out_tt__TrackType(soap, tag ? tag : "tt:TrackType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__TrackType * SOAP_FMAC4 soap_get_tt__TrackType(struct soap *soap, tt__TrackType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__TrackType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__RecordingStatus[] =
{	{ (LONG64)tt__RecordingStatus::Initiated, "Initiated" },
	{ (LONG64)tt__RecordingStatus::Recording, "Recording" },
	{ (LONG64)tt__RecordingStatus::Stopped, "Stopped" },
	{ (LONG64)tt__RecordingStatus::Removing, "Removing" },
	{ (LONG64)tt__RecordingStatus::Removed, "Removed" },
	{ (LONG64)tt__RecordingStatus::Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RecordingStatus2s(struct soap *soap, tt__RecordingStatus n)
{
	const char *s = soap_code_str(soap_codes_tt__RecordingStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingStatus(struct soap *soap, const char *tag, int id, const tt__RecordingStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__RecordingStatus), type) || soap_send(soap, soap_tt__RecordingStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RecordingStatus(struct soap *soap, const char *s, tt__RecordingStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__RecordingStatus, s);
	if (map)
		*a = (tt__RecordingStatus)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 5)
			return soap->error = SOAP_TYPE;
		*a = (tt__RecordingStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__RecordingStatus * SOAP_FMAC4 soap_in_tt__RecordingStatus(struct soap *soap, const char *tag, tt__RecordingStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__RecordingStatus*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__RecordingStatus, sizeof(tt__RecordingStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__RecordingStatus(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__RecordingStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__RecordingStatus, SOAP_TYPE_tt__RecordingStatus, sizeof(tt__RecordingStatus), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__RecordingStatus * SOAP_FMAC4 soap_new_tt__RecordingStatus(struct soap *soap, int n)
{
	tt__RecordingStatus *a = static_cast<tt__RecordingStatus *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__RecordingStatus)));
	for (tt__RecordingStatus *p = a; p && n--; ++p)
		soap_default_tt__RecordingStatus(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingStatus(struct soap *soap, const tt__RecordingStatus *a, const char *tag, const char *type)
{
	if (soap_out_tt__RecordingStatus(soap, tag ? tag : "tt:RecordingStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__RecordingStatus * SOAP_FMAC4 soap_get_tt__RecordingStatus(struct soap *soap, tt__RecordingStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__RecordingStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__SearchState[] =
{	{ (LONG64)tt__SearchState::Queued, "Queued" },
	{ (LONG64)tt__SearchState::Searching, "Searching" },
	{ (LONG64)tt__SearchState::Completed, "Completed" },
	{ (LONG64)tt__SearchState::Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SearchState2s(struct soap *soap, tt__SearchState n)
{
	const char *s = soap_code_str(soap_codes_tt__SearchState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchState(struct soap *soap, const char *tag, int id, const tt__SearchState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__SearchState), type) || soap_send(soap, soap_tt__SearchState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SearchState(struct soap *soap, const char *s, tt__SearchState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__SearchState, s);
	if (map)
		*a = (tt__SearchState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__SearchState)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__SearchState * SOAP_FMAC4 soap_in_tt__SearchState(struct soap *soap, const char *tag, tt__SearchState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__SearchState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__SearchState, sizeof(tt__SearchState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__SearchState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__SearchState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__SearchState, SOAP_TYPE_tt__SearchState, sizeof(tt__SearchState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__SearchState * SOAP_FMAC4 soap_new_tt__SearchState(struct soap *soap, int n)
{
	tt__SearchState *a = static_cast<tt__SearchState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__SearchState)));
	for (tt__SearchState *p = a; p && n--; ++p)
		soap_default_tt__SearchState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SearchState(struct soap *soap, const tt__SearchState *a, const char *tag, const char *type)
{
	if (soap_out_tt__SearchState(soap, tag ? tag : "tt:SearchState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__SearchState * SOAP_FMAC4 soap_get_tt__SearchState(struct soap *soap, tt__SearchState *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__SearchState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ReceiverState[] =
{	{ (LONG64)tt__ReceiverState::NotConnected, "NotConnected" },
	{ (LONG64)tt__ReceiverState::Connecting, "Connecting" },
	{ (LONG64)tt__ReceiverState::Connected, "Connected" },
	{ (LONG64)tt__ReceiverState::Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReceiverState2s(struct soap *soap, tt__ReceiverState n)
{
	const char *s = soap_code_str(soap_codes_tt__ReceiverState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverState(struct soap *soap, const char *tag, int id, const tt__ReceiverState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ReceiverState), type) || soap_send(soap, soap_tt__ReceiverState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReceiverState(struct soap *soap, const char *s, tt__ReceiverState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ReceiverState, s);
	if (map)
		*a = (tt__ReceiverState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__ReceiverState)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ReceiverState * SOAP_FMAC4 soap_in_tt__ReceiverState(struct soap *soap, const char *tag, tt__ReceiverState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ReceiverState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ReceiverState, sizeof(tt__ReceiverState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ReceiverState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ReceiverState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ReceiverState, SOAP_TYPE_tt__ReceiverState, sizeof(tt__ReceiverState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ReceiverState * SOAP_FMAC4 soap_new_tt__ReceiverState(struct soap *soap, int n)
{
	tt__ReceiverState *a = static_cast<tt__ReceiverState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ReceiverState)));
	for (tt__ReceiverState *p = a; p && n--; ++p)
		soap_default_tt__ReceiverState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReceiverState(struct soap *soap, const tt__ReceiverState *a, const char *tag, const char *type)
{
	if (soap_out_tt__ReceiverState(soap, tag ? tag : "tt:ReceiverState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ReceiverState * SOAP_FMAC4 soap_get_tt__ReceiverState(struct soap *soap, tt__ReceiverState *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ReceiverState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ReceiverMode[] =
{	{ (LONG64)tt__ReceiverMode::AutoConnect, "AutoConnect" },
	{ (LONG64)tt__ReceiverMode::AlwaysConnect, "AlwaysConnect" },
	{ (LONG64)tt__ReceiverMode::NeverConnect, "NeverConnect" },
	{ (LONG64)tt__ReceiverMode::Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReceiverMode2s(struct soap *soap, tt__ReceiverMode n)
{
	const char *s = soap_code_str(soap_codes_tt__ReceiverMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverMode(struct soap *soap, const char *tag, int id, const tt__ReceiverMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ReceiverMode), type) || soap_send(soap, soap_tt__ReceiverMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReceiverMode(struct soap *soap, const char *s, tt__ReceiverMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ReceiverMode, s);
	if (map)
		*a = (tt__ReceiverMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__ReceiverMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ReceiverMode * SOAP_FMAC4 soap_in_tt__ReceiverMode(struct soap *soap, const char *tag, tt__ReceiverMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ReceiverMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ReceiverMode, sizeof(tt__ReceiverMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ReceiverMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ReceiverMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ReceiverMode, SOAP_TYPE_tt__ReceiverMode, sizeof(tt__ReceiverMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ReceiverMode * SOAP_FMAC4 soap_new_tt__ReceiverMode(struct soap *soap, int n)
{
	tt__ReceiverMode *a = static_cast<tt__ReceiverMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ReceiverMode)));
	for (tt__ReceiverMode *p = a; p && n--; ++p)
		soap_default_tt__ReceiverMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReceiverMode(struct soap *soap, const tt__ReceiverMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__ReceiverMode(soap, tag ? tag : "tt:ReceiverMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ReceiverMode * SOAP_FMAC4 soap_get_tt__ReceiverMode(struct soap *soap, tt__ReceiverMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ReceiverMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Direction[] =
{	{ (LONG64)tt__Direction::Left, "Left" },
	{ (LONG64)tt__Direction::Right, "Right" },
	{ (LONG64)tt__Direction::Any, "Any" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Direction2s(struct soap *soap, tt__Direction n)
{
	const char *s = soap_code_str(soap_codes_tt__Direction, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Direction(struct soap *soap, const char *tag, int id, const tt__Direction *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Direction), type) || soap_send(soap, soap_tt__Direction2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Direction(struct soap *soap, const char *s, tt__Direction *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Direction, s);
	if (map)
		*a = (tt__Direction)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__Direction)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Direction * SOAP_FMAC4 soap_in_tt__Direction(struct soap *soap, const char *tag, tt__Direction *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Direction*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Direction, sizeof(tt__Direction), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Direction(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Direction *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Direction, SOAP_TYPE_tt__Direction, sizeof(tt__Direction), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Direction * SOAP_FMAC4 soap_new_tt__Direction(struct soap *soap, int n)
{
	tt__Direction *a = static_cast<tt__Direction *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Direction)));
	for (tt__Direction *p = a; p && n--; ++p)
		soap_default_tt__Direction(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Direction(struct soap *soap, const tt__Direction *a, const char *tag, const char *type)
{
	if (soap_out_tt__Direction(soap, tag ? tag : "tt:Direction", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Direction * SOAP_FMAC4 soap_get_tt__Direction(struct soap *soap, tt__Direction *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Direction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__PropertyOperation[] =
{	{ (LONG64)tt__PropertyOperation::Initialized, "Initialized" },
	{ (LONG64)tt__PropertyOperation::Deleted, "Deleted" },
	{ (LONG64)tt__PropertyOperation::Changed, "Changed" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PropertyOperation2s(struct soap *soap, tt__PropertyOperation n)
{
	const char *s = soap_code_str(soap_codes_tt__PropertyOperation, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PropertyOperation(struct soap *soap, const char *tag, int id, const tt__PropertyOperation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__PropertyOperation), type) || soap_send(soap, soap_tt__PropertyOperation2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PropertyOperation(struct soap *soap, const char *s, tt__PropertyOperation *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__PropertyOperation, s);
	if (map)
		*a = (tt__PropertyOperation)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__PropertyOperation)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__PropertyOperation * SOAP_FMAC4 soap_in_tt__PropertyOperation(struct soap *soap, const char *tag, tt__PropertyOperation *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__PropertyOperation*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__PropertyOperation, sizeof(tt__PropertyOperation), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__PropertyOperation(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__PropertyOperation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__PropertyOperation, SOAP_TYPE_tt__PropertyOperation, sizeof(tt__PropertyOperation), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__PropertyOperation * SOAP_FMAC4 soap_new_tt__PropertyOperation(struct soap *soap, int n)
{
	tt__PropertyOperation *a = static_cast<tt__PropertyOperation *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__PropertyOperation)));
	for (tt__PropertyOperation *p = a; p && n--; ++p)
		soap_default_tt__PropertyOperation(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PropertyOperation(struct soap *soap, const tt__PropertyOperation *a, const char *tag, const char *type)
{
	if (soap_out_tt__PropertyOperation(soap, tag ? tag : "tt:PropertyOperation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__PropertyOperation * SOAP_FMAC4 soap_get_tt__PropertyOperation(struct soap *soap, tt__PropertyOperation *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__PropertyOperation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__DefoggingMode[] =
{	{ (LONG64)tt__DefoggingMode::OFF, "OFF" },
	{ (LONG64)tt__DefoggingMode::ON, "ON" },
	{ (LONG64)tt__DefoggingMode::AUTO, "AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DefoggingMode2s(struct soap *soap, tt__DefoggingMode n)
{
	const char *s = soap_code_str(soap_codes_tt__DefoggingMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingMode(struct soap *soap, const char *tag, int id, const tt__DefoggingMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__DefoggingMode), type) || soap_send(soap, soap_tt__DefoggingMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DefoggingMode(struct soap *soap, const char *s, tt__DefoggingMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__DefoggingMode, s);
	if (map)
		*a = (tt__DefoggingMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__DefoggingMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__DefoggingMode * SOAP_FMAC4 soap_in_tt__DefoggingMode(struct soap *soap, const char *tag, tt__DefoggingMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__DefoggingMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__DefoggingMode, sizeof(tt__DefoggingMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__DefoggingMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__DefoggingMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__DefoggingMode, SOAP_TYPE_tt__DefoggingMode, sizeof(tt__DefoggingMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__DefoggingMode * SOAP_FMAC4 soap_new_tt__DefoggingMode(struct soap *soap, int n)
{
	tt__DefoggingMode *a = static_cast<tt__DefoggingMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__DefoggingMode)));
	for (tt__DefoggingMode *p = a; p && n--; ++p)
		soap_default_tt__DefoggingMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DefoggingMode(struct soap *soap, const tt__DefoggingMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__DefoggingMode(soap, tag ? tag : "tt:DefoggingMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__DefoggingMode * SOAP_FMAC4 soap_get_tt__DefoggingMode(struct soap *soap, tt__DefoggingMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__DefoggingMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ToneCompensationMode[] =
{	{ (LONG64)tt__ToneCompensationMode::OFF, "OFF" },
	{ (LONG64)tt__ToneCompensationMode::ON, "ON" },
	{ (LONG64)tt__ToneCompensationMode::AUTO, "AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ToneCompensationMode2s(struct soap *soap, tt__ToneCompensationMode n)
{
	const char *s = soap_code_str(soap_codes_tt__ToneCompensationMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationMode(struct soap *soap, const char *tag, int id, const tt__ToneCompensationMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ToneCompensationMode), type) || soap_send(soap, soap_tt__ToneCompensationMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ToneCompensationMode(struct soap *soap, const char *s, tt__ToneCompensationMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ToneCompensationMode, s);
	if (map)
		*a = (tt__ToneCompensationMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__ToneCompensationMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ToneCompensationMode * SOAP_FMAC4 soap_in_tt__ToneCompensationMode(struct soap *soap, const char *tag, tt__ToneCompensationMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ToneCompensationMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ToneCompensationMode, sizeof(tt__ToneCompensationMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ToneCompensationMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ToneCompensationMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ToneCompensationMode, SOAP_TYPE_tt__ToneCompensationMode, sizeof(tt__ToneCompensationMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ToneCompensationMode * SOAP_FMAC4 soap_new_tt__ToneCompensationMode(struct soap *soap, int n)
{
	tt__ToneCompensationMode *a = static_cast<tt__ToneCompensationMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ToneCompensationMode)));
	for (tt__ToneCompensationMode *p = a; p && n--; ++p)
		soap_default_tt__ToneCompensationMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ToneCompensationMode(struct soap *soap, const tt__ToneCompensationMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__ToneCompensationMode(soap, tag ? tag : "tt:ToneCompensationMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ToneCompensationMode * SOAP_FMAC4 soap_get_tt__ToneCompensationMode(struct soap *soap, tt__ToneCompensationMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ToneCompensationMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__IrCutFilterAutoBoundaryType[] =
{	{ (LONG64)tt__IrCutFilterAutoBoundaryType::Common, "Common" },
	{ (LONG64)tt__IrCutFilterAutoBoundaryType::ToOn, "ToOn" },
	{ (LONG64)tt__IrCutFilterAutoBoundaryType::ToOff, "ToOff" },
	{ (LONG64)tt__IrCutFilterAutoBoundaryType::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IrCutFilterAutoBoundaryType2s(struct soap *soap, tt__IrCutFilterAutoBoundaryType n)
{
	const char *s = soap_code_str(soap_codes_tt__IrCutFilterAutoBoundaryType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoBoundaryType(struct soap *soap, const char *tag, int id, const tt__IrCutFilterAutoBoundaryType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__IrCutFilterAutoBoundaryType), type) || soap_send(soap, soap_tt__IrCutFilterAutoBoundaryType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IrCutFilterAutoBoundaryType(struct soap *soap, const char *s, tt__IrCutFilterAutoBoundaryType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__IrCutFilterAutoBoundaryType, s);
	if (map)
		*a = (tt__IrCutFilterAutoBoundaryType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__IrCutFilterAutoBoundaryType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoBoundaryType(struct soap *soap, const char *tag, tt__IrCutFilterAutoBoundaryType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__IrCutFilterAutoBoundaryType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__IrCutFilterAutoBoundaryType, sizeof(tt__IrCutFilterAutoBoundaryType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__IrCutFilterAutoBoundaryType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__IrCutFilterAutoBoundaryType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__IrCutFilterAutoBoundaryType, SOAP_TYPE_tt__IrCutFilterAutoBoundaryType, sizeof(tt__IrCutFilterAutoBoundaryType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_new_tt__IrCutFilterAutoBoundaryType(struct soap *soap, int n)
{
	tt__IrCutFilterAutoBoundaryType *a = static_cast<tt__IrCutFilterAutoBoundaryType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__IrCutFilterAutoBoundaryType)));
	for (tt__IrCutFilterAutoBoundaryType *p = a; p && n--; ++p)
		soap_default_tt__IrCutFilterAutoBoundaryType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IrCutFilterAutoBoundaryType(struct soap *soap, const tt__IrCutFilterAutoBoundaryType *a, const char *tag, const char *type)
{
	if (soap_out_tt__IrCutFilterAutoBoundaryType(soap, tag ? tag : "tt:IrCutFilterAutoBoundaryType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoBoundaryType(struct soap *soap, tt__IrCutFilterAutoBoundaryType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__IrCutFilterAutoBoundaryType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ImageStabilizationMode[] =
{	{ (LONG64)tt__ImageStabilizationMode::OFF, "OFF" },
	{ (LONG64)tt__ImageStabilizationMode::ON, "ON" },
	{ (LONG64)tt__ImageStabilizationMode::AUTO, "AUTO" },
	{ (LONG64)tt__ImageStabilizationMode::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ImageStabilizationMode2s(struct soap *soap, tt__ImageStabilizationMode n)
{
	const char *s = soap_code_str(soap_codes_tt__ImageStabilizationMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationMode(struct soap *soap, const char *tag, int id, const tt__ImageStabilizationMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ImageStabilizationMode), type) || soap_send(soap, soap_tt__ImageStabilizationMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ImageStabilizationMode(struct soap *soap, const char *s, tt__ImageStabilizationMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ImageStabilizationMode, s);
	if (map)
		*a = (tt__ImageStabilizationMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__ImageStabilizationMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ImageStabilizationMode * SOAP_FMAC4 soap_in_tt__ImageStabilizationMode(struct soap *soap, const char *tag, tt__ImageStabilizationMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ImageStabilizationMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ImageStabilizationMode, sizeof(tt__ImageStabilizationMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ImageStabilizationMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ImageStabilizationMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ImageStabilizationMode, SOAP_TYPE_tt__ImageStabilizationMode, sizeof(tt__ImageStabilizationMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ImageStabilizationMode * SOAP_FMAC4 soap_new_tt__ImageStabilizationMode(struct soap *soap, int n)
{
	tt__ImageStabilizationMode *a = static_cast<tt__ImageStabilizationMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ImageStabilizationMode)));
	for (tt__ImageStabilizationMode *p = a; p && n--; ++p)
		soap_default_tt__ImageStabilizationMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ImageStabilizationMode(struct soap *soap, const tt__ImageStabilizationMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__ImageStabilizationMode(soap, tag ? tag : "tt:ImageStabilizationMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ImageStabilizationMode * SOAP_FMAC4 soap_get_tt__ImageStabilizationMode(struct soap *soap, tt__ImageStabilizationMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ImageStabilizationMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__IrCutFilterMode[] =
{	{ (LONG64)tt__IrCutFilterMode::ON, "ON" },
	{ (LONG64)tt__IrCutFilterMode::OFF, "OFF" },
	{ (LONG64)tt__IrCutFilterMode::AUTO, "AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IrCutFilterMode2s(struct soap *soap, tt__IrCutFilterMode n)
{
	const char *s = soap_code_str(soap_codes_tt__IrCutFilterMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterMode(struct soap *soap, const char *tag, int id, const tt__IrCutFilterMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__IrCutFilterMode), type) || soap_send(soap, soap_tt__IrCutFilterMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IrCutFilterMode(struct soap *soap, const char *s, tt__IrCutFilterMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__IrCutFilterMode, s);
	if (map)
		*a = (tt__IrCutFilterMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__IrCutFilterMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__IrCutFilterMode * SOAP_FMAC4 soap_in_tt__IrCutFilterMode(struct soap *soap, const char *tag, tt__IrCutFilterMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__IrCutFilterMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__IrCutFilterMode, sizeof(tt__IrCutFilterMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__IrCutFilterMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__IrCutFilterMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__IrCutFilterMode, SOAP_TYPE_tt__IrCutFilterMode, sizeof(tt__IrCutFilterMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__IrCutFilterMode * SOAP_FMAC4 soap_new_tt__IrCutFilterMode(struct soap *soap, int n)
{
	tt__IrCutFilterMode *a = static_cast<tt__IrCutFilterMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__IrCutFilterMode)));
	for (tt__IrCutFilterMode *p = a; p && n--; ++p)
		soap_default_tt__IrCutFilterMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IrCutFilterMode(struct soap *soap, const tt__IrCutFilterMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__IrCutFilterMode(soap, tag ? tag : "tt:IrCutFilterMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__IrCutFilterMode * SOAP_FMAC4 soap_get_tt__IrCutFilterMode(struct soap *soap, tt__IrCutFilterMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__IrCutFilterMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__WhiteBalanceMode[] =
{	{ (LONG64)tt__WhiteBalanceMode::AUTO, "AUTO" },
	{ (LONG64)tt__WhiteBalanceMode::MANUAL, "MANUAL" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WhiteBalanceMode2s(struct soap *soap, tt__WhiteBalanceMode n)
{
	const char *s = soap_code_str(soap_codes_tt__WhiteBalanceMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceMode(struct soap *soap, const char *tag, int id, const tt__WhiteBalanceMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__WhiteBalanceMode), type) || soap_send(soap, soap_tt__WhiteBalanceMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WhiteBalanceMode(struct soap *soap, const char *s, tt__WhiteBalanceMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__WhiteBalanceMode, s);
	if (map)
		*a = (tt__WhiteBalanceMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__WhiteBalanceMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__WhiteBalanceMode * SOAP_FMAC4 soap_in_tt__WhiteBalanceMode(struct soap *soap, const char *tag, tt__WhiteBalanceMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__WhiteBalanceMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__WhiteBalanceMode, sizeof(tt__WhiteBalanceMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__WhiteBalanceMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__WhiteBalanceMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__WhiteBalanceMode, SOAP_TYPE_tt__WhiteBalanceMode, sizeof(tt__WhiteBalanceMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__WhiteBalanceMode * SOAP_FMAC4 soap_new_tt__WhiteBalanceMode(struct soap *soap, int n)
{
	tt__WhiteBalanceMode *a = static_cast<tt__WhiteBalanceMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__WhiteBalanceMode)));
	for (tt__WhiteBalanceMode *p = a; p && n--; ++p)
		soap_default_tt__WhiteBalanceMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WhiteBalanceMode(struct soap *soap, const tt__WhiteBalanceMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__WhiteBalanceMode(soap, tag ? tag : "tt:WhiteBalanceMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__WhiteBalanceMode * SOAP_FMAC4 soap_get_tt__WhiteBalanceMode(struct soap *soap, tt__WhiteBalanceMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__WhiteBalanceMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Enabled[] =
{	{ (LONG64)tt__Enabled::ENABLED, "ENABLED" },
	{ (LONG64)tt__Enabled::DISABLED, "DISABLED" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Enabled2s(struct soap *soap, tt__Enabled n)
{
	const char *s = soap_code_str(soap_codes_tt__Enabled, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Enabled(struct soap *soap, const char *tag, int id, const tt__Enabled *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Enabled), type) || soap_send(soap, soap_tt__Enabled2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Enabled(struct soap *soap, const char *s, tt__Enabled *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Enabled, s);
	if (map)
		*a = (tt__Enabled)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__Enabled)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Enabled * SOAP_FMAC4 soap_in_tt__Enabled(struct soap *soap, const char *tag, tt__Enabled *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Enabled*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Enabled, sizeof(tt__Enabled), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Enabled(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Enabled *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Enabled, SOAP_TYPE_tt__Enabled, sizeof(tt__Enabled), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Enabled * SOAP_FMAC4 soap_new_tt__Enabled(struct soap *soap, int n)
{
	tt__Enabled *a = static_cast<tt__Enabled *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Enabled)));
	for (tt__Enabled *p = a; p && n--; ++p)
		soap_default_tt__Enabled(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Enabled(struct soap *soap, const tt__Enabled *a, const char *tag, const char *type)
{
	if (soap_out_tt__Enabled(soap, tag ? tag : "tt:Enabled", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Enabled * SOAP_FMAC4 soap_get_tt__Enabled(struct soap *soap, tt__Enabled *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Enabled(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ExposureMode[] =
{	{ (LONG64)tt__ExposureMode::AUTO, "AUTO" },
	{ (LONG64)tt__ExposureMode::MANUAL, "MANUAL" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposureMode2s(struct soap *soap, tt__ExposureMode n)
{
	const char *s = soap_code_str(soap_codes_tt__ExposureMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureMode(struct soap *soap, const char *tag, int id, const tt__ExposureMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ExposureMode), type) || soap_send(soap, soap_tt__ExposureMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposureMode(struct soap *soap, const char *s, tt__ExposureMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ExposureMode, s);
	if (map)
		*a = (tt__ExposureMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__ExposureMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ExposureMode * SOAP_FMAC4 soap_in_tt__ExposureMode(struct soap *soap, const char *tag, tt__ExposureMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ExposureMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ExposureMode, sizeof(tt__ExposureMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ExposureMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ExposureMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ExposureMode, SOAP_TYPE_tt__ExposureMode, sizeof(tt__ExposureMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ExposureMode * SOAP_FMAC4 soap_new_tt__ExposureMode(struct soap *soap, int n)
{
	tt__ExposureMode *a = static_cast<tt__ExposureMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ExposureMode)));
	for (tt__ExposureMode *p = a; p && n--; ++p)
		soap_default_tt__ExposureMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposureMode(struct soap *soap, const tt__ExposureMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__ExposureMode(soap, tag ? tag : "tt:ExposureMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ExposureMode * SOAP_FMAC4 soap_get_tt__ExposureMode(struct soap *soap, tt__ExposureMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ExposureMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ExposurePriority[] =
{	{ (LONG64)tt__ExposurePriority::LowNoise, "LowNoise" },
	{ (LONG64)tt__ExposurePriority::FrameRate, "FrameRate" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposurePriority2s(struct soap *soap, tt__ExposurePriority n)
{
	const char *s = soap_code_str(soap_codes_tt__ExposurePriority, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposurePriority(struct soap *soap, const char *tag, int id, const tt__ExposurePriority *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ExposurePriority), type) || soap_send(soap, soap_tt__ExposurePriority2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposurePriority(struct soap *soap, const char *s, tt__ExposurePriority *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ExposurePriority, s);
	if (map)
		*a = (tt__ExposurePriority)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__ExposurePriority)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ExposurePriority * SOAP_FMAC4 soap_in_tt__ExposurePriority(struct soap *soap, const char *tag, tt__ExposurePriority *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ExposurePriority*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ExposurePriority, sizeof(tt__ExposurePriority), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ExposurePriority(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ExposurePriority *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ExposurePriority, SOAP_TYPE_tt__ExposurePriority, sizeof(tt__ExposurePriority), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ExposurePriority * SOAP_FMAC4 soap_new_tt__ExposurePriority(struct soap *soap, int n)
{
	tt__ExposurePriority *a = static_cast<tt__ExposurePriority *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ExposurePriority)));
	for (tt__ExposurePriority *p = a; p && n--; ++p)
		soap_default_tt__ExposurePriority(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposurePriority(struct soap *soap, const tt__ExposurePriority *a, const char *tag, const char *type)
{
	if (soap_out_tt__ExposurePriority(soap, tag ? tag : "tt:ExposurePriority", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ExposurePriority * SOAP_FMAC4 soap_get_tt__ExposurePriority(struct soap *soap, tt__ExposurePriority *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ExposurePriority(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__BacklightCompensationMode[] =
{	{ (LONG64)tt__BacklightCompensationMode::OFF, "OFF" },
	{ (LONG64)tt__BacklightCompensationMode::ON, "ON" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__BacklightCompensationMode2s(struct soap *soap, tt__BacklightCompensationMode n)
{
	const char *s = soap_code_str(soap_codes_tt__BacklightCompensationMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationMode(struct soap *soap, const char *tag, int id, const tt__BacklightCompensationMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__BacklightCompensationMode), type) || soap_send(soap, soap_tt__BacklightCompensationMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__BacklightCompensationMode(struct soap *soap, const char *s, tt__BacklightCompensationMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__BacklightCompensationMode, s);
	if (map)
		*a = (tt__BacklightCompensationMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__BacklightCompensationMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__BacklightCompensationMode * SOAP_FMAC4 soap_in_tt__BacklightCompensationMode(struct soap *soap, const char *tag, tt__BacklightCompensationMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__BacklightCompensationMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__BacklightCompensationMode, sizeof(tt__BacklightCompensationMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__BacklightCompensationMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__BacklightCompensationMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__BacklightCompensationMode, SOAP_TYPE_tt__BacklightCompensationMode, sizeof(tt__BacklightCompensationMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__BacklightCompensationMode * SOAP_FMAC4 soap_new_tt__BacklightCompensationMode(struct soap *soap, int n)
{
	tt__BacklightCompensationMode *a = static_cast<tt__BacklightCompensationMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__BacklightCompensationMode)));
	for (tt__BacklightCompensationMode *p = a; p && n--; ++p)
		soap_default_tt__BacklightCompensationMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__BacklightCompensationMode(struct soap *soap, const tt__BacklightCompensationMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__BacklightCompensationMode(soap, tag ? tag : "tt:BacklightCompensationMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__BacklightCompensationMode * SOAP_FMAC4 soap_get_tt__BacklightCompensationMode(struct soap *soap, tt__BacklightCompensationMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__BacklightCompensationMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__WideDynamicMode[] =
{	{ (LONG64)tt__WideDynamicMode::OFF, "OFF" },
	{ (LONG64)tt__WideDynamicMode::ON, "ON" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WideDynamicMode2s(struct soap *soap, tt__WideDynamicMode n)
{
	const char *s = soap_code_str(soap_codes_tt__WideDynamicMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicMode(struct soap *soap, const char *tag, int id, const tt__WideDynamicMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__WideDynamicMode), type) || soap_send(soap, soap_tt__WideDynamicMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WideDynamicMode(struct soap *soap, const char *s, tt__WideDynamicMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__WideDynamicMode, s);
	if (map)
		*a = (tt__WideDynamicMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__WideDynamicMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__WideDynamicMode * SOAP_FMAC4 soap_in_tt__WideDynamicMode(struct soap *soap, const char *tag, tt__WideDynamicMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__WideDynamicMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__WideDynamicMode, sizeof(tt__WideDynamicMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__WideDynamicMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__WideDynamicMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__WideDynamicMode, SOAP_TYPE_tt__WideDynamicMode, sizeof(tt__WideDynamicMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__WideDynamicMode * SOAP_FMAC4 soap_new_tt__WideDynamicMode(struct soap *soap, int n)
{
	tt__WideDynamicMode *a = static_cast<tt__WideDynamicMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__WideDynamicMode)));
	for (tt__WideDynamicMode *p = a; p && n--; ++p)
		soap_default_tt__WideDynamicMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WideDynamicMode(struct soap *soap, const tt__WideDynamicMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__WideDynamicMode(soap, tag ? tag : "tt:WideDynamicMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__WideDynamicMode * SOAP_FMAC4 soap_get_tt__WideDynamicMode(struct soap *soap, tt__WideDynamicMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__WideDynamicMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__AutoFocusMode[] =
{	{ (LONG64)tt__AutoFocusMode::AUTO, "AUTO" },
	{ (LONG64)tt__AutoFocusMode::MANUAL, "MANUAL" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AutoFocusMode2s(struct soap *soap, tt__AutoFocusMode n)
{
	const char *s = soap_code_str(soap_codes_tt__AutoFocusMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AutoFocusMode(struct soap *soap, const char *tag, int id, const tt__AutoFocusMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__AutoFocusMode), type) || soap_send(soap, soap_tt__AutoFocusMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AutoFocusMode(struct soap *soap, const char *s, tt__AutoFocusMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__AutoFocusMode, s);
	if (map)
		*a = (tt__AutoFocusMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__AutoFocusMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__AutoFocusMode * SOAP_FMAC4 soap_in_tt__AutoFocusMode(struct soap *soap, const char *tag, tt__AutoFocusMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__AutoFocusMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__AutoFocusMode, sizeof(tt__AutoFocusMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__AutoFocusMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__AutoFocusMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__AutoFocusMode, SOAP_TYPE_tt__AutoFocusMode, sizeof(tt__AutoFocusMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__AutoFocusMode * SOAP_FMAC4 soap_new_tt__AutoFocusMode(struct soap *soap, int n)
{
	tt__AutoFocusMode *a = static_cast<tt__AutoFocusMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__AutoFocusMode)));
	for (tt__AutoFocusMode *p = a; p && n--; ++p)
		soap_default_tt__AutoFocusMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AutoFocusMode(struct soap *soap, const tt__AutoFocusMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__AutoFocusMode(soap, tag ? tag : "tt:AutoFocusMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__AutoFocusMode * SOAP_FMAC4 soap_get_tt__AutoFocusMode(struct soap *soap, tt__AutoFocusMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__AutoFocusMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__PTZPresetTourOperation[] =
{	{ (LONG64)tt__PTZPresetTourOperation::Start, "Start" },
	{ (LONG64)tt__PTZPresetTourOperation::Stop, "Stop" },
	{ (LONG64)tt__PTZPresetTourOperation::Pause, "Pause" },
	{ (LONG64)tt__PTZPresetTourOperation::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourOperation2s(struct soap *soap, tt__PTZPresetTourOperation n)
{
	const char *s = soap_code_str(soap_codes_tt__PTZPresetTourOperation, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation(struct soap *soap, const char *tag, int id, const tt__PTZPresetTourOperation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__PTZPresetTourOperation), type) || soap_send(soap, soap_tt__PTZPresetTourOperation2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourOperation(struct soap *soap, const char *s, tt__PTZPresetTourOperation *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__PTZPresetTourOperation, s);
	if (map)
		*a = (tt__PTZPresetTourOperation)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__PTZPresetTourOperation)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__PTZPresetTourOperation * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation(struct soap *soap, const char *tag, tt__PTZPresetTourOperation *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__PTZPresetTourOperation*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__PTZPresetTourOperation, sizeof(tt__PTZPresetTourOperation), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__PTZPresetTourOperation(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__PTZPresetTourOperation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__PTZPresetTourOperation, SOAP_TYPE_tt__PTZPresetTourOperation, sizeof(tt__PTZPresetTourOperation), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__PTZPresetTourOperation * SOAP_FMAC4 soap_new_tt__PTZPresetTourOperation(struct soap *soap, int n)
{
	tt__PTZPresetTourOperation *a = static_cast<tt__PTZPresetTourOperation *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__PTZPresetTourOperation)));
	for (tt__PTZPresetTourOperation *p = a; p && n--; ++p)
		soap_default_tt__PTZPresetTourOperation(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourOperation(struct soap *soap, const tt__PTZPresetTourOperation *a, const char *tag, const char *type)
{
	if (soap_out_tt__PTZPresetTourOperation(soap, tag ? tag : "tt:PTZPresetTourOperation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__PTZPresetTourOperation * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation(struct soap *soap, tt__PTZPresetTourOperation *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__PTZPresetTourOperation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__PTZPresetTourDirection[] =
{	{ (LONG64)tt__PTZPresetTourDirection::Forward, "Forward" },
	{ (LONG64)tt__PTZPresetTourDirection::Backward, "Backward" },
	{ (LONG64)tt__PTZPresetTourDirection::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourDirection2s(struct soap *soap, tt__PTZPresetTourDirection n)
{
	const char *s = soap_code_str(soap_codes_tt__PTZPresetTourDirection, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection(struct soap *soap, const char *tag, int id, const tt__PTZPresetTourDirection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__PTZPresetTourDirection), type) || soap_send(soap, soap_tt__PTZPresetTourDirection2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourDirection(struct soap *soap, const char *s, tt__PTZPresetTourDirection *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__PTZPresetTourDirection, s);
	if (map)
		*a = (tt__PTZPresetTourDirection)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__PTZPresetTourDirection)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__PTZPresetTourDirection * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection(struct soap *soap, const char *tag, tt__PTZPresetTourDirection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__PTZPresetTourDirection*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__PTZPresetTourDirection, sizeof(tt__PTZPresetTourDirection), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__PTZPresetTourDirection(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__PTZPresetTourDirection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__PTZPresetTourDirection, SOAP_TYPE_tt__PTZPresetTourDirection, sizeof(tt__PTZPresetTourDirection), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__PTZPresetTourDirection * SOAP_FMAC4 soap_new_tt__PTZPresetTourDirection(struct soap *soap, int n)
{
	tt__PTZPresetTourDirection *a = static_cast<tt__PTZPresetTourDirection *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__PTZPresetTourDirection)));
	for (tt__PTZPresetTourDirection *p = a; p && n--; ++p)
		soap_default_tt__PTZPresetTourDirection(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourDirection(struct soap *soap, const tt__PTZPresetTourDirection *a, const char *tag, const char *type)
{
	if (soap_out_tt__PTZPresetTourDirection(soap, tag ? tag : "tt:PTZPresetTourDirection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__PTZPresetTourDirection * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection(struct soap *soap, tt__PTZPresetTourDirection *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__PTZPresetTourDirection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__PTZPresetTourState[] =
{	{ (LONG64)tt__PTZPresetTourState::Idle, "Idle" },
	{ (LONG64)tt__PTZPresetTourState::Touring, "Touring" },
	{ (LONG64)tt__PTZPresetTourState::Paused, "Paused" },
	{ (LONG64)tt__PTZPresetTourState::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourState2s(struct soap *soap, tt__PTZPresetTourState n)
{
	const char *s = soap_code_str(soap_codes_tt__PTZPresetTourState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState(struct soap *soap, const char *tag, int id, const tt__PTZPresetTourState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__PTZPresetTourState), type) || soap_send(soap, soap_tt__PTZPresetTourState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourState(struct soap *soap, const char *s, tt__PTZPresetTourState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__PTZPresetTourState, s);
	if (map)
		*a = (tt__PTZPresetTourState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__PTZPresetTourState)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__PTZPresetTourState * SOAP_FMAC4 soap_in_tt__PTZPresetTourState(struct soap *soap, const char *tag, tt__PTZPresetTourState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__PTZPresetTourState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__PTZPresetTourState, sizeof(tt__PTZPresetTourState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__PTZPresetTourState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__PTZPresetTourState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__PTZPresetTourState, SOAP_TYPE_tt__PTZPresetTourState, sizeof(tt__PTZPresetTourState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__PTZPresetTourState * SOAP_FMAC4 soap_new_tt__PTZPresetTourState(struct soap *soap, int n)
{
	tt__PTZPresetTourState *a = static_cast<tt__PTZPresetTourState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__PTZPresetTourState)));
	for (tt__PTZPresetTourState *p = a; p && n--; ++p)
		soap_default_tt__PTZPresetTourState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourState(struct soap *soap, const tt__PTZPresetTourState *a, const char *tag, const char *type)
{
	if (soap_out_tt__PTZPresetTourState(soap, tag ? tag : "tt:PTZPresetTourState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__PTZPresetTourState * SOAP_FMAC4 soap_get_tt__PTZPresetTourState(struct soap *soap, tt__PTZPresetTourState *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__PTZPresetTourState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ReverseMode[] =
{	{ (LONG64)tt__ReverseMode::OFF, "OFF" },
	{ (LONG64)tt__ReverseMode::ON, "ON" },
	{ (LONG64)tt__ReverseMode::AUTO, "AUTO" },
	{ (LONG64)tt__ReverseMode::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReverseMode2s(struct soap *soap, tt__ReverseMode n)
{
	const char *s = soap_code_str(soap_codes_tt__ReverseMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode(struct soap *soap, const char *tag, int id, const tt__ReverseMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ReverseMode), type) || soap_send(soap, soap_tt__ReverseMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReverseMode(struct soap *soap, const char *s, tt__ReverseMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ReverseMode, s);
	if (map)
		*a = (tt__ReverseMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__ReverseMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ReverseMode * SOAP_FMAC4 soap_in_tt__ReverseMode(struct soap *soap, const char *tag, tt__ReverseMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ReverseMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ReverseMode, sizeof(tt__ReverseMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ReverseMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ReverseMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ReverseMode, SOAP_TYPE_tt__ReverseMode, sizeof(tt__ReverseMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ReverseMode * SOAP_FMAC4 soap_new_tt__ReverseMode(struct soap *soap, int n)
{
	tt__ReverseMode *a = static_cast<tt__ReverseMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ReverseMode)));
	for (tt__ReverseMode *p = a; p && n--; ++p)
		soap_default_tt__ReverseMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReverseMode(struct soap *soap, const tt__ReverseMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__ReverseMode(soap, tag ? tag : "tt:ReverseMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ReverseMode * SOAP_FMAC4 soap_get_tt__ReverseMode(struct soap *soap, tt__ReverseMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ReverseMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__EFlipMode[] =
{	{ (LONG64)tt__EFlipMode::OFF, "OFF" },
	{ (LONG64)tt__EFlipMode::ON, "ON" },
	{ (LONG64)tt__EFlipMode::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__EFlipMode2s(struct soap *soap, tt__EFlipMode n)
{
	const char *s = soap_code_str(soap_codes_tt__EFlipMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode(struct soap *soap, const char *tag, int id, const tt__EFlipMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__EFlipMode), type) || soap_send(soap, soap_tt__EFlipMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__EFlipMode(struct soap *soap, const char *s, tt__EFlipMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__EFlipMode, s);
	if (map)
		*a = (tt__EFlipMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__EFlipMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__EFlipMode * SOAP_FMAC4 soap_in_tt__EFlipMode(struct soap *soap, const char *tag, tt__EFlipMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__EFlipMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__EFlipMode, sizeof(tt__EFlipMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__EFlipMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__EFlipMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__EFlipMode, SOAP_TYPE_tt__EFlipMode, sizeof(tt__EFlipMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__EFlipMode * SOAP_FMAC4 soap_new_tt__EFlipMode(struct soap *soap, int n)
{
	tt__EFlipMode *a = static_cast<tt__EFlipMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__EFlipMode)));
	for (tt__EFlipMode *p = a; p && n--; ++p)
		soap_default_tt__EFlipMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__EFlipMode(struct soap *soap, const tt__EFlipMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__EFlipMode(soap, tag ? tag : "tt:EFlipMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__EFlipMode * SOAP_FMAC4 soap_get_tt__EFlipMode(struct soap *soap, tt__EFlipMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__EFlipMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__DigitalIdleState[] =
{	{ (LONG64)tt__DigitalIdleState::closed, "closed" },
	{ (LONG64)tt__DigitalIdleState::open, "open" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DigitalIdleState2s(struct soap *soap, tt__DigitalIdleState n)
{
	const char *s = soap_code_str(soap_codes_tt__DigitalIdleState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DigitalIdleState(struct soap *soap, const char *tag, int id, const tt__DigitalIdleState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__DigitalIdleState), type) || soap_send(soap, soap_tt__DigitalIdleState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DigitalIdleState(struct soap *soap, const char *s, tt__DigitalIdleState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__DigitalIdleState, s);
	if (map)
		*a = (tt__DigitalIdleState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__DigitalIdleState)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__DigitalIdleState * SOAP_FMAC4 soap_in_tt__DigitalIdleState(struct soap *soap, const char *tag, tt__DigitalIdleState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__DigitalIdleState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__DigitalIdleState, sizeof(tt__DigitalIdleState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__DigitalIdleState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__DigitalIdleState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__DigitalIdleState, SOAP_TYPE_tt__DigitalIdleState, sizeof(tt__DigitalIdleState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__DigitalIdleState * SOAP_FMAC4 soap_new_tt__DigitalIdleState(struct soap *soap, int n)
{
	tt__DigitalIdleState *a = static_cast<tt__DigitalIdleState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__DigitalIdleState)));
	for (tt__DigitalIdleState *p = a; p && n--; ++p)
		soap_default_tt__DigitalIdleState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DigitalIdleState(struct soap *soap, const tt__DigitalIdleState *a, const char *tag, const char *type)
{
	if (soap_out_tt__DigitalIdleState(soap, tag ? tag : "tt:DigitalIdleState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__DigitalIdleState * SOAP_FMAC4 soap_get_tt__DigitalIdleState(struct soap *soap, tt__DigitalIdleState *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__DigitalIdleState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__RelayMode[] =
{	{ (LONG64)tt__RelayMode::Monostable, "Monostable" },
	{ (LONG64)tt__RelayMode::Bistable, "Bistable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayMode2s(struct soap *soap, tt__RelayMode n)
{
	const char *s = soap_code_str(soap_codes_tt__RelayMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayMode(struct soap *soap, const char *tag, int id, const tt__RelayMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__RelayMode), type) || soap_send(soap, soap_tt__RelayMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayMode(struct soap *soap, const char *s, tt__RelayMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__RelayMode, s);
	if (map)
		*a = (tt__RelayMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__RelayMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__RelayMode * SOAP_FMAC4 soap_in_tt__RelayMode(struct soap *soap, const char *tag, tt__RelayMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__RelayMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__RelayMode, sizeof(tt__RelayMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__RelayMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__RelayMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__RelayMode, SOAP_TYPE_tt__RelayMode, sizeof(tt__RelayMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__RelayMode * SOAP_FMAC4 soap_new_tt__RelayMode(struct soap *soap, int n)
{
	tt__RelayMode *a = static_cast<tt__RelayMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__RelayMode)));
	for (tt__RelayMode *p = a; p && n--; ++p)
		soap_default_tt__RelayMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayMode(struct soap *soap, const tt__RelayMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__RelayMode(soap, tag ? tag : "tt:RelayMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__RelayMode * SOAP_FMAC4 soap_get_tt__RelayMode(struct soap *soap, tt__RelayMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__RelayMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__RelayIdleState[] =
{	{ (LONG64)tt__RelayIdleState::closed, "closed" },
	{ (LONG64)tt__RelayIdleState::open, "open" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayIdleState2s(struct soap *soap, tt__RelayIdleState n)
{
	const char *s = soap_code_str(soap_codes_tt__RelayIdleState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayIdleState(struct soap *soap, const char *tag, int id, const tt__RelayIdleState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__RelayIdleState), type) || soap_send(soap, soap_tt__RelayIdleState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayIdleState(struct soap *soap, const char *s, tt__RelayIdleState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__RelayIdleState, s);
	if (map)
		*a = (tt__RelayIdleState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__RelayIdleState)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__RelayIdleState * SOAP_FMAC4 soap_in_tt__RelayIdleState(struct soap *soap, const char *tag, tt__RelayIdleState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__RelayIdleState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__RelayIdleState, sizeof(tt__RelayIdleState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__RelayIdleState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__RelayIdleState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__RelayIdleState, SOAP_TYPE_tt__RelayIdleState, sizeof(tt__RelayIdleState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__RelayIdleState * SOAP_FMAC4 soap_new_tt__RelayIdleState(struct soap *soap, int n)
{
	tt__RelayIdleState *a = static_cast<tt__RelayIdleState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__RelayIdleState)));
	for (tt__RelayIdleState *p = a; p && n--; ++p)
		soap_default_tt__RelayIdleState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayIdleState(struct soap *soap, const tt__RelayIdleState *a, const char *tag, const char *type)
{
	if (soap_out_tt__RelayIdleState(soap, tag ? tag : "tt:RelayIdleState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__RelayIdleState * SOAP_FMAC4 soap_get_tt__RelayIdleState(struct soap *soap, tt__RelayIdleState *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__RelayIdleState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__RelayLogicalState[] =
{	{ (LONG64)tt__RelayLogicalState::active, "active" },
	{ (LONG64)tt__RelayLogicalState::inactive, "inactive" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayLogicalState2s(struct soap *soap, tt__RelayLogicalState n)
{
	const char *s = soap_code_str(soap_codes_tt__RelayLogicalState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayLogicalState(struct soap *soap, const char *tag, int id, const tt__RelayLogicalState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__RelayLogicalState), type) || soap_send(soap, soap_tt__RelayLogicalState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayLogicalState(struct soap *soap, const char *s, tt__RelayLogicalState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__RelayLogicalState, s);
	if (map)
		*a = (tt__RelayLogicalState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__RelayLogicalState)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__RelayLogicalState * SOAP_FMAC4 soap_in_tt__RelayLogicalState(struct soap *soap, const char *tag, tt__RelayLogicalState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__RelayLogicalState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__RelayLogicalState, sizeof(tt__RelayLogicalState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__RelayLogicalState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__RelayLogicalState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__RelayLogicalState, SOAP_TYPE_tt__RelayLogicalState, sizeof(tt__RelayLogicalState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__RelayLogicalState * SOAP_FMAC4 soap_new_tt__RelayLogicalState(struct soap *soap, int n)
{
	tt__RelayLogicalState *a = static_cast<tt__RelayLogicalState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__RelayLogicalState)));
	for (tt__RelayLogicalState *p = a; p && n--; ++p)
		soap_default_tt__RelayLogicalState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayLogicalState(struct soap *soap, const tt__RelayLogicalState *a, const char *tag, const char *type)
{
	if (soap_out_tt__RelayLogicalState(soap, tag ? tag : "tt:RelayLogicalState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__RelayLogicalState * SOAP_FMAC4 soap_get_tt__RelayLogicalState(struct soap *soap, tt__RelayLogicalState *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__RelayLogicalState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__UserLevel[] =
{	{ (LONG64)tt__UserLevel::Administrator, "Administrator" },
	{ (LONG64)tt__UserLevel::Operator, "Operator" },
	{ (LONG64)tt__UserLevel::User, "User" },
	{ (LONG64)tt__UserLevel::Anonymous, "Anonymous" },
	{ (LONG64)tt__UserLevel::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__UserLevel2s(struct soap *soap, tt__UserLevel n)
{
	const char *s = soap_code_str(soap_codes_tt__UserLevel, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserLevel(struct soap *soap, const char *tag, int id, const tt__UserLevel *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__UserLevel), type) || soap_send(soap, soap_tt__UserLevel2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__UserLevel(struct soap *soap, const char *s, tt__UserLevel *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__UserLevel, s);
	if (map)
		*a = (tt__UserLevel)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (tt__UserLevel)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__UserLevel * SOAP_FMAC4 soap_in_tt__UserLevel(struct soap *soap, const char *tag, tt__UserLevel *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__UserLevel*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__UserLevel, sizeof(tt__UserLevel), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__UserLevel(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__UserLevel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__UserLevel, SOAP_TYPE_tt__UserLevel, sizeof(tt__UserLevel), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__UserLevel * SOAP_FMAC4 soap_new_tt__UserLevel(struct soap *soap, int n)
{
	tt__UserLevel *a = static_cast<tt__UserLevel *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__UserLevel)));
	for (tt__UserLevel *p = a; p && n--; ++p)
		soap_default_tt__UserLevel(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__UserLevel(struct soap *soap, const tt__UserLevel *a, const char *tag, const char *type)
{
	if (soap_out_tt__UserLevel(soap, tag ? tag : "tt:UserLevel", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__UserLevel * SOAP_FMAC4 soap_get_tt__UserLevel(struct soap *soap, tt__UserLevel *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__UserLevel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__SetDateTimeType[] =
{	{ (LONG64)tt__SetDateTimeType::Manual, "Manual" },
	{ (LONG64)tt__SetDateTimeType::NTP, "NTP" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SetDateTimeType2s(struct soap *soap, tt__SetDateTimeType n)
{
	const char *s = soap_code_str(soap_codes_tt__SetDateTimeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SetDateTimeType(struct soap *soap, const char *tag, int id, const tt__SetDateTimeType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__SetDateTimeType), type) || soap_send(soap, soap_tt__SetDateTimeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SetDateTimeType(struct soap *soap, const char *s, tt__SetDateTimeType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__SetDateTimeType, s);
	if (map)
		*a = (tt__SetDateTimeType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__SetDateTimeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__SetDateTimeType * SOAP_FMAC4 soap_in_tt__SetDateTimeType(struct soap *soap, const char *tag, tt__SetDateTimeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__SetDateTimeType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__SetDateTimeType, sizeof(tt__SetDateTimeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__SetDateTimeType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__SetDateTimeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__SetDateTimeType, SOAP_TYPE_tt__SetDateTimeType, sizeof(tt__SetDateTimeType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__SetDateTimeType * SOAP_FMAC4 soap_new_tt__SetDateTimeType(struct soap *soap, int n)
{
	tt__SetDateTimeType *a = static_cast<tt__SetDateTimeType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__SetDateTimeType)));
	for (tt__SetDateTimeType *p = a; p && n--; ++p)
		soap_default_tt__SetDateTimeType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SetDateTimeType(struct soap *soap, const tt__SetDateTimeType *a, const char *tag, const char *type)
{
	if (soap_out_tt__SetDateTimeType(soap, tag ? tag : "tt:SetDateTimeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__SetDateTimeType * SOAP_FMAC4 soap_get_tt__SetDateTimeType(struct soap *soap, tt__SetDateTimeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__SetDateTimeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__FactoryDefaultType[] =
{	{ (LONG64)tt__FactoryDefaultType::Hard, "Hard" },
	{ (LONG64)tt__FactoryDefaultType::Soft, "Soft" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__FactoryDefaultType2s(struct soap *soap, tt__FactoryDefaultType n)
{
	const char *s = soap_code_str(soap_codes_tt__FactoryDefaultType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FactoryDefaultType(struct soap *soap, const char *tag, int id, const tt__FactoryDefaultType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__FactoryDefaultType), type) || soap_send(soap, soap_tt__FactoryDefaultType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__FactoryDefaultType(struct soap *soap, const char *s, tt__FactoryDefaultType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__FactoryDefaultType, s);
	if (map)
		*a = (tt__FactoryDefaultType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__FactoryDefaultType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__FactoryDefaultType * SOAP_FMAC4 soap_in_tt__FactoryDefaultType(struct soap *soap, const char *tag, tt__FactoryDefaultType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__FactoryDefaultType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__FactoryDefaultType, sizeof(tt__FactoryDefaultType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__FactoryDefaultType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__FactoryDefaultType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__FactoryDefaultType, SOAP_TYPE_tt__FactoryDefaultType, sizeof(tt__FactoryDefaultType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__FactoryDefaultType * SOAP_FMAC4 soap_new_tt__FactoryDefaultType(struct soap *soap, int n)
{
	tt__FactoryDefaultType *a = static_cast<tt__FactoryDefaultType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__FactoryDefaultType)));
	for (tt__FactoryDefaultType *p = a; p && n--; ++p)
		soap_default_tt__FactoryDefaultType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__FactoryDefaultType(struct soap *soap, const tt__FactoryDefaultType *a, const char *tag, const char *type)
{
	if (soap_out_tt__FactoryDefaultType(soap, tag ? tag : "tt:FactoryDefaultType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__FactoryDefaultType * SOAP_FMAC4 soap_get_tt__FactoryDefaultType(struct soap *soap, tt__FactoryDefaultType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__FactoryDefaultType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__SystemLogType[] =
{	{ (LONG64)tt__SystemLogType::System, "System" },
	{ (LONG64)tt__SystemLogType::Access, "Access" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SystemLogType2s(struct soap *soap, tt__SystemLogType n)
{
	const char *s = soap_code_str(soap_codes_tt__SystemLogType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogType(struct soap *soap, const char *tag, int id, const tt__SystemLogType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__SystemLogType), type) || soap_send(soap, soap_tt__SystemLogType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SystemLogType(struct soap *soap, const char *s, tt__SystemLogType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__SystemLogType, s);
	if (map)
		*a = (tt__SystemLogType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__SystemLogType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__SystemLogType * SOAP_FMAC4 soap_in_tt__SystemLogType(struct soap *soap, const char *tag, tt__SystemLogType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__SystemLogType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__SystemLogType, sizeof(tt__SystemLogType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__SystemLogType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__SystemLogType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__SystemLogType, SOAP_TYPE_tt__SystemLogType, sizeof(tt__SystemLogType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__SystemLogType * SOAP_FMAC4 soap_new_tt__SystemLogType(struct soap *soap, int n)
{
	tt__SystemLogType *a = static_cast<tt__SystemLogType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__SystemLogType)));
	for (tt__SystemLogType *p = a; p && n--; ++p)
		soap_default_tt__SystemLogType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SystemLogType(struct soap *soap, const tt__SystemLogType *a, const char *tag, const char *type)
{
	if (soap_out_tt__SystemLogType(soap, tag ? tag : "tt:SystemLogType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__SystemLogType * SOAP_FMAC4 soap_get_tt__SystemLogType(struct soap *soap, tt__SystemLogType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__SystemLogType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__CapabilityCategory[] =
{	{ (LONG64)tt__CapabilityCategory::All, "All" },
	{ (LONG64)tt__CapabilityCategory::Analytics, "Analytics" },
	{ (LONG64)tt__CapabilityCategory::Device, "Device" },
	{ (LONG64)tt__CapabilityCategory::Events, "Events" },
	{ (LONG64)tt__CapabilityCategory::Imaging, "Imaging" },
	{ (LONG64)tt__CapabilityCategory::Media, "Media" },
	{ (LONG64)tt__CapabilityCategory::PTZ, "PTZ" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__CapabilityCategory2s(struct soap *soap, tt__CapabilityCategory n)
{
	const char *s = soap_code_str(soap_codes_tt__CapabilityCategory, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilityCategory(struct soap *soap, const char *tag, int id, const tt__CapabilityCategory *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__CapabilityCategory), type) || soap_send(soap, soap_tt__CapabilityCategory2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__CapabilityCategory(struct soap *soap, const char *s, tt__CapabilityCategory *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__CapabilityCategory, s);
	if (map)
		*a = (tt__CapabilityCategory)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 6)
			return soap->error = SOAP_TYPE;
		*a = (tt__CapabilityCategory)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__CapabilityCategory * SOAP_FMAC4 soap_in_tt__CapabilityCategory(struct soap *soap, const char *tag, tt__CapabilityCategory *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__CapabilityCategory*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__CapabilityCategory, sizeof(tt__CapabilityCategory), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__CapabilityCategory(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__CapabilityCategory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__CapabilityCategory, SOAP_TYPE_tt__CapabilityCategory, sizeof(tt__CapabilityCategory), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__CapabilityCategory * SOAP_FMAC4 soap_new_tt__CapabilityCategory(struct soap *soap, int n)
{
	tt__CapabilityCategory *a = static_cast<tt__CapabilityCategory *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__CapabilityCategory)));
	for (tt__CapabilityCategory *p = a; p && n--; ++p)
		soap_default_tt__CapabilityCategory(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__CapabilityCategory(struct soap *soap, const tt__CapabilityCategory *a, const char *tag, const char *type)
{
	if (soap_out_tt__CapabilityCategory(soap, tag ? tag : "tt:CapabilityCategory", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__CapabilityCategory * SOAP_FMAC4 soap_get_tt__CapabilityCategory(struct soap *soap, tt__CapabilityCategory *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__CapabilityCategory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Dot11AuthAndMangementSuite[] =
{	{ (LONG64)tt__Dot11AuthAndMangementSuite::None, "None" },
	{ (LONG64)tt__Dot11AuthAndMangementSuite::Dot1X, "Dot1X" },
	{ (LONG64)tt__Dot11AuthAndMangementSuite::PSK, "PSK" },
	{ (LONG64)tt__Dot11AuthAndMangementSuite::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11AuthAndMangementSuite2s(struct soap *soap, tt__Dot11AuthAndMangementSuite n)
{
	const char *s = soap_code_str(soap_codes_tt__Dot11AuthAndMangementSuite, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AuthAndMangementSuite(struct soap *soap, const char *tag, int id, const tt__Dot11AuthAndMangementSuite *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Dot11AuthAndMangementSuite), type) || soap_send(soap, soap_tt__Dot11AuthAndMangementSuite2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11AuthAndMangementSuite(struct soap *soap, const char *s, tt__Dot11AuthAndMangementSuite *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Dot11AuthAndMangementSuite, s);
	if (map)
		*a = (tt__Dot11AuthAndMangementSuite)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__Dot11AuthAndMangementSuite)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_in_tt__Dot11AuthAndMangementSuite(struct soap *soap, const char *tag, tt__Dot11AuthAndMangementSuite *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Dot11AuthAndMangementSuite*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Dot11AuthAndMangementSuite, sizeof(tt__Dot11AuthAndMangementSuite), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Dot11AuthAndMangementSuite(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Dot11AuthAndMangementSuite *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Dot11AuthAndMangementSuite, SOAP_TYPE_tt__Dot11AuthAndMangementSuite, sizeof(tt__Dot11AuthAndMangementSuite), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_new_tt__Dot11AuthAndMangementSuite(struct soap *soap, int n)
{
	tt__Dot11AuthAndMangementSuite *a = static_cast<tt__Dot11AuthAndMangementSuite *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Dot11AuthAndMangementSuite)));
	for (tt__Dot11AuthAndMangementSuite *p = a; p && n--; ++p)
		soap_default_tt__Dot11AuthAndMangementSuite(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11AuthAndMangementSuite(struct soap *soap, const tt__Dot11AuthAndMangementSuite *a, const char *tag, const char *type)
{
	if (soap_out_tt__Dot11AuthAndMangementSuite(soap, tag ? tag : "tt:Dot11AuthAndMangementSuite", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_get_tt__Dot11AuthAndMangementSuite(struct soap *soap, tt__Dot11AuthAndMangementSuite *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Dot11AuthAndMangementSuite(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Dot11SignalStrength[] =
{	{ (LONG64)tt__Dot11SignalStrength::None, "None" },
	{ (LONG64)tt__Dot11SignalStrength::Very_x0020Bad, "Very Bad" },
	{ (LONG64)tt__Dot11SignalStrength::Bad, "Bad" },
	{ (LONG64)tt__Dot11SignalStrength::Good, "Good" },
	{ (LONG64)tt__Dot11SignalStrength::Very_x0020Good, "Very Good" },
	{ (LONG64)tt__Dot11SignalStrength::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SignalStrength2s(struct soap *soap, tt__Dot11SignalStrength n)
{
	const char *s = soap_code_str(soap_codes_tt__Dot11SignalStrength, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SignalStrength(struct soap *soap, const char *tag, int id, const tt__Dot11SignalStrength *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Dot11SignalStrength), type) || soap_send(soap, soap_tt__Dot11SignalStrength2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SignalStrength(struct soap *soap, const char *s, tt__Dot11SignalStrength *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Dot11SignalStrength, s);
	if (map)
		*a = (tt__Dot11SignalStrength)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 5)
			return soap->error = SOAP_TYPE;
		*a = (tt__Dot11SignalStrength)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Dot11SignalStrength * SOAP_FMAC4 soap_in_tt__Dot11SignalStrength(struct soap *soap, const char *tag, tt__Dot11SignalStrength *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Dot11SignalStrength*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Dot11SignalStrength, sizeof(tt__Dot11SignalStrength), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Dot11SignalStrength(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Dot11SignalStrength *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Dot11SignalStrength, SOAP_TYPE_tt__Dot11SignalStrength, sizeof(tt__Dot11SignalStrength), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Dot11SignalStrength * SOAP_FMAC4 soap_new_tt__Dot11SignalStrength(struct soap *soap, int n)
{
	tt__Dot11SignalStrength *a = static_cast<tt__Dot11SignalStrength *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Dot11SignalStrength)));
	for (tt__Dot11SignalStrength *p = a; p && n--; ++p)
		soap_default_tt__Dot11SignalStrength(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SignalStrength(struct soap *soap, const tt__Dot11SignalStrength *a, const char *tag, const char *type)
{
	if (soap_out_tt__Dot11SignalStrength(soap, tag ? tag : "tt:Dot11SignalStrength", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Dot11SignalStrength * SOAP_FMAC4 soap_get_tt__Dot11SignalStrength(struct soap *soap, tt__Dot11SignalStrength *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Dot11SignalStrength(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Dot11Cipher[] =
{	{ (LONG64)tt__Dot11Cipher::CCMP, "CCMP" },
	{ (LONG64)tt__Dot11Cipher::TKIP, "TKIP" },
	{ (LONG64)tt__Dot11Cipher::Any, "Any" },
	{ (LONG64)tt__Dot11Cipher::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11Cipher2s(struct soap *soap, tt__Dot11Cipher n)
{
	const char *s = soap_code_str(soap_codes_tt__Dot11Cipher, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Cipher(struct soap *soap, const char *tag, int id, const tt__Dot11Cipher *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Dot11Cipher), type) || soap_send(soap, soap_tt__Dot11Cipher2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11Cipher(struct soap *soap, const char *s, tt__Dot11Cipher *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Dot11Cipher, s);
	if (map)
		*a = (tt__Dot11Cipher)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__Dot11Cipher)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Dot11Cipher * SOAP_FMAC4 soap_in_tt__Dot11Cipher(struct soap *soap, const char *tag, tt__Dot11Cipher *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Dot11Cipher*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Dot11Cipher, sizeof(tt__Dot11Cipher), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Dot11Cipher(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Dot11Cipher *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Dot11Cipher, SOAP_TYPE_tt__Dot11Cipher, sizeof(tt__Dot11Cipher), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Dot11Cipher * SOAP_FMAC4 soap_new_tt__Dot11Cipher(struct soap *soap, int n)
{
	tt__Dot11Cipher *a = static_cast<tt__Dot11Cipher *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Dot11Cipher)));
	for (tt__Dot11Cipher *p = a; p && n--; ++p)
		soap_default_tt__Dot11Cipher(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11Cipher(struct soap *soap, const tt__Dot11Cipher *a, const char *tag, const char *type)
{
	if (soap_out_tt__Dot11Cipher(soap, tag ? tag : "tt:Dot11Cipher", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Dot11Cipher * SOAP_FMAC4 soap_get_tt__Dot11Cipher(struct soap *soap, tt__Dot11Cipher *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Dot11Cipher(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Dot11SecurityMode[] =
{	{ (LONG64)tt__Dot11SecurityMode::None, "None" },
	{ (LONG64)tt__Dot11SecurityMode::WEP, "WEP" },
	{ (LONG64)tt__Dot11SecurityMode::PSK, "PSK" },
	{ (LONG64)tt__Dot11SecurityMode::Dot1X, "Dot1X" },
	{ (LONG64)tt__Dot11SecurityMode::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SecurityMode2s(struct soap *soap, tt__Dot11SecurityMode n)
{
	const char *s = soap_code_str(soap_codes_tt__Dot11SecurityMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityMode(struct soap *soap, const char *tag, int id, const tt__Dot11SecurityMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Dot11SecurityMode), type) || soap_send(soap, soap_tt__Dot11SecurityMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SecurityMode(struct soap *soap, const char *s, tt__Dot11SecurityMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Dot11SecurityMode, s);
	if (map)
		*a = (tt__Dot11SecurityMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (tt__Dot11SecurityMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Dot11SecurityMode * SOAP_FMAC4 soap_in_tt__Dot11SecurityMode(struct soap *soap, const char *tag, tt__Dot11SecurityMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Dot11SecurityMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Dot11SecurityMode, sizeof(tt__Dot11SecurityMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Dot11SecurityMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Dot11SecurityMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Dot11SecurityMode, SOAP_TYPE_tt__Dot11SecurityMode, sizeof(tt__Dot11SecurityMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Dot11SecurityMode * SOAP_FMAC4 soap_new_tt__Dot11SecurityMode(struct soap *soap, int n)
{
	tt__Dot11SecurityMode *a = static_cast<tt__Dot11SecurityMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Dot11SecurityMode)));
	for (tt__Dot11SecurityMode *p = a; p && n--; ++p)
		soap_default_tt__Dot11SecurityMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SecurityMode(struct soap *soap, const tt__Dot11SecurityMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__Dot11SecurityMode(soap, tag ? tag : "tt:Dot11SecurityMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Dot11SecurityMode * SOAP_FMAC4 soap_get_tt__Dot11SecurityMode(struct soap *soap, tt__Dot11SecurityMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Dot11SecurityMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Dot11StationMode[] =
{	{ (LONG64)tt__Dot11StationMode::Ad_hoc, "Ad-hoc" },
	{ (LONG64)tt__Dot11StationMode::Infrastructure, "Infrastructure" },
	{ (LONG64)tt__Dot11StationMode::Extended, "Extended" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11StationMode2s(struct soap *soap, tt__Dot11StationMode n)
{
	const char *s = soap_code_str(soap_codes_tt__Dot11StationMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11StationMode(struct soap *soap, const char *tag, int id, const tt__Dot11StationMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Dot11StationMode), type) || soap_send(soap, soap_tt__Dot11StationMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11StationMode(struct soap *soap, const char *s, tt__Dot11StationMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Dot11StationMode, s);
	if (map)
		*a = (tt__Dot11StationMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__Dot11StationMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Dot11StationMode * SOAP_FMAC4 soap_in_tt__Dot11StationMode(struct soap *soap, const char *tag, tt__Dot11StationMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Dot11StationMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Dot11StationMode, sizeof(tt__Dot11StationMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Dot11StationMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Dot11StationMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Dot11StationMode, SOAP_TYPE_tt__Dot11StationMode, sizeof(tt__Dot11StationMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Dot11StationMode * SOAP_FMAC4 soap_new_tt__Dot11StationMode(struct soap *soap, int n)
{
	tt__Dot11StationMode *a = static_cast<tt__Dot11StationMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Dot11StationMode)));
	for (tt__Dot11StationMode *p = a; p && n--; ++p)
		soap_default_tt__Dot11StationMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11StationMode(struct soap *soap, const tt__Dot11StationMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__Dot11StationMode(soap, tag ? tag : "tt:Dot11StationMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Dot11StationMode * SOAP_FMAC4 soap_get_tt__Dot11StationMode(struct soap *soap, tt__Dot11StationMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Dot11StationMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__DynamicDNSType[] =
{	{ (LONG64)tt__DynamicDNSType::NoUpdate, "NoUpdate" },
	{ (LONG64)tt__DynamicDNSType::ClientUpdates, "ClientUpdates" },
	{ (LONG64)tt__DynamicDNSType::ServerUpdates, "ServerUpdates" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DynamicDNSType2s(struct soap *soap, tt__DynamicDNSType n)
{
	const char *s = soap_code_str(soap_codes_tt__DynamicDNSType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSType(struct soap *soap, const char *tag, int id, const tt__DynamicDNSType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__DynamicDNSType), type) || soap_send(soap, soap_tt__DynamicDNSType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DynamicDNSType(struct soap *soap, const char *s, tt__DynamicDNSType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__DynamicDNSType, s);
	if (map)
		*a = (tt__DynamicDNSType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__DynamicDNSType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__DynamicDNSType * SOAP_FMAC4 soap_in_tt__DynamicDNSType(struct soap *soap, const char *tag, tt__DynamicDNSType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__DynamicDNSType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__DynamicDNSType, sizeof(tt__DynamicDNSType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__DynamicDNSType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__DynamicDNSType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__DynamicDNSType, SOAP_TYPE_tt__DynamicDNSType, sizeof(tt__DynamicDNSType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__DynamicDNSType * SOAP_FMAC4 soap_new_tt__DynamicDNSType(struct soap *soap, int n)
{
	tt__DynamicDNSType *a = static_cast<tt__DynamicDNSType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__DynamicDNSType)));
	for (tt__DynamicDNSType *p = a; p && n--; ++p)
		soap_default_tt__DynamicDNSType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DynamicDNSType(struct soap *soap, const tt__DynamicDNSType *a, const char *tag, const char *type)
{
	if (soap_out_tt__DynamicDNSType(soap, tag ? tag : "tt:DynamicDNSType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__DynamicDNSType * SOAP_FMAC4 soap_get_tt__DynamicDNSType(struct soap *soap, tt__DynamicDNSType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__DynamicDNSType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__IPAddressFilterType[] =
{	{ (LONG64)tt__IPAddressFilterType::Allow, "Allow" },
	{ (LONG64)tt__IPAddressFilterType::Deny, "Deny" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPAddressFilterType2s(struct soap *soap, tt__IPAddressFilterType n)
{
	const char *s = soap_code_str(soap_codes_tt__IPAddressFilterType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterType(struct soap *soap, const char *tag, int id, const tt__IPAddressFilterType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__IPAddressFilterType), type) || soap_send(soap, soap_tt__IPAddressFilterType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPAddressFilterType(struct soap *soap, const char *s, tt__IPAddressFilterType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__IPAddressFilterType, s);
	if (map)
		*a = (tt__IPAddressFilterType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__IPAddressFilterType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__IPAddressFilterType * SOAP_FMAC4 soap_in_tt__IPAddressFilterType(struct soap *soap, const char *tag, tt__IPAddressFilterType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__IPAddressFilterType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__IPAddressFilterType, sizeof(tt__IPAddressFilterType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__IPAddressFilterType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__IPAddressFilterType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__IPAddressFilterType, SOAP_TYPE_tt__IPAddressFilterType, sizeof(tt__IPAddressFilterType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__IPAddressFilterType * SOAP_FMAC4 soap_new_tt__IPAddressFilterType(struct soap *soap, int n)
{
	tt__IPAddressFilterType *a = static_cast<tt__IPAddressFilterType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__IPAddressFilterType)));
	for (tt__IPAddressFilterType *p = a; p && n--; ++p)
		soap_default_tt__IPAddressFilterType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPAddressFilterType(struct soap *soap, const tt__IPAddressFilterType *a, const char *tag, const char *type)
{
	if (soap_out_tt__IPAddressFilterType(soap, tag ? tag : "tt:IPAddressFilterType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__IPAddressFilterType * SOAP_FMAC4 soap_get_tt__IPAddressFilterType(struct soap *soap, tt__IPAddressFilterType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__IPAddressFilterType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__IPType[] =
{	{ (LONG64)tt__IPType::IPv4, "IPv4" },
	{ (LONG64)tt__IPType::IPv6, "IPv6" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPType2s(struct soap *soap, tt__IPType n)
{
	const char *s = soap_code_str(soap_codes_tt__IPType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPType(struct soap *soap, const char *tag, int id, const tt__IPType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__IPType), type) || soap_send(soap, soap_tt__IPType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPType(struct soap *soap, const char *s, tt__IPType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__IPType, s);
	if (map)
		*a = (tt__IPType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__IPType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__IPType * SOAP_FMAC4 soap_in_tt__IPType(struct soap *soap, const char *tag, tt__IPType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__IPType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__IPType, sizeof(tt__IPType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__IPType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__IPType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__IPType, SOAP_TYPE_tt__IPType, sizeof(tt__IPType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__IPType * SOAP_FMAC4 soap_new_tt__IPType(struct soap *soap, int n)
{
	tt__IPType *a = static_cast<tt__IPType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__IPType)));
	for (tt__IPType *p = a; p && n--; ++p)
		soap_default_tt__IPType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPType(struct soap *soap, const tt__IPType *a, const char *tag, const char *type)
{
	if (soap_out_tt__IPType(soap, tag ? tag : "tt:IPType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__IPType * SOAP_FMAC4 soap_get_tt__IPType(struct soap *soap, tt__IPType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__IPType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__NetworkHostType[] =
{	{ (LONG64)tt__NetworkHostType::IPv4, "IPv4" },
	{ (LONG64)tt__NetworkHostType::IPv6, "IPv6" },
	{ (LONG64)tt__NetworkHostType::DNS, "DNS" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkHostType2s(struct soap *soap, tt__NetworkHostType n)
{
	const char *s = soap_code_str(soap_codes_tt__NetworkHostType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostType(struct soap *soap, const char *tag, int id, const tt__NetworkHostType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__NetworkHostType), type) || soap_send(soap, soap_tt__NetworkHostType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkHostType(struct soap *soap, const char *s, tt__NetworkHostType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__NetworkHostType, s);
	if (map)
		*a = (tt__NetworkHostType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__NetworkHostType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__NetworkHostType * SOAP_FMAC4 soap_in_tt__NetworkHostType(struct soap *soap, const char *tag, tt__NetworkHostType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__NetworkHostType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__NetworkHostType, sizeof(tt__NetworkHostType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__NetworkHostType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__NetworkHostType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__NetworkHostType, SOAP_TYPE_tt__NetworkHostType, sizeof(tt__NetworkHostType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__NetworkHostType * SOAP_FMAC4 soap_new_tt__NetworkHostType(struct soap *soap, int n)
{
	tt__NetworkHostType *a = static_cast<tt__NetworkHostType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__NetworkHostType)));
	for (tt__NetworkHostType *p = a; p && n--; ++p)
		soap_default_tt__NetworkHostType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkHostType(struct soap *soap, const tt__NetworkHostType *a, const char *tag, const char *type)
{
	if (soap_out_tt__NetworkHostType(soap, tag ? tag : "tt:NetworkHostType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__NetworkHostType * SOAP_FMAC4 soap_get_tt__NetworkHostType(struct soap *soap, tt__NetworkHostType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__NetworkHostType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__NetworkProtocolType[] =
{	{ (LONG64)tt__NetworkProtocolType::HTTP, "HTTP" },
	{ (LONG64)tt__NetworkProtocolType::HTTPS, "HTTPS" },
	{ (LONG64)tt__NetworkProtocolType::RTSP, "RTSP" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkProtocolType2s(struct soap *soap, tt__NetworkProtocolType n)
{
	const char *s = soap_code_str(soap_codes_tt__NetworkProtocolType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolType(struct soap *soap, const char *tag, int id, const tt__NetworkProtocolType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__NetworkProtocolType), type) || soap_send(soap, soap_tt__NetworkProtocolType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkProtocolType(struct soap *soap, const char *s, tt__NetworkProtocolType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__NetworkProtocolType, s);
	if (map)
		*a = (tt__NetworkProtocolType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__NetworkProtocolType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__NetworkProtocolType * SOAP_FMAC4 soap_in_tt__NetworkProtocolType(struct soap *soap, const char *tag, tt__NetworkProtocolType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__NetworkProtocolType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__NetworkProtocolType, sizeof(tt__NetworkProtocolType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__NetworkProtocolType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__NetworkProtocolType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__NetworkProtocolType, SOAP_TYPE_tt__NetworkProtocolType, sizeof(tt__NetworkProtocolType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__NetworkProtocolType * SOAP_FMAC4 soap_new_tt__NetworkProtocolType(struct soap *soap, int n)
{
	tt__NetworkProtocolType *a = static_cast<tt__NetworkProtocolType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__NetworkProtocolType)));
	for (tt__NetworkProtocolType *p = a; p && n--; ++p)
		soap_default_tt__NetworkProtocolType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkProtocolType(struct soap *soap, const tt__NetworkProtocolType *a, const char *tag, const char *type)
{
	if (soap_out_tt__NetworkProtocolType(soap, tag ? tag : "tt:NetworkProtocolType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__NetworkProtocolType * SOAP_FMAC4 soap_get_tt__NetworkProtocolType(struct soap *soap, tt__NetworkProtocolType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__NetworkProtocolType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__IPv6DHCPConfiguration[] =
{	{ (LONG64)tt__IPv6DHCPConfiguration::Auto, "Auto" },
	{ (LONG64)tt__IPv6DHCPConfiguration::Stateful, "Stateful" },
	{ (LONG64)tt__IPv6DHCPConfiguration::Stateless, "Stateless" },
	{ (LONG64)tt__IPv6DHCPConfiguration::Off, "Off" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPv6DHCPConfiguration2s(struct soap *soap, tt__IPv6DHCPConfiguration n)
{
	const char *s = soap_code_str(soap_codes_tt__IPv6DHCPConfiguration, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6DHCPConfiguration(struct soap *soap, const char *tag, int id, const tt__IPv6DHCPConfiguration *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__IPv6DHCPConfiguration), type) || soap_send(soap, soap_tt__IPv6DHCPConfiguration2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPv6DHCPConfiguration(struct soap *soap, const char *s, tt__IPv6DHCPConfiguration *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__IPv6DHCPConfiguration, s);
	if (map)
		*a = (tt__IPv6DHCPConfiguration)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__IPv6DHCPConfiguration)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_in_tt__IPv6DHCPConfiguration(struct soap *soap, const char *tag, tt__IPv6DHCPConfiguration *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__IPv6DHCPConfiguration*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__IPv6DHCPConfiguration, sizeof(tt__IPv6DHCPConfiguration), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__IPv6DHCPConfiguration(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__IPv6DHCPConfiguration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__IPv6DHCPConfiguration, SOAP_TYPE_tt__IPv6DHCPConfiguration, sizeof(tt__IPv6DHCPConfiguration), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_new_tt__IPv6DHCPConfiguration(struct soap *soap, int n)
{
	tt__IPv6DHCPConfiguration *a = static_cast<tt__IPv6DHCPConfiguration *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__IPv6DHCPConfiguration)));
	for (tt__IPv6DHCPConfiguration *p = a; p && n--; ++p)
		soap_default_tt__IPv6DHCPConfiguration(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPv6DHCPConfiguration(struct soap *soap, const tt__IPv6DHCPConfiguration *a, const char *tag, const char *type)
{
	if (soap_out_tt__IPv6DHCPConfiguration(soap, tag ? tag : "tt:IPv6DHCPConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_get_tt__IPv6DHCPConfiguration(struct soap *soap, tt__IPv6DHCPConfiguration *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__IPv6DHCPConfiguration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Duplex[] =
{	{ (LONG64)tt__Duplex::Full, "Full" },
	{ (LONG64)tt__Duplex::Half, "Half" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Duplex2s(struct soap *soap, tt__Duplex n)
{
	const char *s = soap_code_str(soap_codes_tt__Duplex, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Duplex(struct soap *soap, const char *tag, int id, const tt__Duplex *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Duplex), type) || soap_send(soap, soap_tt__Duplex2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Duplex(struct soap *soap, const char *s, tt__Duplex *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Duplex, s);
	if (map)
		*a = (tt__Duplex)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__Duplex)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Duplex * SOAP_FMAC4 soap_in_tt__Duplex(struct soap *soap, const char *tag, tt__Duplex *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Duplex*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Duplex, sizeof(tt__Duplex), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Duplex(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Duplex *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Duplex, SOAP_TYPE_tt__Duplex, sizeof(tt__Duplex), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Duplex * SOAP_FMAC4 soap_new_tt__Duplex(struct soap *soap, int n)
{
	tt__Duplex *a = static_cast<tt__Duplex *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Duplex)));
	for (tt__Duplex *p = a; p && n--; ++p)
		soap_default_tt__Duplex(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Duplex(struct soap *soap, const tt__Duplex *a, const char *tag, const char *type)
{
	if (soap_out_tt__Duplex(soap, tag ? tag : "tt:Duplex", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Duplex * SOAP_FMAC4 soap_get_tt__Duplex(struct soap *soap, tt__Duplex *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Duplex(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__DiscoveryMode[] =
{	{ (LONG64)tt__DiscoveryMode::Discoverable, "Discoverable" },
	{ (LONG64)tt__DiscoveryMode::NonDiscoverable, "NonDiscoverable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DiscoveryMode2s(struct soap *soap, tt__DiscoveryMode n)
{
	const char *s = soap_code_str(soap_codes_tt__DiscoveryMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DiscoveryMode(struct soap *soap, const char *tag, int id, const tt__DiscoveryMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__DiscoveryMode), type) || soap_send(soap, soap_tt__DiscoveryMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DiscoveryMode(struct soap *soap, const char *s, tt__DiscoveryMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__DiscoveryMode, s);
	if (map)
		*a = (tt__DiscoveryMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__DiscoveryMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__DiscoveryMode * SOAP_FMAC4 soap_in_tt__DiscoveryMode(struct soap *soap, const char *tag, tt__DiscoveryMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__DiscoveryMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__DiscoveryMode, sizeof(tt__DiscoveryMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__DiscoveryMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__DiscoveryMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__DiscoveryMode, SOAP_TYPE_tt__DiscoveryMode, sizeof(tt__DiscoveryMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__DiscoveryMode * SOAP_FMAC4 soap_new_tt__DiscoveryMode(struct soap *soap, int n)
{
	tt__DiscoveryMode *a = static_cast<tt__DiscoveryMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__DiscoveryMode)));
	for (tt__DiscoveryMode *p = a; p && n--; ++p)
		soap_default_tt__DiscoveryMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DiscoveryMode(struct soap *soap, const tt__DiscoveryMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__DiscoveryMode(soap, tag ? tag : "tt:DiscoveryMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__DiscoveryMode * SOAP_FMAC4 soap_get_tt__DiscoveryMode(struct soap *soap, tt__DiscoveryMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__DiscoveryMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ScopeDefinition[] =
{	{ (LONG64)tt__ScopeDefinition::Fixed, "Fixed" },
	{ (LONG64)tt__ScopeDefinition::Configurable, "Configurable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ScopeDefinition2s(struct soap *soap, tt__ScopeDefinition n)
{
	const char *s = soap_code_str(soap_codes_tt__ScopeDefinition, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ScopeDefinition(struct soap *soap, const char *tag, int id, const tt__ScopeDefinition *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ScopeDefinition), type) || soap_send(soap, soap_tt__ScopeDefinition2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ScopeDefinition(struct soap *soap, const char *s, tt__ScopeDefinition *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ScopeDefinition, s);
	if (map)
		*a = (tt__ScopeDefinition)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__ScopeDefinition)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ScopeDefinition * SOAP_FMAC4 soap_in_tt__ScopeDefinition(struct soap *soap, const char *tag, tt__ScopeDefinition *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ScopeDefinition*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ScopeDefinition, sizeof(tt__ScopeDefinition), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ScopeDefinition(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ScopeDefinition *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ScopeDefinition, SOAP_TYPE_tt__ScopeDefinition, sizeof(tt__ScopeDefinition), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ScopeDefinition * SOAP_FMAC4 soap_new_tt__ScopeDefinition(struct soap *soap, int n)
{
	tt__ScopeDefinition *a = static_cast<tt__ScopeDefinition *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ScopeDefinition)));
	for (tt__ScopeDefinition *p = a; p && n--; ++p)
		soap_default_tt__ScopeDefinition(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ScopeDefinition(struct soap *soap, const tt__ScopeDefinition *a, const char *tag, const char *type)
{
	if (soap_out_tt__ScopeDefinition(soap, tag ? tag : "tt:ScopeDefinition", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ScopeDefinition * SOAP_FMAC4 soap_get_tt__ScopeDefinition(struct soap *soap, tt__ScopeDefinition *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ScopeDefinition(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__TransportProtocol[] =
{	{ (LONG64)tt__TransportProtocol::UDP, "UDP" },
	{ (LONG64)tt__TransportProtocol::TCP, "TCP" },
	{ (LONG64)tt__TransportProtocol::RTSP, "RTSP" },
	{ (LONG64)tt__TransportProtocol::HTTP, "HTTP" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__TransportProtocol2s(struct soap *soap, tt__TransportProtocol n)
{
	const char *s = soap_code_str(soap_codes_tt__TransportProtocol, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransportProtocol(struct soap *soap, const char *tag, int id, const tt__TransportProtocol *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__TransportProtocol), type) || soap_send(soap, soap_tt__TransportProtocol2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__TransportProtocol(struct soap *soap, const char *s, tt__TransportProtocol *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__TransportProtocol, s);
	if (map)
		*a = (tt__TransportProtocol)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__TransportProtocol)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__TransportProtocol * SOAP_FMAC4 soap_in_tt__TransportProtocol(struct soap *soap, const char *tag, tt__TransportProtocol *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__TransportProtocol*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__TransportProtocol, sizeof(tt__TransportProtocol), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__TransportProtocol(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__TransportProtocol *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__TransportProtocol, SOAP_TYPE_tt__TransportProtocol, sizeof(tt__TransportProtocol), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__TransportProtocol * SOAP_FMAC4 soap_new_tt__TransportProtocol(struct soap *soap, int n)
{
	tt__TransportProtocol *a = static_cast<tt__TransportProtocol *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__TransportProtocol)));
	for (tt__TransportProtocol *p = a; p && n--; ++p)
		soap_default_tt__TransportProtocol(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TransportProtocol(struct soap *soap, const tt__TransportProtocol *a, const char *tag, const char *type)
{
	if (soap_out_tt__TransportProtocol(soap, tag ? tag : "tt:TransportProtocol", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__TransportProtocol * SOAP_FMAC4 soap_get_tt__TransportProtocol(struct soap *soap, tt__TransportProtocol *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__TransportProtocol(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__StreamType[] =
{	{ (LONG64)tt__StreamType::RTP_Unicast, "RTP-Unicast" },
	{ (LONG64)tt__StreamType::RTP_Multicast, "RTP-Multicast" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__StreamType2s(struct soap *soap, tt__StreamType n)
{
	const char *s = soap_code_str(soap_codes_tt__StreamType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamType(struct soap *soap, const char *tag, int id, const tt__StreamType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__StreamType), type) || soap_send(soap, soap_tt__StreamType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__StreamType(struct soap *soap, const char *s, tt__StreamType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__StreamType, s);
	if (map)
		*a = (tt__StreamType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__StreamType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__StreamType * SOAP_FMAC4 soap_in_tt__StreamType(struct soap *soap, const char *tag, tt__StreamType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__StreamType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__StreamType, sizeof(tt__StreamType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__StreamType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__StreamType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__StreamType, SOAP_TYPE_tt__StreamType, sizeof(tt__StreamType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__StreamType * SOAP_FMAC4 soap_new_tt__StreamType(struct soap *soap, int n)
{
	tt__StreamType *a = static_cast<tt__StreamType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__StreamType)));
	for (tt__StreamType *p = a; p && n--; ++p)
		soap_default_tt__StreamType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StreamType(struct soap *soap, const tt__StreamType *a, const char *tag, const char *type)
{
	if (soap_out_tt__StreamType(soap, tag ? tag : "tt:StreamType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__StreamType * SOAP_FMAC4 soap_get_tt__StreamType(struct soap *soap, tt__StreamType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__StreamType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__MetadataCompressionType[] =
{	{ (LONG64)tt__MetadataCompressionType::None, "None" },
	{ (LONG64)tt__MetadataCompressionType::GZIP, "GZIP" },
	{ (LONG64)tt__MetadataCompressionType::EXI, "EXI" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MetadataCompressionType2s(struct soap *soap, tt__MetadataCompressionType n)
{
	const char *s = soap_code_str(soap_codes_tt__MetadataCompressionType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataCompressionType(struct soap *soap, const char *tag, int id, const tt__MetadataCompressionType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__MetadataCompressionType), type) || soap_send(soap, soap_tt__MetadataCompressionType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MetadataCompressionType(struct soap *soap, const char *s, tt__MetadataCompressionType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__MetadataCompressionType, s);
	if (map)
		*a = (tt__MetadataCompressionType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__MetadataCompressionType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__MetadataCompressionType * SOAP_FMAC4 soap_in_tt__MetadataCompressionType(struct soap *soap, const char *tag, tt__MetadataCompressionType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__MetadataCompressionType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__MetadataCompressionType, sizeof(tt__MetadataCompressionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__MetadataCompressionType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__MetadataCompressionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__MetadataCompressionType, SOAP_TYPE_tt__MetadataCompressionType, sizeof(tt__MetadataCompressionType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__MetadataCompressionType * SOAP_FMAC4 soap_new_tt__MetadataCompressionType(struct soap *soap, int n)
{
	tt__MetadataCompressionType *a = static_cast<tt__MetadataCompressionType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__MetadataCompressionType)));
	for (tt__MetadataCompressionType *p = a; p && n--; ++p)
		soap_default_tt__MetadataCompressionType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MetadataCompressionType(struct soap *soap, const tt__MetadataCompressionType *a, const char *tag, const char *type)
{
	if (soap_out_tt__MetadataCompressionType(soap, tag ? tag : "tt:MetadataCompressionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__MetadataCompressionType * SOAP_FMAC4 soap_get_tt__MetadataCompressionType(struct soap *soap, tt__MetadataCompressionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__MetadataCompressionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__AudioEncodingMimeNames[] =
{	{ (LONG64)tt__AudioEncodingMimeNames::PCMU, "PCMU" },
	{ (LONG64)tt__AudioEncodingMimeNames::G726, "G726" },
	{ (LONG64)tt__AudioEncodingMimeNames::MP4A_LATM, "MP4A-LATM" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AudioEncodingMimeNames2s(struct soap *soap, tt__AudioEncodingMimeNames n)
{
	const char *s = soap_code_str(soap_codes_tt__AudioEncodingMimeNames, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncodingMimeNames(struct soap *soap, const char *tag, int id, const tt__AudioEncodingMimeNames *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__AudioEncodingMimeNames), type) || soap_send(soap, soap_tt__AudioEncodingMimeNames2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AudioEncodingMimeNames(struct soap *soap, const char *s, tt__AudioEncodingMimeNames *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__AudioEncodingMimeNames, s);
	if (map)
		*a = (tt__AudioEncodingMimeNames)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__AudioEncodingMimeNames)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__AudioEncodingMimeNames * SOAP_FMAC4 soap_in_tt__AudioEncodingMimeNames(struct soap *soap, const char *tag, tt__AudioEncodingMimeNames *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__AudioEncodingMimeNames*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__AudioEncodingMimeNames, sizeof(tt__AudioEncodingMimeNames), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__AudioEncodingMimeNames(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__AudioEncodingMimeNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__AudioEncodingMimeNames, SOAP_TYPE_tt__AudioEncodingMimeNames, sizeof(tt__AudioEncodingMimeNames), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__AudioEncodingMimeNames * SOAP_FMAC4 soap_new_tt__AudioEncodingMimeNames(struct soap *soap, int n)
{
	tt__AudioEncodingMimeNames *a = static_cast<tt__AudioEncodingMimeNames *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__AudioEncodingMimeNames)));
	for (tt__AudioEncodingMimeNames *p = a; p && n--; ++p)
		soap_default_tt__AudioEncodingMimeNames(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioEncodingMimeNames(struct soap *soap, const tt__AudioEncodingMimeNames *a, const char *tag, const char *type)
{
	if (soap_out_tt__AudioEncodingMimeNames(soap, tag ? tag : "tt:AudioEncodingMimeNames", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__AudioEncodingMimeNames * SOAP_FMAC4 soap_get_tt__AudioEncodingMimeNames(struct soap *soap, tt__AudioEncodingMimeNames *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__AudioEncodingMimeNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__AudioEncoding[] =
{	{ (LONG64)tt__AudioEncoding::G711, "G711" },
	{ (LONG64)tt__AudioEncoding::G726, "G726" },
	{ (LONG64)tt__AudioEncoding::AAC, "AAC" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AudioEncoding2s(struct soap *soap, tt__AudioEncoding n)
{
	const char *s = soap_code_str(soap_codes_tt__AudioEncoding, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoding(struct soap *soap, const char *tag, int id, const tt__AudioEncoding *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__AudioEncoding), type) || soap_send(soap, soap_tt__AudioEncoding2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AudioEncoding(struct soap *soap, const char *s, tt__AudioEncoding *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__AudioEncoding, s);
	if (map)
		*a = (tt__AudioEncoding)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__AudioEncoding)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__AudioEncoding * SOAP_FMAC4 soap_in_tt__AudioEncoding(struct soap *soap, const char *tag, tt__AudioEncoding *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__AudioEncoding*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__AudioEncoding, sizeof(tt__AudioEncoding), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__AudioEncoding(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__AudioEncoding *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__AudioEncoding, SOAP_TYPE_tt__AudioEncoding, sizeof(tt__AudioEncoding), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__AudioEncoding * SOAP_FMAC4 soap_new_tt__AudioEncoding(struct soap *soap, int n)
{
	tt__AudioEncoding *a = static_cast<tt__AudioEncoding *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__AudioEncoding)));
	for (tt__AudioEncoding *p = a; p && n--; ++p)
		soap_default_tt__AudioEncoding(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioEncoding(struct soap *soap, const tt__AudioEncoding *a, const char *tag, const char *type)
{
	if (soap_out_tt__AudioEncoding(soap, tag ? tag : "tt:AudioEncoding", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__AudioEncoding * SOAP_FMAC4 soap_get_tt__AudioEncoding(struct soap *soap, tt__AudioEncoding *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__AudioEncoding(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__VideoEncodingProfiles[] =
{	{ (LONG64)tt__VideoEncodingProfiles::Simple, "Simple" },
	{ (LONG64)tt__VideoEncodingProfiles::AdvancedSimple, "AdvancedSimple" },
	{ (LONG64)tt__VideoEncodingProfiles::Baseline, "Baseline" },
	{ (LONG64)tt__VideoEncodingProfiles::Main, "Main" },
	{ (LONG64)tt__VideoEncodingProfiles::Main10, "Main10" },
	{ (LONG64)tt__VideoEncodingProfiles::Extended, "Extended" },
	{ (LONG64)tt__VideoEncodingProfiles::High, "High" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncodingProfiles2s(struct soap *soap, tt__VideoEncodingProfiles n)
{
	const char *s = soap_code_str(soap_codes_tt__VideoEncodingProfiles, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingProfiles(struct soap *soap, const char *tag, int id, const tt__VideoEncodingProfiles *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__VideoEncodingProfiles), type) || soap_send(soap, soap_tt__VideoEncodingProfiles2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncodingProfiles(struct soap *soap, const char *s, tt__VideoEncodingProfiles *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__VideoEncodingProfiles, s);
	if (map)
		*a = (tt__VideoEncodingProfiles)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 6)
			return soap->error = SOAP_TYPE;
		*a = (tt__VideoEncodingProfiles)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__VideoEncodingProfiles * SOAP_FMAC4 soap_in_tt__VideoEncodingProfiles(struct soap *soap, const char *tag, tt__VideoEncodingProfiles *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__VideoEncodingProfiles*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__VideoEncodingProfiles, sizeof(tt__VideoEncodingProfiles), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__VideoEncodingProfiles(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__VideoEncodingProfiles *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__VideoEncodingProfiles, SOAP_TYPE_tt__VideoEncodingProfiles, sizeof(tt__VideoEncodingProfiles), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__VideoEncodingProfiles * SOAP_FMAC4 soap_new_tt__VideoEncodingProfiles(struct soap *soap, int n)
{
	tt__VideoEncodingProfiles *a = static_cast<tt__VideoEncodingProfiles *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__VideoEncodingProfiles)));
	for (tt__VideoEncodingProfiles *p = a; p && n--; ++p)
		soap_default_tt__VideoEncodingProfiles(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncodingProfiles(struct soap *soap, const tt__VideoEncodingProfiles *a, const char *tag, const char *type)
{
	if (soap_out_tt__VideoEncodingProfiles(soap, tag ? tag : "tt:VideoEncodingProfiles", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__VideoEncodingProfiles * SOAP_FMAC4 soap_get_tt__VideoEncodingProfiles(struct soap *soap, tt__VideoEncodingProfiles *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__VideoEncodingProfiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__VideoEncodingMimeNames[] =
{	{ (LONG64)tt__VideoEncodingMimeNames::JPEG, "JPEG" },
	{ (LONG64)tt__VideoEncodingMimeNames::MPV4_ES, "MPV4-ES" },
	{ (LONG64)tt__VideoEncodingMimeNames::H264, "H264" },
	{ (LONG64)tt__VideoEncodingMimeNames::H265, "H265" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncodingMimeNames2s(struct soap *soap, tt__VideoEncodingMimeNames n)
{
	const char *s = soap_code_str(soap_codes_tt__VideoEncodingMimeNames, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingMimeNames(struct soap *soap, const char *tag, int id, const tt__VideoEncodingMimeNames *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__VideoEncodingMimeNames), type) || soap_send(soap, soap_tt__VideoEncodingMimeNames2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncodingMimeNames(struct soap *soap, const char *s, tt__VideoEncodingMimeNames *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__VideoEncodingMimeNames, s);
	if (map)
		*a = (tt__VideoEncodingMimeNames)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__VideoEncodingMimeNames)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__VideoEncodingMimeNames * SOAP_FMAC4 soap_in_tt__VideoEncodingMimeNames(struct soap *soap, const char *tag, tt__VideoEncodingMimeNames *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__VideoEncodingMimeNames*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__VideoEncodingMimeNames, sizeof(tt__VideoEncodingMimeNames), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__VideoEncodingMimeNames(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__VideoEncodingMimeNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__VideoEncodingMimeNames, SOAP_TYPE_tt__VideoEncodingMimeNames, sizeof(tt__VideoEncodingMimeNames), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__VideoEncodingMimeNames * SOAP_FMAC4 soap_new_tt__VideoEncodingMimeNames(struct soap *soap, int n)
{
	tt__VideoEncodingMimeNames *a = static_cast<tt__VideoEncodingMimeNames *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__VideoEncodingMimeNames)));
	for (tt__VideoEncodingMimeNames *p = a; p && n--; ++p)
		soap_default_tt__VideoEncodingMimeNames(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncodingMimeNames(struct soap *soap, const tt__VideoEncodingMimeNames *a, const char *tag, const char *type)
{
	if (soap_out_tt__VideoEncodingMimeNames(soap, tag ? tag : "tt:VideoEncodingMimeNames", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__VideoEncodingMimeNames * SOAP_FMAC4 soap_get_tt__VideoEncodingMimeNames(struct soap *soap, tt__VideoEncodingMimeNames *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__VideoEncodingMimeNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__H264Profile[] =
{	{ (LONG64)tt__H264Profile::Baseline, "Baseline" },
	{ (LONG64)tt__H264Profile::Main, "Main" },
	{ (LONG64)tt__H264Profile::Extended, "Extended" },
	{ (LONG64)tt__H264Profile::High, "High" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__H264Profile2s(struct soap *soap, tt__H264Profile n)
{
	const char *s = soap_code_str(soap_codes_tt__H264Profile, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Profile(struct soap *soap, const char *tag, int id, const tt__H264Profile *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__H264Profile), type) || soap_send(soap, soap_tt__H264Profile2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__H264Profile(struct soap *soap, const char *s, tt__H264Profile *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__H264Profile, s);
	if (map)
		*a = (tt__H264Profile)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tt__H264Profile)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__H264Profile * SOAP_FMAC4 soap_in_tt__H264Profile(struct soap *soap, const char *tag, tt__H264Profile *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__H264Profile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__H264Profile, sizeof(tt__H264Profile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__H264Profile(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__H264Profile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__H264Profile, SOAP_TYPE_tt__H264Profile, sizeof(tt__H264Profile), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__H264Profile * SOAP_FMAC4 soap_new_tt__H264Profile(struct soap *soap, int n)
{
	tt__H264Profile *a = static_cast<tt__H264Profile *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__H264Profile)));
	for (tt__H264Profile *p = a; p && n--; ++p)
		soap_default_tt__H264Profile(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__H264Profile(struct soap *soap, const tt__H264Profile *a, const char *tag, const char *type)
{
	if (soap_out_tt__H264Profile(soap, tag ? tag : "tt:H264Profile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__H264Profile * SOAP_FMAC4 soap_get_tt__H264Profile(struct soap *soap, tt__H264Profile *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__H264Profile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__Mpeg4Profile[] =
{	{ (LONG64)tt__Mpeg4Profile::SP, "SP" },
	{ (LONG64)tt__Mpeg4Profile::ASP, "ASP" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Mpeg4Profile2s(struct soap *soap, tt__Mpeg4Profile n)
{
	const char *s = soap_code_str(soap_codes_tt__Mpeg4Profile, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Profile(struct soap *soap, const char *tag, int id, const tt__Mpeg4Profile *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__Mpeg4Profile), type) || soap_send(soap, soap_tt__Mpeg4Profile2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Mpeg4Profile(struct soap *soap, const char *s, tt__Mpeg4Profile *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__Mpeg4Profile, s);
	if (map)
		*a = (tt__Mpeg4Profile)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__Mpeg4Profile)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__Mpeg4Profile * SOAP_FMAC4 soap_in_tt__Mpeg4Profile(struct soap *soap, const char *tag, tt__Mpeg4Profile *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__Mpeg4Profile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__Mpeg4Profile, sizeof(tt__Mpeg4Profile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__Mpeg4Profile(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__Mpeg4Profile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__Mpeg4Profile, SOAP_TYPE_tt__Mpeg4Profile, sizeof(tt__Mpeg4Profile), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__Mpeg4Profile * SOAP_FMAC4 soap_new_tt__Mpeg4Profile(struct soap *soap, int n)
{
	tt__Mpeg4Profile *a = static_cast<tt__Mpeg4Profile *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__Mpeg4Profile)));
	for (tt__Mpeg4Profile *p = a; p && n--; ++p)
		soap_default_tt__Mpeg4Profile(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Mpeg4Profile(struct soap *soap, const tt__Mpeg4Profile *a, const char *tag, const char *type)
{
	if (soap_out_tt__Mpeg4Profile(soap, tag ? tag : "tt:Mpeg4Profile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__Mpeg4Profile * SOAP_FMAC4 soap_get_tt__Mpeg4Profile(struct soap *soap, tt__Mpeg4Profile *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__Mpeg4Profile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__VideoEncoding[] =
{	{ (LONG64)tt__VideoEncoding::JPEG, "JPEG" },
	{ (LONG64)tt__VideoEncoding::MPEG4, "MPEG4" },
	{ (LONG64)tt__VideoEncoding::H264, "H264" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncoding2s(struct soap *soap, tt__VideoEncoding n)
{
	const char *s = soap_code_str(soap_codes_tt__VideoEncoding, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoding(struct soap *soap, const char *tag, int id, const tt__VideoEncoding *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__VideoEncoding), type) || soap_send(soap, soap_tt__VideoEncoding2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncoding(struct soap *soap, const char *s, tt__VideoEncoding *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__VideoEncoding, s);
	if (map)
		*a = (tt__VideoEncoding)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__VideoEncoding)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__VideoEncoding * SOAP_FMAC4 soap_in_tt__VideoEncoding(struct soap *soap, const char *tag, tt__VideoEncoding *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__VideoEncoding*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__VideoEncoding, sizeof(tt__VideoEncoding), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__VideoEncoding(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__VideoEncoding *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__VideoEncoding, SOAP_TYPE_tt__VideoEncoding, sizeof(tt__VideoEncoding), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__VideoEncoding * SOAP_FMAC4 soap_new_tt__VideoEncoding(struct soap *soap, int n)
{
	tt__VideoEncoding *a = static_cast<tt__VideoEncoding *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__VideoEncoding)));
	for (tt__VideoEncoding *p = a; p && n--; ++p)
		soap_default_tt__VideoEncoding(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncoding(struct soap *soap, const tt__VideoEncoding *a, const char *tag, const char *type)
{
	if (soap_out_tt__VideoEncoding(soap, tag ? tag : "tt:VideoEncoding", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__VideoEncoding * SOAP_FMAC4 soap_get_tt__VideoEncoding(struct soap *soap, tt__VideoEncoding *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__VideoEncoding(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__ViewModes[] =
{	{ (LONG64)tt__ViewModes::tt_x003aFisheye, "tt:Fisheye" },
	{ (LONG64)tt__ViewModes::tt_x003a360Panorama, "tt:360Panorama" },
	{ (LONG64)tt__ViewModes::tt_x003a180Panorama, "tt:180Panorama" },
	{ (LONG64)tt__ViewModes::tt_x003aQuad, "tt:Quad" },
	{ (LONG64)tt__ViewModes::tt_x003aOriginal, "tt:Original" },
	{ (LONG64)tt__ViewModes::tt_x003aLeftHalf, "tt:LeftHalf" },
	{ (LONG64)tt__ViewModes::tt_x003aRightHalf, "tt:RightHalf" },
	{ (LONG64)tt__ViewModes::tt_x003aDewarp, "tt:Dewarp" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ViewModes2s(struct soap *soap, tt__ViewModes n)
{
	const char *s = soap_code_str(soap_codes_tt__ViewModes, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ViewModes(struct soap *soap, const char *tag, int id, const tt__ViewModes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__ViewModes), type) || soap_send(soap, soap_tt__ViewModes2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ViewModes(struct soap *soap, const char *s, tt__ViewModes *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__ViewModes, s);
	if (map)
		*a = (tt__ViewModes)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 7)
			return soap->error = SOAP_TYPE;
		*a = (tt__ViewModes)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__ViewModes * SOAP_FMAC4 soap_in_tt__ViewModes(struct soap *soap, const char *tag, tt__ViewModes *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__ViewModes*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ViewModes, sizeof(tt__ViewModes), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__ViewModes(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__ViewModes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__ViewModes, SOAP_TYPE_tt__ViewModes, sizeof(tt__ViewModes), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__ViewModes * SOAP_FMAC4 soap_new_tt__ViewModes(struct soap *soap, int n)
{
	tt__ViewModes *a = static_cast<tt__ViewModes *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__ViewModes)));
	for (tt__ViewModes *p = a; p && n--; ++p)
		soap_default_tt__ViewModes(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ViewModes(struct soap *soap, const tt__ViewModes *a, const char *tag, const char *type)
{
	if (soap_out_tt__ViewModes(soap, tag ? tag : "tt:ViewModes", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__ViewModes * SOAP_FMAC4 soap_get_tt__ViewModes(struct soap *soap, tt__ViewModes *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ViewModes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__SceneOrientationOption[] =
{	{ (LONG64)tt__SceneOrientationOption::Below, "Below" },
	{ (LONG64)tt__SceneOrientationOption::Horizon, "Horizon" },
	{ (LONG64)tt__SceneOrientationOption::Above, "Above" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SceneOrientationOption2s(struct soap *soap, tt__SceneOrientationOption n)
{
	const char *s = soap_code_str(soap_codes_tt__SceneOrientationOption, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientationOption(struct soap *soap, const char *tag, int id, const tt__SceneOrientationOption *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__SceneOrientationOption), type) || soap_send(soap, soap_tt__SceneOrientationOption2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SceneOrientationOption(struct soap *soap, const char *s, tt__SceneOrientationOption *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__SceneOrientationOption, s);
	if (map)
		*a = (tt__SceneOrientationOption)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__SceneOrientationOption)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__SceneOrientationOption * SOAP_FMAC4 soap_in_tt__SceneOrientationOption(struct soap *soap, const char *tag, tt__SceneOrientationOption *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__SceneOrientationOption*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__SceneOrientationOption, sizeof(tt__SceneOrientationOption), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__SceneOrientationOption(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__SceneOrientationOption *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__SceneOrientationOption, SOAP_TYPE_tt__SceneOrientationOption, sizeof(tt__SceneOrientationOption), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__SceneOrientationOption * SOAP_FMAC4 soap_new_tt__SceneOrientationOption(struct soap *soap, int n)
{
	tt__SceneOrientationOption *a = static_cast<tt__SceneOrientationOption *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__SceneOrientationOption)));
	for (tt__SceneOrientationOption *p = a; p && n--; ++p)
		soap_default_tt__SceneOrientationOption(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SceneOrientationOption(struct soap *soap, const tt__SceneOrientationOption *a, const char *tag, const char *type)
{
	if (soap_out_tt__SceneOrientationOption(soap, tag ? tag : "tt:SceneOrientationOption", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__SceneOrientationOption * SOAP_FMAC4 soap_get_tt__SceneOrientationOption(struct soap *soap, tt__SceneOrientationOption *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__SceneOrientationOption(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__SceneOrientationMode[] =
{	{ (LONG64)tt__SceneOrientationMode::MANUAL, "MANUAL" },
	{ (LONG64)tt__SceneOrientationMode::AUTO, "AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SceneOrientationMode2s(struct soap *soap, tt__SceneOrientationMode n)
{
	const char *s = soap_code_str(soap_codes_tt__SceneOrientationMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientationMode(struct soap *soap, const char *tag, int id, const tt__SceneOrientationMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__SceneOrientationMode), type) || soap_send(soap, soap_tt__SceneOrientationMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SceneOrientationMode(struct soap *soap, const char *s, tt__SceneOrientationMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__SceneOrientationMode, s);
	if (map)
		*a = (tt__SceneOrientationMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (tt__SceneOrientationMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__SceneOrientationMode * SOAP_FMAC4 soap_in_tt__SceneOrientationMode(struct soap *soap, const char *tag, tt__SceneOrientationMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__SceneOrientationMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__SceneOrientationMode, sizeof(tt__SceneOrientationMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__SceneOrientationMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__SceneOrientationMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__SceneOrientationMode, SOAP_TYPE_tt__SceneOrientationMode, sizeof(tt__SceneOrientationMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__SceneOrientationMode * SOAP_FMAC4 soap_new_tt__SceneOrientationMode(struct soap *soap, int n)
{
	tt__SceneOrientationMode *a = static_cast<tt__SceneOrientationMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__SceneOrientationMode)));
	for (tt__SceneOrientationMode *p = a; p && n--; ++p)
		soap_default_tt__SceneOrientationMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SceneOrientationMode(struct soap *soap, const tt__SceneOrientationMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__SceneOrientationMode(soap, tag ? tag : "tt:SceneOrientationMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__SceneOrientationMode * SOAP_FMAC4 soap_get_tt__SceneOrientationMode(struct soap *soap, tt__SceneOrientationMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__SceneOrientationMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tt__RotateMode[] =
{	{ (LONG64)tt__RotateMode::OFF, "OFF" },
	{ (LONG64)tt__RotateMode::ON, "ON" },
	{ (LONG64)tt__RotateMode::AUTO, "AUTO" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RotateMode2s(struct soap *soap, tt__RotateMode n)
{
	const char *s = soap_code_str(soap_codes_tt__RotateMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateMode(struct soap *soap, const char *tag, int id, const tt__RotateMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tt__RotateMode), type) || soap_send(soap, soap_tt__RotateMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RotateMode(struct soap *soap, const char *s, tt__RotateMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tt__RotateMode, s);
	if (map)
		*a = (tt__RotateMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tt__RotateMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tt__RotateMode * SOAP_FMAC4 soap_in_tt__RotateMode(struct soap *soap, const char *tag, tt__RotateMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tt__RotateMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__RotateMode, sizeof(tt__RotateMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tt__RotateMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tt__RotateMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tt__RotateMode, SOAP_TYPE_tt__RotateMode, sizeof(tt__RotateMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tt__RotateMode * SOAP_FMAC4 soap_new_tt__RotateMode(struct soap *soap, int n)
{
	tt__RotateMode *a = static_cast<tt__RotateMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tt__RotateMode)));
	for (tt__RotateMode *p = a; p && n--; ++p)
		soap_default_tt__RotateMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RotateMode(struct soap *soap, const tt__RotateMode *a, const char *tag, const char *type)
{
	if (soap_out_tt__RotateMode(soap, tag ? tag : "tt:RotateMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tt__RotateMode * SOAP_FMAC4 soap_get_tt__RotateMode(struct soap *soap, tt__RotateMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__RotateMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tds__StorageType[] =
{	{ (LONG64)tds__StorageType::NFS, "NFS" },
	{ (LONG64)tds__StorageType::CIFS, "CIFS" },
	{ (LONG64)tds__StorageType::CDMI, "CDMI" },
	{ (LONG64)tds__StorageType::FTP, "FTP" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tds__StorageType2s(struct soap *soap, tds__StorageType n)
{
	const char *s = soap_code_str(soap_codes_tds__StorageType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__StorageType(struct soap *soap, const char *tag, int id, const tds__StorageType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tds__StorageType), type) || soap_send(soap, soap_tds__StorageType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tds__StorageType(struct soap *soap, const char *s, tds__StorageType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tds__StorageType, s);
	if (map)
		*a = (tds__StorageType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (tds__StorageType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tds__StorageType * SOAP_FMAC4 soap_in_tds__StorageType(struct soap *soap, const char *tag, tds__StorageType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tds__StorageType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tds__StorageType, sizeof(tds__StorageType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tds__StorageType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tds__StorageType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tds__StorageType, SOAP_TYPE_tds__StorageType, sizeof(tds__StorageType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tds__StorageType * SOAP_FMAC4 soap_new_tds__StorageType(struct soap *soap, int n)
{
	tds__StorageType *a = static_cast<tds__StorageType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tds__StorageType)));
	for (tds__StorageType *p = a; p && n--; ++p)
		soap_default_tds__StorageType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tds__StorageType(struct soap *soap, const tds__StorageType *a, const char *tag, const char *type)
{
	if (soap_out_tds__StorageType(soap, tag ? tag : "tds:StorageType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tds__StorageType * SOAP_FMAC4 soap_get_tds__StorageType(struct soap *soap, tds__StorageType *p, const char *tag, const char *type)
{
	if ((p = soap_in_tds__StorageType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_tds__AutoGeoModes[] =
{	{ (LONG64)tds__AutoGeoModes::Location, "Location" },
	{ (LONG64)tds__AutoGeoModes::Heading, "Heading" },
	{ (LONG64)tds__AutoGeoModes::Leveling, "Leveling" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tds__AutoGeoModes2s(struct soap *soap, tds__AutoGeoModes n)
{
	const char *s = soap_code_str(soap_codes_tds__AutoGeoModes, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__AutoGeoModes(struct soap *soap, const char *tag, int id, const tds__AutoGeoModes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tds__AutoGeoModes), type) || soap_send(soap, soap_tds__AutoGeoModes2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tds__AutoGeoModes(struct soap *soap, const char *s, tds__AutoGeoModes *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_tds__AutoGeoModes, s);
	if (map)
		*a = (tds__AutoGeoModes)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (tds__AutoGeoModes)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 tds__AutoGeoModes * SOAP_FMAC4 soap_in_tds__AutoGeoModes(struct soap *soap, const char *tag, tds__AutoGeoModes *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (tds__AutoGeoModes*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tds__AutoGeoModes, sizeof(tds__AutoGeoModes), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2tds__AutoGeoModes(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (tds__AutoGeoModes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tds__AutoGeoModes, SOAP_TYPE_tds__AutoGeoModes, sizeof(tds__AutoGeoModes), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 tds__AutoGeoModes * SOAP_FMAC4 soap_new_tds__AutoGeoModes(struct soap *soap, int n)
{
	tds__AutoGeoModes *a = static_cast<tds__AutoGeoModes *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(tds__AutoGeoModes)));
	for (tds__AutoGeoModes *p = a; p && n--; ++p)
		soap_default_tds__AutoGeoModes(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tds__AutoGeoModes(struct soap *soap, const tds__AutoGeoModes *a, const char *tag, const char *type)
{
	if (soap_out_tds__AutoGeoModes(soap, tag ? tag : "tds:AutoGeoModes", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tds__AutoGeoModes * SOAP_FMAC4 soap_get_tds__AutoGeoModes(struct soap *soap, tds__AutoGeoModes *p, const char *tag, const char *type)
{
	if ((p = soap_in_tds__AutoGeoModes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tns1__dummy(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns1__dummy(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_tns1__dummy), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tns1__dummy(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_tns1__dummy, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_tns1__dummy, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_tns1__dummy, SOAP_TYPE_tns1__dummy, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tns1__dummy(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_tns1__dummy(soap, tag ? tag : "tns1:dummy", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tns1__dummy(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns1__dummy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_dn__dummy(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dn__dummy(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_dn__dummy), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_dn__dummy(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_dn__dummy, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_dn__dummy, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_dn__dummy, SOAP_TYPE_dn__dummy, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dn__dummy(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_dn__dummy(soap, tag ? tag : "dn:dummy", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_dn__dummy(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_dn__dummy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__RetryAfter(struct soap *soap, const wsa__RetryAfterType *a, const char *tag, const char *type)
{
	if (soap_out__wsa__RetryAfter(soap, tag ? tag : "wsa:RetryAfter", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__ReplyAfter(struct soap *soap, const wsa__ReplyAfterType *a, const char *tag, const char *type)
{
	if (soap_out__wsa__ReplyAfter(soap, tag ? tag : "wsa:ReplyAfter", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__FaultTo(struct soap *soap, const wsa__EndpointReferenceType *a, const char *tag, const char *type)
{
	if (soap_out__wsa__FaultTo(soap, tag ? tag : "wsa:FaultTo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__ReplyTo(struct soap *soap, const wsa__EndpointReferenceType *a, const char *tag, const char *type)
{
	if (soap_out__wsa__ReplyTo(soap, tag ? tag : "wsa:ReplyTo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__From(struct soap *soap, const wsa__EndpointReferenceType *a, const char *tag, const char *type)
{
	if (soap_out__wsa__From(soap, tag ? tag : "wsa:From", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__Action(struct soap *soap, const wsa__AttributedURI *a, const char *tag, const char *type)
{
	if (soap_out__wsa__Action(soap, tag ? tag : "wsa:Action", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__To(struct soap *soap, const wsa__AttributedURI *a, const char *tag, const char *type)
{
	if (soap_out__wsa__To(soap, tag ? tag : "wsa:To", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__RelatesTo(struct soap *soap, const wsa__Relationship *a, const char *tag, const char *type)
{
	if (soap_out__wsa__RelatesTo(soap, tag ? tag : "wsa:RelatesTo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__MessageID(struct soap *soap, const wsa__AttributedURI *a, const char *tag, const char *type)
{
	if (soap_out__wsa__MessageID(soap, tag ? tag : "wsa:MessageID", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa__EndpointReference(struct soap *soap, const wsa__EndpointReferenceType *a, const char *tag, const char *type)
{
	if (soap_out__wsa__EndpointReference(soap, tag ? tag : "wsa:EndpointReference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__AppSequence(struct soap *soap, const wsd__AppSequenceType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__AppSequence(soap, tag ? tag : "wsd:AppSequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__Sig(struct soap *soap, const wsd__SigType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__Sig(soap, tag ? tag : "wsd:Sig", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__Security(struct soap *soap, const wsd__SecurityType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__Security(soap, tag ? tag : "wsd:Security", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__Scopes(struct soap *soap, const wsd__ScopesType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__Scopes(soap, tag ? tag : "wsd:Scopes", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__ResolveMatches(struct soap *soap, const wsd__ResolveMatchesType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__ResolveMatches(soap, tag ? tag : "wsd:ResolveMatches", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__Resolve(struct soap *soap, const wsd__ResolveType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__Resolve(soap, tag ? tag : "wsd:Resolve", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__Bye(struct soap *soap, const wsd__ByeType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__Bye(soap, tag ? tag : "wsd:Bye", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsd__Hello(struct soap *soap, const wsd__HelloType *a, const char *tag, const char *type)
{
	if (soap_out__wsd__Hello(soap, tag ? tag : "wsd:Hello", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrf__ResourceUnavailableFault(struct soap *soap, const wsrf__ResourceUnavailableFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsrf__ResourceUnavailableFault(soap, tag ? tag : "wsrf:ResourceUnavailableFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrf__ResourceUnknownFault(struct soap *soap, const wsrf__ResourceUnknownFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsrf__ResourceUnknownFault(soap, tag ? tag : "wsrf:ResourceUnknownFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tev__Capabilities(struct soap *soap, const tev__Capabilities *a, const char *tag, const char *type)
{
	if (soap_out__tev__Capabilities(soap, tag ? tag : "tev:Capabilities", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wstop__TopicSet(struct soap *soap, const wstop__TopicSetType *a, const char *tag, const char *type)
{
	if (soap_out__wstop__TopicSet(soap, tag ? tag : "wstop:TopicSet", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wstop__TopicNamespace(struct soap *soap, const wstop__TopicNamespaceType *a, const char *tag, const char *type)
{
	if (soap_out__wstop__TopicNamespace(soap, tag ? tag : "wstop:TopicNamespace", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrfbf__BaseFault(struct soap *soap, const wsrfbf__BaseFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsrfbf__BaseFault(soap, tag ? tag : "wsrfbf:BaseFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap *soap, const xop__Include *a, const char *tag, const char *type)
{
	if (soap_out__xop__Include(soap, tag ? tag : "xop:Include", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__ResumeFailedFault(struct soap *soap, const wsnt__ResumeFailedFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__ResumeFailedFault(soap, tag ? tag : "wsnt:ResumeFailedFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__PauseFailedFault(struct soap *soap, const wsnt__PauseFailedFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__PauseFailedFault(soap, tag ? tag : "wsnt:PauseFailedFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnableToDestroySubscriptionFault(struct soap *soap, const wsnt__UnableToDestroySubscriptionFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnableToDestroySubscriptionFault(soap, tag ? tag : "wsnt:UnableToDestroySubscriptionFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnacceptableTerminationTimeFault(struct soap *soap, const wsnt__UnacceptableTerminationTimeFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnacceptableTerminationTimeFault(soap, tag ? tag : "wsnt:UnacceptableTerminationTimeFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnableToCreatePullPointFault(struct soap *soap, const wsnt__UnableToCreatePullPointFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnableToCreatePullPointFault(soap, tag ? tag : "wsnt:UnableToCreatePullPointFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnableToDestroyPullPointFault(struct soap *soap, const wsnt__UnableToDestroyPullPointFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnableToDestroyPullPointFault(soap, tag ? tag : "wsnt:UnableToDestroyPullPointFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnableToGetMessagesFault(struct soap *soap, const wsnt__UnableToGetMessagesFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnableToGetMessagesFault(soap, tag ? tag : "wsnt:UnableToGetMessagesFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__NoCurrentMessageOnTopicFault(struct soap *soap, const wsnt__NoCurrentMessageOnTopicFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__NoCurrentMessageOnTopicFault(soap, tag ? tag : "wsnt:NoCurrentMessageOnTopicFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnacceptableInitialTerminationTimeFault(struct soap *soap, const wsnt__UnacceptableInitialTerminationTimeFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnacceptableInitialTerminationTimeFault(soap, tag ? tag : "wsnt:UnacceptableInitialTerminationTimeFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__NotifyMessageNotSupportedFault(struct soap *soap, const wsnt__NotifyMessageNotSupportedFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__NotifyMessageNotSupportedFault(soap, tag ? tag : "wsnt:NotifyMessageNotSupportedFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnsupportedPolicyRequestFault(struct soap *soap, const wsnt__UnsupportedPolicyRequestFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnsupportedPolicyRequestFault(soap, tag ? tag : "wsnt:UnsupportedPolicyRequestFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__UnrecognizedPolicyRequestFault(struct soap *soap, const wsnt__UnrecognizedPolicyRequestFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__UnrecognizedPolicyRequestFault(soap, tag ? tag : "wsnt:UnrecognizedPolicyRequestFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__InvalidMessageContentExpressionFault(struct soap *soap, const wsnt__InvalidMessageContentExpressionFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__InvalidMessageContentExpressionFault(soap, tag ? tag : "wsnt:InvalidMessageContentExpressionFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__InvalidProducerPropertiesExpressionFault(struct soap *soap, const wsnt__InvalidProducerPropertiesExpressionFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__InvalidProducerPropertiesExpressionFault(soap, tag ? tag : "wsnt:InvalidProducerPropertiesExpressionFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__MultipleTopicsSpecifiedFault(struct soap *soap, const wsnt__MultipleTopicsSpecifiedFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__MultipleTopicsSpecifiedFault(soap, tag ? tag : "wsnt:MultipleTopicsSpecifiedFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__TopicNotSupportedFault(struct soap *soap, const wsnt__TopicNotSupportedFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__TopicNotSupportedFault(soap, tag ? tag : "wsnt:TopicNotSupportedFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__InvalidTopicExpressionFault(struct soap *soap, const wsnt__InvalidTopicExpressionFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__InvalidTopicExpressionFault(soap, tag ? tag : "wsnt:InvalidTopicExpressionFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__TopicExpressionDialectUnknownFault(struct soap *soap, const wsnt__TopicExpressionDialectUnknownFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__TopicExpressionDialectUnknownFault(soap, tag ? tag : "wsnt:TopicExpressionDialectUnknownFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__InvalidFilterFault(struct soap *soap, const wsnt__InvalidFilterFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__InvalidFilterFault(soap, tag ? tag : "wsnt:InvalidFilterFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__SubscribeCreationFailedFault(struct soap *soap, const wsnt__SubscribeCreationFailedFaultType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__SubscribeCreationFailedFault(soap, tag ? tag : "wsnt:SubscribeCreationFailedFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__MessageContent(struct soap *soap, const wsnt__QueryExpressionType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__MessageContent(soap, tag ? tag : "wsnt:MessageContent", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__ProducerProperties(struct soap *soap, const wsnt__QueryExpressionType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__ProducerProperties(soap, tag ? tag : "wsnt:ProducerProperties", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__NotificationMessage(struct soap *soap, const wsnt__NotificationMessageHolderType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__NotificationMessage(soap, tag ? tag : "wsnt:NotificationMessage", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__Topic(struct soap *soap, const wsnt__TopicExpressionTypeCustom *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__Topic(soap, tag ? tag : "wsnt:Topic", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__SubscriptionPolicy(struct soap *soap, const wsnt__SubscriptionPolicyType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__SubscriptionPolicy(soap, tag ? tag : "wsnt:SubscriptionPolicy", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__Filter(struct soap *soap, const wsnt__FilterType *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__Filter(soap, tag ? tag : "wsnt:Filter", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsnt__TopicExpression(struct soap *soap, const wsnt__TopicExpressionTypeCustom *a, const char *tag, const char *type)
{
	if (soap_out__wsnt__TopicExpression(soap, tag ? tag : "wsnt:TopicExpression", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__Polygon(struct soap *soap, const tt__Polygon *a, const char *tag, const char *type)
{
	if (soap_out__tt__Polygon(soap, tag ? tag : "tt:Polygon", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__Polyline(struct soap *soap, const tt__Polyline *a, const char *tag, const char *type)
{
	if (soap_out__tt__Polyline(soap, tag ? tag : "tt:Polyline", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__AudioDecoderConfiguration(struct soap *soap, const tt__AudioDecoderConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__AudioDecoderConfiguration(soap, tag ? tag : "tt:AudioDecoderConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__AudioOutputConfiguration(struct soap *soap, const tt__AudioOutputConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__AudioOutputConfiguration(soap, tag ? tag : "tt:AudioOutputConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__MetadataConfiguration(struct soap *soap, const tt__MetadataConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__MetadataConfiguration(soap, tag ? tag : "tt:MetadataConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__PTZConfiguration(struct soap *soap, const tt__PTZConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__PTZConfiguration(soap, tag ? tag : "tt:PTZConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__VideoAnalyticsConfiguration(struct soap *soap, const tt__VideoAnalyticsConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__VideoAnalyticsConfiguration(soap, tag ? tag : "tt:VideoAnalyticsConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__AudioEncoderConfiguration(struct soap *soap, const tt__AudioEncoderConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__AudioEncoderConfiguration(soap, tag ? tag : "tt:AudioEncoderConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__VideoEncoderConfiguration(struct soap *soap, const tt__VideoEncoderConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__VideoEncoderConfiguration(soap, tag ? tag : "tt:VideoEncoderConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__AudioSourceConfiguration(struct soap *soap, const tt__AudioSourceConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__AudioSourceConfiguration(soap, tag ? tag : "tt:AudioSourceConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tt__VideoSourceConfiguration(struct soap *soap, const tt__VideoSourceConfiguration *a, const char *tag, const char *type)
{
	if (soap_out__tt__VideoSourceConfiguration(soap, tag ? tag : "tt:VideoSourceConfiguration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__tds__Capabilities(struct soap *soap, const tds__DeviceServiceCapabilities *a, const char *tag, const char *type)
{
	if (soap_out__tds__Capabilities(soap, tag ? tag : "tds:Capabilities", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

void _wstop__TopicNamespaceType_Topic::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_wstop__TopicNamespaceType_Topic::documentation = NULL;
	soap_default_xsd__anyAttribute(soap, &this->_wstop__TopicNamespaceType_Topic::__anyAttribute);
	this->_wstop__TopicNamespaceType_Topic::MessagePattern = NULL;
	soap_default_std__vectorTemplateOfPointerTowstop__TopicType(soap, &this->_wstop__TopicNamespaceType_Topic::Topic);
	soap_default_std__vectorTemplateOfxsd__anyType(soap, &this->_wstop__TopicNamespaceType_Topic::__any);
	soap_default_xsd__NCName(soap, &this->_wstop__TopicNamespaceType_Topic::name);
	this->_wstop__TopicNamespaceType_Topic::messageTypes = NULL;
	this->_wstop__TopicNamespaceType_Topic::final_ = (bool)0;
	this->_wstop__TopicNamespaceType_Topic::parent = NULL;
}

void _wstop__TopicNamespaceType_Topic::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowstop__Documentation(soap, &this->_wstop__TopicNamespaceType_Topic::documentation);
	soap_serialize_PointerTowstop__QueryExpressionType(soap, &this->_wstop__TopicNamespaceType_Topic::MessagePattern);
	soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(soap, &this->_wstop__TopicNamespaceType_Topic::Topic);
	soap_serialize_std__vectorTemplateOfxsd__anyType(soap, &this->_wstop__TopicNamespaceType_Topic::__any);
#endif
}

int _wstop__TopicNamespaceType_Topic::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wstop__TopicNamespaceType_Topic(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, int id, const _wstop__TopicNamespaceType_Topic *a, const char *type)
{
	if (soap_out_xsd__anyAttribute(soap, "-anyAttribute", -1, &((_wstop__TopicNamespaceType_Topic*)a)->__anyAttribute, ""))
		return soap->error;
	soap_set_attr(soap, "name", soap_xsd__NCName2s(soap, ((_wstop__TopicNamespaceType_Topic*)a)->name), 1);
	if (((_wstop__TopicNamespaceType_Topic*)a)->messageTypes)
	{	soap_set_attr(soap, "messageTypes", soap_xsd__QName2s(soap, *((_wstop__TopicNamespaceType_Topic*)a)->messageTypes), 1);
	}
	if (((_wstop__TopicNamespaceType_Topic*)a)->final_ != (bool)0)
	{	soap_set_attr(soap, "final", soap_bool2s(soap, ((_wstop__TopicNamespaceType_Topic*)a)->final_), 1);
	}
	if (((_wstop__TopicNamespaceType_Topic*)a)->parent)
	{	soap_set_attr(soap, "parent", soap_wstop__ConcreteTopicExpression2s(soap, *((_wstop__TopicNamespaceType_Topic*)a)->parent), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wstop__TopicNamespaceType_Topic), type))
		return soap->error;
	if (soap_out_PointerTowstop__Documentation(soap, "wstop:documentation", -1, &a->_wstop__TopicNamespaceType_Topic::documentation, ""))
		return soap->error;
	if (soap_out_PointerTowstop__QueryExpressionType(soap, "wstop:MessagePattern", -1, &a->_wstop__TopicNamespaceType_Topic::MessagePattern, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowstop__TopicType(soap, "wstop:Topic", -1, &a->_wstop__TopicNamespaceType_Topic::Topic, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyType(soap, "-any", -1, &a->_wstop__TopicNamespaceType_Topic::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wstop__TopicNamespaceType_Topic::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__wstop__TopicNamespaceType_Topic(soap, tag, this, type);
}

SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__wstop__TopicNamespaceType_Topic(struct soap *soap, const char *tag, _wstop__TopicNamespaceType_Topic *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wstop__TopicNamespaceType_Topic*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wstop__TopicNamespaceType_Topic, sizeof(_wstop__TopicNamespaceType_Topic), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__wstop__TopicNamespaceType_Topic)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_wstop__TopicNamespaceType_Topic *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	soap_in_xsd__anyAttribute(soap, "-anyAttribute", &((_wstop__TopicNamespaceType_Topic*)a)->__anyAttribute, "xsd:anyAttribute");
	if (soap_s2xsd__NCName(soap, soap_attr_value(soap, "name", 5, 1), &((_wstop__TopicNamespaceType_Topic*)a)->name))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "messageTypes", 2, 0);
		if (t)
		{
			if (!(((_wstop__TopicNamespaceType_Topic*)a)->messageTypes = soap_new_xsd__QName(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2xsd__QName(soap, t, ((_wstop__TopicNamespaceType_Topic*)a)->messageTypes))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2bool(soap, soap_attr_value(soap, "final", 5, 0), &((_wstop__TopicNamespaceType_Topic*)a)->final_))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "parent", 5, 0);
		if (t)
		{
			if (!(((_wstop__TopicNamespaceType_Topic*)a)->parent = soap_new_wstop__ConcreteTopicExpression(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2wstop__ConcreteTopicExpression(soap, t, ((_wstop__TopicNamespaceType_Topic*)a)->parent))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_documentation1 = 1;
	size_t soap_flag_MessagePattern1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_documentation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowstop__Documentation(soap, "wstop:documentation", &a->_wstop__TopicNamespaceType_Topic::documentation, "wstop:Documentation"))
				{	soap_flag_documentation1--;
					continue;
				}
			}
			if (soap_flag_MessagePattern1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowstop__QueryExpressionType(soap, "wstop:MessagePattern", &a->_wstop__TopicNamespaceType_Topic::MessagePattern, "wstop:QueryExpressionType"))
				{	soap_flag_MessagePattern1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowstop__TopicType(soap, "wstop:Topic", &a->_wstop__TopicNamespaceType_Topic::Topic, "wstop:TopicType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfxsd__anyType(soap, "-any", &a->_wstop__TopicNamespaceType_Topic::__any, "xsd:anyType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wstop__TopicNamespaceType_Topic *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wstop__TopicNamespaceType_Topic, SOAP_TYPE__wstop__TopicNamespaceType_Topic, sizeof(_wstop__TopicNamespaceType_Topic), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wstop__TopicNamespaceType_Topic(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_wstop__TopicNamespaceType_Topic *p;
	size_t k = sizeof(_wstop__TopicNamespaceType_Topic);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wstop__TopicNamespaceType_Topic, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _wstop__TopicNamespaceType_Topic);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _wstop__TopicNamespaceType_Topic, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _wstop__TopicNamespaceType_Topic location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _wstop__TopicNamespaceType_Topic::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__wstop__TopicNamespaceType_Topic(soap, tag ? tag : "wstop:TopicNamespaceType-Topic", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wstop__TopicNamespaceType_Topic::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wstop__TopicNamespaceType_Topic(soap, this, tag, type);
}

SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic *p, const char *tag, const char *type)
{
	if ((p = soap_in__wstop__TopicNamespaceType_Topic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfxsd__anyType(soap, &this->_tev__CreatePullPointSubscription_SubscriptionPolicy::__any);
}

void _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__anyType(soap, &this->_tev__CreatePullPointSubscription_SubscriptionPolicy::__any);
#endif
}

int _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, int id, const _tev__CreatePullPointSubscription_SubscriptionPolicy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyType(soap, "-any", -1, &a->_tev__CreatePullPointSubscription_SubscriptionPolicy::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tev__CreatePullPointSubscription_SubscriptionPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, this, type);
}

SOAP_FMAC3 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, _tev__CreatePullPointSubscription_SubscriptionPolicy *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tev__CreatePullPointSubscription_SubscriptionPolicy*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy, sizeof(_tev__CreatePullPointSubscription_SubscriptionPolicy), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tev__CreatePullPointSubscription_SubscriptionPolicy *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfxsd__anyType(soap, "-any", &a->_tev__CreatePullPointSubscription_SubscriptionPolicy::__any, "xsd:anyType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tev__CreatePullPointSubscription_SubscriptionPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy, SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy, sizeof(_tev__CreatePullPointSubscription_SubscriptionPolicy), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tev__CreatePullPointSubscription_SubscriptionPolicy(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tev__CreatePullPointSubscription_SubscriptionPolicy *p;
	size_t k = sizeof(_tev__CreatePullPointSubscription_SubscriptionPolicy);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tev__CreatePullPointSubscription_SubscriptionPolicy);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tev__CreatePullPointSubscription_SubscriptionPolicy, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tev__CreatePullPointSubscription_SubscriptionPolicy location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, tag ? tag : "tev:CreatePullPointSubscription-SubscriptionPolicy", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tev__CreatePullPointSubscription_SubscriptionPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, this, tag, type);
}

SOAP_FMAC3 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _tev__CreatePullPointSubscription_SubscriptionPolicy *p, const char *tag, const char *type)
{
	if ((p = soap_in__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _wsrfbf__BaseFaultType_FaultCause::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__anyType(soap, &this->_wsrfbf__BaseFaultType_FaultCause::__any);
}

void _wsrfbf__BaseFaultType_FaultCause::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyType(soap, &this->_wsrfbf__BaseFaultType_FaultCause::__any);
#endif
}

int _wsrfbf__BaseFaultType_FaultCause::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsrfbf__BaseFaultType_FaultCause(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *tag, int id, const _wsrfbf__BaseFaultType_FaultCause *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause), type))
		return soap->error;
	if (soap_out_xsd__anyType(soap, "-any", -1, &a->_wsrfbf__BaseFaultType_FaultCause::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wsrfbf__BaseFaultType_FaultCause::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__wsrfbf__BaseFaultType_FaultCause(soap, tag, this, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_FaultCause *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsrfbf__BaseFaultType_FaultCause*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, sizeof(_wsrfbf__BaseFaultType_FaultCause), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_wsrfbf__BaseFaultType_FaultCause *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__anyType(soap, "-any", &a->_wsrfbf__BaseFaultType_FaultCause::__any, "xsd:anyType"))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsrfbf__BaseFaultType_FaultCause *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, sizeof(_wsrfbf__BaseFaultType_FaultCause), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsrfbf__BaseFaultType_FaultCause(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_wsrfbf__BaseFaultType_FaultCause *p;
	size_t k = sizeof(_wsrfbf__BaseFaultType_FaultCause);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _wsrfbf__BaseFaultType_FaultCause);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _wsrfbf__BaseFaultType_FaultCause, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _wsrfbf__BaseFaultType_FaultCause location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _wsrfbf__BaseFaultType_FaultCause::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__wsrfbf__BaseFaultType_FaultCause(soap, tag ? tag : "wsrfbf:BaseFaultType-FaultCause", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsrfbf__BaseFaultType_FaultCause::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsrfbf__BaseFaultType_FaultCause(soap, this, tag, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsrfbf__BaseFaultType_FaultCause(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _wsrfbf__BaseFaultType_Description::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_wsrfbf__BaseFaultType_Description::__item);
	this->_wsrfbf__BaseFaultType_Description::xml__lang = NULL;
}

void _wsrfbf__BaseFaultType_Description::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_wsrfbf__BaseFaultType_Description::__item, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_wsrfbf__BaseFaultType_Description::__item);
#endif
}

int _wsrfbf__BaseFaultType_Description::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsrfbf__BaseFaultType_Description(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, int id, const _wsrfbf__BaseFaultType_Description *a, const char *type)
{
	if (((_wsrfbf__BaseFaultType_Description*)a)->xml__lang)
	{	soap_set_attr(soap, "xml:lang", soap__xml__lang2s(soap, *((_wsrfbf__BaseFaultType_Description*)a)->xml__lang), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_std__string(soap, tag, id, &a->_wsrfbf__BaseFaultType_Description::__item, "");
}

void *_wsrfbf__BaseFaultType_Description::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__wsrfbf__BaseFaultType_Description(soap, tag, this, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_Description(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_Description *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (_wsrfbf__BaseFaultType_Description*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsrfbf__BaseFaultType_Description, sizeof(_wsrfbf__BaseFaultType_Description), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE__wsrfbf__BaseFaultType_Description)
		return (_wsrfbf__BaseFaultType_Description *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "xml:lang", 1, 0);
		if (t)
		{
			if (!(((_wsrfbf__BaseFaultType_Description*)a)->xml__lang = soap_new__xml__lang(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2_xml__lang(soap, t, ((_wsrfbf__BaseFaultType_Description*)a)->xml__lang))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_std__string(soap, tag, &a->_wsrfbf__BaseFaultType_Description::__item, ""))
		return NULL;
	return a;
}

SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsrfbf__BaseFaultType_Description(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_wsrfbf__BaseFaultType_Description *p;
	size_t k = sizeof(_wsrfbf__BaseFaultType_Description);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsrfbf__BaseFaultType_Description, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _wsrfbf__BaseFaultType_Description);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _wsrfbf__BaseFaultType_Description, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _wsrfbf__BaseFaultType_Description location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _wsrfbf__BaseFaultType_Description::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__wsrfbf__BaseFaultType_Description(soap, tag ? tag : "wsrfbf:BaseFaultType-Description", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsrfbf__BaseFaultType_Description::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsrfbf__BaseFaultType_Description(soap, this, tag, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsrfbf__BaseFaultType_Description(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _wsrfbf__BaseFaultType_ErrorCode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__anyURI(soap, &this->_wsrfbf__BaseFaultType_ErrorCode::dialect);
	soap_default_xsd__anyType(soap, &this->_wsrfbf__BaseFaultType_ErrorCode::__mixed);
}

void _wsrfbf__BaseFaultType_ErrorCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyType(soap, &this->_wsrfbf__BaseFaultType_ErrorCode::__mixed);
#endif
}

int _wsrfbf__BaseFaultType_ErrorCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsrfbf__BaseFaultType_ErrorCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *tag, int id, const _wsrfbf__BaseFaultType_ErrorCode *a, const char *type)
{
	soap_set_attr(soap, "dialect", soap_xsd__anyURI2s(soap, ((_wsrfbf__BaseFaultType_ErrorCode*)a)->dialect), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode), type))
		return soap->error;
	if (soap_out_xsd__anyType(soap, "-mixed", -1, &a->_wsrfbf__BaseFaultType_ErrorCode::__mixed, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wsrfbf__BaseFaultType_ErrorCode::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__wsrfbf__BaseFaultType_ErrorCode(soap, tag, this, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *tag, _wsrfbf__BaseFaultType_ErrorCode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsrfbf__BaseFaultType_ErrorCode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, sizeof(_wsrfbf__BaseFaultType_ErrorCode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_wsrfbf__BaseFaultType_ErrorCode *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2xsd__anyURI(soap, soap_attr_value(soap, "dialect", 4, 1), &((_wsrfbf__BaseFaultType_ErrorCode*)a)->dialect))
		return NULL;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___mixed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__anyType(soap, "-mixed", &a->_wsrfbf__BaseFaultType_ErrorCode::__mixed, "xsd:anyType"))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsrfbf__BaseFaultType_ErrorCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, sizeof(_wsrfbf__BaseFaultType_ErrorCode), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_wsrfbf__BaseFaultType_ErrorCode *p;
	size_t k = sizeof(_wsrfbf__BaseFaultType_ErrorCode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _wsrfbf__BaseFaultType_ErrorCode);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _wsrfbf__BaseFaultType_ErrorCode, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _wsrfbf__BaseFaultType_ErrorCode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _wsrfbf__BaseFaultType_ErrorCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__wsrfbf__BaseFaultType_ErrorCode(soap, tag ? tag : "wsrfbf:BaseFaultType-ErrorCode", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsrfbf__BaseFaultType_ErrorCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsrfbf__BaseFaultType_ErrorCode(soap, this, tag, type);
}

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsrfbf__BaseFaultType_ErrorCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _wsnt__Subscribe_SubscriptionPolicy::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfxsd__anyType(soap, &this->_wsnt__Subscribe_SubscriptionPolicy::__any);
}

void _wsnt__Subscribe_SubscriptionPolicy::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__anyType(soap, &this->_wsnt__Subscribe_SubscriptionPolicy::__any);
#endif
}

int _wsnt__Subscribe_SubscriptionPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__Subscribe_SubscriptionPolicy(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *tag, int id, const _wsnt__Subscribe_SubscriptionPolicy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyType(soap, "-any", -1, &a->_wsnt__Subscribe_SubscriptionPolicy::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wsnt__Subscribe_SubscriptionPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__wsnt__Subscribe_SubscriptionPolicy(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *tag, _wsnt__Subscribe_SubscriptionPolicy *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__Subscribe_SubscriptionPolicy*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, sizeof(_wsnt__Subscribe_SubscriptionPolicy), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_wsnt__Subscribe_SubscriptionPolicy *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfxsd__anyType(soap, "-any", &a->_wsnt__Subscribe_SubscriptionPolicy::__any, "xsd:anyType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__Subscribe_SubscriptionPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, sizeof(_wsnt__Subscribe_SubscriptionPolicy), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_wsnt__Subscribe_SubscriptionPolicy *p;
	size_t k = sizeof(_wsnt__Subscribe_SubscriptionPolicy);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _wsnt__Subscribe_SubscriptionPolicy);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _wsnt__Subscribe_SubscriptionPolicy, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _wsnt__Subscribe_SubscriptionPolicy location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _wsnt__Subscribe_SubscriptionPolicy::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__wsnt__Subscribe_SubscriptionPolicy(soap, tag ? tag : "wsnt:Subscribe-SubscriptionPolicy", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__Subscribe_SubscriptionPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__Subscribe_SubscriptionPolicy(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__Subscribe_SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _wsnt__NotificationMessageHolderType_Message::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__anyType(soap, &this->_wsnt__NotificationMessageHolderType_Message::__any);
}

void _wsnt__NotificationMessageHolderType_Message::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyType(soap, &this->_wsnt__NotificationMessageHolderType_Message::__any);
#endif
}

int _wsnt__NotificationMessageHolderType_Message::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__wsnt__NotificationMessageHolderType_Message(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationMessageHolderType_Message(struct soap *soap, const char *tag, int id, const _wsnt__NotificationMessageHolderType_Message *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message), type))
		return soap->error;
	if (soap_out_xsd__anyType(soap, "-any", -1, &a->_wsnt__NotificationMessageHolderType_Message::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_wsnt__NotificationMessageHolderType_Message::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__wsnt__NotificationMessageHolderType_Message(soap, tag, this, type);
}

SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__wsnt__NotificationMessageHolderType_Message(struct soap *soap, const char *tag, _wsnt__NotificationMessageHolderType_Message *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_wsnt__NotificationMessageHolderType_Message*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message, sizeof(_wsnt__NotificationMessageHolderType_Message), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__wsnt__NotificationMessageHolderType_Message)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_wsnt__NotificationMessageHolderType_Message *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__anyType(soap, "-any", &a->_wsnt__NotificationMessageHolderType_Message::__any, "xsd:anyType"))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_wsnt__NotificationMessageHolderType_Message *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message, sizeof(_wsnt__NotificationMessageHolderType_Message), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsnt__NotificationMessageHolderType_Message(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_wsnt__NotificationMessageHolderType_Message *p;
	size_t k = sizeof(_wsnt__NotificationMessageHolderType_Message);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsnt__NotificationMessageHolderType_Message, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _wsnt__NotificationMessageHolderType_Message);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _wsnt__NotificationMessageHolderType_Message, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _wsnt__NotificationMessageHolderType_Message location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _wsnt__NotificationMessageHolderType_Message::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__wsnt__NotificationMessageHolderType_Message(soap, tag ? tag : "wsnt:NotificationMessageHolderType-Message", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_wsnt__NotificationMessageHolderType_Message::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__wsnt__NotificationMessageHolderType_Message(soap, this, tag, type);
}

SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsnt__NotificationMessageHolderType_Message(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tt__ConfigDescription_Messages::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_tt__ConfigDescription_Messages::Source = NULL;
	this->_tt__ConfigDescription_Messages::Key = NULL;
	this->_tt__ConfigDescription_Messages::Data = NULL;
	this->_tt__ConfigDescription_Messages::Extension = NULL;
	this->_tt__ConfigDescription_Messages::IsProperty = NULL;
	soap_default_xsd__anyAttribute(soap, &this->_tt__ConfigDescription_Messages::__anyAttribute);
	soap_default_std__string(soap, &this->_tt__ConfigDescription_Messages::ParentTopic);
}

void _tt__ConfigDescription_Messages::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTott__ItemListDescription(soap, &this->_tt__ConfigDescription_Messages::Source);
	soap_serialize_PointerTott__ItemListDescription(soap, &this->_tt__ConfigDescription_Messages::Key);
	soap_serialize_PointerTott__ItemListDescription(soap, &this->_tt__ConfigDescription_Messages::Data);
	soap_serialize_PointerTott__MessageDescriptionExtension(soap, &this->_tt__ConfigDescription_Messages::Extension);
	soap_embedded(soap, &this->_tt__ConfigDescription_Messages::ParentTopic, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_tt__ConfigDescription_Messages::ParentTopic);
#endif
}

int _tt__ConfigDescription_Messages::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tt__ConfigDescription_Messages(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ConfigDescription_Messages(struct soap *soap, const char *tag, int id, const _tt__ConfigDescription_Messages *a, const char *type)
{
	if (((_tt__ConfigDescription_Messages*)a)->IsProperty)
	{	soap_set_attr(soap, "IsProperty", soap_bool2s(soap, *((_tt__ConfigDescription_Messages*)a)->IsProperty), 1);
	}
	if (soap_out_xsd__anyAttribute(soap, "-anyAttribute", -1, &((_tt__ConfigDescription_Messages*)a)->__anyAttribute, ""))
		return soap->error;
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tt__ConfigDescription_Messages), type))
		return soap->error;
	if (soap_out_PointerTott__ItemListDescription(soap, "tt:Source", -1, &a->_tt__ConfigDescription_Messages::Source, ""))
		return soap->error;
	if (soap_out_PointerTott__ItemListDescription(soap, "tt:Key", -1, &a->_tt__ConfigDescription_Messages::Key, ""))
		return soap->error;
	if (soap_out_PointerTott__ItemListDescription(soap, "tt:Data", -1, &a->_tt__ConfigDescription_Messages::Data, ""))
		return soap->error;
	if (soap_out_PointerTott__MessageDescriptionExtension(soap, "tt:Extension", -1, &a->_tt__ConfigDescription_Messages::Extension, ""))
		return soap->error;
	if (soap_out_std__string(soap, "tt:ParentTopic", -1, &a->_tt__ConfigDescription_Messages::ParentTopic, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tt__ConfigDescription_Messages::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tt__ConfigDescription_Messages(soap, tag, this, type);
}

SOAP_FMAC3 _tt__ConfigDescription_Messages * SOAP_FMAC4 soap_in__tt__ConfigDescription_Messages(struct soap *soap, const char *tag, _tt__ConfigDescription_Messages *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tt__ConfigDescription_Messages*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tt__ConfigDescription_Messages, sizeof(_tt__ConfigDescription_Messages), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tt__ConfigDescription_Messages)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tt__ConfigDescription_Messages *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "IsProperty", 5, 0);
		if (t)
		{
			if (!(((_tt__ConfigDescription_Messages*)a)->IsProperty = (bool *)soap_malloc(soap, sizeof(bool))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2bool(soap, t, ((_tt__ConfigDescription_Messages*)a)->IsProperty))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	soap_in_xsd__anyAttribute(soap, "-anyAttribute", &((_tt__ConfigDescription_Messages*)a)->__anyAttribute, "xsd:anyAttribute");
	size_t soap_flag_Source1 = 1;
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_Extension1 = 1;
	size_t soap_flag_ParentTopic1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Source1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTott__ItemListDescription(soap, "tt:Source", &a->_tt__ConfigDescription_Messages::Source, "tt:ItemListDescription"))
				{	soap_flag_Source1--;
					continue;
				}
			}
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTott__ItemListDescription(soap, "tt:Key", &a->_tt__ConfigDescription_Messages::Key, "tt:ItemListDescription"))
				{	soap_flag_Key1--;
					continue;
				}
			}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTott__ItemListDescription(soap, "tt:Data", &a->_tt__ConfigDescription_Messages::Data, "tt:ItemListDescription"))
				{	soap_flag_Data1--;
					continue;
				}
			}
			if (soap_flag_Extension1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTott__MessageDescriptionExtension(soap, "tt:Extension", &a->_tt__ConfigDescription_Messages::Extension, "tt:MessageDescriptionExtension"))
				{	soap_flag_Extension1--;
					continue;
				}
			}
			if (soap_flag_ParentTopic1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "tt:ParentTopic", &a->_tt__ConfigDescription_Messages::ParentTopic, "xsd:string"))
				{	soap_flag_ParentTopic1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ParentTopic1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_tt__ConfigDescription_Messages *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tt__ConfigDescription_Messages, SOAP_TYPE__tt__ConfigDescription_Messages, sizeof(_tt__ConfigDescription_Messages), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tt__ConfigDescription_Messages * SOAP_FMAC2 soap_instantiate__tt__ConfigDescription_Messages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tt__ConfigDescription_Messages(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tt__ConfigDescription_Messages *p;
	size_t k = sizeof(_tt__ConfigDescription_Messages);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tt__ConfigDescription_Messages, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tt__ConfigDescription_Messages);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tt__ConfigDescription_Messages, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tt__ConfigDescription_Messages location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tt__ConfigDescription_Messages::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tt__ConfigDescription_Messages(soap, tag ? tag : "tt:ConfigDescription-Messages", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tt__ConfigDescription_Messages::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tt__ConfigDescription_Messages(soap, this, tag, type);
}

SOAP_FMAC3 _tt__ConfigDescription_Messages * SOAP_FMAC4 soap_get__tt__ConfigDescription_Messages(struct soap *soap, _tt__ConfigDescription_Messages *p, const char *tag, const char *type)
{
	if ((p = soap_in__tt__ConfigDescription_Messages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tt__ItemListDescription_ElementItemDescription::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_tt__ItemListDescription_ElementItemDescription::Name);
	soap_default_xsd__QName(soap, &this->_tt__ItemListDescription_ElementItemDescription::Type);
}

void _tt__ItemListDescription_ElementItemDescription::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _tt__ItemListDescription_ElementItemDescription::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tt__ItemListDescription_ElementItemDescription(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemListDescription_ElementItemDescription(struct soap *soap, const char *tag, int id, const _tt__ItemListDescription_ElementItemDescription *a, const char *type)
{
	soap_set_attr(soap, "Name", soap_std__string2s(soap, ((_tt__ItemListDescription_ElementItemDescription*)a)->Name), 1);
	soap_set_attr(soap, "Type", soap_xsd__QName2s(soap, ((_tt__ItemListDescription_ElementItemDescription*)a)->Type), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tt__ItemListDescription_ElementItemDescription), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tt__ItemListDescription_ElementItemDescription::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tt__ItemListDescription_ElementItemDescription(soap, tag, this, type);
}

SOAP_FMAC3 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_in__tt__ItemListDescription_ElementItemDescription(struct soap *soap, const char *tag, _tt__ItemListDescription_ElementItemDescription *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tt__ItemListDescription_ElementItemDescription*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tt__ItemListDescription_ElementItemDescription, sizeof(_tt__ItemListDescription_ElementItemDescription), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tt__ItemListDescription_ElementItemDescription)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tt__ItemListDescription_ElementItemDescription *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2std__string(soap, soap_attr_value(soap, "Name", 1, 1), &((_tt__ItemListDescription_ElementItemDescription*)a)->Name))
		return NULL;
	if (soap_s2xsd__QName(soap, soap_attr_value(soap, "Type", 2, 1), &((_tt__ItemListDescription_ElementItemDescription*)a)->Type))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tt__ItemListDescription_ElementItemDescription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tt__ItemListDescription_ElementItemDescription, SOAP_TYPE__tt__ItemListDescription_ElementItemDescription, sizeof(_tt__ItemListDescription_ElementItemDescription), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_ElementItemDescription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tt__ItemListDescription_ElementItemDescription(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tt__ItemListDescription_ElementItemDescription *p;
	size_t k = sizeof(_tt__ItemListDescription_ElementItemDescription);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tt__ItemListDescription_ElementItemDescription, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tt__ItemListDescription_ElementItemDescription);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tt__ItemListDescription_ElementItemDescription, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tt__ItemListDescription_ElementItemDescription location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tt__ItemListDescription_ElementItemDescription::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tt__ItemListDescription_ElementItemDescription(soap, tag ? tag : "tt:ItemListDescription-ElementItemDescription", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tt__ItemListDescription_ElementItemDescription::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tt__ItemListDescription_ElementItemDescription(soap, this, tag, type);
}

SOAP_FMAC3 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_get__tt__ItemListDescription_ElementItemDescription(struct soap *soap, _tt__ItemListDescription_ElementItemDescription *p, const char *tag, const char *type)
{
	if ((p = soap_in__tt__ItemListDescription_ElementItemDescription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tt__ItemListDescription_SimpleItemDescription::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_tt__ItemListDescription_SimpleItemDescription::Name);
	soap_default_xsd__QName(soap, &this->_tt__ItemListDescription_SimpleItemDescription::Type);
}

void _tt__ItemListDescription_SimpleItemDescription::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _tt__ItemListDescription_SimpleItemDescription::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tt__ItemListDescription_SimpleItemDescription(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, const char *tag, int id, const _tt__ItemListDescription_SimpleItemDescription *a, const char *type)
{
	soap_set_attr(soap, "Name", soap_std__string2s(soap, ((_tt__ItemListDescription_SimpleItemDescription*)a)->Name), 1);
	soap_set_attr(soap, "Type", soap_xsd__QName2s(soap, ((_tt__ItemListDescription_SimpleItemDescription*)a)->Type), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tt__ItemListDescription_SimpleItemDescription::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tt__ItemListDescription_SimpleItemDescription(soap, tag, this, type);
}

SOAP_FMAC3 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_in__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, const char *tag, _tt__ItemListDescription_SimpleItemDescription *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tt__ItemListDescription_SimpleItemDescription*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription, sizeof(_tt__ItemListDescription_SimpleItemDescription), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tt__ItemListDescription_SimpleItemDescription *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2std__string(soap, soap_attr_value(soap, "Name", 1, 1), &((_tt__ItemListDescription_SimpleItemDescription*)a)->Name))
		return NULL;
	if (soap_s2xsd__QName(soap, soap_attr_value(soap, "Type", 2, 1), &((_tt__ItemListDescription_SimpleItemDescription*)a)->Type))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tt__ItemListDescription_SimpleItemDescription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription, SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription, sizeof(_tt__ItemListDescription_SimpleItemDescription), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tt__ItemListDescription_SimpleItemDescription(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tt__ItemListDescription_SimpleItemDescription *p;
	size_t k = sizeof(_tt__ItemListDescription_SimpleItemDescription);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tt__ItemListDescription_SimpleItemDescription);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tt__ItemListDescription_SimpleItemDescription, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tt__ItemListDescription_SimpleItemDescription location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tt__ItemListDescription_SimpleItemDescription::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tt__ItemListDescription_SimpleItemDescription(soap, tag ? tag : "tt:ItemListDescription-SimpleItemDescription", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tt__ItemListDescription_SimpleItemDescription::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tt__ItemListDescription_SimpleItemDescription(soap, this, tag, type);
}

SOAP_FMAC3 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_get__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, _tt__ItemListDescription_SimpleItemDescription *p, const char *tag, const char *type)
{
	if ((p = soap_in__tt__ItemListDescription_SimpleItemDescription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tt__ItemList_ElementItem::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__anyType(soap, &this->_tt__ItemList_ElementItem::__any);
	soap_default_std__string(soap, &this->_tt__ItemList_ElementItem::Name);
}

void _tt__ItemList_ElementItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyType(soap, &this->_tt__ItemList_ElementItem::__any);
#endif
}

int _tt__ItemList_ElementItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tt__ItemList_ElementItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_ElementItem(struct soap *soap, const char *tag, int id, const _tt__ItemList_ElementItem *a, const char *type)
{
	soap_set_attr(soap, "Name", soap_std__string2s(soap, ((_tt__ItemList_ElementItem*)a)->Name), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tt__ItemList_ElementItem), type))
		return soap->error;
	if (soap_out_xsd__anyType(soap, "-any", -1, &a->_tt__ItemList_ElementItem::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tt__ItemList_ElementItem::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tt__ItemList_ElementItem(soap, tag, this, type);
}

SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_in__tt__ItemList_ElementItem(struct soap *soap, const char *tag, _tt__ItemList_ElementItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tt__ItemList_ElementItem*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tt__ItemList_ElementItem, sizeof(_tt__ItemList_ElementItem), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tt__ItemList_ElementItem)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tt__ItemList_ElementItem *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2std__string(soap, soap_attr_value(soap, "Name", 1, 1), &((_tt__ItemList_ElementItem*)a)->Name))
		return NULL;
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__anyType(soap, "-any", &a->_tt__ItemList_ElementItem::__any, "xsd:anyType"))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tt__ItemList_ElementItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tt__ItemList_ElementItem, SOAP_TYPE__tt__ItemList_ElementItem, sizeof(_tt__ItemList_ElementItem), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tt__ItemList_ElementItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_ElementItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tt__ItemList_ElementItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tt__ItemList_ElementItem *p;
	size_t k = sizeof(_tt__ItemList_ElementItem);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tt__ItemList_ElementItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tt__ItemList_ElementItem);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tt__ItemList_ElementItem, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tt__ItemList_ElementItem location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tt__ItemList_ElementItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tt__ItemList_ElementItem(soap, tag ? tag : "tt:ItemList-ElementItem", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tt__ItemList_ElementItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tt__ItemList_ElementItem(soap, this, tag, type);
}

SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_get__tt__ItemList_ElementItem(struct soap *soap, _tt__ItemList_ElementItem *p, const char *tag, const char *type)
{
	if ((p = soap_in__tt__ItemList_ElementItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tt__ItemList_SimpleItem::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_tt__ItemList_SimpleItem::Name);
	soap_default_xsd__anySimpleType(soap, &this->_tt__ItemList_SimpleItem::Value);
}

void _tt__ItemList_SimpleItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _tt__ItemList_SimpleItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tt__ItemList_SimpleItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_SimpleItem(struct soap *soap, const char *tag, int id, const _tt__ItemList_SimpleItem *a, const char *type)
{
	soap_set_attr(soap, "Name", soap_std__string2s(soap, ((_tt__ItemList_SimpleItem*)a)->Name), 1);
	soap_set_attr(soap, "Value", soap_xsd__anySimpleType2s(soap, ((_tt__ItemList_SimpleItem*)a)->Value), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tt__ItemList_SimpleItem), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tt__ItemList_SimpleItem::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tt__ItemList_SimpleItem(soap, tag, this, type);
}

SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_in__tt__ItemList_SimpleItem(struct soap *soap, const char *tag, _tt__ItemList_SimpleItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tt__ItemList_SimpleItem*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tt__ItemList_SimpleItem, sizeof(_tt__ItemList_SimpleItem), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tt__ItemList_SimpleItem)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tt__ItemList_SimpleItem *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2std__string(soap, soap_attr_value(soap, "Name", 1, 1), &((_tt__ItemList_SimpleItem*)a)->Name))
		return NULL;
	if (soap_s2xsd__anySimpleType(soap, soap_attr_value(soap, "Value", 1, 1), &((_tt__ItemList_SimpleItem*)a)->Value))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tt__ItemList_SimpleItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tt__ItemList_SimpleItem, SOAP_TYPE__tt__ItemList_SimpleItem, sizeof(_tt__ItemList_SimpleItem), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tt__ItemList_SimpleItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_SimpleItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tt__ItemList_SimpleItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tt__ItemList_SimpleItem *p;
	size_t k = sizeof(_tt__ItemList_SimpleItem);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tt__ItemList_SimpleItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tt__ItemList_SimpleItem);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tt__ItemList_SimpleItem, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tt__ItemList_SimpleItem location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tt__ItemList_SimpleItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tt__ItemList_SimpleItem(soap, tag ? tag : "tt:ItemList-SimpleItem", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tt__ItemList_SimpleItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tt__ItemList_SimpleItem(soap, this, tag, type);
}

SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_get__tt__ItemList_SimpleItem(struct soap *soap, _tt__ItemList_SimpleItem *p, const char *tag, const char *type)
{
	if ((p = soap_in__tt__ItemList_SimpleItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tt__EventSubscription_SubscriptionPolicy::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfxsd__anyType(soap, &this->_tt__EventSubscription_SubscriptionPolicy::__any);
}

void _tt__EventSubscription_SubscriptionPolicy::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__anyType(soap, &this->_tt__EventSubscription_SubscriptionPolicy::__any);
#endif
}

int _tt__EventSubscription_SubscriptionPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tt__EventSubscription_SubscriptionPolicy(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, int id, const _tt__EventSubscription_SubscriptionPolicy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyType(soap, "-any", -1, &a->_tt__EventSubscription_SubscriptionPolicy::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tt__EventSubscription_SubscriptionPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tt__EventSubscription_SubscriptionPolicy(soap, tag, this, type);
}

SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, const char *tag, _tt__EventSubscription_SubscriptionPolicy *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tt__EventSubscription_SubscriptionPolicy*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy, sizeof(_tt__EventSubscription_SubscriptionPolicy), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tt__EventSubscription_SubscriptionPolicy *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfxsd__anyType(soap, "-any", &a->_tt__EventSubscription_SubscriptionPolicy::__any, "xsd:anyType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tt__EventSubscription_SubscriptionPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy, SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy, sizeof(_tt__EventSubscription_SubscriptionPolicy), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tt__EventSubscription_SubscriptionPolicy(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tt__EventSubscription_SubscriptionPolicy *p;
	size_t k = sizeof(_tt__EventSubscription_SubscriptionPolicy);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tt__EventSubscription_SubscriptionPolicy);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tt__EventSubscription_SubscriptionPolicy, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tt__EventSubscription_SubscriptionPolicy location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tt__EventSubscription_SubscriptionPolicy::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tt__EventSubscription_SubscriptionPolicy(soap, tag ? tag : "tt:EventSubscription-SubscriptionPolicy", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tt__EventSubscription_SubscriptionPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tt__EventSubscription_SubscriptionPolicy(soap, this, tag, type);
}

SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, _tt__EventSubscription_SubscriptionPolicy *p, const char *tag, const char *type)
{
	if ((p = soap_in__tt__EventSubscription_SubscriptionPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tds__GetSystemUrisResponse_Extension::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfxsd__anyType(soap, &this->_tds__GetSystemUrisResponse_Extension::__any);
}

void _tds__GetSystemUrisResponse_Extension::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__anyType(soap, &this->_tds__GetSystemUrisResponse_Extension::__any);
#endif
}

int _tds__GetSystemUrisResponse_Extension::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tds__GetSystemUrisResponse_Extension(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemUrisResponse_Extension(struct soap *soap, const char *tag, int id, const _tds__GetSystemUrisResponse_Extension *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tds__GetSystemUrisResponse_Extension), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyType(soap, "-any", -1, &a->_tds__GetSystemUrisResponse_Extension::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tds__GetSystemUrisResponse_Extension::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tds__GetSystemUrisResponse_Extension(soap, tag, this, type);
}

SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC4 soap_in__tds__GetSystemUrisResponse_Extension(struct soap *soap, const char *tag, _tds__GetSystemUrisResponse_Extension *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tds__GetSystemUrisResponse_Extension*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tds__GetSystemUrisResponse_Extension, sizeof(_tds__GetSystemUrisResponse_Extension), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tds__GetSystemUrisResponse_Extension)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tds__GetSystemUrisResponse_Extension *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfxsd__anyType(soap, "-any", &a->_tds__GetSystemUrisResponse_Extension::__any, "xsd:anyType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tds__GetSystemUrisResponse_Extension *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tds__GetSystemUrisResponse_Extension, SOAP_TYPE__tds__GetSystemUrisResponse_Extension, sizeof(_tds__GetSystemUrisResponse_Extension), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse_Extension(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tds__GetSystemUrisResponse_Extension(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tds__GetSystemUrisResponse_Extension *p;
	size_t k = sizeof(_tds__GetSystemUrisResponse_Extension);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tds__GetSystemUrisResponse_Extension, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tds__GetSystemUrisResponse_Extension);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tds__GetSystemUrisResponse_Extension, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tds__GetSystemUrisResponse_Extension location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tds__GetSystemUrisResponse_Extension::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tds__GetSystemUrisResponse_Extension(soap, tag ? tag : "tds:GetSystemUrisResponse-Extension", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tds__GetSystemUrisResponse_Extension::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tds__GetSystemUrisResponse_Extension(soap, this, tag, type);
}

SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC4 soap_get__tds__GetSystemUrisResponse_Extension(struct soap *soap, _tds__GetSystemUrisResponse_Extension *p, const char *tag, const char *type)
{
	if ((p = soap_in__tds__GetSystemUrisResponse_Extension(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tds__StorageConfigurationData_Extension::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfxsd__anyType(soap, &this->_tds__StorageConfigurationData_Extension::__any);
}

void _tds__StorageConfigurationData_Extension::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__anyType(soap, &this->_tds__StorageConfigurationData_Extension::__any);
#endif
}

int _tds__StorageConfigurationData_Extension::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tds__StorageConfigurationData_Extension(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StorageConfigurationData_Extension(struct soap *soap, const char *tag, int id, const _tds__StorageConfigurationData_Extension *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tds__StorageConfigurationData_Extension), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyType(soap, "-any", -1, &a->_tds__StorageConfigurationData_Extension::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tds__StorageConfigurationData_Extension::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tds__StorageConfigurationData_Extension(soap, tag, this, type);
}

SOAP_FMAC3 _tds__StorageConfigurationData_Extension * SOAP_FMAC4 soap_in__tds__StorageConfigurationData_Extension(struct soap *soap, const char *tag, _tds__StorageConfigurationData_Extension *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tds__StorageConfigurationData_Extension*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tds__StorageConfigurationData_Extension, sizeof(_tds__StorageConfigurationData_Extension), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tds__StorageConfigurationData_Extension)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tds__StorageConfigurationData_Extension *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfxsd__anyType(soap, "-any", &a->_tds__StorageConfigurationData_Extension::__any, "xsd:anyType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tds__StorageConfigurationData_Extension *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tds__StorageConfigurationData_Extension, SOAP_TYPE__tds__StorageConfigurationData_Extension, sizeof(_tds__StorageConfigurationData_Extension), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tds__StorageConfigurationData_Extension * SOAP_FMAC2 soap_instantiate__tds__StorageConfigurationData_Extension(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tds__StorageConfigurationData_Extension(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tds__StorageConfigurationData_Extension *p;
	size_t k = sizeof(_tds__StorageConfigurationData_Extension);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tds__StorageConfigurationData_Extension, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tds__StorageConfigurationData_Extension);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tds__StorageConfigurationData_Extension, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tds__StorageConfigurationData_Extension location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tds__StorageConfigurationData_Extension::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tds__StorageConfigurationData_Extension(soap, tag ? tag : "tds:StorageConfigurationData-Extension", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tds__StorageConfigurationData_Extension::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tds__StorageConfigurationData_Extension(soap, this, tag, type);
}

SOAP_FMAC3 _tds__StorageConfigurationData_Extension * SOAP_FMAC4 soap_get__tds__StorageConfigurationData_Extension(struct soap *soap, _tds__StorageConfigurationData_Extension *p, const char *tag, const char *type)
{
	if ((p = soap_in__tds__StorageConfigurationData_Extension(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tds__UserCredential_Extension::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfxsd__anyType(soap, &this->_tds__UserCredential_Extension::__any);
}

void _tds__UserCredential_Extension::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfxsd__anyType(soap, &this->_tds__UserCredential_Extension::__any);
#endif
}

int _tds__UserCredential_Extension::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tds__UserCredential_Extension(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__UserCredential_Extension(struct soap *soap, const char *tag, int id, const _tds__UserCredential_Extension *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tds__UserCredential_Extension), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__anyType(soap, "-any", -1, &a->_tds__UserCredential_Extension::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tds__UserCredential_Extension::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tds__UserCredential_Extension(soap, tag, this, type);
}

SOAP_FMAC3 _tds__UserCredential_Extension * SOAP_FMAC4 soap_in__tds__UserCredential_Extension(struct soap *soap, const char *tag, _tds__UserCredential_Extension *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tds__UserCredential_Extension*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tds__UserCredential_Extension, sizeof(_tds__UserCredential_Extension), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tds__UserCredential_Extension)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tds__UserCredential_Extension *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfxsd__anyType(soap, "-any", &a->_tds__UserCredential_Extension::__any, "xsd:anyType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tds__UserCredential_Extension *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tds__UserCredential_Extension, SOAP_TYPE__tds__UserCredential_Extension, sizeof(_tds__UserCredential_Extension), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tds__UserCredential_Extension * SOAP_FMAC2 soap_instantiate__tds__UserCredential_Extension(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tds__UserCredential_Extension(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tds__UserCredential_Extension *p;
	size_t k = sizeof(_tds__UserCredential_Extension);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tds__UserCredential_Extension, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tds__UserCredential_Extension);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tds__UserCredential_Extension, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tds__UserCredential_Extension location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tds__UserCredential_Extension::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tds__UserCredential_Extension(soap, tag ? tag : "tds:UserCredential-Extension", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tds__UserCredential_Extension::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tds__UserCredential_Extension(soap, this, tag, type);
}

SOAP_FMAC3 _tds__UserCredential_Extension * SOAP_FMAC4 soap_get__tds__UserCredential_Extension(struct soap *soap, _tds__UserCredential_Extension *p, const char *tag, const char *type)
{
	if ((p = soap_in__tds__UserCredential_Extension(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tds__Service_Capabilities::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__anyType(soap, &this->_tds__Service_Capabilities::__any);
}

void _tds__Service_Capabilities::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyType(soap, &this->_tds__Service_Capabilities::__any);
#endif
}

int _tds__Service_Capabilities::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tds__Service_Capabilities(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__Service_Capabilities(struct soap *soap, const char *tag, int id, const _tds__Service_Capabilities *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tds__Service_Capabilities), type))
		return soap->error;
	if (soap_out_xsd__anyType(soap, "-any", -1, &a->_tds__Service_Capabilities::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_tds__Service_Capabilities::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__tds__Service_Capabilities(soap, tag, this, type);
}

SOAP_FMAC3 _tds__Service_Capabilities * SOAP_FMAC4 soap_in__tds__Service_Capabilities(struct soap *soap, const char *tag, _tds__Service_Capabilities *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tds__Service_Capabilities*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__tds__Service_Capabilities, sizeof(_tds__Service_Capabilities), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__tds__Service_Capabilities)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_tds__Service_Capabilities *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__anyType(soap, "-any", &a->_tds__Service_Capabilities::__any, "xsd:anyType"))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tds__Service_Capabilities *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tds__Service_Capabilities, SOAP_TYPE__tds__Service_Capabilities, sizeof(_tds__Service_Capabilities), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _tds__Service_Capabilities * SOAP_FMAC2 soap_instantiate__tds__Service_Capabilities(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tds__Service_Capabilities(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_tds__Service_Capabilities *p;
	size_t k = sizeof(_tds__Service_Capabilities);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__tds__Service_Capabilities, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _tds__Service_Capabilities);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _tds__Service_Capabilities, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _tds__Service_Capabilities location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _tds__Service_Capabilities::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__tds__Service_Capabilities(soap, tag ? tag : "tds:Service-Capabilities", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tds__Service_Capabilities::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tds__Service_Capabilities(soap, this, tag, type);
}

SOAP_FMAC3 _tds__Service_Capabilities * SOAP_FMAC4 soap_get__tds__Service_Capabilities(struct soap *soap, _tds__Service_Capabilities *p, const char *tag, const char *type)
{
	if ((p = soap_in__tds__Service_Capabilities(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void tt__RecordingJobReference__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_tt__RecordingJobReference(soap, &this->tt__RecordingJobReference__::__item);
}

void tt__RecordingJobReference__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_tt__RecordingJobReference(soap, &this->tt__RecordingJobReference__::__item);
#endif
}

int tt__RecordingJobReference__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tt__RecordingJobReference__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobReference__(struct soap *soap, const char *tag, int id, const tt__RecordingJobReference__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_tt__RecordingJobReference(soap, tag, id, &a->tt__RecordingJobReference__::__item, "");
}

void *tt__RecordingJobReference__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_tt__RecordingJobReference__(soap, tag, this, type);
}

SOAP_FMAC3 tt__RecordingJobReference__ * SOAP_FMAC4 soap_in_tt__RecordingJobReference__(struct soap *soap, const char *tag, tt__RecordingJobReference__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (tt__RecordingJobReference__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__RecordingJobReference__, sizeof(tt__RecordingJobReference__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_tt__RecordingJobReference__)
		return (tt__RecordingJobReference__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_tt__RecordingJobReference(soap, tag, &a->tt__RecordingJobReference__::__item, "tt:RecordingJobReference"))
		return NULL;
	return a;
}

SOAP_FMAC1 tt__RecordingJobReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobReference__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tt__RecordingJobReference__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	tt__RecordingJobReference__ *p;
	size_t k = sizeof(tt__RecordingJobReference__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_tt__RecordingJobReference__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, tt__RecordingJobReference__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, tt__RecordingJobReference__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated tt__RecordingJobReference__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int tt__RecordingJobReference__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_tt__RecordingJobReference__(soap, tag ? tag : "tt:RecordingJobReference", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tt__RecordingJobReference__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tt__RecordingJobReference__(soap, this, tag, type);
}

SOAP_FMAC3 tt__RecordingJobReference__ * SOAP_FMAC4 soap_get_tt__RecordingJobReference__(struct soap *soap, tt__RecordingJobReference__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__RecordingJobReference__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void tt__JobToken__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_tt__JobToken(soap, &this->tt__JobToken__::__item);
}

void tt__JobToken__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_tt__JobToken(soap, &this->tt__JobToken__::__item);
#endif
}

int tt__JobToken__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tt__JobToken__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JobToken__(struct soap *soap, const char *tag, int id, const tt__JobToken__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_tt__JobToken(soap, tag, id, &a->tt__JobToken__::__item, "");
}

void *tt__JobToken__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_tt__JobToken__(soap, tag, this, type);
}

SOAP_FMAC3 tt__JobToken__ * SOAP_FMAC4 soap_in_tt__JobToken__(struct soap *soap, const char *tag, tt__JobToken__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (tt__JobToken__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__JobToken__, sizeof(tt__JobToken__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_tt__JobToken__)
		return (tt__JobToken__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_tt__JobToken(soap, tag, &a->tt__JobToken__::__item, "tt:JobToken"))
		return NULL;
	return a;
}

SOAP_FMAC1 tt__JobToken__ * SOAP_FMAC2 soap_instantiate_tt__JobToken__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tt__JobToken__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	tt__JobToken__ *p;
	size_t k = sizeof(tt__JobToken__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_tt__JobToken__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, tt__JobToken__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, tt__JobToken__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated tt__JobToken__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int tt__JobToken__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_tt__JobToken__(soap, tag ? tag : "tt:JobToken", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tt__JobToken__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tt__JobToken__(soap, this, tag, type);
}

SOAP_FMAC3 tt__JobToken__ * SOAP_FMAC4 soap_get_tt__JobToken__(struct soap *soap, tt__JobToken__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__JobToken__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void tt__TrackReference__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_tt__TrackReference(soap, &this->tt__TrackReference__::__item);
}

void tt__TrackReference__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_tt__TrackReference(soap, &this->tt__TrackReference__::__item);
#endif
}

int tt__TrackReference__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tt__TrackReference__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackReference__(struct soap *soap, const char *tag, int id, const tt__TrackReference__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_tt__TrackReference(soap, tag, id, &a->tt__TrackReference__::__item, "");
}

void *tt__TrackReference__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_tt__TrackReference__(soap, tag, this, type);
}

SOAP_FMAC3 tt__TrackReference__ * SOAP_FMAC4 soap_in_tt__TrackReference__(struct soap *soap, const char *tag, tt__TrackReference__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (tt__TrackReference__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__TrackReference__, sizeof(tt__TrackReference__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_tt__TrackReference__)
		return (tt__TrackReference__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_tt__TrackReference(soap, tag, &a->tt__TrackReference__::__item, "tt:TrackReference"))
		return NULL;
	return a;
}

SOAP_FMAC1 tt__TrackReference__ * SOAP_FMAC2 soap_instantiate_tt__TrackReference__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tt__TrackReference__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	tt__TrackReference__ *p;
	size_t k = sizeof(tt__TrackReference__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_tt__TrackReference__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, tt__TrackReference__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, tt__TrackReference__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated tt__TrackReference__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int tt__TrackReference__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_tt__TrackReference__(soap, tag ? tag : "tt:TrackReference", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tt__TrackReference__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tt__TrackReference__(soap, this, tag, type);
}

SOAP_FMAC3 tt__TrackReference__ * SOAP_FMAC4 soap_get_tt__TrackReference__(struct soap *soap, tt__TrackReference__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__TrackReference__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void tt__RecordingReference__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_tt__RecordingReference(soap, &this->tt__RecordingReference__::__item);
}

void tt__RecordingReference__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_tt__RecordingReference(soap, &this->tt__RecordingReference__::__item);
#endif
}

int tt__RecordingReference__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tt__RecordingReference__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingReference__(struct soap *soap, const char *tag, int id, const tt__RecordingReference__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_tt__RecordingReference(soap, tag, id, &a->tt__RecordingReference__::__item, "");
}

void *tt__RecordingReference__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_tt__RecordingReference__(soap, tag, this, type);
}

SOAP_FMAC3 tt__RecordingReference__ * SOAP_FMAC4 soap_in_tt__RecordingReference__(struct soap *soap, const char *tag, tt__RecordingReference__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (tt__RecordingReference__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__RecordingReference__, sizeof(tt__RecordingReference__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_tt__RecordingReference__)
		return (tt__RecordingReference__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_tt__RecordingReference(soap, tag, &a->tt__RecordingReference__::__item, "tt:RecordingReference"))
		return NULL;
	return a;
}

SOAP_FMAC1 tt__RecordingReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingReference__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tt__RecordingReference__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	tt__RecordingReference__ *p;
	size_t k = sizeof(tt__RecordingReference__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_tt__RecordingReference__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, tt__RecordingReference__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, tt__RecordingReference__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated tt__RecordingReference__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int tt__RecordingReference__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_tt__RecordingReference__(soap, tag ? tag : "tt:RecordingReference", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tt__RecordingReference__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tt__RecordingReference__(soap, this, tag, type);
}

SOAP_FMAC3 tt__RecordingReference__ * SOAP_FMAC4 soap_get_tt__RecordingReference__(struct soap *soap, tt__RecordingReference__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__RecordingReference__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void tt__ReceiverReference__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_tt__ReceiverReference(soap, &this->tt__ReceiverReference__::__item);
}

void tt__ReceiverReference__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_tt__ReceiverReference(soap, &this->tt__ReceiverReference__::__item);
#endif
}

int tt__ReceiverReference__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tt__ReceiverReference__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverReference__(struct soap *soap, const char *tag, int id, const tt__ReceiverReference__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_tt__ReceiverReference(soap, tag, id, &a->tt__ReceiverReference__::__item, "");
}

void *tt__ReceiverReference__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_tt__ReceiverReference__(soap, tag, this, type);
}

SOAP_FMAC3 tt__ReceiverReference__ * SOAP_FMAC4 soap_in_tt__ReceiverReference__(struct soap *soap, const char *tag, tt__ReceiverReference__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (tt__ReceiverReference__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tt__ReceiverReference__, sizeof(tt__ReceiverReference__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_tt__ReceiverReference__)
		return (tt__ReceiverReference__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_tt__ReceiverReference(soap, tag, &a->tt__ReceiverReference__::__item, "tt:ReceiverReference"))
		return NULL;
	return a;
}

SOAP_FMAC1 tt__ReceiverReference__ * SOAP_FMAC2 soap_instantiate_tt__ReceiverReference__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tt__ReceiverReference__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	tt__ReceiverReference__ *p;
	size_t k = sizeof(tt__ReceiverReference__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_tt__ReceiverReference__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, tt__ReceiverReference__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, tt__ReceiverReference__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated tt__ReceiverReference__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int tt__ReceiverReference__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_tt__ReceiverReference__(soap, tag ? tag : "tt:ReceiverReference", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tt__ReceiverReference__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tt__ReceiverReference__(soap, this, tag, type);
}

SOAP_FMAC3 tt__ReceiverReference__ * SOAP_FMAC4 soap_get_tt__ReceiverReference__(struct soap *soap, tt__ReceiverReference__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_tt__ReceiverReference__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wsa__FaultSubcodeValues__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_wsa__FaultSubcodeValues(soap, &this->wsa__FaultSubcodeValues__::__item);
}

void wsa__FaultSubcodeValues__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int wsa__FaultSubcodeValues__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsa__FaultSubcodeValues__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__FaultSubcodeValues__(struct soap *soap, const char *tag, int id, const wsa__FaultSubcodeValues__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wsa__FaultSubcodeValues(soap, tag, id, &a->wsa__FaultSubcodeValues__::__item, "");
}

void *wsa__FaultSubcodeValues__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_wsa__FaultSubcodeValues__(soap, tag, this, type);
}

SOAP_FMAC3 wsa__FaultSubcodeValues__ * SOAP_FMAC4 soap_in_wsa__FaultSubcodeValues__(struct soap *soap, const char *tag, wsa__FaultSubcodeValues__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wsa__FaultSubcodeValues__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa__FaultSubcodeValues__, sizeof(wsa__FaultSubcodeValues__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_wsa__FaultSubcodeValues__)
		return (wsa__FaultSubcodeValues__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_wsa__FaultSubcodeValues(soap, tag, &a->wsa__FaultSubcodeValues__::__item, "wsa:FaultSubcodeValues"))
		return NULL;
	return a;
}

SOAP_FMAC1 wsa__FaultSubcodeValues__ * SOAP_FMAC2 soap_instantiate_wsa__FaultSubcodeValues__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa__FaultSubcodeValues__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	wsa__FaultSubcodeValues__ *p;
	size_t k = sizeof(wsa__FaultSubcodeValues__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsa__FaultSubcodeValues__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, wsa__FaultSubcodeValues__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, wsa__FaultSubcodeValues__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated wsa__FaultSubcodeValues__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int wsa__FaultSubcodeValues__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_wsa__FaultSubcodeValues__(soap, tag ? tag : "wsa:FaultSubcodeValues", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsa__FaultSubcodeValues__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsa__FaultSubcodeValues__(soap, this, tag, type);
}

SOAP_FMAC3 wsa__FaultSubcodeValues__ * SOAP_FMAC4 soap_get_wsa__FaultSubcodeValues__(struct soap *soap, wsa__FaultSubcodeValues__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa__FaultSubcodeValues__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wsa__RelationshipTypeValues__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_wsa__RelationshipTypeValues(soap, &this->wsa__RelationshipTypeValues__::__item);
}

void wsa__RelationshipTypeValues__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int wsa__RelationshipTypeValues__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsa__RelationshipTypeValues__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__RelationshipTypeValues__(struct soap *soap, const char *tag, int id, const wsa__RelationshipTypeValues__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wsa__RelationshipTypeValues(soap, tag, id, &a->wsa__RelationshipTypeValues__::__item, "");
}

void *wsa__RelationshipTypeValues__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_wsa__RelationshipTypeValues__(soap, tag, this, type);
}

SOAP_FMAC3 wsa__RelationshipTypeValues__ * SOAP_FMAC4 soap_in_wsa__RelationshipTypeValues__(struct soap *soap, const char *tag, wsa__RelationshipTypeValues__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wsa__RelationshipTypeValues__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa__RelationshipTypeValues__, sizeof(wsa__RelationshipTypeValues__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_wsa__RelationshipTypeValues__)
		return (wsa__RelationshipTypeValues__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_wsa__RelationshipTypeValues(soap, tag, &a->wsa__RelationshipTypeValues__::__item, "wsa:RelationshipTypeValues"))
		return NULL;
	return a;
}

SOAP_FMAC1 wsa__RelationshipTypeValues__ * SOAP_FMAC2 soap_instantiate_wsa__RelationshipTypeValues__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa__RelationshipTypeValues__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	wsa__RelationshipTypeValues__ *p;
	size_t k = sizeof(wsa__RelationshipTypeValues__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsa__RelationshipTypeValues__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, wsa__RelationshipTypeValues__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, wsa__RelationshipTypeValues__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated wsa__RelationshipTypeValues__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int wsa__RelationshipTypeValues__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_wsa__RelationshipTypeValues__(soap, tag ? tag : "wsa:RelationshipTypeValues", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsa__RelationshipTypeValues__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsa__RelationshipTypeValues__(soap, this, tag, type);
}

SOAP_FMAC3 wsa__RelationshipTypeValues__ * SOAP_FMAC4 soap_get_wsa__RelationshipTypeValues__(struct soap *soap, wsa__RelationshipTypeValues__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa__RelationshipTypeValues__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wsd__FaultCodeType__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_wsd__FaultCodeType(soap, &this->wsd__FaultCodeType__::__item);
}

void wsd__FaultCodeType__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int wsd__FaultCodeType__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsd__FaultCodeType__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsd__FaultCodeType__(struct soap *soap, const char *tag, int id, const wsd__FaultCodeType__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wsd__FaultCodeType(soap, tag, id, &a->wsd__FaultCodeType__::__item, "");
}

void *wsd__FaultCodeType__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_wsd__FaultCodeType__(soap, tag, this, type);
}

SOAP_FMAC3 wsd__FaultCodeType__ * SOAP_FMAC4 soap_in_wsd__FaultCodeType__(struct soap *soap, const char *tag, wsd__FaultCodeType__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wsd__FaultCodeType__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsd__FaultCodeType__, sizeof(wsd__FaultCodeType__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_wsd__FaultCodeType__)
		return (wsd__FaultCodeType__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_wsd__FaultCodeType(soap, tag, &a->wsd__FaultCodeType__::__item, "wsd:FaultCodeType"))
		return NULL;
	return a;
}

SOAP_FMAC1 wsd__FaultCodeType__ * SOAP_FMAC2 soap_instantiate_wsd__FaultCodeType__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsd__FaultCodeType__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	wsd__FaultCodeType__ *p;
	size_t k = sizeof(wsd__FaultCodeType__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsd__FaultCodeType__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, wsd__FaultCodeType__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, wsd__FaultCodeType__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated wsd__FaultCodeType__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int wsd__FaultCodeType__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_wsd__FaultCodeType__(soap, tag ? tag : "wsd:FaultCodeType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsd__FaultCodeType__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsd__FaultCodeType__(soap, this, tag, type);
}

SOAP_FMAC3 wsd__FaultCodeType__ * SOAP_FMAC4 soap_get_wsd__FaultCodeType__(struct soap *soap, wsd__FaultCodeType__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsd__FaultCodeType__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wsd__RelationshipType__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_wsd__RelationshipType(soap, &this->wsd__RelationshipType__::__item);
}

void wsd__RelationshipType__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int wsd__RelationshipType__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wsd__RelationshipType__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsd__RelationshipType__(struct soap *soap, const char *tag, int id, const wsd__RelationshipType__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wsd__RelationshipType(soap, tag, id, &a->wsd__RelationshipType__::__item, "");
}

void *wsd__RelationshipType__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_wsd__RelationshipType__(soap, tag, this, type);
}

SOAP_FMAC3 wsd__RelationshipType__ * SOAP_FMAC4 soap_in_wsd__RelationshipType__(struct soap *soap, const char *tag, wsd__RelationshipType__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wsd__RelationshipType__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsd__RelationshipType__, sizeof(wsd__RelationshipType__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_wsd__RelationshipType__)
		return (wsd__RelationshipType__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_wsd__RelationshipType(soap, tag, &a->wsd__RelationshipType__::__item, "wsd:RelationshipType"))
		return NULL;
	return a;
}

SOAP_FMAC1 wsd__RelationshipType__ * SOAP_FMAC2 soap_instantiate_wsd__RelationshipType__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsd__RelationshipType__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	wsd__RelationshipType__ *p;
	size_t k = sizeof(wsd__RelationshipType__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsd__RelationshipType__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, wsd__RelationshipType__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, wsd__RelationshipType__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated wsd__RelationshipType__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int wsd__RelationshipType__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_wsd__RelationshipType__(soap, tag ? tag : "wsd:RelationshipType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wsd__RelationshipType__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wsd__RelationshipType__(soap, this, tag, type);
}

SOAP_FMAC3 wsd__RelationshipType__ * SOAP_FMAC4 soap_get_wsd__RelationshipType__(struct soap *soap, wsd__RelationshipType__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsd__RelationshipType__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wstop__SimpleTopicExpression__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_wstop__SimpleTopicExpression(soap, &this->wstop__SimpleTopicExpression__::__item);
}

void wstop__SimpleTopicExpression__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstop__SimpleTopicExpression(soap, &this->wstop__SimpleTopicExpression__::__item);
#endif
}

int wstop__SimpleTopicExpression__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__SimpleTopicExpression__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression__(struct soap *soap, const char *tag, int id, const wstop__SimpleTopicExpression__ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wstop__SimpleTopicExpression(soap, tag, id, &soap_tmp___item, "");
}

void *wstop__SimpleTopicExpression__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_wstop__SimpleTopicExpression__(soap, tag, this, type);
}

SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression__(struct soap *soap, const char *tag, wstop__SimpleTopicExpression__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wstop__SimpleTopicExpression__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__SimpleTopicExpression__, sizeof(wstop__SimpleTopicExpression__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_wstop__SimpleTopicExpression__)
		return (wstop__SimpleTopicExpression__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_wstop__SimpleTopicExpression(soap, tag, &a->wstop__SimpleTopicExpression__::__item, "wstop:SimpleTopicExpression"))
		return NULL;
	return a;
}

SOAP_FMAC1 wstop__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__SimpleTopicExpression__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__SimpleTopicExpression__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	wstop__SimpleTopicExpression__ *p;
	size_t k = sizeof(wstop__SimpleTopicExpression__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wstop__SimpleTopicExpression__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, wstop__SimpleTopicExpression__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, wstop__SimpleTopicExpression__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated wstop__SimpleTopicExpression__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int wstop__SimpleTopicExpression__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_wstop__SimpleTopicExpression__(soap, tag ? tag : "wstop:SimpleTopicExpression", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__SimpleTopicExpression__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__SimpleTopicExpression__(soap, this, tag, type);
}

SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression__(struct soap *soap, wstop__SimpleTopicExpression__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__SimpleTopicExpression__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void wstop__ConcreteTopicExpression__::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_wstop__ConcreteTopicExpression(soap, &this->wstop__ConcreteTopicExpression__::__item);
}

void wstop__ConcreteTopicExpression__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->wstop__ConcreteTopicExpression__::__item, SOAP_TYPE_wstop__ConcreteTopicExpression);
	soap_serialize_wstop__ConcreteTopicExpression(soap, &this->wstop__ConcreteTopicExpression__::__item);
#endif
}

int wstop__ConcreteTopicExpression__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_wstop__ConcreteTopicExpression__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression__(struct soap *soap, const char *tag, int id, const wstop__ConcreteTopicExpression__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wstop__ConcreteTopicExpression(soap, tag, id, &a->wstop__ConcreteTopicExpression__::__item, "");
}

void *wstop__ConcreteTopicExpression__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_wstop__ConcreteTopicExpression__(soap, tag, this, type);
}

SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression__(struct soap *soap, const char *tag, wstop__ConcreteTopicExpression__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (wstop__ConcreteTopicExpression__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wstop__ConcreteTopicExpression__, sizeof(wstop__ConcreteTopicExpression__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_wstop__ConcreteTopicExpression__)
		return (wstop__ConcreteTopicExpression__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_wstop__ConcreteTopicExpression(soap, tag, &a->wstop__ConcreteTopicExpression__::__item, "wstop:ConcreteTopicExpression"))
		return NULL;
	return a;
}

SOAP_FMAC1 wstop__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__ConcreteTopicExpression__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wstop__ConcreteTopicExpression__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	wstop__ConcreteTopicExpression__ *p;
	size_t k = sizeof(wstop__ConcreteTopicExpression__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wstop__ConcreteTopicExpression__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, wstop__ConcreteTopicExpression__);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, wstop__ConcreteTopicExpression__, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated wstop__ConcreteTopicExpression__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int wstop__ConcreteTopicExpression__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_wstop__ConcreteTopicExpression__(soap, tag ? tag : "wstop:ConcreteTopicExpression", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *wstop__ConcreteTopicExpression__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_wstop__ConcreteTopicExpression__(soap, this, tag, type);
}

SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression__(struct soap *soap, wstop__ConcreteTopicExpression__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__ConcreteTopicExpression__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_wstop__ConcreteTopicExpression), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__ConcreteTopicExpression, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_wstop__ConcreteTopicExpression, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_wstop__ConcreteTopicExpression, SOAP_TYPE_wstop__ConcreteTopicExpression, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__ConcreteTopicExpression(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_wstop__ConcreteTopicExpression(soap, tag ? tag : "wstop:ConcreteTopicExpression", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_wstop__ConcreteTopicExpression(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC_nnn.cpp */
